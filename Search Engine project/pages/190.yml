--- !ruby/object:WebPage
page: !ruby/object:Nokogiri::HTML::Document
  decorators: 
  node_cache:
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  errors:
  - !ruby/exception:Nokogiri::XML::SyntaxError
    message: |
      Opening and ending tag mismatch: font and b
    domain: 5
    code: 76
    level: 2
    file: "/tmp/open-uri20151214-18694-1dl8kf4"
    line: 166
    str1: font
    str2: b
    str3: 
    int1: 0
    column: 418
  - !ruby/exception:Nokogiri::XML::SyntaxError
    message: |
      Unexpected end tag : b
    domain: 5
    code: 76
    level: 2
    file: "/tmp/open-uri20151214-18694-1dl8kf4"
    line: 166
    str1: b
    str2: 
    str3: 
    int1: 0
    column: 685
address: http://en.citizendium.org/wiki?title=Theory_(mathematics)&printable=yes
inboundLinks: []
lines:
- |2+

- "\t\t\n"
- "\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- |2+

- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tTheory (mathematics)\n"
- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tFrom Citizendium, the Citizens' Compendium\n"
- "\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\tJump to:\t\t\t\t\tnavigation, \t\t\t\t\tsearch\n"
- "\t\t\t\t\n"
- "\t\t\t\t\n"
- |2+

- |2+

- |2+

- |2+

- |2+

- |
  addthis_pub     = 'citizendium';
- |
  addthis_logo    = '';
- |
  addthis_logo_color = '';
- |
  addthis_logo_background = '';
- |
  addthis_brand   = 'Citizendium';
- |
  addthis_options = '';
- |
  addthis_offset_top = '';
- |
  addthis_offset_left = '';
- |2+

- " \n"
- |
  Main Article
- "Talk \n"
- |
  Definition [?]
- |
  Related Articles  [?]
- |2+

- |2+

- |
  Bibliography   [?]
- |2+

- |2+

- |
  External Links  [?]
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |
  Citable Version  [?]
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |
        
- |2+

- |
   
- |2+

- |
     
- |
  This editable Main Article is under development and not meant to be cited; by editing it you can help to improve it towards a future approved, citable version. These unapproved articles are subject to a disclaimer. [edit intro]
- |2+

- |
  Similarly to a living thing, mathematics is a unity within an environment, yet apart from it — a compartment of a larger whole, structurally distinguishable though not functionally completely isolated from or closed to its surroundings.[1]
- "  (CC) Photo: Anders Sandberg \n"
- "  (CC) Image: Anders Sandberg \n"
- |
  Contents
- |
  1 Mathematics is structurally distinguishable
- |
  1.1 Axiomatic or non-axiomatic
- |
  1.2 Monotonic or non-monotonic
- |
  1.3 Sharp or fuzzy; real or ideal
- |
  1.4 Defined or undefined
- |2+

- |
  2 Mathematics is not isolated
- |
  2.1 Computers metaphor
- |
  2.2 Flexible or inflexible
- |
  2.3 Universal or specialized
- |
  2.4 Motivated or indiscriminate
- |
  2.5 From technical to human: definitions
- |2+

- |
  3 Principles and practices
- |
  3.1 Rigor or intuition
- |
  3.2 Formal or formalizable
- |
  3.3 Axiomatic or axiomatizable
- |2+

- |
  4 Some details
- |
  4.1 Consistent or inconsistent
- |
  4.2 Univalent or multivalent
- |
  4.3 Complete or incomplete
- |
  4.4 Definitions: abbreviations or extensions
- |
  4.5 Formalizable in reality or in principle
- |
  4.6 Generating all theorems; decidable or undecidable
- |
  4.7 A theory as a crystal ball?
- |2+

- |
  5 Notes
- |
  6 References
- |2+

- |2+

- |
  Mathematics is structurally distinguishable
- |
  Axiomatic or non-axiomatic
- |
  There are two possible approaches to mathematics, called by R. Feynman "the Babylonian tradition" and "the Greek tradition".[2] They answer differently the question, whether or not some mathematical facts are more fundamental than others, more consequential facts. The same approaches apply to any theory, mathematical or not.
- |
  The Babylonian (non-axiomatic) tradition treats a theory as a network whose nodes are facts and connections are derivations. If some facts are forgotten they probably can be derived from the others.
- |
  The Greek (axiomatic) tradition treats a theory as a tower of more consequential facts called theorems, grounded on the basis of more fundamental facts called axioms. If all theorems are forgotten they surely can be derived from the axioms. The axioms are sparse and simple, not to be forgotten.
- |2+

- |
  Monotonic or non-monotonic
- |
  The distinction between these two approaches is closely related to the distinction between monotonic and non-monotonic logic. These answer differently the question, whether or not a fact can be retracted because of new evidence. Monotonic logic answers in the negative, non-monotonic logic answers in the affirmative.
- |
  Non-monotonic logic is used routinely in everyday life and research. An example: "being a bird, this animal should fly", but the bird may appear to be a penguin. Another example: "the grass is wet, therefore it rained", but the cause may appear to be a sprinkler.
- |
  The non-axiomatic approach is flexible. When needed, some old facts can be retracted, some new facts added, and some derivations changed accordingly. Nowadays this approach is widely used outside mathematics, and only marginally within mathematics (so-called informal mathematics).
- |
  The axiomatic approach is inflexible. A theorem cannot be retracted without removing (or replacing) at least one axiom, which usually has dramatic consequences for many other theorems. Nowadays this approach is widely used in mathematics.
- |
  The non-axiomatic approach is well suited when new evidence often comes from the outside. The axiomatic approach is well suited for a theory that advances only by extracting new consequences from an immutable list of axioms. It may seem that such a development must be dull. Surprisingly, this is an illusion. Being inflexible in some sense, an axiomatic theory can be very flexible in another sense, see Sect. 2.2.
- |2+

- |
  Sharp or fuzzy; real or ideal
- |
  A fair coin is tossed 1000 times; can it happen at random that heads is obtained all the 1000 times? Emile Borel, a famous mathematician, answers in the negative, with an important reservation:
- |2+

- |
  Such is the sort of event which, though its impossibility may not be rationally demonstrable, is, however, so unlikely that no sensible person will hesitate to declare it actually impossible.[3]
- |
  Why `may not be rationally demonstrable'? Why does this statement remain outside the list of Borel's theorems in probability theory?
- |
  Mathematical truth is sharp, not fuzzy. Every mathematical statement is assumed to be either true or false (even if no one is able to decide) rather than "basically true", "true for all practical purposes" etc. If n heads out of n times is an impossible event for n=1000 then there must exist the least such n (be it known or not). Say, 665 heads can occur, but 666 heads cannot. Then, assuming that 665 heads have just appeared, we see that the next time tails is guaranteed, which contradicts to the assumed memoryless behavior of the coin.
- |
  Another example. The number 4 can be written as a sum of units: 1+1+1+1. Can the number 21000 be written as a sum of units?  Mathematics answers in the affirmative. Indeed, if you can write, say, 2665 as a sum of units, then you can do it twice (connecting the two copies by the plus sign). Complaints about limited resources, appropriate in the real world, are inappropriate in the imaginary, highly idealized mathematical universe.
- |2+

- |
  Defined or undefined
- |
  Facts are formulated via notions.
- |
  In the non-axiomatic approach, notions are nodes of a network whose connections are definitions. If some notions are forgotten they probably can be restored from the others.
- |
  Searching Google for "define:line" we get "a length without breadth or thickness". Similarly we find definitions for breadth, thickness and so on, recursively. Doing so we would get a large subnetwork; here is its small fragment:
- |2+

- |
  Line: a length without breadth or thickness
- |
  Length: linear extent in space
- |
  Linear: along a line↑
- |
  Extent: a range of locations
- |
  Location: point or extent↑ in space
- |
  Space: unlimited expanse in which everything is located↑
- |
  Breadth: the extent↑ from side to side
- |
  Side: a surface forming part of the outside of an object
- |
  Surface: the extended↑ two-dimensional outer boundary of a three-dimensional object
- |
  Thickness: the dimension through an object as opposed to its length↑ or width
- |
  Width: the extent↑ from side↑ to side↑(Up arrows mean: see above.) We observe that
- |2+

- |2
   circularity appears routinely; for example: line→length→linear→line;
- |2
   the definition of a single notion involves recursively a large number of other, quite remote notions.Such system of notions is unsuitable for a mathematical theory. Here, circularity is disallowed, and the set of involved notions is kept reasonably small (whenever possible). (See also Semantic primes for an attempt to disclose a common mathematics-like structure behind all natural languages.)
- |
  In the axiomatic approach, notions are a tower of defined notions, grounded on the basis of more fundamental notions called undefined primitives. If all defined notions are forgotten they surely can be restored from the undefined primitives. The undefined primitives are sparse and simple, not to be forgotten.
- |
  Curiously, when a non-mathematical encyclopedia contains an article on a mathematical notion, two very different "definitions" may appear, one general (informal), the other mathematical (formal).
- |
  From now on, in this article, "definition" means a mathematical definition (unless explicitly stated otherwise).
- |
  The lack of definition of a primitive notion does not mean lack of any information about this notion. Axioms provide such information, to be used in proofs. Informal (intuitive) understanding of a primitive notion is communicated in a natural language. This information cannot be used in proofs, but is instrumental when guessing what to prove, how to prove, how to apply proved theorems and, last but not least, what to postulate by axioms.
- |2+

- |
  Mathematics is not isolated
- |
  Computers metaphor
- |
  A conceptual metaphor helps to understand one conceptual domain in terms of another. For example, the desktop metaphor treats the monitor of a computer as if it is the user's desktop, which helps to a user not accustomed to the computer. Nowadays many are more accustomed to computers than to mathematics. Thus, analogies with computers may help to understand mathematics. Such analogies are widely used below.
- |2+

- |
  Flexible or inflexible
- |
  In 1960s a computer was an electronic monster able to read from a punch tape simple instructions stipulated by the hardware and execute them quickly, thus performing a lot of boring calculations. Nowadays some parents complain that personal computers are too fascinating. However, without software a personal computer is only able to read (say, from a compact disk) and execute instructions stipulated by the hardware. These instructions are now as technical as before: simple arithmetical and logical operations, loops, conditional execution etc. A computer is dull, be it a monster of 1960s or a nice looking personal computer, unless programmers develop fascinating combinations (called programs) of these technical instructions.
- |
  For a programmer, the instruction set of a given computer is an immutable list. The programmer cannot add new elements to this list, nor modify existing elements. In this sense the instruction set is inflexible. New programs are only new combinations of the given elements. Does it mean that program development is dull? In no way! A good instruction set is universal. It means that a competent programmer feels pretty free to implement any well-understood algorithm provided that the time permits (which is usually most problematic) and the memory and the speed of the computer are high enough (which is usually less problematic). In this sense a good instruction set is very flexible.
- |
  Likewise a mathematician working within a given theory faces its axioms as an immutable list. However, this list can be universal in the sense that a competent mathematician feels pretty free to express any clear mathematical idea. In this sense some axiomatic systems are very flexible.
- |2+

- |
  Universal or specialized
- |
  For a user, the software of a computer is first of all a collection of applications (games, web browsers, media players, word processors, image editors etc.) All applications function within an operating system (Windows, MacOS, Linux etc.) The operating system is a universal infrastructure behind various specialized applications. Each application deals with relevant files. The operating system maintains files in general, and catalogs (directories) containing files and possibly other catalogs.
- |
  Likewise, the set theory is a universal infrastructure behind various specialized mathematical theories (algebra, geometry, analysis etc.)  Each specialized mathematical theory deals with relevant objects, relations and sets. The sets theory deals with sets in general, possibly containing other sets, and reduces objects and relations to sets. Alternatively, higher-order logic can be used as such a universal infrastructure, more convenient for computer-assisted formalization of mathematics. Also category theory pretends to the throne of the set theory.[4]In many cases a specialized mathematical theory is a theory of mathematical structures of some kind, often called spaces (of this kind). For example: Euclidean geometry is a theory of Euclidean spaces; topology is a theory of topological spaces; linear algebra is a theory of linear spaces. Differential geometry investigates smooth manifolds. Algebra investigates groups, rings, fields etc.
- |2+

- |
  Motivated or indiscriminate
- |
  Monkeys could type into a computer a sequence of hardware instructions; the computer could execute them; but the result of such "programming" has almost no chance to be fascinating or useful. Fascinating computer games reflect human predilections. Useful programs reflect human needs. A computer is dull for humans unless its software reflects human life in one way or another.
- |
  Likewise, a theorem is of no interest for humans unless it is motivated in one way or another by human life. The motivation may be quite indirect; many theorems "only" help to prove other theorems, many are appreciated "only" for their aesthetic value, etc. But some kind of motivation is necessary. Indiscriminate stream of logical consequences of the axioms is not publishable in the mathematical literature.
- |
  Note that "a theorem" does not mean "a motivated theorem", "an important theorem" etc., not even "an already discovered theorem". All theorems are just an indiscriminate stream of logical consequences of the axioms.
- |
  Theorems of a theory are, by definition, statements that follow from the given axioms according to the given rules (called by different authors inference rules, derivation rules, deduction rules, transformation rules), including the axioms themselves.
- |2+

- |
  From technical to human: definitions
- |
  The gap between a bare hardware and a nice application is too wide for a single jump, or even a triple jump (hardware – operating system – programming language – application). Bridging the gap is a laborious task for many programmers. They compose programs of modules, and modules of subroutines. Each subroutine reduces a bit more useful task to a bit simpler tasks. Ultimately, a useful (or even fascinating) task is reduced to the technical instructions of the bare hardware.
- |
  Likewise, mathematicians bridge the wide gap between useful notions (say, "ellipse" or "normal distribution") and the undefined primitives by a large and complicated system of definitions. Each definition reduces a bit more useful notion to a bit more primitive notions.
- |
  Mathematical definitions are very diverse.
- |
  A definition may be just an abbreviation local to a single calculation, like this: "denoting for convenience  by  we have...".
- |
  A single definition may embed a whole specialized mathematical theory into the universal set-theoretic framework, like this:
- |
  "A Euclidean space consists, by definition, of three sets, whose elements are called points, lines and planes respectively, and six relations, one called betweenness, three called containment and two called congruence, satisfying the following conditions: ..."
- |
  A definition may be given mostly for speaking more concisely, like this: "in a triangle, the altitude of a vertex is, by definition, its distance to the line through the other two vertices".
- |
  A definition may introduce a new revolutionary concept, like this: "the derivative of a function at a point is, by definition, the limit of the ratio..."
- |2+

- |
  Some mathematicians will tell you that the main aim of their research is to find the right definition, after which their whole area will be illuminated. ... For other mathematicians, the main purpose of definitions is to prove theorems... [5]
- |
  Principles and practices
- |
  Rigor or intuition
- |
  Mathematics as a cultural process is not bound by monotonic logic. For example, it was treated till 1872 as intuitively evident fact that any curve on the plane has a tangent line everywhere except maybe a discrete set of points. However, this "fact" was refuted and retracted.
- |2+

- |
  A century later, we have seen so many monsters of this sort that we have become a little blasé. But the effect produced on the majority of nineteenth century mathematicians ranged from disgust to consternation.[6]
- |
  Since then, intuition is not a valid argument in mathematical proofs. A mathematical theory is bound by monotonic logic. If needed, mathematics as a cultural process can retract an axiomatic theory as whole (rather than some theorems) and accept another axiomatic theory. (Moreover, in a remote perspective the axiomatic approach could be abandoned.)
- |2+

- |
  Formal or formalizable
- |
  An example. If  then , since . This simple algebraic argument can be checked by a human or even a computer. No need to understand the meaning of the statement; it is sufficient to know the relevant formal rules. The statement follows from the given rules only, rigorously, without explicit or implicit use of intuition. A formal proof guarantees that a theorem will never be retracted.
- |
  A universal formal language conceived by Gottfried Leibniz near 1685,
- |2+

- |
  capable of expressing all humans thoughts unambiguously, of strengthening our power of deduction, of avoiding errors by a purely mechanical effort of attention[7]
- |
  was partially implemented in mathematics two centuries later, especially, as a formal language of set theory. In the form introduced by Bourbaki this language contains four logical signs, three specific signs, and letters. Its rules are considerably more complicated than elementary algebra.
- |
  However, this formal language is never used by a typical mathematician. Likewise, most programmers never use the instructions of the computer hardware. Instead, they develop applications in appropriate programming languages (BASIC, Java, C++, Python etc). A statement of a programming language corresponds usually to many hardware instructions; the correspondence is established by special programs (compilers and interpreters). A programming language is geared to programmers, hardware instructions --- to hardware.
- |
  The gap between the language of mathematical texts (books and articles) and the formal language of the set theory is even wider than the gap between a programming language and hardware instructions. It is as wide as the gap between pseudocode and Turing machines.
- |
  A programmer, when coding a program, knows that the computer does exactly what it is told to do. In contrast, an author or speaker, when communicating with other people, can be ambiguous, make small errors, and still expect to be understood. Pseudocode is a description of an algorithm, intended for human reading, that can be converted into a code by any competent programmer. A code is formal; a pseudocode is formalizable.
- |
  Likewise, communication between mathematicians is made in a formalizable language.
- |2+

- |
  In practice, the mathematician ... is content to bring the exposition to a point where his experience and mathematical flair tell him that translation into formal language would be no more than an exercise of patience (though doubtless a very tedious one).[8]
- |
  A mathematician, using a formalizable language, need not know all technical details of the underlying formal language. Many equivalent formal languages may be used interchangeably. Likewise, a single pseudocode can be used when coding in different programming languages, as long as these are not too far from each other.
- |2+

- |
  Axiomatic or axiomatizable
- |2
    Two finite lists of vectors generate (by summation) the same infinite set of vectors. Similarly, different finite lists of axioms can be used for generating the same infinite set of theorems.
- |
  A mathematician, working within an axiomatic theory, need not remember the list of axioms in full detail. It is sufficient to remember a list of theorems that contains all axioms or, more generally, such that each axiom follows easily from these theorems. (Here, as usual, "theorems" are treated inclusively, as "axioms and theorems".)
- |
  Two lists of axioms are called equivalent if every axiom of each list follows from the axioms of the other list. Such lists of axioms may be used interchangeably, since they generate the same theorems.
- |2+

- |
  Some details
- |
  Consistent or inconsistent
- |
  If a theory states that 2+2=5, it is a paradox but not yet a contradiction. By "paradox" people may mean
- |2+

- |
  a contradiction;
- |
  an apparent contradiction;
- |
  something counterintuitive;
- |
  something surprising;
- |
  something ironic;etc. In contrast, a contradiction (in a mathematical theory) is, by definition, a pair of theorems (of the given theory) such that one is the negation of the other. Thus, two theorems
- |2+

- " \n"
- |2
   are still not a contradiction. Two theorems
- |2+

- " \n"
- |2
   are a contradiction.
- |
  If a contradiction exists in a given theory, this theory is called inconsistent. Otherwise, if no contradictions exist (rather than merely not found for now), the theory is called consistent.
- |
  For a mathematician, an inconsistent theory is completely useless. Some philosophers disagree:
- |2+

- |
  Superstitious dread and veneration by mathematicians in face of a contradiction[9]
- |
  But a mathematician insists: an inconsistent theory is completely useless, since all statements (in the given language) are theorems! The reason is, proof by contradiction.
- |
  No matter which statement X is in question, we always can prove X as follows:
- |2+

- |2
   Assume that X is false;
- |2
   ... (put the proof of the contradiction here);
- |2
   the assumption leads to a contradiction, thus X is true.It is tempting to object that the contradiction has nothing in common with the assumption and therefore cannot invalidate it. However, the rules of formal logic do not demand that the contradiction has something in common with the assumption. Some attempts to change these rules were made (so-called "relevance logic", or "relevant logic"), but with little success. It is always possible to obfuscate the proof of the contradiction, making it seemingly entangled with X. We have no formal criterion able to unmask any possible fictitious participation of X in the proof of the contradiction.
- |
  David Hilbert aimed to find axioms sufficient for all mathematics and to prove their consistency from the assumption that the "finitary arithmetic" (a subsystem of the usual arithmetic of the positive integers, chosen to be philosophically uncontroversial) was consistent. A fatal blow was dealt by the second Gödel's incompleteness theorem. Consistency of a theory cannot be proved by a weaker theory, nor by the same theory. It can be proved by a stronger theory, which does not dispel doubts: if the given theory is inconsistent then the stronger theory, being all the more inconsistent, can prove every claim, be it true or false.
- |
  Many mathematicians feel that specialized theories, being more reliable than universal theories, are like watertight compartments. If a contradiction will be found in the used universal theory, specialized theories will separate and wait for a better universal theory.
- |2+

- |
  I have always felt that, if one day someone came up with a contradiction in mathematics, I would just say, "Well, those crazy logicians are at it again," and go about my business as I was going the day before.[10]
- |
  Univalent or multivalent
- |
  Plane geometry (called also "planar geometry") is a part of solid geometry that restricts itself to a single plane ("the plane") treated as a geometric universe. The question "which plane?" is inappropriate, since planes do not differ in their geometric properties. Every two planes α, β are isomorphic, that is, there exists an isomorphism f between α and β. Treating α and β as sets of points one defines isomorphism as an invertible (one-to-one and onto) map f : α → β preserving all primitive relations. Namely: f maps lines into lines; the distance between f(A) and f(B) on β is equal to the distance between A and B on α; etc. The same is required of the inverse map .
- |
  Axioms of the plane Euclidean geometry leave no freedom, they determine uniquely all geometric properties of the plane. More exactly: all Euclidean planes are mutually isomorphic. In this sense we have "the" Euclidean plane. In terms of Bourbaki, the plane
- |
  Euclidean geometry is an univalent theory. In contrast, axioms of a linear space (called also vector space) leave a freedom: a linear space may be one-dimensional, two-dimensional, three-dimensional, four-dimensional and so on (infinite dimension is also possible). Linear algebra is multivalent.
- |
  Axioms of topology leave much more freedom; every subset of (say) the plane is an example of a topological space, be it connected or not, compact or not, be it a curve, a domain, a fractal, or whatever; and all these are still a minority among all topological spaces. Topology is multivalent.
- |
  According to Bourbaki, the study of multivalent theories is the most striking feature which distinguishes modern mathematics from classical mathematics.[11]A similar idea occurs in mathematical logic: a theory is called categorical if all its models are mutually isomorphic. However, for Bourbaki a theory is embedded into the set theory, while in logic a theory is standalone (embedded into the first-order logic).
- |2+

- |
  Complete or incomplete
- |
  A theory is called complete, if every statement in its language can be proved or disproved. In other words: if such a statement is not a theorem then its negation is necessarily a theorem.
- |
  A statement (in the language of the given theory) is called independent (in other words, undecidable) in this theory, if it is not a theorem, but also its negation is not a theorem.
- |
  Independent statements appear naturally in multivalent theories. For example, in linear algebra the statement "three vectors cannot be linearly independent" is neither provable nor disprovable, since the dimension of a linear space may be 2 or 3 (or anything else).
- |
  Thus, multivalent theories are usually incomplete.
- |
  What about univalent theories? Seemingly, these should be complete. For example, the plane Euclidean geometry should prove all geometric statements that hold on the Euclidean plane, and only such statements. Similarly, arithmetics of natural numbers should prove all true arithmetical statements about natural numbers, and only these. Unexpectedly, the situation is far more complicated than these naive ideas, see Sect. 4.7.
- |2+

- |
  Definitions: abbreviations or extensions
- |
  According to Sect. 2.4, a theorem is a logical consequence of the axioms. However, what about definitions? They are numerous and important, according to Sect. 2.5. Two possible approaches to definitions answer differently the question, whether they belong to the formal theory or not.
- |
  One approach treats definitions as abbreviations, used in the formalizable language and eliminated when translating into the formal language. Thus, the formal theory contains only primitive notions and axioms, not definitions.
- |
  According to the other approach, each definition extends the formal theory. The new (extended) theory contains one more notion and one more axiom. Informally, the new notion is just defined, and the new axiom is just the definition. But formally, the new theory still contains only primitive notions and axioms, not definitions.
- |
  An example.
- |
  Definition: a prime number is a natural number having exactly two divisors. (These are 1 and the number itself, of course.)
- |
  Theorem: there are infinitely many prime numbers.
- |
  The first approach (abbreviations). In the formal language, the notion "prime" is eliminated, as follows. Theorem: there are infinitely many natural numbers having exactly two divisors. The proof also does not involve the notion "prime".
- |
  The second approach (extensions). The new formal theory stipulates a new primitive notion "prime" and a new axiom: a natural number is prime if and only if it has exactly two divisors. This axiom is used in the proof of the theorem.
- |2+

- |
  Formalizable in reality or in principle
- |
  The integer 1 is a very simple example of a mathematical object that can be defined in the language of set theory. Its definition, treated as an abbreviation (rather than extension), can be translated from this formalizable language into any corresponding formal language, in particular, into the formal language introduced by Bourbaki. However, the length of the resulting formal definition is equal to 4,523,659,424,929.[12] It would take about 4000 gigabytes of computer memory! More complicated mathematical definitions are much longer. Clearly, such formalization is possible only in principle, similarly to the possibility of writing 21000 as a sum of units.
- |
  This formal language is so verbose because of substitution. Here is an algebraic example: substituting  into  gives an expression of length 64, containing 8 occurrences of a. Further, substitute  and you get an expression of length 152, containing 24 occurrences of u. And so on.
- |
  There exist formal mathematical languages intended for practical use, for example, Mizar. These treat definitions as extensions.
- |2+

- |
  Generating all theorems; decidable or undecidable
- |
  It is impossible to list all theorems, since they are infinitely many. However, an endless algorithmic process can generate theorems, only theorems, and all theorems in the sense that every theorem will be generated, sooner or later. In more technical words: the set of all theorems is recursively enumerable. Some theories have infinitely many axioms generated by a finite list of so-called axiom schemata. Still, the set of all theorems is recursively enumerable, since the set of axioms is.
- |
  An open question (in a mathematical theory) is a statement neither proved nor disproved. It is possible (in principle, not necessarily in practice) to run the theorem-generating algorithm waiting for one of two events: either the given statement appears to be a theorem, or its negation does; in both cases the (formerly) open question is decided. If the theory is complete, this must happen sooner or later.
- |
  A theory is called decidable if there exists an algorithm that, given an arbitrary statement (in the language of the theory) decides whether it is a theorem or not. (In more technical words: if the set of all theorems is recursive.)
- |
  The argument above shows that a complete theory is decidable.
- |2+

- |
  A theory as a crystal ball?
- |
  Imagine a theory able to describe the whole discrete mathematics (the set theory?) or, at least, arbitrary algorithmic computations, in other words, formal machines (like computers, but with unlimited resources). Assume that the theorems include all true statements about these machines, and no wrong statements about them. Then a formal machine can use this theory as a "crystal ball", — for predicting the future of any formal machine. In particular, for deciding, whether a given machine will eventually halt, or will run forever (so-called halting problem). To this end it runs the theorem-generating algorithm until either the statement "such machine eventually halts" or its negation appears among the theorems.
- |
  In order to predict the future of a formal machine Y, a formal machine X needs the code of Y. It does not mean that the code of Y must be inscribed into (and therefore be shorter than) the code of X. Instead, X can generate the code of Y. This way, a single machine X can predict the future of infinitely many machines Y, and moreover, of all possible machines Y, generating their codes in an endless loop.
- |
  Can X predict its own future? It may seem that the affirmative answer is ensured by the argument above. However, how can X know, which Y is identical to X? In other words, how can X know (it means, be able to generate) its own code?
- |
  It is a well-known and nontrivial fact that some programs, so-called quine programs, can generate their own texts. (See also halting problem.) It may seem to be a trick, but in fact it is a form of self-replication, and it uses a 4×109 years old patent of life: a cell replicates itself using its DNA, and also replicates the DNA itself.
- |
  Using the quine technique, a machine X can predict its own future. Is it paradoxical? Seemingly not, since X is a deterministic machine, it has no free will. But nevertheless it is paradoxical, since we may program X as follows:
- |2+

- |
  predict your own future: whether you will eventually halt, or will run forever;
- |
  if "halt" is predicted, enter an infinite loop;
- |
  otherwise (if "run forever" is predicted), halt.We get a paradox, which means that the assumptions made in the beginning of this section cannot be satisfied. An axiomatic theory cannot be such that its theorems include all true statements about formal machines, and no wrong statements about them! This important conclusion is closely related to the famous Gödel theorem.[13]
- |
  Notes
- |
  ↑ This phrase is borrowed from "Life".
- |2+

- |
  ↑ Feynman 1995, Sect. 2, page 46.
- |2+

- |
  ↑ Borel 1962, page 3.
- |2+

- |
  ↑ Lawvere & Rosebrugh 2003.
- |2+

- |
  ↑ Gowers 2008, pages 74–75.
- |2+

- |
  ↑ Bourbaki 1968, page 311.
- |2+

- |
  ↑ Bourbaki 1968, page 302.
- |2+

- |
  ↑ Bourbaki 1968, page 8.
- |2+

- |
  ↑ Ludwig Wittgenstein.
- |2+

- |
  ↑ Vaughan Jones. See Casacuberta & Castellet 1992, page 91.
- |2+

- |
  ↑ Bourbaki 1968, page 385.
- |2+

- |
  ↑ Mathias 2002.
- |2+

- |
  ↑ The first incompleteness theorem of Gödel, somewhat stronger than this conclusion, states that a consistent and complete theory cannot contain Robinson arithmetics.
- |2+

- |2+

- |
  References
- |
  Borel, Émile (1962), Probabilities and life, Dover publ. (translation).
- |
  Bourbaki, Nicolas (1968), Elements of mathematics: Theory of sets, Hermann (original), Addison-Wesley (translation).
- |
  Casacuberta, C & M Castellet, eds. (1992), Mathematical research today and tomorrow: Viewpoints of seven Fields medalists, Lecture Notes in Mathematics, vol. 1525, Springer-Verlag, ISBN 3-540-56011-4.
- |
  Feynman, Richard (1995), The character of physical law (twenty second printing ed.), the MIT press, ISBN 0 262 56003 8.
- |
  Gowers, Timothy, ed. (2008), The Princeton companion to mathematics, Princeton University Press, ISBN 978-0-691-11880-2.
- |
  Lawvere, F. William & Robert Rosebrugh (2003), Sets for mathematics, Cambridge University Press, ISBN 0-521-80444-2.
- |
  Mathias, Adrian (2002), "A term of length 4,523,659,424,929", Synthese 133 (1/2):  75–86.
- |
  (Also here.)
- |2+

- |2+

- |2+

- |2+

- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tRetrieved from \"http://en.citizendium.org/wiki?title=Theory_(mathematics)&oldid=100831737\"\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tCategories: CZ LiveMathematics WorkgroupArticles written
  in American EnglishAll ContentMathematics ContentHidden category: Mathematics tag\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\n"
- "\t\t\tNavigation menu\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tPersonal tools\n"
- "\t\t\t\t\t\tLog inRequest account\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tNamespaces\n"
- "\t\t\t\t\t\tPage\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDiscussion\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\tVariants\n"
- |2+

- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tViews\n"
- "\t\t\t\t\t\tRead\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView source\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView history\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tMore\n"
- |2+

- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\tSearch\n"
- "\t\t\t\t\t\t\n"
- |2+

- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\n"
- "\t\t\t\n"
- "\t\t\t\t\n"
- "\t\t\t\t\t\t\n"
- "\t\t\tRead\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tWelcome to Citizendium\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tCitable Articles\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tAll Articles\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tRandom Page\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tArticle Changes\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tAll Recent Changes\n"
- "\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tDive In!\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tRegister\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tQuick Start\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tStart Article\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tArticle Mechanics\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tHow to edit pages\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tGeneral Help\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tHelp FAQs\n"
- "\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tCommunicate\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tContact\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tGet Involved\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tWorkgroups\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tMailing list\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tForum\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tNon-member forum\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tBlog\n"
- "\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tManagement\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tAbout\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tCZ FAQs\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tCharter\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tPersonnel\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tGovernance\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tCZ Council\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tPast managerial decisions\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tPast editorial decisions\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tPast Elections\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tConstabulary\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tFinancial report\n"
- "\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tTools\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tWhat links here\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tRelated changes\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tUpload file\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tSpecial pages\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tPermanent link\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\tPage information\n"
- "\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\t\n"
- "\t\t\n"
- "\t\t\n"
- "\t\t\t\t\t\t\t This page was last modified 02:32, 26 October 2013.\n"
- "\t\t\t\t\t\t\t\t\t\t\tCZ is free.  All written content is available under the Creative
  Commons-Attribution-ShareAlike 3.0 Unported license or any later.Written content
  that originated in part from Wikipedia is also available under GNU Free Documentation
  License 1.2.Dedicated server hosting generously provided by Steadfast NetworksHelp
  • Financial Report • Statistics • Blog\n"
- |
  Follow Citizendium on Twitter • Facebook • Google+
- "\t\t\t\t\t\t\t\t\tPrivacy policy\n"
- "\t\t\t\t\t\t\t\t\t\t\tAbout Citizendium\n"
- "\t\t\t\t\t\t\t\t\t\t\tDisclaimers\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/if(window.mw){\n"
- |
  mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
- |
  }if(window.mw){
- |
  mw.loader.load(["ext.treeandmenu","ext.cite","mediawiki.toc","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest"],null,true);
- |
  }if(window.mw){
- |
  document.write("\u003Cscript src=\"http://en.citizendium.org/load.php?debug=false\u0026amp;lang=en\u0026amp;modules=site\u0026amp;only=scripts\u0026amp;printable=1\u0026amp;skin=vector\u0026amp;*\"\u003E\u003C/script\u003E");
- |
  }if(window.mw){
- |
  mw.config.set({"wgBackendResponseTime":5215});
- |
  }Similarly to a living thing, mathematics is a unity within an environment, yet apart from it — a compartment of a larger whole, structurally distinguishable though not functionally completely isolated from or closed to its surroundings.[1]There are two possible approaches to mathematics, called by R. Feynman "the Babylonian tradition" and "the Greek tradition".[2] They answer differently the question, whether or not some mathematical facts are more fundamental than others, more consequential facts. The same approaches apply to any theory, mathematical or not.
- |
  The Babylonian (non-axiomatic) tradition treats a theory as a network whose nodes are facts and connections are derivations. If some facts are forgotten they probably can be derived from the others.
- |
  The Greek (axiomatic) tradition treats a theory as a tower of more consequential facts called theorems, grounded on the basis of more fundamental facts called axioms. If all theorems are forgotten they surely can be derived from the axioms. The axioms are sparse and simple, not to be forgotten.
- |
  The distinction between these two approaches is closely related to the distinction between monotonic and non-monotonic logic. These answer differently the question, whether or not a fact can be retracted because of new evidence. Monotonic logic answers in the negative, non-monotonic logic answers in the affirmative.
- |
  Non-monotonic logic is used routinely in everyday life and research. An example: "being a bird, this animal should fly", but the bird may appear to be a penguin. Another example: "the grass is wet, therefore it rained", but the cause may appear to be a sprinkler.
- |
  The non-axiomatic approach is flexible. When needed, some old facts can be retracted, some new facts added, and some derivations changed accordingly. Nowadays this approach is widely used outside mathematics, and only marginally within mathematics (so-called informal mathematics).
- |
  The axiomatic approach is inflexible. A theorem cannot be retracted without removing (or replacing) at least one axiom, which usually has dramatic consequences for many other theorems. Nowadays this approach is widely used in mathematics.
- |
  The non-axiomatic approach is well suited when new evidence often comes from the outside. The axiomatic approach is well suited for a theory that advances only by extracting new consequences from an immutable list of axioms. It may seem that such a development must be dull. Surprisingly, this is an illusion. Being inflexible in some sense, an axiomatic theory can be very flexible in another sense, see Sect. 2.2.
- |
  A fair coin is tossed 1000 times; can it happen at random that heads is obtained all the 1000 times? Emile Borel, a famous mathematician, answers in the negative, with an important reservation:
- |
  Why `may not be rationally demonstrable'? Why does this statement remain outside the list of Borel's theorems in probability theory?
- |
  Mathematical truth is sharp, not fuzzy. Every mathematical statement is assumed to be either true or false (even if no one is able to decide) rather than "basically true", "true for all practical purposes" etc. If n heads out of n times is an impossible event for n=1000 then there must exist the least such n (be it known or not). Say, 665 heads can occur, but 666 heads cannot. Then, assuming that 665 heads have just appeared, we see that the next time tails is guaranteed, which contradicts to the assumed memoryless behavior of the coin.
- |
  Another example. The number 4 can be written as a sum of units: 1+1+1+1. Can the number 21000 be written as a sum of units?  Mathematics answers in the affirmative. Indeed, if you can write, say, 2665 as a sum of units, then you can do it twice (connecting the two copies by the plus sign). Complaints about limited resources, appropriate in the real world, are inappropriate in the imaginary, highly idealized mathematical universe.
- |
  Facts are formulated via notions.
- |
  In the non-axiomatic approach, notions are nodes of a network whose connections are definitions. If some notions are forgotten they probably can be restored from the others.
- |
  Searching Google for "define:line" we get "a length without breadth or thickness". Similarly we find definitions for breadth, thickness and so on, recursively. Doing so we would get a large subnetwork; here is its small fragment:
- |
  (Up arrows mean: see above.) We observe that
- |
  Such system of notions is unsuitable for a mathematical theory. Here, circularity is disallowed, and the set of involved notions is kept reasonably small (whenever possible). (See also Semantic primes for an attempt to disclose a common mathematics-like structure behind all natural languages.)
- |
  In the axiomatic approach, notions are a tower of defined notions, grounded on the basis of more fundamental notions called undefined primitives. If all defined notions are forgotten they surely can be restored from the undefined primitives. The undefined primitives are sparse and simple, not to be forgotten.
- |
  Curiously, when a non-mathematical encyclopedia contains an article on a mathematical notion, two very different "definitions" may appear, one general (informal), the other mathematical (formal).
- |
  From now on, in this article, "definition" means a mathematical definition (unless explicitly stated otherwise).
- |
  The lack of definition of a primitive notion does not mean lack of any information about this notion. Axioms provide such information, to be used in proofs. Informal (intuitive) understanding of a primitive notion is communicated in a natural language. This information cannot be used in proofs, but is instrumental when guessing what to prove, how to prove, how to apply proved theorems and, last but not least, what to postulate by axioms.
- |
  A conceptual metaphor helps to understand one conceptual domain in terms of another. For example, the desktop metaphor treats the monitor of a computer as if it is the user's desktop, which helps to a user not accustomed to the computer. Nowadays many are more accustomed to computers than to mathematics. Thus, analogies with computers may help to understand mathematics. Such analogies are widely used below.
- |
  In 1960s a computer was an electronic monster able to read from a punch tape simple instructions stipulated by the hardware and execute them quickly, thus performing a lot of boring calculations. Nowadays some parents complain that personal computers are too fascinating. However, without software a personal computer is only able to read (say, from a compact disk) and execute instructions stipulated by the hardware. These instructions are now as technical as before: simple arithmetical and logical operations, loops, conditional execution etc. A computer is dull, be it a monster of 1960s or a nice looking personal computer, unless programmers develop fascinating combinations (called programs) of these technical instructions.
- |
  For a programmer, the instruction set of a given computer is an immutable list. The programmer cannot add new elements to this list, nor modify existing elements. In this sense the instruction set is inflexible. New programs are only new combinations of the given elements. Does it mean that program development is dull? In no way! A good instruction set is universal. It means that a competent programmer feels pretty free to implement any well-understood algorithm provided that the time permits (which is usually most problematic) and the memory and the speed of the computer are high enough (which is usually less problematic). In this sense a good instruction set is very flexible.
- |
  Likewise a mathematician working within a given theory faces its axioms as an immutable list. However, this list can be universal in the sense that a competent mathematician feels pretty free to express any clear mathematical idea. In this sense some axiomatic systems are very flexible.
- |
  For a user, the software of a computer is first of all a collection of applications (games, web browsers, media players, word processors, image editors etc.) All applications function within an operating system (Windows, MacOS, Linux etc.) The operating system is a universal infrastructure behind various specialized applications. Each application deals with relevant files. The operating system maintains files in general, and catalogs (directories) containing files and possibly other catalogs.
- |
  Likewise, the set theory is a universal infrastructure behind various specialized mathematical theories (algebra, geometry, analysis etc.)  Each specialized mathematical theory deals with relevant objects, relations and sets. The sets theory deals with sets in general, possibly containing other sets, and reduces objects and relations to sets. Alternatively, higher-order logic can be used as such a universal infrastructure, more convenient for computer-assisted formalization of mathematics. Also category theory pretends to the throne of the set theory.[4]In many cases a specialized mathematical theory is a theory of mathematical structures of some kind, often called spaces (of this kind). For example: Euclidean geometry is a theory of Euclidean spaces; topology is a theory of topological spaces; linear algebra is a theory of linear spaces. Differential geometry investigates smooth manifolds. Algebra investigates groups, rings, fields etc.
- |
  Monkeys could type into a computer a sequence of hardware instructions; the computer could execute them; but the result of such "programming" has almost no chance to be fascinating or useful. Fascinating computer games reflect human predilections. Useful programs reflect human needs. A computer is dull for humans unless its software reflects human life in one way or another.
- |
  Likewise, a theorem is of no interest for humans unless it is motivated in one way or another by human life. The motivation may be quite indirect; many theorems "only" help to prove other theorems, many are appreciated "only" for their aesthetic value, etc. But some kind of motivation is necessary. Indiscriminate stream of logical consequences of the axioms is not publishable in the mathematical literature.
- |
  Note that "a theorem" does not mean "a motivated theorem", "an important theorem" etc., not even "an already discovered theorem". All theorems are just an indiscriminate stream of logical consequences of the axioms.
- |
  Theorems of a theory are, by definition, statements that follow from the given axioms according to the given rules (called by different authors inference rules, derivation rules, deduction rules, transformation rules), including the axioms themselves.
- |
  The gap between a bare hardware and a nice application is too wide for a single jump, or even a triple jump (hardware – operating system – programming language – application). Bridging the gap is a laborious task for many programmers. They compose programs of modules, and modules of subroutines. Each subroutine reduces a bit more useful task to a bit simpler tasks. Ultimately, a useful (or even fascinating) task is reduced to the technical instructions of the bare hardware.
- |
  Likewise, mathematicians bridge the wide gap between useful notions (say, "ellipse" or "normal distribution") and the undefined primitives by a large and complicated system of definitions. Each definition reduces a bit more useful notion to a bit more primitive notions.
- |
  Mathematical definitions are very diverse.
- |
  A definition may be just an abbreviation local to a single calculation, like this: "denoting for convenience  by  we have...".
- |
  A single definition may embed a whole specialized mathematical theory into the universal set-theoretic framework, like this:
- |
  "A Euclidean space consists, by definition, of three sets, whose elements are called points, lines and planes respectively, and six relations, one called betweenness, three called containment and two called congruence, satisfying the following conditions: ..."
- |
  A definition may be given mostly for speaking more concisely, like this: "in a triangle, the altitude of a vertex is, by definition, its distance to the line through the other two vertices".
- |
  A definition may introduce a new revolutionary concept, like this: "the derivative of a function at a point is, by definition, the limit of the ratio..."
- |
  Mathematics as a cultural process is not bound by monotonic logic. For example, it was treated till 1872 as intuitively evident fact that any curve on the plane has a tangent line everywhere except maybe a discrete set of points. However, this "fact" was refuted and retracted.
- |
  Since then, intuition is not a valid argument in mathematical proofs. A mathematical theory is bound by monotonic logic. If needed, mathematics as a cultural process can retract an axiomatic theory as whole (rather than some theorems) and accept another axiomatic theory. (Moreover, in a remote perspective the axiomatic approach could be abandoned.)
- |
  An example. If  then , since . This simple algebraic argument can be checked by a human or even a computer. No need to understand the meaning of the statement; it is sufficient to know the relevant formal rules. The statement follows from the given rules only, rigorously, without explicit or implicit use of intuition. A formal proof guarantees that a theorem will never be retracted.
- |
  A universal formal language conceived by Gottfried Leibniz near 1685,
- |
  was partially implemented in mathematics two centuries later, especially, as a formal language of set theory. In the form introduced by Bourbaki this language contains four logical signs, three specific signs, and letters. Its rules are considerably more complicated than elementary algebra.
- |
  However, this formal language is never used by a typical mathematician. Likewise, most programmers never use the instructions of the computer hardware. Instead, they develop applications in appropriate programming languages (BASIC, Java, C++, Python etc). A statement of a programming language corresponds usually to many hardware instructions; the correspondence is established by special programs (compilers and interpreters). A programming language is geared to programmers, hardware instructions --- to hardware.
- |
  The gap between the language of mathematical texts (books and articles) and the formal language of the set theory is even wider than the gap between a programming language and hardware instructions. It is as wide as the gap between pseudocode and Turing machines.
- |
  A programmer, when coding a program, knows that the computer does exactly what it is told to do. In contrast, an author or speaker, when communicating with other people, can be ambiguous, make small errors, and still expect to be understood. Pseudocode is a description of an algorithm, intended for human reading, that can be converted into a code by any competent programmer. A code is formal; a pseudocode is formalizable.
- |
  Likewise, communication between mathematicians is made in a formalizable language.
- |
  A mathematician, using a formalizable language, need not know all technical details of the underlying formal language. Many equivalent formal languages may be used interchangeably. Likewise, a single pseudocode can be used when coding in different programming languages, as long as these are not too far from each other.
- |
  A mathematician, working within an axiomatic theory, need not remember the list of axioms in full detail. It is sufficient to remember a list of theorems that contains all axioms or, more generally, such that each axiom follows easily from these theorems. (Here, as usual, "theorems" are treated inclusively, as "axioms and theorems".)
- |
  Two lists of axioms are called equivalent if every axiom of each list follows from the axioms of the other list. Such lists of axioms may be used interchangeably, since they generate the same theorems.
- |
  If a theory states that 2+2=5, it is a paradox but not yet a contradiction. By "paradox" people may mean
- |
  etc. In contrast, a contradiction (in a mathematical theory) is, by definition, a pair of theorems (of the given theory) such that one is the negation of the other. Thus, two theorems
- |
  are still not a contradiction. Two theorems
- |
  are a contradiction.
- |
  If a contradiction exists in a given theory, this theory is called inconsistent. Otherwise, if no contradictions exist (rather than merely not found for now), the theory is called consistent.
- |
  For a mathematician, an inconsistent theory is completely useless. Some philosophers disagree:
- |
  But a mathematician insists: an inconsistent theory is completely useless, since all statements (in the given language) are theorems! The reason is, proof by contradiction.
- |
  No matter which statement X is in question, we always can prove X as follows:
- |
  It is tempting to object that the contradiction has nothing in common with the assumption and therefore cannot invalidate it. However, the rules of formal logic do not demand that the contradiction has something in common with the assumption. Some attempts to change these rules were made (so-called "relevance logic", or "relevant logic"), but with little success. It is always possible to obfuscate the proof of the contradiction, making it seemingly entangled with X. We have no formal criterion able to unmask any possible fictitious participation of X in the proof of the contradiction.
- |
  David Hilbert aimed to find axioms sufficient for all mathematics and to prove their consistency from the assumption that the "finitary arithmetic" (a subsystem of the usual arithmetic of the positive integers, chosen to be philosophically uncontroversial) was consistent. A fatal blow was dealt by the second Gödel's incompleteness theorem. Consistency of a theory cannot be proved by a weaker theory, nor by the same theory. It can be proved by a stronger theory, which does not dispel doubts: if the given theory is inconsistent then the stronger theory, being all the more inconsistent, can prove every claim, be it true or false.
- |
  Many mathematicians feel that specialized theories, being more reliable than universal theories, are like watertight compartments. If a contradiction will be found in the used universal theory, specialized theories will separate and wait for a better universal theory.
- |
  Plane geometry (called also "planar geometry") is a part of solid geometry that restricts itself to a single plane ("the plane") treated as a geometric universe. The question "which plane?" is inappropriate, since planes do not differ in their geometric properties. Every two planes α, β are isomorphic, that is, there exists an isomorphism f between α and β. Treating α and β as sets of points one defines isomorphism as an invertible (one-to-one and onto) map f : α → β preserving all primitive relations. Namely: f maps lines into lines; the distance between f(A) and f(B) on β is equal to the distance between A and B on α; etc. The same is required of the inverse map .
- |
  Axioms of the plane Euclidean geometry leave no freedom, they determine uniquely all geometric properties of the plane. More exactly: all Euclidean planes are mutually isomorphic. In this sense we have "the" Euclidean plane. In terms of Bourbaki, the plane
- |
  Euclidean geometry is an univalent theory. In contrast, axioms of a linear space (called also vector space) leave a freedom: a linear space may be one-dimensional, two-dimensional, three-dimensional, four-dimensional and so on (infinite dimension is also possible). Linear algebra is multivalent.
- |
  Axioms of topology leave much more freedom; every subset of (say) the plane is an example of a topological space, be it connected or not, compact or not, be it a curve, a domain, a fractal, or whatever; and all these are still a minority among all topological spaces. Topology is multivalent.
- |
  According to Bourbaki, the study of multivalent theories is the most striking feature which distinguishes modern mathematics from classical mathematics.[11]A similar idea occurs in mathematical logic: a theory is called categorical if all its models are mutually isomorphic. However, for Bourbaki a theory is embedded into the set theory, while in logic a theory is standalone (embedded into the first-order logic).
- |
  A theory is called complete, if every statement in its language can be proved or disproved. In other words: if such a statement is not a theorem then its negation is necessarily a theorem.
- |
  A statement (in the language of the given theory) is called independent (in other words, undecidable) in this theory, if it is not a theorem, but also its negation is not a theorem.
- |
  Independent statements appear naturally in multivalent theories. For example, in linear algebra the statement "three vectors cannot be linearly independent" is neither provable nor disprovable, since the dimension of a linear space may be 2 or 3 (or anything else).
- |
  Thus, multivalent theories are usually incomplete.
- |
  What about univalent theories? Seemingly, these should be complete. For example, the plane Euclidean geometry should prove all geometric statements that hold on the Euclidean plane, and only such statements. Similarly, arithmetics of natural numbers should prove all true arithmetical statements about natural numbers, and only these. Unexpectedly, the situation is far more complicated than these naive ideas, see Sect. 4.7.
- |
  According to Sect. 2.4, a theorem is a logical consequence of the axioms. However, what about definitions? They are numerous and important, according to Sect. 2.5. Two possible approaches to definitions answer differently the question, whether they belong to the formal theory or not.
- |
  One approach treats definitions as abbreviations, used in the formalizable language and eliminated when translating into the formal language. Thus, the formal theory contains only primitive notions and axioms, not definitions.
- |
  According to the other approach, each definition extends the formal theory. The new (extended) theory contains one more notion and one more axiom. Informally, the new notion is just defined, and the new axiom is just the definition. But formally, the new theory still contains only primitive notions and axioms, not definitions.
- |
  An example.
- |
  Definition: a prime number is a natural number having exactly two divisors. (These are 1 and the number itself, of course.)
- |
  Theorem: there are infinitely many prime numbers.
- |
  The first approach (abbreviations). In the formal language, the notion "prime" is eliminated, as follows. Theorem: there are infinitely many natural numbers having exactly two divisors. The proof also does not involve the notion "prime".
- |
  The second approach (extensions). The new formal theory stipulates a new primitive notion "prime" and a new axiom: a natural number is prime if and only if it has exactly two divisors. This axiom is used in the proof of the theorem.
- |
  The integer 1 is a very simple example of a mathematical object that can be defined in the language of set theory. Its definition, treated as an abbreviation (rather than extension), can be translated from this formalizable language into any corresponding formal language, in particular, into the formal language introduced by Bourbaki. However, the length of the resulting formal definition is equal to 4,523,659,424,929.[12] It would take about 4000 gigabytes of computer memory! More complicated mathematical definitions are much longer. Clearly, such formalization is possible only in principle, similarly to the possibility of writing 21000 as a sum of units.
- |
  This formal language is so verbose because of substitution. Here is an algebraic example: substituting  into  gives an expression of length 64, containing 8 occurrences of a. Further, substitute  and you get an expression of length 152, containing 24 occurrences of u. And so on.
- |
  There exist formal mathematical languages intended for practical use, for example, Mizar. These treat definitions as extensions.
- |
  It is impossible to list all theorems, since they are infinitely many. However, an endless algorithmic process can generate theorems, only theorems, and all theorems in the sense that every theorem will be generated, sooner or later. In more technical words: the set of all theorems is recursively enumerable. Some theories have infinitely many axioms generated by a finite list of so-called axiom schemata. Still, the set of all theorems is recursively enumerable, since the set of axioms is.
- |
  An open question (in a mathematical theory) is a statement neither proved nor disproved. It is possible (in principle, not necessarily in practice) to run the theorem-generating algorithm waiting for one of two events: either the given statement appears to be a theorem, or its negation does; in both cases the (formerly) open question is decided. If the theory is complete, this must happen sooner or later.
- |
  A theory is called decidable if there exists an algorithm that, given an arbitrary statement (in the language of the theory) decides whether it is a theorem or not. (In more technical words: if the set of all theorems is recursive.)
- |
  The argument above shows that a complete theory is decidable.
- |
  Imagine a theory able to describe the whole discrete mathematics (the set theory?) or, at least, arbitrary algorithmic computations, in other words, formal machines (like computers, but with unlimited resources). Assume that the theorems include all true statements about these machines, and no wrong statements about them. Then a formal machine can use this theory as a "crystal ball", — for predicting the future of any formal machine. In particular, for deciding, whether a given machine will eventually halt, or will run forever (so-called halting problem). To this end it runs the theorem-generating algorithm until either the statement "such machine eventually halts" or its negation appears among the theorems.
- |
  In order to predict the future of a formal machine Y, a formal machine X needs the code of Y. It does not mean that the code of Y must be inscribed into (and therefore be shorter than) the code of X. Instead, X can generate the code of Y. This way, a single machine X can predict the future of infinitely many machines Y, and moreover, of all possible machines Y, generating their codes in an endless loop.
- |
  Can X predict its own future? It may seem that the affirmative answer is ensured by the argument above. However, how can X know, which Y is identical to X? In other words, how can X know (it means, be able to generate) its own code?
- |
  It is a well-known and nontrivial fact that some programs, so-called quine programs, can generate their own texts. (See also halting problem.) It may seem to be a trick, but in fact it is a form of self-replication, and it uses a 4×109 years old patent of life: a cell replicates itself using its DNA, and also replicates the DNA itself.
- |
  Using the quine technique, a machine X can predict its own future. Is it paradoxical? Seemingly not, since X is a deterministic machine, it has no free will. But nevertheless it is paradoxical, since we may program X as follows:
- |
  We get a paradox, which means that the assumptions made in the beginning of this section cannot be satisfied. An axiomatic theory cannot be such that its theorems include all true statements about formal machines, and no wrong statements about them! This important conclusion is closely related to the famous Gödel theorem.[13]Borel, Émile (1962), Probabilities and life, Dover publ. (translation).
- |
  Bourbaki, Nicolas (1968), Elements of mathematics: Theory of sets, Hermann (original), Addison-Wesley (translation).
- |
  Casacuberta, C & M Castellet, eds. (1992), Mathematical research today and tomorrow: Viewpoints of seven Fields medalists, Lecture Notes in Mathematics, vol. 1525, Springer-Verlag, ISBN 3-540-56011-4.
- |
  Feynman, Richard (1995), The character of physical law (twenty second printing ed.), the MIT press, ISBN 0 262 56003 8.
- |
  Gowers, Timothy, ed. (2008), The Princeton companion to mathematics, Princeton University Press, ISBN 978-0-691-11880-2.
- |
  Lawvere, F. William & Robert Rosebrugh (2003), Sets for mathematics, Cambridge University Press, ISBN 0-521-80444-2.
- |
  Mathias, Adrian (2002), "A term of length 4,523,659,424,929", Synthese 133 (1/2):  75–86.
- |
  (Also here.)
index:
  theory: !ruby/object:Word
    word: theory
    stem: theori
    docFrequency: 139.0
    docPositions:
    - 7
    - 143
    - 151
    - 152
    - 153
    - 160
    - 166
    - 188
    - 201
    - 205
    - 211
    - 218
    - 229
    - 236
    - 238
    - 247
    - 252
    - 258
    - 265
    - 266
    - 269
    - 275
    - 276
    - 282
    - 284
    - 287
    - 288
    - 294
    - 295
    - 296
    - 301
    - 304
    - 310
    - 311
    - 312
    - 314
    - 315
    - 323
    - 349
    - 354
    - 506
    - 507
    - 508
    - 513
    - 515
    - 522
    - 530
    - 532
    - 536
    - 541
    - 546
    - 549
    - 551
    - 555
    - 557
    - 558
    - 561
    - 562
    - 563
    - 566
    - 567
    - 570
    - 572
    - 573
    - 574
    - 578
    - 579
    - 580
    - 585
    - 586
    - 590
    - 591
    - 592
    - 593
    - 598
    - 599
  mathematics: !ruby/object:Word
    word: mathematics
    stem: mathemat
    docFrequency: 53.0
    docPositions:
    - 7
    - 114
    - 118
    - 124
    - 149
    - 151
    - 158
    - 159
    - 168
    - 188
    - 194
    - 196
    - 205
    - 226
    - 229
    - 236
    - 275
    - 278
    - 284
    - 315
    - 354
    - 355
    - 357
    - 358
    - 366
    - 367
    - 506
    - 511
    - 512
    - 517
    - 522
    - 527
    - 532
    - 545
    - 546
    - 549
    - 566
    - 572
    - 593
    - 599
    - 600
    - 602
    - 603
  citizendium: !ruby/object:Word
    word: citizendium
    stem: citizendium
    docFrequency: 9.0
    docPositions:
    - 9
    - 20
    - 24
    - 366
    - 421
    - 489
    - 491
    - 503
  citizens: !ruby/object:Word
    word: citizens
    stem: citizen
    docFrequency: 2.0
    docPositions:
    - 9
  compendium: !ruby/object:Word
    word: compendium
    stem: compendium
    docFrequency: 2.0
    docPositions:
    - 9
  jump: !ruby/object:Word
    word: jump
    stem: jump
    docFrequency: 6.0
    docPositions:
    - 12
    - 214
    - 537
  navigation: !ruby/object:Word
    word: navigation
    stem: navig
    docFrequency: 3.0
    docPositions:
    - 12
    - 371
  search: !ruby/object:Word
    word: search
    stem: search
    docFrequency: 3.0
    docPositions:
    - 12
    - 405
  addthis_pub: !ruby/object:Word
    word: addthis_pub
    stem: addthis_pub
    docFrequency: 2.0
    docPositions:
    - 20
  addthis_logo: !ruby/object:Word
    word: addthis_logo
    stem: addthis_logo
    docFrequency: 2.0
    docPositions:
    - 21
  addthis_logo_color: !ruby/object:Word
    word: addthis_logo_color
    stem: addthis_logo_color
    docFrequency: 2.0
    docPositions:
    - 22
  addthis_logo_background: !ruby/object:Word
    word: addthis_logo_background
    stem: addthis_logo_background
    docFrequency: 2.0
    docPositions:
    - 23
  addthis_brand: !ruby/object:Word
    word: addthis_brand
    stem: addthis_brand
    docFrequency: 2.0
    docPositions:
    - 24
  addthis_options: !ruby/object:Word
    word: addthis_options
    stem: addthis_opt
    docFrequency: 2.0
    docPositions:
    - 25
  addthis_offset_top: !ruby/object:Word
    word: addthis_offset_top
    stem: addthis_offset_top
    docFrequency: 2.0
    docPositions:
    - 26
  addthis_offset_left: !ruby/object:Word
    word: addthis_offset_left
    stem: addthis_offset_left
    docFrequency: 2.0
    docPositions:
    - 27
  main: !ruby/object:Word
    word: main
    stem: main
    docFrequency: 5.0
    docPositions:
    - 30
    - 112
    - 223
  article: !ruby/object:Word
    word: article
    stem: articl
    docFrequency: 10.0
    docPositions:
    - 30
    - 112
    - 190
    - 191
    - 425
    - 435
    - 436
    - 524
    - 525
  talk: !ruby/object:Word
    word: talk
    stem: talk
    docFrequency: 2.0
    docPositions:
    - 31
  definition: !ruby/object:Word
    word: definition
    stem: definit
    docFrequency: 40.0
    docPositions:
    - 32
    - 188
    - 191
    - 192
    - 211
    - 215
    - 217
    - 218
    - 219
    - 220
    - 221
    - 223
    - 258
    - 296
    - 298
    - 304
    - 525
    - 526
    - 536
    - 538
    - 540
    - 541
    - 542
    - 543
    - 544
    - 558
    - 580
    - 582
    - 586
  related: !ruby/object:Word
    word: related
    stem: relat
    docFrequency: 7.0
    docPositions:
    - 33
    - 156
    - 323
    - 477
    - 509
    - 598
  articles: !ruby/object:Word
    word: articles
    stem: articl
    docFrequency: 7.0
    docPositions:
    - 33
    - 112
    - 238
    - 422
    - 423
    - 551
  bibliography: !ruby/object:Word
    word: bibliography
    stem: bibliographi
    docFrequency: 2.0
    docPositions:
    - 36
  external: !ruby/object:Word
    word: external
    stem: extern
    docFrequency: 2.0
    docPositions:
    - 39
  links: !ruby/object:Word
    word: links
    stem: link
    docFrequency: 3.0
    docPositions:
    - 39
    - 476
  citable: !ruby/object:Word
    word: citable
    stem: citabl
    docFrequency: 4.0
    docPositions:
    - 46
    - 112
    - 422
  version: !ruby/object:Word
    word: version
    stem: version
    docFrequency: 3.0
    docPositions:
    - 46
    - 112
  editable: !ruby/object:Word
    word: editable
    stem: edit
    docFrequency: 2.0
    docPositions:
    - 112
  under: !ruby/object:Word
    word: under
    stem: under
    docFrequency: 4.0
    docPositions:
    - 112
    - 488
  development: !ruby/object:Word
    word: development
    stem: develop
    docFrequency: 6.0
    docPositions:
    - 112
    - 160
    - 200
    - 513
    - 529
  and: !ruby/object:Word
    word: and
    stem: and
    docFrequency: 150.0
    docPositions:
    - 112
    - 131
    - 151
    - 152
    - 153
    - 156
    - 157
    - 158
    - 173
    - 188
    - 189
    - 192
    - 199
    - 200
    - 204
    - 205
    - 214
    - 215
    - 219
    - 224
    - 226
    - 229
    - 236
    - 237
    - 238
    - 239
    - 242
    - 247
    - 268
    - 274
    - 275
    - 276
    - 278
    - 280
    - 282
    - 283
    - 291
    - 294
    - 295
    - 296
    - 298
    - 301
    - 305
    - 309
    - 315
    - 316
    - 318
    - 323
    - 349
    - 353
    - 355
    - 506
    - 507
    - 508
    - 509
    - 510
    - 511
    - 520
    - 522
    - 523
    - 526
    - 528
    - 529
    - 531
    - 532
    - 537
    - 538
    - 542
    - 545
    - 546
    - 549
    - 550
    - 551
    - 552
    - 555
    - 565
    - 566
    - 567
    - 568
    - 570
    - 571
    - 577
    - 578
    - 579
    - 580
    - 582
    - 585
    - 587
    - 589
    - 593
    - 594
    - 596
    - 598
    - 600
  not: !ruby/object:Word
    word: not
    stem: not
    docFrequency: 83.0
    docPositions:
    - 112
    - 114
    - 124
    - 151
    - 153
    - 156
    - 165
    - 166
    - 167
    - 189
    - 192
    - 194
    - 196
    - 209
    - 210
    - 226
    - 229
    - 243
    - 247
    - 252
    - 261
    - 265
    - 274
    - 275
    - 280
    - 283
    - 287
    - 288
    - 294
    - 295
    - 296
    - 300
    - 310
    - 311
    - 316
    - 319
    - 506
    - 508
    - 509
    - 515
    - 516
    - 523
    - 526
    - 527
    - 534
    - 535
    - 545
    - 546
    - 554
    - 555
    - 557
    - 559
    - 561
    - 565
    - 566
    - 568
    - 571
    - 573
    - 574
    - 578
    - 579
    - 580
    - 584
    - 590
    - 591
    - 594
    - 597
  meant: !ruby/object:Word
    word: meant
    stem: meant
    docFrequency: 2.0
    docPositions:
    - 112
  cited: !ruby/object:Word
    word: cited
    stem: cite
    docFrequency: 2.0
    docPositions:
    - 112
  editing: !ruby/object:Word
    word: editing
    stem: edit
    docFrequency: 2.0
    docPositions:
    - 112
  you: !ruby/object:Word
    word: you
    stem: you
    docFrequency: 10.0
    docPositions:
    - 112
    - 168
    - 223
    - 305
    - 321
    - 517
    - 587
  can: !ruby/object:Word
    word: can
    stem: can
    docFrequency: 73.0
    docPositions:
    - 112
    - 152
    - 153
    - 156
    - 158
    - 160
    - 163
    - 167
    - 168
    - 172
    - 189
    - 201
    - 205
    - 229
    - 232
    - 239
    - 243
    - 246
    - 270
    - 275
    - 287
    - 304
    - 309
    - 315
    - 316
    - 317
    - 318
    - 319
    - 507
    - 508
    - 509
    - 511
    - 513
    - 514
    - 516
    - 517
    - 519
    - 523
    - 530
    - 532
    - 546
    - 547
    - 552
    - 554
    - 564
    - 566
    - 573
    - 586
    - 589
    - 593
    - 594
    - 595
    - 596
    - 597
  help: !ruby/object:Word
    word: help
    stem: help
    docFrequency: 8.0
    docPositions:
    - 112
    - 196
    - 209
    - 438
    - 439
    - 527
    - 534
  improve: !ruby/object:Word
    word: improve
    stem: improv
    docFrequency: 2.0
    docPositions:
    - 112
  towards: !ruby/object:Word
    word: towards
    stem: toward
    docFrequency: 2.0
    docPositions:
    - 112
  future: !ruby/object:Word
    word: future
    stem: futur
    docFrequency: 13.0
    docPositions:
    - 112
    - 315
    - 316
    - 317
    - 319
    - 321
    - 593
    - 594
    - 595
    - 597
  approved: !ruby/object:Word
    word: approved
    stem: approv
    docFrequency: 2.0
    docPositions:
    - 112
  these: !ruby/object:Word
    word: these
    stem: these
    docFrequency: 30.0
    docPositions:
    - 112
    - 156
    - 199
    - 243
    - 247
    - 274
    - 283
    - 291
    - 298
    - 306
    - 315
    - 509
    - 528
    - 554
    - 555
    - 565
    - 571
    - 577
    - 582
    - 588
    - 593
  unapproved: !ruby/object:Word
    word: unapproved
    stem: unapprov
    docFrequency: 2.0
    docPositions:
    - 112
  subject: !ruby/object:Word
    word: subject
    stem: subject
    docFrequency: 2.0
    docPositions:
    - 112
  disclaimer: !ruby/object:Word
    word: disclaimer
    stem: disclaim
    docFrequency: 2.0
    docPositions:
    - 112
  edit: !ruby/object:Word
    word: edit
    stem: edit
    docFrequency: 3.0
    docPositions:
    - 112
    - 437
  intro: !ruby/object:Word
    word: intro
    stem: intro
    docFrequency: 2.0
    docPositions:
    - 112
  similarly: !ruby/object:Word
    word: similarly
    stem: similarli
    docFrequency: 10.0
    docPositions:
    - 114
    - 173
    - 246
    - 291
    - 304
    - 506
    - 520
    - 577
    - 586
  living: !ruby/object:Word
    word: living
    stem: live
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  thing: !ruby/object:Word
    word: thing
    stem: thing
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  unity: !ruby/object:Word
    word: unity
    stem: uniti
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  within: !ruby/object:Word
    word: within
    stem: within
    docFrequency: 11.0
    docPositions:
    - 114
    - 158
    - 201
    - 204
    - 247
    - 506
    - 511
    - 530
    - 531
    - 555
  environment: !ruby/object:Word
    word: environment
    stem: environ
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  yet: !ruby/object:Word
    word: yet
    stem: yet
    docFrequency: 5.0
    docPositions:
    - 114
    - 252
    - 506
    - 557
  apart: !ruby/object:Word
    word: apart
    stem: apart
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  compartment: !ruby/object:Word
    word: compartment
    stem: compart
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  larger: !ruby/object:Word
    word: larger
    stem: larger
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  whole: !ruby/object:Word
    word: whole
    stem: whole
    docFrequency: 10.0
    docPositions:
    - 114
    - 218
    - 223
    - 229
    - 315
    - 506
    - 541
    - 546
    - 593
  structurally: !ruby/object:Word
    word: structurally
    stem: structur
    docFrequency: 5.0
    docPositions:
    - 114
    - 118
    - 149
    - 506
  distinguishable: !ruby/object:Word
    word: distinguishable
    stem: distinguish
    docFrequency: 5.0
    docPositions:
    - 114
    - 118
    - 149
    - 506
  though: !ruby/object:Word
    word: though
    stem: though
    docFrequency: 5.0
    docPositions:
    - 114
    - 165
    - 242
    - 506
  functionally: !ruby/object:Word
    word: functionally
    stem: function
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  completely: !ruby/object:Word
    word: completely
    stem: complet
    docFrequency: 7.0
    docPositions:
    - 114
    - 266
    - 269
    - 506
    - 562
    - 563
  isolated: !ruby/object:Word
    word: isolated
    stem: isol
    docFrequency: 5.0
    docPositions:
    - 114
    - 124
    - 194
    - 506
  closed: !ruby/object:Word
    word: closed
    stem: close
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  its: !ruby/object:Word
    word: its
    stem: it
    docFrequency: 39.0
    docPositions:
    - 114
    - 165
    - 173
    - 184
    - 201
    - 208
    - 220
    - 236
    - 284
    - 287
    - 288
    - 304
    - 310
    - 315
    - 317
    - 318
    - 319
    - 323
    - 506
    - 520
    - 530
    - 533
    - 543
    - 549
    - 572
    - 573
    - 574
    - 586
    - 590
    - 593
    - 595
    - 596
    - 597
    - 598
  surroundings: !ruby/object:Word
    word: surroundings
    stem: surround
    docFrequency: 3.0
    docPositions:
    - 114
    - 506
  '': !ruby/object:Word
    word: ''
    stem: ''
    docFrequency: 27.0
    docPositions:
    - 115
    - 116
    - 219
    - 273
    - 325
    - 327
    - 329
    - 331
    - 333
    - 335
    - 337
    - 339
    - 341
    - 343
    - 345
    - 347
    - 349
    - 360
    - 498
    - 500
    - 502
    - 504
    - 506
    - 521
    - 542
    - 605
  cc: !ruby/object:Word
    word: cc
    stem: cc
    docFrequency: 3.0
    docPositions:
    - 115
    - 116
  photo: !ruby/object:Word
    word: photo
    stem: photo
    docFrequency: 2.0
    docPositions:
    - 115
  anders: !ruby/object:Word
    word: anders
    stem: ander
    docFrequency: 3.0
    docPositions:
    - 115
    - 116
  sandberg: !ruby/object:Word
    word: sandberg
    stem: sandberg
    docFrequency: 3.0
    docPositions:
    - 115
    - 116
  image: !ruby/object:Word
    word: image
    stem: imag
    docFrequency: 4.0
    docPositions:
    - 116
    - 204
    - 531
  contents: !ruby/object:Word
    word: contents
    stem: content
    docFrequency: 2.0
    docPositions:
    - 117
  axiomatic: !ruby/object:Word
    word: axiomatic
    stem: axiomat
    docFrequency: 37.0
    docPositions:
    - 119
    - 134
    - 150
    - 152
    - 153
    - 158
    - 159
    - 160
    - 172
    - 189
    - 201
    - 229
    - 245
    - 247
    - 323
    - 507
    - 508
    - 511
    - 512
    - 513
    - 519
    - 523
    - 530
    - 546
    - 555
    - 598
  non: !ruby/object:Word
    word: non
    stem: non
    docFrequency: 22.0
    docPositions:
    - 119
    - 120
    - 150
    - 152
    - 155
    - 156
    - 157
    - 158
    - 160
    - 172
    - 190
    - 451
    - 507
    - 509
    - 510
    - 511
    - 513
    - 519
    - 524
  monotonic: !ruby/object:Word
    word: monotonic
    stem: monoton
    docFrequency: 19.0
    docPositions:
    - 120
    - 155
    - 156
    - 157
    - 226
    - 229
    - 509
    - 510
    - 545
    - 546
  sharp: !ruby/object:Word
    word: sharp
    stem: sharp
    docFrequency: 5.0
    docPositions:
    - 121
    - 162
    - 167
    - 516
  fuzzy: !ruby/object:Word
    word: fuzzy
    stem: fuzzi
    docFrequency: 5.0
    docPositions:
    - 121
    - 162
    - 167
    - 516
  real: !ruby/object:Word
    word: real
    stem: real
    docFrequency: 5.0
    docPositions:
    - 121
    - 162
    - 168
    - 517
  ideal: !ruby/object:Word
    word: ideal
    stem: ideal
    docFrequency: 3.0
    docPositions:
    - 121
    - 162
  defined: !ruby/object:Word
    word: defined
    stem: defin
    docFrequency: 11.0
    docPositions:
    - 122
    - 170
    - 189
    - 296
    - 304
    - 523
    - 580
    - 586
  undefined: !ruby/object:Word
    word: undefined
    stem: undefin
    docFrequency: 11.0
    docPositions:
    - 122
    - 170
    - 189
    - 215
    - 523
    - 538
  computers: !ruby/object:Word
    word: computers
    stem: comput
    docFrequency: 11.0
    docPositions:
    - 125
    - 195
    - 196
    - 199
    - 315
    - 527
    - 528
    - 593
  metaphor: !ruby/object:Word
    word: metaphor
    stem: metaphor
    docFrequency: 7.0
    docPositions:
    - 125
    - 195
    - 196
    - 527
  flexible: !ruby/object:Word
    word: flexible
    stem: flexibl
    docFrequency: 11.0
    docPositions:
    - 126
    - 158
    - 160
    - 198
    - 200
    - 201
    - 511
    - 513
    - 529
    - 530
  inflexible: !ruby/object:Word
    word: inflexible
    stem: inflex
    docFrequency: 9.0
    docPositions:
    - 126
    - 159
    - 160
    - 198
    - 200
    - 512
    - 513
    - 529
  universal: !ruby/object:Word
    word: universal
    stem: univers
    docFrequency: 23.0
    docPositions:
    - 127
    - 200
    - 201
    - 203
    - 204
    - 205
    - 218
    - 233
    - 276
    - 529
    - 530
    - 531
    - 532
    - 541
    - 548
    - 567
  specialized: !ruby/object:Word
    word: specialized
    stem: special
    docFrequency: 17.0
    docPositions:
    - 127
    - 203
    - 204
    - 205
    - 218
    - 276
    - 531
    - 532
    - 541
    - 567
  motivated: !ruby/object:Word
    word: motivated
    stem: motiv
    docFrequency: 7.0
    docPositions:
    - 128
    - 207
    - 209
    - 210
    - 534
    - 535
  indiscriminate: !ruby/object:Word
    word: indiscriminate
    stem: indiscrimin
    docFrequency: 7.0
    docPositions:
    - 128
    - 207
    - 209
    - 210
    - 534
    - 535
  technical: !ruby/object:Word
    word: technical
    stem: technic
    docFrequency: 15.0
    docPositions:
    - 129
    - 199
    - 213
    - 214
    - 243
    - 309
    - 311
    - 528
    - 537
    - 554
    - 589
    - 591
  human: !ruby/object:Word
    word: human
    stem: human
    docFrequency: 15.0
    docPositions:
    - 129
    - 208
    - 209
    - 213
    - 232
    - 239
    - 533
    - 534
    - 547
    - 552
  definitions: !ruby/object:Word
    word: definitions
    stem: definit
    docFrequency: 30.0
    docPositions:
    - 129
    - 140
    - 172
    - 173
    - 190
    - 213
    - 215
    - 216
    - 223
    - 293
    - 294
    - 295
    - 296
    - 304
    - 306
    - 519
    - 520
    - 524
    - 538
    - 539
    - 578
    - 579
    - 580
    - 586
    - 588
  principles: !ruby/object:Word
    word: principles
    stem: principl
    docFrequency: 3.0
    docPositions:
    - 131
    - 224
  practices: !ruby/object:Word
    word: practices
    stem: practic
    docFrequency: 3.0
    docPositions:
    - 131
    - 224
  rigor: !ruby/object:Word
    word: rigor
    stem: rigor
    docFrequency: 3.0
    docPositions:
    - 132
    - 225
  intuition: !ruby/object:Word
    word: intuition
    stem: intuit
    docFrequency: 7.0
    docPositions:
    - 132
    - 225
    - 229
    - 232
    - 546
    - 547
  formal: !ruby/object:Word
    word: formal
    stem: formal
    docFrequency: 62.0
    docPositions:
    - 133
    - 190
    - 231
    - 232
    - 233
    - 236
    - 237
    - 238
    - 239
    - 242
    - 243
    - 274
    - 294
    - 295
    - 296
    - 300
    - 301
    - 304
    - 305
    - 306
    - 315
    - 316
    - 323
    - 524
    - 547
    - 548
    - 549
    - 550
    - 551
    - 552
    - 554
    - 565
    - 578
    - 579
    - 580
    - 584
    - 585
    - 586
    - 587
    - 588
    - 593
    - 594
    - 598
  formalizable: !ruby/object:Word
    word: formalizable
    stem: formaliz
    docFrequency: 15.0
    docPositions:
    - 133
    - 141
    - 231
    - 239
    - 240
    - 243
    - 295
    - 303
    - 304
    - 552
    - 553
    - 554
    - 579
    - 586
  axiomatizable: !ruby/object:Word
    word: axiomatizable
    stem: axiomatiz
    docFrequency: 3.0
    docPositions:
    - 134
    - 245
  some: !ruby/object:Word
    word: some
    stem: some
    docFrequency: 36.0
    docPositions:
    - 136
    - 151
    - 152
    - 158
    - 160
    - 172
    - 199
    - 201
    - 205
    - 209
    - 223
    - 229
    - 250
    - 266
    - 274
    - 309
    - 318
    - 506
    - 507
    - 511
    - 513
    - 519
    - 528
    - 530
    - 532
    - 534
    - 546
    - 562
    - 565
    - 589
    - 596
  details: !ruby/object:Word
    word: details
    stem: detail
    docFrequency: 5.0
    docPositions:
    - 136
    - 243
    - 250
    - 554
  consistent: !ruby/object:Word
    word: consistent
    stem: consist
    docFrequency: 8.0
    docPositions:
    - 137
    - 251
    - 265
    - 275
    - 349
    - 561
    - 566
  inconsistent: !ruby/object:Word
    word: inconsistent
    stem: inconsist
    docFrequency: 13.0
    docPositions:
    - 137
    - 251
    - 265
    - 266
    - 269
    - 275
    - 561
    - 562
    - 563
    - 566
  univalent: !ruby/object:Word
    word: univalent
    stem: unival
    docFrequency: 7.0
    docPositions:
    - 138
    - 279
    - 282
    - 291
    - 570
    - 577
  multivalent: !ruby/object:Word
    word: multivalent
    stem: multival
    docFrequency: 13.0
    docPositions:
    - 138
    - 279
    - 282
    - 283
    - 284
    - 289
    - 290
    - 570
    - 571
    - 572
    - 575
    - 576
  complete: !ruby/object:Word
    word: complete
    stem: complet
    docFrequency: 12.0
    docPositions:
    - 139
    - 286
    - 287
    - 291
    - 310
    - 312
    - 349
    - 573
    - 577
    - 590
    - 592
  incomplete: !ruby/object:Word
    word: incomplete
    stem: incomplet
    docFrequency: 5.0
    docPositions:
    - 139
    - 286
    - 290
    - 576
  abbreviations: !ruby/object:Word
    word: abbreviations
    stem: abbrevi
    docFrequency: 7.0
    docPositions:
    - 140
    - 293
    - 295
    - 300
    - 579
    - 584
  extensions: !ruby/object:Word
    word: extensions
    stem: extens
    docFrequency: 7.0
    docPositions:
    - 140
    - 293
    - 301
    - 306
    - 585
    - 588
  reality: !ruby/object:Word
    word: reality
    stem: realiti
    docFrequency: 3.0
    docPositions:
    - 141
    - 303
  principle: !ruby/object:Word
    word: principle
    stem: principl
    docFrequency: 7.0
    docPositions:
    - 141
    - 303
    - 304
    - 310
    - 586
    - 590
  generating: !ruby/object:Word
    word: generating
    stem: gener
    docFrequency: 10.0
    docPositions:
    - 142
    - 246
    - 308
    - 310
    - 315
    - 316
    - 590
    - 593
    - 594
  all: !ruby/object:Word
    word: all
    stem: all
    docFrequency: 65.0
    docPositions:
    - 142
    - 153
    - 163
    - 167
    - 188
    - 189
    - 204
    - 210
    - 235
    - 243
    - 247
    - 269
    - 275
    - 280
    - 281
    - 283
    - 284
    - 291
    - 308
    - 309
    - 311
    - 315
    - 316
    - 323
    - 423
    - 426
    - 488
    - 508
    - 514
    - 516
    - 522
    - 523
    - 531
    - 535
    - 554
    - 555
    - 563
    - 566
    - 568
    - 569
    - 571
    - 572
    - 577
    - 589
    - 591
    - 593
    - 594
    - 598
  theorems: !ruby/object:Word
    word: theorems
    stem: theorem
    docFrequency: 63.0
    docPositions:
    - 142
    - 153
    - 159
    - 166
    - 192
    - 209
    - 210
    - 211
    - 223
    - 229
    - 246
    - 247
    - 248
    - 258
    - 261
    - 269
    - 308
    - 309
    - 311
    - 315
    - 323
    - 508
    - 512
    - 515
    - 526
    - 534
    - 535
    - 536
    - 546
    - 555
    - 556
    - 558
    - 559
    - 563
    - 589
    - 591
    - 593
    - 598
  decidable: !ruby/object:Word
    word: decidable
    stem: decid
    docFrequency: 7.0
    docPositions:
    - 142
    - 308
    - 311
    - 312
    - 591
    - 592
  undecidable: !ruby/object:Word
    word: undecidable
    stem: undecid
    docFrequency: 5.0
    docPositions:
    - 142
    - 288
    - 308
    - 574
  crystal: !ruby/object:Word
    word: crystal
    stem: crystal
    docFrequency: 5.0
    docPositions:
    - 143
    - 314
    - 315
    - 593
  ball: !ruby/object:Word
    word: ball
    stem: ball
    docFrequency: 5.0
    docPositions:
    - 143
    - 314
    - 315
    - 593
  notes: !ruby/object:Word
    word: notes
    stem: note
    docFrequency: 5.0
    docPositions:
    - 145
    - 324
    - 355
    - 600
  references: !ruby/object:Word
    word: references
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 146
    - 352
  there: !ruby/object:Word
    word: there
    stem: there
    docFrequency: 15.0
    docPositions:
    - 151
    - 167
    - 280
    - 299
    - 300
    - 306
    - 311
    - 506
    - 516
    - 568
    - 583
    - 584
    - 588
    - 591
  two: !ruby/object:Word
    word: two
    stem: two
    docFrequency: 37.0
    docPositions:
    - 151
    - 156
    - 168
    - 183
    - 190
    - 219
    - 220
    - 236
    - 246
    - 248
    - 258
    - 261
    - 280
    - 282
    - 294
    - 298
    - 300
    - 301
    - 310
    - 506
    - 509
    - 517
    - 524
    - 542
    - 543
    - 549
    - 556
    - 558
    - 559
    - 568
    - 570
    - 578
    - 582
    - 584
    - 585
    - 590
  possible: !ruby/object:Word
    word: possible
    stem: possibl
    docFrequency: 19.0
    docPositions:
    - 151
    - 188
    - 274
    - 282
    - 294
    - 304
    - 310
    - 316
    - 506
    - 522
    - 565
    - 570
    - 578
    - 586
    - 590
    - 594
  approaches: !ruby/object:Word
    word: approaches
    stem: approach
    docFrequency: 9.0
    docPositions:
    - 151
    - 156
    - 294
    - 506
    - 509
    - 578
  called: !ruby/object:Word
    word: called
    stem: call
    docFrequency: 51.0
    docPositions:
    - 151
    - 153
    - 158
    - 189
    - 199
    - 205
    - 211
    - 219
    - 248
    - 265
    - 274
    - 280
    - 282
    - 284
    - 287
    - 288
    - 309
    - 311
    - 315
    - 318
    - 506
    - 508
    - 511
    - 523
    - 528
    - 532
    - 536
    - 542
    - 556
    - 561
    - 565
    - 568
    - 570
    - 572
    - 573
    - 574
    - 589
    - 591
    - 593
    - 596
  r: !ruby/object:Word
    word: r
    stem: r
    docFrequency: 3.0
    docPositions:
    - 151
    - 506
  feynman: !ruby/object:Word
    word: feynman
    stem: feynman
    docFrequency: 6.0
    docPositions:
    - 151
    - 327
    - 356
    - 506
    - 601
  babylonian: !ruby/object:Word
    word: babylonian
    stem: babylonian
    docFrequency: 5.0
    docPositions:
    - 151
    - 152
    - 506
    - 507
  tradition: !ruby/object:Word
    word: tradition
    stem: tradit
    docFrequency: 9.0
    docPositions:
    - 151
    - 152
    - 153
    - 506
    - 507
    - 508
  greek: !ruby/object:Word
    word: greek
    stem: greek
    docFrequency: 5.0
    docPositions:
    - 151
    - 153
    - 506
    - 508
  they: !ruby/object:Word
    word: they
    stem: thei
    docFrequency: 25.0
    docPositions:
    - 151
    - 152
    - 153
    - 172
    - 189
    - 214
    - 237
    - 248
    - 281
    - 294
    - 309
    - 506
    - 507
    - 508
    - 519
    - 523
    - 537
    - 550
    - 556
    - 569
    - 578
    - 589
  answer: !ruby/object:Word
    word: answer
    stem: answer
    docFrequency: 9.0
    docPositions:
    - 151
    - 156
    - 294
    - 317
    - 506
    - 509
    - 578
    - 595
  differently: !ruby/object:Word
    word: differently
    stem: differ
    docFrequency: 7.0
    docPositions:
    - 151
    - 156
    - 294
    - 506
    - 509
    - 578
  question: !ruby/object:Word
    word: question
    stem: question
    docFrequency: 15.0
    docPositions:
    - 151
    - 156
    - 270
    - 280
    - 294
    - 310
    - 506
    - 509
    - 564
    - 568
    - 578
    - 590
  whether: !ruby/object:Word
    word: whether
    stem: whether
    docFrequency: 12.0
    docPositions:
    - 151
    - 156
    - 294
    - 311
    - 315
    - 321
    - 506
    - 509
    - 578
    - 591
    - 593
  mathematical: !ruby/object:Word
    word: mathematical
    stem: mathemat
    docFrequency: 58.0
    docPositions:
    - 151
    - 167
    - 168
    - 188
    - 190
    - 191
    - 201
    - 205
    - 209
    - 216
    - 218
    - 229
    - 238
    - 242
    - 258
    - 284
    - 304
    - 306
    - 310
    - 355
    - 506
    - 516
    - 517
    - 522
    - 524
    - 525
    - 530
    - 532
    - 534
    - 539
    - 541
    - 546
    - 551
    - 558
    - 572
    - 586
    - 588
    - 590
    - 600
  facts: !ruby/object:Word
    word: facts
    stem: fact
    docFrequency: 19.0
    docPositions:
    - 151
    - 152
    - 153
    - 158
    - 171
    - 506
    - 507
    - 508
    - 511
    - 518
  more: !ruby/object:Word
    word: more
    stem: more
    docFrequency: 49.0
    docPositions:
    - 151
    - 153
    - 189
    - 196
    - 205
    - 214
    - 215
    - 220
    - 236
    - 242
    - 247
    - 275
    - 276
    - 281
    - 283
    - 291
    - 296
    - 304
    - 309
    - 311
    - 398
    - 506
    - 508
    - 523
    - 527
    - 532
    - 537
    - 538
    - 543
    - 549
    - 555
    - 566
    - 567
    - 569
    - 571
    - 577
    - 580
    - 586
    - 589
    - 591
  fundamental: !ruby/object:Word
    word: fundamental
    stem: fundament
    docFrequency: 7.0
    docPositions:
    - 151
    - 153
    - 189
    - 506
    - 508
    - 523
  than: !ruby/object:Word
    word: than
    stem: than
    docFrequency: 25.0
    docPositions:
    - 151
    - 167
    - 196
    - 229
    - 236
    - 238
    - 242
    - 265
    - 276
    - 291
    - 304
    - 316
    - 349
    - 506
    - 516
    - 527
    - 546
    - 549
    - 551
    - 561
    - 567
    - 577
    - 586
    - 594
  others: !ruby/object:Word
    word: others
    stem: other
    docFrequency: 7.0
    docPositions:
    - 151
    - 152
    - 172
    - 506
    - 507
    - 519
  consequential: !ruby/object:Word
    word: consequential
    stem: consequenti
    docFrequency: 5.0
    docPositions:
    - 151
    - 153
    - 506
    - 508
  same: !ruby/object:Word
    word: same
    stem: same
    docFrequency: 11.0
    docPositions:
    - 151
    - 246
    - 248
    - 275
    - 280
    - 506
    - 556
    - 566
    - 568
  apply: !ruby/object:Word
    word: apply
    stem: appli
    docFrequency: 5.0
    docPositions:
    - 151
    - 192
    - 506
    - 526
  any: !ruby/object:Word
    word: any
    stem: ani
    docFrequency: 20.0
    docPositions:
    - 151
    - 192
    - 200
    - 201
    - 226
    - 239
    - 274
    - 304
    - 315
    - 488
    - 506
    - 526
    - 529
    - 530
    - 545
    - 552
    - 565
    - 586
    - 593
  treats: !ruby/object:Word
    word: treats
    stem: treat
    docFrequency: 9.0
    docPositions:
    - 152
    - 153
    - 196
    - 295
    - 507
    - 508
    - 527
    - 579
  network: !ruby/object:Word
    word: network
    stem: network
    docFrequency: 5.0
    docPositions:
    - 152
    - 172
    - 507
    - 519
  whose: !ruby/object:Word
    word: whose
    stem: whose
    docFrequency: 7.0
    docPositions:
    - 152
    - 172
    - 219
    - 507
    - 519
    - 542
  nodes: !ruby/object:Word
    word: nodes
    stem: node
    docFrequency: 5.0
    docPositions:
    - 152
    - 172
    - 507
    - 519
  connections: !ruby/object:Word
    word: connections
    stem: connect
    docFrequency: 5.0
    docPositions:
    - 152
    - 172
    - 507
    - 519
  derivations: !ruby/object:Word
    word: derivations
    stem: deriv
    docFrequency: 5.0
    docPositions:
    - 152
    - 158
    - 507
    - 511
  if: !ruby/object:Word
    word: if
    stem: if
    docFrequency: 58.0
    docPositions:
    - 152
    - 153
    - 167
    - 168
    - 172
    - 189
    - 196
    - 229
    - 232
    - 248
    - 252
    - 265
    - 275
    - 276
    - 278
    - 284
    - 287
    - 288
    - 301
    - 310
    - 311
    - 322
    - 323
    - 498
    - 500
    - 502
    - 504
    - 507
    - 508
    - 516
    - 517
    - 519
    - 523
    - 527
    - 546
    - 547
    - 556
    - 557
    - 561
    - 566
    - 567
    - 572
    - 573
    - 574
    - 585
    - 590
    - 591
  forgotten: !ruby/object:Word
    word: forgotten
    stem: forgotten
    docFrequency: 13.0
    docPositions:
    - 152
    - 153
    - 172
    - 189
    - 507
    - 508
    - 519
    - 523
  probably: !ruby/object:Word
    word: probably
    stem: probabl
    docFrequency: 5.0
    docPositions:
    - 152
    - 172
    - 507
    - 519
  derived: !ruby/object:Word
    word: derived
    stem: deriv
    docFrequency: 5.0
    docPositions:
    - 152
    - 153
    - 507
    - 508
  tower: !ruby/object:Word
    word: tower
    stem: tower
    docFrequency: 5.0
    docPositions:
    - 153
    - 189
    - 508
    - 523
  grounded: !ruby/object:Word
    word: grounded
    stem: ground
    docFrequency: 5.0
    docPositions:
    - 153
    - 189
    - 508
    - 523
  basis: !ruby/object:Word
    word: basis
    stem: basi
    docFrequency: 5.0
    docPositions:
    - 153
    - 189
    - 508
    - 523
  axioms: !ruby/object:Word
    word: axioms
    stem: axiom
    docFrequency: 54.0
    docPositions:
    - 153
    - 160
    - 192
    - 201
    - 209
    - 210
    - 211
    - 246
    - 247
    - 248
    - 275
    - 281
    - 282
    - 283
    - 294
    - 295
    - 296
    - 309
    - 508
    - 513
    - 526
    - 530
    - 534
    - 535
    - 536
    - 555
    - 556
    - 566
    - 569
    - 570
    - 571
    - 578
    - 579
    - 580
    - 589
  surely: !ruby/object:Word
    word: surely
    stem: sure
    docFrequency: 5.0
    docPositions:
    - 153
    - 189
    - 508
    - 523
  sparse: !ruby/object:Word
    word: sparse
    stem: spars
    docFrequency: 5.0
    docPositions:
    - 153
    - 189
    - 508
    - 523
  simple: !ruby/object:Word
    word: simple
    stem: simpl
    docFrequency: 13.0
    docPositions:
    - 153
    - 189
    - 199
    - 232
    - 304
    - 508
    - 523
    - 528
    - 547
    - 586
  distinction: !ruby/object:Word
    word: distinction
    stem: distinct
    docFrequency: 5.0
    docPositions:
    - 156
    - 509
  between: !ruby/object:Word
    word: between
    stem: between
    docFrequency: 23.0
    docPositions:
    - 156
    - 214
    - 215
    - 238
    - 240
    - 280
    - 509
    - 537
    - 538
    - 551
    - 553
    - 568
  closely: !ruby/object:Word
    word: closely
    stem: close
    docFrequency: 5.0
    docPositions:
    - 156
    - 323
    - 509
    - 598
  logic: !ruby/object:Word
    word: logic
    stem: logic
    docFrequency: 27.0
    docPositions:
    - 156
    - 157
    - 205
    - 226
    - 229
    - 274
    - 284
    - 509
    - 510
    - 532
    - 545
    - 546
    - 565
    - 572
  fact: !ruby/object:Word
    word: fact
    stem: fact
    docFrequency: 11.0
    docPositions:
    - 156
    - 226
    - 318
    - 509
    - 545
    - 596
  retracted: !ruby/object:Word
    word: retracted
    stem: retract
    docFrequency: 11.0
    docPositions:
    - 156
    - 158
    - 159
    - 226
    - 232
    - 509
    - 511
    - 512
    - 545
    - 547
  because: !ruby/object:Word
    word: because
    stem: becaus
    docFrequency: 5.0
    docPositions:
    - 156
    - 305
    - 509
    - 587
  new: !ruby/object:Word
    word: new
    stem: new
    docFrequency: 31.0
    docPositions:
    - 156
    - 158
    - 160
    - 200
    - 221
    - 296
    - 301
    - 509
    - 511
    - 513
    - 529
    - 544
    - 580
    - 585
  evidence: !ruby/object:Word
    word: evidence
    stem: evid
    docFrequency: 5.0
    docPositions:
    - 156
    - 160
    - 509
    - 513
  answers: !ruby/object:Word
    word: answers
    stem: answer
    docFrequency: 9.0
    docPositions:
    - 156
    - 163
    - 168
    - 509
    - 514
    - 517
  negative: !ruby/object:Word
    word: negative
    stem: neg
    docFrequency: 5.0
    docPositions:
    - 156
    - 163
    - 509
    - 514
  affirmative: !ruby/object:Word
    word: affirmative
    stem: affirm
    docFrequency: 7.0
    docPositions:
    - 156
    - 168
    - 317
    - 509
    - 517
    - 595
  used: !ruby/object:Word
    word: used
    stem: us
    docFrequency: 30.0
    docPositions:
    - 157
    - 158
    - 159
    - 192
    - 196
    - 205
    - 237
    - 243
    - 246
    - 248
    - 276
    - 295
    - 301
    - 510
    - 511
    - 512
    - 526
    - 527
    - 532
    - 550
    - 554
    - 556
    - 567
    - 579
    - 585
  routinely: !ruby/object:Word
    word: routinely
    stem: routin
    docFrequency: 4.0
    docPositions:
    - 157
    - 187
    - 510
  everyday: !ruby/object:Word
    word: everyday
    stem: everydai
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  life: !ruby/object:Word
    word: life
    stem: life
    docFrequency: 12.0
    docPositions:
    - 157
    - 208
    - 209
    - 318
    - 325
    - 353
    - 510
    - 533
    - 534
    - 596
    - 598
  research: !ruby/object:Word
    word: research
    stem: research
    docFrequency: 6.0
    docPositions:
    - 157
    - 223
    - 355
    - 510
    - 600
  example: !ruby/object:Word
    word: example
    stem: exampl
    docFrequency: 30.0
    docPositions:
    - 157
    - 168
    - 187
    - 196
    - 205
    - 226
    - 232
    - 283
    - 289
    - 291
    - 297
    - 304
    - 305
    - 306
    - 510
    - 517
    - 527
    - 532
    - 545
    - 547
    - 571
    - 575
    - 577
    - 581
    - 586
    - 587
    - 588
  being: !ruby/object:Word
    word: being
    stem: be
    docFrequency: 9.0
    docPositions:
    - 157
    - 160
    - 275
    - 276
    - 510
    - 513
    - 566
    - 567
  bird: !ruby/object:Word
    word: bird
    stem: bird
    docFrequency: 5.0
    docPositions:
    - 157
    - 510
  animal: !ruby/object:Word
    word: animal
    stem: anim
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  should: !ruby/object:Word
    word: should
    stem: should
    docFrequency: 9.0
    docPositions:
    - 157
    - 291
    - 510
    - 577
  fly: !ruby/object:Word
    word: fly
    stem: fly
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  but: !ruby/object:Word
    word: but
    stem: but
    docFrequency: 32.0
    docPositions:
    - 157
    - 167
    - 192
    - 208
    - 209
    - 228
    - 252
    - 269
    - 274
    - 288
    - 296
    - 315
    - 318
    - 319
    - 510
    - 516
    - 526
    - 533
    - 534
    - 557
    - 563
    - 565
    - 574
    - 580
    - 593
    - 596
    - 597
  may: !ruby/object:Word
    word: may
    stem: mai
    docFrequency: 40.0
    docPositions:
    - 157
    - 160
    - 165
    - 166
    - 190
    - 196
    - 209
    - 217
    - 218
    - 220
    - 221
    - 243
    - 248
    - 252
    - 282
    - 289
    - 317
    - 318
    - 319
    - 510
    - 513
    - 515
    - 524
    - 527
    - 534
    - 540
    - 541
    - 543
    - 544
    - 554
    - 556
    - 557
    - 570
    - 575
    - 595
    - 596
    - 597
  appear: !ruby/object:Word
    word: appear
    stem: appear
    docFrequency: 9.0
    docPositions:
    - 157
    - 190
    - 289
    - 510
    - 524
    - 575
  penguin: !ruby/object:Word
    word: penguin
    stem: penguin
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  another: !ruby/object:Word
    word: another
    stem: anoth
    docFrequency: 15.0
    docPositions:
    - 157
    - 160
    - 168
    - 196
    - 208
    - 209
    - 229
    - 510
    - 513
    - 517
    - 527
    - 533
    - 534
    - 546
  grass: !ruby/object:Word
    word: grass
    stem: grass
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  wet: !ruby/object:Word
    word: wet
    stem: wet
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  therefore: !ruby/object:Word
    word: therefore
    stem: therefor
    docFrequency: 7.0
    docPositions:
    - 157
    - 274
    - 316
    - 510
    - 565
    - 594
  rained: !ruby/object:Word
    word: rained
    stem: rain
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  cause: !ruby/object:Word
    word: cause
    stem: caus
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  sprinkler: !ruby/object:Word
    word: sprinkler
    stem: sprinkler
    docFrequency: 3.0
    docPositions:
    - 157
    - 510
  approach: !ruby/object:Word
    word: approach
    stem: approach
    docFrequency: 27.0
    docPositions:
    - 158
    - 159
    - 160
    - 172
    - 189
    - 229
    - 295
    - 296
    - 300
    - 301
    - 511
    - 512
    - 513
    - 519
    - 523
    - 546
    - 579
    - 580
    - 584
    - 585
  needed: !ruby/object:Word
    word: needed
    stem: need
    docFrequency: 5.0
    docPositions:
    - 158
    - 229
    - 511
    - 546
  old: !ruby/object:Word
    word: old
    stem: old
    docFrequency: 5.0
    docPositions:
    - 158
    - 318
    - 511
    - 596
  added: !ruby/object:Word
    word: added
    stem: ad
    docFrequency: 3.0
    docPositions:
    - 158
    - 511
  changed: !ruby/object:Word
    word: changed
    stem: chang
    docFrequency: 3.0
    docPositions:
    - 158
    - 511
  accordingly: !ruby/object:Word
    word: accordingly
    stem: accordingli
    docFrequency: 3.0
    docPositions:
    - 158
    - 511
  nowadays: !ruby/object:Word
    word: nowadays
    stem: nowadai
    docFrequency: 9.0
    docPositions:
    - 158
    - 159
    - 196
    - 199
    - 511
    - 512
    - 527
    - 528
  widely: !ruby/object:Word
    word: widely
    stem: wide
    docFrequency: 7.0
    docPositions:
    - 158
    - 159
    - 196
    - 511
    - 512
    - 527
  outside: !ruby/object:Word
    word: outside
    stem: outsid
    docFrequency: 8.0
    docPositions:
    - 158
    - 160
    - 166
    - 182
    - 511
    - 513
    - 515
  only: !ruby/object:Word
    word: only
    stem: onli
    docFrequency: 30.0
    docPositions:
    - 158
    - 160
    - 199
    - 200
    - 209
    - 232
    - 291
    - 295
    - 296
    - 301
    - 304
    - 309
    - 503
    - 511
    - 513
    - 528
    - 529
    - 534
    - 547
    - 577
    - 579
    - 580
    - 585
    - 586
    - 589
  marginally: !ruby/object:Word
    word: marginally
    stem: margin
    docFrequency: 3.0
    docPositions:
    - 158
    - 511
  so: !ruby/object:Word
    word: so
    stem: so
    docFrequency: 23.0
    docPositions:
    - 158
    - 165
    - 173
    - 228
    - 274
    - 282
    - 305
    - 309
    - 315
    - 318
    - 511
    - 520
    - 565
    - 570
    - 587
    - 589
    - 593
    - 596
  informal: !ruby/object:Word
    word: informal
    stem: inform
    docFrequency: 7.0
    docPositions:
    - 158
    - 190
    - 192
    - 511
    - 524
    - 526
  theorem: !ruby/object:Word
    word: theorem
    stem: theorem
    docFrequency: 46.0
    docPositions:
    - 159
    - 209
    - 210
    - 232
    - 275
    - 287
    - 288
    - 294
    - 299
    - 300
    - 301
    - 309
    - 310
    - 311
    - 315
    - 323
    - 349
    - 512
    - 534
    - 535
    - 547
    - 566
    - 573
    - 574
    - 578
    - 583
    - 584
    - 585
    - 589
    - 590
    - 591
    - 593
    - 598
  cannot: !ruby/object:Word
    word: cannot
    stem: cannot
    docFrequency: 20.0
    docPositions:
    - 159
    - 167
    - 192
    - 200
    - 274
    - 275
    - 289
    - 323
    - 349
    - 512
    - 516
    - 526
    - 529
    - 565
    - 566
    - 575
    - 598
  without: !ruby/object:Word
    word: without
    stem: without
    docFrequency: 10.0
    docPositions:
    - 159
    - 173
    - 175
    - 199
    - 232
    - 512
    - 520
    - 528
    - 547
  removing: !ruby/object:Word
    word: removing
    stem: remov
    docFrequency: 3.0
    docPositions:
    - 159
    - 512
  replacing: !ruby/object:Word
    word: replacing
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 159
    - 512
  least: !ruby/object:Word
    word: least
    stem: least
    docFrequency: 9.0
    docPositions:
    - 159
    - 167
    - 192
    - 315
    - 512
    - 516
    - 526
    - 593
  one: !ruby/object:Word
    word: one
    stem: 'on'
    docFrequency: 35.0
    docPositions:
    - 159
    - 167
    - 190
    - 196
    - 208
    - 209
    - 219
    - 242
    - 258
    - 278
    - 280
    - 282
    - 295
    - 296
    - 310
    - 512
    - 516
    - 524
    - 527
    - 533
    - 534
    - 542
    - 558
    - 568
    - 570
    - 579
    - 580
    - 590
  axiom: !ruby/object:Word
    word: axiom
    stem: axiom
    docFrequency: 17.0
    docPositions:
    - 159
    - 247
    - 248
    - 296
    - 301
    - 309
    - 512
    - 555
    - 556
    - 580
    - 585
    - 589
  which: !ruby/object:Word
    word: which
    stem: which
    docFrequency: 26.0
    docPositions:
    - 159
    - 165
    - 167
    - 180
    - 196
    - 200
    - 223
    - 270
    - 275
    - 280
    - 284
    - 317
    - 323
    - 512
    - 516
    - 527
    - 529
    - 564
    - 566
    - 568
    - 572
    - 595
    - 598
  usually: !ruby/object:Word
    word: usually
    stem: usual
    docFrequency: 11.0
    docPositions:
    - 159
    - 200
    - 237
    - 290
    - 512
    - 529
    - 550
    - 576
  has: !ruby/object:Word
    word: has
    stem: ha
    docFrequency: 15.0
    docPositions:
    - 159
    - 208
    - 226
    - 274
    - 301
    - 319
    - 512
    - 533
    - 545
    - 565
    - 585
    - 597
  dramatic: !ruby/object:Word
    word: dramatic
    stem: dramat
    docFrequency: 3.0
    docPositions:
    - 159
    - 512
  consequences: !ruby/object:Word
    word: consequences
    stem: consequ
    docFrequency: 9.0
    docPositions:
    - 159
    - 160
    - 209
    - 210
    - 512
    - 513
    - 534
    - 535
  many: !ruby/object:Word
    word: many
    stem: mani
    docFrequency: 30.0
    docPositions:
    - 159
    - 196
    - 205
    - 209
    - 214
    - 228
    - 237
    - 243
    - 276
    - 299
    - 300
    - 309
    - 316
    - 512
    - 527
    - 532
    - 534
    - 537
    - 550
    - 554
    - 567
    - 583
    - 584
    - 589
    - 594
  other: !ruby/object:Word
    word: other
    stem: other
    docFrequency: 33.0
    docPositions:
    - 159
    - 188
    - 190
    - 204
    - 205
    - 209
    - 220
    - 223
    - 239
    - 243
    - 248
    - 258
    - 287
    - 288
    - 296
    - 315
    - 317
    - 512
    - 524
    - 531
    - 532
    - 534
    - 543
    - 552
    - 554
    - 556
    - 558
    - 573
    - 574
    - 580
    - 593
    - 595
  well: !ruby/object:Word
    word: well
    stem: well
    docFrequency: 10.0
    docPositions:
    - 160
    - 200
    - 278
    - 318
    - 513
    - 529
    - 596
  suited: !ruby/object:Word
    word: suited
    stem: suit
    docFrequency: 5.0
    docPositions:
    - 160
    - 513
  often: !ruby/object:Word
    word: often
    stem: often
    docFrequency: 5.0
    docPositions:
    - 160
    - 205
    - 513
    - 532
  comes: !ruby/object:Word
    word: comes
    stem: come
    docFrequency: 3.0
    docPositions:
    - 160
    - 513
  advances: !ruby/object:Word
    word: advances
    stem: advanc
    docFrequency: 3.0
    docPositions:
    - 160
    - 513
  extracting: !ruby/object:Word
    word: extracting
    stem: extract
    docFrequency: 3.0
    docPositions:
    - 160
    - 513
  immutable: !ruby/object:Word
    word: immutable
    stem: immut
    docFrequency: 7.0
    docPositions:
    - 160
    - 200
    - 201
    - 513
    - 529
    - 530
  list: !ruby/object:Word
    word: list
    stem: list
    docFrequency: 26.0
    docPositions:
    - 160
    - 166
    - 200
    - 201
    - 247
    - 248
    - 309
    - 449
    - 513
    - 515
    - 529
    - 530
    - 555
    - 556
    - 589
  seem: !ruby/object:Word
    word: seem
    stem: seem
    docFrequency: 7.0
    docPositions:
    - 160
    - 317
    - 318
    - 513
    - 595
    - 596
  such: !ruby/object:Word
    word: such
    stem: such
    docFrequency: 32.0
    docPositions:
    - 160
    - 165
    - 167
    - 188
    - 192
    - 196
    - 205
    - 208
    - 247
    - 248
    - 258
    - 287
    - 291
    - 304
    - 315
    - 323
    - 513
    - 516
    - 522
    - 526
    - 527
    - 532
    - 533
    - 555
    - 556
    - 558
    - 573
    - 577
    - 586
    - 593
    - 598
  must: !ruby/object:Word
    word: must
    stem: must
    docFrequency: 9.0
    docPositions:
    - 160
    - 167
    - 310
    - 316
    - 513
    - 516
    - 590
    - 594
  dull: !ruby/object:Word
    word: dull
    stem: dull
    docFrequency: 9.0
    docPositions:
    - 160
    - 199
    - 200
    - 208
    - 513
    - 528
    - 529
    - 533
  surprisingly: !ruby/object:Word
    word: surprisingly
    stem: surprisingli
    docFrequency: 3.0
    docPositions:
    - 160
    - 513
  illusion: !ruby/object:Word
    word: illusion
    stem: illus
    docFrequency: 3.0
    docPositions:
    - 160
    - 513
  sense: !ruby/object:Word
    word: sense
    stem: sens
    docFrequency: 17.0
    docPositions:
    - 160
    - 200
    - 201
    - 281
    - 309
    - 513
    - 529
    - 530
    - 569
    - 589
  very: !ruby/object:Word
    word: very
    stem: veri
    docFrequency: 14.0
    docPositions:
    - 160
    - 190
    - 200
    - 201
    - 216
    - 242
    - 304
    - 513
    - 524
    - 529
    - 530
    - 539
    - 586
  see: !ruby/object:Word
    word: see
    stem: see
    docFrequency: 14.0
    docPositions:
    - 160
    - 167
    - 185
    - 188
    - 291
    - 318
    - 343
    - 513
    - 516
    - 521
    - 522
    - 577
    - 596
  sect: !ruby/object:Word
    word: sect
    stem: sect
    docFrequency: 10.0
    docPositions:
    - 160
    - 291
    - 294
    - 327
    - 513
    - 577
    - 578
  fair: !ruby/object:Word
    word: fair
    stem: fair
    docFrequency: 3.0
    docPositions:
    - 163
    - 514
  coin: !ruby/object:Word
    word: coin
    stem: coin
    docFrequency: 5.0
    docPositions:
    - 163
    - 167
    - 514
    - 516
  tossed: !ruby/object:Word
    word: tossed
    stem: toss
    docFrequency: 3.0
    docPositions:
    - 163
    - 514
  times: !ruby/object:Word
    word: times
    stem: time
    docFrequency: 7.0
    docPositions:
    - 163
    - 167
    - 514
    - 516
  happen: !ruby/object:Word
    word: happen
    stem: happen
    docFrequency: 5.0
    docPositions:
    - 163
    - 310
    - 514
    - 590
  random: !ruby/object:Word
    word: random
    stem: random
    docFrequency: 4.0
    docPositions:
    - 163
    - 424
    - 514
  heads: !ruby/object:Word
    word: heads
    stem: head
    docFrequency: 11.0
    docPositions:
    - 163
    - 167
    - 514
    - 516
  obtained: !ruby/object:Word
    word: obtained
    stem: obtain
    docFrequency: 3.0
    docPositions:
    - 163
    - 514
  emile: !ruby/object:Word
    word: emile
    stem: emil
    docFrequency: 3.0
    docPositions:
    - 163
    - 514
  borel: !ruby/object:Word
    word: borel
    stem: borel
    docFrequency: 8.0
    docPositions:
    - 163
    - 166
    - 329
    - 353
    - 514
    - 515
    - 598
  famous: !ruby/object:Word
    word: famous
    stem: famou
    docFrequency: 5.0
    docPositions:
    - 163
    - 323
    - 514
    - 598
  mathematician: !ruby/object:Word
    word: mathematician
    stem: mathematician
    docFrequency: 18.0
    docPositions:
    - 163
    - 201
    - 237
    - 242
    - 243
    - 247
    - 266
    - 269
    - 514
    - 530
    - 550
    - 554
    - 555
    - 562
    - 563
  important: !ruby/object:Word
    word: important
    stem: import
    docFrequency: 9.0
    docPositions:
    - 163
    - 210
    - 294
    - 323
    - 514
    - 535
    - 578
    - 598
  reservation: !ruby/object:Word
    word: reservation
    stem: reserv
    docFrequency: 3.0
    docPositions:
    - 163
    - 514
  sort: !ruby/object:Word
    word: sort
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 165
    - 228
  event: !ruby/object:Word
    word: event
    stem: event
    docFrequency: 4.0
    docPositions:
    - 165
    - 167
    - 516
  impossibility: !ruby/object:Word
    word: impossibility
    stem: imposs
    docFrequency: 2.0
    docPositions:
    - 165
  rationally: !ruby/object:Word
    word: rationally
    stem: ration
    docFrequency: 4.0
    docPositions:
    - 165
    - 166
    - 515
  demonstrable: !ruby/object:Word
    word: demonstrable
    stem: demonstr
    docFrequency: 4.0
    docPositions:
    - 165
    - 166
    - 515
  however: !ruby/object:Word
    word: however
    stem: howev
    docFrequency: 22.0
    docPositions:
    - 165
    - 199
    - 201
    - 226
    - 237
    - 274
    - 284
    - 294
    - 304
    - 309
    - 317
    - 528
    - 530
    - 545
    - 550
    - 565
    - 572
    - 578
    - 586
    - 589
    - 595
  unlikely: !ruby/object:Word
    word: unlikely
    stem: unlik
    docFrequency: 2.0
    docPositions:
    - 165
  'no': !ruby/object:Word
    word: 'no'
    stem: 'no'
    docFrequency: 27.0
    docPositions:
    - 165
    - 167
    - 200
    - 208
    - 209
    - 232
    - 242
    - 265
    - 270
    - 274
    - 281
    - 315
    - 319
    - 323
    - 516
    - 529
    - 533
    - 534
    - 547
    - 561
    - 564
    - 565
    - 569
    - 593
    - 597
    - 598
  sensible: !ruby/object:Word
    word: sensible
    stem: sensibl
    docFrequency: 2.0
    docPositions:
    - 165
  person: !ruby/object:Word
    word: person
    stem: person
    docFrequency: 2.0
    docPositions:
    - 165
  hesitate: !ruby/object:Word
    word: hesitate
    stem: hesit
    docFrequency: 2.0
    docPositions:
    - 165
  declare: !ruby/object:Word
    word: declare
    stem: declar
    docFrequency: 2.0
    docPositions:
    - 165
  actually: !ruby/object:Word
    word: actually
    stem: actual
    docFrequency: 2.0
    docPositions:
    - 165
  impossible: !ruby/object:Word
    word: impossible
    stem: imposs
    docFrequency: 6.0
    docPositions:
    - 165
    - 167
    - 309
    - 516
    - 589
  why: !ruby/object:Word
    word: why
    stem: why
    docFrequency: 5.0
    docPositions:
    - 166
    - 515
  does: !ruby/object:Word
    word: does
    stem: doe
    docFrequency: 19.0
    docPositions:
    - 166
    - 192
    - 200
    - 210
    - 239
    - 275
    - 300
    - 310
    - 316
    - 515
    - 526
    - 529
    - 535
    - 552
    - 566
    - 584
    - 590
    - 594
  statement: !ruby/object:Word
    word: statement
    stem: statement
    docFrequency: 29.0
    docPositions:
    - 166
    - 167
    - 232
    - 237
    - 270
    - 287
    - 288
    - 289
    - 310
    - 311
    - 315
    - 515
    - 516
    - 547
    - 550
    - 564
    - 573
    - 574
    - 575
    - 590
    - 591
    - 593
  remain: !ruby/object:Word
    word: remain
    stem: remain
    docFrequency: 3.0
    docPositions:
    - 166
    - 515
  s: !ruby/object:Word
    word: s
    stem: s
    docFrequency: 7.0
    docPositions:
    - 166
    - 196
    - 275
    - 515
    - 527
    - 566
  probability: !ruby/object:Word
    word: probability
    stem: probabl
    docFrequency: 3.0
    docPositions:
    - 166
    - 515
  truth: !ruby/object:Word
    word: truth
    stem: truth
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  every: !ruby/object:Word
    word: every
    stem: everi
    docFrequency: 15.0
    docPositions:
    - 167
    - 248
    - 275
    - 280
    - 283
    - 287
    - 309
    - 516
    - 556
    - 566
    - 568
    - 571
    - 573
    - 589
  assumed: !ruby/object:Word
    word: assumed
    stem: assum
    docFrequency: 5.0
    docPositions:
    - 167
    - 516
  either: !ruby/object:Word
    word: either
    stem: either
    docFrequency: 7.0
    docPositions:
    - 167
    - 310
    - 315
    - 516
    - 590
    - 593
  'true': !ruby/object:Word
    word: 'true'
    stem: 'true'
    docFrequency: 17.0
    docPositions:
    - 167
    - 274
    - 275
    - 291
    - 315
    - 323
    - 501
    - 516
    - 566
    - 577
    - 593
    - 598
  'false': !ruby/object:Word
    word: 'false'
    stem: fals
    docFrequency: 7.0
    docPositions:
    - 167
    - 272
    - 275
    - 503
    - 516
    - 566
  even: !ruby/object:Word
    word: even
    stem: even
    docFrequency: 13.0
    docPositions:
    - 167
    - 210
    - 214
    - 232
    - 238
    - 516
    - 535
    - 537
    - 547
    - 551
  able: !ruby/object:Word
    word: able
    stem: abl
    docFrequency: 13.0
    docPositions:
    - 167
    - 199
    - 274
    - 315
    - 317
    - 516
    - 528
    - 565
    - 593
    - 595
  decide: !ruby/object:Word
    word: decide
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  rather: !ruby/object:Word
    word: rather
    stem: rather
    docFrequency: 9.0
    docPositions:
    - 167
    - 229
    - 265
    - 304
    - 516
    - 546
    - 561
    - 586
  basically: !ruby/object:Word
    word: basically
    stem: basic
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  practical: !ruby/object:Word
    word: practical
    stem: practic
    docFrequency: 5.0
    docPositions:
    - 167
    - 306
    - 516
    - 588
  purposes: !ruby/object:Word
    word: purposes
    stem: purpos
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  etc: !ruby/object:Word
    word: etc
    stem: etc
    docFrequency: 23.0
    docPositions:
    - 167
    - 199
    - 204
    - 205
    - 209
    - 210
    - 237
    - 258
    - 280
    - 516
    - 528
    - 531
    - 532
    - 534
    - 535
    - 550
    - 558
    - 568
  n: !ruby/object:Word
    word: n
    stem: n
    docFrequency: 9.0
    docPositions:
    - 167
    - 516
  out: !ruby/object:Word
    word: out
    stem: out
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  then: !ruby/object:Word
    word: then
    stem: then
    docFrequency: 17.0
    docPositions:
    - 167
    - 168
    - 229
    - 232
    - 275
    - 287
    - 315
    - 516
    - 517
    - 546
    - 547
    - 566
    - 573
    - 593
  exist: !ruby/object:Word
    word: exist
    stem: exist
    docFrequency: 7.0
    docPositions:
    - 167
    - 265
    - 306
    - 516
    - 561
    - 588
  known: !ruby/object:Word
    word: known
    stem: known
    docFrequency: 5.0
    docPositions:
    - 167
    - 318
    - 516
    - 596
  say: !ruby/object:Word
    word: say
    stem: sai
    docFrequency: 12.0
    docPositions:
    - 167
    - 168
    - 199
    - 215
    - 278
    - 283
    - 516
    - 517
    - 528
    - 538
    - 571
  occur: !ruby/object:Word
    word: occur
    stem: occur
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  assuming: !ruby/object:Word
    word: assuming
    stem: assum
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  have: !ruby/object:Word
    word: have
    stem: have
    docFrequency: 14.0
    docPositions:
    - 167
    - 217
    - 228
    - 274
    - 278
    - 281
    - 309
    - 516
    - 540
    - 565
    - 569
    - 589
  just: !ruby/object:Word
    word: just
    stem: just
    docFrequency: 12.0
    docPositions:
    - 167
    - 210
    - 217
    - 278
    - 296
    - 516
    - 535
    - 540
    - 580
  appeared: !ruby/object:Word
    word: appeared
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  we: !ruby/object:Word
    word: we
    stem: we
    docFrequency: 25.0
    docPositions:
    - 167
    - 173
    - 185
    - 217
    - 228
    - 270
    - 274
    - 281
    - 319
    - 323
    - 516
    - 520
    - 521
    - 540
    - 564
    - 565
    - 569
    - 597
    - 598
  next: !ruby/object:Word
    word: next
    stem: next
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  time: !ruby/object:Word
    word: time
    stem: time
    docFrequency: 5.0
    docPositions:
    - 167
    - 200
    - 516
    - 529
  tails: !ruby/object:Word
    word: tails
    stem: tail
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  guaranteed: !ruby/object:Word
    word: guaranteed
    stem: guarante
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  contradicts: !ruby/object:Word
    word: contradicts
    stem: contradict
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  memoryless: !ruby/object:Word
    word: memoryless
    stem: memoryless
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  behavior: !ruby/object:Word
    word: behavior
    stem: behavior
    docFrequency: 3.0
    docPositions:
    - 167
    - 516
  number: !ruby/object:Word
    word: number
    stem: number
    docFrequency: 14.0
    docPositions:
    - 168
    - 188
    - 298
    - 301
    - 517
    - 582
    - 585
  written: !ruby/object:Word
    word: written
    stem: written
    docFrequency: 8.0
    docPositions:
    - 168
    - 367
    - 488
    - 517
  sum: !ruby/object:Word
    word: sum
    stem: sum
    docFrequency: 9.0
    docPositions:
    - 168
    - 304
    - 517
    - 586
  units: !ruby/object:Word
    word: units
    stem: unit
    docFrequency: 9.0
    docPositions:
    - 168
    - 304
    - 517
    - 586
  indeed: !ruby/object:Word
    word: indeed
    stem: inde
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  write: !ruby/object:Word
    word: write
    stem: write
    docFrequency: 4.0
    docPositions:
    - 168
    - 503
    - 517
  do: !ruby/object:Word
    word: do
    stem: do
    docFrequency: 9.0
    docPositions:
    - 168
    - 239
    - 274
    - 280
    - 517
    - 552
    - 565
    - 568
  twice: !ruby/object:Word
    word: twice
    stem: twice
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  connecting: !ruby/object:Word
    word: connecting
    stem: connect
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  copies: !ruby/object:Word
    word: copies
    stem: copi
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  plus: !ruby/object:Word
    word: plus
    stem: plu
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  sign: !ruby/object:Word
    word: sign
    stem: sign
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  complaints: !ruby/object:Word
    word: complaints
    stem: complaint
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  limited: !ruby/object:Word
    word: limited
    stem: limit
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  resources: !ruby/object:Word
    word: resources
    stem: resourc
    docFrequency: 5.0
    docPositions:
    - 168
    - 315
    - 517
    - 593
  appropriate: !ruby/object:Word
    word: appropriate
    stem: appropri
    docFrequency: 5.0
    docPositions:
    - 168
    - 237
    - 517
    - 550
  world: !ruby/object:Word
    word: world
    stem: world
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  inappropriate: !ruby/object:Word
    word: inappropriate
    stem: inappropri
    docFrequency: 5.0
    docPositions:
    - 168
    - 280
    - 517
    - 568
  imaginary: !ruby/object:Word
    word: imaginary
    stem: imaginari
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  highly: !ruby/object:Word
    word: highly
    stem: highli
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  idealized: !ruby/object:Word
    word: idealized
    stem: ideal
    docFrequency: 3.0
    docPositions:
    - 168
    - 517
  universe: !ruby/object:Word
    word: universe
    stem: univers
    docFrequency: 5.0
    docPositions:
    - 168
    - 280
    - 517
    - 568
  formulated: !ruby/object:Word
    word: formulated
    stem: formul
    docFrequency: 3.0
    docPositions:
    - 171
    - 518
  via: !ruby/object:Word
    word: via
    stem: via
    docFrequency: 3.0
    docPositions:
    - 171
    - 518
  notions: !ruby/object:Word
    word: notions
    stem: notion
    docFrequency: 28.0
    docPositions:
    - 171
    - 172
    - 188
    - 189
    - 215
    - 295
    - 296
    - 518
    - 519
    - 522
    - 523
    - 538
    - 579
    - 580
  restored: !ruby/object:Word
    word: restored
    stem: restor
    docFrequency: 5.0
    docPositions:
    - 172
    - 189
    - 519
    - 523
  searching: !ruby/object:Word
    word: searching
    stem: search
    docFrequency: 3.0
    docPositions:
    - 173
    - 520
  google: !ruby/object:Word
    word: google
    stem: googl
    docFrequency: 4.0
    docPositions:
    - 173
    - 489
    - 520
  define: !ruby/object:Word
    word: define
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 173
    - 520
  line: !ruby/object:Word
    word: line
    stem: line
    docFrequency: 11.0
    docPositions:
    - 173
    - 175
    - 177
    - 187
    - 220
    - 226
    - 520
    - 543
    - 545
  get: !ruby/object:Word
    word: get
    stem: get
    docFrequency: 10.0
    docPositions:
    - 173
    - 305
    - 323
    - 447
    - 520
    - 587
    - 598
  length: !ruby/object:Word
    word: length
    stem: length
    docFrequency: 15.0
    docPositions:
    - 173
    - 175
    - 176
    - 184
    - 187
    - 304
    - 305
    - 359
    - 520
    - 586
    - 587
    - 604
  breadth: !ruby/object:Word
    word: breadth
    stem: breadth
    docFrequency: 7.0
    docPositions:
    - 173
    - 175
    - 181
    - 520
  thickness: !ruby/object:Word
    word: thickness
    stem: thick
    docFrequency: 7.0
    docPositions:
    - 173
    - 175
    - 184
    - 520
  find: !ruby/object:Word
    word: find
    stem: find
    docFrequency: 6.0
    docPositions:
    - 173
    - 223
    - 275
    - 520
    - 566
  recursively: !ruby/object:Word
    word: recursively
    stem: recurs
    docFrequency: 8.0
    docPositions:
    - 173
    - 188
    - 309
    - 520
    - 589
  doing: !ruby/object:Word
    word: doing
    stem: do
    docFrequency: 3.0
    docPositions:
    - 173
    - 520
  would: !ruby/object:Word
    word: would
    stem: would
    docFrequency: 7.0
    docPositions:
    - 173
    - 242
    - 278
    - 304
    - 520
    - 586
  large: !ruby/object:Word
    word: large
    stem: larg
    docFrequency: 6.0
    docPositions:
    - 173
    - 188
    - 215
    - 520
    - 538
  subnetwork: !ruby/object:Word
    word: subnetwork
    stem: subnetwork
    docFrequency: 3.0
    docPositions:
    - 173
    - 520
  here: !ruby/object:Word
    word: here
    stem: here
    docFrequency: 13.0
    docPositions:
    - 173
    - 188
    - 247
    - 273
    - 305
    - 360
    - 476
    - 520
    - 522
    - 555
    - 587
    - 605
  small: !ruby/object:Word
    word: small
    stem: small
    docFrequency: 7.0
    docPositions:
    - 173
    - 188
    - 239
    - 520
    - 522
    - 552
  fragment: !ruby/object:Word
    word: fragment
    stem: fragment
    docFrequency: 3.0
    docPositions:
    - 173
    - 520
  linear: !ruby/object:Word
    word: linear
    stem: linear
    docFrequency: 18.0
    docPositions:
    - 176
    - 177
    - 187
    - 205
    - 282
    - 289
    - 532
    - 570
    - 575
  extent: !ruby/object:Word
    word: extent
    stem: extent
    docFrequency: 6.0
    docPositions:
    - 176
    - 178
    - 179
    - 181
    - 185
  space: !ruby/object:Word
    word: space
    stem: space
    docFrequency: 16.0
    docPositions:
    - 176
    - 179
    - 180
    - 219
    - 282
    - 283
    - 289
    - 542
    - 570
    - 571
    - 575
  along: !ruby/object:Word
    word: along
    stem: along
    docFrequency: 2.0
    docPositions:
    - 177
  range: !ruby/object:Word
    word: range
    stem: rang
    docFrequency: 2.0
    docPositions:
    - 178
  locations: !ruby/object:Word
    word: locations
    stem: locat
    docFrequency: 2.0
    docPositions:
    - 178
  location: !ruby/object:Word
    word: location
    stem: locat
    docFrequency: 2.0
    docPositions:
    - 179
  point: !ruby/object:Word
    word: point
    stem: point
    docFrequency: 5.0
    docPositions:
    - 179
    - 221
    - 242
    - 544
  unlimited: !ruby/object:Word
    word: unlimited
    stem: unlimit
    docFrequency: 4.0
    docPositions:
    - 180
    - 315
    - 593
  expanse: !ruby/object:Word
    word: expanse
    stem: expans
    docFrequency: 2.0
    docPositions:
    - 180
  everything: !ruby/object:Word
    word: everything
    stem: everyth
    docFrequency: 2.0
    docPositions:
    - 180
  located: !ruby/object:Word
    word: located
    stem: locat
    docFrequency: 2.0
    docPositions:
    - 180
  side: !ruby/object:Word
    word: side
    stem: side
    docFrequency: 6.0
    docPositions:
    - 181
    - 182
    - 185
  surface: !ruby/object:Word
    word: surface
    stem: surfac
    docFrequency: 3.0
    docPositions:
    - 182
    - 183
  forming: !ruby/object:Word
    word: forming
    stem: form
    docFrequency: 2.0
    docPositions:
    - 182
  part: !ruby/object:Word
    word: part
    stem: part
    docFrequency: 5.0
    docPositions:
    - 182
    - 280
    - 488
    - 568
  object: !ruby/object:Word
    word: object
    stem: object
    docFrequency: 8.0
    docPositions:
    - 182
    - 183
    - 184
    - 274
    - 304
    - 565
    - 586
  extended: !ruby/object:Word
    word: extended
    stem: extend
    docFrequency: 4.0
    docPositions:
    - 183
    - 296
    - 580
  dimensional: !ruby/object:Word
    word: dimensional
    stem: dimension
    docFrequency: 11.0
    docPositions:
    - 183
    - 282
    - 570
  outer: !ruby/object:Word
    word: outer
    stem: outer
    docFrequency: 2.0
    docPositions:
    - 183
  boundary: !ruby/object:Word
    word: boundary
    stem: boundari
    docFrequency: 2.0
    docPositions:
    - 183
  three: !ruby/object:Word
    word: three
    stem: three
    docFrequency: 12.0
    docPositions:
    - 183
    - 219
    - 236
    - 282
    - 289
    - 542
    - 549
    - 570
    - 575
  dimension: !ruby/object:Word
    word: dimension
    stem: dimens
    docFrequency: 6.0
    docPositions:
    - 184
    - 282
    - 289
    - 570
    - 575
  through: !ruby/object:Word
    word: through
    stem: through
    docFrequency: 4.0
    docPositions:
    - 184
    - 220
    - 543
  opposed: !ruby/object:Word
    word: opposed
    stem: oppos
    docFrequency: 2.0
    docPositions:
    - 184
  width: !ruby/object:Word
    word: width
    stem: width
    docFrequency: 3.0
    docPositions:
    - 184
    - 185
  up: !ruby/object:Word
    word: up
    stem: up
    docFrequency: 4.0
    docPositions:
    - 185
    - 278
    - 521
  arrows: !ruby/object:Word
    word: arrows
    stem: arrow
    docFrequency: 3.0
    docPositions:
    - 185
    - 521
  mean: !ruby/object:Word
    word: mean
    stem: mean
    docFrequency: 13.0
    docPositions:
    - 185
    - 192
    - 200
    - 210
    - 252
    - 316
    - 521
    - 526
    - 529
    - 535
    - 557
    - 594
  above: !ruby/object:Word
    word: above
    stem: abov
    docFrequency: 7.0
    docPositions:
    - 185
    - 312
    - 317
    - 521
    - 592
    - 595
  observe: !ruby/object:Word
    word: observe
    stem: observ
    docFrequency: 3.0
    docPositions:
    - 185
    - 521
  circularity: !ruby/object:Word
    word: circularity
    stem: circular
    docFrequency: 4.0
    docPositions:
    - 187
    - 188
    - 522
  appears: !ruby/object:Word
    word: appears
    stem: appear
    docFrequency: 6.0
    docPositions:
    - 187
    - 310
    - 315
    - 590
    - 593
  single: !ruby/object:Word
    word: single
    stem: singl
    docFrequency: 14.0
    docPositions:
    - 188
    - 214
    - 217
    - 218
    - 243
    - 280
    - 316
    - 537
    - 540
    - 541
    - 554
    - 568
    - 594
  notion: !ruby/object:Word
    word: notion
    stem: notion
    docFrequency: 22.0
    docPositions:
    - 188
    - 190
    - 192
    - 215
    - 296
    - 300
    - 301
    - 524
    - 526
    - 538
    - 580
    - 584
    - 585
  involves: !ruby/object:Word
    word: involves
    stem: involv
    docFrequency: 2.0
    docPositions:
    - 188
  quite: !ruby/object:Word
    word: quite
    stem: quit
    docFrequency: 4.0
    docPositions:
    - 188
    - 209
    - 534
  remote: !ruby/object:Word
    word: remote
    stem: remot
    docFrequency: 4.0
    docPositions:
    - 188
    - 229
    - 546
  system: !ruby/object:Word
    word: system
    stem: system
    docFrequency: 13.0
    docPositions:
    - 188
    - 204
    - 214
    - 215
    - 522
    - 531
    - 537
    - 538
  unsuitable: !ruby/object:Word
    word: unsuitable
    stem: unsuit
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  disallowed: !ruby/object:Word
    word: disallowed
    stem: disallow
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  set: !ruby/object:Word
    word: set
    stem: set
    docFrequency: 40.0
    docPositions:
    - 188
    - 200
    - 205
    - 218
    - 226
    - 236
    - 238
    - 246
    - 284
    - 304
    - 309
    - 311
    - 315
    - 505
    - 522
    - 529
    - 532
    - 541
    - 545
    - 549
    - 551
    - 572
    - 586
    - 589
    - 591
    - 593
  involved: !ruby/object:Word
    word: involved
    stem: involv
    docFrequency: 4.0
    docPositions:
    - 188
    - 447
    - 522
  kept: !ruby/object:Word
    word: kept
    stem: kept
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  reasonably: !ruby/object:Word
    word: reasonably
    stem: reason
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  whenever: !ruby/object:Word
    word: whenever
    stem: whenev
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  also: !ruby/object:Word
    word: also
    stem: also
    docFrequency: 22.0
    docPositions:
    - 188
    - 205
    - 280
    - 282
    - 288
    - 300
    - 318
    - 360
    - 488
    - 522
    - 532
    - 568
    - 570
    - 574
    - 584
    - 596
    - 605
  semantic: !ruby/object:Word
    word: semantic
    stem: semant
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  primes: !ruby/object:Word
    word: primes
    stem: prime
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  attempt: !ruby/object:Word
    word: attempt
    stem: attempt
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  disclose: !ruby/object:Word
    word: disclose
    stem: disclos
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  common: !ruby/object:Word
    word: common
    stem: common
    docFrequency: 7.0
    docPositions:
    - 188
    - 274
    - 522
    - 565
  like: !ruby/object:Word
    word: like
    stem: like
    docFrequency: 15.0
    docPositions:
    - 188
    - 217
    - 218
    - 220
    - 221
    - 276
    - 315
    - 522
    - 540
    - 541
    - 543
    - 544
    - 567
    - 593
  structure: !ruby/object:Word
    word: structure
    stem: structur
    docFrequency: 3.0
    docPositions:
    - 188
    - 522
  behind: !ruby/object:Word
    word: behind
    stem: behind
    docFrequency: 7.0
    docPositions:
    - 188
    - 204
    - 205
    - 522
    - 531
    - 532
  natural: !ruby/object:Word
    word: natural
    stem: natur
    docFrequency: 15.0
    docPositions:
    - 188
    - 192
    - 291
    - 298
    - 300
    - 301
    - 522
    - 526
    - 577
    - 582
    - 584
    - 585
  languages: !ruby/object:Word
    word: languages
    stem: languag
    docFrequency: 11.0
    docPositions:
    - 188
    - 237
    - 243
    - 306
    - 522
    - 550
    - 554
    - 588
  primitives: !ruby/object:Word
    word: primitives
    stem: primit
    docFrequency: 9.0
    docPositions:
    - 189
    - 215
    - 523
    - 538
  curiously: !ruby/object:Word
    word: curiously
    stem: curious
    docFrequency: 3.0
    docPositions:
    - 190
    - 524
  encyclopedia: !ruby/object:Word
    word: encyclopedia
    stem: encyclopedia
    docFrequency: 3.0
    docPositions:
    - 190
    - 524
  contains: !ruby/object:Word
    word: contains
    stem: contain
    docFrequency: 13.0
    docPositions:
    - 190
    - 236
    - 247
    - 295
    - 296
    - 524
    - 549
    - 555
    - 579
    - 580
  different: !ruby/object:Word
    word: different
    stem: differ
    docFrequency: 8.0
    docPositions:
    - 190
    - 211
    - 243
    - 246
    - 524
    - 536
    - 554
  general: !ruby/object:Word
    word: general
    stem: gener
    docFrequency: 8.0
    docPositions:
    - 190
    - 204
    - 205
    - 438
    - 524
    - 531
    - 532
  now: !ruby/object:Word
    word: now
    stem: now
    docFrequency: 7.0
    docPositions:
    - 191
    - 199
    - 265
    - 525
    - 528
    - 561
  means: !ruby/object:Word
    word: means
    stem: mean
    docFrequency: 9.0
    docPositions:
    - 191
    - 200
    - 317
    - 323
    - 525
    - 529
    - 595
    - 598
  unless: !ruby/object:Word
    word: unless
    stem: unless
    docFrequency: 9.0
    docPositions:
    - 191
    - 199
    - 208
    - 209
    - 525
    - 528
    - 533
    - 534
  explicitly: !ruby/object:Word
    word: explicitly
    stem: explicitli
    docFrequency: 3.0
    docPositions:
    - 191
    - 525
  stated: !ruby/object:Word
    word: stated
    stem: state
    docFrequency: 3.0
    docPositions:
    - 191
    - 525
  otherwise: !ruby/object:Word
    word: otherwise
    stem: otherwis
    docFrequency: 6.0
    docPositions:
    - 191
    - 265
    - 323
    - 525
    - 561
  lack: !ruby/object:Word
    word: lack
    stem: lack
    docFrequency: 5.0
    docPositions:
    - 192
    - 526
  primitive: !ruby/object:Word
    word: primitive
    stem: primit
    docFrequency: 15.0
    docPositions:
    - 192
    - 215
    - 280
    - 295
    - 296
    - 301
    - 526
    - 538
    - 568
    - 579
    - 580
    - 585
  information: !ruby/object:Word
    word: information
    stem: inform
    docFrequency: 8.0
    docPositions:
    - 192
    - 481
    - 526
  provide: !ruby/object:Word
    word: provide
    stem: provid
    docFrequency: 3.0
    docPositions:
    - 192
    - 526
  proofs: !ruby/object:Word
    word: proofs
    stem: proof
    docFrequency: 7.0
    docPositions:
    - 192
    - 229
    - 526
    - 546
  intuitive: !ruby/object:Word
    word: intuitive
    stem: intuit
    docFrequency: 3.0
    docPositions:
    - 192
    - 526
  understanding: !ruby/object:Word
    word: understanding
    stem: understand
    docFrequency: 3.0
    docPositions:
    - 192
    - 526
  communicated: !ruby/object:Word
    word: communicated
    stem: commun
    docFrequency: 3.0
    docPositions:
    - 192
    - 526
  language: !ruby/object:Word
    word: language
    stem: languag
    docFrequency: 54.0
    docPositions:
    - 192
    - 214
    - 233
    - 236
    - 237
    - 238
    - 240
    - 242
    - 243
    - 269
    - 287
    - 288
    - 295
    - 300
    - 304
    - 305
    - 311
    - 526
    - 537
    - 548
    - 549
    - 550
    - 551
    - 553
    - 554
    - 563
    - 573
    - 574
    - 579
    - 584
    - 586
    - 587
    - 591
  instrumental: !ruby/object:Word
    word: instrumental
    stem: instrument
    docFrequency: 3.0
    docPositions:
    - 192
    - 526
  guessing: !ruby/object:Word
    word: guessing
    stem: guess
    docFrequency: 3.0
    docPositions:
    - 192
    - 526
  prove: !ruby/object:Word
    word: prove
    stem: prove
    docFrequency: 18.0
    docPositions:
    - 192
    - 209
    - 223
    - 270
    - 275
    - 291
    - 526
    - 534
    - 564
    - 566
    - 577
  proved: !ruby/object:Word
    word: proved
    stem: prove
    docFrequency: 11.0
    docPositions:
    - 192
    - 275
    - 287
    - 310
    - 526
    - 566
    - 573
    - 590
  last: !ruby/object:Word
    word: last
    stem: last
    docFrequency: 4.0
    docPositions:
    - 192
    - 487
    - 526
  postulate: !ruby/object:Word
    word: postulate
    stem: postul
    docFrequency: 3.0
    docPositions:
    - 192
    - 526
  conceptual: !ruby/object:Word
    word: conceptual
    stem: conceptu
    docFrequency: 5.0
    docPositions:
    - 196
    - 527
  helps: !ruby/object:Word
    word: helps
    stem: help
    docFrequency: 5.0
    docPositions:
    - 196
    - 527
  understand: !ruby/object:Word
    word: understand
    stem: understand
    docFrequency: 7.0
    docPositions:
    - 196
    - 232
    - 527
    - 547
  domain: !ruby/object:Word
    word: domain
    stem: domain
    docFrequency: 5.0
    docPositions:
    - 196
    - 283
    - 527
    - 571
  terms: !ruby/object:Word
    word: terms
    stem: term
    docFrequency: 5.0
    docPositions:
    - 196
    - 281
    - 527
    - 569
  desktop: !ruby/object:Word
    word: desktop
    stem: desktop
    docFrequency: 5.0
    docPositions:
    - 196
    - 527
  monitor: !ruby/object:Word
    word: monitor
    stem: monitor
    docFrequency: 3.0
    docPositions:
    - 196
    - 527
  computer: !ruby/object:Word
    word: computer
    stem: comput
    docFrequency: 37.0
    docPositions:
    - 196
    - 199
    - 200
    - 204
    - 205
    - 208
    - 232
    - 237
    - 239
    - 304
    - 527
    - 528
    - 529
    - 531
    - 532
    - 533
    - 547
    - 550
    - 552
    - 586
  user: !ruby/object:Word
    word: user
    stem: user
    docFrequency: 10.0
    docPositions:
    - 196
    - 204
    - 499
    - 501
    - 527
    - 531
  accustomed: !ruby/object:Word
    word: accustomed
    stem: accustom
    docFrequency: 5.0
    docPositions:
    - 196
    - 527
  thus: !ruby/object:Word
    word: thus
    stem: thu
    docFrequency: 12.0
    docPositions:
    - 196
    - 199
    - 258
    - 274
    - 290
    - 295
    - 527
    - 528
    - 558
    - 576
    - 579
  analogies: !ruby/object:Word
    word: analogies
    stem: analog
    docFrequency: 5.0
    docPositions:
    - 196
    - 527
  below: !ruby/object:Word
    word: below
    stem: below
    docFrequency: 3.0
    docPositions:
    - 196
    - 527
  electronic: !ruby/object:Word
    word: electronic
    stem: electron
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  monster: !ruby/object:Word
    word: monster
    stem: monster
    docFrequency: 5.0
    docPositions:
    - 199
    - 528
  read: !ruby/object:Word
    word: read
    stem: read
    docFrequency: 7.0
    docPositions:
    - 199
    - 393
    - 418
    - 528
  punch: !ruby/object:Word
    word: punch
    stem: punch
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  tape: !ruby/object:Word
    word: tape
    stem: tape
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  instructions: !ruby/object:Word
    word: instructions
    stem: instruct
    docFrequency: 21.0
    docPositions:
    - 199
    - 208
    - 214
    - 237
    - 238
    - 528
    - 533
    - 537
    - 550
    - 551
  stipulated: !ruby/object:Word
    word: stipulated
    stem: stipul
    docFrequency: 5.0
    docPositions:
    - 199
    - 528
  hardware: !ruby/object:Word
    word: hardware
    stem: hardwar
    docFrequency: 23.0
    docPositions:
    - 199
    - 208
    - 214
    - 237
    - 238
    - 528
    - 533
    - 537
    - 550
    - 551
  execute: !ruby/object:Word
    word: execute
    stem: execut
    docFrequency: 7.0
    docPositions:
    - 199
    - 208
    - 528
    - 533
  them: !ruby/object:Word
    word: them
    stem: them
    docFrequency: 9.0
    docPositions:
    - 199
    - 208
    - 315
    - 323
    - 528
    - 533
    - 593
    - 598
  quickly: !ruby/object:Word
    word: quickly
    stem: quickli
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  performing: !ruby/object:Word
    word: performing
    stem: perform
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  lot: !ruby/object:Word
    word: lot
    stem: lot
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  boring: !ruby/object:Word
    word: boring
    stem: bore
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  calculations: !ruby/object:Word
    word: calculations
    stem: calcul
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  parents: !ruby/object:Word
    word: parents
    stem: parent
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  complain: !ruby/object:Word
    word: complain
    stem: complain
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  personal: !ruby/object:Word
    word: personal
    stem: person
    docFrequency: 8.0
    docPositions:
    - 199
    - 375
    - 528
  too: !ruby/object:Word
    word: too
    stem: too
    docFrequency: 7.0
    docPositions:
    - 199
    - 214
    - 243
    - 528
    - 537
    - 554
  fascinating: !ruby/object:Word
    word: fascinating
    stem: fascin
    docFrequency: 11.0
    docPositions:
    - 199
    - 208
    - 214
    - 528
    - 533
    - 537
  software: !ruby/object:Word
    word: software
    stem: softwar
    docFrequency: 7.0
    docPositions:
    - 199
    - 204
    - 208
    - 528
    - 531
    - 533
  compact: !ruby/object:Word
    word: compact
    stem: compact
    docFrequency: 5.0
    docPositions:
    - 199
    - 283
    - 528
    - 571
  disk: !ruby/object:Word
    word: disk
    stem: disk
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  before: !ruby/object:Word
    word: before
    stem: befor
    docFrequency: 4.0
    docPositions:
    - 199
    - 278
    - 528
  arithmetical: !ruby/object:Word
    word: arithmetical
    stem: arithmet
    docFrequency: 5.0
    docPositions:
    - 199
    - 291
    - 528
    - 577
  logical: !ruby/object:Word
    word: logical
    stem: logic
    docFrequency: 11.0
    docPositions:
    - 199
    - 209
    - 210
    - 236
    - 294
    - 528
    - 534
    - 535
    - 549
    - 578
  operations: !ruby/object:Word
    word: operations
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  loops: !ruby/object:Word
    word: loops
    stem: loop
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  conditional: !ruby/object:Word
    word: conditional
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  execution: !ruby/object:Word
    word: execution
    stem: execut
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  nice: !ruby/object:Word
    word: nice
    stem: nice
    docFrequency: 5.0
    docPositions:
    - 199
    - 214
    - 528
    - 537
  looking: !ruby/object:Word
    word: looking
    stem: look
    docFrequency: 3.0
    docPositions:
    - 199
    - 528
  programmers: !ruby/object:Word
    word: programmers
    stem: programm
    docFrequency: 9.0
    docPositions:
    - 199
    - 214
    - 237
    - 528
    - 537
    - 550
  develop: !ruby/object:Word
    word: develop
    stem: develop
    docFrequency: 5.0
    docPositions:
    - 199
    - 237
    - 528
    - 550
  combinations: !ruby/object:Word
    word: combinations
    stem: combin
    docFrequency: 5.0
    docPositions:
    - 199
    - 200
    - 528
    - 529
  programs: !ruby/object:Word
    word: programs
    stem: program
    docFrequency: 15.0
    docPositions:
    - 199
    - 200
    - 208
    - 214
    - 237
    - 318
    - 528
    - 529
    - 533
    - 537
    - 550
    - 596
  programmer: !ruby/object:Word
    word: programmer
    stem: programm
    docFrequency: 11.0
    docPositions:
    - 200
    - 239
    - 529
    - 552
  instruction: !ruby/object:Word
    word: instruction
    stem: instruct
    docFrequency: 9.0
    docPositions:
    - 200
    - 529
  given: !ruby/object:Word
    word: given
    stem: given
    docFrequency: 31.0
    docPositions:
    - 200
    - 201
    - 211
    - 220
    - 232
    - 258
    - 265
    - 269
    - 275
    - 288
    - 310
    - 311
    - 315
    - 529
    - 530
    - 536
    - 543
    - 547
    - 558
    - 561
    - 563
    - 566
    - 574
    - 590
    - 591
    - 593
  add: !ruby/object:Word
    word: add
    stem: add
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  elements: !ruby/object:Word
    word: elements
    stem: element
    docFrequency: 11.0
    docPositions:
    - 200
    - 219
    - 354
    - 529
    - 542
    - 599
  nor: !ruby/object:Word
    word: nor
    stem: nor
    docFrequency: 9.0
    docPositions:
    - 200
    - 275
    - 289
    - 310
    - 529
    - 566
    - 575
    - 590
  modify: !ruby/object:Word
    word: modify
    stem: modifi
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  existing: !ruby/object:Word
    word: existing
    stem: exist
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  program: !ruby/object:Word
    word: program
    stem: program
    docFrequency: 7.0
    docPositions:
    - 200
    - 239
    - 319
    - 529
    - 552
    - 597
  way: !ruby/object:Word
    word: way
    stem: wai
    docFrequency: 9.0
    docPositions:
    - 200
    - 208
    - 209
    - 316
    - 529
    - 533
    - 534
    - 594
  good: !ruby/object:Word
    word: good
    stem: good
    docFrequency: 5.0
    docPositions:
    - 200
    - 529
  competent: !ruby/object:Word
    word: competent
    stem: compet
    docFrequency: 7.0
    docPositions:
    - 200
    - 201
    - 239
    - 529
    - 530
    - 552
  feels: !ruby/object:Word
    word: feels
    stem: feel
    docFrequency: 5.0
    docPositions:
    - 200
    - 201
    - 529
    - 530
  pretty: !ruby/object:Word
    word: pretty
    stem: pretti
    docFrequency: 5.0
    docPositions:
    - 200
    - 201
    - 529
    - 530
  free: !ruby/object:Word
    word: free
    stem: free
    docFrequency: 9.0
    docPositions:
    - 200
    - 201
    - 319
    - 488
    - 529
    - 530
    - 597
  implement: !ruby/object:Word
    word: implement
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  understood: !ruby/object:Word
    word: understood
    stem: understood
    docFrequency: 5.0
    docPositions:
    - 200
    - 239
    - 529
    - 552
  algorithm: !ruby/object:Word
    word: algorithm
    stem: algorithm
    docFrequency: 11.0
    docPositions:
    - 200
    - 239
    - 310
    - 311
    - 315
    - 529
    - 552
    - 590
    - 591
    - 593
  provided: !ruby/object:Word
    word: provided
    stem: provid
    docFrequency: 4.0
    docPositions:
    - 200
    - 488
    - 529
  permits: !ruby/object:Word
    word: permits
    stem: permit
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  most: !ruby/object:Word
    word: most
    stem: most
    docFrequency: 7.0
    docPositions:
    - 200
    - 237
    - 284
    - 529
    - 550
    - 572
  problematic: !ruby/object:Word
    word: problematic
    stem: problemat
    docFrequency: 5.0
    docPositions:
    - 200
    - 529
  memory: !ruby/object:Word
    word: memory
    stem: memori
    docFrequency: 5.0
    docPositions:
    - 200
    - 304
    - 529
    - 586
  speed: !ruby/object:Word
    word: speed
    stem: speed
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  high: !ruby/object:Word
    word: high
    stem: high
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  enough: !ruby/object:Word
    word: enough
    stem: enough
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  less: !ruby/object:Word
    word: less
    stem: less
    docFrequency: 3.0
    docPositions:
    - 200
    - 529
  likewise: !ruby/object:Word
    word: likewise
    stem: likewis
    docFrequency: 15.0
    docPositions:
    - 201
    - 205
    - 209
    - 215
    - 237
    - 240
    - 243
    - 530
    - 532
    - 534
    - 538
    - 550
    - 553
    - 554
  working: !ruby/object:Word
    word: working
    stem: work
    docFrequency: 5.0
    docPositions:
    - 201
    - 247
    - 530
    - 555
  faces: !ruby/object:Word
    word: faces
    stem: face
    docFrequency: 3.0
    docPositions:
    - 201
    - 530
  express: !ruby/object:Word
    word: express
    stem: express
    docFrequency: 3.0
    docPositions:
    - 201
    - 530
  clear: !ruby/object:Word
    word: clear
    stem: clear
    docFrequency: 3.0
    docPositions:
    - 201
    - 530
  idea: !ruby/object:Word
    word: idea
    stem: idea
    docFrequency: 5.0
    docPositions:
    - 201
    - 284
    - 530
    - 572
  systems: !ruby/object:Word
    word: systems
    stem: system
    docFrequency: 3.0
    docPositions:
    - 201
    - 530
  first: !ruby/object:Word
    word: first
    stem: first
    docFrequency: 8.0
    docPositions:
    - 204
    - 284
    - 300
    - 349
    - 531
    - 572
    - 584
  collection: !ruby/object:Word
    word: collection
    stem: collect
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  applications: !ruby/object:Word
    word: applications
    stem: applic
    docFrequency: 9.0
    docPositions:
    - 204
    - 237
    - 531
    - 550
  games: !ruby/object:Word
    word: games
    stem: game
    docFrequency: 5.0
    docPositions:
    - 204
    - 208
    - 531
    - 533
  web: !ruby/object:Word
    word: web
    stem: web
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  browsers: !ruby/object:Word
    word: browsers
    stem: browser
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  media: !ruby/object:Word
    word: media
    stem: media
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  players: !ruby/object:Word
    word: players
    stem: player
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  word: !ruby/object:Word
    word: word
    stem: word
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  processors: !ruby/object:Word
    word: processors
    stem: processor
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  editors: !ruby/object:Word
    word: editors
    stem: editor
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  function: !ruby/object:Word
    word: function
    stem: function
    docFrequency: 5.0
    docPositions:
    - 204
    - 221
    - 531
    - 544
  operating: !ruby/object:Word
    word: operating
    stem: oper
    docFrequency: 9.0
    docPositions:
    - 204
    - 214
    - 531
    - 537
  windows: !ruby/object:Word
    word: windows
    stem: window
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  macos: !ruby/object:Word
    word: macos
    stem: maco
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  linux: !ruby/object:Word
    word: linux
    stem: linux
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  infrastructure: !ruby/object:Word
    word: infrastructure
    stem: infrastructur
    docFrequency: 7.0
    docPositions:
    - 204
    - 205
    - 531
    - 532
  various: !ruby/object:Word
    word: various
    stem: variou
    docFrequency: 5.0
    docPositions:
    - 204
    - 205
    - 531
    - 532
  each: !ruby/object:Word
    word: each
    stem: each
    docFrequency: 17.0
    docPositions:
    - 204
    - 205
    - 214
    - 215
    - 243
    - 247
    - 248
    - 296
    - 531
    - 532
    - 537
    - 538
    - 554
    - 555
    - 556
    - 580
  application: !ruby/object:Word
    word: application
    stem: applic
    docFrequency: 7.0
    docPositions:
    - 204
    - 214
    - 531
    - 537
  deals: !ruby/object:Word
    word: deals
    stem: deal
    docFrequency: 7.0
    docPositions:
    - 204
    - 205
    - 531
    - 532
  relevant: !ruby/object:Word
    word: relevant
    stem: relev
    docFrequency: 9.0
    docPositions:
    - 204
    - 205
    - 232
    - 274
    - 531
    - 532
    - 547
    - 565
  files: !ruby/object:Word
    word: files
    stem: file
    docFrequency: 7.0
    docPositions:
    - 204
    - 531
  maintains: !ruby/object:Word
    word: maintains
    stem: maintain
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  catalogs: !ruby/object:Word
    word: catalogs
    stem: catalog
    docFrequency: 5.0
    docPositions:
    - 204
    - 531
  directories: !ruby/object:Word
    word: directories
    stem: directori
    docFrequency: 3.0
    docPositions:
    - 204
    - 531
  containing: !ruby/object:Word
    word: containing
    stem: contain
    docFrequency: 9.0
    docPositions:
    - 204
    - 205
    - 305
    - 531
    - 532
    - 587
  possibly: !ruby/object:Word
    word: possibly
    stem: possibl
    docFrequency: 5.0
    docPositions:
    - 204
    - 205
    - 531
    - 532
  theories: !ruby/object:Word
    word: theories
    stem: theori
    docFrequency: 19.0
    docPositions:
    - 205
    - 276
    - 284
    - 289
    - 290
    - 291
    - 309
    - 532
    - 567
    - 572
    - 575
    - 576
    - 577
    - 589
  algebra: !ruby/object:Word
    word: algebra
    stem: algebra
    docFrequency: 13.0
    docPositions:
    - 205
    - 236
    - 282
    - 289
    - 532
    - 549
    - 570
    - 575
  geometry: !ruby/object:Word
    word: geometry
    stem: geometri
    docFrequency: 19.0
    docPositions:
    - 205
    - 280
    - 281
    - 282
    - 291
    - 532
    - 568
    - 569
    - 570
    - 577
  analysis: !ruby/object:Word
    word: analysis
    stem: analysi
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  objects: !ruby/object:Word
    word: objects
    stem: object
    docFrequency: 5.0
    docPositions:
    - 205
    - 532
  relations: !ruby/object:Word
    word: relations
    stem: relat
    docFrequency: 9.0
    docPositions:
    - 205
    - 219
    - 280
    - 532
    - 542
    - 568
  sets: !ruby/object:Word
    word: sets
    stem: set
    docFrequency: 19.0
    docPositions:
    - 205
    - 219
    - 280
    - 354
    - 358
    - 532
    - 542
    - 568
    - 599
    - 603
  reduces: !ruby/object:Word
    word: reduces
    stem: reduc
    docFrequency: 7.0
    docPositions:
    - 205
    - 214
    - 215
    - 532
    - 537
    - 538
  alternatively: !ruby/object:Word
    word: alternatively
    stem: altern
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  higher: !ruby/object:Word
    word: higher
    stem: higher
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  order: !ruby/object:Word
    word: order
    stem: order
    docFrequency: 7.0
    docPositions:
    - 205
    - 284
    - 316
    - 532
    - 572
    - 594
  convenient: !ruby/object:Word
    word: convenient
    stem: conveni
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  assisted: !ruby/object:Word
    word: assisted
    stem: assist
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  formalization: !ruby/object:Word
    word: formalization
    stem: formal
    docFrequency: 5.0
    docPositions:
    - 205
    - 304
    - 532
    - 586
  category: !ruby/object:Word
    word: category
    stem: categori
    docFrequency: 4.0
    docPositions:
    - 205
    - 367
    - 532
  pretends: !ruby/object:Word
    word: pretends
    stem: pretend
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  throne: !ruby/object:Word
    word: throne
    stem: throne
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  cases: !ruby/object:Word
    word: cases
    stem: case
    docFrequency: 5.0
    docPositions:
    - 205
    - 310
    - 532
    - 590
  structures: !ruby/object:Word
    word: structures
    stem: structur
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  kind: !ruby/object:Word
    word: kind
    stem: kind
    docFrequency: 7.0
    docPositions:
    - 205
    - 209
    - 532
    - 534
  spaces: !ruby/object:Word
    word: spaces
    stem: space
    docFrequency: 11.0
    docPositions:
    - 205
    - 283
    - 532
    - 571
  euclidean: !ruby/object:Word
    word: euclidean
    stem: euclidean
    docFrequency: 19.0
    docPositions:
    - 205
    - 219
    - 281
    - 282
    - 291
    - 532
    - 542
    - 569
    - 570
    - 577
  topology: !ruby/object:Word
    word: topology
    stem: topolog
    docFrequency: 7.0
    docPositions:
    - 205
    - 283
    - 532
    - 571
  topological: !ruby/object:Word
    word: topological
    stem: topolog
    docFrequency: 7.0
    docPositions:
    - 205
    - 283
    - 532
    - 571
  differential: !ruby/object:Word
    word: differential
    stem: differenti
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  investigates: !ruby/object:Word
    word: investigates
    stem: investig
    docFrequency: 5.0
    docPositions:
    - 205
    - 532
  smooth: !ruby/object:Word
    word: smooth
    stem: smooth
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  manifolds: !ruby/object:Word
    word: manifolds
    stem: manifold
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  groups: !ruby/object:Word
    word: groups
    stem: group
    docFrequency: 4.0
    docPositions:
    - 205
    - 499
    - 532
  rings: !ruby/object:Word
    word: rings
    stem: ring
    docFrequency: 3.0
    docPositions:
    - 205
    - 532
  fields: !ruby/object:Word
    word: fields
    stem: field
    docFrequency: 5.0
    docPositions:
    - 205
    - 355
    - 532
    - 600
  monkeys: !ruby/object:Word
    word: monkeys
    stem: monkei
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  could: !ruby/object:Word
    word: could
    stem: could
    docFrequency: 7.0
    docPositions:
    - 208
    - 229
    - 533
    - 546
  type: !ruby/object:Word
    word: type
    stem: type
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  into: !ruby/object:Word
    word: into
    stem: into
    docFrequency: 24.0
    docPositions:
    - 208
    - 218
    - 239
    - 242
    - 280
    - 284
    - 295
    - 304
    - 305
    - 316
    - 533
    - 541
    - 552
    - 568
    - 572
    - 579
    - 586
    - 587
    - 594
  sequence: !ruby/object:Word
    word: sequence
    stem: sequenc
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  result: !ruby/object:Word
    word: result
    stem: result
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  programming: !ruby/object:Word
    word: programming
    stem: program
    docFrequency: 15.0
    docPositions:
    - 208
    - 214
    - 237
    - 238
    - 243
    - 533
    - 537
    - 550
    - 551
    - 554
  almost: !ruby/object:Word
    word: almost
    stem: almost
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  chance: !ruby/object:Word
    word: chance
    stem: chanc
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  useful: !ruby/object:Word
    word: useful
    stem: us
    docFrequency: 13.0
    docPositions:
    - 208
    - 214
    - 215
    - 533
    - 537
    - 538
  reflect: !ruby/object:Word
    word: reflect
    stem: reflect
    docFrequency: 5.0
    docPositions:
    - 208
    - 533
  predilections: !ruby/object:Word
    word: predilections
    stem: predilect
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  needs: !ruby/object:Word
    word: needs
    stem: need
    docFrequency: 5.0
    docPositions:
    - 208
    - 316
    - 533
    - 594
  humans: !ruby/object:Word
    word: humans
    stem: human
    docFrequency: 6.0
    docPositions:
    - 208
    - 209
    - 235
    - 533
    - 534
  reflects: !ruby/object:Word
    word: reflects
    stem: reflect
    docFrequency: 3.0
    docPositions:
    - 208
    - 533
  interest: !ruby/object:Word
    word: interest
    stem: interest
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  motivation: !ruby/object:Word
    word: motivation
    stem: motiv
    docFrequency: 5.0
    docPositions:
    - 209
    - 534
  indirect: !ruby/object:Word
    word: indirect
    stem: indirect
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  appreciated: !ruby/object:Word
    word: appreciated
    stem: appreci
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  their: !ruby/object:Word
    word: their
    stem: their
    docFrequency: 13.0
    docPositions:
    - 209
    - 223
    - 275
    - 280
    - 316
    - 318
    - 534
    - 566
    - 568
    - 594
    - 596
  aesthetic: !ruby/object:Word
    word: aesthetic
    stem: aesthet
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  value: !ruby/object:Word
    word: value
    stem: valu
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  necessary: !ruby/object:Word
    word: necessary
    stem: necessari
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  stream: !ruby/object:Word
    word: stream
    stem: stream
    docFrequency: 5.0
    docPositions:
    - 209
    - 210
    - 534
    - 535
  publishable: !ruby/object:Word
    word: publishable
    stem: publish
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  literature: !ruby/object:Word
    word: literature
    stem: literatur
    docFrequency: 3.0
    docPositions:
    - 209
    - 534
  note: !ruby/object:Word
    word: note
    stem: note
    docFrequency: 3.0
    docPositions:
    - 210
    - 535
  already: !ruby/object:Word
    word: already
    stem: alreadi
    docFrequency: 3.0
    docPositions:
    - 210
    - 535
  discovered: !ruby/object:Word
    word: discovered
    stem: discov
    docFrequency: 3.0
    docPositions:
    - 210
    - 535
  statements: !ruby/object:Word
    word: statements
    stem: statement
    docFrequency: 21.0
    docPositions:
    - 211
    - 269
    - 289
    - 291
    - 315
    - 323
    - 536
    - 563
    - 575
    - 577
    - 593
    - 598
  follow: !ruby/object:Word
    word: follow
    stem: follow
    docFrequency: 4.0
    docPositions:
    - 211
    - 489
    - 536
  according: !ruby/object:Word
    word: according
    stem: accord
    docFrequency: 11.0
    docPositions:
    - 211
    - 284
    - 294
    - 296
    - 536
    - 572
    - 578
    - 580
  rules: !ruby/object:Word
    word: rules
    stem: rule
    docFrequency: 21.0
    docPositions:
    - 211
    - 232
    - 236
    - 274
    - 536
    - 547
    - 549
    - 565
  authors: !ruby/object:Word
    word: authors
    stem: author
    docFrequency: 3.0
    docPositions:
    - 211
    - 536
  inference: !ruby/object:Word
    word: inference
    stem: infer
    docFrequency: 3.0
    docPositions:
    - 211
    - 536
  derivation: !ruby/object:Word
    word: derivation
    stem: deriv
    docFrequency: 3.0
    docPositions:
    - 211
    - 536
  deduction: !ruby/object:Word
    word: deduction
    stem: deduct
    docFrequency: 4.0
    docPositions:
    - 211
    - 235
    - 536
  transformation: !ruby/object:Word
    word: transformation
    stem: transform
    docFrequency: 3.0
    docPositions:
    - 211
    - 536
  including: !ruby/object:Word
    word: including
    stem: includ
    docFrequency: 3.0
    docPositions:
    - 211
    - 536
  themselves: !ruby/object:Word
    word: themselves
    stem: themselv
    docFrequency: 3.0
    docPositions:
    - 211
    - 536
  gap: !ruby/object:Word
    word: gap
    stem: gap
    docFrequency: 13.0
    docPositions:
    - 214
    - 215
    - 238
    - 537
    - 538
    - 551
  bare: !ruby/object:Word
    word: bare
    stem: bare
    docFrequency: 5.0
    docPositions:
    - 214
    - 537
  wide: !ruby/object:Word
    word: wide
    stem: wide
    docFrequency: 7.0
    docPositions:
    - 214
    - 215
    - 238
    - 537
    - 538
    - 551
  triple: !ruby/object:Word
    word: triple
    stem: tripl
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  bridging: !ruby/object:Word
    word: bridging
    stem: bridg
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  laborious: !ruby/object:Word
    word: laborious
    stem: labori
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  task: !ruby/object:Word
    word: task
    stem: task
    docFrequency: 7.0
    docPositions:
    - 214
    - 537
  compose: !ruby/object:Word
    word: compose
    stem: compos
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  modules: !ruby/object:Word
    word: modules
    stem: modul
    docFrequency: 6.0
    docPositions:
    - 214
    - 503
    - 537
  subroutines: !ruby/object:Word
    word: subroutines
    stem: subroutin
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  subroutine: !ruby/object:Word
    word: subroutine
    stem: subroutin
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  bit: !ruby/object:Word
    word: bit
    stem: bit
    docFrequency: 9.0
    docPositions:
    - 214
    - 215
    - 537
    - 538
  simpler: !ruby/object:Word
    word: simpler
    stem: simpler
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  tasks: !ruby/object:Word
    word: tasks
    stem: task
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  ultimately: !ruby/object:Word
    word: ultimately
    stem: ultim
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  reduced: !ruby/object:Word
    word: reduced
    stem: reduc
    docFrequency: 3.0
    docPositions:
    - 214
    - 537
  mathematicians: !ruby/object:Word
    word: mathematicians
    stem: mathematician
    docFrequency: 11.0
    docPositions:
    - 215
    - 223
    - 228
    - 240
    - 268
    - 276
    - 538
    - 553
    - 567
  bridge: !ruby/object:Word
    word: bridge
    stem: bridg
    docFrequency: 3.0
    docPositions:
    - 215
    - 538
  ellipse: !ruby/object:Word
    word: ellipse
    stem: ellips
    docFrequency: 3.0
    docPositions:
    - 215
    - 538
  normal: !ruby/object:Word
    word: normal
    stem: normal
    docFrequency: 3.0
    docPositions:
    - 215
    - 538
  distribution: !ruby/object:Word
    word: distribution
    stem: distribut
    docFrequency: 3.0
    docPositions:
    - 215
    - 538
  complicated: !ruby/object:Word
    word: complicated
    stem: complic
    docFrequency: 9.0
    docPositions:
    - 215
    - 236
    - 291
    - 304
    - 538
    - 549
    - 577
    - 586
  diverse: !ruby/object:Word
    word: diverse
    stem: divers
    docFrequency: 3.0
    docPositions:
    - 216
    - 539
  abbreviation: !ruby/object:Word
    word: abbreviation
    stem: abbrevi
    docFrequency: 5.0
    docPositions:
    - 217
    - 304
    - 540
    - 586
  local: !ruby/object:Word
    word: local
    stem: local
    docFrequency: 3.0
    docPositions:
    - 217
    - 540
  calculation: !ruby/object:Word
    word: calculation
    stem: calcul
    docFrequency: 3.0
    docPositions:
    - 217
    - 540
  denoting: !ruby/object:Word
    word: denoting
    stem: denot
    docFrequency: 3.0
    docPositions:
    - 217
    - 540
  convenience: !ruby/object:Word
    word: convenience
    stem: conveni
    docFrequency: 3.0
    docPositions:
    - 217
    - 540
  embed: !ruby/object:Word
    word: embed
    stem: emb
    docFrequency: 3.0
    docPositions:
    - 218
    - 541
  theoretic: !ruby/object:Word
    word: theoretic
    stem: theoret
    docFrequency: 3.0
    docPositions:
    - 218
    - 541
  framework: !ruby/object:Word
    word: framework
    stem: framework
    docFrequency: 3.0
    docPositions:
    - 218
    - 541
  consists: !ruby/object:Word
    word: consists
    stem: consist
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  points: !ruby/object:Word
    word: points
    stem: point
    docFrequency: 7.0
    docPositions:
    - 219
    - 226
    - 280
    - 542
    - 545
    - 568
  lines: !ruby/object:Word
    word: lines
    stem: line
    docFrequency: 7.0
    docPositions:
    - 219
    - 280
    - 542
    - 568
  planes: !ruby/object:Word
    word: planes
    stem: plane
    docFrequency: 9.0
    docPositions:
    - 219
    - 280
    - 281
    - 542
    - 568
    - 569
  respectively: !ruby/object:Word
    word: respectively
    stem: respect
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  six: !ruby/object:Word
    word: six
    stem: six
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  betweenness: !ruby/object:Word
    word: betweenness
    stem: between
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  containment: !ruby/object:Word
    word: containment
    stem: contain
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  congruence: !ruby/object:Word
    word: congruence
    stem: congruenc
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  satisfying: !ruby/object:Word
    word: satisfying
    stem: satisfi
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  following: !ruby/object:Word
    word: following
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  conditions: !ruby/object:Word
    word: conditions
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 219
    - 542
  mostly: !ruby/object:Word
    word: mostly
    stem: mostli
    docFrequency: 3.0
    docPositions:
    - 220
    - 543
  speaking: !ruby/object:Word
    word: speaking
    stem: speak
    docFrequency: 3.0
    docPositions:
    - 220
    - 543
  concisely: !ruby/object:Word
    word: concisely
    stem: concis
    docFrequency: 3.0
    docPositions:
    - 220
    - 543
  triangle: !ruby/object:Word
    word: triangle
    stem: triangl
    docFrequency: 3.0
    docPositions:
    - 220
    - 543
  altitude: !ruby/object:Word
    word: altitude
    stem: altitud
    docFrequency: 3.0
    docPositions:
    - 220
    - 543
  vertex: !ruby/object:Word
    word: vertex
    stem: vertex
    docFrequency: 3.0
    docPositions:
    - 220
    - 543
  distance: !ruby/object:Word
    word: distance
    stem: distanc
    docFrequency: 7.0
    docPositions:
    - 220
    - 280
    - 543
    - 568
  vertices: !ruby/object:Word
    word: vertices
    stem: vertic
    docFrequency: 3.0
    docPositions:
    - 220
    - 543
  introduce: !ruby/object:Word
    word: introduce
    stem: introduc
    docFrequency: 3.0
    docPositions:
    - 221
    - 544
  revolutionary: !ruby/object:Word
    word: revolutionary
    stem: revolutionari
    docFrequency: 3.0
    docPositions:
    - 221
    - 544
  concept: !ruby/object:Word
    word: concept
    stem: concept
    docFrequency: 3.0
    docPositions:
    - 221
    - 544
  derivative: !ruby/object:Word
    word: derivative
    stem: deriv
    docFrequency: 3.0
    docPositions:
    - 221
    - 544
  limit: !ruby/object:Word
    word: limit
    stem: limit
    docFrequency: 3.0
    docPositions:
    - 221
    - 544
  ratio: !ruby/object:Word
    word: ratio
    stem: ratio
    docFrequency: 3.0
    docPositions:
    - 221
    - 544
  tell: !ruby/object:Word
    word: tell
    stem: tell
    docFrequency: 3.0
    docPositions:
    - 223
    - 242
  aim: !ruby/object:Word
    word: aim
    stem: aim
    docFrequency: 2.0
    docPositions:
    - 223
  right: !ruby/object:Word
    word: right
    stem: right
    docFrequency: 2.0
    docPositions:
    - 223
  after: !ruby/object:Word
    word: after
    stem: after
    docFrequency: 2.0
    docPositions:
    - 223
  area: !ruby/object:Word
    word: area
    stem: area
    docFrequency: 2.0
    docPositions:
    - 223
  illuminated: !ruby/object:Word
    word: illuminated
    stem: illumin
    docFrequency: 2.0
    docPositions:
    - 223
  purpose: !ruby/object:Word
    word: purpose
    stem: purpos
    docFrequency: 2.0
    docPositions:
    - 223
  cultural: !ruby/object:Word
    word: cultural
    stem: cultur
    docFrequency: 5.0
    docPositions:
    - 226
    - 229
    - 545
    - 546
  process: !ruby/object:Word
    word: process
    stem: process
    docFrequency: 7.0
    docPositions:
    - 226
    - 229
    - 309
    - 545
    - 546
    - 589
  bound: !ruby/object:Word
    word: bound
    stem: bound
    docFrequency: 5.0
    docPositions:
    - 226
    - 229
    - 545
    - 546
  treated: !ruby/object:Word
    word: treated
    stem: treat
    docFrequency: 9.0
    docPositions:
    - 226
    - 247
    - 280
    - 304
    - 545
    - 555
    - 568
    - 586
  till: !ruby/object:Word
    word: till
    stem: till
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  intuitively: !ruby/object:Word
    word: intuitively
    stem: intuit
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  evident: !ruby/object:Word
    word: evident
    stem: evid
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  curve: !ruby/object:Word
    word: curve
    stem: curv
    docFrequency: 5.0
    docPositions:
    - 226
    - 283
    - 545
    - 571
  plane: !ruby/object:Word
    word: plane
    stem: plane
    docFrequency: 25.0
    docPositions:
    - 226
    - 280
    - 281
    - 283
    - 291
    - 545
    - 568
    - 569
    - 571
    - 577
  tangent: !ruby/object:Word
    word: tangent
    stem: tangent
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  everywhere: !ruby/object:Word
    word: everywhere
    stem: everywher
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  except: !ruby/object:Word
    word: except
    stem: except
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  maybe: !ruby/object:Word
    word: maybe
    stem: mayb
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  discrete: !ruby/object:Word
    word: discrete
    stem: discret
    docFrequency: 5.0
    docPositions:
    - 226
    - 315
    - 545
    - 593
  refuted: !ruby/object:Word
    word: refuted
    stem: refut
    docFrequency: 3.0
    docPositions:
    - 226
    - 545
  century: !ruby/object:Word
    word: century
    stem: centuri
    docFrequency: 3.0
    docPositions:
    - 228
  later: !ruby/object:Word
    word: later
    stem: later
    docFrequency: 9.0
    docPositions:
    - 228
    - 236
    - 309
    - 310
    - 488
    - 549
    - 589
    - 590
  seen: !ruby/object:Word
    word: seen
    stem: seen
    docFrequency: 2.0
    docPositions:
    - 228
  monsters: !ruby/object:Word
    word: monsters
    stem: monster
    docFrequency: 2.0
    docPositions:
    - 228
  become: !ruby/object:Word
    word: become
    stem: becom
    docFrequency: 2.0
    docPositions:
    - 228
  little: !ruby/object:Word
    word: little
    stem: littl
    docFrequency: 4.0
    docPositions:
    - 228
    - 274
    - 565
  blas: !ruby/object:Word
    word: blas
    stem: bla
    docFrequency: 2.0
    docPositions:
    - 228
  effect: !ruby/object:Word
    word: effect
    stem: effect
    docFrequency: 2.0
    docPositions:
    - 228
  produced: !ruby/object:Word
    word: produced
    stem: produc
    docFrequency: 2.0
    docPositions:
    - 228
  majority: !ruby/object:Word
    word: majority
    stem: major
    docFrequency: 2.0
    docPositions:
    - 228
  nineteenth: !ruby/object:Word
    word: nineteenth
    stem: nineteenth
    docFrequency: 2.0
    docPositions:
    - 228
  ranged: !ruby/object:Word
    word: ranged
    stem: rang
    docFrequency: 2.0
    docPositions:
    - 228
  disgust: !ruby/object:Word
    word: disgust
    stem: disgust
    docFrequency: 2.0
    docPositions:
    - 228
  consternation: !ruby/object:Word
    word: consternation
    stem: constern
    docFrequency: 2.0
    docPositions:
    - 228
  since: !ruby/object:Word
    word: since
    stem: sinc
    docFrequency: 21.0
    docPositions:
    - 229
    - 232
    - 248
    - 269
    - 280
    - 289
    - 309
    - 319
    - 546
    - 547
    - 556
    - 563
    - 568
    - 575
    - 589
    - 597
  valid: !ruby/object:Word
    word: valid
    stem: valid
    docFrequency: 3.0
    docPositions:
    - 229
    - 546
  argument: !ruby/object:Word
    word: argument
    stem: argument
    docFrequency: 9.0
    docPositions:
    - 229
    - 232
    - 312
    - 317
    - 546
    - 547
    - 592
    - 595
  retract: !ruby/object:Word
    word: retract
    stem: retract
    docFrequency: 3.0
    docPositions:
    - 229
    - 546
  accept: !ruby/object:Word
    word: accept
    stem: accept
    docFrequency: 3.0
    docPositions:
    - 229
    - 546
  moreover: !ruby/object:Word
    word: moreover
    stem: moreov
    docFrequency: 5.0
    docPositions:
    - 229
    - 316
    - 546
    - 594
  perspective: !ruby/object:Word
    word: perspective
    stem: perspect
    docFrequency: 3.0
    docPositions:
    - 229
    - 546
  abandoned: !ruby/object:Word
    word: abandoned
    stem: abandon
    docFrequency: 3.0
    docPositions:
    - 229
    - 546
  algebraic: !ruby/object:Word
    word: algebraic
    stem: algebra
    docFrequency: 5.0
    docPositions:
    - 232
    - 305
    - 547
    - 587
  checked: !ruby/object:Word
    word: checked
    stem: check
    docFrequency: 3.0
    docPositions:
    - 232
    - 547
  need: !ruby/object:Word
    word: need
    stem: need
    docFrequency: 7.0
    docPositions:
    - 232
    - 243
    - 247
    - 547
    - 554
    - 555
  meaning: !ruby/object:Word
    word: meaning
    stem: mean
    docFrequency: 3.0
    docPositions:
    - 232
    - 547
  sufficient: !ruby/object:Word
    word: sufficient
    stem: suffici
    docFrequency: 7.0
    docPositions:
    - 232
    - 247
    - 275
    - 547
    - 555
    - 566
  know: !ruby/object:Word
    word: know
    stem: know
    docFrequency: 9.0
    docPositions:
    - 232
    - 243
    - 317
    - 547
    - 554
    - 595
  follows: !ruby/object:Word
    word: follows
    stem: follow
    docFrequency: 13.0
    docPositions:
    - 232
    - 247
    - 248
    - 270
    - 300
    - 319
    - 547
    - 555
    - 556
    - 564
    - 584
    - 597
  rigorously: !ruby/object:Word
    word: rigorously
    stem: rigor
    docFrequency: 3.0
    docPositions:
    - 232
    - 547
  explicit: !ruby/object:Word
    word: explicit
    stem: explicit
    docFrequency: 3.0
    docPositions:
    - 232
    - 547
  implicit: !ruby/object:Word
    word: implicit
    stem: implicit
    docFrequency: 3.0
    docPositions:
    - 232
    - 547
  use: !ruby/object:Word
    word: use
    stem: us
    docFrequency: 9.0
    docPositions:
    - 232
    - 237
    - 306
    - 315
    - 547
    - 550
    - 588
    - 593
  proof: !ruby/object:Word
    word: proof
    stem: proof
    docFrequency: 14.0
    docPositions:
    - 232
    - 269
    - 273
    - 274
    - 300
    - 301
    - 547
    - 563
    - 565
    - 584
    - 585
  guarantees: !ruby/object:Word
    word: guarantees
    stem: guarante
    docFrequency: 3.0
    docPositions:
    - 232
    - 547
  never: !ruby/object:Word
    word: never
    stem: never
    docFrequency: 7.0
    docPositions:
    - 232
    - 237
    - 547
    - 550
  conceived: !ruby/object:Word
    word: conceived
    stem: conceiv
    docFrequency: 3.0
    docPositions:
    - 233
    - 548
  gottfried: !ruby/object:Word
    word: gottfried
    stem: gottfri
    docFrequency: 3.0
    docPositions:
    - 233
    - 548
  leibniz: !ruby/object:Word
    word: leibniz
    stem: leibniz
    docFrequency: 3.0
    docPositions:
    - 233
    - 548
  near: !ruby/object:Word
    word: near
    stem: near
    docFrequency: 3.0
    docPositions:
    - 233
    - 548
  capable: !ruby/object:Word
    word: capable
    stem: capabl
    docFrequency: 2.0
    docPositions:
    - 235
  expressing: !ruby/object:Word
    word: expressing
    stem: express
    docFrequency: 2.0
    docPositions:
    - 235
  thoughts: !ruby/object:Word
    word: thoughts
    stem: thought
    docFrequency: 2.0
    docPositions:
    - 235
  unambiguously: !ruby/object:Word
    word: unambiguously
    stem: unambigu
    docFrequency: 2.0
    docPositions:
    - 235
  strengthening: !ruby/object:Word
    word: strengthening
    stem: strengthen
    docFrequency: 2.0
    docPositions:
    - 235
  our: !ruby/object:Word
    word: our
    stem: our
    docFrequency: 2.0
    docPositions:
    - 235
  power: !ruby/object:Word
    word: power
    stem: power
    docFrequency: 2.0
    docPositions:
    - 235
  avoiding: !ruby/object:Word
    word: avoiding
    stem: avoid
    docFrequency: 2.0
    docPositions:
    - 235
  errors: !ruby/object:Word
    word: errors
    stem: error
    docFrequency: 4.0
    docPositions:
    - 235
    - 239
    - 552
  purely: !ruby/object:Word
    word: purely
    stem: pure
    docFrequency: 2.0
    docPositions:
    - 235
  mechanical: !ruby/object:Word
    word: mechanical
    stem: mechan
    docFrequency: 2.0
    docPositions:
    - 235
  effort: !ruby/object:Word
    word: effort
    stem: effort
    docFrequency: 2.0
    docPositions:
    - 235
  attention: !ruby/object:Word
    word: attention
    stem: attent
    docFrequency: 2.0
    docPositions:
    - 235
  partially: !ruby/object:Word
    word: partially
    stem: partial
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  implemented: !ruby/object:Word
    word: implemented
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  centuries: !ruby/object:Word
    word: centuries
    stem: centuri
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  especially: !ruby/object:Word
    word: especially
    stem: especi
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  form: !ruby/object:Word
    word: form
    stem: form
    docFrequency: 5.0
    docPositions:
    - 236
    - 318
    - 549
    - 596
  introduced: !ruby/object:Word
    word: introduced
    stem: introduc
    docFrequency: 5.0
    docPositions:
    - 236
    - 304
    - 549
    - 586
  bourbaki: !ruby/object:Word
    word: bourbaki
    stem: bourbaki
    docFrequency: 17.0
    docPositions:
    - 236
    - 281
    - 284
    - 304
    - 335
    - 337
    - 339
    - 345
    - 354
    - 549
    - 569
    - 572
    - 586
    - 599
  four: !ruby/object:Word
    word: four
    stem: four
    docFrequency: 5.0
    docPositions:
    - 236
    - 282
    - 549
    - 570
  signs: !ruby/object:Word
    word: signs
    stem: sign
    docFrequency: 5.0
    docPositions:
    - 236
    - 549
  specific: !ruby/object:Word
    word: specific
    stem: specif
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  letters: !ruby/object:Word
    word: letters
    stem: letter
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  considerably: !ruby/object:Word
    word: considerably
    stem: consider
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  elementary: !ruby/object:Word
    word: elementary
    stem: elementari
    docFrequency: 3.0
    docPositions:
    - 236
    - 549
  typical: !ruby/object:Word
    word: typical
    stem: typic
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  instead: !ruby/object:Word
    word: instead
    stem: instead
    docFrequency: 5.0
    docPositions:
    - 237
    - 316
    - 550
    - 594
  basic: !ruby/object:Word
    word: basic
    stem: basic
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  java: !ruby/object:Word
    word: java
    stem: java
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  c: !ruby/object:Word
    word: c
    stem: c
    docFrequency: 5.0
    docPositions:
    - 237
    - 355
    - 550
    - 600
  python: !ruby/object:Word
    word: python
    stem: python
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  corresponds: !ruby/object:Word
    word: corresponds
    stem: correspond
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  correspondence: !ruby/object:Word
    word: correspondence
    stem: correspond
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  established: !ruby/object:Word
    word: established
    stem: establish
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  special: !ruby/object:Word
    word: special
    stem: special
    docFrequency: 4.0
    docPositions:
    - 237
    - 479
    - 550
  compilers: !ruby/object:Word
    word: compilers
    stem: compil
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  interpreters: !ruby/object:Word
    word: interpreters
    stem: interpret
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  geared: !ruby/object:Word
    word: geared
    stem: gear
    docFrequency: 3.0
    docPositions:
    - 237
    - 550
  texts: !ruby/object:Word
    word: texts
    stem: text
    docFrequency: 5.0
    docPositions:
    - 238
    - 318
    - 551
    - 596
  books: !ruby/object:Word
    word: books
    stem: book
    docFrequency: 3.0
    docPositions:
    - 238
    - 551
  wider: !ruby/object:Word
    word: wider
    stem: wider
    docFrequency: 3.0
    docPositions:
    - 238
    - 551
  pseudocode: !ruby/object:Word
    word: pseudocode
    stem: pseudocod
    docFrequency: 9.0
    docPositions:
    - 238
    - 239
    - 243
    - 551
    - 552
    - 554
  turing: !ruby/object:Word
    word: turing
    stem: ture
    docFrequency: 3.0
    docPositions:
    - 238
    - 551
  machines: !ruby/object:Word
    word: machines
    stem: machin
    docFrequency: 13.0
    docPositions:
    - 238
    - 315
    - 316
    - 323
    - 551
    - 593
    - 594
    - 598
  coding: !ruby/object:Word
    word: coding
    stem: code
    docFrequency: 5.0
    docPositions:
    - 239
    - 243
    - 552
    - 554
  knows: !ruby/object:Word
    word: knows
    stem: know
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  exactly: !ruby/object:Word
    word: exactly
    stem: exactli
    docFrequency: 11.0
    docPositions:
    - 239
    - 281
    - 298
    - 300
    - 301
    - 552
    - 569
    - 582
    - 584
    - 585
  told: !ruby/object:Word
    word: told
    stem: told
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  contrast: !ruby/object:Word
    word: contrast
    stem: contrast
    docFrequency: 7.0
    docPositions:
    - 239
    - 258
    - 282
    - 552
    - 558
    - 570
  author: !ruby/object:Word
    word: author
    stem: author
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  speaker: !ruby/object:Word
    word: speaker
    stem: speaker
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  communicating: !ruby/object:Word
    word: communicating
    stem: commun
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  people: !ruby/object:Word
    word: people
    stem: peopl
    docFrequency: 5.0
    docPositions:
    - 239
    - 252
    - 552
    - 557
  ambiguous: !ruby/object:Word
    word: ambiguous
    stem: ambigu
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  make: !ruby/object:Word
    word: make
    stem: make
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  still: !ruby/object:Word
    word: still
    stem: still
    docFrequency: 11.0
    docPositions:
    - 239
    - 261
    - 283
    - 296
    - 309
    - 552
    - 559
    - 571
    - 580
    - 589
  expect: !ruby/object:Word
    word: expect
    stem: expect
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  description: !ruby/object:Word
    word: description
    stem: descript
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  intended: !ruby/object:Word
    word: intended
    stem: intend
    docFrequency: 5.0
    docPositions:
    - 239
    - 306
    - 552
    - 588
  reading: !ruby/object:Word
    word: reading
    stem: read
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  converted: !ruby/object:Word
    word: converted
    stem: convert
    docFrequency: 3.0
    docPositions:
    - 239
    - 552
  code: !ruby/object:Word
    word: code
    stem: code
    docFrequency: 15.0
    docPositions:
    - 239
    - 316
    - 317
    - 552
    - 594
    - 595
  communication: !ruby/object:Word
    word: communication
    stem: commun
    docFrequency: 3.0
    docPositions:
    - 240
    - 553
  made: !ruby/object:Word
    word: made
    stem: made
    docFrequency: 7.0
    docPositions:
    - 240
    - 274
    - 323
    - 553
    - 565
    - 598
  practice: !ruby/object:Word
    word: practice
    stem: practic
    docFrequency: 4.0
    docPositions:
    - 242
    - 310
    - 590
  content: !ruby/object:Word
    word: content
    stem: content
    docFrequency: 4.0
    docPositions:
    - 242
    - 488
  bring: !ruby/object:Word
    word: bring
    stem: bring
    docFrequency: 2.0
    docPositions:
    - 242
  exposition: !ruby/object:Word
    word: exposition
    stem: exposit
    docFrequency: 2.0
    docPositions:
    - 242
  his: !ruby/object:Word
    word: his
    stem: hi
    docFrequency: 2.0
    docPositions:
    - 242
  experience: !ruby/object:Word
    word: experience
    stem: experi
    docFrequency: 2.0
    docPositions:
    - 242
  flair: !ruby/object:Word
    word: flair
    stem: flair
    docFrequency: 2.0
    docPositions:
    - 242
  him: !ruby/object:Word
    word: him
    stem: him
    docFrequency: 2.0
    docPositions:
    - 242
  translation: !ruby/object:Word
    word: translation
    stem: translat
    docFrequency: 6.0
    docPositions:
    - 242
    - 353
    - 354
    - 598
    - 599
  exercise: !ruby/object:Word
    word: exercise
    stem: exercis
    docFrequency: 2.0
    docPositions:
    - 242
  patience: !ruby/object:Word
    word: patience
    stem: patienc
    docFrequency: 2.0
    docPositions:
    - 242
  doubtless: !ruby/object:Word
    word: doubtless
    stem: doubtless
    docFrequency: 2.0
    docPositions:
    - 242
  tedious: !ruby/object:Word
    word: tedious
    stem: tediou
    docFrequency: 2.0
    docPositions:
    - 242
  using: !ruby/object:Word
    word: using
    stem: us
    docFrequency: 7.0
    docPositions:
    - 243
    - 318
    - 319
    - 554
    - 596
    - 597
  underlying: !ruby/object:Word
    word: underlying
    stem: underli
    docFrequency: 3.0
    docPositions:
    - 243
    - 554
  equivalent: !ruby/object:Word
    word: equivalent
    stem: equival
    docFrequency: 5.0
    docPositions:
    - 243
    - 248
    - 554
    - 556
  interchangeably: !ruby/object:Word
    word: interchangeably
    stem: interchang
    docFrequency: 5.0
    docPositions:
    - 243
    - 248
    - 554
    - 556
  long: !ruby/object:Word
    word: long
    stem: long
    docFrequency: 3.0
    docPositions:
    - 243
    - 554
  far: !ruby/object:Word
    word: far
    stem: far
    docFrequency: 5.0
    docPositions:
    - 243
    - 291
    - 554
    - 577
  finite: !ruby/object:Word
    word: finite
    stem: finit
    docFrequency: 5.0
    docPositions:
    - 246
    - 309
    - 589
  lists: !ruby/object:Word
    word: lists
    stem: list
    docFrequency: 7.0
    docPositions:
    - 246
    - 248
    - 556
  vectors: !ruby/object:Word
    word: vectors
    stem: vector
    docFrequency: 5.0
    docPositions:
    - 246
    - 289
    - 575
  generate: !ruby/object:Word
    word: generate
    stem: gener
    docFrequency: 12.0
    docPositions:
    - 246
    - 248
    - 309
    - 316
    - 317
    - 318
    - 556
    - 589
    - 594
    - 595
    - 596
  summation: !ruby/object:Word
    word: summation
    stem: summat
    docFrequency: 2.0
    docPositions:
    - 246
  infinite: !ruby/object:Word
    word: infinite
    stem: infinit
    docFrequency: 6.0
    docPositions:
    - 246
    - 282
    - 322
    - 570
  remember: !ruby/object:Word
    word: remember
    stem: rememb
    docFrequency: 5.0
    docPositions:
    - 247
    - 555
  full: !ruby/object:Word
    word: full
    stem: full
    docFrequency: 3.0
    docPositions:
    - 247
    - 555
  detail: !ruby/object:Word
    word: detail
    stem: detail
    docFrequency: 3.0
    docPositions:
    - 247
    - 555
  generally: !ruby/object:Word
    word: generally
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 247
    - 555
  easily: !ruby/object:Word
    word: easily
    stem: easili
    docFrequency: 3.0
    docPositions:
    - 247
    - 555
  usual: !ruby/object:Word
    word: usual
    stem: usual
    docFrequency: 5.0
    docPositions:
    - 247
    - 275
    - 555
    - 566
  inclusively: !ruby/object:Word
    word: inclusively
    stem: inclus
    docFrequency: 3.0
    docPositions:
    - 247
    - 555
  states: !ruby/object:Word
    word: states
    stem: state
    docFrequency: 4.0
    docPositions:
    - 252
    - 349
    - 557
  paradox: !ruby/object:Word
    word: paradox
    stem: paradox
    docFrequency: 7.0
    docPositions:
    - 252
    - 323
    - 557
    - 598
  contradiction: !ruby/object:Word
    word: contradiction
    stem: contradict
    docFrequency: 29.0
    docPositions:
    - 252
    - 254
    - 255
    - 258
    - 261
    - 264
    - 265
    - 268
    - 269
    - 273
    - 274
    - 276
    - 278
    - 557
    - 558
    - 559
    - 560
    - 561
    - 563
    - 565
    - 567
  apparent: !ruby/object:Word
    word: apparent
    stem: appar
    docFrequency: 2.0
    docPositions:
    - 255
  something: !ruby/object:Word
    word: something
    stem: someth
    docFrequency: 6.0
    docPositions:
    - 256
    - 257
    - 258
    - 274
    - 565
  counterintuitive: !ruby/object:Word
    word: counterintuitive
    stem: counterintuit
    docFrequency: 2.0
    docPositions:
    - 256
  surprising: !ruby/object:Word
    word: surprising
    stem: surpris
    docFrequency: 2.0
    docPositions:
    - 257
  ironic: !ruby/object:Word
    word: ironic
    stem: iron
    docFrequency: 2.0
    docPositions:
    - 258
  pair: !ruby/object:Word
    word: pair
    stem: pair
    docFrequency: 3.0
    docPositions:
    - 258
    - 558
  negation: !ruby/object:Word
    word: negation
    stem: negat
    docFrequency: 11.0
    docPositions:
    - 258
    - 287
    - 288
    - 310
    - 315
    - 558
    - 573
    - 574
    - 590
    - 593
  exists: !ruby/object:Word
    word: exists
    stem: exist
    docFrequency: 7.0
    docPositions:
    - 265
    - 280
    - 311
    - 561
    - 568
    - 591
  contradictions: !ruby/object:Word
    word: contradictions
    stem: contradict
    docFrequency: 3.0
    docPositions:
    - 265
    - 561
  merely: !ruby/object:Word
    word: merely
    stem: mere
    docFrequency: 3.0
    docPositions:
    - 265
    - 561
  found: !ruby/object:Word
    word: found
    stem: found
    docFrequency: 5.0
    docPositions:
    - 265
    - 276
    - 561
    - 567
  useless: !ruby/object:Word
    word: useless
    stem: useless
    docFrequency: 5.0
    docPositions:
    - 266
    - 269
    - 562
    - 563
  philosophers: !ruby/object:Word
    word: philosophers
    stem: philosoph
    docFrequency: 3.0
    docPositions:
    - 266
    - 562
  disagree: !ruby/object:Word
    word: disagree
    stem: disagre
    docFrequency: 3.0
    docPositions:
    - 266
    - 562
  superstitious: !ruby/object:Word
    word: superstitious
    stem: superstiti
    docFrequency: 2.0
    docPositions:
    - 268
  dread: !ruby/object:Word
    word: dread
    stem: dread
    docFrequency: 2.0
    docPositions:
    - 268
  veneration: !ruby/object:Word
    word: veneration
    stem: vener
    docFrequency: 2.0
    docPositions:
    - 268
  face: !ruby/object:Word
    word: face
    stem: face
    docFrequency: 2.0
    docPositions:
    - 268
  insists: !ruby/object:Word
    word: insists
    stem: insist
    docFrequency: 3.0
    docPositions:
    - 269
    - 563
  reason: !ruby/object:Word
    word: reason
    stem: reason
    docFrequency: 3.0
    docPositions:
    - 269
    - 563
  matter: !ruby/object:Word
    word: matter
    stem: matter
    docFrequency: 3.0
    docPositions:
    - 270
    - 564
  x: !ruby/object:Word
    word: x
    stem: x
    docFrequency: 33.0
    docPositions:
    - 270
    - 272
    - 274
    - 316
    - 317
    - 319
    - 564
    - 565
    - 594
    - 595
    - 597
  always: !ruby/object:Word
    word: always
    stem: alwai
    docFrequency: 6.0
    docPositions:
    - 270
    - 274
    - 278
    - 564
    - 565
  assume: !ruby/object:Word
    word: assume
    stem: assum
    docFrequency: 4.0
    docPositions:
    - 272
    - 315
    - 593
  put: !ruby/object:Word
    word: put
    stem: put
    docFrequency: 2.0
    docPositions:
    - 273
  assumption: !ruby/object:Word
    word: assumption
    stem: assumpt
    docFrequency: 8.0
    docPositions:
    - 274
    - 275
    - 565
    - 566
  leads: !ruby/object:Word
    word: leads
    stem: lead
    docFrequency: 2.0
    docPositions:
    - 274
  tempting: !ruby/object:Word
    word: tempting
    stem: tempt
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  nothing: !ruby/object:Word
    word: nothing
    stem: noth
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  invalidate: !ruby/object:Word
    word: invalidate
    stem: invalid
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  demand: !ruby/object:Word
    word: demand
    stem: demand
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  attempts: !ruby/object:Word
    word: attempts
    stem: attempt
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  change: !ruby/object:Word
    word: change
    stem: chang
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  were: !ruby/object:Word
    word: were
    stem: were
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  relevance: !ruby/object:Word
    word: relevance
    stem: relev
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  success: !ruby/object:Word
    word: success
    stem: success
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  obfuscate: !ruby/object:Word
    word: obfuscate
    stem: obfusc
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  making: !ruby/object:Word
    word: making
    stem: make
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  seemingly: !ruby/object:Word
    word: seemingly
    stem: seemingli
    docFrequency: 7.0
    docPositions:
    - 274
    - 291
    - 319
    - 565
    - 577
    - 597
  entangled: !ruby/object:Word
    word: entangled
    stem: entangl
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  criterion: !ruby/object:Word
    word: criterion
    stem: criterion
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  unmask: !ruby/object:Word
    word: unmask
    stem: unmask
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  fictitious: !ruby/object:Word
    word: fictitious
    stem: fictiti
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  participation: !ruby/object:Word
    word: participation
    stem: particip
    docFrequency: 3.0
    docPositions:
    - 274
    - 565
  david: !ruby/object:Word
    word: david
    stem: david
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  hilbert: !ruby/object:Word
    word: hilbert
    stem: hilbert
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  aimed: !ruby/object:Word
    word: aimed
    stem: aim
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  consistency: !ruby/object:Word
    word: consistency
    stem: consist
    docFrequency: 5.0
    docPositions:
    - 275
    - 566
  finitary: !ruby/object:Word
    word: finitary
    stem: finitari
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  arithmetic: !ruby/object:Word
    word: arithmetic
    stem: arithmet
    docFrequency: 5.0
    docPositions:
    - 275
    - 566
  subsystem: !ruby/object:Word
    word: subsystem
    stem: subsystem
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  positive: !ruby/object:Word
    word: positive
    stem: posit
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  integers: !ruby/object:Word
    word: integers
    stem: integ
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  chosen: !ruby/object:Word
    word: chosen
    stem: chosen
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  philosophically: !ruby/object:Word
    word: philosophically
    stem: philosoph
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  uncontroversial: !ruby/object:Word
    word: uncontroversial
    stem: uncontroversi
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  fatal: !ruby/object:Word
    word: fatal
    stem: fatal
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  blow: !ruby/object:Word
    word: blow
    stem: blow
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  dealt: !ruby/object:Word
    word: dealt
    stem: dealt
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  second: !ruby/object:Word
    word: second
    stem: second
    docFrequency: 7.0
    docPositions:
    - 275
    - 301
    - 356
    - 566
    - 585
    - 601
  g: !ruby/object:Word
    word: g
    stem: g
    docFrequency: 6.0
    docPositions:
    - 275
    - 323
    - 349
    - 566
    - 598
  del: !ruby/object:Word
    word: del
    stem: del
    docFrequency: 6.0
    docPositions:
    - 275
    - 323
    - 349
    - 566
    - 598
  incompleteness: !ruby/object:Word
    word: incompleteness
    stem: incomplet
    docFrequency: 4.0
    docPositions:
    - 275
    - 349
    - 566
  weaker: !ruby/object:Word
    word: weaker
    stem: weaker
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  stronger: !ruby/object:Word
    word: stronger
    stem: stronger
    docFrequency: 6.0
    docPositions:
    - 275
    - 349
    - 566
  dispel: !ruby/object:Word
    word: dispel
    stem: dispel
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  doubts: !ruby/object:Word
    word: doubts
    stem: doubt
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  claim: !ruby/object:Word
    word: claim
    stem: claim
    docFrequency: 3.0
    docPositions:
    - 275
    - 566
  feel: !ruby/object:Word
    word: feel
    stem: feel
    docFrequency: 3.0
    docPositions:
    - 276
    - 567
  reliable: !ruby/object:Word
    word: reliable
    stem: reliabl
    docFrequency: 3.0
    docPositions:
    - 276
    - 567
  watertight: !ruby/object:Word
    word: watertight
    stem: watertight
    docFrequency: 3.0
    docPositions:
    - 276
    - 567
  compartments: !ruby/object:Word
    word: compartments
    stem: compart
    docFrequency: 3.0
    docPositions:
    - 276
    - 567
  separate: !ruby/object:Word
    word: separate
    stem: separ
    docFrequency: 3.0
    docPositions:
    - 276
    - 567
  wait: !ruby/object:Word
    word: wait
    stem: wait
    docFrequency: 3.0
    docPositions:
    - 276
    - 567
  better: !ruby/object:Word
    word: better
    stem: better
    docFrequency: 3.0
    docPositions:
    - 276
    - 567
  i: !ruby/object:Word
    word: i
    stem: i
    docFrequency: 4.0
    docPositions:
    - 278
  felt: !ruby/object:Word
    word: felt
    stem: felt
    docFrequency: 2.0
    docPositions:
    - 278
  day: !ruby/object:Word
    word: day
    stem: dai
    docFrequency: 3.0
    docPositions:
    - 278
  someone: !ruby/object:Word
    word: someone
    stem: someon
    docFrequency: 2.0
    docPositions:
    - 278
  came: !ruby/object:Word
    word: came
    stem: came
    docFrequency: 2.0
    docPositions:
    - 278
  those: !ruby/object:Word
    word: those
    stem: those
    docFrequency: 2.0
    docPositions:
    - 278
  crazy: !ruby/object:Word
    word: crazy
    stem: crazi
    docFrequency: 2.0
    docPositions:
    - 278
  logicians: !ruby/object:Word
    word: logicians
    stem: logician
    docFrequency: 2.0
    docPositions:
    - 278
  again: !ruby/object:Word
    word: again
    stem: again
    docFrequency: 2.0
    docPositions:
    - 278
  go: !ruby/object:Word
    word: go
    stem: go
    docFrequency: 2.0
    docPositions:
    - 278
  my: !ruby/object:Word
    word: my
    stem: my
    docFrequency: 2.0
    docPositions:
    - 278
  business: !ruby/object:Word
    word: business
    stem: busi
    docFrequency: 2.0
    docPositions:
    - 278
  going: !ruby/object:Word
    word: going
    stem: go
    docFrequency: 2.0
    docPositions:
    - 278
  planar: !ruby/object:Word
    word: planar
    stem: planar
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  solid: !ruby/object:Word
    word: solid
    stem: solid
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  restricts: !ruby/object:Word
    word: restricts
    stem: restrict
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  itself: !ruby/object:Word
    word: itself
    stem: itself
    docFrequency: 9.0
    docPositions:
    - 280
    - 298
    - 318
    - 568
    - 582
    - 596
  geometric: !ruby/object:Word
    word: geometric
    stem: geometr
    docFrequency: 9.0
    docPositions:
    - 280
    - 281
    - 291
    - 568
    - 569
    - 577
  differ: !ruby/object:Word
    word: differ
    stem: differ
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  properties: !ruby/object:Word
    word: properties
    stem: properti
    docFrequency: 5.0
    docPositions:
    - 280
    - 281
    - 568
    - 569
  isomorphic: !ruby/object:Word
    word: isomorphic
    stem: isomorph
    docFrequency: 7.0
    docPositions:
    - 280
    - 281
    - 284
    - 568
    - 569
    - 572
  isomorphism: !ruby/object:Word
    word: isomorphism
    stem: isomorph
    docFrequency: 5.0
    docPositions:
    - 280
    - 568
  f: !ruby/object:Word
    word: f
    stem: f
    docFrequency: 13.0
    docPositions:
    - 280
    - 358
    - 568
    - 603
  treating: !ruby/object:Word
    word: treating
    stem: treat
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  defines: !ruby/object:Word
    word: defines
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  invertible: !ruby/object:Word
    word: invertible
    stem: invert
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  onto: !ruby/object:Word
    word: onto
    stem: onto
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  map: !ruby/object:Word
    word: map
    stem: map
    docFrequency: 5.0
    docPositions:
    - 280
    - 568
  preserving: !ruby/object:Word
    word: preserving
    stem: preserv
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  namely: !ruby/object:Word
    word: namely
    stem: name
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  maps: !ruby/object:Word
    word: maps
    stem: map
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  b: !ruby/object:Word
    word: b
    stem: b
    docFrequency: 5.0
    docPositions:
    - 280
    - 568
  equal: !ruby/object:Word
    word: equal
    stem: equal
    docFrequency: 5.0
    docPositions:
    - 280
    - 304
    - 568
    - 586
  required: !ruby/object:Word
    word: required
    stem: requir
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  inverse: !ruby/object:Word
    word: inverse
    stem: invers
    docFrequency: 3.0
    docPositions:
    - 280
    - 568
  leave: !ruby/object:Word
    word: leave
    stem: leav
    docFrequency: 7.0
    docPositions:
    - 281
    - 282
    - 283
    - 569
    - 570
    - 571
  freedom: !ruby/object:Word
    word: freedom
    stem: freedom
    docFrequency: 7.0
    docPositions:
    - 281
    - 282
    - 283
    - 569
    - 570
    - 571
  determine: !ruby/object:Word
    word: determine
    stem: determin
    docFrequency: 3.0
    docPositions:
    - 281
    - 569
  uniquely: !ruby/object:Word
    word: uniquely
    stem: uniqu
    docFrequency: 3.0
    docPositions:
    - 281
    - 569
  mutually: !ruby/object:Word
    word: mutually
    stem: mutual
    docFrequency: 5.0
    docPositions:
    - 281
    - 284
    - 569
    - 572
  vector: !ruby/object:Word
    word: vector
    stem: vector
    docFrequency: 4.0
    docPositions:
    - 282
    - 503
    - 570
  much: !ruby/object:Word
    word: much
    stem: much
    docFrequency: 5.0
    docPositions:
    - 283
    - 304
    - 571
    - 586
  subset: !ruby/object:Word
    word: subset
    stem: subset
    docFrequency: 3.0
    docPositions:
    - 283
    - 571
  connected: !ruby/object:Word
    word: connected
    stem: connect
    docFrequency: 3.0
    docPositions:
    - 283
    - 571
  fractal: !ruby/object:Word
    word: fractal
    stem: fractal
    docFrequency: 3.0
    docPositions:
    - 283
    - 571
  whatever: !ruby/object:Word
    word: whatever
    stem: whatev
    docFrequency: 3.0
    docPositions:
    - 283
    - 571
  minority: !ruby/object:Word
    word: minority
    stem: minor
    docFrequency: 3.0
    docPositions:
    - 283
    - 571
  among: !ruby/object:Word
    word: among
    stem: among
    docFrequency: 5.0
    docPositions:
    - 283
    - 315
    - 571
    - 593
  study: !ruby/object:Word
    word: study
    stem: studi
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  striking: !ruby/object:Word
    word: striking
    stem: strike
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  feature: !ruby/object:Word
    word: feature
    stem: featur
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  distinguishes: !ruby/object:Word
    word: distinguishes
    stem: distinguish
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  modern: !ruby/object:Word
    word: modern
    stem: modern
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  classical: !ruby/object:Word
    word: classical
    stem: classic
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  similar: !ruby/object:Word
    word: similar
    stem: similar
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  occurs: !ruby/object:Word
    word: occurs
    stem: occur
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  categorical: !ruby/object:Word
    word: categorical
    stem: categor
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  models: !ruby/object:Word
    word: models
    stem: model
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  embedded: !ruby/object:Word
    word: embedded
    stem: embed
    docFrequency: 5.0
    docPositions:
    - 284
    - 572
  while: !ruby/object:Word
    word: while
    stem: while
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  standalone: !ruby/object:Word
    word: standalone
    stem: standalon
    docFrequency: 3.0
    docPositions:
    - 284
    - 572
  disproved: !ruby/object:Word
    word: disproved
    stem: disprov
    docFrequency: 5.0
    docPositions:
    - 287
    - 310
    - 573
    - 590
  words: !ruby/object:Word
    word: words
    stem: word
    docFrequency: 13.0
    docPositions:
    - 287
    - 288
    - 309
    - 311
    - 315
    - 317
    - 573
    - 574
    - 589
    - 591
    - 593
    - 595
  necessarily: !ruby/object:Word
    word: necessarily
    stem: necessarili
    docFrequency: 5.0
    docPositions:
    - 287
    - 310
    - 573
    - 590
  independent: !ruby/object:Word
    word: independent
    stem: independ
    docFrequency: 7.0
    docPositions:
    - 288
    - 289
    - 574
    - 575
  naturally: !ruby/object:Word
    word: naturally
    stem: natur
    docFrequency: 3.0
    docPositions:
    - 289
    - 575
  linearly: !ruby/object:Word
    word: linearly
    stem: linearli
    docFrequency: 3.0
    docPositions:
    - 289
    - 575
  neither: !ruby/object:Word
    word: neither
    stem: neither
    docFrequency: 5.0
    docPositions:
    - 289
    - 310
    - 575
    - 590
  provable: !ruby/object:Word
    word: provable
    stem: provabl
    docFrequency: 3.0
    docPositions:
    - 289
    - 575
  disprovable: !ruby/object:Word
    word: disprovable
    stem: disprov
    docFrequency: 3.0
    docPositions:
    - 289
    - 575
  anything: !ruby/object:Word
    word: anything
    stem: anyth
    docFrequency: 3.0
    docPositions:
    - 289
    - 575
  else: !ruby/object:Word
    word: else
    stem: els
    docFrequency: 3.0
    docPositions:
    - 289
    - 575
  hold: !ruby/object:Word
    word: hold
    stem: hold
    docFrequency: 3.0
    docPositions:
    - 291
    - 577
  arithmetics: !ruby/object:Word
    word: arithmetics
    stem: arithmet
    docFrequency: 4.0
    docPositions:
    - 291
    - 349
    - 577
  numbers: !ruby/object:Word
    word: numbers
    stem: number
    docFrequency: 9.0
    docPositions:
    - 291
    - 299
    - 300
    - 577
    - 583
    - 584
  unexpectedly: !ruby/object:Word
    word: unexpectedly
    stem: unexpectedli
    docFrequency: 3.0
    docPositions:
    - 291
    - 577
  situation: !ruby/object:Word
    word: situation
    stem: situat
    docFrequency: 3.0
    docPositions:
    - 291
    - 577
  naive: !ruby/object:Word
    word: naive
    stem: naiv
    docFrequency: 3.0
    docPositions:
    - 291
    - 577
  ideas: !ruby/object:Word
    word: ideas
    stem: idea
    docFrequency: 3.0
    docPositions:
    - 291
    - 577
  consequence: !ruby/object:Word
    word: consequence
    stem: consequ
    docFrequency: 3.0
    docPositions:
    - 294
    - 578
  numerous: !ruby/object:Word
    word: numerous
    stem: numer
    docFrequency: 3.0
    docPositions:
    - 294
    - 578
  belong: !ruby/object:Word
    word: belong
    stem: belong
    docFrequency: 3.0
    docPositions:
    - 294
    - 578
  eliminated: !ruby/object:Word
    word: eliminated
    stem: elimin
    docFrequency: 5.0
    docPositions:
    - 295
    - 300
    - 579
    - 584
  translating: !ruby/object:Word
    word: translating
    stem: translat
    docFrequency: 3.0
    docPositions:
    - 295
    - 579
  extends: !ruby/object:Word
    word: extends
    stem: extend
    docFrequency: 3.0
    docPositions:
    - 296
    - 580
  informally: !ruby/object:Word
    word: informally
    stem: inform
    docFrequency: 3.0
    docPositions:
    - 296
    - 580
  formally: !ruby/object:Word
    word: formally
    stem: formal
    docFrequency: 3.0
    docPositions:
    - 296
    - 580
  prime: !ruby/object:Word
    word: prime
    stem: prime
    docFrequency: 13.0
    docPositions:
    - 298
    - 299
    - 300
    - 301
    - 582
    - 583
    - 584
    - 585
  having: !ruby/object:Word
    word: having
    stem: have
    docFrequency: 5.0
    docPositions:
    - 298
    - 300
    - 582
    - 584
  divisors: !ruby/object:Word
    word: divisors
    stem: divisor
    docFrequency: 7.0
    docPositions:
    - 298
    - 300
    - 301
    - 582
    - 584
    - 585
  course: !ruby/object:Word
    word: course
    stem: cours
    docFrequency: 3.0
    docPositions:
    - 298
    - 582
  infinitely: !ruby/object:Word
    word: infinitely
    stem: infinit
    docFrequency: 11.0
    docPositions:
    - 299
    - 300
    - 309
    - 316
    - 583
    - 584
    - 589
    - 594
  involve: !ruby/object:Word
    word: involve
    stem: involv
    docFrequency: 3.0
    docPositions:
    - 300
    - 584
  stipulates: !ruby/object:Word
    word: stipulates
    stem: stipul
    docFrequency: 3.0
    docPositions:
    - 301
    - 585
  integer: !ruby/object:Word
    word: integer
    stem: integ
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  extension: !ruby/object:Word
    word: extension
    stem: extens
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  translated: !ruby/object:Word
    word: translated
    stem: translat
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  corresponding: !ruby/object:Word
    word: corresponding
    stem: correspond
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  particular: !ruby/object:Word
    word: particular
    stem: particular
    docFrequency: 5.0
    docPositions:
    - 304
    - 315
    - 586
    - 593
  resulting: !ruby/object:Word
    word: resulting
    stem: result
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  take: !ruby/object:Word
    word: take
    stem: take
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  gigabytes: !ruby/object:Word
    word: gigabytes
    stem: gigabyt
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  longer: !ruby/object:Word
    word: longer
    stem: longer
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  clearly: !ruby/object:Word
    word: clearly
    stem: clearli
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  possibility: !ruby/object:Word
    word: possibility
    stem: possibl
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  writing: !ruby/object:Word
    word: writing
    stem: write
    docFrequency: 3.0
    docPositions:
    - 304
    - 586
  verbose: !ruby/object:Word
    word: verbose
    stem: verbos
    docFrequency: 3.0
    docPositions:
    - 305
    - 587
  substitution: !ruby/object:Word
    word: substitution
    stem: substitut
    docFrequency: 3.0
    docPositions:
    - 305
    - 587
  substituting: !ruby/object:Word
    word: substituting
    stem: substitut
    docFrequency: 3.0
    docPositions:
    - 305
    - 587
  gives: !ruby/object:Word
    word: gives
    stem: give
    docFrequency: 3.0
    docPositions:
    - 305
    - 587
  expression: !ruby/object:Word
    word: expression
    stem: express
    docFrequency: 5.0
    docPositions:
    - 305
    - 587
  occurrences: !ruby/object:Word
    word: occurrences
    stem: occurr
    docFrequency: 5.0
    docPositions:
    - 305
    - 587
  further: !ruby/object:Word
    word: further
    stem: further
    docFrequency: 3.0
    docPositions:
    - 305
    - 587
  substitute: !ruby/object:Word
    word: substitute
    stem: substitut
    docFrequency: 3.0
    docPositions:
    - 305
    - 587
  u: !ruby/object:Word
    word: u
    stem: u
    docFrequency: 3.0
    docPositions:
    - 305
    - 587
  mizar: !ruby/object:Word
    word: mizar
    stem: mizar
    docFrequency: 3.0
    docPositions:
    - 306
    - 588
  treat: !ruby/object:Word
    word: treat
    stem: treat
    docFrequency: 3.0
    docPositions:
    - 306
    - 588
  endless: !ruby/object:Word
    word: endless
    stem: endless
    docFrequency: 5.0
    docPositions:
    - 309
    - 316
    - 589
    - 594
  algorithmic: !ruby/object:Word
    word: algorithmic
    stem: algorithm
    docFrequency: 5.0
    docPositions:
    - 309
    - 315
    - 589
    - 593
  generated: !ruby/object:Word
    word: generated
    stem: gener
    docFrequency: 5.0
    docPositions:
    - 309
    - 589
  sooner: !ruby/object:Word
    word: sooner
    stem: sooner
    docFrequency: 5.0
    docPositions:
    - 309
    - 310
    - 589
    - 590
  enumerable: !ruby/object:Word
    word: enumerable
    stem: enumer
    docFrequency: 5.0
    docPositions:
    - 309
    - 589
  schemata: !ruby/object:Word
    word: schemata
    stem: schemata
    docFrequency: 3.0
    docPositions:
    - 309
    - 589
  open: !ruby/object:Word
    word: open
    stem: open
    docFrequency: 5.0
    docPositions:
    - 310
    - 590
  run: !ruby/object:Word
    word: run
    stem: run
    docFrequency: 7.0
    docPositions:
    - 310
    - 315
    - 321
    - 323
    - 590
    - 593
  waiting: !ruby/object:Word
    word: waiting
    stem: wait
    docFrequency: 3.0
    docPositions:
    - 310
    - 590
  events: !ruby/object:Word
    word: events
    stem: event
    docFrequency: 3.0
    docPositions:
    - 310
    - 590
  both: !ruby/object:Word
    word: both
    stem: both
    docFrequency: 3.0
    docPositions:
    - 310
    - 590
  formerly: !ruby/object:Word
    word: formerly
    stem: formerli
    docFrequency: 3.0
    docPositions:
    - 310
    - 590
  decided: !ruby/object:Word
    word: decided
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 310
    - 590
  arbitrary: !ruby/object:Word
    word: arbitrary
    stem: arbitrari
    docFrequency: 5.0
    docPositions:
    - 311
    - 315
    - 591
    - 593
  decides: !ruby/object:Word
    word: decides
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 311
    - 591
  recursive: !ruby/object:Word
    word: recursive
    stem: recurs
    docFrequency: 3.0
    docPositions:
    - 311
    - 591
  shows: !ruby/object:Word
    word: shows
    stem: show
    docFrequency: 3.0
    docPositions:
    - 312
    - 592
  imagine: !ruby/object:Word
    word: imagine
    stem: imagin
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  describe: !ruby/object:Word
    word: describe
    stem: describ
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  computations: !ruby/object:Word
    word: computations
    stem: comput
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  include: !ruby/object:Word
    word: include
    stem: includ
    docFrequency: 5.0
    docPositions:
    - 315
    - 323
    - 593
    - 598
  wrong: !ruby/object:Word
    word: wrong
    stem: wrong
    docFrequency: 5.0
    docPositions:
    - 315
    - 323
    - 593
    - 598
  machine: !ruby/object:Word
    word: machine
    stem: machin
    docFrequency: 19.0
    docPositions:
    - 315
    - 316
    - 319
    - 593
    - 594
    - 597
  predicting: !ruby/object:Word
    word: predicting
    stem: predict
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  deciding: !ruby/object:Word
    word: deciding
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  eventually: !ruby/object:Word
    word: eventually
    stem: eventu
    docFrequency: 6.0
    docPositions:
    - 315
    - 321
    - 593
  halt: !ruby/object:Word
    word: halt
    stem: halt
    docFrequency: 6.0
    docPositions:
    - 315
    - 321
    - 322
    - 323
    - 593
  forever: !ruby/object:Word
    word: forever
    stem: forev
    docFrequency: 5.0
    docPositions:
    - 315
    - 321
    - 323
    - 593
  halting: !ruby/object:Word
    word: halting
    stem: halt
    docFrequency: 5.0
    docPositions:
    - 315
    - 318
    - 593
    - 596
  problem: !ruby/object:Word
    word: problem
    stem: problem
    docFrequency: 5.0
    docPositions:
    - 315
    - 318
    - 593
    - 596
  end: !ruby/object:Word
    word: end
    stem: end
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  runs: !ruby/object:Word
    word: runs
    stem: run
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  until: !ruby/object:Word
    word: until
    stem: until
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  halts: !ruby/object:Word
    word: halts
    stem: halt
    docFrequency: 3.0
    docPositions:
    - 315
    - 593
  predict: !ruby/object:Word
    word: predict
    stem: predict
    docFrequency: 10.0
    docPositions:
    - 316
    - 317
    - 319
    - 321
    - 594
    - 595
    - 597
  y: !ruby/object:Word
    word: y
    stem: y
    docFrequency: 15.0
    docPositions:
    - 316
    - 317
    - 594
    - 595
  inscribed: !ruby/object:Word
    word: inscribed
    stem: inscrib
    docFrequency: 3.0
    docPositions:
    - 316
    - 594
  shorter: !ruby/object:Word
    word: shorter
    stem: shorter
    docFrequency: 3.0
    docPositions:
    - 316
    - 594
  codes: !ruby/object:Word
    word: codes
    stem: code
    docFrequency: 3.0
    docPositions:
    - 316
    - 594
  loop: !ruby/object:Word
    word: loop
    stem: loop
    docFrequency: 4.0
    docPositions:
    - 316
    - 322
    - 594
  own: !ruby/object:Word
    word: own
    stem: own
    docFrequency: 10.0
    docPositions:
    - 317
    - 318
    - 319
    - 321
    - 595
    - 596
    - 597
  ensured: !ruby/object:Word
    word: ensured
    stem: ensur
    docFrequency: 3.0
    docPositions:
    - 317
    - 595
  identical: !ruby/object:Word
    word: identical
    stem: ident
    docFrequency: 3.0
    docPositions:
    - 317
    - 595
  nontrivial: !ruby/object:Word
    word: nontrivial
    stem: nontrivi
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  quine: !ruby/object:Word
    word: quine
    stem: quin
    docFrequency: 5.0
    docPositions:
    - 318
    - 319
    - 596
    - 597
  trick: !ruby/object:Word
    word: trick
    stem: trick
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  self: !ruby/object:Word
    word: self
    stem: self
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  replication: !ruby/object:Word
    word: replication
    stem: replic
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  uses: !ruby/object:Word
    word: uses
    stem: us
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  years: !ruby/object:Word
    word: years
    stem: year
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  patent: !ruby/object:Word
    word: patent
    stem: patent
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  cell: !ruby/object:Word
    word: cell
    stem: cell
    docFrequency: 3.0
    docPositions:
    - 318
    - 596
  replicates: !ruby/object:Word
    word: replicates
    stem: replic
    docFrequency: 5.0
    docPositions:
    - 318
    - 596
  dna: !ruby/object:Word
    word: dna
    stem: dna
    docFrequency: 5.0
    docPositions:
    - 318
    - 596
  technique: !ruby/object:Word
    word: technique
    stem: techniqu
    docFrequency: 3.0
    docPositions:
    - 319
    - 597
  paradoxical: !ruby/object:Word
    word: paradoxical
    stem: paradox
    docFrequency: 5.0
    docPositions:
    - 319
    - 597
  deterministic: !ruby/object:Word
    word: deterministic
    stem: determinist
    docFrequency: 3.0
    docPositions:
    - 319
    - 597
  nevertheless: !ruby/object:Word
    word: nevertheless
    stem: nevertheless
    docFrequency: 3.0
    docPositions:
    - 319
    - 597
  your: !ruby/object:Word
    word: your
    stem: your
    docFrequency: 2.0
    docPositions:
    - 321
  predicted: !ruby/object:Word
    word: predicted
    stem: predict
    docFrequency: 3.0
    docPositions:
    - 322
    - 323
  enter: !ruby/object:Word
    word: enter
    stem: enter
    docFrequency: 2.0
    docPositions:
    - 322
  assumptions: !ruby/object:Word
    word: assumptions
    stem: assumpt
    docFrequency: 3.0
    docPositions:
    - 323
    - 598
  beginning: !ruby/object:Word
    word: beginning
    stem: begin
    docFrequency: 3.0
    docPositions:
    - 323
    - 598
  section: !ruby/object:Word
    word: section
    stem: section
    docFrequency: 3.0
    docPositions:
    - 323
    - 598
  satisfied: !ruby/object:Word
    word: satisfied
    stem: satisfi
    docFrequency: 3.0
    docPositions:
    - 323
    - 598
  conclusion: !ruby/object:Word
    word: conclusion
    stem: conclus
    docFrequency: 4.0
    docPositions:
    - 323
    - 349
    - 598
  phrase: !ruby/object:Word
    word: phrase
    stem: phrase
    docFrequency: 2.0
    docPositions:
    - 325
  borrowed: !ruby/object:Word
    word: borrowed
    stem: borrow
    docFrequency: 2.0
    docPositions:
    - 325
  page: !ruby/object:Word
    word: page
    stem: page
    docFrequency: 13.0
    docPositions:
    - 327
    - 329
    - 335
    - 337
    - 339
    - 343
    - 345
    - 380
    - 424
    - 481
    - 487
    - 501
  lawvere: !ruby/object:Word
    word: lawvere
    stem: lawver
    docFrequency: 4.0
    docPositions:
    - 331
    - 358
    - 603
  rosebrugh: !ruby/object:Word
    word: rosebrugh
    stem: rosebrugh
    docFrequency: 4.0
    docPositions:
    - 331
    - 358
    - 603
  gowers: !ruby/object:Word
    word: gowers
    stem: gower
    docFrequency: 4.0
    docPositions:
    - 333
    - 357
    - 602
  pages: !ruby/object:Word
    word: pages
    stem: page
    docFrequency: 4.0
    docPositions:
    - 333
    - 437
    - 479
  ludwig: !ruby/object:Word
    word: ludwig
    stem: ludwig
    docFrequency: 2.0
    docPositions:
    - 341
  wittgenstein: !ruby/object:Word
    word: wittgenstein
    stem: wittgenstein
    docFrequency: 2.0
    docPositions:
    - 341
  vaughan: !ruby/object:Word
    word: vaughan
    stem: vaughan
    docFrequency: 2.0
    docPositions:
    - 343
  jones: !ruby/object:Word
    word: jones
    stem: jone
    docFrequency: 2.0
    docPositions:
    - 343
  casacuberta: !ruby/object:Word
    word: casacuberta
    stem: casacuberta
    docFrequency: 4.0
    docPositions:
    - 343
    - 355
    - 600
  castellet: !ruby/object:Word
    word: castellet
    stem: castellet
    docFrequency: 4.0
    docPositions:
    - 343
    - 355
    - 600
  mathias: !ruby/object:Word
    word: mathias
    stem: mathia
    docFrequency: 4.0
    docPositions:
    - 347
    - 359
    - 604
  somewhat: !ruby/object:Word
    word: somewhat
    stem: somewhat
    docFrequency: 2.0
    docPositions:
    - 349
  contain: !ruby/object:Word
    word: contain
    stem: contain
    docFrequency: 2.0
    docPositions:
    - 349
  robinson: !ruby/object:Word
    word: robinson
    stem: robinson
    docFrequency: 2.0
    docPositions:
    - 349
  mile: !ruby/object:Word
    word: mile
    stem: mile
    docFrequency: 3.0
    docPositions:
    - 353
    - 598
  probabilities: !ruby/object:Word
    word: probabilities
    stem: probabl
    docFrequency: 3.0
    docPositions:
    - 353
    - 598
  dover: !ruby/object:Word
    word: dover
    stem: dover
    docFrequency: 3.0
    docPositions:
    - 353
    - 598
  publ: !ruby/object:Word
    word: publ
    stem: publ
    docFrequency: 3.0
    docPositions:
    - 353
    - 598
  nicolas: !ruby/object:Word
    word: nicolas
    stem: nicola
    docFrequency: 3.0
    docPositions:
    - 354
    - 599
  hermann: !ruby/object:Word
    word: hermann
    stem: hermann
    docFrequency: 3.0
    docPositions:
    - 354
    - 599
  original: !ruby/object:Word
    word: original
    stem: origin
    docFrequency: 3.0
    docPositions:
    - 354
    - 599
  addison: !ruby/object:Word
    word: addison
    stem: addison
    docFrequency: 3.0
    docPositions:
    - 354
    - 599
  wesley: !ruby/object:Word
    word: wesley
    stem: weslei
    docFrequency: 3.0
    docPositions:
    - 354
    - 599
  m: !ruby/object:Word
    word: m
    stem: m
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  eds: !ruby/object:Word
    word: eds
    stem: ed
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  today: !ruby/object:Word
    word: today
    stem: todai
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  tomorrow: !ruby/object:Word
    word: tomorrow
    stem: tomorrow
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  viewpoints: !ruby/object:Word
    word: viewpoints
    stem: viewpoint
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  seven: !ruby/object:Word
    word: seven
    stem: seven
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  medalists: !ruby/object:Word
    word: medalists
    stem: medalist
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  lecture: !ruby/object:Word
    word: lecture
    stem: lectur
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  vol: !ruby/object:Word
    word: vol
    stem: vol
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  springer: !ruby/object:Word
    word: springer
    stem: springer
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  verlag: !ruby/object:Word
    word: verlag
    stem: verlag
    docFrequency: 3.0
    docPositions:
    - 355
    - 600
  isbn: !ruby/object:Word
    word: isbn
    stem: isbn
    docFrequency: 9.0
    docPositions:
    - 355
    - 356
    - 357
    - 358
    - 600
    - 601
    - 602
    - 603
  richard: !ruby/object:Word
    word: richard
    stem: richard
    docFrequency: 3.0
    docPositions:
    - 356
    - 601
  character: !ruby/object:Word
    word: character
    stem: charact
    docFrequency: 3.0
    docPositions:
    - 356
    - 601
  physical: !ruby/object:Word
    word: physical
    stem: physic
    docFrequency: 3.0
    docPositions:
    - 356
    - 601
  law: !ruby/object:Word
    word: law
    stem: law
    docFrequency: 3.0
    docPositions:
    - 356
    - 601
  twenty: !ruby/object:Word
    word: twenty
    stem: twenti
    docFrequency: 3.0
    docPositions:
    - 356
    - 601
  printing: !ruby/object:Word
    word: printing
    stem: print
    docFrequency: 3.0
    docPositions:
    - 356
    - 601
  ed: !ruby/object:Word
    word: ed
    stem: ed
    docFrequency: 5.0
    docPositions:
    - 356
    - 357
    - 601
    - 602
  mit: !ruby/object:Word
    word: mit
    stem: mit
    docFrequency: 3.0
    docPositions:
    - 356
    - 601
  press: !ruby/object:Word
    word: press
    stem: press
    docFrequency: 7.0
    docPositions:
    - 356
    - 357
    - 358
    - 601
    - 602
    - 603
  timothy: !ruby/object:Word
    word: timothy
    stem: timothi
    docFrequency: 3.0
    docPositions:
    - 357
    - 602
  princeton: !ruby/object:Word
    word: princeton
    stem: princeton
    docFrequency: 5.0
    docPositions:
    - 357
    - 602
  companion: !ruby/object:Word
    word: companion
    stem: companion
    docFrequency: 3.0
    docPositions:
    - 357
    - 602
  university: !ruby/object:Word
    word: university
    stem: univers
    docFrequency: 5.0
    docPositions:
    - 357
    - 358
    - 602
    - 603
  william: !ruby/object:Word
    word: william
    stem: william
    docFrequency: 3.0
    docPositions:
    - 358
    - 603
  robert: !ruby/object:Word
    word: robert
    stem: robert
    docFrequency: 3.0
    docPositions:
    - 358
    - 603
  cambridge: !ruby/object:Word
    word: cambridge
    stem: cambridg
    docFrequency: 3.0
    docPositions:
    - 358
    - 603
  adrian: !ruby/object:Word
    word: adrian
    stem: adrian
    docFrequency: 3.0
    docPositions:
    - 359
    - 604
  term: !ruby/object:Word
    word: term
    stem: term
    docFrequency: 3.0
    docPositions:
    - 359
    - 604
  synthese: !ruby/object:Word
    word: synthese
    stem: synthes
    docFrequency: 3.0
    docPositions:
    - 359
    - 604
  retrieved: !ruby/object:Word
    word: retrieved
    stem: retriev
    docFrequency: 2.0
    docPositions:
    - 366
  en: !ruby/object:Word
    word: en
    stem: en
    docFrequency: 4.0
    docPositions:
    - 366
    - 503
  org: !ruby/object:Word
    word: org
    stem: org
    docFrequency: 3.0
    docPositions:
    - 366
    - 503
  wiki: !ruby/object:Word
    word: wiki
    stem: wiki
    docFrequency: 2.0
    docPositions:
    - 366
  title: !ruby/object:Word
    word: title
    stem: titl
    docFrequency: 2.0
    docPositions:
    - 366
  theory_: !ruby/object:Word
    word: theory_
    stem: theory_
    docFrequency: 2.0
    docPositions:
    - 366
  oldid: !ruby/object:Word
    word: oldid
    stem: oldid
    docFrequency: 2.0
    docPositions:
    - 366
  categories: !ruby/object:Word
    word: categories
    stem: categori
    docFrequency: 2.0
    docPositions:
    - 367
  cz: !ruby/object:Word
    word: cz
    stem: cz
    docFrequency: 5.0
    docPositions:
    - 367
    - 460
    - 464
    - 488
  livemathematics: !ruby/object:Word
    word: livemathematics
    stem: livemathemat
    docFrequency: 2.0
    docPositions:
    - 367
  workgrouparticles: !ruby/object:Word
    word: workgrouparticles
    stem: workgrouparticl
    docFrequency: 2.0
    docPositions:
    - 367
  american: !ruby/object:Word
    word: american
    stem: american
    docFrequency: 2.0
    docPositions:
    - 367
  englishall: !ruby/object:Word
    word: englishall
    stem: englishal
    docFrequency: 2.0
    docPositions:
    - 367
  contentmathematics: !ruby/object:Word
    word: contentmathematics
    stem: contentmathemat
    docFrequency: 2.0
    docPositions:
    - 367
  contenthidden: !ruby/object:Word
    word: contenthidden
    stem: contenthidden
    docFrequency: 2.0
    docPositions:
    - 367
  tag: !ruby/object:Word
    word: tag
    stem: tag
    docFrequency: 2.0
    docPositions:
    - 367
  menu: !ruby/object:Word
    word: menu
    stem: menu
    docFrequency: 2.0
    docPositions:
    - 371
  tools: !ruby/object:Word
    word: tools
    stem: tool
    docFrequency: 3.0
    docPositions:
    - 375
    - 473
  log: !ruby/object:Word
    word: log
    stem: log
    docFrequency: 2.0
    docPositions:
    - 376
  inrequest: !ruby/object:Word
    word: inrequest
    stem: inrequest
    docFrequency: 2.0
    docPositions:
    - 376
  account: !ruby/object:Word
    word: account
    stem: account
    docFrequency: 2.0
    docPositions:
    - 376
  namespaces: !ruby/object:Word
    word: namespaces
    stem: namespac
    docFrequency: 2.0
    docPositions:
    - 379
  discussion: !ruby/object:Word
    word: discussion
    stem: discuss
    docFrequency: 2.0
    docPositions:
    - 381
  variants: !ruby/object:Word
    word: variants
    stem: variant
    docFrequency: 2.0
    docPositions:
    - 384
  views: !ruby/object:Word
    word: views
    stem: view
    docFrequency: 2.0
    docPositions:
    - 392
  view: !ruby/object:Word
    word: view
    stem: view
    docFrequency: 4.0
    docPositions:
    - 394
    - 395
    - 501
  source: !ruby/object:Word
    word: source
    stem: sourc
    docFrequency: 2.0
    docPositions:
    - 394
  history: !ruby/object:Word
    word: history
    stem: histori
    docFrequency: 2.0
    docPositions:
    - 395
  welcome: !ruby/object:Word
    word: welcome
    stem: welcom
    docFrequency: 2.0
    docPositions:
    - 421
  changes: !ruby/object:Word
    word: changes
    stem: chang
    docFrequency: 4.0
    docPositions:
    - 425
    - 426
    - 477
  recent: !ruby/object:Word
    word: recent
    stem: recent
    docFrequency: 2.0
    docPositions:
    - 426
  dive: !ruby/object:Word
    word: dive
    stem: dive
    docFrequency: 2.0
    docPositions:
    - 430
  register: !ruby/object:Word
    word: register
    stem: regist
    docFrequency: 2.0
    docPositions:
    - 433
  quick: !ruby/object:Word
    word: quick
    stem: quick
    docFrequency: 2.0
    docPositions:
    - 434
  start: !ruby/object:Word
    word: start
    stem: start
    docFrequency: 3.0
    docPositions:
    - 434
    - 435
  mechanics: !ruby/object:Word
    word: mechanics
    stem: mechan
    docFrequency: 2.0
    docPositions:
    - 436
  faqs: !ruby/object:Word
    word: faqs
    stem: faq
    docFrequency: 3.0
    docPositions:
    - 439
    - 460
  communicate: !ruby/object:Word
    word: communicate
    stem: commun
    docFrequency: 2.0
    docPositions:
    - 443
  contact: !ruby/object:Word
    word: contact
    stem: contact
    docFrequency: 2.0
    docPositions:
    - 446
  workgroups: !ruby/object:Word
    word: workgroups
    stem: workgroup
    docFrequency: 2.0
    docPositions:
    - 448
  mailing: !ruby/object:Word
    word: mailing
    stem: mail
    docFrequency: 2.0
    docPositions:
    - 449
  forum: !ruby/object:Word
    word: forum
    stem: forum
    docFrequency: 3.0
    docPositions:
    - 450
    - 451
  member: !ruby/object:Word
    word: member
    stem: member
    docFrequency: 2.0
    docPositions:
    - 451
  blog: !ruby/object:Word
    word: blog
    stem: blog
    docFrequency: 3.0
    docPositions:
    - 452
    - 488
  management: !ruby/object:Word
    word: management
    stem: manag
    docFrequency: 2.0
    docPositions:
    - 456
  charter: !ruby/object:Word
    word: charter
    stem: charter
    docFrequency: 2.0
    docPositions:
    - 461
  personnel: !ruby/object:Word
    word: personnel
    stem: personnel
    docFrequency: 2.0
    docPositions:
    - 462
  governance: !ruby/object:Word
    word: governance
    stem: govern
    docFrequency: 2.0
    docPositions:
    - 463
  council: !ruby/object:Word
    word: council
    stem: council
    docFrequency: 2.0
    docPositions:
    - 464
  past: !ruby/object:Word
    word: past
    stem: past
    docFrequency: 4.0
    docPositions:
    - 465
    - 466
    - 467
  managerial: !ruby/object:Word
    word: managerial
    stem: manageri
    docFrequency: 2.0
    docPositions:
    - 465
  decisions: !ruby/object:Word
    word: decisions
    stem: decis
    docFrequency: 3.0
    docPositions:
    - 465
    - 466
  editorial: !ruby/object:Word
    word: editorial
    stem: editori
    docFrequency: 2.0
    docPositions:
    - 466
  elections: !ruby/object:Word
    word: elections
    stem: elect
    docFrequency: 2.0
    docPositions:
    - 467
  constabulary: !ruby/object:Word
    word: constabulary
    stem: constabulari
    docFrequency: 2.0
    docPositions:
    - 468
  financial: !ruby/object:Word
    word: financial
    stem: financi
    docFrequency: 3.0
    docPositions:
    - 469
    - 488
  report: !ruby/object:Word
    word: report
    stem: report
    docFrequency: 3.0
    docPositions:
    - 469
    - 488
  upload: !ruby/object:Word
    word: upload
    stem: upload
    docFrequency: 2.0
    docPositions:
    - 478
  file: !ruby/object:Word
    word: file
    stem: file
    docFrequency: 2.0
    docPositions:
    - 478
  permanent: !ruby/object:Word
    word: permanent
    stem: perman
    docFrequency: 2.0
    docPositions:
    - 480
  link: !ruby/object:Word
    word: link
    stem: link
    docFrequency: 2.0
    docPositions:
    - 480
  modified: !ruby/object:Word
    word: modified
    stem: modifi
    docFrequency: 2.0
    docPositions:
    - 487
  october: !ruby/object:Word
    word: october
    stem: octob
    docFrequency: 2.0
    docPositions:
    - 487
  available: !ruby/object:Word
    word: available
    stem: avail
    docFrequency: 3.0
    docPositions:
    - 488
  creative: !ruby/object:Word
    word: creative
    stem: creativ
    docFrequency: 2.0
    docPositions:
    - 488
  commons: !ruby/object:Word
    word: commons
    stem: common
    docFrequency: 2.0
    docPositions:
    - 488
  attribution: !ruby/object:Word
    word: attribution
    stem: attribut
    docFrequency: 2.0
    docPositions:
    - 488
  sharealike: !ruby/object:Word
    word: sharealike
    stem: sharealik
    docFrequency: 2.0
    docPositions:
    - 488
  unported: !ruby/object:Word
    word: unported
    stem: unport
    docFrequency: 2.0
    docPositions:
    - 488
  license: !ruby/object:Word
    word: license
    stem: licens
    docFrequency: 3.0
    docPositions:
    - 488
  originated: !ruby/object:Word
    word: originated
    stem: origin
    docFrequency: 2.0
    docPositions:
    - 488
  wikipedia: !ruby/object:Word
    word: wikipedia
    stem: wikipedia
    docFrequency: 2.0
    docPositions:
    - 488
  gnu: !ruby/object:Word
    word: gnu
    stem: gnu
    docFrequency: 2.0
    docPositions:
    - 488
  documentation: !ruby/object:Word
    word: documentation
    stem: document
    docFrequency: 2.0
    docPositions:
    - 488
  dedicated: !ruby/object:Word
    word: dedicated
    stem: dedic
    docFrequency: 2.0
    docPositions:
    - 488
  server: !ruby/object:Word
    word: server
    stem: server
    docFrequency: 2.0
    docPositions:
    - 488
  hosting: !ruby/object:Word
    word: hosting
    stem: host
    docFrequency: 2.0
    docPositions:
    - 488
  generously: !ruby/object:Word
    word: generously
    stem: gener
    docFrequency: 2.0
    docPositions:
    - 488
  steadfast: !ruby/object:Word
    word: steadfast
    stem: steadfast
    docFrequency: 2.0
    docPositions:
    - 488
  networkshelp: !ruby/object:Word
    word: networkshelp
    stem: networkshelp
    docFrequency: 2.0
    docPositions:
    - 488
  statistics: !ruby/object:Word
    word: statistics
    stem: statist
    docFrequency: 2.0
    docPositions:
    - 488
  twitter: !ruby/object:Word
    word: twitter
    stem: twitter
    docFrequency: 2.0
    docPositions:
    - 489
  facebook: !ruby/object:Word
    word: facebook
    stem: facebook
    docFrequency: 2.0
    docPositions:
    - 489
  privacy: !ruby/object:Word
    word: privacy
    stem: privaci
    docFrequency: 2.0
    docPositions:
    - 490
  policy: !ruby/object:Word
    word: policy
    stem: polici
    docFrequency: 2.0
    docPositions:
    - 490
  disclaimers: !ruby/object:Word
    word: disclaimers
    stem: disclaim
    docFrequency: 2.0
    docPositions:
    - 492
  cdata: !ruby/object:Word
    word: cdata
    stem: cdata
    docFrequency: 2.0
    docPositions:
    - 498
  window: !ruby/object:Word
    word: window
    stem: window
    docFrequency: 6.0
    docPositions:
    - 498
    - 500
    - 502
    - 504
  ready: !ruby/object:Word
    word: ready
    stem: readi
    docFrequency: 5.0
    docPositions:
    - 498
    - 499
    - 501
  mw: !ruby/object:Word
    word: mw
    stem: mw
    docFrequency: 8.0
    docPositions:
    - 498
    - 499
    - 500
    - 501
    - 502
    - 504
    - 505
  loader: !ruby/object:Word
    word: loader
    stem: loader
    docFrequency: 3.0
    docPositions:
    - 499
    - 501
  state: !ruby/object:Word
    word: state
    stem: state
    docFrequency: 2.0
    docPositions:
    - 499
  site: !ruby/object:Word
    word: site
    stem: site
    docFrequency: 3.0
    docPositions:
    - 499
    - 503
  loading: !ruby/object:Word
    word: loading
    stem: load
    docFrequency: 2.0
    docPositions:
    - 499
  load: !ruby/object:Word
    word: load
    stem: load
    docFrequency: 3.0
    docPositions:
    - 501
    - 503
  ext: !ruby/object:Word
    word: ext
    stem: ext
    docFrequency: 3.0
    docPositions:
    - 501
  treeandmenu: !ruby/object:Word
    word: treeandmenu
    stem: treeandmenu
    docFrequency: 2.0
    docPositions:
    - 501
  cite: !ruby/object:Word
    word: cite
    stem: cite
    docFrequency: 2.0
    docPositions:
    - 501
  mediawiki: !ruby/object:Word
    word: mediawiki
    stem: mediawiki
    docFrequency: 7.0
    docPositions:
    - 501
  toc: !ruby/object:Word
    word: toc
    stem: toc
    docFrequency: 2.0
    docPositions:
    - 501
  action: !ruby/object:Word
    word: action
    stem: action
    docFrequency: 2.0
    docPositions:
    - 501
  postedit: !ruby/object:Word
    word: postedit
    stem: postedit
    docFrequency: 2.0
    docPositions:
    - 501
  hidpi: !ruby/object:Word
    word: hidpi
    stem: hidpi
    docFrequency: 2.0
    docPositions:
    - 501
  searchsuggest: !ruby/object:Word
    word: searchsuggest
    stem: searchsuggest
    docFrequency: 2.0
    docPositions:
    - 501
  'null': !ruby/object:Word
    word: 'null'
    stem: 'null'
    docFrequency: 2.0
    docPositions:
    - 501
  document: !ruby/object:Word
    word: document
    stem: document
    docFrequency: 2.0
    docPositions:
    - 503
  php: !ruby/object:Word
    word: php
    stem: php
    docFrequency: 2.0
    docPositions:
    - 503
  debug: !ruby/object:Word
    word: debug
    stem: debug
    docFrequency: 2.0
    docPositions:
    - 503
  lang: !ruby/object:Word
    word: lang
    stem: lang
    docFrequency: 2.0
    docPositions:
    - 503
  scripts: !ruby/object:Word
    word: scripts
    stem: script
    docFrequency: 2.0
    docPositions:
    - 503
  printable: !ruby/object:Word
    word: printable
    stem: printabl
    docFrequency: 2.0
    docPositions:
    - 503
  skin: !ruby/object:Word
    word: skin
    stem: skin
    docFrequency: 2.0
    docPositions:
    - 503
  script: !ruby/object:Word
    word: script
    stem: script
    docFrequency: 2.0
    docPositions:
    - 503
  config: !ruby/object:Word
    word: config
    stem: config
    docFrequency: 2.0
    docPositions:
    - 505
  wgbackendresponsetime: !ruby/object:Word
    word: wgbackendresponsetime
    stem: wgbackendresponsetim
    docFrequency: 2.0
    docPositions:
    - 505
lineCount: 606
wordCount: 10009
rank: 0.2717391304347826
title: Theory (mathematics) - encyclopedia article - Citizendium
links:
- http://en.citizendium.org/wiki?action=edit&preload=Template%3ADef_preload&title=Theory_(mathematics)/Definition
- http://en.citizendium.org/wiki?action=edit&preload=Template%3ACitable_Version_start&title=Theory_(mathematics)/Citable_Version
- http://en.citizendium.org/wiki?title=Theory_(mathematics)&printable=yes
- http://en.citizendium.org/wiki?title=Theory_(mathematics)&action=edit&section=0
- http://www.springerlink.com/content/x28504221108023t/
- http://personnel.univ-reunion.fr/ardm/inefff.pdf
- http://en.citizendium.org/wiki?title=Theory_(mathematics)&oldid=100831737
- http://en.citizendium.org/wiki?namespace=0&title=Special%3ARecentChanges
- https://lists.purdue.edu/mailman/listinfo/citizendium-l
- https://groups.google.com/forum/#!forum/cz-open-forum
- http://blog.citizendium.org
- http://en.citizendium.org/wiki/CZ:Upload
- http://en.citizendium.org/wiki/Creative_Commons_CC-by-sa_3.0
- http://www.gnu.org/copyleft/fdl.html
- http://steadfast.net
- http://steadfast.net
- http://en.citizendium.org/wiki/Help:Index
- http://en.citizendium.org/wiki/CZ:Financial_report
- http://en.citizendium.org/wiki/CZ:Statistics
- http://blog.citizendium.org
- http://twitter.com/TheCitizendium
- http://www.facebook.com/citizendium
- https://www.google.com/+CitizendiumOrg
rawText: "\n\t\t\n\t\t\n\t\t\n\t\t\t\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tTheory (mathematics)\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tFrom
  Citizendium, the Citizens' Compendium\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tJump
  to:\t\t\t\t\tnavigation, \t\t\t\t\tsearch\n\t\t\t\t\n\t\t\t\t\n\n\n\n\n\naddthis_pub
  \    = 'citizendium';\naddthis_logo    = '';\naddthis_logo_color = '';\naddthis_logo_background
  = '';\naddthis_brand   = 'Citizendium';\naddthis_options = '';\naddthis_offset_top
  = '';\naddthis_offset_left = '';\n\n \nMain Article\nTalk \nDefinition [?]\nRelated Articles
   [?]\n\n\nBibliography   [?]\n\n\nExternal Links  [?]\n\n\n\n\n\n\nCitable Version
   [?]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 
      \n\n \n\n   \nThis editable Main Article is under development and not meant
  to be cited; by editing it you can help to improve it towards a future approved,
  citable version. These unapproved articles are subject to a disclaimer. [edit intro]\n\nSimilarly
  to a living thing, mathematics is a unity within an environment, yet apart from
  it — a compartment of a larger whole, structurally distinguishable though not functionally
  completely isolated from or closed to its surroundings.[1]\n  (CC) Photo: Anders
  Sandberg \n  (CC) Image: Anders Sandberg \nContents\n1 Mathematics is structurally
  distinguishable\n1.1 Axiomatic or non-axiomatic\n1.2 Monotonic or non-monotonic\n1.3
  Sharp or fuzzy; real or ideal\n1.4 Defined or undefined\n\n2 Mathematics is not
  isolated\n2.1 Computers metaphor\n2.2 Flexible or inflexible\n2.3 Universal or specialized\n2.4
  Motivated or indiscriminate\n2.5 From technical to human: definitions\n\n3 Principles
  and practices\n3.1 Rigor or intuition\n3.2 Formal or formalizable\n3.3 Axiomatic
  or axiomatizable\n\n4 Some details\n4.1 Consistent or inconsistent\n4.2 Univalent
  or multivalent\n4.3 Complete or incomplete\n4.4 Definitions: abbreviations or extensions\n4.5
  Formalizable in reality or in principle\n4.6 Generating all theorems; decidable
  or undecidable\n4.7 A theory as a crystal ball?\n\n5 Notes\n6 References\n\n\nMathematics
  is structurally distinguishable\nAxiomatic or non-axiomatic\nThere are two possible
  approaches to mathematics, called by R. Feynman \"the Babylonian tradition\" and
  \"the Greek tradition\".[2] They answer differently the question, whether or not
  some mathematical facts are more fundamental than others, more consequential facts.
  The same approaches apply to any theory, mathematical or not.\nThe Babylonian (non-axiomatic)
  tradition treats a theory as a network whose nodes are facts and connections are
  derivations. If some facts are forgotten they probably can be derived from the others.\nThe
  Greek (axiomatic) tradition treats a theory as a tower of more consequential facts
  called theorems, grounded on the basis of more fundamental facts called axioms.
  If all theorems are forgotten they surely can be derived from the axioms. The axioms
  are sparse and simple, not to be forgotten.\n\nMonotonic or non-monotonic\nThe distinction
  between these two approaches is closely related to the distinction between monotonic
  and non-monotonic logic. These answer differently the question, whether or not a
  fact can be retracted because of new evidence. Monotonic logic answers in the negative,
  non-monotonic logic answers in the affirmative.\nNon-monotonic logic is used routinely
  in everyday life and research. An example: \"being a bird, this animal should fly\",
  but the bird may appear to be a penguin. Another example: \"the grass is wet, therefore
  it rained\", but the cause may appear to be a sprinkler.\nThe non-axiomatic approach
  is flexible. When needed, some old facts can be retracted, some new facts added,
  and some derivations changed accordingly. Nowadays this approach is widely used
  outside mathematics, and only marginally within mathematics (so-called informal
  mathematics).\nThe axiomatic approach is inflexible. A theorem cannot be retracted
  without removing (or replacing) at least one axiom, which usually has dramatic consequences
  for many other theorems. Nowadays this approach is widely used in mathematics.\nThe
  non-axiomatic approach is well suited when new evidence often comes from the outside.
  The axiomatic approach is well suited for a theory that advances only by extracting
  new consequences from an immutable list of axioms. It may seem that such a development
  must be dull. Surprisingly, this is an illusion. Being inflexible in some sense,
  an axiomatic theory can be very flexible in another sense, see Sect. 2.2.\n\nSharp
  or fuzzy; real or ideal\nA fair coin is tossed 1000 times; can it happen at random
  that heads is obtained all the 1000 times? Emile Borel, a famous mathematician,
  answers in the negative, with an important reservation:\n\nSuch is the sort of event
  which, though its impossibility may not be rationally demonstrable, is, however,
  so unlikely that no sensible person will hesitate to declare it actually impossible.[3]\nWhy
  `may not be rationally demonstrable'? Why does this statement remain outside the
  list of Borel's theorems in probability theory?\nMathematical truth is sharp, not
  fuzzy. Every mathematical statement is assumed to be either true or false (even
  if no one is able to decide) rather than \"basically true\", \"true for all practical
  purposes\" etc. If n heads out of n times is an impossible event for n=1000 then
  there must exist the least such n (be it known or not). Say, 665 heads can occur,
  but 666 heads cannot. Then, assuming that 665 heads have just appeared, we see that
  the next time tails is guaranteed, which contradicts to the assumed memoryless behavior
  of the coin.\nAnother example. The number 4 can be written as a sum of units: 1+1+1+1.
  Can the number 21000 be written as a sum of units?  Mathematics answers in the affirmative.
  Indeed, if you can write, say, 2665 as a sum of units, then you can do it twice
  (connecting the two copies by the plus sign). Complaints about limited resources,
  appropriate in the real world, are inappropriate in the imaginary, highly idealized
  mathematical universe.\n\nDefined or undefined\nFacts are formulated via notions.\nIn
  the non-axiomatic approach, notions are nodes of a network whose connections are
  definitions. If some notions are forgotten they probably can be restored from the
  others.\nSearching Google for \"define:line\" we get \"a length without breadth
  or thickness\". Similarly we find definitions for breadth, thickness and so on,
  recursively. Doing so we would get a large subnetwork; here is its small fragment:\n\nLine:
  a length without breadth or thickness\nLength: linear extent in space\nLinear: along
  a line↑\nExtent: a range of locations\nLocation: point or extent↑ in space\nSpace:
  unlimited expanse in which everything is located↑\nBreadth: the extent↑ from side
  to side\nSide: a surface forming part of the outside of an object\nSurface: the
  extended↑ two-dimensional outer boundary of a three-dimensional object\nThickness:
  the dimension through an object as opposed to its length↑ or width\nWidth: the extent↑
  from side↑ to side↑(Up arrows mean: see above.) We observe that\n\n circularity
  appears routinely; for example: line→length→linear→line;\n the definition of a single
  notion involves recursively a large number of other, quite remote notions.Such system
  of notions is unsuitable for a mathematical theory. Here, circularity is disallowed,
  and the set of involved notions is kept reasonably small (whenever possible). (See
  also Semantic primes for an attempt to disclose a common mathematics-like structure
  behind all natural languages.)\nIn the axiomatic approach, notions are a tower of
  defined notions, grounded on the basis of more fundamental notions called undefined
  primitives. If all defined notions are forgotten they surely can be restored from
  the undefined primitives. The undefined primitives are sparse and simple, not to
  be forgotten.\nCuriously, when a non-mathematical encyclopedia contains an article
  on a mathematical notion, two very different \"definitions\" may appear, one general
  (informal), the other mathematical (formal).\nFrom now on, in this article, \"definition\"
  means a mathematical definition (unless explicitly stated otherwise).\nThe lack
  of definition of a primitive notion does not mean lack of any information about
  this notion. Axioms provide such information, to be used in proofs. Informal (intuitive)
  understanding of a primitive notion is communicated in a natural language. This
  information cannot be used in proofs, but is instrumental when guessing what to
  prove, how to prove, how to apply proved theorems and, last but not least, what
  to postulate by axioms.\n\nMathematics is not isolated\nComputers metaphor\nA conceptual
  metaphor helps to understand one conceptual domain in terms of another. For example,
  the desktop metaphor treats the monitor of a computer as if it is the user's desktop,
  which helps to a user not accustomed to the computer. Nowadays many are more accustomed
  to computers than to mathematics. Thus, analogies with computers may help to understand
  mathematics. Such analogies are widely used below.\n\nFlexible or inflexible\nIn
  1960s a computer was an electronic monster able to read from a punch tape simple
  instructions stipulated by the hardware and execute them quickly, thus performing
  a lot of boring calculations. Nowadays some parents complain that personal computers
  are too fascinating. However, without software a personal computer is only able
  to read (say, from a compact disk) and execute instructions stipulated by the hardware.
  These instructions are now as technical as before: simple arithmetical and logical
  operations, loops, conditional execution etc. A computer is dull, be it a monster
  of 1960s or a nice looking personal computer, unless programmers develop fascinating
  combinations (called programs) of these technical instructions.\nFor a programmer,
  the instruction set of a given computer is an immutable list. The programmer cannot
  add new elements to this list, nor modify existing elements. In this sense the instruction
  set is inflexible. New programs are only new combinations of the given elements.
  Does it mean that program development is dull? In no way! A good instruction set
  is universal. It means that a competent programmer feels pretty free to implement
  any well-understood algorithm provided that the time permits (which is usually most
  problematic) and the memory and the speed of the computer are high enough (which
  is usually less problematic). In this sense a good instruction set is very flexible.\nLikewise
  a mathematician working within a given theory faces its axioms as an immutable list.
  However, this list can be universal in the sense that a competent mathematician
  feels pretty free to express any clear mathematical idea. In this sense some axiomatic
  systems are very flexible.\n\nUniversal or specialized\nFor a user, the software
  of a computer is first of all a collection of applications (games, web browsers,
  media players, word processors, image editors etc.) All applications function within
  an operating system (Windows, MacOS, Linux etc.) The operating system is a universal
  infrastructure behind various specialized applications. Each application deals with
  relevant files. The operating system maintains files in general, and catalogs (directories)
  containing files and possibly other catalogs.\nLikewise, the set theory is a universal
  infrastructure behind various specialized mathematical theories (algebra, geometry,
  analysis etc.)  Each specialized mathematical theory deals with relevant objects,
  relations and sets. The sets theory deals with sets in general, possibly containing
  other sets, and reduces objects and relations to sets. Alternatively, higher-order
  logic can be used as such a universal infrastructure, more convenient for computer-assisted
  formalization of mathematics. Also category theory pretends to the throne of the
  set theory.[4]In many cases a specialized mathematical theory is a theory of mathematical
  structures of some kind, often called spaces (of this kind). For example: Euclidean
  geometry is a theory of Euclidean spaces; topology is a theory of topological spaces;
  linear algebra is a theory of linear spaces. Differential geometry investigates
  smooth manifolds. Algebra investigates groups, rings, fields etc.\n\nMotivated or
  indiscriminate\nMonkeys could type into a computer a sequence of hardware instructions;
  the computer could execute them; but the result of such \"programming\" has almost
  no chance to be fascinating or useful. Fascinating computer games reflect human
  predilections. Useful programs reflect human needs. A computer is dull for humans
  unless its software reflects human life in one way or another.\nLikewise, a theorem
  is of no interest for humans unless it is motivated in one way or another by human
  life. The motivation may be quite indirect; many theorems \"only\" help to prove
  other theorems, many are appreciated \"only\" for their aesthetic value, etc. But
  some kind of motivation is necessary. Indiscriminate stream of logical consequences
  of the axioms is not publishable in the mathematical literature.\nNote that \"a
  theorem\" does not mean \"a motivated theorem\", \"an important theorem\" etc.,
  not even \"an already discovered theorem\". All theorems are just an indiscriminate
  stream of logical consequences of the axioms.\nTheorems of a theory are, by definition,
  statements that follow from the given axioms according to the given rules (called
  by different authors inference rules, derivation rules, deduction rules, transformation
  rules), including the axioms themselves.\n\nFrom technical to human: definitions\nThe
  gap between a bare hardware and a nice application is too wide for a single jump,
  or even a triple jump (hardware – operating system – programming language – application).
  Bridging the gap is a laborious task for many programmers. They compose programs
  of modules, and modules of subroutines. Each subroutine reduces a bit more useful
  task to a bit simpler tasks. Ultimately, a useful (or even fascinating) task is
  reduced to the technical instructions of the bare hardware.\nLikewise, mathematicians
  bridge the wide gap between useful notions (say, \"ellipse\" or \"normal distribution\")
  and the undefined primitives by a large and complicated system of definitions. Each
  definition reduces a bit more useful notion to a bit more primitive notions.\nMathematical
  definitions are very diverse.\nA definition may be just an abbreviation local to
  a single calculation, like this: \"denoting for convenience  by  we have...\".\nA
  single definition may embed a whole specialized mathematical theory into the universal
  set-theoretic framework, like this:\n\"A Euclidean space consists, by definition,
  of three sets, whose elements are called points, lines and planes respectively,
  and six relations, one called betweenness, three called containment and two called
  congruence, satisfying the following conditions: ...\"\nA definition may be given
  mostly for speaking more concisely, like this: \"in a triangle, the altitude of
  a vertex is, by definition, its distance to the line through the other two vertices\".\nA
  definition may introduce a new revolutionary concept, like this: \"the derivative
  of a function at a point is, by definition, the limit of the ratio...\"\n\nSome
  mathematicians will tell you that the main aim of their research is to find the
  right definition, after which their whole area will be illuminated. ... For other
  mathematicians, the main purpose of definitions is to prove theorems... [5]\nPrinciples
  and practices\nRigor or intuition\nMathematics as a cultural process is not bound
  by monotonic logic. For example, it was treated till 1872 as intuitively evident
  fact that any curve on the plane has a tangent line everywhere except maybe a discrete
  set of points. However, this \"fact\" was refuted and retracted.\n\nA century later,
  we have seen so many monsters of this sort that we have become a little blasé. But
  the effect produced on the majority of nineteenth century mathematicians ranged
  from disgust to consternation.[6]\nSince then, intuition is not a valid argument
  in mathematical proofs. A mathematical theory is bound by monotonic logic. If needed,
  mathematics as a cultural process can retract an axiomatic theory as whole (rather
  than some theorems) and accept another axiomatic theory. (Moreover, in a remote
  perspective the axiomatic approach could be abandoned.)\n\nFormal or formalizable\nAn
  example. If  then , since . This simple algebraic argument can be checked by a human
  or even a computer. No need to understand the meaning of the statement; it is sufficient
  to know the relevant formal rules. The statement follows from the given rules only,
  rigorously, without explicit or implicit use of intuition. A formal proof guarantees
  that a theorem will never be retracted.\nA universal formal language conceived by
  Gottfried Leibniz near 1685,\n\ncapable of expressing all humans thoughts unambiguously,
  of strengthening our power of deduction, of avoiding errors by a purely mechanical
  effort of attention[7]\nwas partially implemented in mathematics two centuries later,
  especially, as a formal language of set theory. In the form introduced by Bourbaki
  this language contains four logical signs, three specific signs, and letters. Its
  rules are considerably more complicated than elementary algebra.\nHowever, this
  formal language is never used by a typical mathematician. Likewise, most programmers
  never use the instructions of the computer hardware. Instead, they develop applications
  in appropriate programming languages (BASIC, Java, C++, Python etc). A statement
  of a programming language corresponds usually to many hardware instructions; the
  correspondence is established by special programs (compilers and interpreters).
  A programming language is geared to programmers, hardware instructions --- to hardware.\nThe
  gap between the language of mathematical texts (books and articles) and the formal
  language of the set theory is even wider than the gap between a programming language
  and hardware instructions. It is as wide as the gap between pseudocode and Turing
  machines.\nA programmer, when coding a program, knows that the computer does exactly
  what it is told to do. In contrast, an author or speaker, when communicating with
  other people, can be ambiguous, make small errors, and still expect to be understood.
  Pseudocode is a description of an algorithm, intended for human reading, that can
  be converted into a code by any competent programmer. A code is formal; a pseudocode
  is formalizable.\nLikewise, communication between mathematicians is made in a formalizable
  language.\n\nIn practice, the mathematician ... is content to bring the exposition
  to a point where his experience and mathematical flair tell him that translation
  into formal language would be no more than an exercise of patience (though doubtless
  a very tedious one).[8]\nA mathematician, using a formalizable language, need not
  know all technical details of the underlying formal language. Many equivalent formal
  languages may be used interchangeably. Likewise, a single pseudocode can be used
  when coding in different programming languages, as long as these are not too far
  from each other.\n\nAxiomatic or axiomatizable\n  Two finite lists of vectors generate
  (by summation) the same infinite set of vectors. Similarly, different finite lists
  of axioms can be used for generating the same infinite set of theorems.\nA mathematician,
  working within an axiomatic theory, need not remember the list of axioms in full
  detail. It is sufficient to remember a list of theorems that contains all axioms
  or, more generally, such that each axiom follows easily from these theorems. (Here,
  as usual, \"theorems\" are treated inclusively, as \"axioms and theorems\".)\nTwo
  lists of axioms are called equivalent if every axiom of each list follows from the
  axioms of the other list. Such lists of axioms may be used interchangeably, since
  they generate the same theorems.\n\nSome details\nConsistent or inconsistent\nIf
  a theory states that 2+2=5, it is a paradox but not yet a contradiction. By \"paradox\"
  people may mean\n\na contradiction;\nan apparent contradiction;\nsomething counterintuitive;\nsomething
  surprising;\nsomething ironic;etc. In contrast, a contradiction (in a mathematical
  theory) is, by definition, a pair of theorems (of the given theory) such that one
  is the negation of the other. Thus, two theorems\n\n \n are still not a contradiction.
  Two theorems\n\n \n are a contradiction.\nIf a contradiction exists in a given theory,
  this theory is called inconsistent. Otherwise, if no contradictions exist (rather
  than merely not found for now), the theory is called consistent.\nFor a mathematician,
  an inconsistent theory is completely useless. Some philosophers disagree:\n\nSuperstitious
  dread and veneration by mathematicians in face of a contradiction[9]\nBut a mathematician
  insists: an inconsistent theory is completely useless, since all statements (in
  the given language) are theorems! The reason is, proof by contradiction.\nNo matter
  which statement X is in question, we always can prove X as follows:\n\n Assume that
  X is false;\n ... (put the proof of the contradiction here);\n the assumption leads
  to a contradiction, thus X is true.It is tempting to object that the contradiction
  has nothing in common with the assumption and therefore cannot invalidate it. However,
  the rules of formal logic do not demand that the contradiction has something in
  common with the assumption. Some attempts to change these rules were made (so-called
  \"relevance logic\", or \"relevant logic\"), but with little success. It is always
  possible to obfuscate the proof of the contradiction, making it seemingly entangled
  with X. We have no formal criterion able to unmask any possible fictitious participation
  of X in the proof of the contradiction.\nDavid Hilbert aimed to find axioms sufficient
  for all mathematics and to prove their consistency from the assumption that the
  \"finitary arithmetic\" (a subsystem of the usual arithmetic of the positive integers,
  chosen to be philosophically uncontroversial) was consistent. A fatal blow was dealt
  by the second Gödel's incompleteness theorem. Consistency of a theory cannot be
  proved by a weaker theory, nor by the same theory. It can be proved by a stronger
  theory, which does not dispel doubts: if the given theory is inconsistent then the
  stronger theory, being all the more inconsistent, can prove every claim, be it true
  or false.\nMany mathematicians feel that specialized theories, being more reliable
  than universal theories, are like watertight compartments. If a contradiction will
  be found in the used universal theory, specialized theories will separate and wait
  for a better universal theory.\n\nI have always felt that, if one day someone came
  up with a contradiction in mathematics, I would just say, \"Well, those crazy logicians
  are at it again,\" and go about my business as I was going the day before.[10]\nUnivalent
  or multivalent\nPlane geometry (called also \"planar geometry\") is a part of solid
  geometry that restricts itself to a single plane (\"the plane\") treated as a geometric
  universe. The question \"which plane?\" is inappropriate, since planes do not differ
  in their geometric properties. Every two planes α, β are isomorphic, that is, there
  exists an isomorphism f between α and β. Treating α and β as sets of points one
  defines isomorphism as an invertible (one-to-one and onto) map f : α → β preserving
  all primitive relations. Namely: f maps lines into lines; the distance between f(A)
  and f(B) on β is equal to the distance between A and B on α; etc. The same is required
  of the inverse map .\nAxioms of the plane Euclidean geometry leave no freedom, they
  determine uniquely all geometric properties of the plane. More exactly: all Euclidean
  planes are mutually isomorphic. In this sense we have \"the\" Euclidean plane. In
  terms of Bourbaki, the plane\nEuclidean geometry is an univalent theory. In contrast,
  axioms of a linear space (called also vector space) leave a freedom: a linear space
  may be one-dimensional, two-dimensional, three-dimensional, four-dimensional and
  so on (infinite dimension is also possible). Linear algebra is multivalent.\nAxioms
  of topology leave much more freedom; every subset of (say) the plane is an example
  of a topological space, be it connected or not, compact or not, be it a curve, a
  domain, a fractal, or whatever; and all these are still a minority among all topological
  spaces. Topology is multivalent.\nAccording to Bourbaki, the study of multivalent
  theories is the most striking feature which distinguishes modern mathematics from
  classical mathematics.[11]A similar idea occurs in mathematical logic: a theory
  is called categorical if all its models are mutually isomorphic. However, for Bourbaki
  a theory is embedded into the set theory, while in logic a theory is standalone
  (embedded into the first-order logic).\n\nComplete or incomplete\nA theory is called
  complete, if every statement in its language can be proved or disproved. In other
  words: if such a statement is not a theorem then its negation is necessarily a theorem.\nA
  statement (in the language of the given theory) is called independent (in other
  words, undecidable) in this theory, if it is not a theorem, but also its negation
  is not a theorem.\nIndependent statements appear naturally in multivalent theories.
  For example, in linear algebra the statement \"three vectors cannot be linearly
  independent\" is neither provable nor disprovable, since the dimension of a linear
  space may be 2 or 3 (or anything else).\nThus, multivalent theories are usually
  incomplete.\nWhat about univalent theories? Seemingly, these should be complete.
  For example, the plane Euclidean geometry should prove all geometric statements
  that hold on the Euclidean plane, and only such statements. Similarly, arithmetics
  of natural numbers should prove all true arithmetical statements about natural numbers,
  and only these. Unexpectedly, the situation is far more complicated than these naive
  ideas, see Sect. 4.7.\n\nDefinitions: abbreviations or extensions\nAccording to
  Sect. 2.4, a theorem is a logical consequence of the axioms. However, what about
  definitions? They are numerous and important, according to Sect. 2.5. Two possible
  approaches to definitions answer differently the question, whether they belong to
  the formal theory or not.\nOne approach treats definitions as abbreviations, used
  in the formalizable language and eliminated when translating into the formal language.
  Thus, the formal theory contains only primitive notions and axioms, not definitions.\nAccording
  to the other approach, each definition extends the formal theory. The new (extended)
  theory contains one more notion and one more axiom. Informally, the new notion is
  just defined, and the new axiom is just the definition. But formally, the new theory
  still contains only primitive notions and axioms, not definitions.\nAn example.\nDefinition:
  a prime number is a natural number having exactly two divisors. (These are 1 and
  the number itself, of course.)\nTheorem: there are infinitely many prime numbers.\nThe
  first approach (abbreviations). In the formal language, the notion \"prime\" is
  eliminated, as follows. Theorem: there are infinitely many natural numbers having
  exactly two divisors. The proof also does not involve the notion \"prime\".\nThe
  second approach (extensions). The new formal theory stipulates a new primitive notion
  \"prime\" and a new axiom: a natural number is prime if and only if it has exactly
  two divisors. This axiom is used in the proof of the theorem.\n\nFormalizable in
  reality or in principle\nThe integer 1 is a very simple example of a mathematical
  object that can be defined in the language of set theory. Its definition, treated
  as an abbreviation (rather than extension), can be translated from this formalizable
  language into any corresponding formal language, in particular, into the formal
  language introduced by Bourbaki. However, the length of the resulting formal definition
  is equal to 4,523,659,424,929.[12] It would take about 4000 gigabytes of computer
  memory! More complicated mathematical definitions are much longer. Clearly, such
  formalization is possible only in principle, similarly to the possibility of writing
  21000 as a sum of units.\nThis formal language is so verbose because of substitution.
  Here is an algebraic example: substituting  into  gives an expression of length
  64, containing 8 occurrences of a. Further, substitute  and you get an expression
  of length 152, containing 24 occurrences of u. And so on.\nThere exist formal mathematical
  languages intended for practical use, for example, Mizar. These treat definitions
  as extensions.\n\nGenerating all theorems; decidable or undecidable\nIt is impossible
  to list all theorems, since they are infinitely many. However, an endless algorithmic
  process can generate theorems, only theorems, and all theorems in the sense that
  every theorem will be generated, sooner or later. In more technical words: the set
  of all theorems is recursively enumerable. Some theories have infinitely many axioms
  generated by a finite list of so-called axiom schemata. Still, the set of all theorems
  is recursively enumerable, since the set of axioms is.\nAn open question (in a mathematical
  theory) is a statement neither proved nor disproved. It is possible (in principle,
  not necessarily in practice) to run the theorem-generating algorithm waiting for
  one of two events: either the given statement appears to be a theorem, or its negation
  does; in both cases the (formerly) open question is decided. If the theory is complete,
  this must happen sooner or later.\nA theory is called decidable if there exists
  an algorithm that, given an arbitrary statement (in the language of the theory)
  decides whether it is a theorem or not. (In more technical words: if the set of
  all theorems is recursive.)\nThe argument above shows that a complete theory is
  decidable.\n\nA theory as a crystal ball?\nImagine a theory able to describe the
  whole discrete mathematics (the set theory?) or, at least, arbitrary algorithmic
  computations, in other words, formal machines (like computers, but with unlimited
  resources). Assume that the theorems include all true statements about these machines,
  and no wrong statements about them. Then a formal machine can use this theory as
  a \"crystal ball\", — for predicting the future of any formal machine. In particular,
  for deciding, whether a given machine will eventually halt, or will run forever
  (so-called halting problem). To this end it runs the theorem-generating algorithm
  until either the statement \"such machine eventually halts\" or its negation appears
  among the theorems.\nIn order to predict the future of a formal machine Y, a formal
  machine X needs the code of Y. It does not mean that the code of Y must be inscribed
  into (and therefore be shorter than) the code of X. Instead, X can generate the
  code of Y. This way, a single machine X can predict the future of infinitely many
  machines Y, and moreover, of all possible machines Y, generating their codes in
  an endless loop.\nCan X predict its own future? It may seem that the affirmative
  answer is ensured by the argument above. However, how can X know, which Y is identical
  to X? In other words, how can X know (it means, be able to generate) its own code?\nIt
  is a well-known and nontrivial fact that some programs, so-called quine programs,
  can generate their own texts. (See also halting problem.) It may seem to be a trick,
  but in fact it is a form of self-replication, and it uses a 4×109 years old patent
  of life: a cell replicates itself using its DNA, and also replicates the DNA itself.\nUsing
  the quine technique, a machine X can predict its own future. Is it paradoxical?
  Seemingly not, since X is a deterministic machine, it has no free will. But nevertheless
  it is paradoxical, since we may program X as follows:\n\npredict your own future:
  whether you will eventually halt, or will run forever;\nif \"halt\" is predicted,
  enter an infinite loop;\notherwise (if \"run forever\" is predicted), halt.We get
  a paradox, which means that the assumptions made in the beginning of this section
  cannot be satisfied. An axiomatic theory cannot be such that its theorems include
  all true statements about formal machines, and no wrong statements about them! This
  important conclusion is closely related to the famous Gödel theorem.[13]\nNotes\n↑
  This phrase is borrowed from \"Life\".\n\n↑ Feynman 1995, Sect. 2, page 46.\n\n↑
  Borel 1962, page 3.\n\n↑ Lawvere & Rosebrugh 2003.\n\n↑ Gowers 2008, pages 74–75.\n\n↑
  Bourbaki 1968, page 311.\n\n↑ Bourbaki 1968, page 302.\n\n↑ Bourbaki 1968, page
  8.\n\n↑ Ludwig Wittgenstein.\n\n↑ Vaughan Jones. See Casacuberta & Castellet 1992,
  page 91.\n\n↑ Bourbaki 1968, page 385.\n\n↑ Mathias 2002.\n\n↑ The first incompleteness
  theorem of Gödel, somewhat stronger than this conclusion, states that a consistent
  and complete theory cannot contain Robinson arithmetics.\n\n\nReferences\nBorel,
  Émile (1962), Probabilities and life, Dover publ. (translation).\nBourbaki, Nicolas
  (1968), Elements of mathematics: Theory of sets, Hermann (original), Addison-Wesley
  (translation).\nCasacuberta, C & M Castellet, eds. (1992), Mathematical research
  today and tomorrow: Viewpoints of seven Fields medalists, Lecture Notes in Mathematics,
  vol. 1525, Springer-Verlag, ISBN 3-540-56011-4.\nFeynman, Richard (1995), The character
  of physical law (twenty second printing ed.), the MIT press, ISBN 0 262 56003 8.\nGowers,
  Timothy, ed. (2008), The Princeton companion to mathematics, Princeton University
  Press, ISBN 978-0-691-11880-2.\nLawvere, F. William & Robert Rosebrugh (2003), Sets
  for mathematics, Cambridge University Press, ISBN 0-521-80444-2.\nMathias, Adrian
  (2002), \"A term of length 4,523,659,424,929\", Synthese 133 (1/2):  75–86.\n(Also
  here.)\n\n\n\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tRetrieved from \"http://en.citizendium.org/wiki?title=Theory_(mathematics)&oldid=100831737\"\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tCategories:
  CZ LiveMathematics WorkgroupArticles written in American EnglishAll ContentMathematics
  ContentHidden category: Mathematics tag\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\n\t\t\n\t\t\tNavigation
  menu\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tPersonal tools\n\t\t\t\t\t\tLog
  inRequest account\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tNamespaces\n\t\t\t\t\t\tPage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDiscussion\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tVariants\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tViews\n\t\t\t\t\t\tRead\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView
  source\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView history\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tMore\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\n\t\t\tRead\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tWelcome
  to Citizendium\n\t\t\t\t\t\t\t\t\t\t\t\t\tCitable Articles\n\t\t\t\t\t\t\t\t\t\t\t\t\tAll
  Articles\n\t\t\t\t\t\t\t\t\t\t\t\t\tRandom Page\n\t\t\t\t\t\t\t\t\t\t\t\t\tArticle
  Changes\n\t\t\t\t\t\t\t\t\t\t\t\t\tAll Recent Changes\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tDive
  In!\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tRegister\n\t\t\t\t\t\t\t\t\t\t\t\t\tQuick Start\n\t\t\t\t\t\t\t\t\t\t\t\t\tStart
  Article\n\t\t\t\t\t\t\t\t\t\t\t\t\tArticle Mechanics\n\t\t\t\t\t\t\t\t\t\t\t\t\tHow
  to edit pages\n\t\t\t\t\t\t\t\t\t\t\t\t\tGeneral Help\n\t\t\t\t\t\t\t\t\t\t\t\t\tHelp
  FAQs\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tCommunicate\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tContact\n\t\t\t\t\t\t\t\t\t\t\t\t\tGet
  Involved\n\t\t\t\t\t\t\t\t\t\t\t\t\tWorkgroups\n\t\t\t\t\t\t\t\t\t\t\t\t\tMailing
  list\n\t\t\t\t\t\t\t\t\t\t\t\t\tForum\n\t\t\t\t\t\t\t\t\t\t\t\t\tNon-member forum\n\t\t\t\t\t\t\t\t\t\t\t\t\tBlog\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tManagement\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t\t\t\t\t\t\t\tCZ
  FAQs\n\t\t\t\t\t\t\t\t\t\t\t\t\tCharter\n\t\t\t\t\t\t\t\t\t\t\t\t\tPersonnel\n\t\t\t\t\t\t\t\t\t\t\t\t\tGovernance\n\t\t\t\t\t\t\t\t\t\t\t\t\tCZ
  Council\n\t\t\t\t\t\t\t\t\t\t\t\t\tPast managerial decisions\n\t\t\t\t\t\t\t\t\t\t\t\t\tPast
  editorial decisions\n\t\t\t\t\t\t\t\t\t\t\t\t\tPast Elections\n\t\t\t\t\t\t\t\t\t\t\t\t\tConstabulary\n\t\t\t\t\t\t\t\t\t\t\t\t\tFinancial
  report\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tTools\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tWhat
  links here\n\t\t\t\t\t\t\t\t\t\t\t\t\tRelated changes\n\t\t\t\t\t\t\t\t\t\t\t\t\tUpload
  file\n\t\t\t\t\t\t\t\t\t\t\t\t\tSpecial pages\n\t\t\t\t\t\t\t\t\t\t\t\t\tPermanent
  link\n\t\t\t\t\t\t\t\t\t\t\t\t\tPage information\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t\t\t\n\t\t\n\t\t\n\t\t\t\t\t\t\t
  This page was last modified 02:32, 26 October 2013.\n\t\t\t\t\t\t\t\t\t\t\tCZ is
  free.  All written content is available under the Creative Commons-Attribution-ShareAlike
  3.0 Unported license or any later.Written content that originated in part from Wikipedia
  is also available under GNU Free Documentation License 1.2.Dedicated server hosting
  generously provided by Steadfast NetworksHelp • Financial Report • Statistics •
  Blog\nFollow Citizendium on Twitter • Facebook • Google+\n\t\t\t\t\t\t\t\t\tPrivacy
  policy\n\t\t\t\t\t\t\t\t\t\t\tAbout Citizendium\n\t\t\t\t\t\t\t\t\t\t\tDisclaimers\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\n\t\t/*<![CDATA[*/window.jQuery
  && jQuery.ready();/*]]>*/if(window.mw){\nmw.loader.state({\"site\":\"loading\",\"user\":\"ready\",\"user.groups\":\"ready\"});\n}if(window.mw){\nmw.loader.load([\"ext.treeandmenu\",\"ext.cite\",\"mediawiki.toc\",\"mediawiki.action.view.postEdit\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\"],null,true);\n}if(window.mw){\ndocument.write(\"\\u003Cscript
  src=\\\"http://en.citizendium.org/load.php?debug=false\\u0026amp;lang=en\\u0026amp;modules=site\\u0026amp;only=scripts\\u0026amp;printable=1\\u0026amp;skin=vector\\u0026amp;*\\\"\\u003E\\u003C/script\\u003E\");\n}if(window.mw){\nmw.config.set({\"wgBackendResponseTime\":5215});\n}Similarly
  to a living thing, mathematics is a unity within an environment, yet apart from
  it — a compartment of a larger whole, structurally distinguishable though not functionally
  completely isolated from or closed to its surroundings.[1]There are two possible
  approaches to mathematics, called by R. Feynman \"the Babylonian tradition\" and
  \"the Greek tradition\".[2] They answer differently the question, whether or not
  some mathematical facts are more fundamental than others, more consequential facts.
  The same approaches apply to any theory, mathematical or not.\nThe Babylonian (non-axiomatic)
  tradition treats a theory as a network whose nodes are facts and connections are
  derivations. If some facts are forgotten they probably can be derived from the others.\nThe
  Greek (axiomatic) tradition treats a theory as a tower of more consequential facts
  called theorems, grounded on the basis of more fundamental facts called axioms.
  If all theorems are forgotten they surely can be derived from the axioms. The axioms
  are sparse and simple, not to be forgotten.\nThe distinction between these two approaches
  is closely related to the distinction between monotonic and non-monotonic logic.
  These answer differently the question, whether or not a fact can be retracted because
  of new evidence. Monotonic logic answers in the negative, non-monotonic logic answers
  in the affirmative.\nNon-monotonic logic is used routinely in everyday life and
  research. An example: \"being a bird, this animal should fly\", but the bird may
  appear to be a penguin. Another example: \"the grass is wet, therefore it rained\",
  but the cause may appear to be a sprinkler.\nThe non-axiomatic approach is flexible.
  When needed, some old facts can be retracted, some new facts added, and some derivations
  changed accordingly. Nowadays this approach is widely used outside mathematics,
  and only marginally within mathematics (so-called informal mathematics).\nThe axiomatic
  approach is inflexible. A theorem cannot be retracted without removing (or replacing)
  at least one axiom, which usually has dramatic consequences for many other theorems.
  Nowadays this approach is widely used in mathematics.\nThe non-axiomatic approach
  is well suited when new evidence often comes from the outside. The axiomatic approach
  is well suited for a theory that advances only by extracting new consequences from
  an immutable list of axioms. It may seem that such a development must be dull. Surprisingly,
  this is an illusion. Being inflexible in some sense, an axiomatic theory can be
  very flexible in another sense, see Sect. 2.2.\nA fair coin is tossed 1000 times;
  can it happen at random that heads is obtained all the 1000 times? Emile Borel,
  a famous mathematician, answers in the negative, with an important reservation:\nWhy
  `may not be rationally demonstrable'? Why does this statement remain outside the
  list of Borel's theorems in probability theory?\nMathematical truth is sharp, not
  fuzzy. Every mathematical statement is assumed to be either true or false (even
  if no one is able to decide) rather than \"basically true\", \"true for all practical
  purposes\" etc. If n heads out of n times is an impossible event for n=1000 then
  there must exist the least such n (be it known or not). Say, 665 heads can occur,
  but 666 heads cannot. Then, assuming that 665 heads have just appeared, we see that
  the next time tails is guaranteed, which contradicts to the assumed memoryless behavior
  of the coin.\nAnother example. The number 4 can be written as a sum of units: 1+1+1+1.
  Can the number 21000 be written as a sum of units?  Mathematics answers in the affirmative.
  Indeed, if you can write, say, 2665 as a sum of units, then you can do it twice
  (connecting the two copies by the plus sign). Complaints about limited resources,
  appropriate in the real world, are inappropriate in the imaginary, highly idealized
  mathematical universe.\nFacts are formulated via notions.\nIn the non-axiomatic
  approach, notions are nodes of a network whose connections are definitions. If some
  notions are forgotten they probably can be restored from the others.\nSearching
  Google for \"define:line\" we get \"a length without breadth or thickness\". Similarly
  we find definitions for breadth, thickness and so on, recursively. Doing so we would
  get a large subnetwork; here is its small fragment:\n(Up arrows mean: see above.)
  We observe that\nSuch system of notions is unsuitable for a mathematical theory.
  Here, circularity is disallowed, and the set of involved notions is kept reasonably
  small (whenever possible). (See also Semantic primes for an attempt to disclose
  a common mathematics-like structure behind all natural languages.)\nIn the axiomatic
  approach, notions are a tower of defined notions, grounded on the basis of more
  fundamental notions called undefined primitives. If all defined notions are forgotten
  they surely can be restored from the undefined primitives. The undefined primitives
  are sparse and simple, not to be forgotten.\nCuriously, when a non-mathematical
  encyclopedia contains an article on a mathematical notion, two very different \"definitions\"
  may appear, one general (informal), the other mathematical (formal).\nFrom now on,
  in this article, \"definition\" means a mathematical definition (unless explicitly
  stated otherwise).\nThe lack of definition of a primitive notion does not mean lack
  of any information about this notion. Axioms provide such information, to be used
  in proofs. Informal (intuitive) understanding of a primitive notion is communicated
  in a natural language. This information cannot be used in proofs, but is instrumental
  when guessing what to prove, how to prove, how to apply proved theorems and, last
  but not least, what to postulate by axioms.\nA conceptual metaphor helps to understand
  one conceptual domain in terms of another. For example, the desktop metaphor treats
  the monitor of a computer as if it is the user's desktop, which helps to a user
  not accustomed to the computer. Nowadays many are more accustomed to computers than
  to mathematics. Thus, analogies with computers may help to understand mathematics.
  Such analogies are widely used below.\nIn 1960s a computer was an electronic monster
  able to read from a punch tape simple instructions stipulated by the hardware and
  execute them quickly, thus performing a lot of boring calculations. Nowadays some
  parents complain that personal computers are too fascinating. However, without software
  a personal computer is only able to read (say, from a compact disk) and execute
  instructions stipulated by the hardware. These instructions are now as technical
  as before: simple arithmetical and logical operations, loops, conditional execution
  etc. A computer is dull, be it a monster of 1960s or a nice looking personal computer,
  unless programmers develop fascinating combinations (called programs) of these technical
  instructions.\nFor a programmer, the instruction set of a given computer is an immutable
  list. The programmer cannot add new elements to this list, nor modify existing elements.
  In this sense the instruction set is inflexible. New programs are only new combinations
  of the given elements. Does it mean that program development is dull? In no way!
  A good instruction set is universal. It means that a competent programmer feels
  pretty free to implement any well-understood algorithm provided that the time permits
  (which is usually most problematic) and the memory and the speed of the computer
  are high enough (which is usually less problematic). In this sense a good instruction
  set is very flexible.\nLikewise a mathematician working within a given theory faces
  its axioms as an immutable list. However, this list can be universal in the sense
  that a competent mathematician feels pretty free to express any clear mathematical
  idea. In this sense some axiomatic systems are very flexible.\nFor a user, the software
  of a computer is first of all a collection of applications (games, web browsers,
  media players, word processors, image editors etc.) All applications function within
  an operating system (Windows, MacOS, Linux etc.) The operating system is a universal
  infrastructure behind various specialized applications. Each application deals with
  relevant files. The operating system maintains files in general, and catalogs (directories)
  containing files and possibly other catalogs.\nLikewise, the set theory is a universal
  infrastructure behind various specialized mathematical theories (algebra, geometry,
  analysis etc.)  Each specialized mathematical theory deals with relevant objects,
  relations and sets. The sets theory deals with sets in general, possibly containing
  other sets, and reduces objects and relations to sets. Alternatively, higher-order
  logic can be used as such a universal infrastructure, more convenient for computer-assisted
  formalization of mathematics. Also category theory pretends to the throne of the
  set theory.[4]In many cases a specialized mathematical theory is a theory of mathematical
  structures of some kind, often called spaces (of this kind). For example: Euclidean
  geometry is a theory of Euclidean spaces; topology is a theory of topological spaces;
  linear algebra is a theory of linear spaces. Differential geometry investigates
  smooth manifolds. Algebra investigates groups, rings, fields etc.\nMonkeys could
  type into a computer a sequence of hardware instructions; the computer could execute
  them; but the result of such \"programming\" has almost no chance to be fascinating
  or useful. Fascinating computer games reflect human predilections. Useful programs
  reflect human needs. A computer is dull for humans unless its software reflects
  human life in one way or another.\nLikewise, a theorem is of no interest for humans
  unless it is motivated in one way or another by human life. The motivation may be
  quite indirect; many theorems \"only\" help to prove other theorems, many are appreciated
  \"only\" for their aesthetic value, etc. But some kind of motivation is necessary.
  Indiscriminate stream of logical consequences of the axioms is not publishable in
  the mathematical literature.\nNote that \"a theorem\" does not mean \"a motivated
  theorem\", \"an important theorem\" etc., not even \"an already discovered theorem\".
  All theorems are just an indiscriminate stream of logical consequences of the axioms.\nTheorems
  of a theory are, by definition, statements that follow from the given axioms according
  to the given rules (called by different authors inference rules, derivation rules,
  deduction rules, transformation rules), including the axioms themselves.\nThe gap
  between a bare hardware and a nice application is too wide for a single jump, or
  even a triple jump (hardware – operating system – programming language – application).
  Bridging the gap is a laborious task for many programmers. They compose programs
  of modules, and modules of subroutines. Each subroutine reduces a bit more useful
  task to a bit simpler tasks. Ultimately, a useful (or even fascinating) task is
  reduced to the technical instructions of the bare hardware.\nLikewise, mathematicians
  bridge the wide gap between useful notions (say, \"ellipse\" or \"normal distribution\")
  and the undefined primitives by a large and complicated system of definitions. Each
  definition reduces a bit more useful notion to a bit more primitive notions.\nMathematical
  definitions are very diverse.\nA definition may be just an abbreviation local to
  a single calculation, like this: \"denoting for convenience  by  we have...\".\nA
  single definition may embed a whole specialized mathematical theory into the universal
  set-theoretic framework, like this:\n\"A Euclidean space consists, by definition,
  of three sets, whose elements are called points, lines and planes respectively,
  and six relations, one called betweenness, three called containment and two called
  congruence, satisfying the following conditions: ...\"\nA definition may be given
  mostly for speaking more concisely, like this: \"in a triangle, the altitude of
  a vertex is, by definition, its distance to the line through the other two vertices\".\nA
  definition may introduce a new revolutionary concept, like this: \"the derivative
  of a function at a point is, by definition, the limit of the ratio...\"\nMathematics
  as a cultural process is not bound by monotonic logic. For example, it was treated
  till 1872 as intuitively evident fact that any curve on the plane has a tangent
  line everywhere except maybe a discrete set of points. However, this \"fact\" was
  refuted and retracted.\nSince then, intuition is not a valid argument in mathematical
  proofs. A mathematical theory is bound by monotonic logic. If needed, mathematics
  as a cultural process can retract an axiomatic theory as whole (rather than some
  theorems) and accept another axiomatic theory. (Moreover, in a remote perspective
  the axiomatic approach could be abandoned.)\nAn example. If  then , since . This
  simple algebraic argument can be checked by a human or even a computer. No need
  to understand the meaning of the statement; it is sufficient to know the relevant
  formal rules. The statement follows from the given rules only, rigorously, without
  explicit or implicit use of intuition. A formal proof guarantees that a theorem
  will never be retracted.\nA universal formal language conceived by Gottfried Leibniz
  near 1685,\nwas partially implemented in mathematics two centuries later, especially,
  as a formal language of set theory. In the form introduced by Bourbaki this language
  contains four logical signs, three specific signs, and letters. Its rules are considerably
  more complicated than elementary algebra.\nHowever, this formal language is never
  used by a typical mathematician. Likewise, most programmers never use the instructions
  of the computer hardware. Instead, they develop applications in appropriate programming
  languages (BASIC, Java, C++, Python etc). A statement of a programming language
  corresponds usually to many hardware instructions; the correspondence is established
  by special programs (compilers and interpreters). A programming language is geared
  to programmers, hardware instructions --- to hardware.\nThe gap between the language
  of mathematical texts (books and articles) and the formal language of the set theory
  is even wider than the gap between a programming language and hardware instructions.
  It is as wide as the gap between pseudocode and Turing machines.\nA programmer,
  when coding a program, knows that the computer does exactly what it is told to do.
  In contrast, an author or speaker, when communicating with other people, can be
  ambiguous, make small errors, and still expect to be understood. Pseudocode is a
  description of an algorithm, intended for human reading, that can be converted into
  a code by any competent programmer. A code is formal; a pseudocode is formalizable.\nLikewise,
  communication between mathematicians is made in a formalizable language.\nA mathematician,
  using a formalizable language, need not know all technical details of the underlying
  formal language. Many equivalent formal languages may be used interchangeably. Likewise,
  a single pseudocode can be used when coding in different programming languages,
  as long as these are not too far from each other.\nA mathematician, working within
  an axiomatic theory, need not remember the list of axioms in full detail. It is
  sufficient to remember a list of theorems that contains all axioms or, more generally,
  such that each axiom follows easily from these theorems. (Here, as usual, \"theorems\"
  are treated inclusively, as \"axioms and theorems\".)\nTwo lists of axioms are called
  equivalent if every axiom of each list follows from the axioms of the other list.
  Such lists of axioms may be used interchangeably, since they generate the same theorems.\nIf
  a theory states that 2+2=5, it is a paradox but not yet a contradiction. By \"paradox\"
  people may mean\netc. In contrast, a contradiction (in a mathematical theory) is,
  by definition, a pair of theorems (of the given theory) such that one is the negation
  of the other. Thus, two theorems\nare still not a contradiction. Two theorems\nare
  a contradiction.\nIf a contradiction exists in a given theory, this theory is called
  inconsistent. Otherwise, if no contradictions exist (rather than merely not found
  for now), the theory is called consistent.\nFor a mathematician, an inconsistent
  theory is completely useless. Some philosophers disagree:\nBut a mathematician insists:
  an inconsistent theory is completely useless, since all statements (in the given
  language) are theorems! The reason is, proof by contradiction.\nNo matter which
  statement X is in question, we always can prove X as follows:\nIt is tempting to
  object that the contradiction has nothing in common with the assumption and therefore
  cannot invalidate it. However, the rules of formal logic do not demand that the
  contradiction has something in common with the assumption. Some attempts to change
  these rules were made (so-called \"relevance logic\", or \"relevant logic\"), but
  with little success. It is always possible to obfuscate the proof of the contradiction,
  making it seemingly entangled with X. We have no formal criterion able to unmask
  any possible fictitious participation of X in the proof of the contradiction.\nDavid
  Hilbert aimed to find axioms sufficient for all mathematics and to prove their consistency
  from the assumption that the \"finitary arithmetic\" (a subsystem of the usual arithmetic
  of the positive integers, chosen to be philosophically uncontroversial) was consistent.
  A fatal blow was dealt by the second Gödel's incompleteness theorem. Consistency
  of a theory cannot be proved by a weaker theory, nor by the same theory. It can
  be proved by a stronger theory, which does not dispel doubts: if the given theory
  is inconsistent then the stronger theory, being all the more inconsistent, can prove
  every claim, be it true or false.\nMany mathematicians feel that specialized theories,
  being more reliable than universal theories, are like watertight compartments. If
  a contradiction will be found in the used universal theory, specialized theories
  will separate and wait for a better universal theory.\nPlane geometry (called also
  \"planar geometry\") is a part of solid geometry that restricts itself to a single
  plane (\"the plane\") treated as a geometric universe. The question \"which plane?\"
  is inappropriate, since planes do not differ in their geometric properties. Every
  two planes α, β are isomorphic, that is, there exists an isomorphism f between α
  and β. Treating α and β as sets of points one defines isomorphism as an invertible
  (one-to-one and onto) map f : α → β preserving all primitive relations. Namely:
  f maps lines into lines; the distance between f(A) and f(B) on β is equal to the
  distance between A and B on α; etc. The same is required of the inverse map .\nAxioms
  of the plane Euclidean geometry leave no freedom, they determine uniquely all geometric
  properties of the plane. More exactly: all Euclidean planes are mutually isomorphic.
  In this sense we have \"the\" Euclidean plane. In terms of Bourbaki, the plane\nEuclidean
  geometry is an univalent theory. In contrast, axioms of a linear space (called also
  vector space) leave a freedom: a linear space may be one-dimensional, two-dimensional,
  three-dimensional, four-dimensional and so on (infinite dimension is also possible).
  Linear algebra is multivalent.\nAxioms of topology leave much more freedom; every
  subset of (say) the plane is an example of a topological space, be it connected
  or not, compact or not, be it a curve, a domain, a fractal, or whatever; and all
  these are still a minority among all topological spaces. Topology is multivalent.\nAccording
  to Bourbaki, the study of multivalent theories is the most striking feature which
  distinguishes modern mathematics from classical mathematics.[11]A similar idea occurs
  in mathematical logic: a theory is called categorical if all its models are mutually
  isomorphic. However, for Bourbaki a theory is embedded into the set theory, while
  in logic a theory is standalone (embedded into the first-order logic).\nA theory
  is called complete, if every statement in its language can be proved or disproved.
  In other words: if such a statement is not a theorem then its negation is necessarily
  a theorem.\nA statement (in the language of the given theory) is called independent
  (in other words, undecidable) in this theory, if it is not a theorem, but also its
  negation is not a theorem.\nIndependent statements appear naturally in multivalent
  theories. For example, in linear algebra the statement \"three vectors cannot be
  linearly independent\" is neither provable nor disprovable, since the dimension
  of a linear space may be 2 or 3 (or anything else).\nThus, multivalent theories
  are usually incomplete.\nWhat about univalent theories? Seemingly, these should
  be complete. For example, the plane Euclidean geometry should prove all geometric
  statements that hold on the Euclidean plane, and only such statements. Similarly,
  arithmetics of natural numbers should prove all true arithmetical statements about
  natural numbers, and only these. Unexpectedly, the situation is far more complicated
  than these naive ideas, see Sect. 4.7.\nAccording to Sect. 2.4, a theorem is a logical
  consequence of the axioms. However, what about definitions? They are numerous and
  important, according to Sect. 2.5. Two possible approaches to definitions answer
  differently the question, whether they belong to the formal theory or not.\nOne
  approach treats definitions as abbreviations, used in the formalizable language
  and eliminated when translating into the formal language. Thus, the formal theory
  contains only primitive notions and axioms, not definitions.\nAccording to the other
  approach, each definition extends the formal theory. The new (extended) theory contains
  one more notion and one more axiom. Informally, the new notion is just defined,
  and the new axiom is just the definition. But formally, the new theory still contains
  only primitive notions and axioms, not definitions.\nAn example.\nDefinition: a
  prime number is a natural number having exactly two divisors. (These are 1 and the
  number itself, of course.)\nTheorem: there are infinitely many prime numbers.\nThe
  first approach (abbreviations). In the formal language, the notion \"prime\" is
  eliminated, as follows. Theorem: there are infinitely many natural numbers having
  exactly two divisors. The proof also does not involve the notion \"prime\".\nThe
  second approach (extensions). The new formal theory stipulates a new primitive notion
  \"prime\" and a new axiom: a natural number is prime if and only if it has exactly
  two divisors. This axiom is used in the proof of the theorem.\nThe integer 1 is
  a very simple example of a mathematical object that can be defined in the language
  of set theory. Its definition, treated as an abbreviation (rather than extension),
  can be translated from this formalizable language into any corresponding formal
  language, in particular, into the formal language introduced by Bourbaki. However,
  the length of the resulting formal definition is equal to 4,523,659,424,929.[12]
  It would take about 4000 gigabytes of computer memory! More complicated mathematical
  definitions are much longer. Clearly, such formalization is possible only in principle,
  similarly to the possibility of writing 21000 as a sum of units.\nThis formal language
  is so verbose because of substitution. Here is an algebraic example: substituting
  \ into  gives an expression of length 64, containing 8 occurrences of a. Further,
  substitute  and you get an expression of length 152, containing 24 occurrences of
  u. And so on.\nThere exist formal mathematical languages intended for practical
  use, for example, Mizar. These treat definitions as extensions.\nIt is impossible
  to list all theorems, since they are infinitely many. However, an endless algorithmic
  process can generate theorems, only theorems, and all theorems in the sense that
  every theorem will be generated, sooner or later. In more technical words: the set
  of all theorems is recursively enumerable. Some theories have infinitely many axioms
  generated by a finite list of so-called axiom schemata. Still, the set of all theorems
  is recursively enumerable, since the set of axioms is.\nAn open question (in a mathematical
  theory) is a statement neither proved nor disproved. It is possible (in principle,
  not necessarily in practice) to run the theorem-generating algorithm waiting for
  one of two events: either the given statement appears to be a theorem, or its negation
  does; in both cases the (formerly) open question is decided. If the theory is complete,
  this must happen sooner or later.\nA theory is called decidable if there exists
  an algorithm that, given an arbitrary statement (in the language of the theory)
  decides whether it is a theorem or not. (In more technical words: if the set of
  all theorems is recursive.)\nThe argument above shows that a complete theory is
  decidable.\nImagine a theory able to describe the whole discrete mathematics (the
  set theory?) or, at least, arbitrary algorithmic computations, in other words, formal
  machines (like computers, but with unlimited resources). Assume that the theorems
  include all true statements about these machines, and no wrong statements about
  them. Then a formal machine can use this theory as a \"crystal ball\", — for predicting
  the future of any formal machine. In particular, for deciding, whether a given machine
  will eventually halt, or will run forever (so-called halting problem). To this end
  it runs the theorem-generating algorithm until either the statement \"such machine
  eventually halts\" or its negation appears among the theorems.\nIn order to predict
  the future of a formal machine Y, a formal machine X needs the code of Y. It does
  not mean that the code of Y must be inscribed into (and therefore be shorter than)
  the code of X. Instead, X can generate the code of Y. This way, a single machine
  X can predict the future of infinitely many machines Y, and moreover, of all possible
  machines Y, generating their codes in an endless loop.\nCan X predict its own future?
  It may seem that the affirmative answer is ensured by the argument above. However,
  how can X know, which Y is identical to X? In other words, how can X know (it means,
  be able to generate) its own code?\nIt is a well-known and nontrivial fact that
  some programs, so-called quine programs, can generate their own texts. (See also
  halting problem.) It may seem to be a trick, but in fact it is a form of self-replication,
  and it uses a 4×109 years old patent of life: a cell replicates itself using its
  DNA, and also replicates the DNA itself.\nUsing the quine technique, a machine X
  can predict its own future. Is it paradoxical? Seemingly not, since X is a deterministic
  machine, it has no free will. But nevertheless it is paradoxical, since we may program
  X as follows:\nWe get a paradox, which means that the assumptions made in the beginning
  of this section cannot be satisfied. An axiomatic theory cannot be such that its
  theorems include all true statements about formal machines, and no wrong statements
  about them! This important conclusion is closely related to the famous Gödel theorem.[13]Borel,
  Émile (1962), Probabilities and life, Dover publ. (translation).\nBourbaki, Nicolas
  (1968), Elements of mathematics: Theory of sets, Hermann (original), Addison-Wesley
  (translation).\nCasacuberta, C & M Castellet, eds. (1992), Mathematical research
  today and tomorrow: Viewpoints of seven Fields medalists, Lecture Notes in Mathematics,
  vol. 1525, Springer-Verlag, ISBN 3-540-56011-4.\nFeynman, Richard (1995), The character
  of physical law (twenty second printing ed.), the MIT press, ISBN 0 262 56003 8.\nGowers,
  Timothy, ed. (2008), The Princeton companion to mathematics, Princeton University
  Press, ISBN 978-0-691-11880-2.\nLawvere, F. William & Robert Rosebrugh (2003), Sets
  for mathematics, Cambridge University Press, ISBN 0-521-80444-2.\nMathias, Adrian
  (2002), \"A term of length 4,523,659,424,929\", Synthese 133 (1/2):  75–86.\n(Also
  here.)\n"
