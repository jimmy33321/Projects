--- !ruby/object:WebPage
page: !ruby/object:Nokogiri::HTML::Document
  decorators: 
  node_cache:
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  errors:
  - !ruby/exception:Nokogiri::XML::SyntaxError
    message: |
      ID CITEREFLavington1998 already defined
    domain: 23
    code: 513
    level: 2
    file: "/tmp/open-uri20151214-21537-dws9jm"
    line: 903
    str1: CITEREFLavington1998
    str2: CITEREFLavington1998
    str3: 
    int1: 0
    column: 58
  - !ruby/exception:Nokogiri::XML::SyntaxError
    message: |
      ID AIKEN already defined
    domain: 23
    code: 513
    level: 2
    file: "/tmp/open-uri20151214-21537-dws9jm"
    line: 914
    str1: AIKEN
    str2: AIKEN
    str3: 
    int1: 0
    column: 43
address: https://en.wikipedia.org/wiki/Computer
inboundLinks: []
lines:
- |2+

- "\t\t\n"
- "\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- |2+

- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\n"
- |2+

- |2+

- "\t\t\tComputer\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tFrom Wikipedia, the free encyclopedia\n"
- "\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\tJump to:\t\t\t\t\tnavigation, \t\t\t\t\tsearch\n"
- "\t\t\t\t\n"
- "\t\t\t\t\"Computer technology\" and \"Computer system\" redirect here. For the
  company, see Computer Technology Limited. For other uses, see Computer (disambiguation)
  and Computer system (disambiguation).\n"
- |
  Computer
- |2+

- |2+

- |2+

- |
  A computer is a general-purpose device that can be programmed to carry out a set of arithmetic or logical operations automatically. Since a sequence of operations can be readily changed, the computer can solve more than one kind of problem.
- |
  Conventionally, a computer consists of at least one processing element, typically a central processing unit (CPU), and some form of memory. The processing element carries out arithmetic and logic operations, and a sequencing and control unit can change the order of operations in response to stored information. Peripheral devices allow information to be retrieved from an external source, and the result of operations saved and retrieved.
- |
  Mechanical analog computers started appearing in the first century and were later used in the medieval era for astronomical calculations. In World War II, mechanical analog computers were used for specialized military applications such as calculating torpedo aiming. During this time the first electronic digital computers were developed. Originally they were the size of a large room, consuming as much power as several hundred modern personal computers (PCs).[1]
- |
  Modern computers based on integrated circuits are millions to billions of times more capable than the early machines, and occupy a fraction of the space.[2] Computers are small enough to fit into mobile devices, and mobile computers can be powered by small batteries. Personal computers in their various forms are icons of the Information Age and are generally considered as "computers". However, the embedded computers found in many devices from MP3 players to fighter aircraft and from electronic toys to industrial robots are the most numerous.
- |2+

- |2+

- |2+

- |
  Contents
- |2+

- |
  1 Etymology
- |
  2 History
- |
  2.1 Pre-twentieth century
- |
  2.2 First general-purpose computing device
- |
  2.3 Later analog computers
- |
  2.4 Digital computer development
- |
  2.4.1 Electromechanical
- |
  2.4.2 Vacuum tubes and digital electronic circuits
- |
  2.4.3 Stored programs
- |
  2.4.4 Transistors
- |
  2.4.5 Integrated circuits
- |2+

- |
  2.5 Mobile computers become dominant
- |2+

- |
  3 Programs
- |
  3.1 Stored program architecture
- |
  3.2 Machine code
- |
  3.3 Programming language
- |
  3.3.1 Low-level languages
- |
  3.3.2 High-level languages/Third Generation Language
- |2+

- |
  3.4 Fourth Generation Languages
- |
  3.5 Program design
- |
  3.6 Bugs
- |2+

- |
  4 Components
- |
  4.1 Control unit
- |
  4.2 Central Processing unit (CPU)
- |
  4.3 Arithmetic logic unit (ALU)
- |
  4.4 Memory
- |
  4.5 Input/output (I/O)
- |
  4.6 Multitasking
- |
  4.7 Multiprocessing
- |2+

- |
  5 Networking and the Internet
- |
  5.1 Computer architecture paradigms
- |2+

- |
  6 Misconceptions
- |
  6.1 Unconventional computing
- |2+

- |
  7 Future
- |
  8 Further topics
- |
  8.1 Artificial intelligence
- |2+

- |
  9 Hardware
- |
  9.1 History of computing hardware
- |
  9.2 Other hardware topics
- |2+

- |
  10 Software
- |
  11 Languages
- |
  11.1 Firmware
- |2+

- |
  12 Types of computers
- |
  12.1 Based on uses
- |
  12.2 Based on sizes
- |2+

- |
  13 Input Devices
- |
  14 Output Devices
- |
  15 Professions and organizations
- |
  16 See also
- |
  17 Notes
- |
  18 References
- |
  19 External links
- |2+

- |2+

- |
  Etymology
- |
  The first known use of the word "computer" was in 1613 in a book called The Yong Mans Gleanings by English writer Richard Braithwait: "I haue read the truest computer of Times, and the best Arithmetician that euer breathed, and he reduceth thy dayes into a short number." It referred to a person who carried out calculations, or computations. The word continued with the same meaning until the middle of the 20th century. From the end of the 19th century the word began to take on its more familiar meaning, a machine that carries out computations.[3]
- |
  History
- |
  Main article: History of computing hardware
- |
  Pre-twentieth century
- |2+

- |2+

- |2+

- |2+

- |
  The Ishango bone
- |2+

- |2+

- |
  Devices have been used to aid computation for thousands of years, mostly using one-to-one correspondence with fingers. The earliest counting device was probably a form of tally stick. Later record keeping aids throughout the Fertile Crescent included calculi (clay spheres, cones, etc.) which represented counts of items, probably livestock or grains, sealed in hollow unbaked clay containers.[4][5] The use of counting rods is one example.
- |2+

- |2+

- |2+

- |2+

- |
  Suanpan (the number represented on this abacus is 6,302,715,408)
- |2+

- |2+

- |
  The abacus was initially used for arithmetic tasks. The Roman abacus was used in Babylonia as early as 2400 BC. Since then, many other forms of reckoning boards or tables have been invented. In a medieval European counting house, a checkered cloth would be placed on a table, and markers moved around on it according to certain rules, as an aid to calculating sums of money.
- |2+

- |2+

- |2+

- |2+

- |
  The ancient Greek-designed Antikythera mechanism, dating between 150 to 100 BC, is the world's oldest analog computer.
- |2+

- |2+

- |
  The Antikythera mechanism is believed to be the earliest mechanical analog "computer", according to Derek J. de Solla Price.[6] It was designed to calculate astronomical positions. It was discovered in 1901 in the Antikythera wreck off the Greek island of Antikythera, between Kythera and Crete, and has been dated to circa 100 BC. Devices of a level of complexity comparable to that of the Antikythera mechanism would not reappear until a thousand years later.
- |
  Many mechanical aids to calculation and measurement were constructed for astronomical and navigation use. The planisphere was a star chart invented by Abū Rayhān al-Bīrūnī in the early 11th century.[7] The astrolabe was invented in the Hellenistic world in either the 1st or 2nd centuries BC and is often attributed to Hipparchus. A combination of the planisphere and dioptra, the astrolabe was effectively an analog computer capable of working out several different kinds of problems in spherical astronomy. An astrolabe incorporating a mechanical calendar computer[8][9] and gear-wheels was invented by Abi Bakr of Isfahan, Persia in 1235.[10]Abū Rayhān al-Bīrūnī invented the first mechanical geared lunisolar calendar astrolabe,[11] an early fixed-wired knowledge processing machine[12] with a gear train and gear-wheels,[13]circa 1000 AD.
- |
  The sector, a calculating instrument used for solving problems in proportion, trigonometry, multiplication and division, and for various functions, such as squares and cube roots, was developed in the late 16th century and found application in gunnery, surveying and navigation.
- |
  The planimeter was a manual instrument to calculate the area of a closed figure by tracing over it with a mechanical linkage.
- |2+

- |2+

- |2+

- |2+

- |
  A slide rule
- |2+

- |2+

- |
  The slide rule was invented around 1620–1630, shortly after the publication of the concept of the logarithm. It is a hand-operated analog computer for doing multiplication and division. As slide rule development progressed, added scales provided reciprocals, squares and square roots, cubes and cube roots, as well as transcendental functions such as logarithms and exponentials, circular and hyperbolic trigonometry and other functions. Aviation is one of the few fields where slide rules are still in widespread use, particularly for solving time–distance problems in light aircraft. To save space and for ease of reading, these are typically circular devices rather than the classic linear slide rule shape. A popular example is the E6B.
- |
  In the 1770s Pierre Jaquet-Droz, a Swiss watchmaker, built a mechanical doll (automata) that could write holding a quill pen. By switching the number and order of its internal wheels different letters, and hence different messages, could be produced. In effect, it could be mechanically "programmed" to read instructions. Along with two other complex machines, the doll is at the Musée d'Art et d'Histoire of Neuchâtel, Switzerland, and still operates.[14]
- |
  The tide-predicting machine invented by Sir William Thomson in 1872 was of great utility to navigation in shallow waters. It used a system of pulleys and wires to automatically calculate predicted tide levels for a set period at a particular location.
- |
  The differential analyser, a mechanical analog computer designed to solve differential equations by integration, used wheel-and-disc mechanisms to perform the integration. In 1876 Lord Kelvin had already discussed the possible construction of such calculators, but he had been stymied by the limited output torque of the ball-and-disk integrators.[15] In a differential analyzer, the output of one integrator drove the input of the next integrator, or a graphing output. The torque amplifier was the advance that allowed these machines to work. Starting in the 1920s, Vannevar Bush and others developed mechanical differential analyzers.
- |
  First general-purpose computing device
- |2+

- |2+

- |2+

- |2+

- |
  A portion of Babbage's Difference engine.
- |2+

- |2+

- |
  Charles Babbage, an English mechanical engineer and polymath, originated the concept of a programmable computer. Considered the "father of the computer",[16] he conceptualized and invented the first mechanical computer in the early 19th century. After working on his revolutionary difference engine, designed to aid in navigational calculations, in 1833 he realized that a much more general design, an Analytical Engine, was possible. The input of programs and data was to be provided to the machine via punched cards, a method being used at the time to direct mechanical looms such as the Jacquard loom. For output, the machine would have a printer, a curve plotter and a bell. The machine would also be able to punch numbers onto cards to be read in later. The Engine incorporated an arithmetic logic unit, control flow in the form of conditional branching and loops, and integrated memory, making it the first design for a general-purpose computer that could be described in modern terms as Turing-complete.[17][18]
- |
  The machine was about a century ahead of its time. All the parts for his machine had to be made by hand — this was a major problem for a device with thousands of parts. Eventually, the project was dissolved with the decision of the British Government to cease funding. Babbage's failure to complete the analytical engine can be chiefly attributed to difficulties not only of politics and financing, but also to his desire to develop an increasingly sophisticated computer and to move ahead faster than anyone else could follow. Nevertheless, his son, Henry Babbage, completed a simplified version of the analytical engine's computing unit (the mill) in 1888. He gave a successful demonstration of its use in computing tables in 1906.
- |
  Later analog computers
- |2+

- |2+

- |2+

- |2+

- |
  Sir William Thomson's third tide-predicting machine design, 1879–81
- |2+

- |2+

- |
  During the first half of the 20th century, many scientific computing needs were met by increasingly sophisticated analog computers, which used a direct mechanical or electrical model of the problem as a basis for computation. However, these were not programmable and generally lacked the versatility and accuracy of modern digital computers.[19]
- |
  The first modern analog computer was a tide-predicting machine, invented by Sir William Thomson in 1872. The differential analyser, a mechanical analog computer designed to solve differential equations by integration using wheel-and-disc mechanisms, was conceptualized in 1876 by James Thomson, the brother of the more famous Lord Kelvin.[15]
- |
  The art of mechanical analog computing reached its zenith with the differential analyzer, built by H. L. Hazen and Vannevar Bush at MIT starting in 1927. This built on the mechanical integrators of James Thomson and the torque amplifiers invented by H. W. Nieman. A dozen of these devices were built before their obsolescence became obvious.
- |
  By the 1950s the success of digital electronic computers had spelled the end for most analog computing machines, but analog computers remain in use in some specialized applications such as education (control systems) and aircraft (slide rule).
- |
  Digital computer development
- |
  The principle of the modern computer was first described by mathematician and pioneering computer scientist Alan Turing, who set out the idea in his seminal 1936 paper,[20]On Computable Numbers. Turing reformulated Kurt Gödel's 1931 results on the limits of proof and computation, replacing Gödel's universal arithmetic-based formal language with the formal and simple hypothetical devices that became known as Turing machines. He proved that some such machine would be capable of performing any conceivable mathematical computation if it were representable as an algorithm. He went on to prove that there was no solution to the Entscheidungsproblem by first showing that the halting problem for Turing machines is undecidable: in general, it is not possible to decide algorithmically whether a given Turing machine will ever halt.
- |
  He also introduced the notion of a 'Universal Machine' (now known as a Universal Turing machine), with the idea that such a machine could perform the tasks of any other machine, or in other words, it is provably capable of computing anything that is computable by executing a program stored on tape, allowing the machine to be programmable. Von Neumann acknowledged that the central concept of the modern computer was due to this paper.[21] Turing machines are to this day a central object of study in theory of computation. Except for the limitations imposed by their finite memory stores, modern computers are said to be Turing-complete, which is to say, they have algorithm execution capability equivalent to a universal Turing machine.
- |
  Electromechanical
- |
  By 1938 the United States Navy had developed an electromechanical analog computer small enough to use aboard a submarine. This was the Torpedo Data Computer, which used trigonometry to solve the problem of firing a torpedo at a moving target. During World War II similar devices were developed in other countries as well.
- |2+

- |2+

- |2+

- |2+

- |
  Replica of Zuse's Z3, the first fully automatic, digital (electromechanical) computer.
- |2+

- |2+

- |
  Early digital computers were electromechanical; electric switches drove mechanical relays to perform the calculation. These devices had a low operating speed and were eventually superseded by much faster all-electric computers, originally using vacuum tubes. The Z2, created by German engineer Konrad Zuse in 1939, was one of the earliest examples of an electromechanical relay computer.[22]
- |
  In 1941, Zuse followed his earlier machine up with the Z3, the world's first working electromechanical programmable, fully automatic digital computer.[23][24] The Z3 was built with 2000 relays, implementing a 22 bit word length that operated at a clock frequency of about 5–10 Hz.[25] Program code was supplied on punched film while data could be stored in 64 words of memory or supplied from the keyboard. It was quite similar to modern machines in some respects, pioneering numerous advances such as floating point numbers. Replacement of the hard-to-implement decimal system (used in Charles Babbage's earlier design) by the simpler binary system meant that Zuse's machines were easier to build and potentially more reliable, given the technologies available at that time.[26] The Z3 was Turing complete.[27][28]
- |
  Vacuum tubes and digital electronic circuits
- |
  Purely electronic circuit elements soon replaced their mechanical and electromechanical equivalents, at the same time that digital calculation replaced analog. The engineer Tommy Flowers, working at the Post Office Research Station in London in the 1930s, began to explore the possible use of electronics for the telephone exchange. Experimental equipment that he built in 1934 went into operation 5 years later, converting a portion of the telephone exchange network into an electronic data processing system, using thousands of vacuum tubes.[19] In the US, John Vincent Atanasoff and Clifford E. Berry of Iowa State University developed and tested the Atanasoff–Berry Computer (ABC) in 1942,[29] the first "automatic electronic digital computer".[30] This design was also all-electronic and used about 300 vacuum tubes, with capacitors fixed in a mechanically rotating drum for memory.[31]
- |2+

- |2+

- |2+

- |2+

- |
  Colossus was the first electronic digital programmable computing device, and was used to break German ciphers during World War II.
- |2+

- |2+

- |
  During World War II, the British at Bletchley Park achieved a number of successes at breaking encrypted German military communications. The German encryption machine, Enigma, was first attacked with the help of the electro-mechanical bombes. To crack the more sophisticated German Lorenz SZ 40/42 machine, used for high-level Army communications, Max Newman and his colleagues commissioned Flowers to build the Colossus.[31] He spent eleven months from early February 1943 designing and building the first Colossus.[32] After a functional test in December 1943, Colossus was shipped to Bletchley Park, where it was delivered on 18 January 1944[33] and attacked its first message on 5 February.[31]
- |
  Colossus was the world's first electronic digital programmable computer.[19] It used a large number of valves (vacuum tubes). It had paper-tape input and was capable of being configured to perform a variety of boolean logical operations on its data, but it was not Turing-complete. Nine Mk II Colossi were built (The Mk I was converted to a Mk II making ten machines in total). Colossus Mark I contained 1500 thermionic valves (tubes), but Mark II with 2400 valves, was both 5 times faster and simpler to operate than Mark 1, greatly speeding the decoding process.[34][35]
- |2+

- |2+

- |2+

- |2+

- |
  ENIAC was the first Turing-complete device, and performed ballistics trajectory calculations for the United States Army.
- |2+

- |2+

- |
  The US-built ENIAC[36] (Electronic Numerical Integrator and Computer) was the first electronic programmable computer built in the US. Although the ENIAC was similar to the Colossus it was much faster and more flexible. It was unambiguously a Turing-complete device and could compute any problem that would fit into its memory. Like the Colossus, a "program" on the ENIAC was defined by the states of its patch cables and switches, a far cry from the stored program electronic machines that came later. Once a program was written, it had to be mechanically set into the machine with manual resetting of plugs and switches.
- |
  It combined the high speed of electronics with the ability to be programmed for many complex problems. It could add or subtract 5000 times a second, a thousand times faster than any other machine. It also had modules to multiply, divide, and square root. High speed memory was limited to 20 words (about 80 bytes). Built under the direction of John Mauchly and J. Presper Eckert at the University of Pennsylvania, ENIAC's development and construction lasted from 1943 to full operation at the end of 1945. The machine was huge, weighing 30 tons, using 200 kilowatts of electric power and contained over 18,000 vacuum tubes, 1,500 relays, and hundreds of thousands of resistors, capacitors, and inductors.[37]
- |
  Stored programs
- |2+

- |2+

- |2+

- |2+

- |
  A section of the Manchester Small-Scale Experimental Machine, the first stored-program computer.
- |2+

- |2+

- |
  Early computing machines had fixed programs. Changing its function required the re-wiring and re-structuring of the machine.[31] With the proposal of the stored-program computer this changed. A stored-program computer includes by design an instruction set and can store in memory a set of instructions (a program) that details the computation. The theoretical basis for the stored-program computer was laid by Alan Turing in his 1936 paper. In 1945 Turing joined the National Physical Laboratory and began work on developing an electronic stored-program digital computer. His 1945 report ‘Proposed Electronic Calculator’ was the first specification for such a device. John von Neumann at the University of Pennsylvania, also circulated his First Draft of a Report on the EDVAC in 1945.[19]
- |2+

- |2+

- |2+

- |2+

- |
  Ferranti Mark 1, c. 1951.
- |2+

- |2+

- |
  The Manchester Small-Scale Experimental Machine, nicknamed Baby, was the world's first stored-program computer. It was built at the Victoria University of Manchester by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its first program on 21 June 1948.[38] It was designed as a testbed for the Williams tube the first random-access digital storage device.[39] Although the computer was considered "small and primitive" by the standards of its time, it was the first working machine to contain all of the elements essential to a modern electronic computer.[40] As soon as the SSEM had demonstrated the feasibility of its design, a project was initiated at the university to develop it into a more usable computer, the Manchester Mark 1.
- |
  The Mark 1 in turn quickly became the prototype for the Ferranti Mark 1, the world's first commercially available general-purpose computer.[41] Built by Ferranti, it was delivered to the University of Manchester in February 1951. At least seven of these later machines were delivered between 1953 and 1957, one of them to Shell labs in Amsterdam.[42] In October 1947, the directors of British catering company J. Lyons & Company decided to take an active role in promoting the commercial development of computers. The LEO I computer became operational in April 1951 [43] and ran the world's first regular routine office computer job.
- |
  Transistors
- |2+

- |2+

- |2+

- |2+

- |
  A bipolar junction transistor
- |2+

- |2+

- |
  The bipolar transistor was invented in 1947. From 1955 onwards transistors replaced vacuum tubes in computer designs, giving rise to the "second generation" of computers. Compared to vacuum tubes, transistors have many advantages: they are smaller, and require less power than vacuum tubes, so give off less heat. Silicon junction transistors were much more reliable than vacuum tubes and had longer, indefinite, service life. Transistorized computers could contain tens of thousands of binary logic circuits in a relatively compact space.
- |
  At the University of Manchester, a team under the leadership of Tom Kilburn designed and built a machine using the newly developed transistors instead of valves.[44] Their first transistorised computer and the first in the world, was operational by 1953, and a second version was completed there in April 1955. However, the machine did make use of valves to generate its 125 kHz clock waveforms and in the circuitry to read and write on its magnetic drum memory, so it was not the first completely transistorized computer. That distinction goes to the Harwell CADET of 1955,[45] built by the electronics division of the Atomic Energy Research Establishment at Harwell.[46][47]
- |
  Integrated circuits
- |
  The next great advance in computing power came with the advent of the integrated circuit. The idea of the integrated circuit was first conceived by a radar scientist working for the Royal Radar Establishment of the Ministry of Defence, Geoffrey W.A. Dummer. Dummer presented the first public description of an integrated circuit at the Symposium on Progress in Quality Electronic Components in Washington, D.C. on 7 May 1952.[48]
- |
  The first practical ICs were invented by Jack Kilby at Texas Instruments and Robert Noyce at Fairchild Semiconductor.[49] Kilby recorded his initial ideas concerning the integrated circuit in July 1958, successfully demonstrating the first working integrated example on 12 September 1958.[50] In his patent application of 6 February 1959, Kilby described his new device as "a body of semiconductor material ... wherein all the components of the electronic circuit are completely integrated".[51][52] Noyce also came up with his own idea of an integrated circuit half a year later than Kilby.[53] His chip solved many practical problems that Kilby's had not. Produced at Fairchild Semiconductor, it was made of silicon, whereas Kilby's chip was made of germanium.
- |
  This new development heralded an explosion in the commercial and personal use of computers and led to the invention of the microprocessor. While the subject of exactly which device was the first microprocessor is contentious, partly due to lack of agreement on the exact definition of the term "microprocessor", it is largely undisputed that the first single-chip microprocessor was the Intel 4004,[54] designed and realized by Ted Hoff, Federico Faggin, and Stanley Mazor at Intel.[55]
- |
  Mobile computers become dominant
- |
  With the continued miniaturization of computing resources, and advancements in portable battery life, portable computers grew in popularity in the 2000s.[56] The same developments that spurred the growth of laptop computers and other portable computers allowed manufacturers to integrate computing resources into cellular phones. These so-called smartphones and tablets run on a variety of operating systems and have become the dominant computing device on the market, with manufacturers reporting having shipped an estimated 237 million devices in 2Q 2013.[57]
- |
  Programs
- |
  The defining feature of modern computers which distinguishes them from all other machines is that they can be programmed. That is to say that some type of instructions (the program) can be given to the computer, and it will process them. Modern computers based on the von Neumann architecture often have machine code in the form of an imperative programming language.
- |
  In practical terms, a computer program may be just a few instructions or extend to many millions of instructions, as do the programs for word processors and web browsers for example. A typical modern computer can execute billions of instructions per second (gigaflops) and rarely makes a mistake over many years of operation. Large computer programs consisting of several million instructions may take teams of programmers years to write, and due to the complexity of the task almost certainly contain errors.
- |
  Stored program architecture
- |
  Main articles: Computer program and Computer programming
- |2+

- |2+

- |2+

- |2+

- |
  Replica of the Small-Scale Experimental Machine (SSEM), the world's first stored-program computer, at the Museum of Science and Industry in Manchester, England
- |2+

- |2+

- |
  This section applies to most common RAM machine-based computers.
- |
  In most cases, computer instructions are simple: add one number to another, move some data from one location to another, send a message to some external device, etc. These instructions are read from the computer's memory and are generally carried out (executed) in the order they were given. However, there are usually specialized instructions to tell the computer to jump ahead or backwards to some other place in the program and to carry on executing from there. These are called "jump" instructions (or branches). Furthermore, jump instructions may be made to happen conditionally so that different sequences of instructions may be used depending on the result of some previous calculation or some external event. Many computers directly support subroutines by providing a type of jump that "remembers" the location it jumped from and another instruction to return to the instruction following that jump instruction.
- |
  Program execution might be likened to reading a book. While a person will normally read each word and line in sequence, they may at times jump back to an earlier place in the text or skip sections that are not of interest. Similarly, a computer may sometimes go back and repeat the instructions in some section of the program over and over again until some internal condition is met. This is called the flow of control within the program and it is what allows the computer to perform tasks repeatedly without human intervention.
- |
  Comparatively, a person using a pocket calculator can perform a basic arithmetic operation such as adding two numbers with just a few button presses. But to add together all of the numbers from 1 to 1,000 would take thousands of button presses and a lot of time, with a near certainty of making a mistake. On the other hand, a computer may be programmed to do this with just a few simple instructions. The following example is written in the MIPS assembly language:
- |2+

- |2+

- |2+

- |2
    begin:
- |2
    addi $8, $0, 0           # initialize sum to 0
- |2
    addi $9, $0, 1           # set first number to add = 1
- |2
    loop:
- |2
    slti $10, $9, 1000       # check if the number is less than 1000
- |2
    beq $10, $0, finish      # if odd number is greater than n then exit
- |2
    add $8, $8, $9           # update sum
- |2
    addi $9, $9, 1           # get next number
- |2
    j loop                   # repeat the summing process
- |2
    finish:
- |2
    add $2, $8, $0           # put sum in output register
- |2+

- |
  Once told to run this program, the computer will perform the repetitive addition task without further human intervention. It will almost never make a mistake and a modern PC can complete the task in a fraction of a second.
- |
  Machine code
- |
  In most computers, individual instructions are stored as machine code with each instruction being given a unique number (its operation code or opcode for short). The command to add two numbers together would have one opcode; the command to multiply them would have a different opcode, and so on. The simplest computers are able to perform any of a handful of different instructions; the more complex computers have several hundred to choose from, each with a unique numerical code. Since the computer's memory is able to store numbers, it can also store the instruction codes. This leads to the important fact that entire programs (which are just lists of these instructions) can be represented as lists of numbers and can themselves be manipulated inside the computer in the same way as numeric data. The fundamental concept of storing programs in the computer's memory alongside the data they operate on is the crux of the von Neumann, or stored program[citation needed], architecture. In some cases, a computer might store some or all of its program in memory that is kept separate from the data it operates on. This is called the Harvard architecture after the Harvard Mark I computer. Modern von Neumann computers display some traits of the Harvard architecture in their designs, such as in CPU caches.
- |
  While it is possible to write computer programs as long lists of numbers (machine language) and while this technique was used with many early computers,[58] it is extremely tedious and potentially error-prone to do so in practice, especially for complicated programs. Instead, each basic instruction can be given a short name that is indicative of its function and easy to remember – a mnemonic such as ADD, SUB, MULT or JUMP. These mnemonics are collectively known as a computer's assembly language. Converting programs written in assembly language into something the computer can actually understand (machine language) is usually done by a computer program called an assembler.
- |2+

- |2+

- |2+

- |2+

- |
  A 1970s punched card containing one line from a FORTRAN program. The card reads: "Z(1) = Y + W(1)" and is labeled "PROJ039" for identification purposes.
- |2+

- |2+

- |
  Programming language
- |
  Main article: Programming language
- |
  Programming languages provide various ways of specifying programs for computers to run. Unlike natural languages, programming languages are designed to permit no ambiguity and to be concise. They are purely written languages and are often difficult to read aloud. They are generally either translated into machine code by a compiler or an assembler before being run, or translated directly at run time by an interpreter. Sometimes programs are executed by a hybrid method of the two techniques.
- |
  Low-level languages
- |
  Main article: Low-level programming language
- |
  Machine languages and the assembly languages that represent them (collectively termed low-level programming languages) tend to be unique to a particular type of computer. For instance, an ARM architecture computer (such as may be found in a PDA or a hand-held videogame) cannot understand the machine language of an Intel Pentium or the AMD Athlon 64 computer that might be in a PC.[59]
- |
  High-level languages/Third Generation Language
- |
  Main article: High-level programming language
- |
  Though considerably easier than in machine language, writing long programs in assembly language is often difficult and is also error prone. Therefore, most practical programs are written in more abstract high-level programming languages that are able to express the needs of the programmer more conveniently (and thereby help reduce programmer error). High level languages are usually "compiled" into machine language (or sometimes into assembly language and then into machine language) using another computer program called a compiler.[60] High level languages are less related to the workings of the target computer than assembly language, and more related to the language and structure of the problem(s) to be solved by the final program. It is therefore often possible to use different compilers to translate the same high level language program into the machine language of many different types of computer. This is part of the means by which software like video games may be made available for different computer architectures such as personal computers and various video game consoles.
- |
  Fourth Generation Languages
- |
  These 4G languages are less procedural than 3G languages. The benefit of 4GL is that it provides ways to obtain information without requiring the direct help of a programmer. Example of 4GL is SQL.
- |
  Program design
- |2+

- |2+

- |2+

- |
  This section does not cite any references (sources). Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (July 2012)
- |
  Program design of small programs is relatively simple and involves the analysis of the problem, collection of inputs, using the programming constructs within languages, devising or using established procedures and algorithms, providing data for output devices and solutions to the problem as applicable. As problems become larger and more complex, features such as subprograms, modules, formal documentation, and new paradigms such as object-oriented programming are encountered. Large programs involving thousands of line of code and more require formal software methodologies. The task of developing large software systems presents a significant intellectual challenge. Producing software with an acceptably high reliability within a predictable schedule and budget has historically been difficult; the academic and professional discipline of software engineering concentrates specifically on this challenge.
- |
  Bugs
- |
  Main article: Software bug
- |2+

- |2+

- |2+

- |2+

- |
  The actual first computer bug, a moth found trapped on a relay of the Harvard Mark II computer
- |2+

- |2+

- |
  Errors in computer programs are called "bugs". They may be benign and not affect the usefulness of the program, or have only subtle effects. But in some cases, they may cause the program or the entire system to "hang", becoming unresponsive to input such as mouse clicks or keystrokes, to completely fail, or to crash. Otherwise benign bugs may sometimes be harnessed for malicious intent by an unscrupulous user writing an exploit, code designed to take advantage of a bug and disrupt a computer's proper execution. Bugs are usually not the fault of the computer. Since computers merely execute the instructions they are given, bugs are nearly always the result of programmer error or an oversight made in the program's design.[61]
- |
  Admiral Grace Hopper, an American computer scientist and developer of the first compiler, is credited for having first used the term "bugs" in computing after a dead moth was found shorting a relay in the Harvard Mark II computer in September 1947.[62]
- |
  Components
- |
  Main articles: Central processing unit and Microprocessor
- |2+

- |2+

- |
  Play media
- |2+

- |2+

- |
  Video demonstrating the standard components of a "slimline" computer
- |2+

- |2+

- |
  A general purpose computer has four main components: the arithmetic logic unit (ALU), the control unit, the memory, and the input and output devices (collectively termed I/O). These parts are interconnected by buses, often made of groups of wires.
- |
  Inside each of these parts are thousands to trillions of small electrical circuits which can be turned off or on by means of an electronic switch. Each circuit represents a bit (binary digit) of information so that when the circuit is on it represents a "1", and when off it represents a "0" (in positive logic representation). The circuits are arranged in logic gates so that one or more of the circuits may control the state of one or more of the other circuits.
- |
  Control unit
- |
  Main articles: CPU design and Control unit
- |2+

- |2+

- |2+

- |2+

- |
  Diagram showing how a particular MIPS architecture instruction would be decoded by the control system
- |2+

- |2+

- |
  The control unit (often called a control system or central controller) manages the computer's various components; it reads and interprets (decodes) the program instructions, transforming them into control signals that activate other parts of the computer.[63] Control systems in advanced computers may change the order of execution of some instructions to improve performance.
- |
  A key component common to all CPUs is the program counter, a special memory cell (a register) that keeps track of which location in memory the next instruction is to be read from.[64]
- |
  The control system's function is as follows—note that this is a simplified description, and some of these steps may be performed concurrently or in a different order depending on the type of CPU:
- |
  Read the code for the next instruction from the cell indicated by the program counter.
- |
  Decode the numerical code for the instruction into a set of commands or signals for each of the other systems.
- |
  Increment the program counter so it points to the next instruction.
- |
  Read whatever data the instruction requires from cells in memory (or perhaps from an input device). The location of this required data is typically stored within the instruction code.
- |
  Provide the necessary data to an ALU or register.
- |
  If the instruction requires an ALU or specialized hardware to complete, instruct the hardware to perform the requested operation.
- |
  Write the result from the ALU back to a memory location or to a register or perhaps an output device.
- |
  Jump back to step (1).
- |
  Since the program counter is (conceptually) just another set of memory cells, it can be changed by calculations done in the ALU. Adding 100 to the program counter would cause the next instruction to be read from a place 100 locations further down the program. Instructions that modify the program counter are often known as "jumps" and allow for loops (instructions that are repeated by the computer) and often conditional instruction execution (both examples of control flow).
- |
  The sequence of operations that the control unit goes through to process an instruction is in itself like a short computer program, and indeed, in some more complex CPU designs, there is another yet smaller computer called a microsequencer, which runs a microcode program that causes all of these events to happen.
- |
  Central Processing unit (CPU)
- |
  The control unit, ALU, and registers are collectively known as a central processing unit (CPU). Early CPUs were composed of many separate components but since the mid-1970s CPUs have typically been constructed on a single integrated circuit called a microprocessor.
- |
  Arithmetic logic unit (ALU)
- |
  Main article: Arithmetic logic unit
- |
  The ALU is capable of performing two classes of operations: arithmetic and logic.[65]
- |
  The set of arithmetic operations that a particular ALU supports may be limited to addition and subtraction, or might include multiplication, division, trigonometry functions such as sine, cosine, etc., and square roots. Some can only operate on whole numbers (integers) whilst others use floating point to represent real numbers, albeit with limited precision. However, any computer that is capable of performing just the simplest operations can be programmed to break down the more complex operations into simple steps that it can perform. Therefore, any computer can be programmed to perform any arithmetic operation—although it will take more time to do so if its ALU does not directly support the operation. An ALU may also compare numbers and return boolean truth values (true or false) depending on whether one is equal to, greater than or less than the other ("is 64 greater than 65?").
- |
  Logic operations involve Boolean logic: AND, OR, XOR, and NOT. These can be useful for creating complicated conditional statements and processing boolean logic.
- |
  Superscalar computers may contain multiple ALUs, allowing them to process several instructions simultaneously.[66]Graphics processors and computers with SIMD and MIMD features often contain ALUs that can perform arithmetic on vectors and matrices.
- |
  Memory
- |
  Main article: Computer data storage
- |2+

- |2+

- |2+

- |2+

- |
  Magnetic core memory was the computer memory of choice throughout the 1960s, until it was replaced by semiconductor memory.
- |2+

- |2+

- |
  A computer's memory can be viewed as a list of cells into which numbers can be placed or read. Each cell has a numbered "address" and can store a single number. The computer can be instructed to "put the number 123 into the cell numbered 1357" or to "add the number that is in cell 1357 to the number that is in cell 2468 and put the answer into cell 1595." The information stored in memory may represent practically anything. Letters, numbers, even computer instructions can be placed into memory with equal ease. Since the CPU does not differentiate between different types of information, it is the software's responsibility to give significance to what the memory sees as nothing but a series of numbers.
- |
  In almost all modern computers, each memory cell is set up to store binary numbers in groups of eight bits (called a byte). Each byte is able to represent 256 different numbers (2^8 = 256); either from 0 to 255 or −128 to +127. To store larger numbers, several consecutive bytes may be used (typically, two, four or eight). When negative numbers are required, they are usually stored in two's complement notation. Other arrangements are possible, but are usually not seen outside of specialized applications or historical contexts. A computer can store any kind of information in memory if it can be represented numerically. Modern computers have billions or even trillions of bytes of memory.
- |
  The CPU contains a special set of memory cells called registers that can be read and written to much more rapidly than the main memory area. There are typically between two and one hundred registers depending on the type of CPU. Registers are used for the most frequently needed data items to avoid having to access main memory every time data is needed. As data is constantly being worked on, reducing the need to access main memory (which is often slow compared to the ALU and control units) greatly increases the computer's speed.
- |
  Computer main memory comes in two principal varieties:
- |
  random-access memory or RAM
- |
  read-only memory or ROM
- |
  RAM can be read and written to anytime the CPU commands it, but ROM is preloaded with data and software that never changes, therefore the CPU can only read from it. ROM is typically used to store the computer's initial start-up instructions. In general, the contents of RAM are erased when the power to the computer is turned off, but ROM retains its data indefinitely. In a PC, the ROM contains a specialized program called the BIOS that orchestrates loading the computer's operating system from the hard disk drive into RAM whenever the computer is turned on or reset. In embedded computers, which frequently do not have disk drives, all of the required software may be stored in ROM. Software stored in ROM is often called firmware, because it is notionally more like hardware than software. Flash memory blurs the distinction between ROM and RAM, as it retains its data when turned off but is also rewritable. It is typically much slower than conventional ROM and RAM however, so its use is restricted to applications where high speed is unnecessary.[67]
- |
  In more sophisticated computers there may be one or more RAM cache memories, which are slower than registers but faster than main memory. Generally computers with this sort of cache are designed to move frequently needed data into the cache automatically, often without the need for any intervention on the programmer's part.
- |
  Input/output (I/O)
- |
  Main article: Input/output
- |2+

- |2+

- |2+

- |2+

- |
  Hard disk drives are common storage devices used with computers.
- |2+

- |2+

- |
  I/O is the means by which a computer exchanges information with the outside world.[68] Devices that provide input or output to the computer are called peripherals.[69] On a typical personal computer, peripherals include input devices like the keyboard and mouse, and output devices such as the display and printer. Hard disk drives, floppy disk drives and optical disc drives serve as both input and output devices. Computer networking is another form of I/O.
- |
  I/O devices are often complex computers in their own right, with their own CPU and memory. A graphics processing unit might contain fifty or more tiny computers that perform the calculations necessary to display 3D graphics.[citation needed] Modern desktop computers contain many smaller computers that assist the main CPU in performing I/O.
- |
  Multitasking
- |
  Main article: Computer multitasking
- |
  While a computer may be viewed as running one gigantic program stored in its main memory, in some systems it is necessary to give the appearance of running several programs simultaneously. This is achieved by multitasking i.e. having the computer switch rapidly between running each program in turn.[70]
- |
  One means by which this is done is with a special signal called an interrupt, which can periodically cause the computer to stop executing instructions where it was and do something else instead. By remembering where it was executing prior to the interrupt, the computer can return to that task later. If several programs are running "at the same time". then the interrupt generator might be causing several hundred interrupts per second, causing a program switch each time. Since modern computers typically execute instructions several orders of magnitude faster than human perception, it may appear that many programs are running at the same time even though only one is ever executing in any given instant. This method of multitasking is sometimes termed "time-sharing" since each program is allocated a "slice" of time in turn.[71]
- |
  Before the era of cheap computers, the principal use for multitasking was to allow many people to share the same computer.
- |
  Seemingly, multitasking would cause a computer that is switching between several programs to run more slowly, in direct proportion to the number of programs it is running, but most programs spend much of their time waiting for slow input/output devices to complete their tasks. If a program is waiting for the user to click on the mouse or press a key on the keyboard, then it will not take a "time slice" until the event it is waiting for has occurred. This frees up time for other programs to execute so that many programs may be run simultaneously without unacceptable speed loss.
- |
  Multiprocessing
- |
  Main article: Multiprocessing
- |2+

- |2+

- |2+

- |2+

- |
  Cray designed many supercomputers that used multiprocessing heavily.
- |2+

- |2+

- |
  Some computers are designed to distribute their work across several CPUs in a multiprocessing configuration, a technique once employed only in large and powerful machines such as supercomputers, mainframe computers and servers. Multiprocessor and multi-core (multiple CPUs on a single integrated circuit) personal and laptop computers are now widely available, and are being increasingly used in lower-end markets as a result.
- |
  Supercomputers in particular often have highly unique architectures that differ significantly from the basic stored-program architecture and from general purpose computers.[72] They often feature thousands of CPUs, customized high-speed interconnects, and specialized computing hardware. Such designs tend to be useful only for specialized tasks due to the large scale of program organization required to successfully utilize most of the available resources at once. Supercomputers usually see usage in large-scale simulation, graphics rendering, and cryptography applications, as well as with other so-called "embarrassingly parallel" tasks.
- |
  Networking and the Internet
- |
  Main articles: Computer networking and Internet
- |2+

- |2+

- |2+

- |2+

- |
  Visualization of a portion of the routes on the Internet
- |2+

- |2+

- |
  Computers have been used to coordinate information between multiple locations since the 1950s. The U.S. military's SAGE system was the first large-scale example of such a system, which led to a number of special-purpose commercial systems such as Sabre.[73]
- |
  In the 1970s, computer engineers at research institutions throughout the United States began to link their computers together using telecommunications technology. The effort was funded by ARPA (now DARPA), and the computer network that resulted was called the ARPANET.[74] The technologies that made the Arpanet possible spread and evolved.
- |
  In time, the network spread beyond academic and military institutions and became known as the Internet. The emergence of networking involved a redefinition of the nature and boundaries of the computer. Computer operating systems and applications were modified to include the ability to define and access the resources of other computers on the network, such as peripheral devices, stored information, and the like, as extensions of the resources of an individual computer. Initially these facilities were available primarily to people working in high-tech environments, but in the 1990s the spread of applications like e-mail and the World Wide Web, combined with the development of cheap, fast networking technologies like Ethernet and ADSL saw computer networking become almost ubiquitous. In fact, the number of computers that are networked is growing phenomenally. A very large proportion of personal computers regularly connect to the Internet to communicate and receive information. "Wireless" networking, often utilizing mobile phone networks, has meant networking is becoming increasingly ubiquitous even in mobile computing environments.
- |2+

- |
  Computer architecture paradigms
- |
  There are many types of computer architectures:
- |
  Quantum computer vs. Chemical computer
- |
  Scalar processor vs. Vector processor
- |
  Non-Uniform Memory Access (NUMA) computers
- |
  Register machine vs. Stack machine
- |
  Harvard architecture vs. von Neumann architecture
- |
  Cellular architecture
- |
  Of all these abstract machines, a quantum computer holds the most promise for revolutionizing computing.[75]
- |
  Logic gates are a common abstraction which can apply to most of the above digital or analog paradigms.
- |
  The ability to store and execute lists of instructions called programs makes computers extremely versatile, distinguishing them from calculators. The Church–Turing thesis is a mathematical statement of this versatility: any computer with a minimum capability (being Turing-complete) is, in principle, capable of performing the same tasks that any other computer can perform. Therefore, any type of computer (netbook, supercomputer, cellular automaton, etc.) is able to perform the same computational tasks, given enough time and storage capacity.
- |
  Misconceptions
- |
  Main articles: Human computer and Harvard Computers
- |2+

- |2+

- |2+

- |2+

- |
  Women as computers in NACA High Speed Flight Station "Computer Room"
- |2+

- |2+

- |
  A computer does not need to be electronic, nor even have a processor, nor RAM, nor even a hard disk. While popular usage of the word "computer" is synonymous with a personal electronic computer, the modern[76] definition of a computer is literally: "A device that computes, especially a programmable [usually] electronic machine that performs high-speed mathematical or logical operations or that assembles, stores, correlates, or otherwise processes information."[77] Any device which processes information qualifies as a computer, especially if the processing is purposeful.[citation needed]
- |
  Unconventional computing
- |
  Main article: Unconventional computing
- |
  Historically, computers evolved from mechanical computers and eventually from vacuum tubes to transistors. However, conceptually computational systems as flexible as a personal computer can be built out of almost anything. For example, a computer can be made out of billiard balls (billiard ball computer); an often quoted example.[citation needed] More realistically, modern computers are made out of transistors made of photolithographed semiconductors.
- |
  Future
- |
  There is active research to make computers out of many promising new types of technology, such as optical computers, DNA computers, neural computers, and quantum computers. Most computers are universal, and are able to calculate any computable function, and are limited only by their memory capacity and operating speed. However different designs of computers can give very different performance for particular problems; for example quantum computers can potentially break some modern encryption algorithms (by quantum factoring) very quickly.
- |
  Further topics
- |
  Glossary of computers
- |
  Artificial intelligence
- |
  A computer will solve problems in exactly the way it is programmed to, without regard to efficiency, alternative solutions, possible shortcuts, or possible errors in the code. Computer programs that learn and adapt are part of the emerging field of artificial intelligence and machine learning.
- |
  Hardware
- |
  Main articles: Computer hardware and Personal computer hardware
- |
  The term hardware covers all of those parts of a computer that are tangible objects. Circuits, displays, power supplies, cables, keyboards, printers and mice are all hardware.
- |
  History of computing hardware
- |
  Main article: History of computing hardware
- |
  First generation (mechanical/electromechanical)
- |
  Calculators
- |
  Pascal's calculator, Arithmometer, Difference engine, Quevedo's analytical machines
- |
  Programmable devices
- |
  Jacquard loom, Analytical engine, IBM ASCC/Harvard Mark I, Harvard Mark II, IBM SSEC, Z1, Z2, Z3
- |
  Second generation (vacuum tubes)
- |
  Calculators
- |
  Atanasoff–Berry Computer, IBM 604, UNIVAC 60, UNIVAC 120
- |
  Programmable devices
- |
  Colossus, ENIAC, Manchester Small-Scale Experimental Machine, EDSAC, Manchester Mark 1, Ferranti Pegasus, Ferranti Mercury, CSIRAC, EDVAC, UNIVAC I, IBM 701, IBM 702, IBM 650, Z22
- |
  Third generation (discrete transistors and SSI, MSI, LSI integrated circuits)
- |
  Mainframes
- |
  IBM 7090, IBM 7080, IBM System/360, BUNCH
- |
  Minicomputer
- |
  LINC, PDP-8, PDP-11, IBM System/32, IBM System/36
- |
  Fourth generation (VLSI integrated circuits)
- |
  Minicomputer
- |
  VAX, IBM System i
- |
  4-bit microcomputer
- |
  Intel 4004, Intel 4040
- |
  8-bit microcomputer
- |
  Intel 8008, Intel 8080, Motorola 6800, Motorola 6809, MOS Technology 6502, Zilog Z80
- |
  16-bit microcomputer
- |
  Intel 8088, Zilog Z8000, WDC 65816/65802
- |
  32-bit microcomputer
- |
  Intel 80386, Pentium, Motorola 68000, ARM
- |
  64-bit microcomputer[78]
- |
  Alpha, MIPS, PA-RISC, PowerPC, SPARC, x86-64, ARMv8-A
- |
  Embedded computer
- |
  Intel 8048, Intel 8051
- |
  Personal computer
- |
  Desktop computer, Home computer, Laptop computer, Personal digital assistant (PDA), Portable computer, Tablet PC, Wearable computer
- |
  Theoretical/experimental
- |
  Quantum computer, Chemical computer, DNA computing, Optical computer, Spintronics based computer
- |
  Other hardware topics
- |
  Peripheral device (input/output)
- |
  Input
- |
  Mouse, keyboard, joystick, image scanner, webcam, graphics tablet, microphone
- |
  Output
- |
  Monitor, printer, loudspeaker
- |
  Both
- |
  Floppy disk drive, hard disk drive, optical disc drive, teleprinter
- |
  Computer buses
- |
  Short range
- |
  RS-232, SCSI, PCI, USB
- |
  Long range (computer networking)
- |
  Ethernet, ATM, FDDI
- |
  Software
- |
  Main article: Computer software
- |
  Software refers to parts of the computer which do not have a material form, such as programs, data, protocols, etc. When software is stored in hardware that cannot easily be modified (such as BIOS ROM in an IBM PC compatible), it is sometimes called "firmware".
- |
  Operating system /System Software
- |
  Unix and BSD
- |
  UNIX System V, IBM AIX, HP-UX, Solaris (SunOS), IRIX, List of BSD operating systems
- |
  GNU/Linux
- |
  List of Linux distributions, Comparison of Linux distributions
- |
  Microsoft Windows
- |
  Windows 95, Windows 98, Windows NT, Windows 2000, Windows Me, Windows XP, Windows Vista, Windows 7, Windows 8, Windows 10
- |
  DOS
- |
  86-DOS (QDOS), IBM PC DOS, MS-DOS, DR-DOS, FreeDOS
- |
  Mac OS
- |
  Mac OS classic, Mac OS X
- |
  Embedded and real-time
- |
  List of embedded operating systems
- |
  Experimental
- |
  Amoeba, Oberon/Bluebottle, Plan 9 from Bell Labs
- |
  Library
- |
  Multimedia
- |
  DirectX, OpenGL, OpenAL, Vulkan_(API)
- |
  Programming library
- |
  C standard library, Standard Template Library
- |
  Data
- |
  Protocol
- |
  TCP/IP, Kermit, FTP, HTTP, SMTP
- |
  File format
- |
  HTML, XML, JPEG, MPEG, PNG
- |
  User interface
- |
  Graphical user interface (WIMP)
- |
  Microsoft Windows, GNOME, KDE, QNX Photon, CDE, GEM, Aqua
- |
  Text-based user interface
- |
  Command-line interface, Text user interface
- |
  Application Software
- |
  Office suite
- |
  Word processing, Desktop publishing, Presentation program, Database management system, Scheduling & Time management, Spreadsheet, Accounting software
- |
  Internet Access
- |
  Browser, E-mail client, Web server, Mail transfer agent, Instant messaging
- |
  Design and manufacturing
- |
  Computer-aided design, Computer-aided manufacturing, Plant management, Robotic manufacturing, Supply chain management
- |
  Graphics
- |
  Raster graphics editor, Vector graphics editor, 3D modeler, Animation editor, 3D computer graphics, Video editing, Image processing
- |
  Audio
- |
  Digital audio editor, Audio playback, Mixing, Audio synthesis, Computer music
- |
  Software engineering
- |
  Compiler, Assembler, Interpreter, Debugger, Text editor, Integrated development environment, Software performance analysis, Revision control, Software configuration management
- |
  Educational
- |
  Edutainment, Educational game, Serious game, Flight simulator
- |
  Games
- |
  Strategy, Arcade, Puzzle, Simulation, First-person shooter, Platform, Massively multiplayer, Interactive fiction
- |
  Misc
- |
  Artificial intelligence, Antivirus software, Malware scanner, Installer/Package management systems, File manager
- |
  Languages
- |
  There are thousands of different programming languages—some intended to be general purpose, others useful only for highly specialized applications.
- |
  Programming languages
- |
  Lists of programming languages
- |
  Timeline of programming languages, List of programming languages by category, Generational list of programming languages, List of programming languages, Non-English-based programming languages
- |
  Commonly used assembly languages
- |
  ARM, MIPS, x86
- |
  Commonly used high-level programming languages
- |
  Ada, BASIC, C, C++, C#, COBOL, Fortran, PL/1, REXX, Java, Lisp, Pascal, Object Pascal
- |
  Commonly used scripting languages
- |
  Bourne script, JavaScript, Python, Ruby, PHP, Perl
- |
  Firmware
- |
  Firmware is the technology which has the combination of both hardware and software such as BIOS chip inside a computer. This chip (hardware) is located on the motherboard and has the BIOS set up (software) stored in it.
- |
  Types of computers
- |
  Computers are typically classified based on their uses:
- |
  Based on uses
- |
  Analog computer
- |
  Digital computer
- |
  Hybrid computer
- |
  Based on sizes
- |
  Micro computer
- |
  Personal computer
- |
  Mini Computer
- |
  Mainframe computer
- |
  Super computer
- |
  Input Devices
- |
  When unprocessed data is sent to the computer with the help of input devices, the data is processed and sent to output devices. The input devices may be hand-operated or automated. The act of processing is mainly regulated by the CPU. Some examples of hand-operated input devices are:
- |
  Overlay keyboard
- |
  Trackball
- |
  Joystick
- |
  Digital camera
- |
  Microphone
- |
  Touchscreen
- |
  Digital video
- |
  Image scanner
- |
  Graphics tablet
- |
  Computer keyboard
- |
  Mouse
- |
  Output Devices
- |
  The means through which computer gives output are known as output devices. Some examples of output devices are:
- |
  Computer monitor
- |
  Printer
- |
  Projector
- |
  Sound card
- |
  PC speaker
- |
  Video card
- |
  Professions and organizations
- |
  As the use of computers has spread throughout society, there are an increasing number of careers involving computers.
- |
  Computer-related professions
- |
  Hardware-related
- |
  Electrical engineering, Electronic engineering, Computer engineering, Telecommunications engineering, Optical engineering, Nanoengineering
- |
  Software-related
- |
  Computer science, Computer engineering, Desktop publishing, Human–computer interaction, Information technology, Information systems, Computational science, Software engineering, Video game industry, Web design
- |
  The need for computers to work well together and to be able to exchange information has spawned the need for many standards organizations, clubs and societies of both a formal and informal nature.
- |
  Organizations
- |
  Standards groups
- |
  ANSI, IEC, IEEE, IETF, ISO, W3C
- |
  Professional societies
- |
  ACM, AIS, IET, IFIP, BCS
- |
  Free/open source software groups
- |
  Free Software Foundation, Mozilla Foundation, Apache Software Foundation
- |
  See also
- |2+

- |2+

- |
  Information technology portal
- |2+

- |2+

- |
  Computability theory
- |
  Computer insecurity
- |
  Computer security
- |
  List of computer term etymologies
- |
  List of fictional computers
- |
  Pulse computation
- |
  TOP500 (list of most powerful computers)
- |2+

- |
  Notes
- |2+

- |
  ^ In 1946, ENIAC required an estimated 174 kW. By comparison, a modern laptop computer may use around 30 W; nearly six thousand times less. "Approximate Desktop & Notebook Power Usage". University of Pennsylvania. Retrieved 20 June 2009. 
- |
  ^ Early computers such as Colossus and ENIAC were able to process between 5 and 100 operations per second. A modern “commodity” microprocessor (as of 2007) can process billions of operations per second, and many of these operations are more complicated and useful than early computer operations. "Intel Core2 Duo Mobile Processor: Features". Intel Corporation. Retrieved 20 June 2009. 
- |
  ^ "computer, n.". Oxford English Dictionary (2 ed.). Oxford University Press. 1989. Retrieved 10 April 2009. 
- |
  ^ According to Schmandt-Besserat 1981, these clay containers contained tokens, the total of which were the count of objects being transferred. The containers thus served as something of a bill of lading or an accounts book. In order to avoid breaking open the containers, first, clay impressions of the tokens were placed on the outside of the containers, for the count; the shapes of the impressions were abstracted into stylized marks; finally, the abstract marks were systematically used as numerals; these numerals were finally formalized as numbers. Eventually (Schmandt-Besserat estimates it took 4000 years[dead link]) the marks on the outside of the containers were all that were needed to convey the count, and the clay containers evolved into clay tablets with marks for the count.
- |
  ^ Robson, Eleanor (2008), Mathematics in Ancient Iraq, ISBN 978-0-691-09182-2 . p.5: calculi were in use in Iraq for primitive accounting systems as early as 3200–3000 BCE, with commodity-specific counting representation systems. Balanced accounting was in use by 3000–2350 BCE, and a sexagesimal number system was in use 2350–2000 BCE.
- |
  ^ The Antikythera Mechanism Research Project, The Antikythera Mechanism Research Project. Retrieved 1 July 2007.
- |
  ^ G. Wiet, V. Elisseeff, P. Wolff, J. Naudu (1975). History of Mankind, Vol 3: The Great medieval Civilisations, p. 649. George Allen & Unwin Ltd, UNESCO.
- |
  ^ Fuat Sezgin "Catalogue of the Exhibition of the Institute for the History of Arabic-Islamic Science (at the Johann Wolfgang Goethe University", Frankfurt, Germany) Frankfurt Book Fair 2004, p.35 & 38.
- |
  ^ François Charette, Archaeology: High tech from Ancient Greece, Nature 444, 551-552(30 November 2006), doi:10.1038/444551a [1]
- |
  ^ Silvio A. Bedini, Francis R. Maddison (1966). "Mechanical Universe: The Astrarium of Giovanni de' Dondi", Transactions of the American Philosophical Society 56 (5), p. 1-69.
- |
  ^ D. De S. Price (1984). "A History of Calculating Machines", IEEE Micro 4 (1), p. 22-52.
- |
  ^ Tuncer Őren (2001). "Advances in Computer and Information Sciences: From Abacus to Holonic Agents", Turk J Elec Engin 9 (1), p. 63-70 [64].
- |
  ^ Donald Routledge Hill (1985). "Al-Biruni's mechanical calendar", Annals of Science 42, p. 139-163.
- |
  ^ The Writer Automaton, Switzerland
- |
  ^ a b Ray Girvan, "The revealed grace of the mechanism: computing after Babbage", Scientific Computing World, May/June 2003
- |
  ^ Halacy, Daniel Stephen (1970). Charles Babbage, Father of the Computer. Crowell-Collier Press. ISBN 0-02-741370-5. 
- |
  ^ "Babbage". Online stuff. Science Museum. 2007-01-19. Retrieved 2012-08-01. 
- |
  ^ "Let's build Babbage's ultimate mechanical computer". opinion. New Scientist. 23 December 2010. Retrieved 2012-08-01. 
- |
  ^ a b c d "The Modern History of Computing". Stanford Encyclopedia of Philosophy. 
- |
  ^ Proceedings of the London Mathematical Society
- |
  ^ "von Neumann ... firmly emphasized to me, and to others I am sure, that the fundamental conception is owing to Turing—insofar as not anticipated by Babbage, Lovelace and others." Letter by Stanley Frankel to Brian Randell, 1972, quoted in Jack Copeland (2004) The Essential Turing, p22.
- |
  ^ Zuse, Horst. "Part 4: Konrad Zuse's Z1 and Z3 Computers". The Life and Work of Konrad Zuse. EPE Online. Archived from the original on 2008-06-01. Retrieved 2008-06-17. 
- |
  ^ Zuse, Konrad (2010) [1984], The Computer – My Life Translated by McKenna, Patricia and Ross, J. Andrew from: Der Computer, mein Lebenswerk (1984) (in English translated from German), Berlin/Heidelberg: Springer-Verlag, ISBN 978-3-642-08151-4  CS1 maint: Unrecognized language (link)
- |
  ^ "A Computer Pioneer Rediscovered, 50 Years On". The New York Times. April 20, 1994. 
- |
  ^ Zuse, Konrad (1993). Der Computer. Mein Lebenswerk. (in German) (3rd ed.). Berlin: Springer-Verlag. p. 55. ISBN 978-3-540-56292-4. 
- |
  ^ Crash! The Story of IT: Zuse at the Wayback Machine (archived March 18, 2008)
- |
  ^ Rojas, R. (1998). "How to make Zuse's Z3 a universal computer". IEEE Annals of the History of Computing 20 (3): 51–54. doi:10.1109/85.707574. 
- |
  ^ Rojas, Raúl. "How to Make Zuse's Z3 a Universal Computer" (PDF). 
- |
  ^ January 15, 1941 notice in the Des Moines Register,
- |
  ^ Arthur W. Burks. The First Electronic Computer. 
- |
  ^ a b c d Copeland, Jack (2006), Colossus: The Secrets of Bletchley Park's Codebreaking Computers, Oxford: Oxford University Press, pp. 101–115, ISBN 0-19-284055-X 
- |
  ^ "Bletchley's code-cracking Colossus", BBC News, 2 February 2010, retrieved 19 October 2012 
- |
  ^ The Colossus Rebuild http://www.tnmoc.org/colossus-rebuild-story
- |
  ^ Randell, Brian; Fensom, Harry; Milne, Frank A. (15 March 1995), "Obituary: Allen Coombs", The Independent, retrieved 18 October 2012 
- |
  ^ Fensom, Jim (8 November 2010), Harry Fensom obituary, retrieved 17 October 2012 
- |
  ^ John Presper Eckert Jr. and John W. Mauchly, Electronic Numerical Integrator and Computer, United States Patent Office, US Patent 3,120,606, filed 26 June 1947, issued 4 February 1964, and invalidated 19 October 1973 after court ruling on Honeywell v. Sperry Rand.
- |
  ^ Generations of Computers
- |
  ^ Enticknap, Nicholas (Summer 1998), "Computing's Golden Jubilee", Resurrection (The Computer Conservation Society) (20), ISSN 0958-7403, retrieved 19 April 2008 
- |
  ^ "Early computers at Manchester University", Resurrection (The Computer Conservation Society) 1 (4), Summer 1992, ISSN 0958-7403, retrieved 7 July 2010 
- |
  ^ Early Electronic Computers (1946–51), University of Manchester, retrieved 16 November 2008 
- |
  ^ Napper, R. B. E., Introduction to the Mark 1, The University of Manchester, retrieved 4 November 2008 
- |
  ^ Computer Conservation Society, Our Computer Heritage Pilot Study: Deliveries of Ferranti Mark I and Mark I Star computers., retrieved 9 January 2010 [dead link]
- |
  ^ Lavington, Simon. "A brief history of British computers: the first 25 years (1948–1973).". British Computer Society. Retrieved 10 January 2010. 
- |
  ^ Lavington, Simon (1998), A History of Manchester Computers (2 ed.), Swindon: The British Computer Society, pp. 34–35 
- |
  ^ Cooke-Yarborough, E. H. (June 1998), "Some early transistor applications in the UK", Engineering and Science Education Journal (IEE) 7 (3): 100–106, doi:10.1049/esej:19980301, ISSN 0963-7346, retrieved 7 June 2009  (subscription required)
- |
  ^ Cooke-Yarborough, E.H. (1957). Introduction to Transistor Circuits. Edinburgh: Oliver and Boyd. p. 139. 
- |
  ^ Cooke-Yarborough, E.H. (June 1998). "Some early transistor applications in the UK". Engineering and Science Education Journal (London, UK: IEE) 7 (3): 100–106. doi:10.1049/esej:19980301. ISSN 0963-7346. Retrieved 2009-06-07. 
- |
  ^ "The Hapless Tale of Geoffrey Dummer"[dead link], (n.d.), (HTML), Electronic Product News, accessed 8 July 2008.
- |
  ^ Kilby, Jack (2000), Nobel lecture (PDF), Stockholm: Nobel Foundation, retrieved 2008-05-15 
- |
  ^ The Chip that Jack Built, (c. 2008), (HTML), Texas Instruments, Retrieved 29 May 2008.
- |
  ^ Jack S. Kilby, Miniaturized Electronic Circuits, United States Patent Office, US Patent 3,138,743, filed 6 February 1959, issued 23 June 1964.
- |
  ^ Winston, Brian (1998). Media Technology and Society: A History : From the Telegraph to the Internet. Routledge. p. 221. ISBN 978-0-415-14230-4. 
- |
  ^ Robert Noyce's Unitary circuit, US patent 2981877, "Semiconductor device-and-lead structure", issued 1961-04-25,  assigned to Fairchild Semiconductor Corporation 
- |
  ^ Intel_4004 (November 1971), Intel's First Microprocessor—the Intel 4004, Intel Corp., retrieved 2008-05-17 [dead link]
- |
  ^ The Intel 4004 (1971) die was 12 mm2, composed of 2300 transistors; by comparison, the Pentium Pro was 306 mm2, composed of 5.5 million transistors, according to Patterson, David; Hennessy, John (1998), Computer Organization and Design, San Francisco: Morgan Kaufmann, pp. 27–39, ISBN 1-55860-428-6 
- |
  ^ Global notebook shipments finally overtake desktops | Ars Technica
- |
  ^ [2][dead link]
- |
  ^ Even some later computers were commonly programmed directly in machine code. Some minicomputers like the DEC PDP-8 could be programmed directly from a panel of switches. However, this method was usually used only as part of the booting process. Most modern computers boot entirely automatically by reading a boot program from some non-volatile memory.
- |
  ^ However, there is sometimes some form of machine language compatibility between different computers. An x86-64 compatible microprocessor like the AMD Athlon 64 is able to run most of the same programs that an Intel Core 2 microprocessor can, as well as programs designed for earlier microprocessors like the Intel Pentiums and Intel 80486. This contrasts with very early commercial computers, which were often one-of-a-kind and totally incompatible with other computers.
- |
  ^ High level languages are also often interpreted rather than compiled. Interpreted languages are translated into machine code on the fly, while running, by another program called an interpreter.
- |
  ^ It is not universally true that bugs are solely due to programmer oversight. Computer hardware may fail or may itself have a fundamental problem that produces unexpected results in certain situations. For instance, the Pentium FDIV bug caused some Intel microprocessors in the early 1990s to produce inaccurate results for certain floating point division operations. This was caused by a flaw in the microprocessor design and resulted in a partial recall of the affected devices.
- |
  ^ Taylor, Alexander L., III (16 April 1984). "The Wizard Inside the Machine". TIME. Retrieved 17 February 2007.  (subscription required)
- |
  ^ The control unit's role in interpreting instructions has varied somewhat in the past. Although the control unit is solely responsible for instruction interpretation in most modern computers, this is not always the case. Some computers have instructions that are partially interpreted by the control unit with further interpretation performed by another device. For example, EDVAC, one of the earliest stored-program computers, used a central control unit that only interpreted four instructions. All of the arithmetic-related instructions were passed on to its arithmetic unit and further decoded there.
- |
  ^ Instructions often occupy more than one memory address, therefore the program counter usually increases by the number of memory locations required to store one instruction.
- |
  ^ David J. Eck (2000). The Most Complex Machine: A Survey of Computers and Computing. A K Peters, Ltd. p. 54. ISBN 978-1-56881-128-4. 
- |
  ^ Erricos John Kontoghiorghes (2006). Handbook of Parallel Computing and Statistics. CRC Press. p. 45. ISBN 978-0-8247-4067-2. 
- |
  ^ Flash memory also may only be rewritten a limited number of times before wearing out, making it less useful for heavy random access usage. (Verma & Mielke 1988)
- |
  ^ Donald Eadie (1968). Introduction to the Basic Computer. Prentice-Hall. p. 12. 
- |
  ^ Arpad Barna; Dan I. Porat (1976). Introduction to Microcomputers and the Microprocessors. Wiley. p. 85. ISBN 978-0-471-05051-3. 
- |
  ^ Jerry Peek; Grace Todino; John Strang (2002). Learning the UNIX Operating System: A Concise Guide for the New User. O'Reilly. p. 130. ISBN 978-0-596-00261-9. 
- |
  ^ Gillian M. Davis (2002). Noise Reduction in Speech Applications. CRC Press. p. 111. ISBN 978-0-8493-0949-6. 
- |
  ^ However, it is also very common to construct supercomputers out of many pieces of cheap commodity hardware; usually individual computers connected by networks. These so-called computer clusters can often provide supercomputer performance at a much lower cost than customized designs. While custom architectures are still used for most of the most powerful supercomputers, there has been a proliferation of cluster computers in recent years. (TOP500 2006)
- |
  ^ Agatha C. Hughes (2000). Systems, Experts, and Computers. MIT Press. p. 161. ISBN 978-0-262-08285-3. The experience of SAGE helped make possible the first truly large-scale commercial real-time network: the SABRE computerized airline reservations system... 
- |
  ^ "A Brief History of the Internet". Internet Society. Retrieved 20 September 2008. 
- |
  ^ "Computer architecture: fundamentals and principles of computer design" by Joseph D. Dumas 2006. page 340.
- |
  ^ According to the Shorter Oxford English Dictionary (6th ed, 2007), the word computer dates back to the mid 17th century, when it referred to “A person who makes calculations; specifically a person employed for this in an observatory etc.”
- |
  ^ "Definition of computer". Thefreedictionary.com. Retrieved 29 January 2012. 
- |
  ^ Most major 64-bit instruction set architectures are extensions of earlier designs. All of the architectures listed in this table, except for Alpha, existed in 32-bit forms before their 64-bit incarnations were introduced.
- |2+

- |
  References
- |2+

- |
  Fuegi, J. and Francis, J. "Lovelace & Babbage and the creation of the 1843 'notes'". IEEE Annals of the History of Computing 25 No. 4 (October–December 2003): Digital Object Identifier[dead link]
- |
  a Kempf, Karl (1961). "Historical Monograph: Electronic Computers Within the Ordnance Corps". Aberdeen Proving Ground (United States Army). 
- |
  a Phillips, Tony (2000). "The Antikythera Mechanism I". American Mathematical Society. Retrieved 5 April 2006. 
- |
  a Shannon, Claude Elwood (1940). "A symbolic analysis of relay and switching circuits". Massachusetts Institute of Technology. 
- |
  Digital Equipment Corporation (1972). PDP-11/40 Processor Handbook (PDF). Maynard, MA: Digital Equipment Corporation. 
- |
  Verma, G.; Mielke, N. (1988). "Reliability performance of ETOX based flash memories". IEEE International Reliability Physics Symposium. 
- |
  Doron D. Swade (February 1993). "Redeeming Charles Babbage's Mechanical Computer". Scientific American: 89. 
- |
  Meuer, Hans; Strohmaier, Erich; Simon, Horst; Dongarra, Jack (13 November 2006). "Architectures Share Over Time". TOP500. Archived from the original on 20 February 2007. Retrieved 27 November 2006. 
- |
  Lavington, Simon (1998). A History of Manchester Computers (2 ed.). Swindon: The British Computer Society. ISBN 978-0-902505-01-8. 
- |
  Stokes, Jon (2007). Inside the Machine: An Illustrated Introduction to Microprocessors and Computer Architecture. San Francisco: No Starch Press. ISBN 978-1-59327-104-6. 
- |
  Zuse, Konrad (1993). The Computer - My life. Berlin: Pringler-Verlag. ISBN 0-387-56453-5. 
- |
  Felt, Dorr E. (1916). Mechanical arithmetic, or The history of the counting machine. Chicago: Washington Institute. 
- |
  Ifrah, Georges (2001). The Universal History of Computing: From the Abacus to the Quantum Computer. New York: John Wiley & Sons. ISBN 0-471-39671-0. 
- |
  Berkeley, Edmund (1949). Giant Brains, or Machines That Think. John Wiley & Sons. 
- |
  Cohen, Bernard (2000). Howard Aiken, Portrait of a computer pioneer. Cambridge, Massachusetts: The MIT Press. ISBN 978-0-2625317-9-5. 
- |
  Ligonnière, Robert (1987). Préhistoire et Histoire des ordinateurs. Paris: Robert Laffont. ISBN 9-782221-052617. 
- |
  Couffignal, Louis (1933). Les machines à calculer ; leurs principes, leur évolution. Paris: Gauthier-Villars. 
- |
  Essinger, James (2004). Jacquard's Web, How a hand loom led to the birth of the information age. Oxford University Press. ISBN 0-19-280577-0. 
- |
  Hyman, Anthony (1985). Charles Babbage: Pioneer of the Computer. Princeton University Press. ISBN 978-0-6910237-7-9. 
- |
  Cohen, Bernard (2000). Howard Aiken, Portrait of a computer pioneer. Cambridge, Massachusetts: The MIT Press. ISBN 978-0-2625317-9-5. 
- |
  Bowden, B. V. (1953). Faster than thought. New York, Toronto, London: Pitman publishing corporation. 
- |
  Moseley, Maboth (1964). Irascible Genius, Charles Babbage, inventor. London: Hutchinson. 
- |
  Collier, Bruce (1970). The little engine that could've: The calculating machines of Charles Babbage. Garland Publishing Inc. ISBN 0-8240-0043-9. 
- |
  Randell, Brian (1982). "From Analytical Engine to Electronic Digital Computer: The Contributions of Ludgate, Torres, and Bush" (PDF). Retrieved 29 October 2013. 
- |2+

- |
  External links
- |
  Warhol & The Computer
- |
  Wikiversity has a quiz on this article
- |2+

- |
  Authority control
- |2+

- |2+

- |
  LCCN: sh85029552
- |
  GND: 4070083-5
- |
  BNF: cb119401913 (data)
- |
  NDL: 00561435
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |
  v
- |
  t
- |
  e
- |2+

- |
  Digital electronics
- |2+

- |2+

- |
  Components
- |2+

- |2+

- |
  Combinational logic
- |
  Integrated circuit (IC)
- |
  Logic gate
- |
  Sequential logic
- |2+

- |2+

- |2+

- |
  Theory
- |2+

- |2+

- |
  Digital signal (electronics)
- |
  Boolean algebra
- |
  Logic synthesis
- |
  Logic in computer science
- |
  Computer architecture
- |
  Digital signal (signal processing)
- |
  Digital signal processing
- |
  Circuit minimization
- |2+

- |2+

- |2+

- |
  Design
- |2+

- |2+

- |
  Logic synthesis
- |
  Register-transfer level
- |
  Formal equivalence checking
- |
  Synchronous logic
- |
  Asynchronous logic
- |
  Finite-state machine
- |2+

- |2+

- |2+

- |
  Applications
- |2+

- |2+

- |
  Computer hardware
- |
  Digital audio
- |
  Digital photography
- |
  Digital video
- |
  Electronic literature
- |
  Telecommunication
- |2+

- |2+

- |2+

- |
  Design issues
- |2+

- |2+

- |
  Metastability
- |
  Runt pulse
- |2+

- |2+

- |2+

- "\t\t\t\t\t\n"
- "\t\t\t\t\t\tRetrieved from \"https://en.wikipedia.org/w/index.php?title=Computer&oldid=695014391\"\t\t\t\t\t\n"
- "\t\t\t\tCategories: ComputersHidden categories: All articles with dead external
  linksArticles with dead external links from March 2015CS1 maint: Unrecognized languageCS1
  German-language sources (de)Pages containing links to subscription-only contentWikipedia
  indefinitely semi-protected pagesWikipedia indefinitely move-protected pagesArticles
  which use infobox templates with no data rowsAll articles with unsourced statementsArticles
  with unsourced statements from May 2014Articles needing additional references from
  July 2012All articles needing additional referencesArticles with unsourced statements
  from December 2007Articles with unsourced statements from September 2015Articles
  with unsourced statements from December 2012Articles with dead external links from
  October 2013Use dmy dates from April 2012Wikipedia articles with LCCN identifiersWikipedia
  articles with GND identifiersWikipedia articles with BNF identifiersArticles containing
  video clipsArticles with example code\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\n"
- "\t\t\tNavigation menu\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tPersonal tools\n"
- "\t\t\t\t\t\tNot logged inTalkContributionsCreate accountLog in\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tNamespaces\n"
- "\t\t\t\t\t\tArticle\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTalk\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\tVariants\n"
- "\t\t\t\t\t\t\n"
- |2+

- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tViews\n"
- "\t\t\t\t\t\tRead\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView source\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView history\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\tMore\n"
- |2+

- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\tSearch\n"
- "\t\t\t\t\t\t\n"
- |2+

- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\n"
- "\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\n"
- "\t\t\t\n"
- "\t\t\t\t\n"
- "\t\t\t\t\t\t\n"
- "\t\t\tNavigation\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tMain pageContentsFeatured contentCurrent eventsRandom articleDonate
  to WikipediaWikipedia store\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tInteraction\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tHelpAbout WikipediaCommunity portalRecent changesContact page\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tTools\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tWhat links hereRelated changesUpload fileSpecial pagesPermanent
  linkPage informationWikidata itemCite this page\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tPrint/export\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tCreate a bookDownload as PDFPrintable version\t\t\t\t\t\n"
- "\t\t\n"
- "\t\t\t\n"
- "\t\t\tLanguages\n"
- |2+

- "\t\t\t\n"
- "\t\t\t\t\t\t\t\t\tAcèhAfrikaansAlemannischአማርኛÆngliscالعربيةAragonésܐܪܡܝܐঅসমীয়াAsturianuAvañe'ẽAzərbaycancaتۆرکجهবাংলাBân-lâm-gúБашҡортсаБеларускаяБеларуская
  (тарашкевіца)‎भोजपुरीБългарскиBoarischབོད་ཡིགBosanskiBrezhonegБуряадCatalàЧӑвашлаCebuanoČeštinaCymraegDanskDeutschDiné
  bizaadEestiΕλληνικάEmiliàn e rumagnòlЭрзяньEspañolEsperantoEuskaraفارسیFiji HindiFøroysktFrançaisFryskFurlanGaeilgeGaelgGàidhligGalego贛語ગુજરાતી客家語/Hak-kâ-ngî한국어HausaՀայերենहिन्दीHrvatskiIdoIgboIlokanoবিষ্ণুপ্রিয়া
  মণিপুরীBahasa IndonesiaInterlinguaInterlingueᐃᓄᒃᑎᑐᑦ/inuktitutIñupiakIsiXhosaIsiZuluÍslenskaItalianoעבריתBasa
  Jawaಕನ್ನಡKapampanganКъарачай-малкъарქართულიकॉशुर / کٲشُرKaszëbscziҚазақшаKernowekKiswahiliКомиKongoKreyòl
  ayisyenKurdîКыргызчаLadinoЛезгиລາວLatinaLatviešuLëtzebuergeschLietuviųLimburgsLingálaLojbanLumbaartMagyarМакедонскиMalagasyമലയാളംMaltiमराठीმარგალურიمصرىمازِرونیBahasa
  MelayuMìng-dĕ̤ng-ngṳ̄MirandésМонголမြန်မာဘာသာNāhuatlNederlandsNedersaksiesनेपालीनेपाल
  भाषा日本語NapulitanoНохчийнNorfuk / PitkernNorsk bokmålNorsk nynorskOccitanОлык марийଓଡ଼ିଆOromooOʻzbekcha/ўзбекчаਪੰਜਾਬੀپنجابیپښتوភាសាខ្មែរPiemontèisPlattdüütschPolskiΠοντιακάPortuguêsQaraqalpaqshaQırımtatarcaRomânăRuna
  SimiРусиньскыйРусскийСаха тылаसंस्कृतम्SarduScotsSeelterskSesothoShqipSicilianuසිංහලSimple
  EnglishSlovenčinaSlovenščinaСловѣньскъ / ⰔⰎⰑⰂⰡⰐⰠⰔⰍⰟŚlůnskiSoomaaligaکوردیی ناوەندیСрпски
  / srpskiSrpskohrvatski / српскохрватскиBasa SundaSuomiSvenskaTagalogதமிழ்Татарча/tatarçaతెలుగుไทยТоҷикӣTsetsêhestâheseTürkçeTürkmençeᨅᨔ
  ᨕᨘᨁᨗУкраїнськаاردوئۇيغۇرچە / UyghurcheVahcuenghVènetoTiếng ViệtVõroWalon文言West-VlamsWinarayWolof吴语ייִדישYorùbá粵語ZazakiŽemaitėška中文\t\t\t\t\tEdit
  links\t\t\t\n"
- "\t\t\n"
- "\t\t\t\t\n"
- "\t\t\n"
- "\t\t\n"
- "\t\t\t\t\t\t\t This page was last modified on 13 December 2015, at 04:46.\n"
- "\t\t\t\t\t\t\t\t\t\t\tText is available under the Creative Commons Attribution-ShareAlike
  License;\n"
- |
  additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
- "\t\t\t\t\t\t\t\t\tPrivacy policy\n"
- "\t\t\t\t\t\t\t\t\t\t\tAbout Wikipedia\n"
- "\t\t\t\t\t\t\t\t\t\t\tDisclaimers\n"
- "\t\t\t\t\t\t\t\t\t\t\tContact Wikipedia\n"
- "\t\t\t\t\t\t\t\t\t\t\tDevelopers\n"
- "\t\t\t\t\t\t\t\t\t\t\tMobile view\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\t\t\t\t\n"
- "\t\t\t\t\t\t\t\t\t\n"
- "\t\t\n"
- "\t\twindow.RLQ = window.RLQ || []; window.RLQ.push( function () {\n"
- |
  mw.loader.state({"ext.globalCssJs.site":"ready","ext.globalCssJs.user":"ready","user":"ready","user.groups":"ready"});mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.switcher","ext.gadget.featured-articles-links","mmv.bootstrap.autostart","ext.visualEditor.targetLoader","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage"]);
- |
  } );window.RLQ = window.RLQ || []; window.RLQ.push( function () {
- |
  mw.config.set({"wgBackendResponseTime":177,"wgHostname":"mw1099"}); /* @nomin */
- '} );A computer is a general-purpose device that can be programmed to carry out
  a set of arithmetic or logical operations automatically. Since a sequence of operations
  can be readily changed, the computer can solve more than one kind of problem.Conventionally,
  a computer consists of at least one processing element, typically a central processing
  unit (CPU), and some form of memory. The processing element carries out arithmetic
  and logic operations, and a sequencing and control unit can change the order of
  operations in response to stored information. Peripheral devices allow information
  to be retrieved from an external source, and the result of operations saved and
  retrieved.Mechanical analog computers started appearing in the first century and
  were later used in the medieval era for astronomical calculations. In World War
  II, mechanical analog computers were used for specialized military applications
  such as calculating torpedo aiming. During this time the first electronic digital
  computers were developed. Originally they were the size of a large room, consuming
  as much power as several hundred modern personal computers (PCs).[1]Modern computers
  based on integrated circuits are millions to billions of times more capable than
  the early machines, and occupy a fraction of the space.[2] Computers are small enough
  to fit into mobile devices, and mobile computers can be powered by small batteries.
  Personal computers in their various forms are icons of the Information Age and are
  generally considered as "computers". However, the embedded computers found in many
  devices from MP3 players to fighter aircraft and from electronic toys to industrial
  robots are the most numerous.The first known use of the word "computer" was in 1613
  in a book called The Yong Mans Gleanings by English writer Richard Braithwait: "I
  haue read the truest computer of Times, and the best Arithmetician that euer breathed,
  and he reduceth thy dayes into a short number." It referred to a person who carried
  out calculations, or computations. The word continued with the same meaning until
  the middle of the 20th century. From the end of the 19th century the word began
  to take on its more familiar meaning, a machine that carries out computations.[3]Devices
  have been used to aid computation for thousands of years, mostly using one-to-one
  correspondence with fingers. The earliest counting device was probably a form of
  tally stick. Later record keeping aids throughout the Fertile Crescent included
  calculi (clay spheres, cones, etc.) which represented counts of items, probably
  livestock or grains, sealed in hollow unbaked clay containers.[4][5] The use of
  counting rods is one example.The abacus was initially used for arithmetic tasks.
  The Roman abacus was used in Babylonia as early as 2400 BC. Since then, many other
  forms of reckoning boards or tables have been invented. In a medieval European counting
  house, a checkered cloth would be placed on a table, and markers moved around on
  it according to certain rules, as an aid to calculating sums of money.The Antikythera
  mechanism is believed to be the earliest mechanical analog "computer", according
  to Derek J. de Solla Price.[6] It was designed to calculate astronomical positions.
  It was discovered in 1901 in the Antikythera wreck off the Greek island of Antikythera,
  between Kythera and Crete, and has been dated to circa 100 BC. Devices of a level
  of complexity comparable to that of the Antikythera mechanism would not reappear
  until a thousand years later.Many mechanical aids to calculation and measurement
  were constructed for astronomical and navigation use. The planisphere was a star
  chart invented by Abū Rayhān al-Bīrūnī in the early 11th century.[7] The astrolabe
  was invented in the Hellenistic world in either the 1st or 2nd centuries BC and
  is often attributed to Hipparchus. A combination of the planisphere and dioptra,
  the astrolabe was effectively an analog computer capable of working out several
  different kinds of problems in spherical astronomy. An astrolabe incorporating a
  mechanical calendar computer[8][9] and gear-wheels was invented by Abi Bakr of Isfahan,
  Persia in 1235.[10]Abū Rayhān al-Bīrūnī invented the first mechanical geared lunisolar
  calendar astrolabe,[11] an early fixed-wired knowledge processing machine[12] with
  a gear train and gear-wheels,[13]circa 1000 AD.The sector, a calculating instrument
  used for solving problems in proportion, trigonometry, multiplication and division,
  and for various functions, such as squares and cube roots, was developed in the
  late 16th century and found application in gunnery, surveying and navigation.The
  planimeter was a manual instrument to calculate the area of a closed figure by tracing
  over it with a mechanical linkage.The slide rule was invented around 1620–1630,
  shortly after the publication of the concept of the logarithm. It is a hand-operated
  analog computer for doing multiplication and division. As slide rule development
  progressed, added scales provided reciprocals, squares and square roots, cubes and
  cube roots, as well as transcendental functions such as logarithms and exponentials,
  circular and hyperbolic trigonometry and other functions. Aviation is one of the
  few fields where slide rules are still in widespread use, particularly for solving
  time–distance problems in light aircraft. To save space and for ease of reading,
  these are typically circular devices rather than the classic linear slide rule shape.
  A popular example is the E6B.In the 1770s Pierre Jaquet-Droz, a Swiss watchmaker,
  built a mechanical doll (automata) that could write holding a quill pen. By switching
  the number and order of its internal wheels different letters, and hence different
  messages, could be produced. In effect, it could be mechanically "programmed" to
  read instructions. Along with two other complex machines, the doll is at the Musée
  d''Art et d''Histoire of Neuchâtel, Switzerland, and still operates.[14]The tide-predicting
  machine invented by Sir William Thomson in 1872 was of great utility to navigation
  in shallow waters. It used a system of pulleys and wires to automatically calculate
  predicted tide levels for a set period at a particular location.The differential
  analyser, a mechanical analog computer designed to solve differential equations
  by integration, used wheel-and-disc mechanisms to perform the integration. In 1876
  Lord Kelvin had already discussed the possible construction of such calculators,
  but he had been stymied by the limited output torque of the ball-and-disk integrators.[15]
  In a differential analyzer, the output of one integrator drove the input of the
  next integrator, or a graphing output. The torque amplifier was the advance that
  allowed these machines to work. Starting in the 1920s, Vannevar Bush and others
  developed mechanical differential analyzers.Charles Babbage, an English mechanical
  engineer and polymath, originated the concept of a programmable computer. Considered
  the "father of the computer",[16] he conceptualized and invented the first mechanical
  computer in the early 19th century. After working on his revolutionary difference
  engine, designed to aid in navigational calculations, in 1833 he realized that a
  much more general design, an Analytical Engine, was possible. The input of programs
  and data was to be provided to the machine via punched cards, a method being used
  at the time to direct mechanical looms such as the Jacquard loom. For output, the
  machine would have a printer, a curve plotter and a bell. The machine would also
  be able to punch numbers onto cards to be read in later. The Engine incorporated
  an arithmetic logic unit, control flow in the form of conditional branching and
  loops, and integrated memory, making it the first design for a general-purpose computer
  that could be described in modern terms as Turing-complete.[17][18]The machine was
  about a century ahead of its time. All the parts for his machine had to be made
  by hand — this was a major problem for a device with thousands of parts. Eventually,
  the project was dissolved with the decision of the British Government to cease funding.
  Babbage''s failure to complete the analytical engine can be chiefly attributed to
  difficulties not only of politics and financing, but also to his desire to develop
  an increasingly sophisticated computer and to move ahead faster than anyone else
  could follow. Nevertheless, his son, Henry Babbage, completed a simplified version
  of the analytical engine''s computing unit (the mill) in 1888. He gave a successful
  demonstration of its use in computing tables in 1906.During the first half of the
  20th century, many scientific computing needs were met by increasingly sophisticated
  analog computers, which used a direct mechanical or electrical model of the problem
  as a basis for computation. However, these were not programmable and generally lacked
  the versatility and accuracy of modern digital computers.[19]The first modern analog
  computer was a tide-predicting machine, invented by Sir William Thomson in 1872.
  The differential analyser, a mechanical analog computer designed to solve differential
  equations by integration using wheel-and-disc mechanisms, was conceptualized in
  1876 by James Thomson, the brother of the more famous Lord Kelvin.[15]The art of
  mechanical analog computing reached its zenith with the differential analyzer, built
  by H. L. Hazen and Vannevar Bush at MIT starting in 1927. This built on the mechanical
  integrators of James Thomson and the torque amplifiers invented by H. W. Nieman.
  A dozen of these devices were built before their obsolescence became obvious.By
  the 1950s the success of digital electronic computers had spelled the end for most
  analog computing machines, but analog computers remain in use in some specialized
  applications such as education (control systems) and aircraft (slide rule).The principle
  of the modern computer was first described by mathematician and pioneering computer
  scientist Alan Turing, who set out the idea in his seminal 1936 paper,[20]On Computable
  Numbers. Turing reformulated Kurt Gödel''s 1931 results on the limits of proof and
  computation, replacing Gödel''s universal arithmetic-based formal language with
  the formal and simple hypothetical devices that became known as Turing machines.
  He proved that some such machine would be capable of performing any conceivable
  mathematical computation if it were representable as an algorithm. He went on to
  prove that there was no solution to the Entscheidungsproblem by first showing that
  the halting problem for Turing machines is undecidable: in general, it is not possible
  to decide algorithmically whether a given Turing machine will ever halt.He also
  introduced the notion of a ''Universal Machine'' (now known as a Universal Turing
  machine), with the idea that such a machine could perform the tasks of any other
  machine, or in other words, it is provably capable of computing anything that is
  computable by executing a program stored on tape, allowing the machine to be programmable.
  Von Neumann acknowledged that the central concept of the modern computer was due
  to this paper.[21] Turing machines are to this day a central object of study in
  theory of computation. Except for the limitations imposed by their finite memory
  stores, modern computers are said to be Turing-complete, which is to say, they have
  algorithm execution capability equivalent to a universal Turing machine.By 1938
  the United States Navy had developed an electromechanical analog computer small
  enough to use aboard a submarine. This was the Torpedo Data Computer, which used
  trigonometry to solve the problem of firing a torpedo at a moving target. During
  World War II similar devices were developed in other countries as well.Early digital
  computers were electromechanical; electric switches drove mechanical relays to perform
  the calculation. These devices had a low operating speed and were eventually superseded
  by much faster all-electric computers, originally using vacuum tubes. The Z2, created
  by German engineer Konrad Zuse in 1939, was one of the earliest examples of an electromechanical
  relay computer.[22]In 1941, Zuse followed his earlier machine up with the Z3, the
  world''s first working electromechanical programmable, fully automatic digital computer.[23][24]
  The Z3 was built with 2000 relays, implementing a 22 bit word length that operated
  at a clock frequency of about 5–10 Hz.[25] Program code was supplied on punched
  film while data could be stored in 64 words of memory or supplied from the keyboard.
  It was quite similar to modern machines in some respects, pioneering numerous advances
  such as floating point numbers. Replacement of the hard-to-implement decimal system
  (used in Charles Babbage''s earlier design) by the simpler binary system meant that
  Zuse''s machines were easier to build and potentially more reliable, given the technologies
  available at that time.[26] The Z3 was Turing complete.[27][28]Purely electronic
  circuit elements soon replaced their mechanical and electromechanical equivalents,
  at the same time that digital calculation replaced analog. The engineer Tommy Flowers,
  working at the Post Office Research Station in London in the 1930s, began to explore
  the possible use of electronics for the telephone exchange. Experimental equipment
  that he built in 1934 went into operation 5 years later, converting a portion of
  the telephone exchange network into an electronic data processing system, using
  thousands of vacuum tubes.[19] In the US, John Vincent Atanasoff and Clifford E.
  Berry of Iowa State University developed and tested the Atanasoff–Berry Computer
  (ABC) in 1942,[29] the first "automatic electronic digital computer".[30] This design
  was also all-electronic and used about 300 vacuum tubes, with capacitors fixed in
  a mechanically rotating drum for memory.[31]During World War II, the British at
  Bletchley Park achieved a number of successes at breaking encrypted German military
  communications. The German encryption machine, Enigma, was first attacked with the
  help of the electro-mechanical bombes. To crack the more sophisticated German Lorenz
  SZ 40/42 machine, used for high-level Army communications, Max Newman and his colleagues
  commissioned Flowers to build the Colossus.[31] He spent eleven months from early
  February 1943 designing and building the first Colossus.[32] After a functional
  test in December 1943, Colossus was shipped to Bletchley Park, where it was delivered
  on 18 January 1944[33] and attacked its first message on 5 February.[31]Colossus
  was the world''s first electronic digital programmable computer.[19] It used a large
  number of valves (vacuum tubes). It had paper-tape input and was capable of being
  configured to perform a variety of boolean logical operations on its data, but it
  was not Turing-complete. Nine Mk II Colossi were built (The Mk I was converted to
  a Mk II making ten machines in total). Colossus Mark I contained 1500 thermionic
  valves (tubes), but Mark II with 2400 valves, was both 5 times faster and simpler
  to operate than Mark 1, greatly speeding the decoding process.[34][35]The US-built
  ENIAC[36] (Electronic Numerical Integrator and Computer) was the first electronic
  programmable computer built in the US. Although the ENIAC was similar to the Colossus
  it was much faster and more flexible. It was unambiguously a Turing-complete device
  and could compute any problem that would fit into its memory. Like the Colossus,
  a "program" on the ENIAC was defined by the states of its patch cables and switches,
  a far cry from the stored program electronic machines that came later. Once a program
  was written, it had to be mechanically set into the machine with manual resetting
  of plugs and switches.It combined the high speed of electronics with the ability
  to be programmed for many complex problems. It could add or subtract 5000 times
  a second, a thousand times faster than any other machine. It also had modules to
  multiply, divide, and square root. High speed memory was limited to 20 words (about
  80 bytes). Built under the direction of John Mauchly and J. Presper Eckert at the
  University of Pennsylvania, ENIAC''s development and construction lasted from 1943
  to full operation at the end of 1945. The machine was huge, weighing 30 tons, using
  200 kilowatts of electric power and contained over 18,000 vacuum tubes, 1,500 relays,
  and hundreds of thousands of resistors, capacitors, and inductors.[37]Early computing
  machines had fixed programs. Changing its function required the re-wiring and re-structuring
  of the machine.[31] With the proposal of the stored-program computer this changed.
  A stored-program computer includes by design an instruction set and can store in
  memory a set of instructions (a program) that details the computation. The theoretical
  basis for the stored-program computer was laid by Alan Turing in his 1936 paper.
  In 1945 Turing joined the National Physical Laboratory and began work on developing
  an electronic stored-program digital computer. His 1945 report ‘Proposed Electronic
  Calculator’ was the first specification for such a device. John von Neumann at the
  University of Pennsylvania, also circulated his First Draft of a Report on the EDVAC
  in 1945.[19]The Manchester Small-Scale Experimental Machine, nicknamed Baby, was
  the world''s first stored-program computer. It was built at the Victoria University
  of Manchester by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its
  first program on 21 June 1948.[38] It was designed as a testbed for the Williams
  tube the first random-access digital storage device.[39] Although the computer was
  considered "small and primitive" by the standards of its time, it was the first
  working machine to contain all of the elements essential to a modern electronic
  computer.[40] As soon as the SSEM had demonstrated the feasibility of its design,
  a project was initiated at the university to develop it into a more usable computer,
  the Manchester Mark 1.The Mark 1 in turn quickly became the prototype for the Ferranti
  Mark 1, the world''s first commercially available general-purpose computer.[41]
  Built by Ferranti, it was delivered to the University of Manchester in February
  1951. At least seven of these later machines were delivered between 1953 and 1957,
  one of them to Shell labs in Amsterdam.[42] In October 1947, the directors of British
  catering company J. Lyons & Company decided to take an active role in promoting
  the commercial development of computers. The LEO I computer became operational in
  April 1951 [43] and ran the world''s first regular routine office computer job.The
  bipolar transistor was invented in 1947. From 1955 onwards transistors replaced
  vacuum tubes in computer designs, giving rise to the "second generation" of computers.
  Compared to vacuum tubes, transistors have many advantages: they are smaller, and
  require less power than vacuum tubes, so give off less heat. Silicon junction transistors
  were much more reliable than vacuum tubes and had longer, indefinite, service life.
  Transistorized computers could contain tens of thousands of binary logic circuits
  in a relatively compact space.At the University of Manchester, a team under the
  leadership of Tom Kilburn designed and built a machine using the newly developed
  transistors instead of valves.[44] Their first transistorised computer and the first
  in the world, was operational by 1953, and a second version was completed there
  in April 1955. However, the machine did make use of valves to generate its 125 kHz
  clock waveforms and in the circuitry to read and write on its magnetic drum memory,
  so it was not the first completely transistorized computer. That distinction goes
  to the Harwell CADET of 1955,[45] built by the electronics division of the Atomic
  Energy Research Establishment at Harwell.[46][47]The next great advance in computing
  power came with the advent of the integrated circuit. The idea of the integrated
  circuit was first conceived by a radar scientist working for the Royal Radar Establishment
  of the Ministry of Defence, Geoffrey W.A. Dummer. Dummer presented the first public
  description of an integrated circuit at the Symposium on Progress in Quality Electronic
  Components in Washington, D.C. on 7 May 1952.[48]The first practical ICs were invented
  by Jack Kilby at Texas Instruments and Robert Noyce at Fairchild Semiconductor.[49]
  Kilby recorded his initial ideas concerning the integrated circuit in July 1958,
  successfully demonstrating the first working integrated example on 12 September
  1958.[50] In his patent application of 6 February 1959, Kilby described his new
  device as "a body of semiconductor material ... wherein all the components of the
  electronic circuit are completely integrated".[51][52] Noyce also came up with his
  own idea of an integrated circuit half a year later than Kilby.[53] His chip solved
  many practical problems that Kilby''s had not. Produced at Fairchild Semiconductor,
  it was made of silicon, whereas Kilby''s chip was made of germanium.This new development
  heralded an explosion in the commercial and personal use of computers and led to
  the invention of the microprocessor. While the subject of exactly which device was
  the first microprocessor is contentious, partly due to lack of agreement on the
  exact definition of the term "microprocessor", it is largely undisputed that the
  first single-chip microprocessor was the Intel 4004,[54] designed and realized by
  Ted Hoff, Federico Faggin, and Stanley Mazor at Intel.[55]With the continued miniaturization
  of computing resources, and advancements in portable battery life, portable computers
  grew in popularity in the 2000s.[56] The same developments that spurred the growth
  of laptop computers and other portable computers allowed manufacturers to integrate
  computing resources into cellular phones. These so-called smartphones and tablets
  run on a variety of operating systems and have become the dominant computing device
  on the market, with manufacturers reporting having shipped an estimated 237 million
  devices in 2Q 2013.[57]The defining feature of modern computers which distinguishes
  them from all other machines is that they can be programmed. That is to say that
  some type of instructions (the program) can be given to the computer, and it will
  process them. Modern computers based on the von Neumann architecture often have
  machine code in the form of an imperative programming language.In practical terms,
  a computer program may be just a few instructions or extend to many millions of
  instructions, as do the programs for word processors and web browsers for example.
  A typical modern computer can execute billions of instructions per second (gigaflops)
  and rarely makes a mistake over many years of operation. Large computer programs
  consisting of several million instructions may take teams of programmers years to
  write, and due to the complexity of the task almost certainly contain errors.This
  section applies to most common RAM machine-based computers.In most cases, computer
  instructions are simple: add one number to another, move some data from one location
  to another, send a message to some external device, etc. These instructions are
  read from the computer''s memory and are generally carried out (executed) in the
  order they were given. However, there are usually specialized instructions to tell
  the computer to jump ahead or backwards to some other place in the program and to
  carry on executing from there. These are called "jump" instructions (or branches).
  Furthermore, jump instructions may be made to happen conditionally so that different
  sequences of instructions may be used depending on the result of some previous calculation
  or some external event. Many computers directly support subroutines by providing
  a type of jump that "remembers" the location it jumped from and another instruction
  to return to the instruction following that jump instruction.Program execution might
  be likened to reading a book. While a person will normally read each word and line
  in sequence, they may at times jump back to an earlier place in the text or skip
  sections that are not of interest. Similarly, a computer may sometimes go back and
  repeat the instructions in some section of the program over and over again until
  some internal condition is met. This is called the flow of control within the program
  and it is what allows the computer to perform tasks repeatedly without human intervention.Comparatively,
  a person using a pocket calculator can perform a basic arithmetic operation such
  as adding two numbers with just a few button presses. But to add together all of
  the numbers from 1 to 1,000 would take thousands of button presses and a lot of
  time, with a near certainty of making a mistake. On the other hand, a computer may
  be programmed to do this with just a few simple instructions. The following example
  is written in the MIPS assembly language:Once told to run this program, the computer
  will perform the repetitive addition task without further human intervention. It
  will almost never make a mistake and a modern PC can complete the task in a fraction
  of a second.In most computers, individual instructions are stored as machine code
  with each instruction being given a unique number (its operation code or opcode
  for short). The command to add two numbers together would have one opcode; the command
  to multiply them would have a different opcode, and so on. The simplest computers
  are able to perform any of a handful of different instructions; the more complex
  computers have several hundred to choose from, each with a unique numerical code.
  Since the computer''s memory is able to store numbers, it can also store the instruction
  codes. This leads to the important fact that entire programs (which are just lists
  of these instructions) can be represented as lists of numbers and can themselves
  be manipulated inside the computer in the same way as numeric data. The fundamental
  concept of storing programs in the computer''s memory alongside the data they operate
  on is the crux of the von Neumann, or stored program[citation needed], architecture.
  In some cases, a computer might store some or all of its program in memory that
  is kept separate from the data it operates on. This is called the Harvard architecture
  after the Harvard Mark I computer. Modern von Neumann computers display some traits
  of the Harvard architecture in their designs, such as in CPU caches.While it is
  possible to write computer programs as long lists of numbers (machine language)
  and while this technique was used with many early computers,[58] it is extremely
  tedious and potentially error-prone to do so in practice, especially for complicated
  programs. Instead, each basic instruction can be given a short name that is indicative
  of its function and easy to remember – a mnemonic such as ADD, SUB, MULT or JUMP.
  These mnemonics are collectively known as a computer''s assembly language. Converting
  programs written in assembly language into something the computer can actually understand
  (machine language) is usually done by a computer program called an assembler.Programming
  languages provide various ways of specifying programs for computers to run. Unlike
  natural languages, programming languages are designed to permit no ambiguity and
  to be concise. They are purely written languages and are often difficult to read
  aloud. They are generally either translated into machine code by a compiler or an
  assembler before being run, or translated directly at run time by an interpreter.
  Sometimes programs are executed by a hybrid method of the two techniques.Machine
  languages and the assembly languages that represent them (collectively termed low-level
  programming languages) tend to be unique to a particular type of computer. For instance,
  an ARM architecture computer (such as may be found in a PDA or a hand-held videogame)
  cannot understand the machine language of an Intel Pentium or the AMD Athlon 64
  computer that might be in a PC.[59]Though considerably easier than in machine language,
  writing long programs in assembly language is often difficult and is also error
  prone. Therefore, most practical programs are written in more abstract high-level
  programming languages that are able to express the needs of the programmer more
  conveniently (and thereby help reduce programmer error). High level languages are
  usually "compiled" into machine language (or sometimes into assembly language and
  then into machine language) using another computer program called a compiler.[60]
  High level languages are less related to the workings of the target computer than
  assembly language, and more related to the language and structure of the problem(s)
  to be solved by the final program. It is therefore often possible to use different
  compilers to translate the same high level language program into the machine language
  of many different types of computer. This is part of the means by which software
  like video games may be made available for different computer architectures such
  as personal computers and various video game consoles.These 4G languages are less
  procedural than 3G languages. The benefit of 4GL is that it provides ways to obtain
  information without requiring the direct help of a programmer. Example of 4GL is
  SQL.Program design of small programs is relatively simple and involves the analysis
  of the problem, collection of inputs, using the programming constructs within languages,
  devising or using established procedures and algorithms, providing data for output
  devices and solutions to the problem as applicable. As problems become larger and
  more complex, features such as subprograms, modules, formal documentation, and new
  paradigms such as object-oriented programming are encountered. Large programs involving
  thousands of line of code and more require formal software methodologies. The task
  of developing large software systems presents a significant intellectual challenge.
  Producing software with an acceptably high reliability within a predictable schedule
  and budget has historically been difficult; the academic and professional discipline
  of software engineering concentrates specifically on this challenge.Errors in computer
  programs are called "bugs". They may be benign and not affect the usefulness of
  the program, or have only subtle effects. But in some cases, they may cause the
  program or the entire system to "hang", becoming unresponsive to input such as mouse
  clicks or keystrokes, to completely fail, or to crash. Otherwise benign bugs may
  sometimes be harnessed for malicious intent by an unscrupulous user writing an exploit,
  code designed to take advantage of a bug and disrupt a computer''s proper execution.
  Bugs are usually not the fault of the computer. Since computers merely execute the
  instructions they are given, bugs are nearly always the result of programmer error
  or an oversight made in the program''s design.[61]Admiral Grace Hopper, an American
  computer scientist and developer of the first compiler, is credited for having first
  used the term "bugs" in computing after a dead moth was found shorting a relay in
  the Harvard Mark II computer in September 1947.[62]A general purpose computer has
  four main components: the arithmetic logic unit (ALU), the control unit, the memory,
  and the input and output devices (collectively termed I/O). These parts are interconnected
  by buses, often made of groups of wires.Inside each of these parts are thousands
  to trillions of small electrical circuits which can be turned off or on by means
  of an electronic switch. Each circuit represents a bit (binary digit) of information
  so that when the circuit is on it represents a "1", and when off it represents a
  "0" (in positive logic representation). The circuits are arranged in logic gates
  so that one or more of the circuits may control the state of one or more of the
  other circuits.The control unit (often called a control system or central controller)
  manages the computer''s various components; it reads and interprets (decodes) the
  program instructions, transforming them into control signals that activate other
  parts of the computer.[63] Control systems in advanced computers may change the
  order of execution of some instructions to improve performance.A key component common
  to all CPUs is the program counter, a special memory cell (a register) that keeps
  track of which location in memory the next instruction is to be read from.[64]The
  control system''s function is as follows—note that this is a simplified description,
  and some of these steps may be performed concurrently or in a different order depending
  on the type of CPU:Since the program counter is (conceptually) just another set
  of memory cells, it can be changed by calculations done in the ALU. Adding 100 to
  the program counter would cause the next instruction to be read from a place 100
  locations further down the program. Instructions that modify the program counter
  are often known as "jumps" and allow for loops (instructions that are repeated by
  the computer) and often conditional instruction execution (both examples of control
  flow).The sequence of operations that the control unit goes through to process an
  instruction is in itself like a short computer program, and indeed, in some more
  complex CPU designs, there is another yet smaller computer called a microsequencer,
  which runs a microcode program that causes all of these events to happen.The control
  unit, ALU, and registers are collectively known as a central processing unit (CPU).
  Early CPUs were composed of many separate components but since the mid-1970s CPUs
  have typically been constructed on a single integrated circuit called a microprocessor.The
  ALU is capable of performing two classes of operations: arithmetic and logic.[65]The
  set of arithmetic operations that a particular ALU supports may be limited to addition
  and subtraction, or might include multiplication, division, trigonometry functions
  such as sine, cosine, etc., and square roots. Some can only operate on whole numbers
  (integers) whilst others use floating point to represent real numbers, albeit with
  limited precision. However, any computer that is capable of performing just the
  simplest operations can be programmed to break down the more complex operations
  into simple steps that it can perform. Therefore, any computer can be programmed
  to perform any arithmetic operation—although it will take more time to do so if
  its ALU does not directly support the operation. An ALU may also compare numbers
  and return boolean truth values (true or false) depending on whether one is equal
  to, greater than or less than the other ("is 64 greater than 65?").Logic operations
  involve Boolean logic: AND, OR, XOR, and NOT. These can be useful for creating complicated
  conditional statements and processing boolean logic.Superscalar computers may contain
  multiple ALUs, allowing them to process several instructions simultaneously.[66]Graphics
  processors and computers with SIMD and MIMD features often contain ALUs that can
  perform arithmetic on vectors and matrices.A computer''s memory can be viewed as
  a list of cells into which numbers can be placed or read. Each cell has a numbered
  "address" and can store a single number. The computer can be instructed to "put
  the number 123 into the cell numbered 1357" or to "add the number that is in cell
  1357 to the number that is in cell 2468 and put the answer into cell 1595." The
  information stored in memory may represent practically anything. Letters, numbers,
  even computer instructions can be placed into memory with equal ease. Since the
  CPU does not differentiate between different types of information, it is the software''s
  responsibility to give significance to what the memory sees as nothing but a series
  of numbers.In almost all modern computers, each memory cell is set up to store binary
  numbers in groups of eight bits (called a byte). Each byte is able to represent
  256 different numbers (2^8 = 256); either from 0 to 255 or −128 to +127. To store
  larger numbers, several consecutive bytes may be used (typically, two, four or eight).
  When negative numbers are required, they are usually stored in two''s complement
  notation. Other arrangements are possible, but are usually not seen outside of specialized
  applications or historical contexts. A computer can store any kind of information
  in memory if it can be represented numerically. Modern computers have billions or
  even trillions of bytes of memory.The CPU contains a special set of memory cells
  called registers that can be read and written to much more rapidly than the main
  memory area. There are typically between two and one hundred registers depending
  on the type of CPU. Registers are used for the most frequently needed data items
  to avoid having to access main memory every time data is needed. As data is constantly
  being worked on, reducing the need to access main memory (which is often slow compared
  to the ALU and control units) greatly increases the computer''s speed.Computer main
  memory comes in two principal varieties:RAM can be read and written to anytime the
  CPU commands it, but ROM is preloaded with data and software that never changes,
  therefore the CPU can only read from it. ROM is typically used to store the computer''s
  initial start-up instructions. In general, the contents of RAM are erased when the
  power to the computer is turned off, but ROM retains its data indefinitely. In a
  PC, the ROM contains a specialized program called the BIOS that orchestrates loading
  the computer''s operating system from the hard disk drive into RAM whenever the
  computer is turned on or reset. In embedded computers, which frequently do not have
  disk drives, all of the required software may be stored in ROM. Software stored
  in ROM is often called firmware, because it is notionally more like hardware than
  software. Flash memory blurs the distinction between ROM and RAM, as it retains
  its data when turned off but is also rewritable. It is typically much slower than
  conventional ROM and RAM however, so its use is restricted to applications where
  high speed is unnecessary.[67]In more sophisticated computers there may be one or
  more RAM cache memories, which are slower than registers but faster than main memory.
  Generally computers with this sort of cache are designed to move frequently needed
  data into the cache automatically, often without the need for any intervention on
  the programmer''s part.I/O is the means by which a computer exchanges information
  with the outside world.[68] Devices that provide input or output to the computer
  are called peripherals.[69] On a typical personal computer, peripherals include
  input devices like the keyboard and mouse, and output devices such as the display
  and printer. Hard disk drives, floppy disk drives and optical disc drives serve
  as both input and output devices. Computer networking is another form of I/O.I/O
  devices are often complex computers in their own right, with their own CPU and memory.
  A graphics processing unit might contain fifty or more tiny computers that perform
  the calculations necessary to display 3D graphics.[citation needed] Modern desktop
  computers contain many smaller computers that assist the main CPU in performing
  I/O.While a computer may be viewed as running one gigantic program stored in its
  main memory, in some systems it is necessary to give the appearance of running several
  programs simultaneously. This is achieved by multitasking i.e. having the computer
  switch rapidly between running each program in turn.[70]One means by which this
  is done is with a special signal called an interrupt, which can periodically cause
  the computer to stop executing instructions where it was and do something else instead.
  By remembering where it was executing prior to the interrupt, the computer can return
  to that task later. If several programs are running "at the same time". then the
  interrupt generator might be causing several hundred interrupts per second, causing
  a program switch each time. Since modern computers typically execute instructions
  several orders of magnitude faster than human perception, it may appear that many
  programs are running at the same time even though only one is ever executing in
  any given instant. This method of multitasking is sometimes termed "time-sharing"
  since each program is allocated a "slice" of time in turn.[71]Before the era of
  cheap computers, the principal use for multitasking was to allow many people to
  share the same computer.Seemingly, multitasking would cause a computer that is switching
  between several programs to run more slowly, in direct proportion to the number
  of programs it is running, but most programs spend much of their time waiting for
  slow input/output devices to complete their tasks. If a program is waiting for the
  user to click on the mouse or press a key on the keyboard, then it will not take
  a "time slice" until the event it is waiting for has occurred. This frees up time
  for other programs to execute so that many programs may be run simultaneously without
  unacceptable speed loss.Some computers are designed to distribute their work across
  several CPUs in a multiprocessing configuration, a technique once employed only
  in large and powerful machines such as supercomputers, mainframe computers and servers.
  Multiprocessor and multi-core (multiple CPUs on a single integrated circuit) personal
  and laptop computers are now widely available, and are being increasingly used in
  lower-end markets as a result.Supercomputers in particular often have highly unique
  architectures that differ significantly from the basic stored-program architecture
  and from general purpose computers.[72] They often feature thousands of CPUs, customized
  high-speed interconnects, and specialized computing hardware. Such designs tend
  to be useful only for specialized tasks due to the large scale of program organization
  required to successfully utilize most of the available resources at once. Supercomputers
  usually see usage in large-scale simulation, graphics rendering, and cryptography
  applications, as well as with other so-called "embarrassingly parallel" tasks.Computers
  have been used to coordinate information between multiple locations since the 1950s.
  The U.S. military''s SAGE system was the first large-scale example of such a system,
  which led to a number of special-purpose commercial systems such as Sabre.[73]In
  the 1970s, computer engineers at research institutions throughout the United States
  began to link their computers together using telecommunications technology. The
  effort was funded by ARPA (now DARPA), and the computer network that resulted was
  called the ARPANET.[74] The technologies that made the Arpanet possible spread and
  evolved.In time, the network spread beyond academic and military institutions and
  became known as the Internet. The emergence of networking involved a redefinition
  of the nature and boundaries of the computer. Computer operating systems and applications
  were modified to include the ability to define and access the resources of other
  computers on the network, such as peripheral devices, stored information, and the
  like, as extensions of the resources of an individual computer. Initially these
  facilities were available primarily to people working in high-tech environments,
  but in the 1990s the spread of applications like e-mail and the World Wide Web,
  combined with the development of cheap, fast networking technologies like Ethernet
  and ADSL saw computer networking become almost ubiquitous. In fact, the number of
  computers that are networked is growing phenomenally. A very large proportion of
  personal computers regularly connect to the Internet to communicate and receive
  information. "Wireless" networking, often utilizing mobile phone networks, has meant
  networking is becoming increasingly ubiquitous even in mobile computing environments.There
  are many types of computer architectures:Of all these abstract machines, a quantum
  computer holds the most promise for revolutionizing computing.[75]Logic gates are
  a common abstraction which can apply to most of the above digital or analog paradigms.The
  ability to store and execute lists of instructions called programs makes computers
  extremely versatile, distinguishing them from calculators. The Church–Turing thesis
  is a mathematical statement of this versatility: any computer with a minimum capability
  (being Turing-complete) is, in principle, capable of performing the same tasks that
  any other computer can perform. Therefore, any type of computer (netbook, supercomputer,
  cellular automaton, etc.) is able to perform the same computational tasks, given
  enough time and storage capacity.A computer does not need to be electronic, nor
  even have a processor, nor RAM, nor even a hard disk. While popular usage of the
  word "computer" is synonymous with a personal electronic computer, the modern[76]
  definition of a computer is literally: "A device that computes, especially a programmable
  [usually] electronic machine that performs high-speed mathematical or logical operations
  or that assembles, stores, correlates, or otherwise processes information."[77]
  Any device which processes information qualifies as a computer, especially if the
  processing is purposeful.[citation needed]Historically, computers evolved from mechanical
  computers and eventually from vacuum tubes to transistors. However, conceptually
  computational systems as flexible as a personal computer can be built out of almost
  anything. For example, a computer can be made out of billiard balls (billiard ball
  computer); an often quoted example.[citation needed] More realistically, modern
  computers are made out of transistors made of photolithographed semiconductors.There
  is active research to make computers out of many promising new types of technology,
  such as optical computers, DNA computers, neural computers, and quantum computers.
  Most computers are universal, and are able to calculate any computable function,
  and are limited only by their memory capacity and operating speed. However different
  designs of computers can give very different performance for particular problems;
  for example quantum computers can potentially break some modern encryption algorithms
  (by quantum factoring) very quickly.A computer will solve problems in exactly the
  way it is programmed to, without regard to efficiency, alternative solutions, possible
  shortcuts, or possible errors in the code. Computer programs that learn and adapt
  are part of the emerging field of artificial intelligence and machine learning.The
  term hardware covers all of those parts of a computer that are tangible objects.
  Circuits, displays, power supplies, cables, keyboards, printers and mice are all
  hardware.Software refers to parts of the computer which do not have a material form,
  such as programs, data, protocols, etc. When software is stored in hardware that
  cannot easily be modified (such as BIOS ROM in an IBM PC compatible), it is sometimes
  called "firmware".There are thousands of different programming languages—some intended
  to be general purpose, others useful only for highly specialized applications.Firmware
  is the technology which has the combination of both hardware and software such as
  BIOS chip inside a computer. This chip (hardware) is located on the motherboard
  and has the BIOS set up (software) stored in it.Computers are typically classified
  based on their uses:When unprocessed data is sent to the computer with the help
  of input devices, the data is processed and sent to output devices. The input devices
  may be hand-operated or automated. The act of processing is mainly regulated by
  the CPU. Some examples of hand-operated input devices are:The means through which
  computer gives output are known as output devices. Some examples of output devices
  are:As the use of computers has spread throughout society, there are an increasing
  number of careers involving computers.The need for computers to work well together
  and to be able to exchange information has spawned the need for many standards organizations,
  clubs and societies of both a formal and informal nature.Wikiversity has a quiz
  on this article'
index:
  computer: !ruby/object:Word
    word: computer
    stem: comput
    docFrequency: 368.0
    docPositions:
    - 10
    - 17
    - 18
    - 22
    - 23
    - 36
    - 66
    - 97
    - 121
    - 124
    - 125
    - 135
    - 138
    - 147
    - 148
    - 158
    - 161
    - 162
    - 163
    - 165
    - 170
    - 173
    - 174
    - 176
    - 185
    - 193
    - 200
    - 203
    - 211
    - 212
    - 221
    - 222
    - 230
    - 231
    - 233
    - 238
    - 242
    - 243
    - 244
    - 260
    - 262
    - 263
    - 276
    - 279
    - 294
    - 297
    - 298
    - 306
    - 309
    - 320
    - 331
    - 332
    - 338
    - 342
    - 347
    - 350
    - 351
    - 352
    - 353
    - 356
    - 367
    - 370
    - 371
    - 372
    - 373
    - 374
    - 387
    - 396
    - 397
    - 399
    - 400
    - 401
    - 407
    - 409
    - 411
    - 416
    - 419
    - 422
    - 428
    - 430
    - 431
    - 441
    - 462
    - 464
    - 465
    - 467
    - 476
    - 479
    - 482
    - 483
    - 520
    - 522
    - 524
    - 545
    - 549
    - 550
    - 551
    - 553
    - 554
    - 555
    - 556
    - 557
    - 559
    - 569
    - 572
    - 573
    - 581
    - 583
    - 585
    - 601
    - 602
    - 603
    - 610
    - 611
    - 612
    - 621
    - 625
    - 627
    - 632
    - 633
    - 634
    - 636
    - 637
    - 639
    - 645
    - 647
    - 648
    - 651
    - 652
    - 653
    - 664
    - 670
    - 677
    - 681
    - 684
    - 685
    - 686
    - 697
    - 699
    - 700
    - 701
    - 703
    - 705
    - 709
    - 710
    - 714
    - 717
    - 756
    - 757
    - 779
    - 797
    - 902
  wikipedia: !ruby/object:Word
    word: wikipedia
    stem: wikipedia
    docFrequency: 6.0
    docPositions:
    - 12
    - 797
    - 885
    - 887
    - 889
  free: !ruby/object:Word
    word: free
    stem: free
    docFrequency: 4.0
    docPositions:
    - 12
    - 592
    - 593
  encyclopedia: !ruby/object:Word
    word: encyclopedia
    stem: encyclopedia
    docFrequency: 3.0
    docPositions:
    - 12
    - 628
  jump: !ruby/object:Word
    word: jump
    stem: jump
    docFrequency: 17.0
    docPositions:
    - 15
    - 242
    - 243
    - 263
    - 330
    - 902
  navigation: !ruby/object:Word
    word: navigation
    stem: navig
    docFrequency: 10.0
    docPositions:
    - 15
    - 125
    - 126
    - 137
    - 802
    - 851
    - 902
  search: !ruby/object:Word
    word: search
    stem: search
    docFrequency: 3.0
    docPositions:
    - 15
    - 838
  '': !ruby/object:Word
    word: ''
    stem: ''
    docFrequency: 82.0
    docPositions:
    - 17
    - 610
    - 611
    - 612
    - 613
    - 614
    - 615
    - 616
    - 617
    - 618
    - 619
    - 620
    - 621
    - 622
    - 623
    - 624
    - 625
    - 626
    - 627
    - 628
    - 629
    - 630
    - 631
    - 632
    - 633
    - 634
    - 635
    - 636
    - 637
    - 638
    - 639
    - 640
    - 641
    - 642
    - 643
    - 644
    - 645
    - 646
    - 647
    - 648
    - 649
    - 650
    - 651
    - 652
    - 653
    - 654
    - 655
    - 656
    - 657
    - 658
    - 659
    - 660
    - 661
    - 662
    - 663
    - 664
    - 665
    - 666
    - 667
    - 668
    - 669
    - 670
    - 671
    - 672
    - 673
    - 674
    - 675
    - 676
    - 677
    - 678
    - 679
    - 680
    - 681
    - 682
    - 683
    - 684
    - 685
    - 686
    - 687
    - 900
    - 902
  technology: !ruby/object:Word
    word: technology
    stem: technolog
    docFrequency: 14.0
    docPositions:
    - 17
    - 396
    - 424
    - 455
    - 545
    - 585
    - 597
    - 661
    - 694
    - 902
  and: !ruby/object:Word
    word: and
    stem: and
    docFrequency: 485.0
    docPositions:
    - 17
    - 23
    - 24
    - 25
    - 38
    - 65
    - 89
    - 97
    - 116
    - 124
    - 125
    - 126
    - 135
    - 136
    - 137
    - 138
    - 147
    - 148
    - 157
    - 158
    - 159
    - 160
    - 162
    - 173
    - 174
    - 175
    - 176
    - 181
    - 184
    - 185
    - 190
    - 193
    - 194
    - 203
    - 211
    - 212
    - 221
    - 222
    - 225
    - 226
    - 228
    - 230
    - 231
    - 233
    - 238
    - 242
    - 243
    - 244
    - 260
    - 262
    - 263
    - 268
    - 273
    - 276
    - 279
    - 286
    - 287
    - 297
    - 298
    - 300
    - 309
    - 310
    - 312
    - 320
    - 322
    - 331
    - 332
    - 334
    - 337
    - 338
    - 339
    - 340
    - 350
    - 352
    - 356
    - 367
    - 368
    - 372
    - 384
    - 385
    - 386
    - 387
    - 396
    - 397
    - 409
    - 411
    - 422
    - 424
    - 428
    - 430
    - 431
    - 444
    - 485
    - 495
    - 519
    - 545
    - 559
    - 579
    - 586
    - 611
    - 613
    - 614
    - 621
    - 630
    - 631
    - 632
    - 645
    - 651
    - 654
    - 655
    - 656
    - 661
    - 662
    - 664
    - 668
    - 670
    - 672
    - 674
    - 675
    - 678
    - 682
    - 684
    - 691
    - 694
    - 700
    - 714
    - 885
    - 902
  system: !ruby/object:Word
    word: system
    stem: system
    docFrequency: 35.0
    docPositions:
    - 17
    - 137
    - 174
    - 176
    - 297
    - 317
    - 320
    - 322
    - 356
    - 395
    - 446
    - 448
    - 451
    - 484
    - 486
    - 516
    - 614
    - 679
    - 682
    - 902
  redirect: !ruby/object:Word
    word: redirect
    stem: redirect
    docFrequency: 2.0
    docPositions:
    - 17
  here: !ruby/object:Word
    word: here
    stem: here
    docFrequency: 2.0
    docPositions:
    - 17
  company: !ruby/object:Word
    word: company
    stem: compani
    docFrequency: 6.0
    docPositions:
    - 17
    - 212
    - 902
  see: !ruby/object:Word
    word: see
    stem: see
    docFrequency: 7.0
    docPositions:
    - 17
    - 90
    - 385
    - 594
    - 902
  limited: !ruby/object:Word
    word: limited
    stem: limit
    docFrequency: 13.0
    docPositions:
    - 17
    - 138
    - 194
    - 338
    - 424
    - 676
    - 902
  other: !ruby/object:Word
    word: other
    stem: other
    docFrequency: 44.0
    docPositions:
    - 17
    - 77
    - 116
    - 135
    - 136
    - 163
    - 165
    - 194
    - 228
    - 230
    - 242
    - 244
    - 310
    - 320
    - 324
    - 338
    - 351
    - 374
    - 385
    - 397
    - 409
    - 468
    - 668
    - 902
  uses: !ruby/object:Word
    word: uses
    stem: us
    docFrequency: 6.0
    docPositions:
    - 17
    - 84
    - 547
    - 548
    - 902
  disambiguation: !ruby/object:Word
    word: disambiguation
    stem: disambigu
    docFrequency: 3.0
    docPositions:
    - 17
  general: !ruby/object:Word
    word: general
    stem: gener
    docFrequency: 21.0
    docPositions:
    - 22
    - 34
    - 139
    - 147
    - 162
    - 212
    - 309
    - 356
    - 385
    - 534
    - 902
  purpose: !ruby/object:Word
    word: purpose
    stem: purpos
    docFrequency: 17.0
    docPositions:
    - 22
    - 34
    - 139
    - 147
    - 212
    - 309
    - 385
    - 395
    - 534
    - 902
  device: !ruby/object:Word
    word: device
    stem: devic
    docFrequency: 34.0
    docPositions:
    - 22
    - 34
    - 108
    - 139
    - 148
    - 181
    - 190
    - 193
    - 203
    - 211
    - 225
    - 226
    - 228
    - 242
    - 326
    - 329
    - 419
    - 469
    - 662
    - 672
    - 902
  can: !ruby/object:Word
    word: can
    stem: can
    docFrequency: 90.0
    docPositions:
    - 22
    - 23
    - 25
    - 148
    - 203
    - 230
    - 231
    - 244
    - 260
    - 262
    - 263
    - 310
    - 331
    - 338
    - 339
    - 340
    - 350
    - 351
    - 352
    - 356
    - 372
    - 408
    - 409
    - 422
    - 424
    - 611
    - 668
    - 681
    - 902
  programmed: !ruby/object:Word
    word: programmed
    stem: program
    docFrequency: 19.0
    docPositions:
    - 22
    - 136
    - 194
    - 230
    - 244
    - 338
    - 428
    - 667
    - 902
  carry: !ruby/object:Word
    word: carry
    stem: carri
    docFrequency: 5.0
    docPositions:
    - 22
    - 242
    - 902
  out: !ruby/object:Word
    word: out
    stem: out
    docFrequency: 25.0
    docPositions:
    - 22
    - 23
    - 97
    - 125
    - 162
    - 242
    - 422
    - 424
    - 676
    - 681
    - 902
  set: !ruby/object:Word
    word: set
    stem: set
    docFrequency: 27.0
    docPositions:
    - 22
    - 137
    - 162
    - 193
    - 203
    - 250
    - 324
    - 331
    - 338
    - 351
    - 352
    - 545
    - 687
    - 901
    - 902
  arithmetic: !ruby/object:Word
    word: arithmetic
    stem: arithmet
    docFrequency: 29.0
    docPositions:
    - 22
    - 23
    - 59
    - 116
    - 147
    - 162
    - 244
    - 309
    - 335
    - 336
    - 337
    - 338
    - 340
    - 672
    - 702
    - 902
  logical: !ruby/object:Word
    word: logical
    stem: logic
    docFrequency: 7.0
    docPositions:
    - 22
    - 185
    - 419
    - 902
  operations: !ruby/object:Word
    word: operations
    stem: oper
    docFrequency: 32.0
    docPositions:
    - 22
    - 23
    - 185
    - 332
    - 337
    - 338
    - 339
    - 419
    - 611
    - 670
    - 902
  automatically: !ruby/object:Word
    word: automatically
    stem: automat
    docFrequency: 8.0
    docPositions:
    - 22
    - 137
    - 357
    - 667
    - 902
  since: !ruby/object:Word
    word: since
    stem: sinc
    docFrequency: 21.0
    docPositions:
    - 22
    - 116
    - 262
    - 297
    - 331
    - 334
    - 350
    - 372
    - 395
    - 902
  sequence: !ruby/object:Word
    word: sequence
    stem: sequenc
    docFrequency: 7.0
    docPositions:
    - 22
    - 243
    - 332
    - 902
  readily: !ruby/object:Word
    word: readily
    stem: readili
    docFrequency: 3.0
    docPositions:
    - 22
    - 902
  changed: !ruby/object:Word
    word: changed
    stem: chang
    docFrequency: 7.0
    docPositions:
    - 22
    - 203
    - 331
    - 902
  solve: !ruby/object:Word
    word: solve
    stem: solv
    docFrequency: 11.0
    docPositions:
    - 22
    - 138
    - 158
    - 165
    - 428
    - 902
  more: !ruby/object:Word
    word: more
    stem: more
    docFrequency: 60.0
    docPositions:
    - 22
    - 25
    - 97
    - 147
    - 158
    - 174
    - 184
    - 193
    - 211
    - 221
    - 262
    - 279
    - 287
    - 310
    - 332
    - 338
    - 352
    - 356
    - 357
    - 368
    - 374
    - 422
    - 611
    - 673
    - 831
    - 902
  than: !ruby/object:Word
    word: than
    stem: than
    docFrequency: 50.0
    docPositions:
    - 22
    - 25
    - 135
    - 148
    - 185
    - 194
    - 221
    - 225
    - 252
    - 253
    - 279
    - 281
    - 338
    - 352
    - 356
    - 357
    - 372
    - 611
    - 669
    - 673
    - 681
    - 711
    - 902
  one: !ruby/object:Word
    word: one
    stem: 'on'
    docFrequency: 46.0
    docPositions:
    - 22
    - 23
    - 108
    - 135
    - 138
    - 173
    - 212
    - 242
    - 262
    - 268
    - 310
    - 338
    - 352
    - 357
    - 371
    - 372
    - 668
    - 672
    - 673
    - 902
  kind: !ruby/object:Word
    word: kind
    stem: kind
    docFrequency: 6.0
    docPositions:
    - 22
    - 351
    - 668
    - 902
  problem: !ruby/object:Word
    word: problem
    stem: problem
    docFrequency: 20.0
    docPositions:
    - 22
    - 148
    - 157
    - 162
    - 165
    - 193
    - 279
    - 287
    - 670
    - 902
  conventionally: !ruby/object:Word
    word: conventionally
    stem: convention
    docFrequency: 3.0
    docPositions:
    - 23
    - 902
  consists: !ruby/object:Word
    word: consists
    stem: consist
    docFrequency: 3.0
    docPositions:
    - 23
    - 902
  least: !ruby/object:Word
    word: least
    stem: least
    docFrequency: 5.0
    docPositions:
    - 23
    - 212
    - 902
  processing: !ruby/object:Word
    word: processing
    stem: process
    docFrequency: 28.0
    docPositions:
    - 23
    - 58
    - 125
    - 176
    - 300
    - 333
    - 334
    - 339
    - 368
    - 419
    - 516
    - 522
    - 559
    - 758
    - 759
    - 902
  element: !ruby/object:Word
    word: element
    stem: element
    docFrequency: 5.0
    docPositions:
    - 23
    - 902
  typically: !ruby/object:Word
    word: typically
    stem: typic
    docFrequency: 20.0
    docPositions:
    - 23
    - 135
    - 326
    - 334
    - 351
    - 352
    - 356
    - 372
    - 547
    - 902
  central: !ruby/object:Word
    word: central
    stem: central
    docFrequency: 15.0
    docPositions:
    - 23
    - 58
    - 163
    - 300
    - 320
    - 333
    - 334
    - 672
    - 902
  unit: !ruby/object:Word
    word: unit
    stem: unit
    docFrequency: 37.0
    docPositions:
    - 23
    - 57
    - 58
    - 59
    - 147
    - 148
    - 300
    - 309
    - 311
    - 312
    - 320
    - 332
    - 333
    - 334
    - 335
    - 336
    - 368
    - 672
    - 902
  cpu: !ruby/object:Word
    word: cpu
    stem: cpu
    docFrequency: 30.0
    docPositions:
    - 23
    - 58
    - 262
    - 312
    - 322
    - 332
    - 333
    - 334
    - 350
    - 352
    - 356
    - 368
    - 559
    - 902
  some: !ruby/object:Word
    word: some
    stem: some
    docFrequency: 61.0
    docPositions:
    - 23
    - 160
    - 162
    - 174
    - 230
    - 242
    - 243
    - 262
    - 297
    - 320
    - 322
    - 332
    - 338
    - 371
    - 384
    - 424
    - 534
    - 559
    - 572
    - 654
    - 656
    - 667
    - 668
    - 670
    - 672
    - 902
  form: !ruby/object:Word
    word: form
    stem: form
    docFrequency: 14.0
    docPositions:
    - 23
    - 108
    - 147
    - 230
    - 367
    - 483
    - 668
    - 902
  memory: !ruby/object:Word
    word: memory
    stem: memori
    docFrequency: 83.0
    docPositions:
    - 23
    - 60
    - 147
    - 163
    - 174
    - 176
    - 193
    - 194
    - 203
    - 222
    - 242
    - 262
    - 309
    - 321
    - 326
    - 329
    - 331
    - 341
    - 347
    - 350
    - 351
    - 352
    - 353
    - 354
    - 355
    - 356
    - 357
    - 368
    - 371
    - 403
    - 424
    - 667
    - 673
    - 676
    - 902
  carries: !ruby/object:Word
    word: carries
    stem: carri
    docFrequency: 5.0
    docPositions:
    - 23
    - 97
    - 902
  logic: !ruby/object:Word
    word: logic
    stem: logic
    docFrequency: 34.0
    docPositions:
    - 23
    - 59
    - 147
    - 221
    - 309
    - 310
    - 335
    - 336
    - 337
    - 339
    - 408
    - 743
    - 745
    - 746
    - 755
    - 756
    - 767
    - 770
    - 771
    - 902
  sequencing: !ruby/object:Word
    word: sequencing
    stem: sequenc
    docFrequency: 3.0
    docPositions:
    - 23
    - 902
  control: !ruby/object:Word
    word: control
    stem: control
    docFrequency: 41.0
    docPositions:
    - 23
    - 57
    - 147
    - 160
    - 243
    - 309
    - 310
    - 311
    - 312
    - 317
    - 320
    - 322
    - 331
    - 332
    - 334
    - 352
    - 526
    - 672
    - 720
    - 902
  change: !ruby/object:Word
    word: change
    stem: chang
    docFrequency: 5.0
    docPositions:
    - 23
    - 320
    - 902
  order: !ruby/object:Word
    word: order
    stem: order
    docFrequency: 12.0
    docPositions:
    - 23
    - 136
    - 242
    - 320
    - 322
    - 613
    - 902
  response: !ruby/object:Word
    word: response
    stem: respons
    docFrequency: 3.0
    docPositions:
    - 23
    - 902
  stored: !ruby/object:Word
    word: stored
    stem: store
    docFrequency: 49.0
    docPositions:
    - 23
    - 39
    - 46
    - 163
    - 174
    - 193
    - 195
    - 200
    - 203
    - 211
    - 232
    - 238
    - 262
    - 326
    - 350
    - 351
    - 356
    - 371
    - 385
    - 397
    - 483
    - 545
    - 672
    - 902
  information: !ruby/object:Word
    word: information
    stem: inform
    docFrequency: 36.0
    docPositions:
    - 23
    - 25
    - 281
    - 310
    - 350
    - 351
    - 367
    - 395
    - 397
    - 419
    - 585
    - 586
    - 597
    - 621
    - 708
    - 902
  peripheral: !ruby/object:Word
    word: peripheral
    stem: peripher
    docFrequency: 6.0
    docPositions:
    - 23
    - 397
    - 469
    - 902
  devices: !ruby/object:Word
    word: devices
    stem: devic
    docFrequency: 61.0
    docPositions:
    - 23
    - 25
    - 87
    - 88
    - 108
    - 124
    - 135
    - 159
    - 162
    - 165
    - 173
    - 228
    - 287
    - 309
    - 364
    - 367
    - 368
    - 374
    - 397
    - 437
    - 442
    - 558
    - 559
    - 571
    - 572
    - 670
    - 902
  allow: !ruby/object:Word
    word: allow
    stem: allow
    docFrequency: 7.0
    docPositions:
    - 23
    - 331
    - 373
    - 902
  retrieved: !ruby/object:Word
    word: retrieved
    stem: retriev
    docFrequency: 33.0
    docPositions:
    - 23
    - 610
    - 611
    - 612
    - 615
    - 626
    - 627
    - 631
    - 641
    - 643
    - 644
    - 647
    - 648
    - 649
    - 650
    - 651
    - 652
    - 654
    - 656
    - 658
    - 659
    - 663
    - 671
    - 683
    - 686
    - 693
    - 698
    - 714
    - 797
    - 902
  external: !ruby/object:Word
    word: external
    stem: extern
    docFrequency: 12.0
    docPositions:
    - 23
    - 93
    - 242
    - 716
    - 798
    - 902
  source: !ruby/object:Word
    word: source
    stem: sourc
    docFrequency: 5.0
    docPositions:
    - 23
    - 592
    - 827
    - 902
  result: !ruby/object:Word
    word: result
    stem: result
    docFrequency: 10.0
    docPositions:
    - 23
    - 242
    - 297
    - 329
    - 384
    - 902
  saved: !ruby/object:Word
    word: saved
    stem: save
    docFrequency: 3.0
    docPositions:
    - 23
    - 902
  mechanical: !ruby/object:Word
    word: mechanical
    stem: mechan
    docFrequency: 49.0
    docPositions:
    - 24
    - 124
    - 125
    - 127
    - 136
    - 138
    - 147
    - 157
    - 158
    - 159
    - 173
    - 176
    - 184
    - 422
    - 434
    - 619
    - 622
    - 627
    - 697
    - 702
    - 902
  analog: !ruby/object:Word
    word: analog
    stem: analog
    docFrequency: 35.0
    docPositions:
    - 24
    - 35
    - 121
    - 124
    - 125
    - 135
    - 138
    - 149
    - 157
    - 158
    - 159
    - 160
    - 165
    - 176
    - 408
    - 549
    - 902
  computers: !ruby/object:Word
    word: computers
    stem: comput
    docFrequency: 187.0
    docPositions:
    - 24
    - 25
    - 35
    - 43
    - 83
    - 149
    - 157
    - 160
    - 163
    - 173
    - 212
    - 221
    - 226
    - 227
    - 228
    - 230
    - 241
    - 242
    - 262
    - 263
    - 273
    - 279
    - 297
    - 320
    - 340
    - 351
    - 356
    - 357
    - 364
    - 368
    - 372
    - 373
    - 384
    - 385
    - 395
    - 396
    - 397
    - 403
    - 409
    - 411
    - 416
    - 422
    - 424
    - 426
    - 546
    - 547
    - 580
    - 586
    - 604
    - 606
    - 611
    - 631
    - 640
    - 646
    - 648
    - 649
    - 651
    - 652
    - 653
    - 667
    - 668
    - 672
    - 674
    - 681
    - 682
    - 692
    - 699
    - 902
  started: !ruby/object:Word
    word: started
    stem: start
    docFrequency: 3.0
    docPositions:
    - 24
    - 902
  appearing: !ruby/object:Word
    word: appearing
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 24
    - 902
  first: !ruby/object:Word
    word: first
    stem: first
    docFrequency: 91.0
    docPositions:
    - 24
    - 34
    - 97
    - 125
    - 139
    - 147
    - 157
    - 158
    - 162
    - 170
    - 174
    - 176
    - 181
    - 184
    - 185
    - 190
    - 193
    - 200
    - 203
    - 211
    - 212
    - 222
    - 224
    - 225
    - 226
    - 238
    - 250
    - 294
    - 298
    - 395
    - 434
    - 530
    - 613
    - 639
    - 652
    - 663
    - 682
    - 902
  century: !ruby/object:Word
    word: century
    stem: centuri
    docFrequency: 20.0
    docPositions:
    - 24
    - 33
    - 97
    - 100
    - 125
    - 126
    - 147
    - 148
    - 157
    - 685
    - 902
  were: !ruby/object:Word
    word: were
    stem: were
    docFrequency: 56.0
    docPositions:
    - 24
    - 125
    - 157
    - 159
    - 162
    - 165
    - 173
    - 174
    - 185
    - 212
    - 221
    - 225
    - 242
    - 334
    - 397
    - 611
    - 613
    - 614
    - 667
    - 668
    - 672
    - 687
    - 902
  later: !ruby/object:Word
    word: later
    stem: later
    docFrequency: 22.0
    docPositions:
    - 24
    - 35
    - 108
    - 124
    - 147
    - 149
    - 176
    - 193
    - 212
    - 225
    - 372
    - 667
    - 902
  used: !ruby/object:Word
    word: used
    stem: us
    docFrequency: 57.0
    docPositions:
    - 24
    - 108
    - 116
    - 126
    - 137
    - 138
    - 147
    - 157
    - 165
    - 174
    - 176
    - 181
    - 184
    - 185
    - 242
    - 263
    - 298
    - 351
    - 352
    - 356
    - 364
    - 381
    - 384
    - 395
    - 538
    - 540
    - 542
    - 613
    - 667
    - 672
    - 681
    - 902
  medieval: !ruby/object:Word
    word: medieval
    stem: mediev
    docFrequency: 6.0
    docPositions:
    - 24
    - 116
    - 616
    - 902
  era: !ruby/object:Word
    word: era
    stem: era
    docFrequency: 5.0
    docPositions:
    - 24
    - 373
    - 902
  astronomical: !ruby/object:Word
    word: astronomical
    stem: astronom
    docFrequency: 7.0
    docPositions:
    - 24
    - 124
    - 125
    - 902
  calculations: !ruby/object:Word
    word: calculations
    stem: calcul
    docFrequency: 13.0
    docPositions:
    - 24
    - 97
    - 147
    - 190
    - 331
    - 368
    - 685
    - 902
  world: !ruby/object:Word
    word: world
    stem: world
    docFrequency: 29.0
    docPositions:
    - 24
    - 121
    - 125
    - 165
    - 174
    - 181
    - 184
    - 185
    - 211
    - 212
    - 222
    - 238
    - 367
    - 397
    - 624
    - 902
  war: !ruby/object:Word
    word: war
    stem: war
    docFrequency: 8.0
    docPositions:
    - 24
    - 165
    - 181
    - 184
    - 902
  ii: !ruby/object:Word
    word: ii
    stem: ii
    docFrequency: 18.0
    docPositions:
    - 24
    - 165
    - 181
    - 184
    - 185
    - 294
    - 298
    - 438
    - 902
  specialized: !ruby/object:Word
    word: specialized
    stem: special
    docFrequency: 18.0
    docPositions:
    - 24
    - 160
    - 242
    - 328
    - 351
    - 356
    - 385
    - 534
    - 902
  military: !ruby/object:Word
    word: military
    stem: militari
    docFrequency: 9.0
    docPositions:
    - 24
    - 184
    - 395
    - 397
    - 902
  applications: !ruby/object:Word
    word: applications
    stem: applic
    docFrequency: 21.0
    docPositions:
    - 24
    - 160
    - 351
    - 356
    - 385
    - 397
    - 534
    - 654
    - 656
    - 680
    - 776
    - 902
  such: !ruby/object:Word
    word: such
    stem: such
    docFrequency: 60.0
    docPositions:
    - 24
    - 126
    - 135
    - 138
    - 147
    - 160
    - 162
    - 163
    - 174
    - 203
    - 244
    - 262
    - 263
    - 276
    - 279
    - 287
    - 297
    - 338
    - 367
    - 384
    - 385
    - 395
    - 397
    - 424
    - 483
    - 545
    - 611
    - 902
  calculating: !ruby/object:Word
    word: calculating
    stem: calcul
    docFrequency: 9.0
    docPositions:
    - 24
    - 116
    - 126
    - 620
    - 713
    - 902
  torpedo: !ruby/object:Word
    word: torpedo
    stem: torpedo
    docFrequency: 7.0
    docPositions:
    - 24
    - 165
    - 902
  aiming: !ruby/object:Word
    word: aiming
    stem: aim
    docFrequency: 3.0
    docPositions:
    - 24
    - 902
  during: !ruby/object:Word
    word: during
    stem: dure
    docFrequency: 10.0
    docPositions:
    - 24
    - 157
    - 165
    - 181
    - 184
    - 902
  time: !ruby/object:Word
    word: time
    stem: time
    docFrequency: 48.0
    docPositions:
    - 24
    - 135
    - 147
    - 148
    - 174
    - 176
    - 211
    - 244
    - 273
    - 338
    - 352
    - 372
    - 374
    - 397
    - 409
    - 495
    - 516
    - 671
    - 682
    - 698
    - 902
  electronic: !ruby/object:Word
    word: electronic
    stem: electron
    docFrequency: 53.0
    docPositions:
    - 24
    - 25
    - 38
    - 160
    - 175
    - 176
    - 181
    - 185
    - 193
    - 203
    - 211
    - 224
    - 225
    - 310
    - 419
    - 583
    - 639
    - 645
    - 649
    - 657
    - 660
    - 692
    - 714
    - 783
    - 902
  digital: !ruby/object:Word
    word: digital
    stem: digit
    docFrequency: 45.0
    docPositions:
    - 24
    - 36
    - 38
    - 157
    - 160
    - 161
    - 170
    - 173
    - 174
    - 175
    - 176
    - 181
    - 185
    - 203
    - 211
    - 408
    - 465
    - 524
    - 550
    - 563
    - 566
    - 691
    - 695
    - 714
    - 737
    - 753
    - 758
    - 759
    - 780
    - 781
    - 782
    - 902
  developed: !ruby/object:Word
    word: developed
    stem: develop
    docFrequency: 15.0
    docPositions:
    - 24
    - 126
    - 138
    - 165
    - 176
    - 222
    - 902
  originally: !ruby/object:Word
    word: originally
    stem: origin
    docFrequency: 5.0
    docPositions:
    - 24
    - 173
    - 902
  they: !ruby/object:Word
    word: they
    stem: thei
    docFrequency: 29.0
    docPositions:
    - 24
    - 163
    - 221
    - 230
    - 242
    - 243
    - 262
    - 273
    - 297
    - 351
    - 385
    - 902
  size: !ruby/object:Word
    word: size
    stem: size
    docFrequency: 3.0
    docPositions:
    - 24
    - 902
  large: !ruby/object:Word
    word: large
    stem: larg
    docFrequency: 22.0
    docPositions:
    - 24
    - 185
    - 231
    - 287
    - 384
    - 385
    - 395
    - 397
    - 682
    - 902
  room: !ruby/object:Word
    word: room
    stem: room
    docFrequency: 4.0
    docPositions:
    - 24
    - 416
    - 902
  consuming: !ruby/object:Word
    word: consuming
    stem: consum
    docFrequency: 3.0
    docPositions:
    - 24
    - 902
  much: !ruby/object:Word
    word: much
    stem: much
    docFrequency: 18.0
    docPositions:
    - 24
    - 147
    - 173
    - 193
    - 221
    - 352
    - 356
    - 374
    - 681
    - 902
  power: !ruby/object:Word
    word: power
    stem: power
    docFrequency: 14.0
    docPositions:
    - 24
    - 194
    - 221
    - 224
    - 356
    - 431
    - 610
    - 902
  several: !ruby/object:Word
    word: several
    stem: sever
    docFrequency: 25.0
    docPositions:
    - 24
    - 125
    - 231
    - 262
    - 340
    - 351
    - 371
    - 372
    - 374
    - 384
    - 902
  hundred: !ruby/object:Word
    word: hundred
    stem: hundr
    docFrequency: 9.0
    docPositions:
    - 24
    - 262
    - 352
    - 372
    - 902
  modern: !ruby/object:Word
    word: modern
    stem: modern
    docFrequency: 50.0
    docPositions:
    - 24
    - 25
    - 147
    - 157
    - 158
    - 162
    - 163
    - 174
    - 211
    - 230
    - 231
    - 260
    - 262
    - 351
    - 368
    - 372
    - 419
    - 422
    - 424
    - 610
    - 611
    - 628
    - 667
    - 672
    - 902
  personal: !ruby/object:Word
    word: personal
    stem: person
    docFrequency: 24.0
    docPositions:
    - 24
    - 25
    - 226
    - 279
    - 367
    - 384
    - 397
    - 419
    - 422
    - 430
    - 464
    - 465
    - 554
    - 806
    - 902
  pcs: !ruby/object:Word
    word: pcs
    stem: pc
    docFrequency: 3.0
    docPositions:
    - 24
    - 902
  based: !ruby/object:Word
    word: based
    stem: base
    docFrequency: 19.0
    docPositions:
    - 25
    - 84
    - 85
    - 162
    - 230
    - 241
    - 467
    - 512
    - 537
    - 547
    - 548
    - 552
    - 696
    - 902
  integrated: !ruby/object:Word
    word: integrated
    stem: integr
    docFrequency: 29.0
    docPositions:
    - 25
    - 41
    - 147
    - 223
    - 224
    - 225
    - 334
    - 384
    - 444
    - 449
    - 526
    - 744
    - 902
  circuits: !ruby/object:Word
    word: circuits
    stem: circuit
    docFrequency: 24.0
    docPositions:
    - 25
    - 38
    - 41
    - 175
    - 221
    - 223
    - 310
    - 431
    - 444
    - 449
    - 655
    - 660
    - 694
    - 902
  millions: !ruby/object:Word
    word: millions
    stem: million
    docFrequency: 5.0
    docPositions:
    - 25
    - 231
    - 902
  billions: !ruby/object:Word
    word: billions
    stem: billion
    docFrequency: 8.0
    docPositions:
    - 25
    - 231
    - 351
    - 611
    - 902
  times: !ruby/object:Word
    word: times
    stem: time
    docFrequency: 16.0
    docPositions:
    - 25
    - 97
    - 185
    - 194
    - 243
    - 610
    - 633
    - 676
    - 902
  capable: !ruby/object:Word
    word: capable
    stem: capabl
    docFrequency: 17.0
    docPositions:
    - 25
    - 125
    - 162
    - 163
    - 185
    - 337
    - 338
    - 409
    - 902
  early: !ruby/object:Word
    word: early
    stem: earli
    docFrequency: 30.0
    docPositions:
    - 25
    - 116
    - 125
    - 147
    - 173
    - 184
    - 203
    - 263
    - 334
    - 611
    - 614
    - 648
    - 649
    - 654
    - 656
    - 668
    - 670
    - 902
  machines: !ruby/object:Word
    word: machines
    stem: machin
    docFrequency: 38.0
    docPositions:
    - 25
    - 136
    - 138
    - 160
    - 162
    - 163
    - 174
    - 185
    - 193
    - 203
    - 212
    - 230
    - 384
    - 407
    - 436
    - 620
    - 704
    - 707
    - 713
    - 902
  occupy: !ruby/object:Word
    word: occupy
    stem: occupi
    docFrequency: 4.0
    docPositions:
    - 25
    - 673
    - 902
  fraction: !ruby/object:Word
    word: fraction
    stem: fraction
    docFrequency: 5.0
    docPositions:
    - 25
    - 260
    - 902
  space: !ruby/object:Word
    word: space
    stem: space
    docFrequency: 7.0
    docPositions:
    - 25
    - 135
    - 221
    - 902
  small: !ruby/object:Word
    word: small
    stem: small
    docFrequency: 18.0
    docPositions:
    - 25
    - 165
    - 200
    - 211
    - 238
    - 287
    - 310
    - 443
    - 902
  enough: !ruby/object:Word
    word: enough
    stem: enough
    docFrequency: 7.0
    docPositions:
    - 25
    - 165
    - 409
    - 902
  fit: !ruby/object:Word
    word: fit
    stem: fit
    docFrequency: 5.0
    docPositions:
    - 25
    - 193
    - 902
  into: !ruby/object:Word
    word: into
    stem: into
    docFrequency: 49.0
    docPositions:
    - 25
    - 97
    - 176
    - 193
    - 211
    - 228
    - 263
    - 273
    - 279
    - 320
    - 324
    - 338
    - 350
    - 356
    - 357
    - 613
    - 669
    - 902
  mobile: !ruby/object:Word
    word: mobile
    stem: mobil
    docFrequency: 13.0
    docPositions:
    - 25
    - 43
    - 227
    - 397
    - 611
    - 891
    - 902
  powered: !ruby/object:Word
    word: powered
    stem: power
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  batteries: !ruby/object:Word
    word: batteries
    stem: batteri
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  their: !ruby/object:Word
    word: their
    stem: their
    docFrequency: 30.0
    docPositions:
    - 25
    - 159
    - 163
    - 176
    - 222
    - 262
    - 368
    - 374
    - 384
    - 396
    - 424
    - 547
    - 687
    - 902
  various: !ruby/object:Word
    word: various
    stem: variou
    docFrequency: 11.0
    docPositions:
    - 25
    - 126
    - 273
    - 279
    - 320
    - 902
  forms: !ruby/object:Word
    word: forms
    stem: form
    docFrequency: 6.0
    docPositions:
    - 25
    - 116
    - 687
    - 902
  icons: !ruby/object:Word
    word: icons
    stem: icon
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  age: !ruby/object:Word
    word: age
    stem: ag
    docFrequency: 4.0
    docPositions:
    - 25
    - 708
    - 902
  generally: !ruby/object:Word
    word: generally
    stem: gener
    docFrequency: 11.0
    docPositions:
    - 25
    - 157
    - 242
    - 273
    - 357
    - 902
  considered: !ruby/object:Word
    word: considered
    stem: consid
    docFrequency: 7.0
    docPositions:
    - 25
    - 147
    - 211
    - 902
  however: !ruby/object:Word
    word: however
    stem: howev
    docFrequency: 20.0
    docPositions:
    - 25
    - 157
    - 222
    - 242
    - 338
    - 356
    - 422
    - 424
    - 667
    - 668
    - 681
    - 902
  embedded: !ruby/object:Word
    word: embedded
    stem: embed
    docFrequency: 8.0
    docPositions:
    - 25
    - 356
    - 462
    - 495
    - 496
    - 902
  found: !ruby/object:Word
    word: found
    stem: found
    docFrequency: 10.0
    docPositions:
    - 25
    - 126
    - 276
    - 294
    - 298
    - 902
  many: !ruby/object:Word
    word: many
    stem: mani
    docFrequency: 44.0
    docPositions:
    - 25
    - 116
    - 125
    - 157
    - 194
    - 221
    - 225
    - 231
    - 242
    - 263
    - 279
    - 334
    - 368
    - 372
    - 373
    - 374
    - 381
    - 400
    - 424
    - 586
    - 611
    - 681
    - 902
  players: !ruby/object:Word
    word: players
    stem: player
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  fighter: !ruby/object:Word
    word: fighter
    stem: fighter
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  aircraft: !ruby/object:Word
    word: aircraft
    stem: aircraft
    docFrequency: 7.0
    docPositions:
    - 25
    - 135
    - 160
    - 902
  toys: !ruby/object:Word
    word: toys
    stem: toi
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  industrial: !ruby/object:Word
    word: industrial
    stem: industri
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  robots: !ruby/object:Word
    word: robots
    stem: robot
    docFrequency: 3.0
    docPositions:
    - 25
    - 902
  most: !ruby/object:Word
    word: most
    stem: most
    docFrequency: 33.0
    docPositions:
    - 25
    - 160
    - 241
    - 242
    - 262
    - 279
    - 352
    - 374
    - 385
    - 407
    - 408
    - 424
    - 606
    - 667
    - 668
    - 672
    - 674
    - 681
    - 687
    - 902
  numerous: !ruby/object:Word
    word: numerous
    stem: numer
    docFrequency: 5.0
    docPositions:
    - 25
    - 174
    - 902
  contents: !ruby/object:Word
    word: contents
    stem: content
    docFrequency: 4.0
    docPositions:
    - 29
    - 356
    - 902
  etymology: !ruby/object:Word
    word: etymology
    stem: etymolog
    docFrequency: 3.0
    docPositions:
    - 31
    - 96
  history: !ruby/object:Word
    word: history
    stem: histori
    docFrequency: 21.0
    docPositions:
    - 32
    - 76
    - 98
    - 99
    - 432
    - 433
    - 616
    - 617
    - 620
    - 628
    - 636
    - 652
    - 653
    - 661
    - 683
    - 691
    - 699
    - 702
    - 703
    - 828
  pre: !ruby/object:Word
    word: pre
    stem: pre
    docFrequency: 3.0
    docPositions:
    - 33
    - 100
  twentieth: !ruby/object:Word
    word: twentieth
    stem: twentieth
    docFrequency: 3.0
    docPositions:
    - 33
    - 100
  computing: !ruby/object:Word
    word: computing
    stem: comput
    docFrequency: 51.0
    docPositions:
    - 34
    - 69
    - 76
    - 99
    - 139
    - 148
    - 157
    - 159
    - 160
    - 163
    - 181
    - 203
    - 224
    - 228
    - 298
    - 385
    - 397
    - 407
    - 420
    - 421
    - 432
    - 433
    - 467
    - 624
    - 628
    - 636
    - 647
    - 674
    - 675
    - 691
    - 703
    - 902
  development: !ruby/object:Word
    word: development
    stem: develop
    docFrequency: 14.0
    docPositions:
    - 36
    - 135
    - 161
    - 194
    - 212
    - 226
    - 397
    - 526
    - 902
  electromechanical: !ruby/object:Word
    word: electromechanical
    stem: electromechan
    docFrequency: 15.0
    docPositions:
    - 37
    - 164
    - 165
    - 170
    - 173
    - 174
    - 176
    - 434
    - 902
  vacuum: !ruby/object:Word
    word: vacuum
    stem: vacuum
    docFrequency: 24.0
    docPositions:
    - 38
    - 173
    - 175
    - 176
    - 185
    - 194
    - 221
    - 422
    - 439
    - 902
  tubes: !ruby/object:Word
    word: tubes
    stem: tube
    docFrequency: 26.0
    docPositions:
    - 38
    - 173
    - 175
    - 176
    - 185
    - 194
    - 221
    - 422
    - 439
    - 902
  programs: !ruby/object:Word
    word: programs
    stem: program
    docFrequency: 61.0
    docPositions:
    - 39
    - 45
    - 147
    - 195
    - 203
    - 229
    - 231
    - 262
    - 263
    - 273
    - 279
    - 287
    - 297
    - 371
    - 372
    - 374
    - 409
    - 428
    - 483
    - 668
    - 902
  transistors: !ruby/object:Word
    word: transistors
    stem: transistor
    docFrequency: 18.0
    docPositions:
    - 40
    - 213
    - 221
    - 222
    - 422
    - 444
    - 664
    - 902
  become: !ruby/object:Word
    word: become
    stem: becom
    docFrequency: 9.0
    docPositions:
    - 43
    - 227
    - 228
    - 287
    - 397
    - 902
  dominant: !ruby/object:Word
    word: dominant
    stem: domin
    docFrequency: 5.0
    docPositions:
    - 43
    - 227
    - 228
    - 902
  program: !ruby/object:Word
    word: program
    stem: program
    docFrequency: 106.0
    docPositions:
    - 46
    - 53
    - 163
    - 174
    - 193
    - 200
    - 203
    - 211
    - 230
    - 231
    - 232
    - 233
    - 238
    - 242
    - 243
    - 260
    - 262
    - 263
    - 268
    - 279
    - 282
    - 287
    - 297
    - 320
    - 321
    - 323
    - 325
    - 331
    - 332
    - 356
    - 371
    - 372
    - 374
    - 385
    - 516
    - 667
    - 669
    - 672
    - 673
    - 902
  architecture: !ruby/object:Word
    word: architecture
    stem: architectur
    docFrequency: 24.0
    docPositions:
    - 46
    - 66
    - 230
    - 232
    - 262
    - 276
    - 317
    - 385
    - 399
    - 405
    - 406
    - 684
    - 700
    - 757
    - 902
  machine: !ruby/object:Word
    word: machine
    stem: machin
    docFrequency: 102.0
    docPositions:
    - 47
    - 97
    - 125
    - 137
    - 147
    - 148
    - 154
    - 158
    - 162
    - 163
    - 174
    - 184
    - 193
    - 194
    - 200
    - 203
    - 211
    - 222
    - 230
    - 238
    - 241
    - 261
    - 262
    - 263
    - 273
    - 276
    - 279
    - 404
    - 419
    - 428
    - 443
    - 635
    - 667
    - 668
    - 669
    - 671
    - 674
    - 700
    - 702
    - 772
    - 902
  code: !ruby/object:Word
    word: code
    stem: code
    docFrequency: 28.0
    docPositions:
    - 47
    - 174
    - 230
    - 261
    - 262
    - 273
    - 287
    - 297
    - 323
    - 324
    - 326
    - 428
    - 641
    - 667
    - 669
    - 798
    - 902
  programming: !ruby/object:Word
    word: programming
    stem: program
    docFrequency: 32.0
    docPositions:
    - 48
    - 230
    - 233
    - 271
    - 272
    - 273
    - 275
    - 276
    - 278
    - 279
    - 287
    - 502
    - 534
    - 535
    - 536
    - 537
    - 540
    - 902
  language: !ruby/object:Word
    word: language
    stem: languag
    docFrequency: 45.0
    docPositions:
    - 48
    - 50
    - 162
    - 230
    - 244
    - 263
    - 271
    - 272
    - 275
    - 276
    - 277
    - 278
    - 279
    - 632
    - 668
    - 798
    - 902
  low: !ruby/object:Word
    word: low
    stem: low
    docFrequency: 8.0
    docPositions:
    - 49
    - 173
    - 274
    - 275
    - 276
    - 902
  level: !ruby/object:Word
    word: level
    stem: level
    docFrequency: 24.0
    docPositions:
    - 49
    - 50
    - 124
    - 184
    - 274
    - 275
    - 276
    - 277
    - 278
    - 279
    - 540
    - 669
    - 768
    - 902
  languages: !ruby/object:Word
    word: languages
    stem: languag
    docFrequency: 50.0
    docPositions:
    - 49
    - 50
    - 52
    - 80
    - 273
    - 274
    - 276
    - 277
    - 279
    - 280
    - 281
    - 287
    - 533
    - 534
    - 535
    - 536
    - 537
    - 538
    - 540
    - 542
    - 669
    - 875
    - 902
  high: !ruby/object:Word
    word: high
    stem: high
    docFrequency: 32.0
    docPositions:
    - 50
    - 184
    - 194
    - 277
    - 278
    - 279
    - 287
    - 356
    - 385
    - 397
    - 416
    - 419
    - 540
    - 618
    - 669
    - 902
  third: !ruby/object:Word
    word: third
    stem: third
    docFrequency: 5.0
    docPositions:
    - 50
    - 154
    - 277
    - 444
  generation: !ruby/object:Word
    word: generation
    stem: gener
    docFrequency: 11.0
    docPositions:
    - 50
    - 52
    - 221
    - 277
    - 280
    - 434
    - 439
    - 444
    - 449
    - 902
  fourth: !ruby/object:Word
    word: fourth
    stem: fourth
    docFrequency: 4.0
    docPositions:
    - 52
    - 280
    - 449
  design: !ruby/object:Word
    word: design
    stem: design
    docFrequency: 29.0
    docPositions:
    - 53
    - 147
    - 154
    - 174
    - 176
    - 203
    - 211
    - 282
    - 287
    - 297
    - 312
    - 519
    - 520
    - 585
    - 664
    - 670
    - 684
    - 764
    - 788
    - 902
  bugs: !ruby/object:Word
    word: bugs
    stem: bug
    docFrequency: 14.0
    docPositions:
    - 54
    - 288
    - 297
    - 298
    - 670
    - 902
  components: !ruby/object:Word
    word: components
    stem: compon
    docFrequency: 15.0
    docPositions:
    - 56
    - 224
    - 225
    - 299
    - 306
    - 309
    - 320
    - 334
    - 740
    - 902
  alu: !ruby/object:Word
    word: alu
    stem: alu
    docFrequency: 22.0
    docPositions:
    - 59
    - 309
    - 327
    - 328
    - 329
    - 331
    - 334
    - 335
    - 337
    - 338
    - 352
    - 902
  input: !ruby/object:Word
    word: input
    stem: input
    docFrequency: 33.0
    docPositions:
    - 61
    - 87
    - 138
    - 147
    - 185
    - 297
    - 309
    - 326
    - 358
    - 359
    - 367
    - 374
    - 469
    - 470
    - 558
    - 559
    - 902
  output: !ruby/object:Word
    word: output
    stem: output
    docFrequency: 38.0
    docPositions:
    - 61
    - 88
    - 138
    - 147
    - 258
    - 287
    - 309
    - 329
    - 358
    - 359
    - 367
    - 374
    - 469
    - 472
    - 559
    - 571
    - 572
    - 902
  i: !ruby/object:Word
    word: i
    stem: i
    docFrequency: 33.0
    docPositions:
    - 61
    - 97
    - 185
    - 212
    - 262
    - 309
    - 358
    - 367
    - 368
    - 371
    - 438
    - 443
    - 451
    - 630
    - 651
    - 678
    - 693
    - 902
  o: !ruby/object:Word
    word: o
    stem: o
    docFrequency: 14.0
    docPositions:
    - 61
    - 309
    - 358
    - 367
    - 368
    - 679
    - 902
  multitasking: !ruby/object:Word
    word: multitasking
    stem: multitask
    docFrequency: 12.0
    docPositions:
    - 62
    - 369
    - 370
    - 371
    - 372
    - 373
    - 374
    - 902
  multiprocessing: !ruby/object:Word
    word: multiprocessing
    stem: multiprocess
    docFrequency: 7.0
    docPositions:
    - 63
    - 375
    - 376
    - 381
    - 384
    - 902
  networking: !ruby/object:Word
    word: networking
    stem: network
    docFrequency: 17.0
    docPositions:
    - 65
    - 367
    - 386
    - 387
    - 397
    - 479
    - 902
  internet: !ruby/object:Word
    word: internet
    stem: internet
    docFrequency: 13.0
    docPositions:
    - 65
    - 386
    - 387
    - 392
    - 397
    - 517
    - 661
    - 683
    - 902
  paradigms: !ruby/object:Word
    word: paradigms
    stem: paradigm
    docFrequency: 7.0
    docPositions:
    - 66
    - 287
    - 399
    - 408
    - 902
  misconceptions: !ruby/object:Word
    word: misconceptions
    stem: misconcept
    docFrequency: 3.0
    docPositions:
    - 68
    - 410
  unconventional: !ruby/object:Word
    word: unconventional
    stem: unconvent
    docFrequency: 4.0
    docPositions:
    - 69
    - 420
    - 421
  future: !ruby/object:Word
    word: future
    stem: futur
    docFrequency: 3.0
    docPositions:
    - 71
    - 423
  further: !ruby/object:Word
    word: further
    stem: further
    docFrequency: 9.0
    docPositions:
    - 72
    - 260
    - 331
    - 425
    - 672
    - 902
  topics: !ruby/object:Word
    word: topics
    stem: topic
    docFrequency: 5.0
    docPositions:
    - 72
    - 77
    - 425
    - 468
  artificial: !ruby/object:Word
    word: artificial
    stem: artifici
    docFrequency: 6.0
    docPositions:
    - 73
    - 427
    - 428
    - 532
    - 902
  intelligence: !ruby/object:Word
    word: intelligence
    stem: intellig
    docFrequency: 6.0
    docPositions:
    - 73
    - 427
    - 428
    - 532
    - 902
  hardware: !ruby/object:Word
    word: hardware
    stem: hardwar
    docFrequency: 31.0
    docPositions:
    - 75
    - 76
    - 77
    - 99
    - 328
    - 356
    - 385
    - 429
    - 430
    - 431
    - 432
    - 433
    - 468
    - 483
    - 545
    - 582
    - 670
    - 681
    - 779
    - 902
  software: !ruby/object:Word
    word: software
    stem: softwar
    docFrequency: 45.0
    docPositions:
    - 79
    - 279
    - 287
    - 289
    - 350
    - 356
    - 481
    - 482
    - 483
    - 484
    - 514
    - 516
    - 525
    - 526
    - 532
    - 545
    - 584
    - 585
    - 592
    - 593
    - 902
  firmware: !ruby/object:Word
    word: firmware
    stem: firmwar
    docFrequency: 9.0
    docPositions:
    - 81
    - 356
    - 483
    - 544
    - 545
    - 902
  types: !ruby/object:Word
    word: types
    stem: type
    docFrequency: 11.0
    docPositions:
    - 83
    - 279
    - 350
    - 400
    - 424
    - 546
    - 902
  sizes: !ruby/object:Word
    word: sizes
    stem: size
    docFrequency: 3.0
    docPositions:
    - 85
    - 552
  professions: !ruby/object:Word
    word: professions
    stem: profess
    docFrequency: 4.0
    docPositions:
    - 89
    - 579
    - 581
  organizations: !ruby/object:Word
    word: organizations
    stem: organ
    docFrequency: 6.0
    docPositions:
    - 89
    - 579
    - 586
    - 587
    - 902
  also: !ruby/object:Word
    word: also
    stem: also
    docFrequency: 28.0
    docPositions:
    - 90
    - 147
    - 148
    - 163
    - 176
    - 194
    - 203
    - 225
    - 262
    - 279
    - 338
    - 356
    - 594
    - 669
    - 676
    - 681
    - 902
  notes: !ruby/object:Word
    word: notes
    stem: note
    docFrequency: 4.0
    docPositions:
    - 91
    - 608
    - 691
  references: !ruby/object:Word
    word: references
    stem: refer
    docFrequency: 5.0
    docPositions:
    - 92
    - 286
    - 689
    - 798
  links: !ruby/object:Word
    word: links
    stem: link
    docFrequency: 9.0
    docPositions:
    - 93
    - 716
    - 798
    - 866
    - 878
    - 899
  known: !ruby/object:Word
    word: known
    stem: known
    docFrequency: 17.0
    docPositions:
    - 97
    - 162
    - 163
    - 263
    - 331
    - 334
    - 397
    - 572
    - 902
  use: !ruby/object:Word
    word: use
    stem: us
    docFrequency: 37.0
    docPositions:
    - 97
    - 108
    - 125
    - 135
    - 148
    - 160
    - 165
    - 176
    - 222
    - 226
    - 279
    - 338
    - 356
    - 373
    - 580
    - 610
    - 614
    - 798
    - 885
    - 902
  word: !ruby/object:Word
    word: word
    stem: word
    docFrequency: 17.0
    docPositions:
    - 97
    - 174
    - 231
    - 243
    - 419
    - 516
    - 685
    - 902
  book: !ruby/object:Word
    word: book
    stem: book
    docFrequency: 7.0
    docPositions:
    - 97
    - 243
    - 613
    - 617
    - 902
  called: !ruby/object:Word
    word: called
    stem: call
    docFrequency: 45.0
    docPositions:
    - 97
    - 228
    - 242
    - 243
    - 262
    - 263
    - 279
    - 297
    - 320
    - 332
    - 334
    - 351
    - 352
    - 356
    - 367
    - 372
    - 385
    - 396
    - 409
    - 483
    - 669
    - 681
    - 902
  yong: !ruby/object:Word
    word: yong
    stem: yong
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  mans: !ruby/object:Word
    word: mans
    stem: man
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  gleanings: !ruby/object:Word
    word: gleanings
    stem: glean
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  english: !ruby/object:Word
    word: english
    stem: english
    docFrequency: 9.0
    docPositions:
    - 97
    - 147
    - 537
    - 612
    - 632
    - 685
    - 902
  writer: !ruby/object:Word
    word: writer
    stem: writer
    docFrequency: 4.0
    docPositions:
    - 97
    - 623
    - 902
  richard: !ruby/object:Word
    word: richard
    stem: richard
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  braithwait: !ruby/object:Word
    word: braithwait
    stem: braithwait
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  haue: !ruby/object:Word
    word: haue
    stem: haue
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  read: !ruby/object:Word
    word: read
    stem: read
    docFrequency: 31.0
    docPositions:
    - 97
    - 136
    - 147
    - 222
    - 242
    - 243
    - 273
    - 321
    - 323
    - 326
    - 331
    - 350
    - 352
    - 355
    - 356
    - 826
    - 902
  truest: !ruby/object:Word
    word: truest
    stem: truest
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  best: !ruby/object:Word
    word: best
    stem: best
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  arithmetician: !ruby/object:Word
    word: arithmetician
    stem: arithmetician
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  euer: !ruby/object:Word
    word: euer
    stem: euer
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  breathed: !ruby/object:Word
    word: breathed
    stem: breath
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  he: !ruby/object:Word
    word: he
    stem: he
    docFrequency: 21.0
    docPositions:
    - 97
    - 138
    - 147
    - 148
    - 162
    - 163
    - 176
    - 184
    - 902
  reduceth: !ruby/object:Word
    word: reduceth
    stem: reduceth
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  thy: !ruby/object:Word
    word: thy
    stem: thy
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  dayes: !ruby/object:Word
    word: dayes
    stem: day
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  short: !ruby/object:Word
    word: short
    stem: short
    docFrequency: 10.0
    docPositions:
    - 97
    - 262
    - 263
    - 332
    - 477
    - 902
  number: !ruby/object:Word
    word: number
    stem: number
    docFrequency: 37.0
    docPositions:
    - 97
    - 113
    - 136
    - 184
    - 185
    - 242
    - 250
    - 252
    - 253
    - 255
    - 262
    - 350
    - 374
    - 395
    - 397
    - 580
    - 614
    - 673
    - 676
    - 902
  referred: !ruby/object:Word
    word: referred
    stem: refer
    docFrequency: 4.0
    docPositions:
    - 97
    - 685
    - 902
  person: !ruby/object:Word
    word: person
    stem: person
    docFrequency: 10.0
    docPositions:
    - 97
    - 243
    - 244
    - 530
    - 685
    - 902
  carried: !ruby/object:Word
    word: carried
    stem: carri
    docFrequency: 5.0
    docPositions:
    - 97
    - 242
    - 902
  computations: !ruby/object:Word
    word: computations
    stem: comput
    docFrequency: 5.0
    docPositions:
    - 97
    - 902
  continued: !ruby/object:Word
    word: continued
    stem: continu
    docFrequency: 5.0
    docPositions:
    - 97
    - 228
    - 902
  same: !ruby/object:Word
    word: same
    stem: same
    docFrequency: 22.0
    docPositions:
    - 97
    - 176
    - 228
    - 262
    - 279
    - 372
    - 373
    - 409
    - 668
    - 902
  meaning: !ruby/object:Word
    word: meaning
    stem: mean
    docFrequency: 5.0
    docPositions:
    - 97
    - 902
  until: !ruby/object:Word
    word: until
    stem: until
    docFrequency: 10.0
    docPositions:
    - 97
    - 124
    - 243
    - 347
    - 374
    - 902
  middle: !ruby/object:Word
    word: middle
    stem: middl
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  end: !ruby/object:Word
    word: end
    stem: end
    docFrequency: 9.0
    docPositions:
    - 97
    - 160
    - 194
    - 384
    - 902
  began: !ruby/object:Word
    word: began
    stem: began
    docFrequency: 9.0
    docPositions:
    - 97
    - 176
    - 203
    - 396
    - 902
  take: !ruby/object:Word
    word: take
    stem: take
    docFrequency: 15.0
    docPositions:
    - 97
    - 212
    - 231
    - 244
    - 297
    - 338
    - 374
    - 902
  its: !ruby/object:Word
    word: its
    stem: it
    docFrequency: 48.0
    docPositions:
    - 97
    - 136
    - 148
    - 159
    - 184
    - 185
    - 193
    - 203
    - 211
    - 222
    - 262
    - 263
    - 338
    - 356
    - 371
    - 672
    - 902
  familiar: !ruby/object:Word
    word: familiar
    stem: familiar
    docFrequency: 3.0
    docPositions:
    - 97
    - 902
  main: !ruby/object:Word
    word: main
    stem: main
    docFrequency: 37.0
    docPositions:
    - 99
    - 233
    - 272
    - 275
    - 278
    - 289
    - 300
    - 309
    - 312
    - 336
    - 342
    - 352
    - 353
    - 357
    - 359
    - 368
    - 370
    - 371
    - 376
    - 387
    - 411
    - 421
    - 430
    - 433
    - 482
    - 854
    - 902
  article: !ruby/object:Word
    word: article
    stem: articl
    docFrequency: 17.0
    docPositions:
    - 99
    - 272
    - 275
    - 278
    - 289
    - 336
    - 342
    - 359
    - 370
    - 376
    - 421
    - 433
    - 482
    - 718
    - 811
    - 902
  ishango: !ruby/object:Word
    word: ishango
    stem: ishango
    docFrequency: 2.0
    docPositions:
    - 105
  bone: !ruby/object:Word
    word: bone
    stem: bone
    docFrequency: 2.0
    docPositions:
    - 105
  have: !ruby/object:Word
    word: have
    stem: have
    docFrequency: 39.0
    docPositions:
    - 108
    - 116
    - 147
    - 163
    - 221
    - 228
    - 230
    - 262
    - 297
    - 334
    - 351
    - 356
    - 385
    - 395
    - 419
    - 483
    - 670
    - 672
    - 902
  been: !ruby/object:Word
    word: been
    stem: been
    docFrequency: 16.0
    docPositions:
    - 108
    - 116
    - 124
    - 138
    - 287
    - 334
    - 395
    - 681
    - 902
  aid: !ruby/object:Word
    word: aid
    stem: aid
    docFrequency: 7.0
    docPositions:
    - 108
    - 116
    - 147
    - 902
  computation: !ruby/object:Word
    word: computation
    stem: comput
    docFrequency: 14.0
    docPositions:
    - 108
    - 157
    - 162
    - 163
    - 203
    - 605
    - 902
  thousands: !ruby/object:Word
    word: thousands
    stem: thousand
    docFrequency: 21.0
    docPositions:
    - 108
    - 148
    - 176
    - 194
    - 221
    - 244
    - 287
    - 310
    - 385
    - 534
    - 902
  years: !ruby/object:Word
    word: years
    stem: year
    docFrequency: 15.0
    docPositions:
    - 108
    - 124
    - 176
    - 231
    - 613
    - 633
    - 652
    - 681
    - 902
  mostly: !ruby/object:Word
    word: mostly
    stem: mostli
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  using: !ruby/object:Word
    word: using
    stem: us
    docFrequency: 24.0
    docPositions:
    - 108
    - 158
    - 173
    - 176
    - 194
    - 222
    - 244
    - 279
    - 287
    - 396
    - 885
    - 902
  correspondence: !ruby/object:Word
    word: correspondence
    stem: correspond
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  fingers: !ruby/object:Word
    word: fingers
    stem: finger
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  earliest: !ruby/object:Word
    word: earliest
    stem: earliest
    docFrequency: 8.0
    docPositions:
    - 108
    - 124
    - 173
    - 672
    - 902
  counting: !ruby/object:Word
    word: counting
    stem: count
    docFrequency: 9.0
    docPositions:
    - 108
    - 116
    - 614
    - 702
    - 902
  probably: !ruby/object:Word
    word: probably
    stem: probabl
    docFrequency: 5.0
    docPositions:
    - 108
    - 902
  tally: !ruby/object:Word
    word: tally
    stem: talli
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  stick: !ruby/object:Word
    word: stick
    stem: stick
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  record: !ruby/object:Word
    word: record
    stem: record
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  keeping: !ruby/object:Word
    word: keeping
    stem: keep
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  aids: !ruby/object:Word
    word: aids
    stem: aid
    docFrequency: 5.0
    docPositions:
    - 108
    - 125
    - 902
  throughout: !ruby/object:Word
    word: throughout
    stem: throughout
    docFrequency: 8.0
    docPositions:
    - 108
    - 347
    - 396
    - 580
    - 902
  fertile: !ruby/object:Word
    word: fertile
    stem: fertil
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  crescent: !ruby/object:Word
    word: crescent
    stem: crescent
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  included: !ruby/object:Word
    word: included
    stem: includ
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  calculi: !ruby/object:Word
    word: calculi
    stem: calculi
    docFrequency: 4.0
    docPositions:
    - 108
    - 614
    - 902
  clay: !ruby/object:Word
    word: clay
    stem: clai
    docFrequency: 9.0
    docPositions:
    - 108
    - 613
    - 902
  spheres: !ruby/object:Word
    word: spheres
    stem: sphere
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  cones: !ruby/object:Word
    word: cones
    stem: cone
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  etc: !ruby/object:Word
    word: etc
    stem: etc
    docFrequency: 12.0
    docPositions:
    - 108
    - 242
    - 338
    - 409
    - 483
    - 685
    - 902
  which: !ruby/object:Word
    word: which
    stem: which
    docFrequency: 52.0
    docPositions:
    - 108
    - 157
    - 163
    - 165
    - 226
    - 230
    - 262
    - 279
    - 310
    - 321
    - 332
    - 350
    - 352
    - 356
    - 357
    - 367
    - 372
    - 395
    - 408
    - 419
    - 483
    - 545
    - 572
    - 613
    - 668
    - 798
    - 902
  represented: !ruby/object:Word
    word: represented
    stem: repres
    docFrequency: 8.0
    docPositions:
    - 108
    - 113
    - 262
    - 351
    - 902
  counts: !ruby/object:Word
    word: counts
    stem: count
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  items: !ruby/object:Word
    word: items
    stem: item
    docFrequency: 5.0
    docPositions:
    - 108
    - 352
    - 902
  livestock: !ruby/object:Word
    word: livestock
    stem: livestock
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  grains: !ruby/object:Word
    word: grains
    stem: grain
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  sealed: !ruby/object:Word
    word: sealed
    stem: seal
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  hollow: !ruby/object:Word
    word: hollow
    stem: hollow
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  unbaked: !ruby/object:Word
    word: unbaked
    stem: unbak
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  containers: !ruby/object:Word
    word: containers
    stem: contain
    docFrequency: 9.0
    docPositions:
    - 108
    - 613
    - 902
  rods: !ruby/object:Word
    word: rods
    stem: rod
    docFrequency: 3.0
    docPositions:
    - 108
    - 902
  example: !ruby/object:Word
    word: example
    stem: exampl
    docFrequency: 23.0
    docPositions:
    - 108
    - 135
    - 225
    - 231
    - 244
    - 281
    - 395
    - 422
    - 424
    - 672
    - 798
    - 902
  suanpan: !ruby/object:Word
    word: suanpan
    stem: suanpan
    docFrequency: 2.0
    docPositions:
    - 113
  abacus: !ruby/object:Word
    word: abacus
    stem: abacu
    docFrequency: 8.0
    docPositions:
    - 113
    - 116
    - 621
    - 703
    - 902
  initially: !ruby/object:Word
    word: initially
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 116
    - 397
    - 902
  tasks: !ruby/object:Word
    word: tasks
    stem: task
    docFrequency: 17.0
    docPositions:
    - 116
    - 163
    - 243
    - 374
    - 385
    - 409
    - 902
  roman: !ruby/object:Word
    word: roman
    stem: roman
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  babylonia: !ruby/object:Word
    word: babylonia
    stem: babylonia
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  bc: !ruby/object:Word
    word: bc
    stem: bc
    docFrequency: 8.0
    docPositions:
    - 116
    - 121
    - 124
    - 125
    - 902
  then: !ruby/object:Word
    word: then
    stem: then
    docFrequency: 10.0
    docPositions:
    - 116
    - 253
    - 279
    - 372
    - 374
    - 902
  reckoning: !ruby/object:Word
    word: reckoning
    stem: reckon
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  boards: !ruby/object:Word
    word: boards
    stem: board
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  tables: !ruby/object:Word
    word: tables
    stem: tabl
    docFrequency: 5.0
    docPositions:
    - 116
    - 148
    - 902
  invented: !ruby/object:Word
    word: invented
    stem: invent
    docFrequency: 25.0
    docPositions:
    - 116
    - 125
    - 135
    - 137
    - 147
    - 158
    - 159
    - 221
    - 225
    - 902
  european: !ruby/object:Word
    word: european
    stem: european
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  house: !ruby/object:Word
    word: house
    stem: hous
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  checkered: !ruby/object:Word
    word: checkered
    stem: checker
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  cloth: !ruby/object:Word
    word: cloth
    stem: cloth
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  would: !ruby/object:Word
    word: would
    stem: would
    docFrequency: 24.0
    docPositions:
    - 116
    - 124
    - 147
    - 162
    - 193
    - 244
    - 262
    - 317
    - 331
    - 374
    - 902
  placed: !ruby/object:Word
    word: placed
    stem: place
    docFrequency: 8.0
    docPositions:
    - 116
    - 350
    - 613
    - 902
  table: !ruby/object:Word
    word: table
    stem: tabl
    docFrequency: 4.0
    docPositions:
    - 116
    - 687
    - 902
  markers: !ruby/object:Word
    word: markers
    stem: marker
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  moved: !ruby/object:Word
    word: moved
    stem: move
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  around: !ruby/object:Word
    word: around
    stem: around
    docFrequency: 6.0
    docPositions:
    - 116
    - 135
    - 610
    - 902
  according: !ruby/object:Word
    word: according
    stem: accord
    docFrequency: 8.0
    docPositions:
    - 116
    - 124
    - 613
    - 664
    - 685
    - 902
  certain: !ruby/object:Word
    word: certain
    stem: certain
    docFrequency: 5.0
    docPositions:
    - 116
    - 670
    - 902
  rules: !ruby/object:Word
    word: rules
    stem: rule
    docFrequency: 5.0
    docPositions:
    - 116
    - 135
    - 902
  sums: !ruby/object:Word
    word: sums
    stem: sum
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  money: !ruby/object:Word
    word: money
    stem: monei
    docFrequency: 3.0
    docPositions:
    - 116
    - 902
  ancient: !ruby/object:Word
    word: ancient
    stem: ancient
    docFrequency: 4.0
    docPositions:
    - 121
    - 614
    - 618
  greek: !ruby/object:Word
    word: greek
    stem: greek
    docFrequency: 4.0
    docPositions:
    - 121
    - 124
    - 902
  designed: !ruby/object:Word
    word: designed
    stem: design
    docFrequency: 26.0
    docPositions:
    - 121
    - 124
    - 138
    - 147
    - 158
    - 211
    - 222
    - 226
    - 273
    - 297
    - 357
    - 381
    - 384
    - 668
    - 902
  antikythera: !ruby/object:Word
    word: antikythera
    stem: antikythera
    docFrequency: 13.0
    docPositions:
    - 121
    - 124
    - 615
    - 693
    - 902
  mechanism: !ruby/object:Word
    word: mechanism
    stem: mechan
    docFrequency: 10.0
    docPositions:
    - 121
    - 124
    - 615
    - 624
    - 693
    - 902
  dating: !ruby/object:Word
    word: dating
    stem: date
    docFrequency: 2.0
    docPositions:
    - 121
  between: !ruby/object:Word
    word: between
    stem: between
    docFrequency: 20.0
    docPositions:
    - 121
    - 124
    - 212
    - 350
    - 352
    - 356
    - 371
    - 374
    - 395
    - 611
    - 668
    - 902
  s: !ruby/object:Word
    word: s
    stem: s
    docFrequency: 90.0
    docPositions:
    - 121
    - 144
    - 148
    - 154
    - 162
    - 170
    - 174
    - 185
    - 194
    - 211
    - 212
    - 225
    - 238
    - 242
    - 262
    - 263
    - 279
    - 297
    - 320
    - 322
    - 350
    - 351
    - 352
    - 356
    - 357
    - 395
    - 436
    - 620
    - 622
    - 627
    - 631
    - 636
    - 637
    - 640
    - 641
    - 647
    - 660
    - 662
    - 663
    - 672
    - 697
    - 708
    - 878
    - 902
  oldest: !ruby/object:Word
    word: oldest
    stem: oldest
    docFrequency: 2.0
    docPositions:
    - 121
  believed: !ruby/object:Word
    word: believed
    stem: believ
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  derek: !ruby/object:Word
    word: derek
    stem: derek
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  j: !ruby/object:Word
    word: j
    stem: j
    docFrequency: 14.0
    docPositions:
    - 124
    - 194
    - 212
    - 256
    - 616
    - 621
    - 632
    - 674
    - 691
    - 902
  de: !ruby/object:Word
    word: de
    stem: de
    docFrequency: 6.0
    docPositions:
    - 124
    - 619
    - 620
    - 798
    - 902
  solla: !ruby/object:Word
    word: solla
    stem: solla
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  price: !ruby/object:Word
    word: price
    stem: price
    docFrequency: 4.0
    docPositions:
    - 124
    - 620
    - 902
  calculate: !ruby/object:Word
    word: calculate
    stem: calcul
    docFrequency: 9.0
    docPositions:
    - 124
    - 127
    - 137
    - 424
    - 902
  positions: !ruby/object:Word
    word: positions
    stem: posit
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  discovered: !ruby/object:Word
    word: discovered
    stem: discov
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  wreck: !ruby/object:Word
    word: wreck
    stem: wreck
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  'off': !ruby/object:Word
    word: 'off'
    stem: 'off'
    docFrequency: 13.0
    docPositions:
    - 124
    - 221
    - 310
    - 356
    - 902
  island: !ruby/object:Word
    word: island
    stem: island
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  kythera: !ruby/object:Word
    word: kythera
    stem: kythera
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  crete: !ruby/object:Word
    word: crete
    stem: crete
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  has: !ruby/object:Word
    word: has
    stem: ha
    docFrequency: 25.0
    docPositions:
    - 124
    - 287
    - 309
    - 350
    - 374
    - 397
    - 545
    - 580
    - 586
    - 672
    - 681
    - 718
    - 902
  dated: !ruby/object:Word
    word: dated
    stem: date
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  circa: !ruby/object:Word
    word: circa
    stem: circa
    docFrequency: 5.0
    docPositions:
    - 124
    - 125
    - 902
  complexity: !ruby/object:Word
    word: complexity
    stem: complex
    docFrequency: 5.0
    docPositions:
    - 124
    - 231
    - 902
  comparable: !ruby/object:Word
    word: comparable
    stem: compar
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  not: !ruby/object:Word
    word: not
    stem: not
    docFrequency: 42.0
    docPositions:
    - 124
    - 148
    - 157
    - 162
    - 185
    - 222
    - 225
    - 243
    - 286
    - 297
    - 338
    - 339
    - 350
    - 351
    - 356
    - 374
    - 419
    - 483
    - 630
    - 670
    - 672
    - 807
    - 902
  reappear: !ruby/object:Word
    word: reappear
    stem: reappear
    docFrequency: 3.0
    docPositions:
    - 124
    - 902
  thousand: !ruby/object:Word
    word: thousand
    stem: thousand
    docFrequency: 6.0
    docPositions:
    - 124
    - 194
    - 610
    - 902
  calculation: !ruby/object:Word
    word: calculation
    stem: calcul
    docFrequency: 9.0
    docPositions:
    - 125
    - 173
    - 176
    - 242
    - 902
  measurement: !ruby/object:Word
    word: measurement
    stem: measur
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  constructed: !ruby/object:Word
    word: constructed
    stem: construct
    docFrequency: 5.0
    docPositions:
    - 125
    - 334
    - 902
  planisphere: !ruby/object:Word
    word: planisphere
    stem: planispher
    docFrequency: 5.0
    docPositions:
    - 125
    - 902
  star: !ruby/object:Word
    word: star
    stem: star
    docFrequency: 4.0
    docPositions:
    - 125
    - 651
    - 902
  chart: !ruby/object:Word
    word: chart
    stem: chart
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  ab: !ruby/object:Word
    word: ab
    stem: ab
    docFrequency: 5.0
    docPositions:
    - 125
    - 902
  rayh: !ruby/object:Word
    word: rayh
    stem: rayh
    docFrequency: 5.0
    docPositions:
    - 125
    - 902
  n: !ruby/object:Word
    word: n
    stem: n
    docFrequency: 17.0
    docPositions:
    - 125
    - 253
    - 612
    - 657
    - 696
    - 878
    - 902
  al: !ruby/object:Word
    word: al
    stem: al
    docFrequency: 6.0
    docPositions:
    - 125
    - 622
    - 902
  b: !ruby/object:Word
    word: b
    stem: b
    docFrequency: 12.0
    docPositions:
    - 125
    - 624
    - 628
    - 640
    - 650
    - 711
    - 878
    - 902
  r: !ruby/object:Word
    word: r
    stem: r
    docFrequency: 9.0
    docPositions:
    - 125
    - 619
    - 636
    - 650
    - 878
    - 902
  astrolabe: !ruby/object:Word
    word: astrolabe
    stem: astrolab
    docFrequency: 9.0
    docPositions:
    - 125
    - 902
  hellenistic: !ruby/object:Word
    word: hellenistic
    stem: hellenist
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  either: !ruby/object:Word
    word: either
    stem: either
    docFrequency: 7.0
    docPositions:
    - 125
    - 273
    - 351
    - 902
  centuries: !ruby/object:Word
    word: centuries
    stem: centuri
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  often: !ruby/object:Word
    word: often
    stem: often
    docFrequency: 41.0
    docPositions:
    - 125
    - 230
    - 273
    - 279
    - 309
    - 320
    - 331
    - 340
    - 352
    - 356
    - 357
    - 368
    - 385
    - 397
    - 422
    - 668
    - 669
    - 673
    - 681
    - 902
  attributed: !ruby/object:Word
    word: attributed
    stem: attribut
    docFrequency: 5.0
    docPositions:
    - 125
    - 148
    - 902
  hipparchus: !ruby/object:Word
    word: hipparchus
    stem: hipparchu
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  combination: !ruby/object:Word
    word: combination
    stem: combin
    docFrequency: 5.0
    docPositions:
    - 125
    - 545
    - 902
  dioptra: !ruby/object:Word
    word: dioptra
    stem: dioptra
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  effectively: !ruby/object:Word
    word: effectively
    stem: effect
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  working: !ruby/object:Word
    word: working
    stem: work
    docFrequency: 17.0
    docPositions:
    - 125
    - 147
    - 174
    - 176
    - 211
    - 224
    - 225
    - 397
    - 902
  different: !ruby/object:Word
    word: different
    stem: differ
    docFrequency: 32.0
    docPositions:
    - 125
    - 136
    - 242
    - 262
    - 279
    - 322
    - 350
    - 351
    - 424
    - 534
    - 668
    - 902
  kinds: !ruby/object:Word
    word: kinds
    stem: kind
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  problems: !ruby/object:Word
    word: problems
    stem: problem
    docFrequency: 17.0
    docPositions:
    - 125
    - 126
    - 135
    - 194
    - 225
    - 287
    - 424
    - 428
    - 902
  spherical: !ruby/object:Word
    word: spherical
    stem: spheric
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  astronomy: !ruby/object:Word
    word: astronomy
    stem: astronomi
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  incorporating: !ruby/object:Word
    word: incorporating
    stem: incorpor
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  calendar: !ruby/object:Word
    word: calendar
    stem: calendar
    docFrequency: 6.0
    docPositions:
    - 125
    - 622
    - 902
  gear: !ruby/object:Word
    word: gear
    stem: gear
    docFrequency: 7.0
    docPositions:
    - 125
    - 902
  wheels: !ruby/object:Word
    word: wheels
    stem: wheel
    docFrequency: 7.0
    docPositions:
    - 125
    - 136
    - 902
  abi: !ruby/object:Word
    word: abi
    stem: abi
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  bakr: !ruby/object:Word
    word: bakr
    stem: bakr
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  isfahan: !ruby/object:Word
    word: isfahan
    stem: isfahan
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  persia: !ruby/object:Word
    word: persia
    stem: persia
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  geared: !ruby/object:Word
    word: geared
    stem: gear
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  lunisolar: !ruby/object:Word
    word: lunisolar
    stem: lunisolar
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  fixed: !ruby/object:Word
    word: fixed
    stem: fix
    docFrequency: 7.0
    docPositions:
    - 125
    - 176
    - 203
    - 902
  wired: !ruby/object:Word
    word: wired
    stem: wire
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  knowledge: !ruby/object:Word
    word: knowledge
    stem: knowledg
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  train: !ruby/object:Word
    word: train
    stem: train
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  ad: !ruby/object:Word
    word: ad
    stem: ad
    docFrequency: 3.0
    docPositions:
    - 125
    - 902
  sector: !ruby/object:Word
    word: sector
    stem: sector
    docFrequency: 3.0
    docPositions:
    - 126
    - 902
  instrument: !ruby/object:Word
    word: instrument
    stem: instrument
    docFrequency: 5.0
    docPositions:
    - 126
    - 127
    - 902
  solving: !ruby/object:Word
    word: solving
    stem: solv
    docFrequency: 5.0
    docPositions:
    - 126
    - 135
    - 902
  proportion: !ruby/object:Word
    word: proportion
    stem: proport
    docFrequency: 7.0
    docPositions:
    - 126
    - 374
    - 397
    - 902
  trigonometry: !ruby/object:Word
    word: trigonometry
    stem: trigonometri
    docFrequency: 9.0
    docPositions:
    - 126
    - 135
    - 165
    - 338
    - 902
  multiplication: !ruby/object:Word
    word: multiplication
    stem: multipl
    docFrequency: 7.0
    docPositions:
    - 126
    - 135
    - 338
    - 902
  division: !ruby/object:Word
    word: division
    stem: divis
    docFrequency: 10.0
    docPositions:
    - 126
    - 135
    - 222
    - 338
    - 670
    - 902
  functions: !ruby/object:Word
    word: functions
    stem: function
    docFrequency: 9.0
    docPositions:
    - 126
    - 135
    - 338
    - 902
  squares: !ruby/object:Word
    word: squares
    stem: squar
    docFrequency: 5.0
    docPositions:
    - 126
    - 135
    - 902
  cube: !ruby/object:Word
    word: cube
    stem: cube
    docFrequency: 5.0
    docPositions:
    - 126
    - 135
    - 902
  roots: !ruby/object:Word
    word: roots
    stem: root
    docFrequency: 9.0
    docPositions:
    - 126
    - 135
    - 338
    - 902
  late: !ruby/object:Word
    word: late
    stem: late
    docFrequency: 3.0
    docPositions:
    - 126
    - 902
  application: !ruby/object:Word
    word: application
    stem: applic
    docFrequency: 6.0
    docPositions:
    - 126
    - 225
    - 514
    - 902
  gunnery: !ruby/object:Word
    word: gunnery
    stem: gunneri
    docFrequency: 3.0
    docPositions:
    - 126
    - 902
  surveying: !ruby/object:Word
    word: surveying
    stem: survei
    docFrequency: 3.0
    docPositions:
    - 126
    - 902
  planimeter: !ruby/object:Word
    word: planimeter
    stem: planimet
    docFrequency: 3.0
    docPositions:
    - 127
    - 902
  manual: !ruby/object:Word
    word: manual
    stem: manual
    docFrequency: 5.0
    docPositions:
    - 127
    - 193
    - 902
  area: !ruby/object:Word
    word: area
    stem: area
    docFrequency: 5.0
    docPositions:
    - 127
    - 352
    - 902
  closed: !ruby/object:Word
    word: closed
    stem: close
    docFrequency: 3.0
    docPositions:
    - 127
    - 902
  figure: !ruby/object:Word
    word: figure
    stem: figur
    docFrequency: 3.0
    docPositions:
    - 127
    - 902
  tracing: !ruby/object:Word
    word: tracing
    stem: trace
    docFrequency: 3.0
    docPositions:
    - 127
    - 902
  over: !ruby/object:Word
    word: over
    stem: over
    docFrequency: 12.0
    docPositions:
    - 127
    - 194
    - 231
    - 243
    - 698
    - 902
  linkage: !ruby/object:Word
    word: linkage
    stem: linkag
    docFrequency: 3.0
    docPositions:
    - 127
    - 902
  slide: !ruby/object:Word
    word: slide
    stem: slide
    docFrequency: 12.0
    docPositions:
    - 132
    - 135
    - 160
    - 902
  rule: !ruby/object:Word
    word: rule
    stem: rule
    docFrequency: 10.0
    docPositions:
    - 132
    - 135
    - 160
    - 902
  shortly: !ruby/object:Word
    word: shortly
    stem: shortli
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  after: !ruby/object:Word
    word: after
    stem: after
    docFrequency: 13.0
    docPositions:
    - 135
    - 147
    - 184
    - 262
    - 298
    - 624
    - 645
    - 902
  publication: !ruby/object:Word
    word: publication
    stem: public
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  concept: !ruby/object:Word
    word: concept
    stem: concept
    docFrequency: 9.0
    docPositions:
    - 135
    - 147
    - 163
    - 262
    - 902
  logarithm: !ruby/object:Word
    word: logarithm
    stem: logarithm
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  hand: !ruby/object:Word
    word: hand
    stem: hand
    docFrequency: 14.0
    docPositions:
    - 135
    - 148
    - 244
    - 276
    - 559
    - 708
    - 902
  operated: !ruby/object:Word
    word: operated
    stem: oper
    docFrequency: 9.0
    docPositions:
    - 135
    - 174
    - 559
    - 902
  doing: !ruby/object:Word
    word: doing
    stem: do
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  progressed: !ruby/object:Word
    word: progressed
    stem: progress
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  added: !ruby/object:Word
    word: added
    stem: ad
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  scales: !ruby/object:Word
    word: scales
    stem: scale
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  provided: !ruby/object:Word
    word: provided
    stem: provid
    docFrequency: 5.0
    docPositions:
    - 135
    - 147
    - 902
  reciprocals: !ruby/object:Word
    word: reciprocals
    stem: reciproc
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  square: !ruby/object:Word
    word: square
    stem: squar
    docFrequency: 7.0
    docPositions:
    - 135
    - 194
    - 338
    - 902
  cubes: !ruby/object:Word
    word: cubes
    stem: cube
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  well: !ruby/object:Word
    word: well
    stem: well
    docFrequency: 10.0
    docPositions:
    - 135
    - 165
    - 385
    - 586
    - 668
    - 902
  transcendental: !ruby/object:Word
    word: transcendental
    stem: transcendent
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  logarithms: !ruby/object:Word
    word: logarithms
    stem: logarithm
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  exponentials: !ruby/object:Word
    word: exponentials
    stem: exponenti
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  circular: !ruby/object:Word
    word: circular
    stem: circular
    docFrequency: 5.0
    docPositions:
    - 135
    - 902
  hyperbolic: !ruby/object:Word
    word: hyperbolic
    stem: hyperbol
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  aviation: !ruby/object:Word
    word: aviation
    stem: aviat
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  few: !ruby/object:Word
    word: few
    stem: few
    docFrequency: 9.0
    docPositions:
    - 135
    - 231
    - 244
    - 902
  fields: !ruby/object:Word
    word: fields
    stem: field
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  still: !ruby/object:Word
    word: still
    stem: still
    docFrequency: 6.0
    docPositions:
    - 135
    - 136
    - 681
    - 902
  widespread: !ruby/object:Word
    word: widespread
    stem: widespread
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  particularly: !ruby/object:Word
    word: particularly
    stem: particularli
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  distance: !ruby/object:Word
    word: distance
    stem: distanc
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  light: !ruby/object:Word
    word: light
    stem: light
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  save: !ruby/object:Word
    word: save
    stem: save
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  ease: !ruby/object:Word
    word: ease
    stem: eas
    docFrequency: 5.0
    docPositions:
    - 135
    - 350
    - 902
  reading: !ruby/object:Word
    word: reading
    stem: read
    docFrequency: 6.0
    docPositions:
    - 135
    - 243
    - 667
    - 902
  these: !ruby/object:Word
    word: these
    stem: these
    docFrequency: 43.0
    docPositions:
    - 135
    - 138
    - 157
    - 159
    - 173
    - 212
    - 228
    - 242
    - 262
    - 263
    - 281
    - 309
    - 310
    - 322
    - 332
    - 339
    - 397
    - 407
    - 611
    - 613
    - 681
    - 902
  rather: !ruby/object:Word
    word: rather
    stem: rather
    docFrequency: 4.0
    docPositions:
    - 135
    - 669
    - 902
  classic: !ruby/object:Word
    word: classic
    stem: classic
    docFrequency: 4.0
    docPositions:
    - 135
    - 494
    - 902
  linear: !ruby/object:Word
    word: linear
    stem: linear
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  shape: !ruby/object:Word
    word: shape
    stem: shape
    docFrequency: 3.0
    docPositions:
    - 135
    - 902
  popular: !ruby/object:Word
    word: popular
    stem: popular
    docFrequency: 5.0
    docPositions:
    - 135
    - 419
    - 902
  pierre: !ruby/object:Word
    word: pierre
    stem: pierr
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  jaquet: !ruby/object:Word
    word: jaquet
    stem: jaquet
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  droz: !ruby/object:Word
    word: droz
    stem: droz
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  swiss: !ruby/object:Word
    word: swiss
    stem: swiss
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  watchmaker: !ruby/object:Word
    word: watchmaker
    stem: watchmak
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  built: !ruby/object:Word
    word: built
    stem: built
    docFrequency: 32.0
    docPositions:
    - 136
    - 159
    - 174
    - 176
    - 185
    - 193
    - 194
    - 211
    - 212
    - 222
    - 422
    - 659
    - 902
  doll: !ruby/object:Word
    word: doll
    stem: doll
    docFrequency: 5.0
    docPositions:
    - 136
    - 902
  automata: !ruby/object:Word
    word: automata
    stem: automata
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  could: !ruby/object:Word
    word: could
    stem: could
    docFrequency: 23.0
    docPositions:
    - 136
    - 147
    - 148
    - 163
    - 174
    - 193
    - 194
    - 221
    - 667
    - 713
    - 902
  write: !ruby/object:Word
    word: write
    stem: write
    docFrequency: 10.0
    docPositions:
    - 136
    - 222
    - 231
    - 263
    - 329
    - 902
  holding: !ruby/object:Word
    word: holding
    stem: hold
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  quill: !ruby/object:Word
    word: quill
    stem: quill
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  pen: !ruby/object:Word
    word: pen
    stem: pen
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  switching: !ruby/object:Word
    word: switching
    stem: switch
    docFrequency: 6.0
    docPositions:
    - 136
    - 374
    - 694
    - 902
  internal: !ruby/object:Word
    word: internal
    stem: intern
    docFrequency: 5.0
    docPositions:
    - 136
    - 243
    - 902
  letters: !ruby/object:Word
    word: letters
    stem: letter
    docFrequency: 5.0
    docPositions:
    - 136
    - 350
    - 902
  hence: !ruby/object:Word
    word: hence
    stem: henc
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  messages: !ruby/object:Word
    word: messages
    stem: messag
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  produced: !ruby/object:Word
    word: produced
    stem: produc
    docFrequency: 5.0
    docPositions:
    - 136
    - 225
    - 902
  effect: !ruby/object:Word
    word: effect
    stem: effect
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  mechanically: !ruby/object:Word
    word: mechanically
    stem: mechan
    docFrequency: 7.0
    docPositions:
    - 136
    - 176
    - 193
    - 902
  instructions: !ruby/object:Word
    word: instructions
    stem: instruct
    docFrequency: 64.0
    docPositions:
    - 136
    - 203
    - 230
    - 231
    - 242
    - 243
    - 244
    - 262
    - 297
    - 320
    - 331
    - 340
    - 350
    - 356
    - 372
    - 409
    - 672
    - 673
    - 902
  along: !ruby/object:Word
    word: along
    stem: along
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  two: !ruby/object:Word
    word: two
    stem: two
    docFrequency: 19.0
    docPositions:
    - 136
    - 244
    - 262
    - 273
    - 337
    - 351
    - 352
    - 353
    - 902
  complex: !ruby/object:Word
    word: complex
    stem: complex
    docFrequency: 16.0
    docPositions:
    - 136
    - 194
    - 262
    - 287
    - 332
    - 338
    - 368
    - 674
    - 902
  mus: !ruby/object:Word
    word: mus
    stem: mu
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  e: !ruby/object:Word
    word: e
    stem: e
    docFrequency: 20.0
    docPositions:
    - 136
    - 176
    - 371
    - 397
    - 518
    - 650
    - 654
    - 655
    - 656
    - 702
    - 735
    - 878
    - 902
  d: !ruby/object:Word
    word: d
    stem: d
    docFrequency: 14.0
    docPositions:
    - 136
    - 224
    - 620
    - 628
    - 640
    - 657
    - 684
    - 697
    - 878
    - 902
  art: !ruby/object:Word
    word: art
    stem: art
    docFrequency: 5.0
    docPositions:
    - 136
    - 159
    - 902
  et: !ruby/object:Word
    word: et
    stem: et
    docFrequency: 5.0
    docPositions:
    - 136
    - 706
    - 878
    - 902
  histoire: !ruby/object:Word
    word: histoire
    stem: histoir
    docFrequency: 5.0
    docPositions:
    - 136
    - 706
    - 902
  neuch: !ruby/object:Word
    word: neuch
    stem: neuch
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  tel: !ruby/object:Word
    word: tel
    stem: tel
    docFrequency: 3.0
    docPositions:
    - 136
    - 902
  switzerland: !ruby/object:Word
    word: switzerland
    stem: switzerland
    docFrequency: 4.0
    docPositions:
    - 136
    - 623
    - 902
  operates: !ruby/object:Word
    word: operates
    stem: oper
    docFrequency: 5.0
    docPositions:
    - 136
    - 262
    - 902
  tide: !ruby/object:Word
    word: tide
    stem: tide
    docFrequency: 8.0
    docPositions:
    - 137
    - 154
    - 158
    - 902
  predicting: !ruby/object:Word
    word: predicting
    stem: predict
    docFrequency: 6.0
    docPositions:
    - 137
    - 154
    - 158
    - 902
  sir: !ruby/object:Word
    word: sir
    stem: sir
    docFrequency: 6.0
    docPositions:
    - 137
    - 154
    - 158
    - 902
  william: !ruby/object:Word
    word: william
    stem: william
    docFrequency: 6.0
    docPositions:
    - 137
    - 154
    - 158
    - 902
  thomson: !ruby/object:Word
    word: thomson
    stem: thomson
    docFrequency: 10.0
    docPositions:
    - 137
    - 154
    - 158
    - 159
    - 902
  great: !ruby/object:Word
    word: great
    stem: great
    docFrequency: 6.0
    docPositions:
    - 137
    - 224
    - 616
    - 902
  utility: !ruby/object:Word
    word: utility
    stem: util
    docFrequency: 3.0
    docPositions:
    - 137
    - 902
  shallow: !ruby/object:Word
    word: shallow
    stem: shallow
    docFrequency: 3.0
    docPositions:
    - 137
    - 902
  waters: !ruby/object:Word
    word: waters
    stem: water
    docFrequency: 3.0
    docPositions:
    - 137
    - 902
  pulleys: !ruby/object:Word
    word: pulleys
    stem: pullei
    docFrequency: 3.0
    docPositions:
    - 137
    - 902
  wires: !ruby/object:Word
    word: wires
    stem: wire
    docFrequency: 5.0
    docPositions:
    - 137
    - 309
    - 902
  predicted: !ruby/object:Word
    word: predicted
    stem: predict
    docFrequency: 3.0
    docPositions:
    - 137
    - 902
  levels: !ruby/object:Word
    word: levels
    stem: level
    docFrequency: 3.0
    docPositions:
    - 137
    - 902
  period: !ruby/object:Word
    word: period
    stem: period
    docFrequency: 3.0
    docPositions:
    - 137
    - 902
  particular: !ruby/object:Word
    word: particular
    stem: particular
    docFrequency: 12.0
    docPositions:
    - 137
    - 276
    - 317
    - 338
    - 385
    - 424
    - 902
  location: !ruby/object:Word
    word: location
    stem: locat
    docFrequency: 11.0
    docPositions:
    - 137
    - 242
    - 321
    - 326
    - 329
    - 902
  differential: !ruby/object:Word
    word: differential
    stem: differenti
    docFrequency: 15.0
    docPositions:
    - 138
    - 158
    - 159
    - 902
  analyser: !ruby/object:Word
    word: analyser
    stem: analys
    docFrequency: 5.0
    docPositions:
    - 138
    - 158
    - 902
  equations: !ruby/object:Word
    word: equations
    stem: equat
    docFrequency: 5.0
    docPositions:
    - 138
    - 158
    - 902
  integration: !ruby/object:Word
    word: integration
    stem: integr
    docFrequency: 7.0
    docPositions:
    - 138
    - 158
    - 902
  wheel: !ruby/object:Word
    word: wheel
    stem: wheel
    docFrequency: 5.0
    docPositions:
    - 138
    - 158
    - 902
  disc: !ruby/object:Word
    word: disc
    stem: disc
    docFrequency: 8.0
    docPositions:
    - 138
    - 158
    - 367
    - 475
    - 902
  mechanisms: !ruby/object:Word
    word: mechanisms
    stem: mechan
    docFrequency: 5.0
    docPositions:
    - 138
    - 158
    - 902
  perform: !ruby/object:Word
    word: perform
    stem: perform
    docFrequency: 30.0
    docPositions:
    - 138
    - 163
    - 173
    - 185
    - 243
    - 244
    - 260
    - 262
    - 328
    - 338
    - 340
    - 368
    - 409
    - 902
  lord: !ruby/object:Word
    word: lord
    stem: lord
    docFrequency: 5.0
    docPositions:
    - 138
    - 158
    - 902
  kelvin: !ruby/object:Word
    word: kelvin
    stem: kelvin
    docFrequency: 5.0
    docPositions:
    - 138
    - 158
    - 902
  had: !ruby/object:Word
    word: had
    stem: had
    docFrequency: 27.0
    docPositions:
    - 138
    - 148
    - 160
    - 165
    - 173
    - 185
    - 193
    - 194
    - 203
    - 211
    - 221
    - 225
    - 902
  already: !ruby/object:Word
    word: already
    stem: alreadi
    docFrequency: 3.0
    docPositions:
    - 138
    - 902
  discussed: !ruby/object:Word
    word: discussed
    stem: discuss
    docFrequency: 3.0
    docPositions:
    - 138
    - 902
  possible: !ruby/object:Word
    word: possible
    stem: possibl
    docFrequency: 22.0
    docPositions:
    - 138
    - 147
    - 162
    - 176
    - 263
    - 279
    - 351
    - 396
    - 428
    - 682
    - 902
  construction: !ruby/object:Word
    word: construction
    stem: construct
    docFrequency: 5.0
    docPositions:
    - 138
    - 194
    - 902
  calculators: !ruby/object:Word
    word: calculators
    stem: calcul
    docFrequency: 7.0
    docPositions:
    - 138
    - 409
    - 435
    - 440
    - 902
  but: !ruby/object:Word
    word: but
    stem: but
    docFrequency: 33.0
    docPositions:
    - 138
    - 148
    - 160
    - 185
    - 244
    - 297
    - 334
    - 350
    - 351
    - 356
    - 357
    - 374
    - 397
    - 902
  stymied: !ruby/object:Word
    word: stymied
    stem: stymi
    docFrequency: 3.0
    docPositions:
    - 138
    - 902
  torque: !ruby/object:Word
    word: torque
    stem: torqu
    docFrequency: 7.0
    docPositions:
    - 138
    - 159
    - 902
  ball: !ruby/object:Word
    word: ball
    stem: ball
    docFrequency: 5.0
    docPositions:
    - 138
    - 422
    - 902
  disk: !ruby/object:Word
    word: disk
    stem: disk
    docFrequency: 16.0
    docPositions:
    - 138
    - 356
    - 364
    - 367
    - 419
    - 475
    - 902
  integrators: !ruby/object:Word
    word: integrators
    stem: integr
    docFrequency: 5.0
    docPositions:
    - 138
    - 159
    - 902
  analyzer: !ruby/object:Word
    word: analyzer
    stem: analyz
    docFrequency: 5.0
    docPositions:
    - 138
    - 159
    - 902
  integrator: !ruby/object:Word
    word: integrator
    stem: integr
    docFrequency: 8.0
    docPositions:
    - 138
    - 193
    - 645
    - 902
  drove: !ruby/object:Word
    word: drove
    stem: drove
    docFrequency: 5.0
    docPositions:
    - 138
    - 173
    - 902
  next: !ruby/object:Word
    word: next
    stem: next
    docFrequency: 12.0
    docPositions:
    - 138
    - 224
    - 255
    - 321
    - 323
    - 325
    - 331
    - 902
  graphing: !ruby/object:Word
    word: graphing
    stem: graph
    docFrequency: 3.0
    docPositions:
    - 138
    - 902
  amplifier: !ruby/object:Word
    word: amplifier
    stem: amplifi
    docFrequency: 3.0
    docPositions:
    - 138
    - 902
  advance: !ruby/object:Word
    word: advance
    stem: advanc
    docFrequency: 5.0
    docPositions:
    - 138
    - 224
    - 902
  allowed: !ruby/object:Word
    word: allowed
    stem: allow
    docFrequency: 5.0
    docPositions:
    - 138
    - 228
    - 902
  work: !ruby/object:Word
    word: work
    stem: work
    docFrequency: 10.0
    docPositions:
    - 138
    - 203
    - 384
    - 586
    - 631
    - 902
  starting: !ruby/object:Word
    word: starting
    stem: start
    docFrequency: 5.0
    docPositions:
    - 138
    - 159
    - 902
  vannevar: !ruby/object:Word
    word: vannevar
    stem: vannevar
    docFrequency: 5.0
    docPositions:
    - 138
    - 159
    - 902
  bush: !ruby/object:Word
    word: bush
    stem: bush
    docFrequency: 6.0
    docPositions:
    - 138
    - 159
    - 714
    - 902
  others: !ruby/object:Word
    word: others
    stem: other
    docFrequency: 9.0
    docPositions:
    - 138
    - 338
    - 534
    - 630
    - 902
  analyzers: !ruby/object:Word
    word: analyzers
    stem: analyz
    docFrequency: 3.0
    docPositions:
    - 138
    - 902
  portion: !ruby/object:Word
    word: portion
    stem: portion
    docFrequency: 5.0
    docPositions:
    - 144
    - 176
    - 392
    - 902
  babbage: !ruby/object:Word
    word: babbage
    stem: babbag
    docFrequency: 20.0
    docPositions:
    - 144
    - 147
    - 148
    - 174
    - 624
    - 625
    - 626
    - 627
    - 630
    - 691
    - 697
    - 709
    - 712
    - 713
    - 902
  difference: !ruby/object:Word
    word: difference
    stem: differ
    docFrequency: 5.0
    docPositions:
    - 144
    - 147
    - 436
    - 902
  engine: !ruby/object:Word
    word: engine
    stem: engin
    docFrequency: 16.0
    docPositions:
    - 144
    - 147
    - 148
    - 436
    - 438
    - 713
    - 714
    - 902
  charles: !ruby/object:Word
    word: charles
    stem: charl
    docFrequency: 10.0
    docPositions:
    - 147
    - 174
    - 625
    - 697
    - 709
    - 712
    - 713
    - 902
  engineer: !ruby/object:Word
    word: engineer
    stem: engin
    docFrequency: 7.0
    docPositions:
    - 147
    - 173
    - 176
    - 902
  polymath: !ruby/object:Word
    word: polymath
    stem: polymath
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  originated: !ruby/object:Word
    word: originated
    stem: origin
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  programmable: !ruby/object:Word
    word: programmable
    stem: programm
    docFrequency: 18.0
    docPositions:
    - 147
    - 157
    - 163
    - 174
    - 181
    - 185
    - 193
    - 419
    - 437
    - 442
    - 902
  father: !ruby/object:Word
    word: father
    stem: father
    docFrequency: 4.0
    docPositions:
    - 147
    - 625
    - 902
  conceptualized: !ruby/object:Word
    word: conceptualized
    stem: conceptu
    docFrequency: 5.0
    docPositions:
    - 147
    - 158
    - 902
  his: !ruby/object:Word
    word: his
    stem: hi
    docFrequency: 31.0
    docPositions:
    - 147
    - 148
    - 162
    - 174
    - 184
    - 203
    - 225
    - 902
  revolutionary: !ruby/object:Word
    word: revolutionary
    stem: revolutionari
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  navigational: !ruby/object:Word
    word: navigational
    stem: navig
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  realized: !ruby/object:Word
    word: realized
    stem: realiz
    docFrequency: 5.0
    docPositions:
    - 147
    - 226
    - 902
  analytical: !ruby/object:Word
    word: analytical
    stem: analyt
    docFrequency: 10.0
    docPositions:
    - 147
    - 148
    - 436
    - 438
    - 714
    - 902
  data: !ruby/object:Word
    word: data
    stem: data
    docFrequency: 48.0
    docPositions:
    - 147
    - 165
    - 174
    - 176
    - 185
    - 242
    - 262
    - 287
    - 326
    - 327
    - 342
    - 352
    - 356
    - 357
    - 483
    - 504
    - 559
    - 725
    - 798
    - 902
  via: !ruby/object:Word
    word: via
    stem: via
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  punched: !ruby/object:Word
    word: punched
    stem: punch
    docFrequency: 6.0
    docPositions:
    - 147
    - 174
    - 268
    - 902
  cards: !ruby/object:Word
    word: cards
    stem: card
    docFrequency: 5.0
    docPositions:
    - 147
    - 902
  method: !ruby/object:Word
    word: method
    stem: method
    docFrequency: 8.0
    docPositions:
    - 147
    - 273
    - 372
    - 667
    - 902
  being: !ruby/object:Word
    word: being
    stem: be
    docFrequency: 16.0
    docPositions:
    - 147
    - 185
    - 262
    - 273
    - 352
    - 384
    - 409
    - 613
    - 902
  direct: !ruby/object:Word
    word: direct
    stem: direct
    docFrequency: 9.0
    docPositions:
    - 147
    - 157
    - 281
    - 374
    - 902
  looms: !ruby/object:Word
    word: looms
    stem: loom
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  jacquard: !ruby/object:Word
    word: jacquard
    stem: jacquard
    docFrequency: 5.0
    docPositions:
    - 147
    - 438
    - 708
    - 902
  loom: !ruby/object:Word
    word: loom
    stem: loom
    docFrequency: 5.0
    docPositions:
    - 147
    - 438
    - 708
    - 902
  printer: !ruby/object:Word
    word: printer
    stem: printer
    docFrequency: 7.0
    docPositions:
    - 147
    - 367
    - 473
    - 574
    - 902
  curve: !ruby/object:Word
    word: curve
    stem: curv
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  plotter: !ruby/object:Word
    word: plotter
    stem: plotter
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  bell: !ruby/object:Word
    word: bell
    stem: bell
    docFrequency: 4.0
    docPositions:
    - 147
    - 498
    - 902
  able: !ruby/object:Word
    word: able
    stem: abl
    docFrequency: 19.0
    docPositions:
    - 147
    - 262
    - 279
    - 351
    - 409
    - 424
    - 586
    - 611
    - 668
    - 902
  punch: !ruby/object:Word
    word: punch
    stem: punch
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  numbers: !ruby/object:Word
    word: numbers
    stem: number
    docFrequency: 40.0
    docPositions:
    - 147
    - 162
    - 174
    - 244
    - 262
    - 263
    - 338
    - 350
    - 351
    - 613
    - 902
  onto: !ruby/object:Word
    word: onto
    stem: onto
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  incorporated: !ruby/object:Word
    word: incorporated
    stem: incorpor
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  flow: !ruby/object:Word
    word: flow
    stem: flow
    docFrequency: 7.0
    docPositions:
    - 147
    - 243
    - 331
    - 902
  conditional: !ruby/object:Word
    word: conditional
    stem: condit
    docFrequency: 7.0
    docPositions:
    - 147
    - 331
    - 339
    - 902
  branching: !ruby/object:Word
    word: branching
    stem: branch
    docFrequency: 3.0
    docPositions:
    - 147
    - 902
  loops: !ruby/object:Word
    word: loops
    stem: loop
    docFrequency: 5.0
    docPositions:
    - 147
    - 331
    - 902
  making: !ruby/object:Word
    word: making
    stem: make
    docFrequency: 8.0
    docPositions:
    - 147
    - 185
    - 244
    - 676
    - 902
  described: !ruby/object:Word
    word: described
    stem: describ
    docFrequency: 7.0
    docPositions:
    - 147
    - 162
    - 225
    - 902
  terms: !ruby/object:Word
    word: terms
    stem: term
    docFrequency: 7.0
    docPositions:
    - 147
    - 231
    - 885
    - 902
  turing: !ruby/object:Word
    word: turing
    stem: ture
    docFrequency: 38.0
    docPositions:
    - 147
    - 162
    - 163
    - 174
    - 185
    - 190
    - 193
    - 203
    - 409
    - 630
    - 902
  complete: !ruby/object:Word
    word: complete
    stem: complet
    docFrequency: 21.0
    docPositions:
    - 147
    - 148
    - 163
    - 174
    - 185
    - 190
    - 193
    - 260
    - 328
    - 374
    - 409
    - 902
  ahead: !ruby/object:Word
    word: ahead
    stem: ahead
    docFrequency: 7.0
    docPositions:
    - 148
    - 242
    - 902
  all: !ruby/object:Word
    word: all
    stem: all
    docFrequency: 35.0
    docPositions:
    - 148
    - 173
    - 176
    - 211
    - 225
    - 230
    - 244
    - 262
    - 321
    - 332
    - 351
    - 356
    - 407
    - 431
    - 613
    - 672
    - 687
    - 798
    - 902
  parts: !ruby/object:Word
    word: parts
    stem: part
    docFrequency: 15.0
    docPositions:
    - 148
    - 309
    - 310
    - 320
    - 431
    - 483
    - 902
  made: !ruby/object:Word
    word: made
    stem: made
    docFrequency: 23.0
    docPositions:
    - 148
    - 225
    - 242
    - 279
    - 297
    - 309
    - 396
    - 422
    - 902
  major: !ruby/object:Word
    word: major
    stem: major
    docFrequency: 4.0
    docPositions:
    - 148
    - 687
    - 902
  eventually: !ruby/object:Word
    word: eventually
    stem: eventu
    docFrequency: 8.0
    docPositions:
    - 148
    - 173
    - 422
    - 613
    - 902
  project: !ruby/object:Word
    word: project
    stem: project
    docFrequency: 7.0
    docPositions:
    - 148
    - 211
    - 615
    - 902
  dissolved: !ruby/object:Word
    word: dissolved
    stem: dissolv
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  decision: !ruby/object:Word
    word: decision
    stem: decis
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  british: !ruby/object:Word
    word: british
    stem: british
    docFrequency: 11.0
    docPositions:
    - 148
    - 184
    - 212
    - 652
    - 653
    - 699
    - 902
  government: !ruby/object:Word
    word: government
    stem: govern
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  cease: !ruby/object:Word
    word: cease
    stem: ceas
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  funding: !ruby/object:Word
    word: funding
    stem: fund
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  failure: !ruby/object:Word
    word: failure
    stem: failur
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  chiefly: !ruby/object:Word
    word: chiefly
    stem: chiefli
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  difficulties: !ruby/object:Word
    word: difficulties
    stem: difficulti
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  only: !ruby/object:Word
    word: only
    stem: onli
    docFrequency: 24.0
    docPositions:
    - 148
    - 297
    - 338
    - 355
    - 356
    - 372
    - 384
    - 385
    - 424
    - 534
    - 667
    - 672
    - 676
    - 798
    - 902
  politics: !ruby/object:Word
    word: politics
    stem: polit
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  financing: !ruby/object:Word
    word: financing
    stem: financ
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  desire: !ruby/object:Word
    word: desire
    stem: desir
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  develop: !ruby/object:Word
    word: develop
    stem: develop
    docFrequency: 5.0
    docPositions:
    - 148
    - 211
    - 902
  increasingly: !ruby/object:Word
    word: increasingly
    stem: increasingli
    docFrequency: 9.0
    docPositions:
    - 148
    - 157
    - 384
    - 397
    - 902
  sophisticated: !ruby/object:Word
    word: sophisticated
    stem: sophist
    docFrequency: 9.0
    docPositions:
    - 148
    - 157
    - 184
    - 357
    - 902
  move: !ruby/object:Word
    word: move
    stem: move
    docFrequency: 8.0
    docPositions:
    - 148
    - 242
    - 357
    - 798
    - 902
  faster: !ruby/object:Word
    word: faster
    stem: faster
    docFrequency: 16.0
    docPositions:
    - 148
    - 173
    - 185
    - 193
    - 194
    - 357
    - 372
    - 711
    - 902
  anyone: !ruby/object:Word
    word: anyone
    stem: anyon
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  else: !ruby/object:Word
    word: else
    stem: els
    docFrequency: 5.0
    docPositions:
    - 148
    - 372
    - 902
  follow: !ruby/object:Word
    word: follow
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  nevertheless: !ruby/object:Word
    word: nevertheless
    stem: nevertheless
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  son: !ruby/object:Word
    word: son
    stem: son
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  henry: !ruby/object:Word
    word: henry
    stem: henri
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  completed: !ruby/object:Word
    word: completed
    stem: complet
    docFrequency: 5.0
    docPositions:
    - 148
    - 222
    - 902
  simplified: !ruby/object:Word
    word: simplified
    stem: simplifi
    docFrequency: 5.0
    docPositions:
    - 148
    - 322
    - 902
  version: !ruby/object:Word
    word: version
    stem: version
    docFrequency: 6.0
    docPositions:
    - 148
    - 222
    - 872
    - 902
  mill: !ruby/object:Word
    word: mill
    stem: mill
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  gave: !ruby/object:Word
    word: gave
    stem: gave
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  successful: !ruby/object:Word
    word: successful
    stem: success
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  demonstration: !ruby/object:Word
    word: demonstration
    stem: demonstr
    docFrequency: 3.0
    docPositions:
    - 148
    - 902
  half: !ruby/object:Word
    word: half
    stem: half
    docFrequency: 5.0
    docPositions:
    - 157
    - 225
    - 902
  scientific: !ruby/object:Word
    word: scientific
    stem: scientif
    docFrequency: 5.0
    docPositions:
    - 157
    - 624
    - 697
    - 902
  needs: !ruby/object:Word
    word: needs
    stem: need
    docFrequency: 5.0
    docPositions:
    - 157
    - 279
    - 902
  met: !ruby/object:Word
    word: met
    stem: met
    docFrequency: 5.0
    docPositions:
    - 157
    - 243
    - 902
  electrical: !ruby/object:Word
    word: electrical
    stem: electr
    docFrequency: 6.0
    docPositions:
    - 157
    - 310
    - 583
    - 902
  model: !ruby/object:Word
    word: model
    stem: model
    docFrequency: 3.0
    docPositions:
    - 157
    - 902
  basis: !ruby/object:Word
    word: basis
    stem: basi
    docFrequency: 5.0
    docPositions:
    - 157
    - 203
    - 902
  lacked: !ruby/object:Word
    word: lacked
    stem: lack
    docFrequency: 3.0
    docPositions:
    - 157
    - 902
  versatility: !ruby/object:Word
    word: versatility
    stem: versatil
    docFrequency: 5.0
    docPositions:
    - 157
    - 409
    - 902
  accuracy: !ruby/object:Word
    word: accuracy
    stem: accuraci
    docFrequency: 3.0
    docPositions:
    - 157
    - 902
  james: !ruby/object:Word
    word: james
    stem: jame
    docFrequency: 6.0
    docPositions:
    - 158
    - 159
    - 708
    - 902
  brother: !ruby/object:Word
    word: brother
    stem: brother
    docFrequency: 3.0
    docPositions:
    - 158
    - 902
  famous: !ruby/object:Word
    word: famous
    stem: famou
    docFrequency: 3.0
    docPositions:
    - 158
    - 902
  reached: !ruby/object:Word
    word: reached
    stem: reach
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  zenith: !ruby/object:Word
    word: zenith
    stem: zenith
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  h: !ruby/object:Word
    word: h
    stem: h
    docFrequency: 8.0
    docPositions:
    - 159
    - 654
    - 655
    - 656
    - 902
  l: !ruby/object:Word
    word: l
    stem: l
    docFrequency: 9.0
    docPositions:
    - 159
    - 637
    - 671
    - 878
    - 902
  hazen: !ruby/object:Word
    word: hazen
    stem: hazen
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  mit: !ruby/object:Word
    word: mit
    stem: mit
    docFrequency: 6.0
    docPositions:
    - 159
    - 682
    - 705
    - 710
    - 902
  amplifiers: !ruby/object:Word
    word: amplifiers
    stem: amplifi
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  w: !ruby/object:Word
    word: w
    stem: w
    docFrequency: 10.0
    docPositions:
    - 159
    - 224
    - 268
    - 610
    - 639
    - 645
    - 797
    - 902
  nieman: !ruby/object:Word
    word: nieman
    stem: nieman
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  dozen: !ruby/object:Word
    word: dozen
    stem: dozen
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  before: !ruby/object:Word
    word: before
    stem: befor
    docFrequency: 9.0
    docPositions:
    - 159
    - 273
    - 373
    - 676
    - 687
    - 902
  obsolescence: !ruby/object:Word
    word: obsolescence
    stem: obsolesc
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  became: !ruby/object:Word
    word: became
    stem: becam
    docFrequency: 11.0
    docPositions:
    - 159
    - 162
    - 212
    - 397
    - 902
  obvious: !ruby/object:Word
    word: obvious
    stem: obviou
    docFrequency: 3.0
    docPositions:
    - 159
    - 902
  success: !ruby/object:Word
    word: success
    stem: success
    docFrequency: 3.0
    docPositions:
    - 160
    - 902
  spelled: !ruby/object:Word
    word: spelled
    stem: spell
    docFrequency: 3.0
    docPositions:
    - 160
    - 902
  remain: !ruby/object:Word
    word: remain
    stem: remain
    docFrequency: 3.0
    docPositions:
    - 160
    - 902
  education: !ruby/object:Word
    word: education
    stem: educ
    docFrequency: 5.0
    docPositions:
    - 160
    - 654
    - 656
    - 902
  systems: !ruby/object:Word
    word: systems
    stem: system
    docFrequency: 25.0
    docPositions:
    - 160
    - 228
    - 287
    - 320
    - 324
    - 371
    - 395
    - 397
    - 422
    - 486
    - 496
    - 532
    - 585
    - 614
    - 682
    - 902
  principle: !ruby/object:Word
    word: principle
    stem: principl
    docFrequency: 5.0
    docPositions:
    - 162
    - 409
    - 902
  mathematician: !ruby/object:Word
    word: mathematician
    stem: mathematician
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  pioneering: !ruby/object:Word
    word: pioneering
    stem: pioneer
    docFrequency: 5.0
    docPositions:
    - 162
    - 174
    - 902
  scientist: !ruby/object:Word
    word: scientist
    stem: scientist
    docFrequency: 8.0
    docPositions:
    - 162
    - 224
    - 298
    - 627
    - 902
  alan: !ruby/object:Word
    word: alan
    stem: alan
    docFrequency: 5.0
    docPositions:
    - 162
    - 203
    - 902
  idea: !ruby/object:Word
    word: idea
    stem: idea
    docFrequency: 9.0
    docPositions:
    - 162
    - 163
    - 224
    - 225
    - 902
  seminal: !ruby/object:Word
    word: seminal
    stem: semin
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  paper: !ruby/object:Word
    word: paper
    stem: paper
    docFrequency: 9.0
    docPositions:
    - 162
    - 163
    - 185
    - 203
    - 902
  computable: !ruby/object:Word
    word: computable
    stem: comput
    docFrequency: 7.0
    docPositions:
    - 162
    - 163
    - 424
    - 902
  reformulated: !ruby/object:Word
    word: reformulated
    stem: reformul
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  kurt: !ruby/object:Word
    word: kurt
    stem: kurt
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  g: !ruby/object:Word
    word: g
    stem: g
    docFrequency: 8.0
    docPositions:
    - 162
    - 616
    - 696
    - 878
    - 902
  del: !ruby/object:Word
    word: del
    stem: del
    docFrequency: 5.0
    docPositions:
    - 162
    - 902
  results: !ruby/object:Word
    word: results
    stem: result
    docFrequency: 5.0
    docPositions:
    - 162
    - 670
    - 902
  limits: !ruby/object:Word
    word: limits
    stem: limit
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  proof: !ruby/object:Word
    word: proof
    stem: proof
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  replacing: !ruby/object:Word
    word: replacing
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  universal: !ruby/object:Word
    word: universal
    stem: univers
    docFrequency: 14.0
    docPositions:
    - 162
    - 163
    - 424
    - 636
    - 637
    - 703
    - 902
  formal: !ruby/object:Word
    word: formal
    stem: formal
    docFrequency: 12.0
    docPositions:
    - 162
    - 287
    - 586
    - 769
    - 902
  simple: !ruby/object:Word
    word: simple
    stem: simpl
    docFrequency: 12.0
    docPositions:
    - 162
    - 242
    - 244
    - 287
    - 338
    - 878
    - 902
  hypothetical: !ruby/object:Word
    word: hypothetical
    stem: hypothet
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  proved: !ruby/object:Word
    word: proved
    stem: prove
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  performing: !ruby/object:Word
    word: performing
    stem: perform
    docFrequency: 11.0
    docPositions:
    - 162
    - 337
    - 338
    - 368
    - 409
    - 902
  any: !ruby/object:Word
    word: any
    stem: ani
    docFrequency: 34.0
    docPositions:
    - 162
    - 163
    - 193
    - 194
    - 262
    - 286
    - 338
    - 351
    - 357
    - 372
    - 409
    - 419
    - 424
    - 902
  conceivable: !ruby/object:Word
    word: conceivable
    stem: conceiv
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  mathematical: !ruby/object:Word
    word: mathematical
    stem: mathemat
    docFrequency: 9.0
    docPositions:
    - 162
    - 409
    - 419
    - 629
    - 693
    - 902
  if: !ruby/object:Word
    word: if
    stem: if
    docFrequency: 16.0
    docPositions:
    - 162
    - 252
    - 253
    - 328
    - 338
    - 351
    - 372
    - 374
    - 419
    - 902
  representable: !ruby/object:Word
    word: representable
    stem: represent
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  algorithm: !ruby/object:Word
    word: algorithm
    stem: algorithm
    docFrequency: 5.0
    docPositions:
    - 162
    - 163
    - 902
  went: !ruby/object:Word
    word: went
    stem: went
    docFrequency: 5.0
    docPositions:
    - 162
    - 176
    - 902
  prove: !ruby/object:Word
    word: prove
    stem: prove
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  there: !ruby/object:Word
    word: there
    stem: there
    docFrequency: 26.0
    docPositions:
    - 162
    - 222
    - 242
    - 332
    - 352
    - 357
    - 400
    - 424
    - 534
    - 580
    - 668
    - 672
    - 681
    - 902
  'no': !ruby/object:Word
    word: 'no'
    stem: 'no'
    docFrequency: 8.0
    docPositions:
    - 162
    - 273
    - 691
    - 700
    - 798
    - 902
  solution: !ruby/object:Word
    word: solution
    stem: solut
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  entscheidungsproblem: !ruby/object:Word
    word: entscheidungsproblem
    stem: entscheidungsproblem
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  showing: !ruby/object:Word
    word: showing
    stem: show
    docFrequency: 4.0
    docPositions:
    - 162
    - 317
    - 902
  halting: !ruby/object:Word
    word: halting
    stem: halt
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  undecidable: !ruby/object:Word
    word: undecidable
    stem: undecid
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  decide: !ruby/object:Word
    word: decide
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  algorithmically: !ruby/object:Word
    word: algorithmically
    stem: algorithm
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  whether: !ruby/object:Word
    word: whether
    stem: whether
    docFrequency: 5.0
    docPositions:
    - 162
    - 338
    - 902
  given: !ruby/object:Word
    word: given
    stem: given
    docFrequency: 19.0
    docPositions:
    - 162
    - 174
    - 230
    - 242
    - 262
    - 263
    - 297
    - 372
    - 409
    - 902
  ever: !ruby/object:Word
    word: ever
    stem: ever
    docFrequency: 5.0
    docPositions:
    - 162
    - 372
    - 902
  halt: !ruby/object:Word
    word: halt
    stem: halt
    docFrequency: 3.0
    docPositions:
    - 162
    - 902
  introduced: !ruby/object:Word
    word: introduced
    stem: introduc
    docFrequency: 4.0
    docPositions:
    - 163
    - 687
    - 902
  notion: !ruby/object:Word
    word: notion
    stem: notion
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  now: !ruby/object:Word
    word: now
    stem: now
    docFrequency: 7.0
    docPositions:
    - 163
    - 384
    - 396
    - 902
  words: !ruby/object:Word
    word: words
    stem: word
    docFrequency: 7.0
    docPositions:
    - 163
    - 174
    - 194
    - 902
  provably: !ruby/object:Word
    word: provably
    stem: provabl
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  anything: !ruby/object:Word
    word: anything
    stem: anyth
    docFrequency: 7.0
    docPositions:
    - 163
    - 350
    - 422
    - 902
  executing: !ruby/object:Word
    word: executing
    stem: execut
    docFrequency: 11.0
    docPositions:
    - 163
    - 242
    - 372
    - 902
  tape: !ruby/object:Word
    word: tape
    stem: tape
    docFrequency: 5.0
    docPositions:
    - 163
    - 185
    - 902
  allowing: !ruby/object:Word
    word: allowing
    stem: allow
    docFrequency: 5.0
    docPositions:
    - 163
    - 340
    - 902
  von: !ruby/object:Word
    word: von
    stem: von
    docFrequency: 13.0
    docPositions:
    - 163
    - 203
    - 230
    - 262
    - 405
    - 630
    - 902
  neumann: !ruby/object:Word
    word: neumann
    stem: neumann
    docFrequency: 13.0
    docPositions:
    - 163
    - 203
    - 230
    - 262
    - 405
    - 630
    - 902
  acknowledged: !ruby/object:Word
    word: acknowledged
    stem: acknowledg
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  due: !ruby/object:Word
    word: due
    stem: due
    docFrequency: 10.0
    docPositions:
    - 163
    - 226
    - 231
    - 385
    - 670
    - 902
  day: !ruby/object:Word
    word: day
    stem: dai
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  object: !ruby/object:Word
    word: object
    stem: object
    docFrequency: 7.0
    docPositions:
    - 163
    - 287
    - 541
    - 691
    - 902
  study: !ruby/object:Word
    word: study
    stem: studi
    docFrequency: 4.0
    docPositions:
    - 163
    - 651
    - 902
  theory: !ruby/object:Word
    word: theory
    stem: theori
    docFrequency: 5.0
    docPositions:
    - 163
    - 600
    - 750
    - 902
  except: !ruby/object:Word
    word: except
    stem: except
    docFrequency: 4.0
    docPositions:
    - 163
    - 687
    - 902
  limitations: !ruby/object:Word
    word: limitations
    stem: limit
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  imposed: !ruby/object:Word
    word: imposed
    stem: impos
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  finite: !ruby/object:Word
    word: finite
    stem: finit
    docFrequency: 4.0
    docPositions:
    - 163
    - 772
    - 902
  stores: !ruby/object:Word
    word: stores
    stem: store
    docFrequency: 5.0
    docPositions:
    - 163
    - 419
    - 902
  said: !ruby/object:Word
    word: said
    stem: said
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  say: !ruby/object:Word
    word: say
    stem: sai
    docFrequency: 5.0
    docPositions:
    - 163
    - 230
    - 902
  execution: !ruby/object:Word
    word: execution
    stem: execut
    docFrequency: 11.0
    docPositions:
    - 163
    - 243
    - 297
    - 320
    - 331
    - 902
  capability: !ruby/object:Word
    word: capability
    stem: capabl
    docFrequency: 5.0
    docPositions:
    - 163
    - 409
    - 902
  equivalent: !ruby/object:Word
    word: equivalent
    stem: equival
    docFrequency: 3.0
    docPositions:
    - 163
    - 902
  united: !ruby/object:Word
    word: united
    stem: unit
    docFrequency: 9.0
    docPositions:
    - 165
    - 190
    - 396
    - 645
    - 660
    - 692
    - 902
  states: !ruby/object:Word
    word: states
    stem: state
    docFrequency: 11.0
    docPositions:
    - 165
    - 190
    - 193
    - 396
    - 645
    - 660
    - 692
    - 902
  navy: !ruby/object:Word
    word: navy
    stem: navi
    docFrequency: 3.0
    docPositions:
    - 165
    - 902
  aboard: !ruby/object:Word
    word: aboard
    stem: aboard
    docFrequency: 3.0
    docPositions:
    - 165
    - 902
  submarine: !ruby/object:Word
    word: submarine
    stem: submarin
    docFrequency: 3.0
    docPositions:
    - 165
    - 902
  firing: !ruby/object:Word
    word: firing
    stem: fire
    docFrequency: 3.0
    docPositions:
    - 165
    - 902
  moving: !ruby/object:Word
    word: moving
    stem: move
    docFrequency: 3.0
    docPositions:
    - 165
    - 902
  target: !ruby/object:Word
    word: target
    stem: target
    docFrequency: 5.0
    docPositions:
    - 165
    - 279
    - 902
  similar: !ruby/object:Word
    word: similar
    stem: similar
    docFrequency: 7.0
    docPositions:
    - 165
    - 174
    - 193
    - 902
  countries: !ruby/object:Word
    word: countries
    stem: countri
    docFrequency: 3.0
    docPositions:
    - 165
    - 902
  replica: !ruby/object:Word
    word: replica
    stem: replica
    docFrequency: 3.0
    docPositions:
    - 170
    - 238
  zuse: !ruby/object:Word
    word: zuse
    stem: zuse
    docFrequency: 17.0
    docPositions:
    - 170
    - 173
    - 174
    - 631
    - 632
    - 634
    - 635
    - 636
    - 637
    - 701
    - 902
  fully: !ruby/object:Word
    word: fully
    stem: fulli
    docFrequency: 4.0
    docPositions:
    - 170
    - 174
    - 902
  automatic: !ruby/object:Word
    word: automatic
    stem: automat
    docFrequency: 6.0
    docPositions:
    - 170
    - 174
    - 176
    - 902
  electric: !ruby/object:Word
    word: electric
    stem: electr
    docFrequency: 7.0
    docPositions:
    - 173
    - 194
    - 902
  switches: !ruby/object:Word
    word: switches
    stem: switch
    docFrequency: 8.0
    docPositions:
    - 173
    - 193
    - 667
    - 902
  relays: !ruby/object:Word
    word: relays
    stem: relai
    docFrequency: 7.0
    docPositions:
    - 173
    - 174
    - 194
    - 902
  operating: !ruby/object:Word
    word: operating
    stem: oper
    docFrequency: 15.0
    docPositions:
    - 173
    - 228
    - 356
    - 397
    - 424
    - 484
    - 486
    - 496
    - 679
    - 902
  speed: !ruby/object:Word
    word: speed
    stem: speed
    docFrequency: 20.0
    docPositions:
    - 173
    - 194
    - 352
    - 356
    - 374
    - 385
    - 416
    - 419
    - 424
    - 902
  superseded: !ruby/object:Word
    word: superseded
    stem: supersed
    docFrequency: 3.0
    docPositions:
    - 173
    - 902
  created: !ruby/object:Word
    word: created
    stem: creat
    docFrequency: 3.0
    docPositions:
    - 173
    - 902
  german: !ruby/object:Word
    word: german
    stem: german
    docFrequency: 13.0
    docPositions:
    - 173
    - 181
    - 184
    - 632
    - 634
    - 798
    - 902
  konrad: !ruby/object:Word
    word: konrad
    stem: konrad
    docFrequency: 8.0
    docPositions:
    - 173
    - 631
    - 632
    - 634
    - 701
    - 902
  examples: !ruby/object:Word
    word: examples
    stem: exampl
    docFrequency: 9.0
    docPositions:
    - 173
    - 331
    - 559
    - 572
    - 902
  relay: !ruby/object:Word
    word: relay
    stem: relai
    docFrequency: 7.0
    docPositions:
    - 173
    - 294
    - 298
    - 694
    - 902
  followed: !ruby/object:Word
    word: followed
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  earlier: !ruby/object:Word
    word: earlier
    stem: earlier
    docFrequency: 9.0
    docPositions:
    - 174
    - 243
    - 668
    - 687
    - 902
  up: !ruby/object:Word
    word: up
    stem: up
    docFrequency: 13.0
    docPositions:
    - 174
    - 225
    - 351
    - 356
    - 374
    - 545
    - 902
  implementing: !ruby/object:Word
    word: implementing
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  bit: !ruby/object:Word
    word: bit
    stem: bit
    docFrequency: 13.0
    docPositions:
    - 174
    - 310
    - 452
    - 454
    - 456
    - 458
    - 460
    - 687
    - 902
  length: !ruby/object:Word
    word: length
    stem: length
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  clock: !ruby/object:Word
    word: clock
    stem: clock
    docFrequency: 5.0
    docPositions:
    - 174
    - 222
    - 902
  frequency: !ruby/object:Word
    word: frequency
    stem: frequenc
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  hz: !ruby/object:Word
    word: hz
    stem: hz
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  supplied: !ruby/object:Word
    word: supplied
    stem: suppli
    docFrequency: 5.0
    docPositions:
    - 174
    - 902
  film: !ruby/object:Word
    word: film
    stem: film
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  while: !ruby/object:Word
    word: while
    stem: while
    docFrequency: 17.0
    docPositions:
    - 174
    - 226
    - 243
    - 263
    - 371
    - 419
    - 669
    - 681
    - 902
  keyboard: !ruby/object:Word
    word: keyboard
    stem: keyboard
    docFrequency: 10.0
    docPositions:
    - 174
    - 367
    - 374
    - 471
    - 560
    - 569
    - 902
  quite: !ruby/object:Word
    word: quite
    stem: quit
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  respects: !ruby/object:Word
    word: respects
    stem: respect
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  advances: !ruby/object:Word
    word: advances
    stem: advanc
    docFrequency: 4.0
    docPositions:
    - 174
    - 621
    - 902
  floating: !ruby/object:Word
    word: floating
    stem: float
    docFrequency: 6.0
    docPositions:
    - 174
    - 338
    - 670
    - 902
  point: !ruby/object:Word
    word: point
    stem: point
    docFrequency: 6.0
    docPositions:
    - 174
    - 338
    - 670
    - 902
  replacement: !ruby/object:Word
    word: replacement
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  hard: !ruby/object:Word
    word: hard
    stem: hard
    docFrequency: 11.0
    docPositions:
    - 174
    - 356
    - 364
    - 367
    - 419
    - 475
    - 902
  implement: !ruby/object:Word
    word: implement
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  decimal: !ruby/object:Word
    word: decimal
    stem: decim
    docFrequency: 3.0
    docPositions:
    - 174
    - 902
  simpler: !ruby/object:Word
    word: simpler
    stem: simpler
    docFrequency: 5.0
    docPositions:
    - 174
    - 185
    - 902
  binary: !ruby/object:Word
    word: binary
    stem: binari
    docFrequency: 9.0
    docPositions:
    - 174
    - 221
    - 310
    - 351
    - 902
  meant: !ruby/object:Word
    word: meant
    stem: meant
    docFrequency: 5.0
    docPositions:
    - 174
    - 397
    - 902
  easier: !ruby/object:Word
    word: easier
    stem: easier
    docFrequency: 5.0
    docPositions:
    - 174
    - 279
    - 902
  build: !ruby/object:Word
    word: build
    stem: build
    docFrequency: 6.0
    docPositions:
    - 174
    - 184
    - 627
    - 902
  potentially: !ruby/object:Word
    word: potentially
    stem: potenti
    docFrequency: 7.0
    docPositions:
    - 174
    - 263
    - 424
    - 902
  reliable: !ruby/object:Word
    word: reliable
    stem: reliabl
    docFrequency: 6.0
    docPositions:
    - 174
    - 221
    - 286
    - 902
  technologies: !ruby/object:Word
    word: technologies
    stem: technolog
    docFrequency: 7.0
    docPositions:
    - 174
    - 396
    - 397
    - 902
  available: !ruby/object:Word
    word: available
    stem: avail
    docFrequency: 14.0
    docPositions:
    - 174
    - 212
    - 279
    - 384
    - 385
    - 397
    - 884
    - 902
  purely: !ruby/object:Word
    word: purely
    stem: pure
    docFrequency: 5.0
    docPositions:
    - 176
    - 273
    - 902
  circuit: !ruby/object:Word
    word: circuit
    stem: circuit
    docFrequency: 26.0
    docPositions:
    - 176
    - 224
    - 225
    - 310
    - 334
    - 384
    - 662
    - 744
    - 760
    - 902
  elements: !ruby/object:Word
    word: elements
    stem: element
    docFrequency: 5.0
    docPositions:
    - 176
    - 211
    - 902
  soon: !ruby/object:Word
    word: soon
    stem: soon
    docFrequency: 5.0
    docPositions:
    - 176
    - 211
    - 902
  replaced: !ruby/object:Word
    word: replaced
    stem: replac
    docFrequency: 8.0
    docPositions:
    - 176
    - 221
    - 347
    - 902
  equivalents: !ruby/object:Word
    word: equivalents
    stem: equival
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  tommy: !ruby/object:Word
    word: tommy
    stem: tommi
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  flowers: !ruby/object:Word
    word: flowers
    stem: flower
    docFrequency: 5.0
    docPositions:
    - 176
    - 184
    - 902
  post: !ruby/object:Word
    word: post
    stem: post
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  office: !ruby/object:Word
    word: office
    stem: offic
    docFrequency: 8.0
    docPositions:
    - 176
    - 212
    - 515
    - 645
    - 660
    - 902
  research: !ruby/object:Word
    word: research
    stem: research
    docFrequency: 11.0
    docPositions:
    - 176
    - 222
    - 396
    - 424
    - 615
    - 902
  station: !ruby/object:Word
    word: station
    stem: station
    docFrequency: 4.0
    docPositions:
    - 176
    - 416
    - 902
  london: !ruby/object:Word
    word: london
    stem: london
    docFrequency: 7.0
    docPositions:
    - 176
    - 629
    - 656
    - 711
    - 712
    - 902
  explore: !ruby/object:Word
    word: explore
    stem: explor
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  electronics: !ruby/object:Word
    word: electronics
    stem: electron
    docFrequency: 9.0
    docPositions:
    - 176
    - 194
    - 222
    - 737
    - 753
    - 902
  telephone: !ruby/object:Word
    word: telephone
    stem: telephon
    docFrequency: 5.0
    docPositions:
    - 176
    - 902
  exchange: !ruby/object:Word
    word: exchange
    stem: exchang
    docFrequency: 7.0
    docPositions:
    - 176
    - 586
    - 902
  experimental: !ruby/object:Word
    word: experimental
    stem: experiment
    docFrequency: 10.0
    docPositions:
    - 176
    - 200
    - 211
    - 238
    - 443
    - 466
    - 497
    - 902
  equipment: !ruby/object:Word
    word: equipment
    stem: equip
    docFrequency: 5.0
    docPositions:
    - 176
    - 695
    - 902
  operation: !ruby/object:Word
    word: operation
    stem: oper
    docFrequency: 16.0
    docPositions:
    - 176
    - 194
    - 231
    - 244
    - 262
    - 328
    - 338
    - 902
  converting: !ruby/object:Word
    word: converting
    stem: convert
    docFrequency: 5.0
    docPositions:
    - 176
    - 263
    - 902
  network: !ruby/object:Word
    word: network
    stem: network
    docFrequency: 10.0
    docPositions:
    - 176
    - 396
    - 397
    - 682
    - 902
  us: !ruby/object:Word
    word: us
    stem: us
    docFrequency: 10.0
    docPositions:
    - 176
    - 193
    - 645
    - 660
    - 662
    - 902
  john: !ruby/object:Word
    word: john
    stem: john
    docFrequency: 14.0
    docPositions:
    - 176
    - 194
    - 203
    - 645
    - 664
    - 675
    - 679
    - 703
    - 704
    - 902
  vincent: !ruby/object:Word
    word: vincent
    stem: vincent
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  atanasoff: !ruby/object:Word
    word: atanasoff
    stem: atanasoff
    docFrequency: 6.0
    docPositions:
    - 176
    - 441
    - 902
  clifford: !ruby/object:Word
    word: clifford
    stem: clifford
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  berry: !ruby/object:Word
    word: berry
    stem: berri
    docFrequency: 6.0
    docPositions:
    - 176
    - 441
    - 902
  iowa: !ruby/object:Word
    word: iowa
    stem: iowa
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  state: !ruby/object:Word
    word: state
    stem: state
    docFrequency: 7.0
    docPositions:
    - 176
    - 310
    - 772
    - 899
    - 902
  university: !ruby/object:Word
    word: university
    stem: univers
    docFrequency: 24.0
    docPositions:
    - 176
    - 194
    - 203
    - 211
    - 212
    - 222
    - 610
    - 612
    - 617
    - 640
    - 648
    - 649
    - 650
    - 708
    - 709
    - 902
  tested: !ruby/object:Word
    word: tested
    stem: test
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  abc: !ruby/object:Word
    word: abc
    stem: abc
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  capacitors: !ruby/object:Word
    word: capacitors
    stem: capacitor
    docFrequency: 5.0
    docPositions:
    - 176
    - 194
    - 902
  rotating: !ruby/object:Word
    word: rotating
    stem: rotat
    docFrequency: 3.0
    docPositions:
    - 176
    - 902
  drum: !ruby/object:Word
    word: drum
    stem: drum
    docFrequency: 5.0
    docPositions:
    - 176
    - 222
    - 902
  colossus: !ruby/object:Word
    word: colossus
    stem: colossu
    docFrequency: 22.0
    docPositions:
    - 181
    - 184
    - 185
    - 193
    - 443
    - 611
    - 640
    - 641
    - 642
    - 902
  break: !ruby/object:Word
    word: break
    stem: break
    docFrequency: 6.0
    docPositions:
    - 181
    - 338
    - 424
    - 902
  ciphers: !ruby/object:Word
    word: ciphers
    stem: cipher
    docFrequency: 2.0
    docPositions:
    - 181
  bletchley: !ruby/object:Word
    word: bletchley
    stem: bletchlei
    docFrequency: 7.0
    docPositions:
    - 184
    - 640
    - 641
    - 902
  park: !ruby/object:Word
    word: park
    stem: park
    docFrequency: 6.0
    docPositions:
    - 184
    - 640
    - 902
  achieved: !ruby/object:Word
    word: achieved
    stem: achiev
    docFrequency: 5.0
    docPositions:
    - 184
    - 371
    - 902
  successes: !ruby/object:Word
    word: successes
    stem: success
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  breaking: !ruby/object:Word
    word: breaking
    stem: break
    docFrequency: 4.0
    docPositions:
    - 184
    - 613
    - 902
  encrypted: !ruby/object:Word
    word: encrypted
    stem: encrypt
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  communications: !ruby/object:Word
    word: communications
    stem: commun
    docFrequency: 5.0
    docPositions:
    - 184
    - 902
  encryption: !ruby/object:Word
    word: encryption
    stem: encrypt
    docFrequency: 5.0
    docPositions:
    - 184
    - 424
    - 902
  enigma: !ruby/object:Word
    word: enigma
    stem: enigma
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  attacked: !ruby/object:Word
    word: attacked
    stem: attack
    docFrequency: 5.0
    docPositions:
    - 184
    - 902
  help: !ruby/object:Word
    word: help
    stem: help
    docFrequency: 10.0
    docPositions:
    - 184
    - 279
    - 281
    - 286
    - 559
    - 902
  electro: !ruby/object:Word
    word: electro
    stem: electro
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  bombes: !ruby/object:Word
    word: bombes
    stem: bomb
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  crack: !ruby/object:Word
    word: crack
    stem: crack
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  lorenz: !ruby/object:Word
    word: lorenz
    stem: lorenz
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  sz: !ruby/object:Word
    word: sz
    stem: sz
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  army: !ruby/object:Word
    word: army
    stem: armi
    docFrequency: 5.0
    docPositions:
    - 184
    - 190
    - 692
    - 902
  max: !ruby/object:Word
    word: max
    stem: max
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  newman: !ruby/object:Word
    word: newman
    stem: newman
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  colleagues: !ruby/object:Word
    word: colleagues
    stem: colleagu
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  commissioned: !ruby/object:Word
    word: commissioned
    stem: commiss
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  spent: !ruby/object:Word
    word: spent
    stem: spent
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  eleven: !ruby/object:Word
    word: eleven
    stem: eleven
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  months: !ruby/object:Word
    word: months
    stem: month
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  february: !ruby/object:Word
    word: february
    stem: februari
    docFrequency: 15.0
    docPositions:
    - 184
    - 212
    - 225
    - 641
    - 645
    - 660
    - 671
    - 697
    - 698
    - 902
  designing: !ruby/object:Word
    word: designing
    stem: design
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  building: !ruby/object:Word
    word: building
    stem: build
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  functional: !ruby/object:Word
    word: functional
    stem: function
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  test: !ruby/object:Word
    word: test
    stem: test
    docFrequency: 3.0
    docPositions:
    - 184
    - 902
  december: !ruby/object:Word
    word: december
    stem: decemb
    docFrequency: 8.0
    docPositions:
    - 184
    - 627
    - 691
    - 798
    - 883
    - 902
  shipped: !ruby/object:Word
    word: shipped
    stem: ship
    docFrequency: 5.0
    docPositions:
    - 184
    - 228
    - 902
  delivered: !ruby/object:Word
    word: delivered
    stem: deliv
    docFrequency: 7.0
    docPositions:
    - 184
    - 212
    - 902
  january: !ruby/object:Word
    word: january
    stem: januari
    docFrequency: 7.0
    docPositions:
    - 184
    - 638
    - 651
    - 652
    - 686
    - 902
  message: !ruby/object:Word
    word: message
    stem: messag
    docFrequency: 5.0
    docPositions:
    - 184
    - 242
    - 902
  valves: !ruby/object:Word
    word: valves
    stem: valv
    docFrequency: 11.0
    docPositions:
    - 185
    - 222
    - 902
  configured: !ruby/object:Word
    word: configured
    stem: configur
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  variety: !ruby/object:Word
    word: variety
    stem: varieti
    docFrequency: 5.0
    docPositions:
    - 185
    - 228
    - 902
  boolean: !ruby/object:Word
    word: boolean
    stem: boolean
    docFrequency: 10.0
    docPositions:
    - 185
    - 338
    - 339
    - 754
    - 902
  nine: !ruby/object:Word
    word: nine
    stem: nine
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  mk: !ruby/object:Word
    word: mk
    stem: mk
    docFrequency: 7.0
    docPositions:
    - 185
    - 902
  colossi: !ruby/object:Word
    word: colossi
    stem: colossi
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  converted: !ruby/object:Word
    word: converted
    stem: convert
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  ten: !ruby/object:Word
    word: ten
    stem: ten
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  total: !ruby/object:Word
    word: total
    stem: total
    docFrequency: 4.0
    docPositions:
    - 185
    - 613
    - 902
  mark: !ruby/object:Word
    word: mark
    stem: mark
    docFrequency: 25.0
    docPositions:
    - 185
    - 208
    - 211
    - 212
    - 262
    - 294
    - 298
    - 438
    - 443
    - 650
    - 651
    - 902
  contained: !ruby/object:Word
    word: contained
    stem: contain
    docFrequency: 6.0
    docPositions:
    - 185
    - 194
    - 613
    - 902
  thermionic: !ruby/object:Word
    word: thermionic
    stem: thermion
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  both: !ruby/object:Word
    word: both
    stem: both
    docFrequency: 12.0
    docPositions:
    - 185
    - 331
    - 367
    - 474
    - 545
    - 586
    - 902
  operate: !ruby/object:Word
    word: operate
    stem: oper
    docFrequency: 7.0
    docPositions:
    - 185
    - 262
    - 338
    - 902
  greatly: !ruby/object:Word
    word: greatly
    stem: greatli
    docFrequency: 5.0
    docPositions:
    - 185
    - 352
    - 902
  speeding: !ruby/object:Word
    word: speeding
    stem: speed
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  decoding: !ruby/object:Word
    word: decoding
    stem: decod
    docFrequency: 3.0
    docPositions:
    - 185
    - 902
  process: !ruby/object:Word
    word: process
    stem: process
    docFrequency: 13.0
    docPositions:
    - 185
    - 230
    - 256
    - 332
    - 340
    - 611
    - 667
    - 902
  eniac: !ruby/object:Word
    word: eniac
    stem: eniac
    docFrequency: 13.0
    docPositions:
    - 190
    - 193
    - 194
    - 443
    - 610
    - 611
    - 902
  performed: !ruby/object:Word
    word: performed
    stem: perform
    docFrequency: 5.0
    docPositions:
    - 190
    - 322
    - 672
    - 902
  ballistics: !ruby/object:Word
    word: ballistics
    stem: ballist
    docFrequency: 2.0
    docPositions:
    - 190
  trajectory: !ruby/object:Word
    word: trajectory
    stem: trajectori
    docFrequency: 2.0
    docPositions:
    - 190
  numerical: !ruby/object:Word
    word: numerical
    stem: numer
    docFrequency: 7.0
    docPositions:
    - 193
    - 262
    - 324
    - 645
    - 902
  although: !ruby/object:Word
    word: although
    stem: although
    docFrequency: 8.0
    docPositions:
    - 193
    - 211
    - 338
    - 672
    - 902
  flexible: !ruby/object:Word
    word: flexible
    stem: flexibl
    docFrequency: 5.0
    docPositions:
    - 193
    - 422
    - 902
  unambiguously: !ruby/object:Word
    word: unambiguously
    stem: unambigu
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  compute: !ruby/object:Word
    word: compute
    stem: comput
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  like: !ruby/object:Word
    word: like
    stem: like
    docFrequency: 20.0
    docPositions:
    - 193
    - 279
    - 332
    - 356
    - 367
    - 397
    - 667
    - 668
    - 902
  defined: !ruby/object:Word
    word: defined
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  patch: !ruby/object:Word
    word: patch
    stem: patch
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  cables: !ruby/object:Word
    word: cables
    stem: cabl
    docFrequency: 5.0
    docPositions:
    - 193
    - 431
    - 902
  far: !ruby/object:Word
    word: far
    stem: far
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  cry: !ruby/object:Word
    word: cry
    stem: cry
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  came: !ruby/object:Word
    word: came
    stem: came
    docFrequency: 7.0
    docPositions:
    - 193
    - 224
    - 225
    - 902
  once: !ruby/object:Word
    word: once
    stem: onc
    docFrequency: 9.0
    docPositions:
    - 193
    - 260
    - 384
    - 385
    - 902
  written: !ruby/object:Word
    word: written
    stem: written
    docFrequency: 15.0
    docPositions:
    - 193
    - 244
    - 263
    - 273
    - 279
    - 352
    - 356
    - 902
  resetting: !ruby/object:Word
    word: resetting
    stem: reset
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  plugs: !ruby/object:Word
    word: plugs
    stem: plug
    docFrequency: 3.0
    docPositions:
    - 193
    - 902
  combined: !ruby/object:Word
    word: combined
    stem: combin
    docFrequency: 5.0
    docPositions:
    - 194
    - 397
    - 902
  ability: !ruby/object:Word
    word: ability
    stem: abil
    docFrequency: 7.0
    docPositions:
    - 194
    - 397
    - 409
    - 902
  add: !ruby/object:Word
    word: add
    stem: add
    docFrequency: 16.0
    docPositions:
    - 194
    - 242
    - 244
    - 250
    - 254
    - 258
    - 262
    - 263
    - 350
    - 902
  subtract: !ruby/object:Word
    word: subtract
    stem: subtract
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  second: !ruby/object:Word
    word: second
    stem: second
    docFrequency: 16.0
    docPositions:
    - 194
    - 221
    - 222
    - 231
    - 260
    - 372
    - 439
    - 611
    - 902
  modules: !ruby/object:Word
    word: modules
    stem: modul
    docFrequency: 5.0
    docPositions:
    - 194
    - 287
    - 902
  multiply: !ruby/object:Word
    word: multiply
    stem: multipli
    docFrequency: 5.0
    docPositions:
    - 194
    - 262
    - 902
  divide: !ruby/object:Word
    word: divide
    stem: divid
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  root: !ruby/object:Word
    word: root
    stem: root
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  bytes: !ruby/object:Word
    word: bytes
    stem: byte
    docFrequency: 7.0
    docPositions:
    - 194
    - 351
    - 902
  under: !ruby/object:Word
    word: under
    stem: under
    docFrequency: 6.0
    docPositions:
    - 194
    - 222
    - 884
    - 902
  direction: !ruby/object:Word
    word: direction
    stem: direct
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  mauchly: !ruby/object:Word
    word: mauchly
    stem: mauchli
    docFrequency: 4.0
    docPositions:
    - 194
    - 645
    - 902
  presper: !ruby/object:Word
    word: presper
    stem: presper
    docFrequency: 4.0
    docPositions:
    - 194
    - 645
    - 902
  eckert: !ruby/object:Word
    word: eckert
    stem: eckert
    docFrequency: 4.0
    docPositions:
    - 194
    - 645
    - 902
  pennsylvania: !ruby/object:Word
    word: pennsylvania
    stem: pennsylvania
    docFrequency: 6.0
    docPositions:
    - 194
    - 203
    - 610
    - 902
  lasted: !ruby/object:Word
    word: lasted
    stem: last
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  full: !ruby/object:Word
    word: full
    stem: full
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  huge: !ruby/object:Word
    word: huge
    stem: huge
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  weighing: !ruby/object:Word
    word: weighing
    stem: weigh
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  tons: !ruby/object:Word
    word: tons
    stem: ton
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  kilowatts: !ruby/object:Word
    word: kilowatts
    stem: kilowatt
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  hundreds: !ruby/object:Word
    word: hundreds
    stem: hundr
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  resistors: !ruby/object:Word
    word: resistors
    stem: resistor
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  inductors: !ruby/object:Word
    word: inductors
    stem: inductor
    docFrequency: 3.0
    docPositions:
    - 194
    - 902
  section: !ruby/object:Word
    word: section
    stem: section
    docFrequency: 8.0
    docPositions:
    - 200
    - 241
    - 243
    - 286
    - 902
  manchester: !ruby/object:Word
    word: manchester
    stem: manchest
    docFrequency: 20.0
    docPositions:
    - 200
    - 211
    - 212
    - 222
    - 238
    - 443
    - 648
    - 649
    - 650
    - 653
    - 699
    - 902
  scale: !ruby/object:Word
    word: scale
    stem: scale
    docFrequency: 13.0
    docPositions:
    - 200
    - 211
    - 238
    - 385
    - 395
    - 443
    - 682
    - 902
  changing: !ruby/object:Word
    word: changing
    stem: chang
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  function: !ruby/object:Word
    word: function
    stem: function
    docFrequency: 11.0
    docPositions:
    - 203
    - 263
    - 322
    - 424
    - 898
    - 900
    - 902
  required: !ruby/object:Word
    word: required
    stem: requir
    docFrequency: 14.0
    docPositions:
    - 203
    - 326
    - 351
    - 356
    - 385
    - 610
    - 654
    - 671
    - 673
    - 902
  re: !ruby/object:Word
    word: re
    stem: re
    docFrequency: 6.0
    docPositions:
    - 203
    - 706
    - 902
  wiring: !ruby/object:Word
    word: wiring
    stem: wire
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  structuring: !ruby/object:Word
    word: structuring
    stem: structur
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  proposal: !ruby/object:Word
    word: proposal
    stem: propos
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  includes: !ruby/object:Word
    word: includes
    stem: includ
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  instruction: !ruby/object:Word
    word: instruction
    stem: instruct
    docFrequency: 33.0
    docPositions:
    - 203
    - 242
    - 262
    - 263
    - 317
    - 321
    - 323
    - 324
    - 325
    - 326
    - 328
    - 331
    - 332
    - 672
    - 673
    - 687
    - 902
  store: !ruby/object:Word
    word: store
    stem: store
    docFrequency: 23.0
    docPositions:
    - 203
    - 262
    - 350
    - 351
    - 356
    - 409
    - 673
    - 854
    - 902
  details: !ruby/object:Word
    word: details
    stem: detail
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  theoretical: !ruby/object:Word
    word: theoretical
    stem: theoret
    docFrequency: 4.0
    docPositions:
    - 203
    - 466
    - 902
  laid: !ruby/object:Word
    word: laid
    stem: laid
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  joined: !ruby/object:Word
    word: joined
    stem: join
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  national: !ruby/object:Word
    word: national
    stem: nation
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  physical: !ruby/object:Word
    word: physical
    stem: physic
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  laboratory: !ruby/object:Word
    word: laboratory
    stem: laboratori
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  developing: !ruby/object:Word
    word: developing
    stem: develop
    docFrequency: 5.0
    docPositions:
    - 203
    - 287
    - 902
  report: !ruby/object:Word
    word: report
    stem: report
    docFrequency: 5.0
    docPositions:
    - 203
    - 902
  proposed: !ruby/object:Word
    word: proposed
    stem: propos
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  calculator: !ruby/object:Word
    word: calculator
    stem: calcul
    docFrequency: 6.0
    docPositions:
    - 203
    - 244
    - 436
    - 902
  specification: !ruby/object:Word
    word: specification
    stem: specif
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  circulated: !ruby/object:Word
    word: circulated
    stem: circul
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  draft: !ruby/object:Word
    word: draft
    stem: draft
    docFrequency: 3.0
    docPositions:
    - 203
    - 902
  edvac: !ruby/object:Word
    word: edvac
    stem: edvac
    docFrequency: 5.0
    docPositions:
    - 203
    - 443
    - 672
    - 902
  ferranti: !ruby/object:Word
    word: ferranti
    stem: ferranti
    docFrequency: 9.0
    docPositions:
    - 208
    - 212
    - 443
    - 651
    - 902
  c: !ruby/object:Word
    word: c
    stem: c
    docFrequency: 14.0
    docPositions:
    - 208
    - 211
    - 224
    - 503
    - 541
    - 628
    - 640
    - 659
    - 682
    - 902
  nicknamed: !ruby/object:Word
    word: nicknamed
    stem: nicknam
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  baby: !ruby/object:Word
    word: baby
    stem: babi
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  victoria: !ruby/object:Word
    word: victoria
    stem: victoria
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  frederic: !ruby/object:Word
    word: frederic
    stem: freder
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  williams: !ruby/object:Word
    word: williams
    stem: william
    docFrequency: 5.0
    docPositions:
    - 211
    - 902
  tom: !ruby/object:Word
    word: tom
    stem: tom
    docFrequency: 5.0
    docPositions:
    - 211
    - 222
    - 902
  kilburn: !ruby/object:Word
    word: kilburn
    stem: kilburn
    docFrequency: 5.0
    docPositions:
    - 211
    - 222
    - 902
  geoff: !ruby/object:Word
    word: geoff
    stem: geoff
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  tootill: !ruby/object:Word
    word: tootill
    stem: tootil
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  ran: !ruby/object:Word
    word: ran
    stem: ran
    docFrequency: 5.0
    docPositions:
    - 211
    - 212
    - 902
  june: !ruby/object:Word
    word: june
    stem: june
    docFrequency: 11.0
    docPositions:
    - 211
    - 610
    - 611
    - 624
    - 645
    - 654
    - 656
    - 660
    - 902
  testbed: !ruby/object:Word
    word: testbed
    stem: testb
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  tube: !ruby/object:Word
    word: tube
    stem: tube
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  random: !ruby/object:Word
    word: random
    stem: random
    docFrequency: 5.0
    docPositions:
    - 211
    - 354
    - 676
    - 902
  access: !ruby/object:Word
    word: access
    stem: access
    docFrequency: 13.0
    docPositions:
    - 211
    - 352
    - 354
    - 397
    - 403
    - 517
    - 676
    - 902
  storage: !ruby/object:Word
    word: storage
    stem: storag
    docFrequency: 7.0
    docPositions:
    - 211
    - 342
    - 364
    - 409
    - 902
  primitive: !ruby/object:Word
    word: primitive
    stem: primit
    docFrequency: 4.0
    docPositions:
    - 211
    - 614
    - 902
  standards: !ruby/object:Word
    word: standards
    stem: standard
    docFrequency: 6.0
    docPositions:
    - 211
    - 586
    - 588
    - 902
  contain: !ruby/object:Word
    word: contain
    stem: contain
    docFrequency: 15.0
    docPositions:
    - 211
    - 221
    - 231
    - 340
    - 368
    - 902
  essential: !ruby/object:Word
    word: essential
    stem: essenti
    docFrequency: 4.0
    docPositions:
    - 211
    - 630
    - 902
  ssem: !ruby/object:Word
    word: ssem
    stem: ssem
    docFrequency: 4.0
    docPositions:
    - 211
    - 238
    - 902
  demonstrated: !ruby/object:Word
    word: demonstrated
    stem: demonstr
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  feasibility: !ruby/object:Word
    word: feasibility
    stem: feasibl
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  initiated: !ruby/object:Word
    word: initiated
    stem: initi
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  usable: !ruby/object:Word
    word: usable
    stem: usabl
    docFrequency: 3.0
    docPositions:
    - 211
    - 902
  turn: !ruby/object:Word
    word: turn
    stem: turn
    docFrequency: 7.0
    docPositions:
    - 212
    - 371
    - 372
    - 902
  quickly: !ruby/object:Word
    word: quickly
    stem: quickli
    docFrequency: 5.0
    docPositions:
    - 212
    - 424
    - 902
  prototype: !ruby/object:Word
    word: prototype
    stem: prototyp
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  commercially: !ruby/object:Word
    word: commercially
    stem: commerci
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  seven: !ruby/object:Word
    word: seven
    stem: seven
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  them: !ruby/object:Word
    word: them
    stem: them
    docFrequency: 17.0
    docPositions:
    - 212
    - 230
    - 262
    - 276
    - 320
    - 340
    - 409
    - 902
  shell: !ruby/object:Word
    word: shell
    stem: shell
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  labs: !ruby/object:Word
    word: labs
    stem: lab
    docFrequency: 4.0
    docPositions:
    - 212
    - 498
    - 902
  amsterdam: !ruby/object:Word
    word: amsterdam
    stem: amsterdam
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  october: !ruby/object:Word
    word: october
    stem: octob
    docFrequency: 10.0
    docPositions:
    - 212
    - 641
    - 643
    - 644
    - 645
    - 691
    - 714
    - 798
    - 902
  directors: !ruby/object:Word
    word: directors
    stem: director
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  catering: !ruby/object:Word
    word: catering
    stem: cater
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  lyons: !ruby/object:Word
    word: lyons
    stem: lyon
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  decided: !ruby/object:Word
    word: decided
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  active: !ruby/object:Word
    word: active
    stem: activ
    docFrequency: 5.0
    docPositions:
    - 212
    - 424
    - 902
  role: !ruby/object:Word
    word: role
    stem: role
    docFrequency: 4.0
    docPositions:
    - 212
    - 672
    - 902
  promoting: !ruby/object:Word
    word: promoting
    stem: promot
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  commercial: !ruby/object:Word
    word: commercial
    stem: commerci
    docFrequency: 9.0
    docPositions:
    - 212
    - 226
    - 395
    - 668
    - 682
    - 902
  leo: !ruby/object:Word
    word: leo
    stem: leo
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  operational: !ruby/object:Word
    word: operational
    stem: oper
    docFrequency: 5.0
    docPositions:
    - 212
    - 222
    - 902
  april: !ruby/object:Word
    word: april
    stem: april
    docFrequency: 11.0
    docPositions:
    - 212
    - 222
    - 612
    - 633
    - 647
    - 671
    - 693
    - 798
    - 902
  regular: !ruby/object:Word
    word: regular
    stem: regular
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  routine: !ruby/object:Word
    word: routine
    stem: routin
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  job: !ruby/object:Word
    word: job
    stem: job
    docFrequency: 3.0
    docPositions:
    - 212
    - 902
  bipolar: !ruby/object:Word
    word: bipolar
    stem: bipolar
    docFrequency: 4.0
    docPositions:
    - 218
    - 221
    - 902
  junction: !ruby/object:Word
    word: junction
    stem: junction
    docFrequency: 4.0
    docPositions:
    - 218
    - 221
    - 902
  transistor: !ruby/object:Word
    word: transistor
    stem: transistor
    docFrequency: 7.0
    docPositions:
    - 218
    - 221
    - 654
    - 655
    - 656
    - 902
  onwards: !ruby/object:Word
    word: onwards
    stem: onward
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  designs: !ruby/object:Word
    word: designs
    stem: design
    docFrequency: 13.0
    docPositions:
    - 221
    - 262
    - 332
    - 385
    - 424
    - 681
    - 687
    - 902
  giving: !ruby/object:Word
    word: giving
    stem: give
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  rise: !ruby/object:Word
    word: rise
    stem: rise
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  compared: !ruby/object:Word
    word: compared
    stem: compar
    docFrequency: 5.0
    docPositions:
    - 221
    - 352
    - 902
  advantages: !ruby/object:Word
    word: advantages
    stem: advantag
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  smaller: !ruby/object:Word
    word: smaller
    stem: smaller
    docFrequency: 7.0
    docPositions:
    - 221
    - 332
    - 368
    - 902
  require: !ruby/object:Word
    word: require
    stem: requir
    docFrequency: 5.0
    docPositions:
    - 221
    - 287
    - 902
  less: !ruby/object:Word
    word: less
    stem: less
    docFrequency: 14.0
    docPositions:
    - 221
    - 252
    - 279
    - 281
    - 338
    - 610
    - 676
    - 902
  so: !ruby/object:Word
    word: so
    stem: so
    docFrequency: 27.0
    docPositions:
    - 221
    - 222
    - 228
    - 242
    - 262
    - 263
    - 310
    - 325
    - 338
    - 356
    - 374
    - 385
    - 681
    - 902
  give: !ruby/object:Word
    word: give
    stem: give
    docFrequency: 9.0
    docPositions:
    - 221
    - 350
    - 371
    - 424
    - 902
  heat: !ruby/object:Word
    word: heat
    stem: heat
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  silicon: !ruby/object:Word
    word: silicon
    stem: silicon
    docFrequency: 5.0
    docPositions:
    - 221
    - 225
    - 902
  longer: !ruby/object:Word
    word: longer
    stem: longer
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  indefinite: !ruby/object:Word
    word: indefinite
    stem: indefinit
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  service: !ruby/object:Word
    word: service
    stem: servic
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  life: !ruby/object:Word
    word: life
    stem: life
    docFrequency: 8.0
    docPositions:
    - 221
    - 228
    - 631
    - 632
    - 701
    - 902
  transistorized: !ruby/object:Word
    word: transistorized
    stem: transistor
    docFrequency: 5.0
    docPositions:
    - 221
    - 222
    - 902
  tens: !ruby/object:Word
    word: tens
    stem: ten
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  relatively: !ruby/object:Word
    word: relatively
    stem: rel
    docFrequency: 5.0
    docPositions:
    - 221
    - 287
    - 902
  compact: !ruby/object:Word
    word: compact
    stem: compact
    docFrequency: 3.0
    docPositions:
    - 221
    - 902
  team: !ruby/object:Word
    word: team
    stem: team
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  leadership: !ruby/object:Word
    word: leadership
    stem: leadership
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  newly: !ruby/object:Word
    word: newly
    stem: newli
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  instead: !ruby/object:Word
    word: instead
    stem: instead
    docFrequency: 7.0
    docPositions:
    - 222
    - 263
    - 372
    - 902
  transistorised: !ruby/object:Word
    word: transistorised
    stem: transistoris
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  did: !ruby/object:Word
    word: did
    stem: did
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  make: !ruby/object:Word
    word: make
    stem: make
    docFrequency: 10.0
    docPositions:
    - 222
    - 260
    - 424
    - 636
    - 637
    - 682
    - 902
  generate: !ruby/object:Word
    word: generate
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  khz: !ruby/object:Word
    word: khz
    stem: khz
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  waveforms: !ruby/object:Word
    word: waveforms
    stem: waveform
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  circuitry: !ruby/object:Word
    word: circuitry
    stem: circuitri
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  magnetic: !ruby/object:Word
    word: magnetic
    stem: magnet
    docFrequency: 4.0
    docPositions:
    - 222
    - 347
    - 902
  completely: !ruby/object:Word
    word: completely
    stem: complet
    docFrequency: 7.0
    docPositions:
    - 222
    - 225
    - 297
    - 902
  distinction: !ruby/object:Word
    word: distinction
    stem: distinct
    docFrequency: 5.0
    docPositions:
    - 222
    - 356
    - 902
  goes: !ruby/object:Word
    word: goes
    stem: goe
    docFrequency: 5.0
    docPositions:
    - 222
    - 332
    - 902
  harwell: !ruby/object:Word
    word: harwell
    stem: harwel
    docFrequency: 5.0
    docPositions:
    - 222
    - 902
  cadet: !ruby/object:Word
    word: cadet
    stem: cadet
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  atomic: !ruby/object:Word
    word: atomic
    stem: atom
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  energy: !ruby/object:Word
    word: energy
    stem: energi
    docFrequency: 3.0
    docPositions:
    - 222
    - 902
  establishment: !ruby/object:Word
    word: establishment
    stem: establish
    docFrequency: 5.0
    docPositions:
    - 222
    - 224
    - 902
  advent: !ruby/object:Word
    word: advent
    stem: advent
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  conceived: !ruby/object:Word
    word: conceived
    stem: conceiv
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  radar: !ruby/object:Word
    word: radar
    stem: radar
    docFrequency: 5.0
    docPositions:
    - 224
    - 902
  royal: !ruby/object:Word
    word: royal
    stem: royal
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  ministry: !ruby/object:Word
    word: ministry
    stem: ministri
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  defence: !ruby/object:Word
    word: defence
    stem: defenc
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  geoffrey: !ruby/object:Word
    word: geoffrey
    stem: geoffrei
    docFrequency: 4.0
    docPositions:
    - 224
    - 657
    - 902
  dummer: !ruby/object:Word
    word: dummer
    stem: dummer
    docFrequency: 6.0
    docPositions:
    - 224
    - 657
    - 902
  presented: !ruby/object:Word
    word: presented
    stem: present
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  public: !ruby/object:Word
    word: public
    stem: public
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  description: !ruby/object:Word
    word: description
    stem: descript
    docFrequency: 5.0
    docPositions:
    - 224
    - 322
    - 902
  symposium: !ruby/object:Word
    word: symposium
    stem: symposium
    docFrequency: 4.0
    docPositions:
    - 224
    - 696
    - 902
  progress: !ruby/object:Word
    word: progress
    stem: progress
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  quality: !ruby/object:Word
    word: quality
    stem: qualiti
    docFrequency: 3.0
    docPositions:
    - 224
    - 902
  washington: !ruby/object:Word
    word: washington
    stem: washington
    docFrequency: 4.0
    docPositions:
    - 224
    - 702
    - 902
  may: !ruby/object:Word
    word: may
    stem: mai
    docFrequency: 64.0
    docPositions:
    - 224
    - 231
    - 242
    - 243
    - 244
    - 276
    - 279
    - 286
    - 297
    - 310
    - 320
    - 322
    - 338
    - 340
    - 350
    - 351
    - 356
    - 357
    - 371
    - 372
    - 374
    - 559
    - 610
    - 624
    - 659
    - 670
    - 676
    - 798
    - 885
    - 902
  practical: !ruby/object:Word
    word: practical
    stem: practic
    docFrequency: 9.0
    docPositions:
    - 225
    - 231
    - 279
    - 902
  ics: !ruby/object:Word
    word: ics
    stem: ic
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  jack: !ruby/object:Word
    word: jack
    stem: jack
    docFrequency: 9.0
    docPositions:
    - 225
    - 630
    - 640
    - 658
    - 659
    - 660
    - 698
    - 902
  kilby: !ruby/object:Word
    word: kilby
    stem: kilbi
    docFrequency: 15.0
    docPositions:
    - 225
    - 658
    - 660
    - 902
  texas: !ruby/object:Word
    word: texas
    stem: texa
    docFrequency: 4.0
    docPositions:
    - 225
    - 659
    - 902
  instruments: !ruby/object:Word
    word: instruments
    stem: instrument
    docFrequency: 4.0
    docPositions:
    - 225
    - 659
    - 902
  robert: !ruby/object:Word
    word: robert
    stem: robert
    docFrequency: 6.0
    docPositions:
    - 225
    - 662
    - 706
    - 902
  noyce: !ruby/object:Word
    word: noyce
    stem: noyc
    docFrequency: 6.0
    docPositions:
    - 225
    - 662
    - 902
  fairchild: !ruby/object:Word
    word: fairchild
    stem: fairchild
    docFrequency: 6.0
    docPositions:
    - 225
    - 662
    - 902
  semiconductor: !ruby/object:Word
    word: semiconductor
    stem: semiconductor
    docFrequency: 10.0
    docPositions:
    - 225
    - 347
    - 662
    - 902
  recorded: !ruby/object:Word
    word: recorded
    stem: record
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  initial: !ruby/object:Word
    word: initial
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 225
    - 356
    - 902
  ideas: !ruby/object:Word
    word: ideas
    stem: idea
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  concerning: !ruby/object:Word
    word: concerning
    stem: concern
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  july: !ruby/object:Word
    word: july
    stem: juli
    docFrequency: 8.0
    docPositions:
    - 225
    - 286
    - 615
    - 648
    - 657
    - 798
    - 902
  successfully: !ruby/object:Word
    word: successfully
    stem: successfulli
    docFrequency: 5.0
    docPositions:
    - 225
    - 385
    - 902
  demonstrating: !ruby/object:Word
    word: demonstrating
    stem: demonstr
    docFrequency: 4.0
    docPositions:
    - 225
    - 306
    - 902
  september: !ruby/object:Word
    word: september
    stem: septemb
    docFrequency: 7.0
    docPositions:
    - 225
    - 298
    - 683
    - 798
    - 902
  patent: !ruby/object:Word
    word: patent
    stem: patent
    docFrequency: 8.0
    docPositions:
    - 225
    - 645
    - 660
    - 662
    - 902
  new: !ruby/object:Word
    word: new
    stem: new
    docFrequency: 14.0
    docPositions:
    - 225
    - 226
    - 287
    - 424
    - 627
    - 633
    - 679
    - 703
    - 711
    - 902
  body: !ruby/object:Word
    word: body
    stem: bodi
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  material: !ruby/object:Word
    word: material
    stem: materi
    docFrequency: 6.0
    docPositions:
    - 225
    - 286
    - 483
    - 902
  wherein: !ruby/object:Word
    word: wherein
    stem: wherein
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  own: !ruby/object:Word
    word: own
    stem: own
    docFrequency: 7.0
    docPositions:
    - 225
    - 368
    - 902
  year: !ruby/object:Word
    word: year
    stem: year
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  chip: !ruby/object:Word
    word: chip
    stem: chip
    docFrequency: 12.0
    docPositions:
    - 225
    - 226
    - 545
    - 659
    - 902
  solved: !ruby/object:Word
    word: solved
    stem: solv
    docFrequency: 5.0
    docPositions:
    - 225
    - 279
    - 902
  whereas: !ruby/object:Word
    word: whereas
    stem: wherea
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  germanium: !ruby/object:Word
    word: germanium
    stem: germanium
    docFrequency: 3.0
    docPositions:
    - 225
    - 902
  heralded: !ruby/object:Word
    word: heralded
    stem: herald
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  explosion: !ruby/object:Word
    word: explosion
    stem: explos
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  led: !ruby/object:Word
    word: led
    stem: led
    docFrequency: 6.0
    docPositions:
    - 226
    - 395
    - 708
    - 902
  invention: !ruby/object:Word
    word: invention
    stem: invent
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  microprocessor: !ruby/object:Word
    word: microprocessor
    stem: microprocessor
    docFrequency: 17.0
    docPositions:
    - 226
    - 300
    - 334
    - 611
    - 663
    - 668
    - 670
    - 902
  subject: !ruby/object:Word
    word: subject
    stem: subject
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  exactly: !ruby/object:Word
    word: exactly
    stem: exactli
    docFrequency: 5.0
    docPositions:
    - 226
    - 428
    - 902
  contentious: !ruby/object:Word
    word: contentious
    stem: contenti
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  partly: !ruby/object:Word
    word: partly
    stem: partli
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  lack: !ruby/object:Word
    word: lack
    stem: lack
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  agreement: !ruby/object:Word
    word: agreement
    stem: agreement
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  exact: !ruby/object:Word
    word: exact
    stem: exact
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  definition: !ruby/object:Word
    word: definition
    stem: definit
    docFrequency: 6.0
    docPositions:
    - 226
    - 419
    - 686
    - 902
  term: !ruby/object:Word
    word: term
    stem: term
    docFrequency: 8.0
    docPositions:
    - 226
    - 298
    - 431
    - 603
    - 902
  largely: !ruby/object:Word
    word: largely
    stem: larg
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  undisputed: !ruby/object:Word
    word: undisputed
    stem: undisput
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  single: !ruby/object:Word
    word: single
    stem: singl
    docFrequency: 9.0
    docPositions:
    - 226
    - 334
    - 350
    - 384
    - 902
  intel: !ruby/object:Word
    word: intel
    stem: intel
    docFrequency: 25.0
    docPositions:
    - 226
    - 276
    - 453
    - 455
    - 457
    - 459
    - 463
    - 611
    - 663
    - 664
    - 668
    - 670
    - 902
  ted: !ruby/object:Word
    word: ted
    stem: ted
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  hoff: !ruby/object:Word
    word: hoff
    stem: hoff
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  federico: !ruby/object:Word
    word: federico
    stem: federico
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  faggin: !ruby/object:Word
    word: faggin
    stem: faggin
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  stanley: !ruby/object:Word
    word: stanley
    stem: stanlei
    docFrequency: 4.0
    docPositions:
    - 226
    - 630
    - 902
  mazor: !ruby/object:Word
    word: mazor
    stem: mazor
    docFrequency: 3.0
    docPositions:
    - 226
    - 902
  miniaturization: !ruby/object:Word
    word: miniaturization
    stem: miniatur
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  resources: !ruby/object:Word
    word: resources
    stem: resourc
    docFrequency: 11.0
    docPositions:
    - 228
    - 385
    - 397
    - 902
  advancements: !ruby/object:Word
    word: advancements
    stem: advanc
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  portable: !ruby/object:Word
    word: portable
    stem: portabl
    docFrequency: 8.0
    docPositions:
    - 228
    - 465
    - 902
  battery: !ruby/object:Word
    word: battery
    stem: batteri
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  grew: !ruby/object:Word
    word: grew
    stem: grew
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  popularity: !ruby/object:Word
    word: popularity
    stem: popular
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  developments: !ruby/object:Word
    word: developments
    stem: develop
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  spurred: !ruby/object:Word
    word: spurred
    stem: spur
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  growth: !ruby/object:Word
    word: growth
    stem: growth
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  laptop: !ruby/object:Word
    word: laptop
    stem: laptop
    docFrequency: 7.0
    docPositions:
    - 228
    - 384
    - 465
    - 610
    - 902
  manufacturers: !ruby/object:Word
    word: manufacturers
    stem: manufactur
    docFrequency: 5.0
    docPositions:
    - 228
    - 902
  integrate: !ruby/object:Word
    word: integrate
    stem: integr
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  cellular: !ruby/object:Word
    word: cellular
    stem: cellular
    docFrequency: 6.0
    docPositions:
    - 228
    - 406
    - 409
    - 902
  phones: !ruby/object:Word
    word: phones
    stem: phone
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  smartphones: !ruby/object:Word
    word: smartphones
    stem: smartphon
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  tablets: !ruby/object:Word
    word: tablets
    stem: tablet
    docFrequency: 4.0
    docPositions:
    - 228
    - 613
    - 902
  run: !ruby/object:Word
    word: run
    stem: run
    docFrequency: 16.0
    docPositions:
    - 228
    - 260
    - 273
    - 374
    - 668
    - 902
  market: !ruby/object:Word
    word: market
    stem: market
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  reporting: !ruby/object:Word
    word: reporting
    stem: report
    docFrequency: 3.0
    docPositions:
    - 228
    - 902
  having: !ruby/object:Word
    word: having
    stem: have
    docFrequency: 9.0
    docPositions:
    - 228
    - 298
    - 352
    - 371
    - 902
  estimated: !ruby/object:Word
    word: estimated
    stem: estim
    docFrequency: 4.0
    docPositions:
    - 228
    - 610
    - 902
  million: !ruby/object:Word
    word: million
    stem: million
    docFrequency: 6.0
    docPositions:
    - 228
    - 231
    - 664
    - 902
  defining: !ruby/object:Word
    word: defining
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 230
    - 902
  feature: !ruby/object:Word
    word: feature
    stem: featur
    docFrequency: 5.0
    docPositions:
    - 230
    - 385
    - 902
  distinguishes: !ruby/object:Word
    word: distinguishes
    stem: distinguish
    docFrequency: 3.0
    docPositions:
    - 230
    - 902
  type: !ruby/object:Word
    word: type
    stem: type
    docFrequency: 13.0
    docPositions:
    - 230
    - 242
    - 276
    - 322
    - 352
    - 409
    - 902
  imperative: !ruby/object:Word
    word: imperative
    stem: imper
    docFrequency: 3.0
    docPositions:
    - 230
    - 902
  just: !ruby/object:Word
    word: just
    stem: just
    docFrequency: 13.0
    docPositions:
    - 231
    - 244
    - 262
    - 331
    - 338
    - 902
  extend: !ruby/object:Word
    word: extend
    stem: extend
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  do: !ruby/object:Word
    word: do
    stem: do
    docFrequency: 15.0
    docPositions:
    - 231
    - 244
    - 263
    - 338
    - 356
    - 372
    - 483
    - 902
  processors: !ruby/object:Word
    word: processors
    stem: processor
    docFrequency: 5.0
    docPositions:
    - 231
    - 340
    - 902
  web: !ruby/object:Word
    word: web
    stem: web
    docFrequency: 8.0
    docPositions:
    - 231
    - 397
    - 518
    - 585
    - 708
    - 902
  browsers: !ruby/object:Word
    word: browsers
    stem: browser
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  typical: !ruby/object:Word
    word: typical
    stem: typic
    docFrequency: 5.0
    docPositions:
    - 231
    - 367
    - 902
  execute: !ruby/object:Word
    word: execute
    stem: execut
    docFrequency: 11.0
    docPositions:
    - 231
    - 297
    - 372
    - 374
    - 409
    - 902
  per: !ruby/object:Word
    word: per
    stem: per
    docFrequency: 7.0
    docPositions:
    - 231
    - 372
    - 611
    - 902
  gigaflops: !ruby/object:Word
    word: gigaflops
    stem: gigaflop
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  rarely: !ruby/object:Word
    word: rarely
    stem: rare
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  makes: !ruby/object:Word
    word: makes
    stem: make
    docFrequency: 6.0
    docPositions:
    - 231
    - 409
    - 685
    - 902
  mistake: !ruby/object:Word
    word: mistake
    stem: mistak
    docFrequency: 7.0
    docPositions:
    - 231
    - 244
    - 260
    - 902
  consisting: !ruby/object:Word
    word: consisting
    stem: consist
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  teams: !ruby/object:Word
    word: teams
    stem: team
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  programmers: !ruby/object:Word
    word: programmers
    stem: programm
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  task: !ruby/object:Word
    word: task
    stem: task
    docFrequency: 11.0
    docPositions:
    - 231
    - 260
    - 287
    - 372
    - 902
  almost: !ruby/object:Word
    word: almost
    stem: almost
    docFrequency: 11.0
    docPositions:
    - 231
    - 260
    - 351
    - 397
    - 422
    - 902
  certainly: !ruby/object:Word
    word: certainly
    stem: certainli
    docFrequency: 3.0
    docPositions:
    - 231
    - 902
  errors: !ruby/object:Word
    word: errors
    stem: error
    docFrequency: 7.0
    docPositions:
    - 231
    - 297
    - 428
    - 902
  articles: !ruby/object:Word
    word: articles
    stem: articl
    docFrequency: 14.0
    docPositions:
    - 233
    - 300
    - 312
    - 387
    - 411
    - 430
    - 798
    - 899
  museum: !ruby/object:Word
    word: museum
    stem: museum
    docFrequency: 3.0
    docPositions:
    - 238
    - 626
  science: !ruby/object:Word
    word: science
    stem: scienc
    docFrequency: 10.0
    docPositions:
    - 238
    - 585
    - 617
    - 622
    - 626
    - 654
    - 656
    - 756
  industry: !ruby/object:Word
    word: industry
    stem: industri
    docFrequency: 3.0
    docPositions:
    - 238
    - 585
  england: !ruby/object:Word
    word: england
    stem: england
    docFrequency: 2.0
    docPositions:
    - 238
  applies: !ruby/object:Word
    word: applies
    stem: appli
    docFrequency: 3.0
    docPositions:
    - 241
    - 902
  common: !ruby/object:Word
    word: common
    stem: common
    docFrequency: 9.0
    docPositions:
    - 241
    - 321
    - 364
    - 408
    - 681
    - 902
  ram: !ruby/object:Word
    word: ram
    stem: ram
    docFrequency: 18.0
    docPositions:
    - 241
    - 354
    - 356
    - 357
    - 419
    - 902
  cases: !ruby/object:Word
    word: cases
    stem: case
    docFrequency: 7.0
    docPositions:
    - 242
    - 262
    - 297
    - 902
  another: !ruby/object:Word
    word: another
    stem: anoth
    docFrequency: 17.0
    docPositions:
    - 242
    - 279
    - 331
    - 332
    - 367
    - 669
    - 672
    - 902
  send: !ruby/object:Word
    word: send
    stem: send
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  executed: !ruby/object:Word
    word: executed
    stem: execut
    docFrequency: 5.0
    docPositions:
    - 242
    - 273
    - 902
  usually: !ruby/object:Word
    word: usually
    stem: usual
    docFrequency: 20.0
    docPositions:
    - 242
    - 263
    - 279
    - 297
    - 351
    - 385
    - 419
    - 667
    - 673
    - 681
    - 902
  tell: !ruby/object:Word
    word: tell
    stem: tell
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  backwards: !ruby/object:Word
    word: backwards
    stem: backward
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  place: !ruby/object:Word
    word: place
    stem: place
    docFrequency: 7.0
    docPositions:
    - 242
    - 243
    - 331
    - 902
  branches: !ruby/object:Word
    word: branches
    stem: branch
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  furthermore: !ruby/object:Word
    word: furthermore
    stem: furthermor
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  happen: !ruby/object:Word
    word: happen
    stem: happen
    docFrequency: 5.0
    docPositions:
    - 242
    - 332
    - 902
  conditionally: !ruby/object:Word
    word: conditionally
    stem: condition
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  sequences: !ruby/object:Word
    word: sequences
    stem: sequenc
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  depending: !ruby/object:Word
    word: depending
    stem: depend
    docFrequency: 9.0
    docPositions:
    - 242
    - 322
    - 338
    - 352
    - 902
  previous: !ruby/object:Word
    word: previous
    stem: previou
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  event: !ruby/object:Word
    word: event
    stem: event
    docFrequency: 5.0
    docPositions:
    - 242
    - 374
    - 902
  directly: !ruby/object:Word
    word: directly
    stem: directli
    docFrequency: 9.0
    docPositions:
    - 242
    - 273
    - 338
    - 667
    - 902
  support: !ruby/object:Word
    word: support
    stem: support
    docFrequency: 5.0
    docPositions:
    - 242
    - 338
    - 902
  subroutines: !ruby/object:Word
    word: subroutines
    stem: subroutin
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  providing: !ruby/object:Word
    word: providing
    stem: provid
    docFrequency: 5.0
    docPositions:
    - 242
    - 287
    - 902
  remembers: !ruby/object:Word
    word: remembers
    stem: rememb
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  jumped: !ruby/object:Word
    word: jumped
    stem: jump
    docFrequency: 3.0
    docPositions:
    - 242
    - 902
  return: !ruby/object:Word
    word: return
    stem: return
    docFrequency: 7.0
    docPositions:
    - 242
    - 338
    - 372
    - 902
  following: !ruby/object:Word
    word: following
    stem: follow
    docFrequency: 5.0
    docPositions:
    - 242
    - 244
    - 902
  might: !ruby/object:Word
    word: might
    stem: might
    docFrequency: 13.0
    docPositions:
    - 243
    - 262
    - 276
    - 338
    - 368
    - 372
    - 902
  likened: !ruby/object:Word
    word: likened
    stem: liken
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  normally: !ruby/object:Word
    word: normally
    stem: normal
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  each: !ruby/object:Word
    word: each
    stem: each
    docFrequency: 26.0
    docPositions:
    - 243
    - 262
    - 263
    - 310
    - 324
    - 350
    - 351
    - 371
    - 372
    - 902
  line: !ruby/object:Word
    word: line
    stem: line
    docFrequency: 7.0
    docPositions:
    - 243
    - 268
    - 287
    - 513
    - 902
  back: !ruby/object:Word
    word: back
    stem: back
    docFrequency: 8.0
    docPositions:
    - 243
    - 329
    - 330
    - 685
    - 902
  text: !ruby/object:Word
    word: text
    stem: text
    docFrequency: 7.0
    docPositions:
    - 243
    - 512
    - 513
    - 526
    - 884
    - 902
  skip: !ruby/object:Word
    word: skip
    stem: skip
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  sections: !ruby/object:Word
    word: sections
    stem: section
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  interest: !ruby/object:Word
    word: interest
    stem: interest
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  similarly: !ruby/object:Word
    word: similarly
    stem: similarli
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  sometimes: !ruby/object:Word
    word: sometimes
    stem: sometim
    docFrequency: 14.0
    docPositions:
    - 243
    - 273
    - 279
    - 297
    - 372
    - 483
    - 668
    - 902
  go: !ruby/object:Word
    word: go
    stem: go
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  repeat: !ruby/object:Word
    word: repeat
    stem: repeat
    docFrequency: 4.0
    docPositions:
    - 243
    - 256
    - 902
  again: !ruby/object:Word
    word: again
    stem: again
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  condition: !ruby/object:Word
    word: condition
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  within: !ruby/object:Word
    word: within
    stem: within
    docFrequency: 9.0
    docPositions:
    - 243
    - 287
    - 326
    - 692
    - 902
  allows: !ruby/object:Word
    word: allows
    stem: allow
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  repeatedly: !ruby/object:Word
    word: repeatedly
    stem: repeatedli
    docFrequency: 3.0
    docPositions:
    - 243
    - 902
  without: !ruby/object:Word
    word: without
    stem: without
    docFrequency: 13.0
    docPositions:
    - 243
    - 260
    - 281
    - 357
    - 374
    - 428
    - 902
  human: !ruby/object:Word
    word: human
    stem: human
    docFrequency: 9.0
    docPositions:
    - 243
    - 260
    - 372
    - 411
    - 585
    - 902
  intervention: !ruby/object:Word
    word: intervention
    stem: intervent
    docFrequency: 7.0
    docPositions:
    - 243
    - 260
    - 357
    - 902
  comparatively: !ruby/object:Word
    word: comparatively
    stem: compar
    docFrequency: 3.0
    docPositions:
    - 244
    - 902
  pocket: !ruby/object:Word
    word: pocket
    stem: pocket
    docFrequency: 3.0
    docPositions:
    - 244
    - 902
  basic: !ruby/object:Word
    word: basic
    stem: basic
    docFrequency: 9.0
    docPositions:
    - 244
    - 263
    - 385
    - 541
    - 677
    - 902
  adding: !ruby/object:Word
    word: adding
    stem: ad
    docFrequency: 6.0
    docPositions:
    - 244
    - 286
    - 331
    - 902
  button: !ruby/object:Word
    word: button
    stem: button
    docFrequency: 5.0
    docPositions:
    - 244
    - 902
  presses: !ruby/object:Word
    word: presses
    stem: press
    docFrequency: 5.0
    docPositions:
    - 244
    - 902
  together: !ruby/object:Word
    word: together
    stem: togeth
    docFrequency: 9.0
    docPositions:
    - 244
    - 262
    - 396
    - 586
    - 902
  lot: !ruby/object:Word
    word: lot
    stem: lot
    docFrequency: 3.0
    docPositions:
    - 244
    - 902
  near: !ruby/object:Word
    word: near
    stem: near
    docFrequency: 3.0
    docPositions:
    - 244
    - 902
  certainty: !ruby/object:Word
    word: certainty
    stem: certainti
    docFrequency: 3.0
    docPositions:
    - 244
    - 902
  mips: !ruby/object:Word
    word: mips
    stem: mip
    docFrequency: 6.0
    docPositions:
    - 244
    - 317
    - 461
    - 539
    - 902
  assembly: !ruby/object:Word
    word: assembly
    stem: assembl
    docFrequency: 16.0
    docPositions:
    - 244
    - 263
    - 276
    - 279
    - 538
    - 902
  begin: !ruby/object:Word
    word: begin
    stem: begin
    docFrequency: 2.0
    docPositions:
    - 248
  addi: !ruby/object:Word
    word: addi
    stem: addi
    docFrequency: 4.0
    docPositions:
    - 249
    - 250
    - 255
  initialize: !ruby/object:Word
    word: initialize
    stem: initi
    docFrequency: 2.0
    docPositions:
    - 249
  sum: !ruby/object:Word
    word: sum
    stem: sum
    docFrequency: 4.0
    docPositions:
    - 249
    - 254
    - 258
  loop: !ruby/object:Word
    word: loop
    stem: loop
    docFrequency: 3.0
    docPositions:
    - 251
    - 256
  slti: !ruby/object:Word
    word: slti
    stem: slti
    docFrequency: 2.0
    docPositions:
    - 252
  check: !ruby/object:Word
    word: check
    stem: check
    docFrequency: 2.0
    docPositions:
    - 252
  beq: !ruby/object:Word
    word: beq
    stem: beq
    docFrequency: 2.0
    docPositions:
    - 253
  finish: !ruby/object:Word
    word: finish
    stem: finish
    docFrequency: 3.0
    docPositions:
    - 253
    - 257
  odd: !ruby/object:Word
    word: odd
    stem: odd
    docFrequency: 2.0
    docPositions:
    - 253
  greater: !ruby/object:Word
    word: greater
    stem: greater
    docFrequency: 6.0
    docPositions:
    - 253
    - 338
    - 902
  exit: !ruby/object:Word
    word: exit
    stem: exit
    docFrequency: 2.0
    docPositions:
    - 253
  update: !ruby/object:Word
    word: update
    stem: updat
    docFrequency: 2.0
    docPositions:
    - 254
  get: !ruby/object:Word
    word: get
    stem: get
    docFrequency: 2.0
    docPositions:
    - 255
  summing: !ruby/object:Word
    word: summing
    stem: sum
    docFrequency: 2.0
    docPositions:
    - 256
  put: !ruby/object:Word
    word: put
    stem: put
    docFrequency: 6.0
    docPositions:
    - 258
    - 350
    - 902
  register: !ruby/object:Word
    word: register
    stem: regist
    docFrequency: 9.0
    docPositions:
    - 258
    - 321
    - 327
    - 329
    - 404
    - 638
    - 768
    - 902
  told: !ruby/object:Word
    word: told
    stem: told
    docFrequency: 3.0
    docPositions:
    - 260
    - 902
  repetitive: !ruby/object:Word
    word: repetitive
    stem: repetit
    docFrequency: 3.0
    docPositions:
    - 260
    - 902
  addition: !ruby/object:Word
    word: addition
    stem: addit
    docFrequency: 5.0
    docPositions:
    - 260
    - 338
    - 902
  never: !ruby/object:Word
    word: never
    stem: never
    docFrequency: 5.0
    docPositions:
    - 260
    - 356
    - 902
  pc: !ruby/object:Word
    word: pc
    stem: pc
    docFrequency: 12.0
    docPositions:
    - 260
    - 276
    - 356
    - 465
    - 483
    - 492
    - 577
    - 902
  individual: !ruby/object:Word
    word: individual
    stem: individu
    docFrequency: 6.0
    docPositions:
    - 262
    - 397
    - 681
    - 902
  unique: !ruby/object:Word
    word: unique
    stem: uniqu
    docFrequency: 9.0
    docPositions:
    - 262
    - 276
    - 385
    - 902
  opcode: !ruby/object:Word
    word: opcode
    stem: opcod
    docFrequency: 7.0
    docPositions:
    - 262
    - 902
  command: !ruby/object:Word
    word: command
    stem: command
    docFrequency: 6.0
    docPositions:
    - 262
    - 513
    - 902
  simplest: !ruby/object:Word
    word: simplest
    stem: simplest
    docFrequency: 5.0
    docPositions:
    - 262
    - 338
    - 902
  handful: !ruby/object:Word
    word: handful
    stem: hand
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  choose: !ruby/object:Word
    word: choose
    stem: choos
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  codes: !ruby/object:Word
    word: codes
    stem: code
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  leads: !ruby/object:Word
    word: leads
    stem: lead
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  important: !ruby/object:Word
    word: important
    stem: import
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  fact: !ruby/object:Word
    word: fact
    stem: fact
    docFrequency: 5.0
    docPositions:
    - 262
    - 397
    - 902
  entire: !ruby/object:Word
    word: entire
    stem: entir
    docFrequency: 5.0
    docPositions:
    - 262
    - 297
    - 902
  lists: !ruby/object:Word
    word: lists
    stem: list
    docFrequency: 10.0
    docPositions:
    - 262
    - 263
    - 409
    - 536
    - 902
  themselves: !ruby/object:Word
    word: themselves
    stem: themselv
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  manipulated: !ruby/object:Word
    word: manipulated
    stem: manipul
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  inside: !ruby/object:Word
    word: inside
    stem: insid
    docFrequency: 9.0
    docPositions:
    - 262
    - 310
    - 545
    - 671
    - 700
    - 902
  way: !ruby/object:Word
    word: way
    stem: wai
    docFrequency: 5.0
    docPositions:
    - 262
    - 428
    - 902
  numeric: !ruby/object:Word
    word: numeric
    stem: numer
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  fundamental: !ruby/object:Word
    word: fundamental
    stem: fundament
    docFrequency: 5.0
    docPositions:
    - 262
    - 630
    - 670
    - 902
  storing: !ruby/object:Word
    word: storing
    stem: store
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  alongside: !ruby/object:Word
    word: alongside
    stem: alongsid
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  crux: !ruby/object:Word
    word: crux
    stem: crux
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  citation: !ruby/object:Word
    word: citation
    stem: citat
    docFrequency: 9.0
    docPositions:
    - 262
    - 368
    - 419
    - 422
    - 902
  needed: !ruby/object:Word
    word: needed
    stem: need
    docFrequency: 16.0
    docPositions:
    - 262
    - 352
    - 357
    - 368
    - 419
    - 422
    - 613
    - 902
  kept: !ruby/object:Word
    word: kept
    stem: kept
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  separate: !ruby/object:Word
    word: separate
    stem: separ
    docFrequency: 5.0
    docPositions:
    - 262
    - 334
    - 902
  harvard: !ruby/object:Word
    word: harvard
    stem: harvard
    docFrequency: 14.0
    docPositions:
    - 262
    - 294
    - 298
    - 405
    - 411
    - 438
    - 902
  display: !ruby/object:Word
    word: display
    stem: displai
    docFrequency: 7.0
    docPositions:
    - 262
    - 367
    - 368
    - 902
  traits: !ruby/object:Word
    word: traits
    stem: trait
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  caches: !ruby/object:Word
    word: caches
    stem: cach
    docFrequency: 3.0
    docPositions:
    - 262
    - 902
  long: !ruby/object:Word
    word: long
    stem: long
    docFrequency: 6.0
    docPositions:
    - 263
    - 279
    - 479
    - 902
  technique: !ruby/object:Word
    word: technique
    stem: techniqu
    docFrequency: 5.0
    docPositions:
    - 263
    - 384
    - 902
  extremely: !ruby/object:Word
    word: extremely
    stem: extrem
    docFrequency: 5.0
    docPositions:
    - 263
    - 409
    - 902
  tedious: !ruby/object:Word
    word: tedious
    stem: tediou
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  error: !ruby/object:Word
    word: error
    stem: error
    docFrequency: 9.0
    docPositions:
    - 263
    - 279
    - 297
    - 902
  prone: !ruby/object:Word
    word: prone
    stem: prone
    docFrequency: 5.0
    docPositions:
    - 263
    - 279
    - 902
  practice: !ruby/object:Word
    word: practice
    stem: practic
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  especially: !ruby/object:Word
    word: especially
    stem: especi
    docFrequency: 7.0
    docPositions:
    - 263
    - 419
    - 902
  complicated: !ruby/object:Word
    word: complicated
    stem: complic
    docFrequency: 6.0
    docPositions:
    - 263
    - 339
    - 611
    - 902
  name: !ruby/object:Word
    word: name
    stem: name
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  indicative: !ruby/object:Word
    word: indicative
    stem: indic
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  easy: !ruby/object:Word
    word: easy
    stem: easi
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  remember: !ruby/object:Word
    word: remember
    stem: rememb
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  mnemonic: !ruby/object:Word
    word: mnemonic
    stem: mnemon
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  sub: !ruby/object:Word
    word: sub
    stem: sub
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  mult: !ruby/object:Word
    word: mult
    stem: mult
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  mnemonics: !ruby/object:Word
    word: mnemonics
    stem: mnemon
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  collectively: !ruby/object:Word
    word: collectively
    stem: collect
    docFrequency: 9.0
    docPositions:
    - 263
    - 276
    - 309
    - 334
    - 902
  something: !ruby/object:Word
    word: something
    stem: someth
    docFrequency: 6.0
    docPositions:
    - 263
    - 372
    - 613
    - 902
  actually: !ruby/object:Word
    word: actually
    stem: actual
    docFrequency: 3.0
    docPositions:
    - 263
    - 902
  understand: !ruby/object:Word
    word: understand
    stem: understand
    docFrequency: 5.0
    docPositions:
    - 263
    - 276
    - 902
  done: !ruby/object:Word
    word: done
    stem: done
    docFrequency: 7.0
    docPositions:
    - 263
    - 331
    - 372
    - 902
  assembler: !ruby/object:Word
    word: assembler
    stem: assembl
    docFrequency: 6.0
    docPositions:
    - 263
    - 273
    - 526
    - 902
  card: !ruby/object:Word
    word: card
    stem: card
    docFrequency: 5.0
    docPositions:
    - 268
    - 576
    - 578
  containing: !ruby/object:Word
    word: containing
    stem: contain
    docFrequency: 4.0
    docPositions:
    - 268
    - 798
  fortran: !ruby/object:Word
    word: fortran
    stem: fortran
    docFrequency: 3.0
    docPositions:
    - 268
    - 541
  reads: !ruby/object:Word
    word: reads
    stem: read
    docFrequency: 4.0
    docPositions:
    - 268
    - 320
    - 902
  z: !ruby/object:Word
    word: z
    stem: z
    docFrequency: 2.0
    docPositions:
    - 268
  y: !ruby/object:Word
    word: y
    stem: y
    docFrequency: 2.0
    docPositions:
    - 268
  labeled: !ruby/object:Word
    word: labeled
    stem: label
    docFrequency: 2.0
    docPositions:
    - 268
  identification: !ruby/object:Word
    word: identification
    stem: identif
    docFrequency: 2.0
    docPositions:
    - 268
  purposes: !ruby/object:Word
    word: purposes
    stem: purpos
    docFrequency: 2.0
    docPositions:
    - 268
  provide: !ruby/object:Word
    word: provide
    stem: provid
    docFrequency: 7.0
    docPositions:
    - 273
    - 327
    - 367
    - 681
    - 902
  ways: !ruby/object:Word
    word: ways
    stem: wai
    docFrequency: 5.0
    docPositions:
    - 273
    - 281
    - 902
  specifying: !ruby/object:Word
    word: specifying
    stem: specifi
    docFrequency: 3.0
    docPositions:
    - 273
    - 902
  unlike: !ruby/object:Word
    word: unlike
    stem: unlik
    docFrequency: 3.0
    docPositions:
    - 273
    - 902
  natural: !ruby/object:Word
    word: natural
    stem: natur
    docFrequency: 3.0
    docPositions:
    - 273
    - 902
  permit: !ruby/object:Word
    word: permit
    stem: permit
    docFrequency: 3.0
    docPositions:
    - 273
    - 902
  ambiguity: !ruby/object:Word
    word: ambiguity
    stem: ambigu
    docFrequency: 3.0
    docPositions:
    - 273
    - 902
  concise: !ruby/object:Word
    word: concise
    stem: concis
    docFrequency: 4.0
    docPositions:
    - 273
    - 679
    - 902
  difficult: !ruby/object:Word
    word: difficult
    stem: difficult
    docFrequency: 7.0
    docPositions:
    - 273
    - 279
    - 287
    - 902
  aloud: !ruby/object:Word
    word: aloud
    stem: aloud
    docFrequency: 3.0
    docPositions:
    - 273
    - 902
  translated: !ruby/object:Word
    word: translated
    stem: translat
    docFrequency: 8.0
    docPositions:
    - 273
    - 632
    - 669
    - 902
  compiler: !ruby/object:Word
    word: compiler
    stem: compil
    docFrequency: 8.0
    docPositions:
    - 273
    - 279
    - 298
    - 526
    - 902
  interpreter: !ruby/object:Word
    word: interpreter
    stem: interpret
    docFrequency: 5.0
    docPositions:
    - 273
    - 526
    - 669
    - 902
  hybrid: !ruby/object:Word
    word: hybrid
    stem: hybrid
    docFrequency: 4.0
    docPositions:
    - 273
    - 551
    - 902
  techniques: !ruby/object:Word
    word: techniques
    stem: techniqu
    docFrequency: 3.0
    docPositions:
    - 273
    - 902
  represent: !ruby/object:Word
    word: represent
    stem: repres
    docFrequency: 9.0
    docPositions:
    - 276
    - 338
    - 350
    - 351
    - 902
  termed: !ruby/object:Word
    word: termed
    stem: term
    docFrequency: 7.0
    docPositions:
    - 276
    - 309
    - 372
    - 902
  tend: !ruby/object:Word
    word: tend
    stem: tend
    docFrequency: 5.0
    docPositions:
    - 276
    - 385
    - 902
  instance: !ruby/object:Word
    word: instance
    stem: instanc
    docFrequency: 4.0
    docPositions:
    - 276
    - 670
    - 902
  arm: !ruby/object:Word
    word: arm
    stem: arm
    docFrequency: 5.0
    docPositions:
    - 276
    - 459
    - 539
    - 902
  pda: !ruby/object:Word
    word: pda
    stem: pda
    docFrequency: 4.0
    docPositions:
    - 276
    - 465
    - 902
  held: !ruby/object:Word
    word: held
    stem: held
    docFrequency: 3.0
    docPositions:
    - 276
    - 902
  videogame: !ruby/object:Word
    word: videogame
    stem: videogam
    docFrequency: 3.0
    docPositions:
    - 276
    - 902
  cannot: !ruby/object:Word
    word: cannot
    stem: cannot
    docFrequency: 5.0
    docPositions:
    - 276
    - 483
    - 902
  pentium: !ruby/object:Word
    word: pentium
    stem: pentium
    docFrequency: 6.0
    docPositions:
    - 276
    - 459
    - 664
    - 670
    - 902
  amd: !ruby/object:Word
    word: amd
    stem: amd
    docFrequency: 4.0
    docPositions:
    - 276
    - 668
    - 902
  athlon: !ruby/object:Word
    word: athlon
    stem: athlon
    docFrequency: 4.0
    docPositions:
    - 276
    - 668
    - 902
  though: !ruby/object:Word
    word: though
    stem: though
    docFrequency: 5.0
    docPositions:
    - 279
    - 372
    - 902
  considerably: !ruby/object:Word
    word: considerably
    stem: consider
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  writing: !ruby/object:Word
    word: writing
    stem: write
    docFrequency: 5.0
    docPositions:
    - 279
    - 297
    - 902
  therefore: !ruby/object:Word
    word: therefore
    stem: therefor
    docFrequency: 12.0
    docPositions:
    - 279
    - 338
    - 356
    - 409
    - 673
    - 902
  abstract: !ruby/object:Word
    word: abstract
    stem: abstract
    docFrequency: 6.0
    docPositions:
    - 279
    - 407
    - 613
    - 902
  express: !ruby/object:Word
    word: express
    stem: express
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  programmer: !ruby/object:Word
    word: programmer
    stem: programm
    docFrequency: 12.0
    docPositions:
    - 279
    - 281
    - 297
    - 357
    - 670
    - 902
  conveniently: !ruby/object:Word
    word: conveniently
    stem: conveni
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  thereby: !ruby/object:Word
    word: thereby
    stem: therebi
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  reduce: !ruby/object:Word
    word: reduce
    stem: reduc
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  compiled: !ruby/object:Word
    word: compiled
    stem: compil
    docFrequency: 4.0
    docPositions:
    - 279
    - 669
    - 902
  related: !ruby/object:Word
    word: related
    stem: relat
    docFrequency: 9.0
    docPositions:
    - 279
    - 581
    - 582
    - 584
    - 672
    - 902
  workings: !ruby/object:Word
    word: workings
    stem: work
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  structure: !ruby/object:Word
    word: structure
    stem: structur
    docFrequency: 4.0
    docPositions:
    - 279
    - 662
    - 902
  final: !ruby/object:Word
    word: final
    stem: final
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  compilers: !ruby/object:Word
    word: compilers
    stem: compil
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  translate: !ruby/object:Word
    word: translate
    stem: translat
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  part: !ruby/object:Word
    word: part
    stem: part
    docFrequency: 9.0
    docPositions:
    - 279
    - 357
    - 428
    - 631
    - 667
    - 902
  means: !ruby/object:Word
    word: means
    stem: mean
    docFrequency: 11.0
    docPositions:
    - 279
    - 310
    - 367
    - 372
    - 572
    - 902
  video: !ruby/object:Word
    word: video
    stem: video
    docFrequency: 12.0
    docPositions:
    - 279
    - 306
    - 522
    - 566
    - 578
    - 585
    - 782
    - 798
    - 902
  games: !ruby/object:Word
    word: games
    stem: game
    docFrequency: 4.0
    docPositions:
    - 279
    - 529
    - 902
  architectures: !ruby/object:Word
    word: architectures
    stem: architectur
    docFrequency: 11.0
    docPositions:
    - 279
    - 385
    - 400
    - 681
    - 687
    - 698
    - 902
  game: !ruby/object:Word
    word: game
    stem: game
    docFrequency: 6.0
    docPositions:
    - 279
    - 528
    - 585
    - 902
  consoles: !ruby/object:Word
    word: consoles
    stem: consol
    docFrequency: 3.0
    docPositions:
    - 279
    - 902
  procedural: !ruby/object:Word
    word: procedural
    stem: procedur
    docFrequency: 3.0
    docPositions:
    - 281
    - 902
  benefit: !ruby/object:Word
    word: benefit
    stem: benefit
    docFrequency: 3.0
    docPositions:
    - 281
    - 902
  provides: !ruby/object:Word
    word: provides
    stem: provid
    docFrequency: 3.0
    docPositions:
    - 281
    - 902
  obtain: !ruby/object:Word
    word: obtain
    stem: obtain
    docFrequency: 3.0
    docPositions:
    - 281
    - 902
  requiring: !ruby/object:Word
    word: requiring
    stem: requir
    docFrequency: 3.0
    docPositions:
    - 281
    - 902
  sql: !ruby/object:Word
    word: sql
    stem: sql
    docFrequency: 3.0
    docPositions:
    - 281
    - 902
  does: !ruby/object:Word
    word: does
    stem: doe
    docFrequency: 8.0
    docPositions:
    - 286
    - 338
    - 350
    - 419
    - 902
  cite: !ruby/object:Word
    word: cite
    stem: cite
    docFrequency: 3.0
    docPositions:
    - 286
    - 899
  sources: !ruby/object:Word
    word: sources
    stem: sourc
    docFrequency: 4.0
    docPositions:
    - 286
    - 798
  please: !ruby/object:Word
    word: please
    stem: pleas
    docFrequency: 2.0
    docPositions:
    - 286
  improve: !ruby/object:Word
    word: improve
    stem: improv
    docFrequency: 4.0
    docPositions:
    - 286
    - 320
    - 902
  citations: !ruby/object:Word
    word: citations
    stem: citat
    docFrequency: 2.0
    docPositions:
    - 286
  unsourced: !ruby/object:Word
    word: unsourced
    stem: unsourc
    docFrequency: 7.0
    docPositions:
    - 286
    - 798
  challenged: !ruby/object:Word
    word: challenged
    stem: challeng
    docFrequency: 2.0
    docPositions:
    - 286
  removed: !ruby/object:Word
    word: removed
    stem: remov
    docFrequency: 2.0
    docPositions:
    - 286
  involves: !ruby/object:Word
    word: involves
    stem: involv
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  analysis: !ruby/object:Word
    word: analysis
    stem: analysi
    docFrequency: 5.0
    docPositions:
    - 287
    - 526
    - 694
    - 902
  collection: !ruby/object:Word
    word: collection
    stem: collect
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  inputs: !ruby/object:Word
    word: inputs
    stem: input
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  constructs: !ruby/object:Word
    word: constructs
    stem: construct
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  devising: !ruby/object:Word
    word: devising
    stem: devis
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  established: !ruby/object:Word
    word: established
    stem: establish
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  procedures: !ruby/object:Word
    word: procedures
    stem: procedur
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  algorithms: !ruby/object:Word
    word: algorithms
    stem: algorithm
    docFrequency: 5.0
    docPositions:
    - 287
    - 424
    - 902
  solutions: !ruby/object:Word
    word: solutions
    stem: solut
    docFrequency: 5.0
    docPositions:
    - 287
    - 428
    - 902
  applicable: !ruby/object:Word
    word: applicable
    stem: applic
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  larger: !ruby/object:Word
    word: larger
    stem: larger
    docFrequency: 5.0
    docPositions:
    - 287
    - 351
    - 902
  features: !ruby/object:Word
    word: features
    stem: featur
    docFrequency: 6.0
    docPositions:
    - 287
    - 340
    - 611
    - 902
  subprograms: !ruby/object:Word
    word: subprograms
    stem: subprogram
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  documentation: !ruby/object:Word
    word: documentation
    stem: document
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  oriented: !ruby/object:Word
    word: oriented
    stem: orient
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  encountered: !ruby/object:Word
    word: encountered
    stem: encount
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  involving: !ruby/object:Word
    word: involving
    stem: involv
    docFrequency: 5.0
    docPositions:
    - 287
    - 580
    - 902
  methodologies: !ruby/object:Word
    word: methodologies
    stem: methodolog
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  presents: !ruby/object:Word
    word: presents
    stem: present
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  significant: !ruby/object:Word
    word: significant
    stem: signific
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  intellectual: !ruby/object:Word
    word: intellectual
    stem: intellectu
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  challenge: !ruby/object:Word
    word: challenge
    stem: challeng
    docFrequency: 5.0
    docPositions:
    - 287
    - 902
  producing: !ruby/object:Word
    word: producing
    stem: produc
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  acceptably: !ruby/object:Word
    word: acceptably
    stem: accept
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  reliability: !ruby/object:Word
    word: reliability
    stem: reliabl
    docFrequency: 5.0
    docPositions:
    - 287
    - 696
    - 902
  predictable: !ruby/object:Word
    word: predictable
    stem: predict
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  schedule: !ruby/object:Word
    word: schedule
    stem: schedul
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  budget: !ruby/object:Word
    word: budget
    stem: budget
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  historically: !ruby/object:Word
    word: historically
    stem: histor
    docFrequency: 5.0
    docPositions:
    - 287
    - 422
    - 902
  academic: !ruby/object:Word
    word: academic
    stem: academ
    docFrequency: 5.0
    docPositions:
    - 287
    - 397
    - 902
  professional: !ruby/object:Word
    word: professional
    stem: profession
    docFrequency: 4.0
    docPositions:
    - 287
    - 590
    - 902
  discipline: !ruby/object:Word
    word: discipline
    stem: disciplin
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  engineering: !ruby/object:Word
    word: engineering
    stem: engin
    docFrequency: 13.0
    docPositions:
    - 287
    - 525
    - 583
    - 585
    - 654
    - 656
    - 902
  concentrates: !ruby/object:Word
    word: concentrates
    stem: concentr
    docFrequency: 3.0
    docPositions:
    - 287
    - 902
  specifically: !ruby/object:Word
    word: specifically
    stem: specif
    docFrequency: 4.0
    docPositions:
    - 287
    - 685
    - 902
  bug: !ruby/object:Word
    word: bug
    stem: bug
    docFrequency: 6.0
    docPositions:
    - 289
    - 294
    - 297
    - 670
    - 902
  actual: !ruby/object:Word
    word: actual
    stem: actual
    docFrequency: 2.0
    docPositions:
    - 294
  moth: !ruby/object:Word
    word: moth
    stem: moth
    docFrequency: 4.0
    docPositions:
    - 294
    - 298
    - 902
  trapped: !ruby/object:Word
    word: trapped
    stem: trap
    docFrequency: 2.0
    docPositions:
    - 294
  benign: !ruby/object:Word
    word: benign
    stem: benign
    docFrequency: 5.0
    docPositions:
    - 297
    - 902
  affect: !ruby/object:Word
    word: affect
    stem: affect
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  usefulness: !ruby/object:Word
    word: usefulness
    stem: us
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  subtle: !ruby/object:Word
    word: subtle
    stem: subtl
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  effects: !ruby/object:Word
    word: effects
    stem: effect
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  cause: !ruby/object:Word
    word: cause
    stem: caus
    docFrequency: 9.0
    docPositions:
    - 297
    - 331
    - 372
    - 374
    - 902
  hang: !ruby/object:Word
    word: hang
    stem: hang
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  becoming: !ruby/object:Word
    word: becoming
    stem: becom
    docFrequency: 5.0
    docPositions:
    - 297
    - 397
    - 902
  unresponsive: !ruby/object:Word
    word: unresponsive
    stem: unrespons
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  mouse: !ruby/object:Word
    word: mouse
    stem: mous
    docFrequency: 9.0
    docPositions:
    - 297
    - 367
    - 374
    - 471
    - 570
    - 902
  clicks: !ruby/object:Word
    word: clicks
    stem: click
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  keystrokes: !ruby/object:Word
    word: keystrokes
    stem: keystrok
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  fail: !ruby/object:Word
    word: fail
    stem: fail
    docFrequency: 4.0
    docPositions:
    - 297
    - 670
    - 902
  crash: !ruby/object:Word
    word: crash
    stem: crash
    docFrequency: 4.0
    docPositions:
    - 297
    - 635
    - 902
  otherwise: !ruby/object:Word
    word: otherwise
    stem: otherwis
    docFrequency: 5.0
    docPositions:
    - 297
    - 419
    - 902
  harnessed: !ruby/object:Word
    word: harnessed
    stem: har
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  malicious: !ruby/object:Word
    word: malicious
    stem: malici
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  intent: !ruby/object:Word
    word: intent
    stem: intent
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  unscrupulous: !ruby/object:Word
    word: unscrupulous
    stem: unscrupul
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  user: !ruby/object:Word
    word: user
    stem: user
    docFrequency: 14.0
    docPositions:
    - 297
    - 374
    - 509
    - 510
    - 512
    - 513
    - 679
    - 899
    - 902
  exploit: !ruby/object:Word
    word: exploit
    stem: exploit
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  advantage: !ruby/object:Word
    word: advantage
    stem: advantag
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  disrupt: !ruby/object:Word
    word: disrupt
    stem: disrupt
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  proper: !ruby/object:Word
    word: proper
    stem: proper
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  fault: !ruby/object:Word
    word: fault
    stem: fault
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  merely: !ruby/object:Word
    word: merely
    stem: mere
    docFrequency: 3.0
    docPositions:
    - 297
    - 902
  nearly: !ruby/object:Word
    word: nearly
    stem: nearli
    docFrequency: 4.0
    docPositions:
    - 297
    - 610
    - 902
  always: !ruby/object:Word
    word: always
    stem: alwai
    docFrequency: 4.0
    docPositions:
    - 297
    - 672
    - 902
  oversight: !ruby/object:Word
    word: oversight
    stem: oversight
    docFrequency: 4.0
    docPositions:
    - 297
    - 670
    - 902
  admiral: !ruby/object:Word
    word: admiral
    stem: admir
    docFrequency: 3.0
    docPositions:
    - 298
    - 902
  grace: !ruby/object:Word
    word: grace
    stem: grace
    docFrequency: 5.0
    docPositions:
    - 298
    - 624
    - 679
    - 902
  hopper: !ruby/object:Word
    word: hopper
    stem: hopper
    docFrequency: 3.0
    docPositions:
    - 298
    - 902
  american: !ruby/object:Word
    word: american
    stem: american
    docFrequency: 6.0
    docPositions:
    - 298
    - 619
    - 693
    - 697
    - 902
  developer: !ruby/object:Word
    word: developer
    stem: develop
    docFrequency: 3.0
    docPositions:
    - 298
    - 902
  credited: !ruby/object:Word
    word: credited
    stem: credit
    docFrequency: 3.0
    docPositions:
    - 298
    - 902
  dead: !ruby/object:Word
    word: dead
    stem: dead
    docFrequency: 12.0
    docPositions:
    - 298
    - 613
    - 651
    - 657
    - 663
    - 666
    - 691
    - 798
    - 902
  shorting: !ruby/object:Word
    word: shorting
    stem: short
    docFrequency: 3.0
    docPositions:
    - 298
    - 902
  play: !ruby/object:Word
    word: play
    stem: plai
    docFrequency: 2.0
    docPositions:
    - 303
  media: !ruby/object:Word
    word: media
    stem: media
    docFrequency: 3.0
    docPositions:
    - 303
    - 661
  standard: !ruby/object:Word
    word: standard
    stem: standard
    docFrequency: 4.0
    docPositions:
    - 306
    - 503
  slimline: !ruby/object:Word
    word: slimline
    stem: slimlin
    docFrequency: 2.0
    docPositions:
    - 306
  four: !ruby/object:Word
    word: four
    stem: four
    docFrequency: 6.0
    docPositions:
    - 309
    - 351
    - 672
    - 902
  interconnected: !ruby/object:Word
    word: interconnected
    stem: interconnect
    docFrequency: 3.0
    docPositions:
    - 309
    - 902
  buses: !ruby/object:Word
    word: buses
    stem: buse
    docFrequency: 4.0
    docPositions:
    - 309
    - 476
    - 902
  groups: !ruby/object:Word
    word: groups
    stem: group
    docFrequency: 8.0
    docPositions:
    - 309
    - 351
    - 588
    - 592
    - 899
    - 902
  trillions: !ruby/object:Word
    word: trillions
    stem: trillion
    docFrequency: 5.0
    docPositions:
    - 310
    - 351
    - 902
  turned: !ruby/object:Word
    word: turned
    stem: turn
    docFrequency: 9.0
    docPositions:
    - 310
    - 356
    - 902
  switch: !ruby/object:Word
    word: switch
    stem: switch
    docFrequency: 7.0
    docPositions:
    - 310
    - 371
    - 372
    - 902
  represents: !ruby/object:Word
    word: represents
    stem: repres
    docFrequency: 7.0
    docPositions:
    - 310
    - 902
  digit: !ruby/object:Word
    word: digit
    stem: digit
    docFrequency: 3.0
    docPositions:
    - 310
    - 902
  positive: !ruby/object:Word
    word: positive
    stem: posit
    docFrequency: 3.0
    docPositions:
    - 310
    - 902
  representation: !ruby/object:Word
    word: representation
    stem: represent
    docFrequency: 4.0
    docPositions:
    - 310
    - 614
    - 902
  arranged: !ruby/object:Word
    word: arranged
    stem: arrang
    docFrequency: 3.0
    docPositions:
    - 310
    - 902
  gates: !ruby/object:Word
    word: gates
    stem: gate
    docFrequency: 5.0
    docPositions:
    - 310
    - 408
    - 902
  diagram: !ruby/object:Word
    word: diagram
    stem: diagram
    docFrequency: 2.0
    docPositions:
    - 317
  decoded: !ruby/object:Word
    word: decoded
    stem: decod
    docFrequency: 3.0
    docPositions:
    - 317
    - 672
  controller: !ruby/object:Word
    word: controller
    stem: control
    docFrequency: 3.0
    docPositions:
    - 320
    - 902
  manages: !ruby/object:Word
    word: manages
    stem: manag
    docFrequency: 3.0
    docPositions:
    - 320
    - 902
  interprets: !ruby/object:Word
    word: interprets
    stem: interpret
    docFrequency: 3.0
    docPositions:
    - 320
    - 902
  decodes: !ruby/object:Word
    word: decodes
    stem: decod
    docFrequency: 3.0
    docPositions:
    - 320
    - 902
  transforming: !ruby/object:Word
    word: transforming
    stem: transform
    docFrequency: 3.0
    docPositions:
    - 320
    - 902
  signals: !ruby/object:Word
    word: signals
    stem: signal
    docFrequency: 4.0
    docPositions:
    - 320
    - 324
    - 902
  activate: !ruby/object:Word
    word: activate
    stem: activ
    docFrequency: 3.0
    docPositions:
    - 320
    - 902
  advanced: !ruby/object:Word
    word: advanced
    stem: advanc
    docFrequency: 3.0
    docPositions:
    - 320
    - 902
  performance: !ruby/object:Word
    word: performance
    stem: perform
    docFrequency: 8.0
    docPositions:
    - 320
    - 424
    - 526
    - 681
    - 696
    - 902
  key: !ruby/object:Word
    word: key
    stem: kei
    docFrequency: 5.0
    docPositions:
    - 321
    - 374
    - 902
  component: !ruby/object:Word
    word: component
    stem: compon
    docFrequency: 3.0
    docPositions:
    - 321
    - 902
  cpus: !ruby/object:Word
    word: cpus
    stem: cpu
    docFrequency: 13.0
    docPositions:
    - 321
    - 334
    - 384
    - 385
    - 902
  counter: !ruby/object:Word
    word: counter
    stem: counter
    docFrequency: 12.0
    docPositions:
    - 321
    - 323
    - 325
    - 331
    - 673
    - 902
  special: !ruby/object:Word
    word: special
    stem: special
    docFrequency: 9.0
    docPositions:
    - 321
    - 352
    - 372
    - 395
    - 902
  cell: !ruby/object:Word
    word: cell
    stem: cell
    docFrequency: 16.0
    docPositions:
    - 321
    - 323
    - 350
    - 351
    - 902
  keeps: !ruby/object:Word
    word: keeps
    stem: keep
    docFrequency: 3.0
    docPositions:
    - 321
    - 902
  track: !ruby/object:Word
    word: track
    stem: track
    docFrequency: 3.0
    docPositions:
    - 321
    - 902
  follows: !ruby/object:Word
    word: follows
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 322
    - 902
  note: !ruby/object:Word
    word: note
    stem: note
    docFrequency: 3.0
    docPositions:
    - 322
    - 902
  steps: !ruby/object:Word
    word: steps
    stem: step
    docFrequency: 5.0
    docPositions:
    - 322
    - 338
    - 902
  concurrently: !ruby/object:Word
    word: concurrently
    stem: concurr
    docFrequency: 3.0
    docPositions:
    - 322
    - 902
  indicated: !ruby/object:Word
    word: indicated
    stem: indic
    docFrequency: 2.0
    docPositions:
    - 323
  decode: !ruby/object:Word
    word: decode
    stem: decod
    docFrequency: 2.0
    docPositions:
    - 324
  commands: !ruby/object:Word
    word: commands
    stem: command
    docFrequency: 4.0
    docPositions:
    - 324
    - 356
    - 902
  increment: !ruby/object:Word
    word: increment
    stem: increment
    docFrequency: 2.0
    docPositions:
    - 325
  points: !ruby/object:Word
    word: points
    stem: point
    docFrequency: 2.0
    docPositions:
    - 325
  whatever: !ruby/object:Word
    word: whatever
    stem: whatev
    docFrequency: 2.0
    docPositions:
    - 326
  requires: !ruby/object:Word
    word: requires
    stem: requir
    docFrequency: 3.0
    docPositions:
    - 326
    - 328
  cells: !ruby/object:Word
    word: cells
    stem: cell
    docFrequency: 8.0
    docPositions:
    - 326
    - 331
    - 350
    - 352
    - 902
  perhaps: !ruby/object:Word
    word: perhaps
    stem: perhap
    docFrequency: 3.0
    docPositions:
    - 326
    - 329
  necessary: !ruby/object:Word
    word: necessary
    stem: necessari
    docFrequency: 6.0
    docPositions:
    - 327
    - 368
    - 371
    - 902
  instruct: !ruby/object:Word
    word: instruct
    stem: instruct
    docFrequency: 2.0
    docPositions:
    - 328
  requested: !ruby/object:Word
    word: requested
    stem: request
    docFrequency: 2.0
    docPositions:
    - 328
  step: !ruby/object:Word
    word: step
    stem: step
    docFrequency: 2.0
    docPositions:
    - 330
  conceptually: !ruby/object:Word
    word: conceptually
    stem: conceptu
    docFrequency: 5.0
    docPositions:
    - 331
    - 422
    - 902
  locations: !ruby/object:Word
    word: locations
    stem: locat
    docFrequency: 6.0
    docPositions:
    - 331
    - 395
    - 673
    - 902
  down: !ruby/object:Word
    word: down
    stem: down
    docFrequency: 5.0
    docPositions:
    - 331
    - 338
    - 902
  modify: !ruby/object:Word
    word: modify
    stem: modifi
    docFrequency: 3.0
    docPositions:
    - 331
    - 902
  jumps: !ruby/object:Word
    word: jumps
    stem: jump
    docFrequency: 3.0
    docPositions:
    - 331
    - 902
  repeated: !ruby/object:Word
    word: repeated
    stem: repeat
    docFrequency: 3.0
    docPositions:
    - 331
    - 902
  through: !ruby/object:Word
    word: through
    stem: through
    docFrequency: 5.0
    docPositions:
    - 332
    - 572
    - 902
  itself: !ruby/object:Word
    word: itself
    stem: itself
    docFrequency: 4.0
    docPositions:
    - 332
    - 670
    - 902
  indeed: !ruby/object:Word
    word: indeed
    stem: inde
    docFrequency: 3.0
    docPositions:
    - 332
    - 902
  yet: !ruby/object:Word
    word: yet
    stem: yet
    docFrequency: 3.0
    docPositions:
    - 332
    - 902
  microsequencer: !ruby/object:Word
    word: microsequencer
    stem: microsequenc
    docFrequency: 3.0
    docPositions:
    - 332
    - 902
  runs: !ruby/object:Word
    word: runs
    stem: run
    docFrequency: 3.0
    docPositions:
    - 332
    - 902
  microcode: !ruby/object:Word
    word: microcode
    stem: microcod
    docFrequency: 3.0
    docPositions:
    - 332
    - 902
  causes: !ruby/object:Word
    word: causes
    stem: caus
    docFrequency: 3.0
    docPositions:
    - 332
    - 902
  events: !ruby/object:Word
    word: events
    stem: event
    docFrequency: 3.0
    docPositions:
    - 332
    - 902
  registers: !ruby/object:Word
    word: registers
    stem: regist
    docFrequency: 11.0
    docPositions:
    - 334
    - 352
    - 357
    - 902
  composed: !ruby/object:Word
    word: composed
    stem: compos
    docFrequency: 5.0
    docPositions:
    - 334
    - 664
    - 902
  mid: !ruby/object:Word
    word: mid
    stem: mid
    docFrequency: 4.0
    docPositions:
    - 334
    - 685
    - 902
  classes: !ruby/object:Word
    word: classes
    stem: class
    docFrequency: 3.0
    docPositions:
    - 337
    - 902
  supports: !ruby/object:Word
    word: supports
    stem: support
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  subtraction: !ruby/object:Word
    word: subtraction
    stem: subtract
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  include: !ruby/object:Word
    word: include
    stem: includ
    docFrequency: 7.0
    docPositions:
    - 338
    - 367
    - 397
    - 902
  sine: !ruby/object:Word
    word: sine
    stem: sine
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  cosine: !ruby/object:Word
    word: cosine
    stem: cosin
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  whole: !ruby/object:Word
    word: whole
    stem: whole
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  integers: !ruby/object:Word
    word: integers
    stem: integ
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  whilst: !ruby/object:Word
    word: whilst
    stem: whilst
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  real: !ruby/object:Word
    word: real
    stem: real
    docFrequency: 5.0
    docPositions:
    - 338
    - 495
    - 682
    - 902
  albeit: !ruby/object:Word
    word: albeit
    stem: albeit
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  precision: !ruby/object:Word
    word: precision
    stem: precis
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  compare: !ruby/object:Word
    word: compare
    stem: compar
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  truth: !ruby/object:Word
    word: truth
    stem: truth
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  values: !ruby/object:Word
    word: values
    stem: valu
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  'true': !ruby/object:Word
    word: 'true'
    stem: 'true'
    docFrequency: 4.0
    docPositions:
    - 338
    - 670
    - 902
  'false': !ruby/object:Word
    word: 'false'
    stem: fals
    docFrequency: 3.0
    docPositions:
    - 338
    - 902
  equal: !ruby/object:Word
    word: equal
    stem: equal
    docFrequency: 5.0
    docPositions:
    - 338
    - 350
    - 902
  involve: !ruby/object:Word
    word: involve
    stem: involv
    docFrequency: 3.0
    docPositions:
    - 339
    - 902
  xor: !ruby/object:Word
    word: xor
    stem: xor
    docFrequency: 3.0
    docPositions:
    - 339
    - 902
  useful: !ruby/object:Word
    word: useful
    stem: us
    docFrequency: 9.0
    docPositions:
    - 339
    - 385
    - 534
    - 611
    - 676
    - 902
  creating: !ruby/object:Word
    word: creating
    stem: creat
    docFrequency: 3.0
    docPositions:
    - 339
    - 902
  statements: !ruby/object:Word
    word: statements
    stem: statement
    docFrequency: 7.0
    docPositions:
    - 339
    - 798
    - 902
  superscalar: !ruby/object:Word
    word: superscalar
    stem: superscalar
    docFrequency: 3.0
    docPositions:
    - 340
    - 902
  multiple: !ruby/object:Word
    word: multiple
    stem: multipl
    docFrequency: 7.0
    docPositions:
    - 340
    - 384
    - 395
    - 902
  alus: !ruby/object:Word
    word: alus
    stem: alu
    docFrequency: 5.0
    docPositions:
    - 340
    - 902
  simultaneously: !ruby/object:Word
    word: simultaneously
    stem: simultan
    docFrequency: 7.0
    docPositions:
    - 340
    - 371
    - 374
    - 902
  graphics: !ruby/object:Word
    word: graphics
    stem: graphic
    docFrequency: 15.0
    docPositions:
    - 340
    - 368
    - 385
    - 471
    - 521
    - 522
    - 568
    - 902
  simd: !ruby/object:Word
    word: simd
    stem: simd
    docFrequency: 3.0
    docPositions:
    - 340
    - 902
  mimd: !ruby/object:Word
    word: mimd
    stem: mimd
    docFrequency: 3.0
    docPositions:
    - 340
    - 902
  vectors: !ruby/object:Word
    word: vectors
    stem: vector
    docFrequency: 3.0
    docPositions:
    - 340
    - 902
  matrices: !ruby/object:Word
    word: matrices
    stem: matric
    docFrequency: 3.0
    docPositions:
    - 340
    - 902
  core: !ruby/object:Word
    word: core
    stem: core
    docFrequency: 5.0
    docPositions:
    - 347
    - 384
    - 668
    - 902
  choice: !ruby/object:Word
    word: choice
    stem: choic
    docFrequency: 2.0
    docPositions:
    - 347
  viewed: !ruby/object:Word
    word: viewed
    stem: view
    docFrequency: 5.0
    docPositions:
    - 350
    - 371
    - 902
  list: !ruby/object:Word
    word: list
    stem: list
    docFrequency: 12.0
    docPositions:
    - 350
    - 486
    - 488
    - 496
    - 537
    - 603
    - 604
    - 606
    - 902
  numbered: !ruby/object:Word
    word: numbered
    stem: number
    docFrequency: 5.0
    docPositions:
    - 350
    - 902
  address: !ruby/object:Word
    word: address
    stem: address
    docFrequency: 4.0
    docPositions:
    - 350
    - 673
    - 902
  instructed: !ruby/object:Word
    word: instructed
    stem: instruct
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  answer: !ruby/object:Word
    word: answer
    stem: answer
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  practically: !ruby/object:Word
    word: practically
    stem: practic
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  even: !ruby/object:Word
    word: even
    stem: even
    docFrequency: 14.0
    docPositions:
    - 350
    - 351
    - 372
    - 397
    - 419
    - 667
    - 902
  differentiate: !ruby/object:Word
    word: differentiate
    stem: differenti
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  responsibility: !ruby/object:Word
    word: responsibility
    stem: respons
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  significance: !ruby/object:Word
    word: significance
    stem: signific
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  sees: !ruby/object:Word
    word: sees
    stem: see
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  nothing: !ruby/object:Word
    word: nothing
    stem: noth
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  series: !ruby/object:Word
    word: series
    stem: seri
    docFrequency: 3.0
    docPositions:
    - 350
    - 902
  eight: !ruby/object:Word
    word: eight
    stem: eight
    docFrequency: 5.0
    docPositions:
    - 351
    - 902
  bits: !ruby/object:Word
    word: bits
    stem: bit
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  byte: !ruby/object:Word
    word: byte
    stem: byte
    docFrequency: 5.0
    docPositions:
    - 351
    - 902
  consecutive: !ruby/object:Word
    word: consecutive
    stem: consecut
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  negative: !ruby/object:Word
    word: negative
    stem: neg
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  complement: !ruby/object:Word
    word: complement
    stem: complement
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  notation: !ruby/object:Word
    word: notation
    stem: notat
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  arrangements: !ruby/object:Word
    word: arrangements
    stem: arrang
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  seen: !ruby/object:Word
    word: seen
    stem: seen
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  outside: !ruby/object:Word
    word: outside
    stem: outsid
    docFrequency: 7.0
    docPositions:
    - 351
    - 367
    - 613
    - 902
  historical: !ruby/object:Word
    word: historical
    stem: histor
    docFrequency: 4.0
    docPositions:
    - 351
    - 692
    - 902
  contexts: !ruby/object:Word
    word: contexts
    stem: context
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  numerically: !ruby/object:Word
    word: numerically
    stem: numer
    docFrequency: 3.0
    docPositions:
    - 351
    - 902
  contains: !ruby/object:Word
    word: contains
    stem: contain
    docFrequency: 5.0
    docPositions:
    - 352
    - 356
    - 902
  rapidly: !ruby/object:Word
    word: rapidly
    stem: rapidli
    docFrequency: 5.0
    docPositions:
    - 352
    - 371
    - 902
  frequently: !ruby/object:Word
    word: frequently
    stem: frequent
    docFrequency: 7.0
    docPositions:
    - 352
    - 356
    - 357
    - 902
  avoid: !ruby/object:Word
    word: avoid
    stem: avoid
    docFrequency: 4.0
    docPositions:
    - 352
    - 613
    - 902
  every: !ruby/object:Word
    word: every
    stem: everi
    docFrequency: 3.0
    docPositions:
    - 352
    - 902
  constantly: !ruby/object:Word
    word: constantly
    stem: constantli
    docFrequency: 3.0
    docPositions:
    - 352
    - 902
  worked: !ruby/object:Word
    word: worked
    stem: work
    docFrequency: 3.0
    docPositions:
    - 352
    - 902
  reducing: !ruby/object:Word
    word: reducing
    stem: reduc
    docFrequency: 3.0
    docPositions:
    - 352
    - 902
  need: !ruby/object:Word
    word: need
    stem: need
    docFrequency: 11.0
    docPositions:
    - 352
    - 357
    - 419
    - 586
    - 902
  slow: !ruby/object:Word
    word: slow
    stem: slow
    docFrequency: 5.0
    docPositions:
    - 352
    - 374
    - 902
  units: !ruby/object:Word
    word: units
    stem: unit
    docFrequency: 3.0
    docPositions:
    - 352
    - 902
  increases: !ruby/object:Word
    word: increases
    stem: increas
    docFrequency: 4.0
    docPositions:
    - 352
    - 673
    - 902
  comes: !ruby/object:Word
    word: comes
    stem: come
    docFrequency: 3.0
    docPositions:
    - 353
    - 902
  principal: !ruby/object:Word
    word: principal
    stem: princip
    docFrequency: 5.0
    docPositions:
    - 353
    - 373
    - 902
  varieties: !ruby/object:Word
    word: varieties
    stem: varieti
    docFrequency: 3.0
    docPositions:
    - 353
    - 902
  rom: !ruby/object:Word
    word: rom
    stem: rom
    docFrequency: 20.0
    docPositions:
    - 355
    - 356
    - 483
    - 902
  anytime: !ruby/object:Word
    word: anytime
    stem: anytim
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  preloaded: !ruby/object:Word
    word: preloaded
    stem: preload
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  changes: !ruby/object:Word
    word: changes
    stem: chang
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  start: !ruby/object:Word
    word: start
    stem: start
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  erased: !ruby/object:Word
    word: erased
    stem: eras
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  retains: !ruby/object:Word
    word: retains
    stem: retain
    docFrequency: 5.0
    docPositions:
    - 356
    - 902
  indefinitely: !ruby/object:Word
    word: indefinitely
    stem: indefinit
    docFrequency: 5.0
    docPositions:
    - 356
    - 798
    - 902
  bios: !ruby/object:Word
    word: bios
    stem: bio
    docFrequency: 9.0
    docPositions:
    - 356
    - 483
    - 545
    - 902
  orchestrates: !ruby/object:Word
    word: orchestrates
    stem: orchestr
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  loading: !ruby/object:Word
    word: loading
    stem: load
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  drive: !ruby/object:Word
    word: drive
    stem: drive
    docFrequency: 6.0
    docPositions:
    - 356
    - 475
    - 902
  whenever: !ruby/object:Word
    word: whenever
    stem: whenev
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  reset: !ruby/object:Word
    word: reset
    stem: reset
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  drives: !ruby/object:Word
    word: drives
    stem: drive
    docFrequency: 10.0
    docPositions:
    - 356
    - 364
    - 367
    - 902
  because: !ruby/object:Word
    word: because
    stem: becaus
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  notionally: !ruby/object:Word
    word: notionally
    stem: notion
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  flash: !ruby/object:Word
    word: flash
    stem: flash
    docFrequency: 5.0
    docPositions:
    - 356
    - 676
    - 696
    - 902
  blurs: !ruby/object:Word
    word: blurs
    stem: blur
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  rewritable: !ruby/object:Word
    word: rewritable
    stem: rewrit
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  slower: !ruby/object:Word
    word: slower
    stem: slower
    docFrequency: 5.0
    docPositions:
    - 356
    - 357
    - 902
  conventional: !ruby/object:Word
    word: conventional
    stem: convent
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  restricted: !ruby/object:Word
    word: restricted
    stem: restrict
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  unnecessary: !ruby/object:Word
    word: unnecessary
    stem: unnecessari
    docFrequency: 3.0
    docPositions:
    - 356
    - 902
  cache: !ruby/object:Word
    word: cache
    stem: cach
    docFrequency: 7.0
    docPositions:
    - 357
    - 902
  memories: !ruby/object:Word
    word: memories
    stem: memori
    docFrequency: 4.0
    docPositions:
    - 357
    - 696
    - 902
  sort: !ruby/object:Word
    word: sort
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 357
    - 902
  exchanges: !ruby/object:Word
    word: exchanges
    stem: exchang
    docFrequency: 3.0
    docPositions:
    - 367
    - 902
  peripherals: !ruby/object:Word
    word: peripherals
    stem: peripher
    docFrequency: 5.0
    docPositions:
    - 367
    - 902
  floppy: !ruby/object:Word
    word: floppy
    stem: floppi
    docFrequency: 4.0
    docPositions:
    - 367
    - 475
    - 902
  optical: !ruby/object:Word
    word: optical
    stem: optic
    docFrequency: 8.0
    docPositions:
    - 367
    - 424
    - 467
    - 475
    - 583
    - 902
  serve: !ruby/object:Word
    word: serve
    stem: serv
    docFrequency: 3.0
    docPositions:
    - 367
    - 902
  right: !ruby/object:Word
    word: right
    stem: right
    docFrequency: 3.0
    docPositions:
    - 368
    - 902
  fifty: !ruby/object:Word
    word: fifty
    stem: fifti
    docFrequency: 3.0
    docPositions:
    - 368
    - 902
  tiny: !ruby/object:Word
    word: tiny
    stem: tini
    docFrequency: 3.0
    docPositions:
    - 368
    - 902
  desktop: !ruby/object:Word
    word: desktop
    stem: desktop
    docFrequency: 7.0
    docPositions:
    - 368
    - 465
    - 516
    - 585
    - 610
    - 902
  assist: !ruby/object:Word
    word: assist
    stem: assist
    docFrequency: 3.0
    docPositions:
    - 368
    - 902
  running: !ruby/object:Word
    word: running
    stem: run
    docFrequency: 14.0
    docPositions:
    - 371
    - 372
    - 374
    - 669
    - 902
  gigantic: !ruby/object:Word
    word: gigantic
    stem: gigant
    docFrequency: 3.0
    docPositions:
    - 371
    - 902
  appearance: !ruby/object:Word
    word: appearance
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 371
    - 902
  signal: !ruby/object:Word
    word: signal
    stem: signal
    docFrequency: 7.0
    docPositions:
    - 372
    - 753
    - 758
    - 759
    - 902
  interrupt: !ruby/object:Word
    word: interrupt
    stem: interrupt
    docFrequency: 7.0
    docPositions:
    - 372
    - 902
  periodically: !ruby/object:Word
    word: periodically
    stem: period
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  stop: !ruby/object:Word
    word: stop
    stem: stop
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  remembering: !ruby/object:Word
    word: remembering
    stem: rememb
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  prior: !ruby/object:Word
    word: prior
    stem: prior
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  generator: !ruby/object:Word
    word: generator
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  causing: !ruby/object:Word
    word: causing
    stem: caus
    docFrequency: 5.0
    docPositions:
    - 372
    - 902
  interrupts: !ruby/object:Word
    word: interrupts
    stem: interrupt
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  orders: !ruby/object:Word
    word: orders
    stem: order
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  magnitude: !ruby/object:Word
    word: magnitude
    stem: magnitud
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  perception: !ruby/object:Word
    word: perception
    stem: percept
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  appear: !ruby/object:Word
    word: appear
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  instant: !ruby/object:Word
    word: instant
    stem: instant
    docFrequency: 4.0
    docPositions:
    - 372
    - 518
    - 902
  sharing: !ruby/object:Word
    word: sharing
    stem: share
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  allocated: !ruby/object:Word
    word: allocated
    stem: alloc
    docFrequency: 3.0
    docPositions:
    - 372
    - 902
  slice: !ruby/object:Word
    word: slice
    stem: slice
    docFrequency: 5.0
    docPositions:
    - 372
    - 374
    - 902
  cheap: !ruby/object:Word
    word: cheap
    stem: cheap
    docFrequency: 6.0
    docPositions:
    - 373
    - 397
    - 681
    - 902
  people: !ruby/object:Word
    word: people
    stem: peopl
    docFrequency: 5.0
    docPositions:
    - 373
    - 397
    - 902
  share: !ruby/object:Word
    word: share
    stem: share
    docFrequency: 4.0
    docPositions:
    - 373
    - 698
    - 902
  seemingly: !ruby/object:Word
    word: seemingly
    stem: seemingli
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  slowly: !ruby/object:Word
    word: slowly
    stem: slowli
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  spend: !ruby/object:Word
    word: spend
    stem: spend
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  waiting: !ruby/object:Word
    word: waiting
    stem: wait
    docFrequency: 7.0
    docPositions:
    - 374
    - 902
  click: !ruby/object:Word
    word: click
    stem: click
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  press: !ruby/object:Word
    word: press
    stem: press
    docFrequency: 14.0
    docPositions:
    - 374
    - 612
    - 625
    - 640
    - 675
    - 680
    - 682
    - 700
    - 705
    - 708
    - 709
    - 710
    - 902
  occurred: !ruby/object:Word
    word: occurred
    stem: occur
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  frees: !ruby/object:Word
    word: frees
    stem: free
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  unacceptable: !ruby/object:Word
    word: unacceptable
    stem: unaccept
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  loss: !ruby/object:Word
    word: loss
    stem: loss
    docFrequency: 3.0
    docPositions:
    - 374
    - 902
  cray: !ruby/object:Word
    word: cray
    stem: crai
    docFrequency: 2.0
    docPositions:
    - 381
  supercomputers: !ruby/object:Word
    word: supercomputers
    stem: supercomput
    docFrequency: 10.0
    docPositions:
    - 381
    - 384
    - 385
    - 681
    - 902
  heavily: !ruby/object:Word
    word: heavily
    stem: heavili
    docFrequency: 2.0
    docPositions:
    - 381
  distribute: !ruby/object:Word
    word: distribute
    stem: distribut
    docFrequency: 3.0
    docPositions:
    - 384
    - 902
  across: !ruby/object:Word
    word: across
    stem: across
    docFrequency: 3.0
    docPositions:
    - 384
    - 902
  configuration: !ruby/object:Word
    word: configuration
    stem: configur
    docFrequency: 4.0
    docPositions:
    - 384
    - 526
    - 902
  employed: !ruby/object:Word
    word: employed
    stem: emploi
    docFrequency: 4.0
    docPositions:
    - 384
    - 685
    - 902
  powerful: !ruby/object:Word
    word: powerful
    stem: power
    docFrequency: 5.0
    docPositions:
    - 384
    - 606
    - 681
    - 902
  mainframe: !ruby/object:Word
    word: mainframe
    stem: mainfram
    docFrequency: 4.0
    docPositions:
    - 384
    - 556
    - 902
  servers: !ruby/object:Word
    word: servers
    stem: server
    docFrequency: 3.0
    docPositions:
    - 384
    - 902
  multiprocessor: !ruby/object:Word
    word: multiprocessor
    stem: multiprocessor
    docFrequency: 3.0
    docPositions:
    - 384
    - 902
  multi: !ruby/object:Word
    word: multi
    stem: multi
    docFrequency: 3.0
    docPositions:
    - 384
    - 902
  widely: !ruby/object:Word
    word: widely
    stem: wide
    docFrequency: 3.0
    docPositions:
    - 384
    - 902
  lower: !ruby/object:Word
    word: lower
    stem: lower
    docFrequency: 4.0
    docPositions:
    - 384
    - 681
    - 902
  markets: !ruby/object:Word
    word: markets
    stem: market
    docFrequency: 3.0
    docPositions:
    - 384
    - 902
  highly: !ruby/object:Word
    word: highly
    stem: highli
    docFrequency: 5.0
    docPositions:
    - 385
    - 534
    - 902
  differ: !ruby/object:Word
    word: differ
    stem: differ
    docFrequency: 3.0
    docPositions:
    - 385
    - 902
  significantly: !ruby/object:Word
    word: significantly
    stem: significantli
    docFrequency: 3.0
    docPositions:
    - 385
    - 902
  customized: !ruby/object:Word
    word: customized
    stem: custom
    docFrequency: 4.0
    docPositions:
    - 385
    - 681
    - 902
  interconnects: !ruby/object:Word
    word: interconnects
    stem: interconnect
    docFrequency: 3.0
    docPositions:
    - 385
    - 902
  organization: !ruby/object:Word
    word: organization
    stem: organ
    docFrequency: 5.0
    docPositions:
    - 385
    - 664
    - 885
    - 902
  utilize: !ruby/object:Word
    word: utilize
    stem: util
    docFrequency: 3.0
    docPositions:
    - 385
    - 902
  usage: !ruby/object:Word
    word: usage
    stem: usag
    docFrequency: 7.0
    docPositions:
    - 385
    - 419
    - 610
    - 676
    - 902
  simulation: !ruby/object:Word
    word: simulation
    stem: simul
    docFrequency: 4.0
    docPositions:
    - 385
    - 530
    - 902
  rendering: !ruby/object:Word
    word: rendering
    stem: render
    docFrequency: 3.0
    docPositions:
    - 385
    - 902
  cryptography: !ruby/object:Word
    word: cryptography
    stem: cryptographi
    docFrequency: 3.0
    docPositions:
    - 385
    - 902
  embarrassingly: !ruby/object:Word
    word: embarrassingly
    stem: embarrassingli
    docFrequency: 3.0
    docPositions:
    - 385
    - 902
  parallel: !ruby/object:Word
    word: parallel
    stem: parallel
    docFrequency: 4.0
    docPositions:
    - 385
    - 675
    - 902
  visualization: !ruby/object:Word
    word: visualization
    stem: visual
    docFrequency: 2.0
    docPositions:
    - 392
  routes: !ruby/object:Word
    word: routes
    stem: rout
    docFrequency: 2.0
    docPositions:
    - 392
  coordinate: !ruby/object:Word
    word: coordinate
    stem: coordin
    docFrequency: 3.0
    docPositions:
    - 395
    - 902
  u: !ruby/object:Word
    word: u
    stem: u
    docFrequency: 3.0
    docPositions:
    - 395
    - 902
  sage: !ruby/object:Word
    word: sage
    stem: sage
    docFrequency: 4.0
    docPositions:
    - 395
    - 682
    - 902
  sabre: !ruby/object:Word
    word: sabre
    stem: sabr
    docFrequency: 4.0
    docPositions:
    - 395
    - 682
    - 902
  engineers: !ruby/object:Word
    word: engineers
    stem: engin
    docFrequency: 3.0
    docPositions:
    - 396
    - 902
  institutions: !ruby/object:Word
    word: institutions
    stem: institut
    docFrequency: 5.0
    docPositions:
    - 396
    - 397
    - 902
  link: !ruby/object:Word
    word: link
    stem: link
    docFrequency: 10.0
    docPositions:
    - 396
    - 613
    - 632
    - 651
    - 657
    - 663
    - 666
    - 691
    - 902
  telecommunications: !ruby/object:Word
    word: telecommunications
    stem: telecommun
    docFrequency: 4.0
    docPositions:
    - 396
    - 583
    - 902
  effort: !ruby/object:Word
    word: effort
    stem: effort
    docFrequency: 3.0
    docPositions:
    - 396
    - 902
  funded: !ruby/object:Word
    word: funded
    stem: fund
    docFrequency: 3.0
    docPositions:
    - 396
    - 902
  arpa: !ruby/object:Word
    word: arpa
    stem: arpa
    docFrequency: 3.0
    docPositions:
    - 396
    - 902
  darpa: !ruby/object:Word
    word: darpa
    stem: darpa
    docFrequency: 3.0
    docPositions:
    - 396
    - 902
  resulted: !ruby/object:Word
    word: resulted
    stem: result
    docFrequency: 4.0
    docPositions:
    - 396
    - 670
    - 902
  arpanet: !ruby/object:Word
    word: arpanet
    stem: arpanet
    docFrequency: 5.0
    docPositions:
    - 396
    - 902
  spread: !ruby/object:Word
    word: spread
    stem: spread
    docFrequency: 9.0
    docPositions:
    - 396
    - 397
    - 580
    - 902
  evolved: !ruby/object:Word
    word: evolved
    stem: evolv
    docFrequency: 6.0
    docPositions:
    - 396
    - 422
    - 613
    - 902
  beyond: !ruby/object:Word
    word: beyond
    stem: beyond
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  emergence: !ruby/object:Word
    word: emergence
    stem: emerg
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  involved: !ruby/object:Word
    word: involved
    stem: involv
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  redefinition: !ruby/object:Word
    word: redefinition
    stem: redefinit
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  nature: !ruby/object:Word
    word: nature
    stem: natur
    docFrequency: 6.0
    docPositions:
    - 397
    - 586
    - 618
    - 902
  boundaries: !ruby/object:Word
    word: boundaries
    stem: boundari
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  modified: !ruby/object:Word
    word: modified
    stem: modifi
    docFrequency: 6.0
    docPositions:
    - 397
    - 483
    - 883
    - 902
  define: !ruby/object:Word
    word: define
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  extensions: !ruby/object:Word
    word: extensions
    stem: extens
    docFrequency: 4.0
    docPositions:
    - 397
    - 687
    - 902
  facilities: !ruby/object:Word
    word: facilities
    stem: facil
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  primarily: !ruby/object:Word
    word: primarily
    stem: primarili
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  tech: !ruby/object:Word
    word: tech
    stem: tech
    docFrequency: 4.0
    docPositions:
    - 397
    - 618
    - 902
  environments: !ruby/object:Word
    word: environments
    stem: environ
    docFrequency: 5.0
    docPositions:
    - 397
    - 902
  mail: !ruby/object:Word
    word: mail
    stem: mail
    docFrequency: 5.0
    docPositions:
    - 397
    - 518
    - 902
  wide: !ruby/object:Word
    word: wide
    stem: wide
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  fast: !ruby/object:Word
    word: fast
    stem: fast
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  ethernet: !ruby/object:Word
    word: ethernet
    stem: ethernet
    docFrequency: 4.0
    docPositions:
    - 397
    - 480
    - 902
  adsl: !ruby/object:Word
    word: adsl
    stem: adsl
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  saw: !ruby/object:Word
    word: saw
    stem: saw
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  ubiquitous: !ruby/object:Word
    word: ubiquitous
    stem: ubiquit
    docFrequency: 5.0
    docPositions:
    - 397
    - 902
  networked: !ruby/object:Word
    word: networked
    stem: network
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  growing: !ruby/object:Word
    word: growing
    stem: grow
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  phenomenally: !ruby/object:Word
    word: phenomenally
    stem: phenomen
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  very: !ruby/object:Word
    word: very
    stem: veri
    docFrequency: 9.0
    docPositions:
    - 397
    - 424
    - 668
    - 681
    - 902
  regularly: !ruby/object:Word
    word: regularly
    stem: regularli
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  connect: !ruby/object:Word
    word: connect
    stem: connect
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  communicate: !ruby/object:Word
    word: communicate
    stem: commun
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  receive: !ruby/object:Word
    word: receive
    stem: receiv
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  wireless: !ruby/object:Word
    word: wireless
    stem: wireless
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  utilizing: !ruby/object:Word
    word: utilizing
    stem: util
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  phone: !ruby/object:Word
    word: phone
    stem: phone
    docFrequency: 3.0
    docPositions:
    - 397
    - 902
  networks: !ruby/object:Word
    word: networks
    stem: network
    docFrequency: 4.0
    docPositions:
    - 397
    - 681
    - 902
  quantum: !ruby/object:Word
    word: quantum
    stem: quantum
    docFrequency: 12.0
    docPositions:
    - 401
    - 407
    - 424
    - 467
    - 703
    - 902
  vs: !ruby/object:Word
    word: vs
    stem: vs
    docFrequency: 5.0
    docPositions:
    - 401
    - 402
    - 404
    - 405
  chemical: !ruby/object:Word
    word: chemical
    stem: chemic
    docFrequency: 3.0
    docPositions:
    - 401
    - 467
  scalar: !ruby/object:Word
    word: scalar
    stem: scalar
    docFrequency: 2.0
    docPositions:
    - 402
  processor: !ruby/object:Word
    word: processor
    stem: processor
    docFrequency: 7.0
    docPositions:
    - 402
    - 419
    - 611
    - 695
    - 902
  vector: !ruby/object:Word
    word: vector
    stem: vector
    docFrequency: 3.0
    docPositions:
    - 402
    - 522
  non: !ruby/object:Word
    word: non
    stem: non
    docFrequency: 5.0
    docPositions:
    - 403
    - 537
    - 667
    - 885
  uniform: !ruby/object:Word
    word: uniform
    stem: uniform
    docFrequency: 2.0
    docPositions:
    - 403
  numa: !ruby/object:Word
    word: numa
    stem: numa
    docFrequency: 2.0
    docPositions:
    - 403
  stack: !ruby/object:Word
    word: stack
    stem: stack
    docFrequency: 2.0
    docPositions:
    - 404
  holds: !ruby/object:Word
    word: holds
    stem: hold
    docFrequency: 3.0
    docPositions:
    - 407
    - 902
  promise: !ruby/object:Word
    word: promise
    stem: promis
    docFrequency: 3.0
    docPositions:
    - 407
    - 902
  revolutionizing: !ruby/object:Word
    word: revolutionizing
    stem: revolution
    docFrequency: 3.0
    docPositions:
    - 407
    - 902
  abstraction: !ruby/object:Word
    word: abstraction
    stem: abstract
    docFrequency: 3.0
    docPositions:
    - 408
    - 902
  apply: !ruby/object:Word
    word: apply
    stem: appli
    docFrequency: 4.0
    docPositions:
    - 408
    - 885
    - 902
  above: !ruby/object:Word
    word: above
    stem: abov
    docFrequency: 3.0
    docPositions:
    - 408
    - 902
  versatile: !ruby/object:Word
    word: versatile
    stem: versatil
    docFrequency: 3.0
    docPositions:
    - 409
    - 902
  distinguishing: !ruby/object:Word
    word: distinguishing
    stem: distinguish
    docFrequency: 3.0
    docPositions:
    - 409
    - 902
  church: !ruby/object:Word
    word: church
    stem: church
    docFrequency: 3.0
    docPositions:
    - 409
    - 902
  thesis: !ruby/object:Word
    word: thesis
    stem: thesi
    docFrequency: 3.0
    docPositions:
    - 409
    - 902
  statement: !ruby/object:Word
    word: statement
    stem: statement
    docFrequency: 3.0
    docPositions:
    - 409
    - 902
  minimum: !ruby/object:Word
    word: minimum
    stem: minimum
    docFrequency: 3.0
    docPositions:
    - 409
    - 902
  netbook: !ruby/object:Word
    word: netbook
    stem: netbook
    docFrequency: 3.0
    docPositions:
    - 409
    - 902
  supercomputer: !ruby/object:Word
    word: supercomputer
    stem: supercomput
    docFrequency: 4.0
    docPositions:
    - 409
    - 681
    - 902
  automaton: !ruby/object:Word
    word: automaton
    stem: automaton
    docFrequency: 4.0
    docPositions:
    - 409
    - 623
    - 902
  computational: !ruby/object:Word
    word: computational
    stem: comput
    docFrequency: 6.0
    docPositions:
    - 409
    - 422
    - 585
    - 902
  capacity: !ruby/object:Word
    word: capacity
    stem: capac
    docFrequency: 5.0
    docPositions:
    - 409
    - 424
    - 902
  women: !ruby/object:Word
    word: women
    stem: women
    docFrequency: 2.0
    docPositions:
    - 416
  naca: !ruby/object:Word
    word: naca
    stem: naca
    docFrequency: 2.0
    docPositions:
    - 416
  flight: !ruby/object:Word
    word: flight
    stem: flight
    docFrequency: 3.0
    docPositions:
    - 416
    - 528
  nor: !ruby/object:Word
    word: nor
    stem: nor
    docFrequency: 7.0
    docPositions:
    - 419
    - 902
  synonymous: !ruby/object:Word
    word: synonymous
    stem: synonym
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  literally: !ruby/object:Word
    word: literally
    stem: liter
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  computes: !ruby/object:Word
    word: computes
    stem: comput
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  performs: !ruby/object:Word
    word: performs
    stem: perform
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  assembles: !ruby/object:Word
    word: assembles
    stem: assembl
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  correlates: !ruby/object:Word
    word: correlates
    stem: correl
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  processes: !ruby/object:Word
    word: processes
    stem: process
    docFrequency: 5.0
    docPositions:
    - 419
    - 902
  qualifies: !ruby/object:Word
    word: qualifies
    stem: qualifi
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  purposeful: !ruby/object:Word
    word: purposeful
    stem: purpos
    docFrequency: 3.0
    docPositions:
    - 419
    - 902
  billiard: !ruby/object:Word
    word: billiard
    stem: billiard
    docFrequency: 5.0
    docPositions:
    - 422
    - 902
  balls: !ruby/object:Word
    word: balls
    stem: ball
    docFrequency: 3.0
    docPositions:
    - 422
    - 902
  quoted: !ruby/object:Word
    word: quoted
    stem: quot
    docFrequency: 4.0
    docPositions:
    - 422
    - 630
    - 902
  realistically: !ruby/object:Word
    word: realistically
    stem: realist
    docFrequency: 3.0
    docPositions:
    - 422
    - 902
  photolithographed: !ruby/object:Word
    word: photolithographed
    stem: photolithograph
    docFrequency: 3.0
    docPositions:
    - 422
    - 902
  semiconductors: !ruby/object:Word
    word: semiconductors
    stem: semiconductor
    docFrequency: 3.0
    docPositions:
    - 422
    - 902
  promising: !ruby/object:Word
    word: promising
    stem: promis
    docFrequency: 3.0
    docPositions:
    - 424
    - 902
  dna: !ruby/object:Word
    word: dna
    stem: dna
    docFrequency: 4.0
    docPositions:
    - 424
    - 467
    - 902
  neural: !ruby/object:Word
    word: neural
    stem: neural
    docFrequency: 3.0
    docPositions:
    - 424
    - 902
  factoring: !ruby/object:Word
    word: factoring
    stem: factor
    docFrequency: 3.0
    docPositions:
    - 424
    - 902
  glossary: !ruby/object:Word
    word: glossary
    stem: glossari
    docFrequency: 2.0
    docPositions:
    - 426
  regard: !ruby/object:Word
    word: regard
    stem: regard
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  efficiency: !ruby/object:Word
    word: efficiency
    stem: effici
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  alternative: !ruby/object:Word
    word: alternative
    stem: altern
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  shortcuts: !ruby/object:Word
    word: shortcuts
    stem: shortcut
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  learn: !ruby/object:Word
    word: learn
    stem: learn
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  adapt: !ruby/object:Word
    word: adapt
    stem: adapt
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  emerging: !ruby/object:Word
    word: emerging
    stem: emerg
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  field: !ruby/object:Word
    word: field
    stem: field
    docFrequency: 3.0
    docPositions:
    - 428
    - 902
  learning: !ruby/object:Word
    word: learning
    stem: learn
    docFrequency: 4.0
    docPositions:
    - 428
    - 679
    - 902
  covers: !ruby/object:Word
    word: covers
    stem: cover
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  those: !ruby/object:Word
    word: those
    stem: those
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  tangible: !ruby/object:Word
    word: tangible
    stem: tangibl
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  objects: !ruby/object:Word
    word: objects
    stem: object
    docFrequency: 4.0
    docPositions:
    - 431
    - 613
    - 902
  displays: !ruby/object:Word
    word: displays
    stem: displai
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  supplies: !ruby/object:Word
    word: supplies
    stem: suppli
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  keyboards: !ruby/object:Word
    word: keyboards
    stem: keyboard
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  printers: !ruby/object:Word
    word: printers
    stem: printer
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  mice: !ruby/object:Word
    word: mice
    stem: mice
    docFrequency: 3.0
    docPositions:
    - 431
    - 902
  pascal: !ruby/object:Word
    word: pascal
    stem: pascal
    docFrequency: 4.0
    docPositions:
    - 436
    - 541
  arithmometer: !ruby/object:Word
    word: arithmometer
    stem: arithmomet
    docFrequency: 2.0
    docPositions:
    - 436
  quevedo: !ruby/object:Word
    word: quevedo
    stem: quevedo
    docFrequency: 2.0
    docPositions:
    - 436
  ibm: !ruby/object:Word
    word: ibm
    stem: ibm
    docFrequency: 17.0
    docPositions:
    - 438
    - 441
    - 443
    - 446
    - 448
    - 451
    - 483
    - 486
    - 492
    - 902
  ascc: !ruby/object:Word
    word: ascc
    stem: ascc
    docFrequency: 2.0
    docPositions:
    - 438
  ssec: !ruby/object:Word
    word: ssec
    stem: ssec
    docFrequency: 2.0
    docPositions:
    - 438
  univac: !ruby/object:Word
    word: univac
    stem: univac
    docFrequency: 4.0
    docPositions:
    - 441
    - 443
  edsac: !ruby/object:Word
    word: edsac
    stem: edsac
    docFrequency: 2.0
    docPositions:
    - 443
  pegasus: !ruby/object:Word
    word: pegasus
    stem: pegasu
    docFrequency: 2.0
    docPositions:
    - 443
  mercury: !ruby/object:Word
    word: mercury
    stem: mercuri
    docFrequency: 2.0
    docPositions:
    - 443
  csirac: !ruby/object:Word
    word: csirac
    stem: csirac
    docFrequency: 2.0
    docPositions:
    - 443
  discrete: !ruby/object:Word
    word: discrete
    stem: discret
    docFrequency: 2.0
    docPositions:
    - 444
  ssi: !ruby/object:Word
    word: ssi
    stem: ssi
    docFrequency: 2.0
    docPositions:
    - 444
  msi: !ruby/object:Word
    word: msi
    stem: msi
    docFrequency: 2.0
    docPositions:
    - 444
  lsi: !ruby/object:Word
    word: lsi
    stem: lsi
    docFrequency: 2.0
    docPositions:
    - 444
  mainframes: !ruby/object:Word
    word: mainframes
    stem: mainfram
    docFrequency: 2.0
    docPositions:
    - 445
  bunch: !ruby/object:Word
    word: bunch
    stem: bunch
    docFrequency: 2.0
    docPositions:
    - 446
  minicomputer: !ruby/object:Word
    word: minicomputer
    stem: minicomput
    docFrequency: 3.0
    docPositions:
    - 447
    - 450
  linc: !ruby/object:Word
    word: linc
    stem: linc
    docFrequency: 2.0
    docPositions:
    - 448
  pdp: !ruby/object:Word
    word: pdp
    stem: pdp
    docFrequency: 5.0
    docPositions:
    - 448
    - 667
    - 695
  vlsi: !ruby/object:Word
    word: vlsi
    stem: vlsi
    docFrequency: 2.0
    docPositions:
    - 449
  vax: !ruby/object:Word
    word: vax
    stem: vax
    docFrequency: 2.0
    docPositions:
    - 451
  microcomputer: !ruby/object:Word
    word: microcomputer
    stem: microcomput
    docFrequency: 6.0
    docPositions:
    - 452
    - 454
    - 456
    - 458
    - 460
  motorola: !ruby/object:Word
    word: motorola
    stem: motorola
    docFrequency: 4.0
    docPositions:
    - 455
    - 459
  mos: !ruby/object:Word
    word: mos
    stem: mo
    docFrequency: 2.0
    docPositions:
    - 455
  zilog: !ruby/object:Word
    word: zilog
    stem: zilog
    docFrequency: 3.0
    docPositions:
    - 455
    - 457
  wdc: !ruby/object:Word
    word: wdc
    stem: wdc
    docFrequency: 2.0
    docPositions:
    - 457
  alpha: !ruby/object:Word
    word: alpha
    stem: alpha
    docFrequency: 3.0
    docPositions:
    - 461
    - 687
  pa: !ruby/object:Word
    word: pa
    stem: pa
    docFrequency: 2.0
    docPositions:
    - 461
  risc: !ruby/object:Word
    word: risc
    stem: risc
    docFrequency: 2.0
    docPositions:
    - 461
  powerpc: !ruby/object:Word
    word: powerpc
    stem: powerpc
    docFrequency: 2.0
    docPositions:
    - 461
  sparc: !ruby/object:Word
    word: sparc
    stem: sparc
    docFrequency: 2.0
    docPositions:
    - 461
  home: !ruby/object:Word
    word: home
    stem: home
    docFrequency: 2.0
    docPositions:
    - 465
  assistant: !ruby/object:Word
    word: assistant
    stem: assist
    docFrequency: 2.0
    docPositions:
    - 465
  tablet: !ruby/object:Word
    word: tablet
    stem: tablet
    docFrequency: 4.0
    docPositions:
    - 465
    - 471
    - 568
  wearable: !ruby/object:Word
    word: wearable
    stem: wearabl
    docFrequency: 2.0
    docPositions:
    - 465
  spintronics: !ruby/object:Word
    word: spintronics
    stem: spintron
    docFrequency: 2.0
    docPositions:
    - 467
  joystick: !ruby/object:Word
    word: joystick
    stem: joystick
    docFrequency: 3.0
    docPositions:
    - 471
    - 562
  image: !ruby/object:Word
    word: image
    stem: imag
    docFrequency: 4.0
    docPositions:
    - 471
    - 522
    - 567
  scanner: !ruby/object:Word
    word: scanner
    stem: scanner
    docFrequency: 4.0
    docPositions:
    - 471
    - 532
    - 567
  webcam: !ruby/object:Word
    word: webcam
    stem: webcam
    docFrequency: 2.0
    docPositions:
    - 471
  microphone: !ruby/object:Word
    word: microphone
    stem: microphon
    docFrequency: 3.0
    docPositions:
    - 471
    - 564
  monitor: !ruby/object:Word
    word: monitor
    stem: monitor
    docFrequency: 3.0
    docPositions:
    - 473
    - 573
  loudspeaker: !ruby/object:Word
    word: loudspeaker
    stem: loudspeak
    docFrequency: 2.0
    docPositions:
    - 473
  teleprinter: !ruby/object:Word
    word: teleprinter
    stem: teleprint
    docFrequency: 2.0
    docPositions:
    - 475
  range: !ruby/object:Word
    word: range
    stem: rang
    docFrequency: 3.0
    docPositions:
    - 477
    - 479
  rs: !ruby/object:Word
    word: rs
    stem: rs
    docFrequency: 2.0
    docPositions:
    - 478
  scsi: !ruby/object:Word
    word: scsi
    stem: scsi
    docFrequency: 2.0
    docPositions:
    - 478
  pci: !ruby/object:Word
    word: pci
    stem: pci
    docFrequency: 2.0
    docPositions:
    - 478
  usb: !ruby/object:Word
    word: usb
    stem: usb
    docFrequency: 2.0
    docPositions:
    - 478
  atm: !ruby/object:Word
    word: atm
    stem: atm
    docFrequency: 2.0
    docPositions:
    - 480
  fddi: !ruby/object:Word
    word: fddi
    stem: fddi
    docFrequency: 2.0
    docPositions:
    - 480
  refers: !ruby/object:Word
    word: refers
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 483
    - 902
  protocols: !ruby/object:Word
    word: protocols
    stem: protocol
    docFrequency: 3.0
    docPositions:
    - 483
    - 902
  easily: !ruby/object:Word
    word: easily
    stem: easili
    docFrequency: 3.0
    docPositions:
    - 483
    - 902
  compatible: !ruby/object:Word
    word: compatible
    stem: compat
    docFrequency: 4.0
    docPositions:
    - 483
    - 668
    - 902
  unix: !ruby/object:Word
    word: unix
    stem: unix
    docFrequency: 4.0
    docPositions:
    - 485
    - 486
    - 679
  bsd: !ruby/object:Word
    word: bsd
    stem: bsd
    docFrequency: 3.0
    docPositions:
    - 485
    - 486
  v: !ruby/object:Word
    word: v
    stem: v
    docFrequency: 6.0
    docPositions:
    - 486
    - 616
    - 645
    - 711
    - 733
  aix: !ruby/object:Word
    word: aix
    stem: aix
    docFrequency: 2.0
    docPositions:
    - 486
  hp: !ruby/object:Word
    word: hp
    stem: hp
    docFrequency: 2.0
    docPositions:
    - 486
  ux: !ruby/object:Word
    word: ux
    stem: ux
    docFrequency: 2.0
    docPositions:
    - 486
  solaris: !ruby/object:Word
    word: solaris
    stem: solari
    docFrequency: 2.0
    docPositions:
    - 486
  sunos: !ruby/object:Word
    word: sunos
    stem: suno
    docFrequency: 2.0
    docPositions:
    - 486
  irix: !ruby/object:Word
    word: irix
    stem: irix
    docFrequency: 2.0
    docPositions:
    - 486
  gnu: !ruby/object:Word
    word: gnu
    stem: gnu
    docFrequency: 2.0
    docPositions:
    - 487
  linux: !ruby/object:Word
    word: linux
    stem: linux
    docFrequency: 4.0
    docPositions:
    - 487
    - 488
  distributions: !ruby/object:Word
    word: distributions
    stem: distribut
    docFrequency: 3.0
    docPositions:
    - 488
  comparison: !ruby/object:Word
    word: comparison
    stem: comparison
    docFrequency: 4.0
    docPositions:
    - 488
    - 610
    - 664
  microsoft: !ruby/object:Word
    word: microsoft
    stem: microsoft
    docFrequency: 3.0
    docPositions:
    - 489
    - 511
  windows: !ruby/object:Word
    word: windows
    stem: window
    docFrequency: 13.0
    docPositions:
    - 489
    - 490
    - 511
  nt: !ruby/object:Word
    word: nt
    stem: nt
    docFrequency: 2.0
    docPositions:
    - 490
  me: !ruby/object:Word
    word: me
    stem: me
    docFrequency: 3.0
    docPositions:
    - 490
    - 630
  xp: !ruby/object:Word
    word: xp
    stem: xp
    docFrequency: 2.0
    docPositions:
    - 490
  vista: !ruby/object:Word
    word: vista
    stem: vista
    docFrequency: 2.0
    docPositions:
    - 490
  dos: !ruby/object:Word
    word: dos
    stem: do
    docFrequency: 6.0
    docPositions:
    - 491
    - 492
  qdos: !ruby/object:Word
    word: qdos
    stem: qdo
    docFrequency: 2.0
    docPositions:
    - 492
  ms: !ruby/object:Word
    word: ms
    stem: ms
    docFrequency: 2.0
    docPositions:
    - 492
  dr: !ruby/object:Word
    word: dr
    stem: dr
    docFrequency: 2.0
    docPositions:
    - 492
  freedos: !ruby/object:Word
    word: freedos
    stem: freedo
    docFrequency: 2.0
    docPositions:
    - 492
  mac: !ruby/object:Word
    word: mac
    stem: mac
    docFrequency: 4.0
    docPositions:
    - 493
    - 494
  os: !ruby/object:Word
    word: os
    stem: os
    docFrequency: 4.0
    docPositions:
    - 493
    - 494
  x: !ruby/object:Word
    word: x
    stem: x
    docFrequency: 3.0
    docPositions:
    - 494
    - 640
  amoeba: !ruby/object:Word
    word: amoeba
    stem: amoeba
    docFrequency: 2.0
    docPositions:
    - 498
  oberon: !ruby/object:Word
    word: oberon
    stem: oberon
    docFrequency: 2.0
    docPositions:
    - 498
  bluebottle: !ruby/object:Word
    word: bluebottle
    stem: bluebottl
    docFrequency: 2.0
    docPositions:
    - 498
  plan: !ruby/object:Word
    word: plan
    stem: plan
    docFrequency: 2.0
    docPositions:
    - 498
  library: !ruby/object:Word
    word: library
    stem: librari
    docFrequency: 5.0
    docPositions:
    - 499
    - 502
    - 503
  multimedia: !ruby/object:Word
    word: multimedia
    stem: multimedia
    docFrequency: 2.0
    docPositions:
    - 500
  directx: !ruby/object:Word
    word: directx
    stem: directx
    docFrequency: 2.0
    docPositions:
    - 501
  opengl: !ruby/object:Word
    word: opengl
    stem: opengl
    docFrequency: 2.0
    docPositions:
    - 501
  openal: !ruby/object:Word
    word: openal
    stem: open
    docFrequency: 2.0
    docPositions:
    - 501
  vulkan_: !ruby/object:Word
    word: vulkan_
    stem: vulkan_
    docFrequency: 2.0
    docPositions:
    - 501
  api: !ruby/object:Word
    word: api
    stem: api
    docFrequency: 2.0
    docPositions:
    - 501
  template: !ruby/object:Word
    word: template
    stem: templat
    docFrequency: 2.0
    docPositions:
    - 503
  protocol: !ruby/object:Word
    word: protocol
    stem: protocol
    docFrequency: 2.0
    docPositions:
    - 505
  tcp: !ruby/object:Word
    word: tcp
    stem: tcp
    docFrequency: 2.0
    docPositions:
    - 506
  ip: !ruby/object:Word
    word: ip
    stem: ip
    docFrequency: 2.0
    docPositions:
    - 506
  kermit: !ruby/object:Word
    word: kermit
    stem: kermit
    docFrequency: 2.0
    docPositions:
    - 506
  ftp: !ruby/object:Word
    word: ftp
    stem: ftp
    docFrequency: 2.0
    docPositions:
    - 506
  smtp: !ruby/object:Word
    word: smtp
    stem: smtp
    docFrequency: 2.0
    docPositions:
    - 506
  file: !ruby/object:Word
    word: file
    stem: file
    docFrequency: 3.0
    docPositions:
    - 507
    - 532
  format: !ruby/object:Word
    word: format
    stem: format
    docFrequency: 2.0
    docPositions:
    - 507
  html: !ruby/object:Word
    word: html
    stem: html
    docFrequency: 4.0
    docPositions:
    - 508
    - 657
    - 659
  xml: !ruby/object:Word
    word: xml
    stem: xml
    docFrequency: 2.0
    docPositions:
    - 508
  jpeg: !ruby/object:Word
    word: jpeg
    stem: jpeg
    docFrequency: 2.0
    docPositions:
    - 508
  mpeg: !ruby/object:Word
    word: mpeg
    stem: mpeg
    docFrequency: 2.0
    docPositions:
    - 508
  png: !ruby/object:Word
    word: png
    stem: png
    docFrequency: 2.0
    docPositions:
    - 508
  interface: !ruby/object:Word
    word: interface
    stem: interfac
    docFrequency: 6.0
    docPositions:
    - 509
    - 510
    - 512
    - 513
  graphical: !ruby/object:Word
    word: graphical
    stem: graphic
    docFrequency: 2.0
    docPositions:
    - 510
  wimp: !ruby/object:Word
    word: wimp
    stem: wimp
    docFrequency: 2.0
    docPositions:
    - 510
  gnome: !ruby/object:Word
    word: gnome
    stem: gnome
    docFrequency: 2.0
    docPositions:
    - 511
  kde: !ruby/object:Word
    word: kde
    stem: kde
    docFrequency: 2.0
    docPositions:
    - 511
  qnx: !ruby/object:Word
    word: qnx
    stem: qnx
    docFrequency: 2.0
    docPositions:
    - 511
  photon: !ruby/object:Word
    word: photon
    stem: photon
    docFrequency: 2.0
    docPositions:
    - 511
  cde: !ruby/object:Word
    word: cde
    stem: cde
    docFrequency: 2.0
    docPositions:
    - 511
  gem: !ruby/object:Word
    word: gem
    stem: gem
    docFrequency: 2.0
    docPositions:
    - 511
  aqua: !ruby/object:Word
    word: aqua
    stem: aqua
    docFrequency: 2.0
    docPositions:
    - 511
  suite: !ruby/object:Word
    word: suite
    stem: suit
    docFrequency: 2.0
    docPositions:
    - 515
  publishing: !ruby/object:Word
    word: publishing
    stem: publish
    docFrequency: 5.0
    docPositions:
    - 516
    - 585
    - 711
    - 713
  presentation: !ruby/object:Word
    word: presentation
    stem: present
    docFrequency: 2.0
    docPositions:
    - 516
  database: !ruby/object:Word
    word: database
    stem: databas
    docFrequency: 2.0
    docPositions:
    - 516
  management: !ruby/object:Word
    word: management
    stem: manag
    docFrequency: 7.0
    docPositions:
    - 516
    - 520
    - 526
    - 532
  scheduling: !ruby/object:Word
    word: scheduling
    stem: schedul
    docFrequency: 2.0
    docPositions:
    - 516
  spreadsheet: !ruby/object:Word
    word: spreadsheet
    stem: spreadsheet
    docFrequency: 2.0
    docPositions:
    - 516
  accounting: !ruby/object:Word
    word: accounting
    stem: account
    docFrequency: 4.0
    docPositions:
    - 516
    - 614
  browser: !ruby/object:Word
    word: browser
    stem: browser
    docFrequency: 2.0
    docPositions:
    - 518
  client: !ruby/object:Word
    word: client
    stem: client
    docFrequency: 2.0
    docPositions:
    - 518
  server: !ruby/object:Word
    word: server
    stem: server
    docFrequency: 2.0
    docPositions:
    - 518
  transfer: !ruby/object:Word
    word: transfer
    stem: transfer
    docFrequency: 3.0
    docPositions:
    - 518
    - 768
  agent: !ruby/object:Word
    word: agent
    stem: agent
    docFrequency: 2.0
    docPositions:
    - 518
  messaging: !ruby/object:Word
    word: messaging
    stem: messag
    docFrequency: 2.0
    docPositions:
    - 518
  manufacturing: !ruby/object:Word
    word: manufacturing
    stem: manufactur
    docFrequency: 4.0
    docPositions:
    - 519
    - 520
  aided: !ruby/object:Word
    word: aided
    stem: aid
    docFrequency: 3.0
    docPositions:
    - 520
  plant: !ruby/object:Word
    word: plant
    stem: plant
    docFrequency: 2.0
    docPositions:
    - 520
  robotic: !ruby/object:Word
    word: robotic
    stem: robot
    docFrequency: 2.0
    docPositions:
    - 520
  supply: !ruby/object:Word
    word: supply
    stem: suppli
    docFrequency: 2.0
    docPositions:
    - 520
  chain: !ruby/object:Word
    word: chain
    stem: chain
    docFrequency: 2.0
    docPositions:
    - 520
  raster: !ruby/object:Word
    word: raster
    stem: raster
    docFrequency: 2.0
    docPositions:
    - 522
  editor: !ruby/object:Word
    word: editor
    stem: editor
    docFrequency: 6.0
    docPositions:
    - 522
    - 524
    - 526
  modeler: !ruby/object:Word
    word: modeler
    stem: model
    docFrequency: 2.0
    docPositions:
    - 522
  animation: !ruby/object:Word
    word: animation
    stem: anim
    docFrequency: 2.0
    docPositions:
    - 522
  editing: !ruby/object:Word
    word: editing
    stem: edit
    docFrequency: 2.0
    docPositions:
    - 522
  audio: !ruby/object:Word
    word: audio
    stem: audio
    docFrequency: 6.0
    docPositions:
    - 523
    - 524
    - 780
  playback: !ruby/object:Word
    word: playback
    stem: playback
    docFrequency: 2.0
    docPositions:
    - 524
  mixing: !ruby/object:Word
    word: mixing
    stem: mix
    docFrequency: 2.0
    docPositions:
    - 524
  synthesis: !ruby/object:Word
    word: synthesis
    stem: synthesi
    docFrequency: 4.0
    docPositions:
    - 524
    - 755
    - 767
  music: !ruby/object:Word
    word: music
    stem: music
    docFrequency: 2.0
    docPositions:
    - 524
  debugger: !ruby/object:Word
    word: debugger
    stem: debugg
    docFrequency: 2.0
    docPositions:
    - 526
  environment: !ruby/object:Word
    word: environment
    stem: environ
    docFrequency: 2.0
    docPositions:
    - 526
  revision: !ruby/object:Word
    word: revision
    stem: revis
    docFrequency: 2.0
    docPositions:
    - 526
  educational: !ruby/object:Word
    word: educational
    stem: educ
    docFrequency: 3.0
    docPositions:
    - 527
    - 528
  edutainment: !ruby/object:Word
    word: edutainment
    stem: edutain
    docFrequency: 2.0
    docPositions:
    - 528
  serious: !ruby/object:Word
    word: serious
    stem: seriou
    docFrequency: 2.0
    docPositions:
    - 528
  simulator: !ruby/object:Word
    word: simulator
    stem: simul
    docFrequency: 2.0
    docPositions:
    - 528
  strategy: !ruby/object:Word
    word: strategy
    stem: strategi
    docFrequency: 2.0
    docPositions:
    - 530
  arcade: !ruby/object:Word
    word: arcade
    stem: arcad
    docFrequency: 2.0
    docPositions:
    - 530
  puzzle: !ruby/object:Word
    word: puzzle
    stem: puzzl
    docFrequency: 2.0
    docPositions:
    - 530
  shooter: !ruby/object:Word
    word: shooter
    stem: shooter
    docFrequency: 2.0
    docPositions:
    - 530
  platform: !ruby/object:Word
    word: platform
    stem: platform
    docFrequency: 2.0
    docPositions:
    - 530
  massively: !ruby/object:Word
    word: massively
    stem: massiv
    docFrequency: 2.0
    docPositions:
    - 530
  multiplayer: !ruby/object:Word
    word: multiplayer
    stem: multiplay
    docFrequency: 2.0
    docPositions:
    - 530
  interactive: !ruby/object:Word
    word: interactive
    stem: interact
    docFrequency: 2.0
    docPositions:
    - 530
  fiction: !ruby/object:Word
    word: fiction
    stem: fiction
    docFrequency: 2.0
    docPositions:
    - 530
  misc: !ruby/object:Word
    word: misc
    stem: misc
    docFrequency: 2.0
    docPositions:
    - 531
  antivirus: !ruby/object:Word
    word: antivirus
    stem: antiviru
    docFrequency: 2.0
    docPositions:
    - 532
  malware: !ruby/object:Word
    word: malware
    stem: malwar
    docFrequency: 2.0
    docPositions:
    - 532
  installer: !ruby/object:Word
    word: installer
    stem: instal
    docFrequency: 2.0
    docPositions:
    - 532
  package: !ruby/object:Word
    word: package
    stem: packag
    docFrequency: 2.0
    docPositions:
    - 532
  manager: !ruby/object:Word
    word: manager
    stem: manag
    docFrequency: 2.0
    docPositions:
    - 532
  intended: !ruby/object:Word
    word: intended
    stem: intend
    docFrequency: 3.0
    docPositions:
    - 534
    - 902
  timeline: !ruby/object:Word
    word: timeline
    stem: timelin
    docFrequency: 2.0
    docPositions:
    - 537
  category: !ruby/object:Word
    word: category
    stem: categori
    docFrequency: 2.0
    docPositions:
    - 537
  generational: !ruby/object:Word
    word: generational
    stem: gener
    docFrequency: 2.0
    docPositions:
    - 537
  commonly: !ruby/object:Word
    word: commonly
    stem: commonli
    docFrequency: 5.0
    docPositions:
    - 538
    - 540
    - 542
    - 667
  ada: !ruby/object:Word
    word: ada
    stem: ada
    docFrequency: 2.0
    docPositions:
    - 541
  cobol: !ruby/object:Word
    word: cobol
    stem: cobol
    docFrequency: 2.0
    docPositions:
    - 541
  pl: !ruby/object:Word
    word: pl
    stem: pl
    docFrequency: 2.0
    docPositions:
    - 541
  rexx: !ruby/object:Word
    word: rexx
    stem: rexx
    docFrequency: 2.0
    docPositions:
    - 541
  java: !ruby/object:Word
    word: java
    stem: java
    docFrequency: 2.0
    docPositions:
    - 541
  lisp: !ruby/object:Word
    word: lisp
    stem: lisp
    docFrequency: 2.0
    docPositions:
    - 541
  scripting: !ruby/object:Word
    word: scripting
    stem: script
    docFrequency: 2.0
    docPositions:
    - 542
  bourne: !ruby/object:Word
    word: bourne
    stem: bourn
    docFrequency: 2.0
    docPositions:
    - 543
  script: !ruby/object:Word
    word: script
    stem: script
    docFrequency: 2.0
    docPositions:
    - 543
  python: !ruby/object:Word
    word: python
    stem: python
    docFrequency: 2.0
    docPositions:
    - 543
  ruby: !ruby/object:Word
    word: ruby
    stem: rubi
    docFrequency: 2.0
    docPositions:
    - 543
  php: !ruby/object:Word
    word: php
    stem: php
    docFrequency: 3.0
    docPositions:
    - 543
    - 797
  perl: !ruby/object:Word
    word: perl
    stem: perl
    docFrequency: 2.0
    docPositions:
    - 543
  located: !ruby/object:Word
    word: located
    stem: locat
    docFrequency: 3.0
    docPositions:
    - 545
    - 902
  motherboard: !ruby/object:Word
    word: motherboard
    stem: motherboard
    docFrequency: 3.0
    docPositions:
    - 545
    - 902
  classified: !ruby/object:Word
    word: classified
    stem: classifi
    docFrequency: 3.0
    docPositions:
    - 547
    - 902
  micro: !ruby/object:Word
    word: micro
    stem: micro
    docFrequency: 3.0
    docPositions:
    - 553
    - 620
  mini: !ruby/object:Word
    word: mini
    stem: mini
    docFrequency: 2.0
    docPositions:
    - 555
  super: !ruby/object:Word
    word: super
    stem: super
    docFrequency: 2.0
    docPositions:
    - 557
  unprocessed: !ruby/object:Word
    word: unprocessed
    stem: unprocess
    docFrequency: 3.0
    docPositions:
    - 559
    - 902
  sent: !ruby/object:Word
    word: sent
    stem: sent
    docFrequency: 5.0
    docPositions:
    - 559
    - 902
  processed: !ruby/object:Word
    word: processed
    stem: process
    docFrequency: 3.0
    docPositions:
    - 559
    - 902
  automated: !ruby/object:Word
    word: automated
    stem: autom
    docFrequency: 3.0
    docPositions:
    - 559
    - 902
  act: !ruby/object:Word
    word: act
    stem: act
    docFrequency: 3.0
    docPositions:
    - 559
    - 902
  mainly: !ruby/object:Word
    word: mainly
    stem: mainli
    docFrequency: 3.0
    docPositions:
    - 559
    - 902
  regulated: !ruby/object:Word
    word: regulated
    stem: regul
    docFrequency: 3.0
    docPositions:
    - 559
    - 902
  overlay: !ruby/object:Word
    word: overlay
    stem: overlai
    docFrequency: 2.0
    docPositions:
    - 560
  trackball: !ruby/object:Word
    word: trackball
    stem: trackbal
    docFrequency: 2.0
    docPositions:
    - 561
  camera: !ruby/object:Word
    word: camera
    stem: camera
    docFrequency: 2.0
    docPositions:
    - 563
  touchscreen: !ruby/object:Word
    word: touchscreen
    stem: touchscreen
    docFrequency: 2.0
    docPositions:
    - 565
  gives: !ruby/object:Word
    word: gives
    stem: give
    docFrequency: 3.0
    docPositions:
    - 572
    - 902
  projector: !ruby/object:Word
    word: projector
    stem: projector
    docFrequency: 2.0
    docPositions:
    - 575
  sound: !ruby/object:Word
    word: sound
    stem: sound
    docFrequency: 2.0
    docPositions:
    - 576
  speaker: !ruby/object:Word
    word: speaker
    stem: speaker
    docFrequency: 2.0
    docPositions:
    - 577
  society: !ruby/object:Word
    word: society
    stem: societi
    docFrequency: 14.0
    docPositions:
    - 580
    - 619
    - 629
    - 647
    - 648
    - 651
    - 652
    - 653
    - 661
    - 683
    - 693
    - 699
    - 902
  increasing: !ruby/object:Word
    word: increasing
    stem: increas
    docFrequency: 3.0
    docPositions:
    - 580
    - 902
  careers: !ruby/object:Word
    word: careers
    stem: career
    docFrequency: 3.0
    docPositions:
    - 580
    - 902
  nanoengineering: !ruby/object:Word
    word: nanoengineering
    stem: nanoengin
    docFrequency: 2.0
    docPositions:
    - 583
  interaction: !ruby/object:Word
    word: interaction
    stem: interact
    docFrequency: 3.0
    docPositions:
    - 585
    - 857
  spawned: !ruby/object:Word
    word: spawned
    stem: spawn
    docFrequency: 3.0
    docPositions:
    - 586
    - 902
  clubs: !ruby/object:Word
    word: clubs
    stem: club
    docFrequency: 3.0
    docPositions:
    - 586
    - 902
  societies: !ruby/object:Word
    word: societies
    stem: societi
    docFrequency: 4.0
    docPositions:
    - 586
    - 590
    - 902
  informal: !ruby/object:Word
    word: informal
    stem: inform
    docFrequency: 3.0
    docPositions:
    - 586
    - 902
  ansi: !ruby/object:Word
    word: ansi
    stem: ansi
    docFrequency: 2.0
    docPositions:
    - 589
  iec: !ruby/object:Word
    word: iec
    stem: iec
    docFrequency: 2.0
    docPositions:
    - 589
  ieee: !ruby/object:Word
    word: ieee
    stem: ieee
    docFrequency: 6.0
    docPositions:
    - 589
    - 620
    - 636
    - 691
    - 696
  ietf: !ruby/object:Word
    word: ietf
    stem: ietf
    docFrequency: 2.0
    docPositions:
    - 589
  iso: !ruby/object:Word
    word: iso
    stem: iso
    docFrequency: 2.0
    docPositions:
    - 589
  acm: !ruby/object:Word
    word: acm
    stem: acm
    docFrequency: 2.0
    docPositions:
    - 591
  ais: !ruby/object:Word
    word: ais
    stem: ai
    docFrequency: 2.0
    docPositions:
    - 591
  iet: !ruby/object:Word
    word: iet
    stem: iet
    docFrequency: 2.0
    docPositions:
    - 591
  ifip: !ruby/object:Word
    word: ifip
    stem: ifip
    docFrequency: 2.0
    docPositions:
    - 591
  bcs: !ruby/object:Word
    word: bcs
    stem: bc
    docFrequency: 2.0
    docPositions:
    - 591
  open: !ruby/object:Word
    word: open
    stem: open
    docFrequency: 3.0
    docPositions:
    - 592
    - 613
  foundation: !ruby/object:Word
    word: foundation
    stem: foundat
    docFrequency: 6.0
    docPositions:
    - 593
    - 658
    - 885
  mozilla: !ruby/object:Word
    word: mozilla
    stem: mozilla
    docFrequency: 2.0
    docPositions:
    - 593
  apache: !ruby/object:Word
    word: apache
    stem: apach
    docFrequency: 2.0
    docPositions:
    - 593
  portal: !ruby/object:Word
    word: portal
    stem: portal
    docFrequency: 2.0
    docPositions:
    - 597
  computability: !ruby/object:Word
    word: computability
    stem: comput
    docFrequency: 2.0
    docPositions:
    - 600
  insecurity: !ruby/object:Word
    word: insecurity
    stem: insecur
    docFrequency: 2.0
    docPositions:
    - 601
  security: !ruby/object:Word
    word: security
    stem: secur
    docFrequency: 2.0
    docPositions:
    - 602
  etymologies: !ruby/object:Word
    word: etymologies
    stem: etymolog
    docFrequency: 2.0
    docPositions:
    - 603
  fictional: !ruby/object:Word
    word: fictional
    stem: fiction
    docFrequency: 2.0
    docPositions:
    - 604
  pulse: !ruby/object:Word
    word: pulse
    stem: puls
    docFrequency: 3.0
    docPositions:
    - 605
    - 792
  kw: !ruby/object:Word
    word: kw
    stem: kw
    docFrequency: 2.0
    docPositions:
    - 610
  six: !ruby/object:Word
    word: six
    stem: six
    docFrequency: 2.0
    docPositions:
    - 610
  approximate: !ruby/object:Word
    word: approximate
    stem: approxim
    docFrequency: 2.0
    docPositions:
    - 610
  notebook: !ruby/object:Word
    word: notebook
    stem: notebook
    docFrequency: 3.0
    docPositions:
    - 610
    - 665
  commodity: !ruby/object:Word
    word: commodity
    stem: commod
    docFrequency: 4.0
    docPositions:
    - 611
    - 614
    - 681
  duo: !ruby/object:Word
    word: duo
    stem: duo
    docFrequency: 2.0
    docPositions:
    - 611
  corporation: !ruby/object:Word
    word: corporation
    stem: corpor
    docFrequency: 6.0
    docPositions:
    - 611
    - 662
    - 695
    - 711
  oxford: !ruby/object:Word
    word: oxford
    stem: oxford
    docFrequency: 7.0
    docPositions:
    - 612
    - 640
    - 685
    - 708
  dictionary: !ruby/object:Word
    word: dictionary
    stem: dictionari
    docFrequency: 3.0
    docPositions:
    - 612
    - 685
  ed: !ruby/object:Word
    word: ed
    stem: ed
    docFrequency: 6.0
    docPositions:
    - 612
    - 634
    - 653
    - 685
    - 699
  schmandt: !ruby/object:Word
    word: schmandt
    stem: schmandt
    docFrequency: 3.0
    docPositions:
    - 613
  besserat: !ruby/object:Word
    word: besserat
    stem: besserat
    docFrequency: 3.0
    docPositions:
    - 613
  tokens: !ruby/object:Word
    word: tokens
    stem: token
    docFrequency: 3.0
    docPositions:
    - 613
  count: !ruby/object:Word
    word: count
    stem: count
    docFrequency: 5.0
    docPositions:
    - 613
  transferred: !ruby/object:Word
    word: transferred
    stem: transfer
    docFrequency: 2.0
    docPositions:
    - 613
  thus: !ruby/object:Word
    word: thus
    stem: thu
    docFrequency: 2.0
    docPositions:
    - 613
  served: !ruby/object:Word
    word: served
    stem: serv
    docFrequency: 2.0
    docPositions:
    - 613
  bill: !ruby/object:Word
    word: bill
    stem: bill
    docFrequency: 2.0
    docPositions:
    - 613
  lading: !ruby/object:Word
    word: lading
    stem: lade
    docFrequency: 2.0
    docPositions:
    - 613
  accounts: !ruby/object:Word
    word: accounts
    stem: account
    docFrequency: 2.0
    docPositions:
    - 613
  impressions: !ruby/object:Word
    word: impressions
    stem: impress
    docFrequency: 3.0
    docPositions:
    - 613
  shapes: !ruby/object:Word
    word: shapes
    stem: shape
    docFrequency: 2.0
    docPositions:
    - 613
  abstracted: !ruby/object:Word
    word: abstracted
    stem: abstract
    docFrequency: 2.0
    docPositions:
    - 613
  stylized: !ruby/object:Word
    word: stylized
    stem: styliz
    docFrequency: 2.0
    docPositions:
    - 613
  marks: !ruby/object:Word
    word: marks
    stem: mark
    docFrequency: 5.0
    docPositions:
    - 613
  finally: !ruby/object:Word
    word: finally
    stem: final
    docFrequency: 4.0
    docPositions:
    - 613
    - 665
  systematically: !ruby/object:Word
    word: systematically
    stem: systemat
    docFrequency: 2.0
    docPositions:
    - 613
  numerals: !ruby/object:Word
    word: numerals
    stem: numer
    docFrequency: 3.0
    docPositions:
    - 613
  formalized: !ruby/object:Word
    word: formalized
    stem: formal
    docFrequency: 2.0
    docPositions:
    - 613
  estimates: !ruby/object:Word
    word: estimates
    stem: estim
    docFrequency: 2.0
    docPositions:
    - 613
  took: !ruby/object:Word
    word: took
    stem: took
    docFrequency: 2.0
    docPositions:
    - 613
  convey: !ruby/object:Word
    word: convey
    stem: convei
    docFrequency: 2.0
    docPositions:
    - 613
  robson: !ruby/object:Word
    word: robson
    stem: robson
    docFrequency: 2.0
    docPositions:
    - 614
  eleanor: !ruby/object:Word
    word: eleanor
    stem: eleanor
    docFrequency: 2.0
    docPositions:
    - 614
  mathematics: !ruby/object:Word
    word: mathematics
    stem: mathemat
    docFrequency: 2.0
    docPositions:
    - 614
  iraq: !ruby/object:Word
    word: iraq
    stem: iraq
    docFrequency: 3.0
    docPositions:
    - 614
  isbn: !ruby/object:Word
    word: isbn
    stem: isbn
    docFrequency: 24.0
    docPositions:
    - 614
    - 625
    - 632
    - 634
    - 640
    - 661
    - 664
    - 674
    - 675
    - 678
    - 679
    - 680
    - 682
    - 699
    - 700
    - 701
    - 703
    - 705
    - 706
    - 708
    - 709
    - 710
    - 713
  p: !ruby/object:Word
    word: p
    stem: p
    docFrequency: 19.0
    docPositions:
    - 614
    - 616
    - 617
    - 619
    - 620
    - 621
    - 622
    - 634
    - 655
    - 661
    - 674
    - 675
    - 677
    - 678
    - 679
    - 680
    - 682
  bce: !ruby/object:Word
    word: bce
    stem: bce
    docFrequency: 4.0
    docPositions:
    - 614
  specific: !ruby/object:Word
    word: specific
    stem: specif
    docFrequency: 2.0
    docPositions:
    - 614
  balanced: !ruby/object:Word
    word: balanced
    stem: balanc
    docFrequency: 2.0
    docPositions:
    - 614
  sexagesimal: !ruby/object:Word
    word: sexagesimal
    stem: sexagesim
    docFrequency: 2.0
    docPositions:
    - 614
  wiet: !ruby/object:Word
    word: wiet
    stem: wiet
    docFrequency: 2.0
    docPositions:
    - 616
  elisseeff: !ruby/object:Word
    word: elisseeff
    stem: elisseeff
    docFrequency: 2.0
    docPositions:
    - 616
  wolff: !ruby/object:Word
    word: wolff
    stem: wolff
    docFrequency: 2.0
    docPositions:
    - 616
  naudu: !ruby/object:Word
    word: naudu
    stem: naudu
    docFrequency: 2.0
    docPositions:
    - 616
  mankind: !ruby/object:Word
    word: mankind
    stem: mankind
    docFrequency: 2.0
    docPositions:
    - 616
  vol: !ruby/object:Word
    word: vol
    stem: vol
    docFrequency: 2.0
    docPositions:
    - 616
  civilisations: !ruby/object:Word
    word: civilisations
    stem: civilis
    docFrequency: 2.0
    docPositions:
    - 616
  george: !ruby/object:Word
    word: george
    stem: georg
    docFrequency: 2.0
    docPositions:
    - 616
  allen: !ruby/object:Word
    word: allen
    stem: allen
    docFrequency: 3.0
    docPositions:
    - 616
    - 643
  unwin: !ruby/object:Word
    word: unwin
    stem: unwin
    docFrequency: 2.0
    docPositions:
    - 616
  ltd: !ruby/object:Word
    word: ltd
    stem: ltd
    docFrequency: 3.0
    docPositions:
    - 616
    - 674
  unesco: !ruby/object:Word
    word: unesco
    stem: unesco
    docFrequency: 2.0
    docPositions:
    - 616
  fuat: !ruby/object:Word
    word: fuat
    stem: fuat
    docFrequency: 2.0
    docPositions:
    - 617
  sezgin: !ruby/object:Word
    word: sezgin
    stem: sezgin
    docFrequency: 2.0
    docPositions:
    - 617
  catalogue: !ruby/object:Word
    word: catalogue
    stem: catalogu
    docFrequency: 2.0
    docPositions:
    - 617
  exhibition: !ruby/object:Word
    word: exhibition
    stem: exhibit
    docFrequency: 2.0
    docPositions:
    - 617
  institute: !ruby/object:Word
    word: institute
    stem: institut
    docFrequency: 4.0
    docPositions:
    - 617
    - 694
    - 702
  arabic: !ruby/object:Word
    word: arabic
    stem: arab
    docFrequency: 2.0
    docPositions:
    - 617
  islamic: !ruby/object:Word
    word: islamic
    stem: islam
    docFrequency: 2.0
    docPositions:
    - 617
  johann: !ruby/object:Word
    word: johann
    stem: johann
    docFrequency: 2.0
    docPositions:
    - 617
  wolfgang: !ruby/object:Word
    word: wolfgang
    stem: wolfgang
    docFrequency: 2.0
    docPositions:
    - 617
  goethe: !ruby/object:Word
    word: goethe
    stem: goeth
    docFrequency: 2.0
    docPositions:
    - 617
  frankfurt: !ruby/object:Word
    word: frankfurt
    stem: frankfurt
    docFrequency: 3.0
    docPositions:
    - 617
  germany: !ruby/object:Word
    word: germany
    stem: germani
    docFrequency: 2.0
    docPositions:
    - 617
  fair: !ruby/object:Word
    word: fair
    stem: fair
    docFrequency: 2.0
    docPositions:
    - 617
  fran: !ruby/object:Word
    word: fran
    stem: fran
    docFrequency: 2.0
    docPositions:
    - 618
  ois: !ruby/object:Word
    word: ois
    stem: oi
    docFrequency: 2.0
    docPositions:
    - 618
  charette: !ruby/object:Word
    word: charette
    stem: charett
    docFrequency: 2.0
    docPositions:
    - 618
  archaeology: !ruby/object:Word
    word: archaeology
    stem: archaeolog
    docFrequency: 2.0
    docPositions:
    - 618
  greece: !ruby/object:Word
    word: greece
    stem: greec
    docFrequency: 2.0
    docPositions:
    - 618
  november: !ruby/object:Word
    word: november
    stem: novemb
    docFrequency: 8.0
    docPositions:
    - 618
    - 644
    - 649
    - 650
    - 663
    - 698
  doi: !ruby/object:Word
    word: doi
    stem: doi
    docFrequency: 5.0
    docPositions:
    - 618
    - 636
    - 654
    - 656
  silvio: !ruby/object:Word
    word: silvio
    stem: silvio
    docFrequency: 2.0
    docPositions:
    - 619
  bedini: !ruby/object:Word
    word: bedini
    stem: bedini
    docFrequency: 2.0
    docPositions:
    - 619
  francis: !ruby/object:Word
    word: francis
    stem: franci
    docFrequency: 3.0
    docPositions:
    - 619
    - 691
  maddison: !ruby/object:Word
    word: maddison
    stem: maddison
    docFrequency: 2.0
    docPositions:
    - 619
  universe: !ruby/object:Word
    word: universe
    stem: univers
    docFrequency: 2.0
    docPositions:
    - 619
  astrarium: !ruby/object:Word
    word: astrarium
    stem: astrarium
    docFrequency: 2.0
    docPositions:
    - 619
  giovanni: !ruby/object:Word
    word: giovanni
    stem: giovanni
    docFrequency: 2.0
    docPositions:
    - 619
  dondi: !ruby/object:Word
    word: dondi
    stem: dondi
    docFrequency: 2.0
    docPositions:
    - 619
  transactions: !ruby/object:Word
    word: transactions
    stem: transact
    docFrequency: 2.0
    docPositions:
    - 619
  philosophical: !ruby/object:Word
    word: philosophical
    stem: philosoph
    docFrequency: 2.0
    docPositions:
    - 619
  tuncer: !ruby/object:Word
    word: tuncer
    stem: tuncer
    docFrequency: 2.0
    docPositions:
    - 621
  ren: !ruby/object:Word
    word: ren
    stem: ren
    docFrequency: 2.0
    docPositions:
    - 621
  sciences: !ruby/object:Word
    word: sciences
    stem: scienc
    docFrequency: 2.0
    docPositions:
    - 621
  holonic: !ruby/object:Word
    word: holonic
    stem: holon
    docFrequency: 2.0
    docPositions:
    - 621
  agents: !ruby/object:Word
    word: agents
    stem: agent
    docFrequency: 2.0
    docPositions:
    - 621
  turk: !ruby/object:Word
    word: turk
    stem: turk
    docFrequency: 2.0
    docPositions:
    - 621
  elec: !ruby/object:Word
    word: elec
    stem: elec
    docFrequency: 2.0
    docPositions:
    - 621
  engin: !ruby/object:Word
    word: engin
    stem: engin
    docFrequency: 2.0
    docPositions:
    - 621
  donald: !ruby/object:Word
    word: donald
    stem: donald
    docFrequency: 3.0
    docPositions:
    - 622
    - 677
  routledge: !ruby/object:Word
    word: routledge
    stem: routledg
    docFrequency: 3.0
    docPositions:
    - 622
    - 661
  hill: !ruby/object:Word
    word: hill
    stem: hill
    docFrequency: 2.0
    docPositions:
    - 622
  biruni: !ruby/object:Word
    word: biruni
    stem: biruni
    docFrequency: 2.0
    docPositions:
    - 622
  annals: !ruby/object:Word
    word: annals
    stem: annal
    docFrequency: 4.0
    docPositions:
    - 622
    - 636
    - 691
  ray: !ruby/object:Word
    word: ray
    stem: rai
    docFrequency: 2.0
    docPositions:
    - 624
  girvan: !ruby/object:Word
    word: girvan
    stem: girvan
    docFrequency: 2.0
    docPositions:
    - 624
  revealed: !ruby/object:Word
    word: revealed
    stem: reveal
    docFrequency: 2.0
    docPositions:
    - 624
  halacy: !ruby/object:Word
    word: halacy
    stem: halaci
    docFrequency: 2.0
    docPositions:
    - 625
  daniel: !ruby/object:Word
    word: daniel
    stem: daniel
    docFrequency: 2.0
    docPositions:
    - 625
  stephen: !ruby/object:Word
    word: stephen
    stem: stephen
    docFrequency: 2.0
    docPositions:
    - 625
  crowell: !ruby/object:Word
    word: crowell
    stem: crowel
    docFrequency: 2.0
    docPositions:
    - 625
  collier: !ruby/object:Word
    word: collier
    stem: collier
    docFrequency: 3.0
    docPositions:
    - 625
    - 713
  online: !ruby/object:Word
    word: online
    stem: onlin
    docFrequency: 3.0
    docPositions:
    - 626
    - 631
  stuff: !ruby/object:Word
    word: stuff
    stem: stuff
    docFrequency: 2.0
    docPositions:
    - 626
  let: !ruby/object:Word
    word: let
    stem: let
    docFrequency: 2.0
    docPositions:
    - 627
  ultimate: !ruby/object:Word
    word: ultimate
    stem: ultim
    docFrequency: 2.0
    docPositions:
    - 627
  opinion: !ruby/object:Word
    word: opinion
    stem: opinion
    docFrequency: 2.0
    docPositions:
    - 627
  stanford: !ruby/object:Word
    word: stanford
    stem: stanford
    docFrequency: 2.0
    docPositions:
    - 628
  philosophy: !ruby/object:Word
    word: philosophy
    stem: philosophi
    docFrequency: 2.0
    docPositions:
    - 628
  proceedings: !ruby/object:Word
    word: proceedings
    stem: proceed
    docFrequency: 2.0
    docPositions:
    - 629
  firmly: !ruby/object:Word
    word: firmly
    stem: firmli
    docFrequency: 2.0
    docPositions:
    - 630
  emphasized: !ruby/object:Word
    word: emphasized
    stem: emphas
    docFrequency: 2.0
    docPositions:
    - 630
  am: !ruby/object:Word
    word: am
    stem: am
    docFrequency: 2.0
    docPositions:
    - 630
  sure: !ruby/object:Word
    word: sure
    stem: sure
    docFrequency: 2.0
    docPositions:
    - 630
  conception: !ruby/object:Word
    word: conception
    stem: concept
    docFrequency: 2.0
    docPositions:
    - 630
  owing: !ruby/object:Word
    word: owing
    stem: ow
    docFrequency: 2.0
    docPositions:
    - 630
  insofar: !ruby/object:Word
    word: insofar
    stem: insofar
    docFrequency: 2.0
    docPositions:
    - 630
  anticipated: !ruby/object:Word
    word: anticipated
    stem: anticip
    docFrequency: 2.0
    docPositions:
    - 630
  lovelace: !ruby/object:Word
    word: lovelace
    stem: lovelac
    docFrequency: 3.0
    docPositions:
    - 630
    - 691
  letter: !ruby/object:Word
    word: letter
    stem: letter
    docFrequency: 2.0
    docPositions:
    - 630
  frankel: !ruby/object:Word
    word: frankel
    stem: frankel
    docFrequency: 2.0
    docPositions:
    - 630
  brian: !ruby/object:Word
    word: brian
    stem: brian
    docFrequency: 5.0
    docPositions:
    - 630
    - 643
    - 661
    - 714
  randell: !ruby/object:Word
    word: randell
    stem: randel
    docFrequency: 4.0
    docPositions:
    - 630
    - 643
    - 714
  copeland: !ruby/object:Word
    word: copeland
    stem: copeland
    docFrequency: 3.0
    docPositions:
    - 630
    - 640
  horst: !ruby/object:Word
    word: horst
    stem: horst
    docFrequency: 3.0
    docPositions:
    - 631
    - 698
  epe: !ruby/object:Word
    word: epe
    stem: ep
    docFrequency: 2.0
    docPositions:
    - 631
  archived: !ruby/object:Word
    word: archived
    stem: archiv
    docFrequency: 4.0
    docPositions:
    - 631
    - 635
    - 698
  original: !ruby/object:Word
    word: original
    stem: origin
    docFrequency: 3.0
    docPositions:
    - 631
    - 698
  my: !ruby/object:Word
    word: my
    stem: my
    docFrequency: 3.0
    docPositions:
    - 632
    - 701
  mckenna: !ruby/object:Word
    word: mckenna
    stem: mckenna
    docFrequency: 2.0
    docPositions:
    - 632
  patricia: !ruby/object:Word
    word: patricia
    stem: patricia
    docFrequency: 2.0
    docPositions:
    - 632
  ross: !ruby/object:Word
    word: ross
    stem: ross
    docFrequency: 2.0
    docPositions:
    - 632
  andrew: !ruby/object:Word
    word: andrew
    stem: andrew
    docFrequency: 2.0
    docPositions:
    - 632
  der: !ruby/object:Word
    word: der
    stem: der
    docFrequency: 3.0
    docPositions:
    - 632
    - 634
  mein: !ruby/object:Word
    word: mein
    stem: mein
    docFrequency: 3.0
    docPositions:
    - 632
    - 634
  lebenswerk: !ruby/object:Word
    word: lebenswerk
    stem: lebenswerk
    docFrequency: 3.0
    docPositions:
    - 632
    - 634
  berlin: !ruby/object:Word
    word: berlin
    stem: berlin
    docFrequency: 4.0
    docPositions:
    - 632
    - 634
    - 701
  heidelberg: !ruby/object:Word
    word: heidelberg
    stem: heidelberg
    docFrequency: 2.0
    docPositions:
    - 632
  springer: !ruby/object:Word
    word: springer
    stem: springer
    docFrequency: 3.0
    docPositions:
    - 632
    - 634
  verlag: !ruby/object:Word
    word: verlag
    stem: verlag
    docFrequency: 4.0
    docPositions:
    - 632
    - 634
    - 701
  maint: !ruby/object:Word
    word: maint
    stem: maint
    docFrequency: 3.0
    docPositions:
    - 632
    - 798
  unrecognized: !ruby/object:Word
    word: unrecognized
    stem: unrecogn
    docFrequency: 3.0
    docPositions:
    - 632
    - 798
  pioneer: !ruby/object:Word
    word: pioneer
    stem: pioneer
    docFrequency: 5.0
    docPositions:
    - 633
    - 705
    - 709
    - 710
  rediscovered: !ruby/object:Word
    word: rediscovered
    stem: rediscov
    docFrequency: 2.0
    docPositions:
    - 633
  york: !ruby/object:Word
    word: york
    stem: york
    docFrequency: 4.0
    docPositions:
    - 633
    - 703
    - 711
  story: !ruby/object:Word
    word: story
    stem: stori
    docFrequency: 3.0
    docPositions:
    - 635
    - 642
  wayback: !ruby/object:Word
    word: wayback
    stem: wayback
    docFrequency: 2.0
    docPositions:
    - 635
  march: !ruby/object:Word
    word: march
    stem: march
    docFrequency: 4.0
    docPositions:
    - 635
    - 643
    - 798
  rojas: !ruby/object:Word
    word: rojas
    stem: roja
    docFrequency: 3.0
    docPositions:
    - 636
    - 637
  ra: !ruby/object:Word
    word: ra
    stem: ra
    docFrequency: 2.0
    docPositions:
    - 637
  pdf: !ruby/object:Word
    word: pdf
    stem: pdf
    docFrequency: 5.0
    docPositions:
    - 637
    - 658
    - 695
    - 714
  notice: !ruby/object:Word
    word: notice
    stem: notic
    docFrequency: 2.0
    docPositions:
    - 638
  des: !ruby/object:Word
    word: des
    stem: de
    docFrequency: 3.0
    docPositions:
    - 638
    - 706
  moines: !ruby/object:Word
    word: moines
    stem: moin
    docFrequency: 2.0
    docPositions:
    - 638
  arthur: !ruby/object:Word
    word: arthur
    stem: arthur
    docFrequency: 2.0
    docPositions:
    - 639
  burks: !ruby/object:Word
    word: burks
    stem: burk
    docFrequency: 2.0
    docPositions:
    - 639
  secrets: !ruby/object:Word
    word: secrets
    stem: secret
    docFrequency: 2.0
    docPositions:
    - 640
  codebreaking: !ruby/object:Word
    word: codebreaking
    stem: codebreak
    docFrequency: 2.0
    docPositions:
    - 640
  pp: !ruby/object:Word
    word: pp
    stem: pp
    docFrequency: 4.0
    docPositions:
    - 640
    - 653
    - 664
  cracking: !ruby/object:Word
    word: cracking
    stem: crack
    docFrequency: 2.0
    docPositions:
    - 641
  bbc: !ruby/object:Word
    word: bbc
    stem: bbc
    docFrequency: 2.0
    docPositions:
    - 641
  news: !ruby/object:Word
    word: news
    stem: new
    docFrequency: 3.0
    docPositions:
    - 641
    - 657
  rebuild: !ruby/object:Word
    word: rebuild
    stem: rebuild
    docFrequency: 3.0
    docPositions:
    - 642
  tnmoc: !ruby/object:Word
    word: tnmoc
    stem: tnmoc
    docFrequency: 2.0
    docPositions:
    - 642
  org: !ruby/object:Word
    word: org
    stem: org
    docFrequency: 3.0
    docPositions:
    - 642
    - 797
  fensom: !ruby/object:Word
    word: fensom
    stem: fensom
    docFrequency: 4.0
    docPositions:
    - 643
    - 644
  harry: !ruby/object:Word
    word: harry
    stem: harri
    docFrequency: 3.0
    docPositions:
    - 643
    - 644
  milne: !ruby/object:Word
    word: milne
    stem: miln
    docFrequency: 2.0
    docPositions:
    - 643
  frank: !ruby/object:Word
    word: frank
    stem: frank
    docFrequency: 2.0
    docPositions:
    - 643
  obituary: !ruby/object:Word
    word: obituary
    stem: obituari
    docFrequency: 3.0
    docPositions:
    - 643
    - 644
  coombs: !ruby/object:Word
    word: coombs
    stem: coomb
    docFrequency: 2.0
    docPositions:
    - 643
  independent: !ruby/object:Word
    word: independent
    stem: independ
    docFrequency: 2.0
    docPositions:
    - 643
  jim: !ruby/object:Word
    word: jim
    stem: jim
    docFrequency: 2.0
    docPositions:
    - 644
  jr: !ruby/object:Word
    word: jr
    stem: jr
    docFrequency: 2.0
    docPositions:
    - 645
  filed: !ruby/object:Word
    word: filed
    stem: file
    docFrequency: 3.0
    docPositions:
    - 645
    - 660
  issued: !ruby/object:Word
    word: issued
    stem: issu
    docFrequency: 4.0
    docPositions:
    - 645
    - 660
    - 662
  invalidated: !ruby/object:Word
    word: invalidated
    stem: invalid
    docFrequency: 2.0
    docPositions:
    - 645
  court: !ruby/object:Word
    word: court
    stem: court
    docFrequency: 2.0
    docPositions:
    - 645
  ruling: !ruby/object:Word
    word: ruling
    stem: rule
    docFrequency: 2.0
    docPositions:
    - 645
  honeywell: !ruby/object:Word
    word: honeywell
    stem: honeywel
    docFrequency: 2.0
    docPositions:
    - 645
  sperry: !ruby/object:Word
    word: sperry
    stem: sperri
    docFrequency: 2.0
    docPositions:
    - 645
  rand: !ruby/object:Word
    word: rand
    stem: rand
    docFrequency: 2.0
    docPositions:
    - 645
  generations: !ruby/object:Word
    word: generations
    stem: gener
    docFrequency: 2.0
    docPositions:
    - 646
  enticknap: !ruby/object:Word
    word: enticknap
    stem: enticknap
    docFrequency: 2.0
    docPositions:
    - 647
  nicholas: !ruby/object:Word
    word: nicholas
    stem: nichola
    docFrequency: 2.0
    docPositions:
    - 647
  summer: !ruby/object:Word
    word: summer
    stem: summer
    docFrequency: 3.0
    docPositions:
    - 647
    - 648
  golden: !ruby/object:Word
    word: golden
    stem: golden
    docFrequency: 2.0
    docPositions:
    - 647
  jubilee: !ruby/object:Word
    word: jubilee
    stem: jubile
    docFrequency: 2.0
    docPositions:
    - 647
  resurrection: !ruby/object:Word
    word: resurrection
    stem: resurrect
    docFrequency: 3.0
    docPositions:
    - 647
    - 648
  conservation: !ruby/object:Word
    word: conservation
    stem: conserv
    docFrequency: 4.0
    docPositions:
    - 647
    - 648
    - 651
  issn: !ruby/object:Word
    word: issn
    stem: issn
    docFrequency: 5.0
    docPositions:
    - 647
    - 648
    - 654
    - 656
  napper: !ruby/object:Word
    word: napper
    stem: napper
    docFrequency: 2.0
    docPositions:
    - 650
  introduction: !ruby/object:Word
    word: introduction
    stem: introduct
    docFrequency: 6.0
    docPositions:
    - 650
    - 655
    - 677
    - 678
    - 700
  our: !ruby/object:Word
    word: our
    stem: our
    docFrequency: 2.0
    docPositions:
    - 651
  heritage: !ruby/object:Word
    word: heritage
    stem: heritag
    docFrequency: 2.0
    docPositions:
    - 651
  pilot: !ruby/object:Word
    word: pilot
    stem: pilot
    docFrequency: 2.0
    docPositions:
    - 651
  deliveries: !ruby/object:Word
    word: deliveries
    stem: deliveri
    docFrequency: 2.0
    docPositions:
    - 651
  lavington: !ruby/object:Word
    word: lavington
    stem: lavington
    docFrequency: 4.0
    docPositions:
    - 652
    - 653
    - 699
  simon: !ruby/object:Word
    word: simon
    stem: simon
    docFrequency: 5.0
    docPositions:
    - 652
    - 653
    - 698
    - 699
  brief: !ruby/object:Word
    word: brief
    stem: brief
    docFrequency: 3.0
    docPositions:
    - 652
    - 683
  swindon: !ruby/object:Word
    word: swindon
    stem: swindon
    docFrequency: 3.0
    docPositions:
    - 653
    - 699
  cooke: !ruby/object:Word
    word: cooke
    stem: cook
    docFrequency: 4.0
    docPositions:
    - 654
    - 655
    - 656
  yarborough: !ruby/object:Word
    word: yarborough
    stem: yarborough
    docFrequency: 4.0
    docPositions:
    - 654
    - 655
    - 656
  uk: !ruby/object:Word
    word: uk
    stem: uk
    docFrequency: 4.0
    docPositions:
    - 654
    - 656
  journal: !ruby/object:Word
    word: journal
    stem: journal
    docFrequency: 3.0
    docPositions:
    - 654
    - 656
  iee: !ruby/object:Word
    word: iee
    stem: iee
    docFrequency: 3.0
    docPositions:
    - 654
    - 656
  esej: !ruby/object:Word
    word: esej
    stem: esej
    docFrequency: 3.0
    docPositions:
    - 654
    - 656
  subscription: !ruby/object:Word
    word: subscription
    stem: subscript
    docFrequency: 4.0
    docPositions:
    - 654
    - 671
    - 798
  edinburgh: !ruby/object:Word
    word: edinburgh
    stem: edinburgh
    docFrequency: 2.0
    docPositions:
    - 655
  oliver: !ruby/object:Word
    word: oliver
    stem: oliv
    docFrequency: 2.0
    docPositions:
    - 655
  boyd: !ruby/object:Word
    word: boyd
    stem: boyd
    docFrequency: 2.0
    docPositions:
    - 655
  hapless: !ruby/object:Word
    word: hapless
    stem: hapless
    docFrequency: 2.0
    docPositions:
    - 657
  tale: !ruby/object:Word
    word: tale
    stem: tale
    docFrequency: 2.0
    docPositions:
    - 657
  product: !ruby/object:Word
    word: product
    stem: product
    docFrequency: 2.0
    docPositions:
    - 657
  accessed: !ruby/object:Word
    word: accessed
    stem: access
    docFrequency: 2.0
    docPositions:
    - 657
  nobel: !ruby/object:Word
    word: nobel
    stem: nobel
    docFrequency: 3.0
    docPositions:
    - 658
  lecture: !ruby/object:Word
    word: lecture
    stem: lectur
    docFrequency: 2.0
    docPositions:
    - 658
  stockholm: !ruby/object:Word
    word: stockholm
    stem: stockholm
    docFrequency: 2.0
    docPositions:
    - 658
  miniaturized: !ruby/object:Word
    word: miniaturized
    stem: miniatur
    docFrequency: 2.0
    docPositions:
    - 660
  winston: !ruby/object:Word
    word: winston
    stem: winston
    docFrequency: 2.0
    docPositions:
    - 661
  telegraph: !ruby/object:Word
    word: telegraph
    stem: telegraph
    docFrequency: 2.0
    docPositions:
    - 661
  unitary: !ruby/object:Word
    word: unitary
    stem: unitari
    docFrequency: 2.0
    docPositions:
    - 662
  lead: !ruby/object:Word
    word: lead
    stem: lead
    docFrequency: 2.0
    docPositions:
    - 662
  assigned: !ruby/object:Word
    word: assigned
    stem: assign
    docFrequency: 2.0
    docPositions:
    - 662
  corp: !ruby/object:Word
    word: corp
    stem: corp
    docFrequency: 2.0
    docPositions:
    - 663
  die: !ruby/object:Word
    word: die
    stem: die
    docFrequency: 2.0
    docPositions:
    - 664
  pro: !ruby/object:Word
    word: pro
    stem: pro
    docFrequency: 2.0
    docPositions:
    - 664
  patterson: !ruby/object:Word
    word: patterson
    stem: patterson
    docFrequency: 2.0
    docPositions:
    - 664
  david: !ruby/object:Word
    word: david
    stem: david
    docFrequency: 3.0
    docPositions:
    - 664
    - 674
  hennessy: !ruby/object:Word
    word: hennessy
    stem: hennessi
    docFrequency: 2.0
    docPositions:
    - 664
  san: !ruby/object:Word
    word: san
    stem: san
    docFrequency: 3.0
    docPositions:
    - 664
    - 700
  francisco: !ruby/object:Word
    word: francisco
    stem: francisco
    docFrequency: 3.0
    docPositions:
    - 664
    - 700
  morgan: !ruby/object:Word
    word: morgan
    stem: morgan
    docFrequency: 2.0
    docPositions:
    - 664
  kaufmann: !ruby/object:Word
    word: kaufmann
    stem: kaufmann
    docFrequency: 2.0
    docPositions:
    - 664
  global: !ruby/object:Word
    word: global
    stem: global
    docFrequency: 2.0
    docPositions:
    - 665
  shipments: !ruby/object:Word
    word: shipments
    stem: shipment
    docFrequency: 2.0
    docPositions:
    - 665
  overtake: !ruby/object:Word
    word: overtake
    stem: overtak
    docFrequency: 2.0
    docPositions:
    - 665
  desktops: !ruby/object:Word
    word: desktops
    stem: desktop
    docFrequency: 2.0
    docPositions:
    - 665
  ars: !ruby/object:Word
    word: ars
    stem: ar
    docFrequency: 2.0
    docPositions:
    - 665
  technica: !ruby/object:Word
    word: technica
    stem: technica
    docFrequency: 2.0
    docPositions:
    - 665
  minicomputers: !ruby/object:Word
    word: minicomputers
    stem: minicomput
    docFrequency: 2.0
    docPositions:
    - 667
  dec: !ruby/object:Word
    word: dec
    stem: dec
    docFrequency: 2.0
    docPositions:
    - 667
  panel: !ruby/object:Word
    word: panel
    stem: panel
    docFrequency: 2.0
    docPositions:
    - 667
  booting: !ruby/object:Word
    word: booting
    stem: boot
    docFrequency: 2.0
    docPositions:
    - 667
  boot: !ruby/object:Word
    word: boot
    stem: boot
    docFrequency: 3.0
    docPositions:
    - 667
  entirely: !ruby/object:Word
    word: entirely
    stem: entir
    docFrequency: 2.0
    docPositions:
    - 667
  volatile: !ruby/object:Word
    word: volatile
    stem: volatil
    docFrequency: 2.0
    docPositions:
    - 667
  compatibility: !ruby/object:Word
    word: compatibility
    stem: compat
    docFrequency: 2.0
    docPositions:
    - 668
  microprocessors: !ruby/object:Word
    word: microprocessors
    stem: microprocessor
    docFrequency: 5.0
    docPositions:
    - 668
    - 670
    - 678
    - 700
  pentiums: !ruby/object:Word
    word: pentiums
    stem: pentium
    docFrequency: 2.0
    docPositions:
    - 668
  contrasts: !ruby/object:Word
    word: contrasts
    stem: contrast
    docFrequency: 2.0
    docPositions:
    - 668
  totally: !ruby/object:Word
    word: totally
    stem: total
    docFrequency: 2.0
    docPositions:
    - 668
  incompatible: !ruby/object:Word
    word: incompatible
    stem: incompat
    docFrequency: 2.0
    docPositions:
    - 668
  interpreted: !ruby/object:Word
    word: interpreted
    stem: interpret
    docFrequency: 5.0
    docPositions:
    - 669
    - 672
  fly: !ruby/object:Word
    word: fly
    stem: fly
    docFrequency: 2.0
    docPositions:
    - 669
  universally: !ruby/object:Word
    word: universally
    stem: univers
    docFrequency: 2.0
    docPositions:
    - 670
  solely: !ruby/object:Word
    word: solely
    stem: sole
    docFrequency: 3.0
    docPositions:
    - 670
    - 672
  produces: !ruby/object:Word
    word: produces
    stem: produc
    docFrequency: 2.0
    docPositions:
    - 670
  unexpected: !ruby/object:Word
    word: unexpected
    stem: unexpect
    docFrequency: 2.0
    docPositions:
    - 670
  situations: !ruby/object:Word
    word: situations
    stem: situat
    docFrequency: 2.0
    docPositions:
    - 670
  fdiv: !ruby/object:Word
    word: fdiv
    stem: fdiv
    docFrequency: 2.0
    docPositions:
    - 670
  caused: !ruby/object:Word
    word: caused
    stem: caus
    docFrequency: 3.0
    docPositions:
    - 670
  produce: !ruby/object:Word
    word: produce
    stem: produc
    docFrequency: 2.0
    docPositions:
    - 670
  inaccurate: !ruby/object:Word
    word: inaccurate
    stem: inaccur
    docFrequency: 2.0
    docPositions:
    - 670
  flaw: !ruby/object:Word
    word: flaw
    stem: flaw
    docFrequency: 2.0
    docPositions:
    - 670
  partial: !ruby/object:Word
    word: partial
    stem: partial
    docFrequency: 2.0
    docPositions:
    - 670
  recall: !ruby/object:Word
    word: recall
    stem: recal
    docFrequency: 2.0
    docPositions:
    - 670
  affected: !ruby/object:Word
    word: affected
    stem: affect
    docFrequency: 2.0
    docPositions:
    - 670
  taylor: !ruby/object:Word
    word: taylor
    stem: taylor
    docFrequency: 2.0
    docPositions:
    - 671
  alexander: !ruby/object:Word
    word: alexander
    stem: alexand
    docFrequency: 2.0
    docPositions:
    - 671
  iii: !ruby/object:Word
    word: iii
    stem: iii
    docFrequency: 2.0
    docPositions:
    - 671
  wizard: !ruby/object:Word
    word: wizard
    stem: wizard
    docFrequency: 3.0
    docPositions:
    - 671
    - 899
  interpreting: !ruby/object:Word
    word: interpreting
    stem: interpret
    docFrequency: 2.0
    docPositions:
    - 672
  varied: !ruby/object:Word
    word: varied
    stem: vari
    docFrequency: 2.0
    docPositions:
    - 672
  somewhat: !ruby/object:Word
    word: somewhat
    stem: somewhat
    docFrequency: 2.0
    docPositions:
    - 672
  past: !ruby/object:Word
    word: past
    stem: past
    docFrequency: 2.0
    docPositions:
    - 672
  responsible: !ruby/object:Word
    word: responsible
    stem: respons
    docFrequency: 2.0
    docPositions:
    - 672
  interpretation: !ruby/object:Word
    word: interpretation
    stem: interpret
    docFrequency: 3.0
    docPositions:
    - 672
  case: !ruby/object:Word
    word: case
    stem: case
    docFrequency: 2.0
    docPositions:
    - 672
  partially: !ruby/object:Word
    word: partially
    stem: partial
    docFrequency: 2.0
    docPositions:
    - 672
  passed: !ruby/object:Word
    word: passed
    stem: pass
    docFrequency: 2.0
    docPositions:
    - 672
  eck: !ruby/object:Word
    word: eck
    stem: eck
    docFrequency: 2.0
    docPositions:
    - 674
  survey: !ruby/object:Word
    word: survey
    stem: survei
    docFrequency: 2.0
    docPositions:
    - 674
  k: !ruby/object:Word
    word: k
    stem: k
    docFrequency: 3.0
    docPositions:
    - 674
    - 878
  peters: !ruby/object:Word
    word: peters
    stem: peter
    docFrequency: 2.0
    docPositions:
    - 674
  erricos: !ruby/object:Word
    word: erricos
    stem: errico
    docFrequency: 2.0
    docPositions:
    - 675
  kontoghiorghes: !ruby/object:Word
    word: kontoghiorghes
    stem: kontoghiorgh
    docFrequency: 2.0
    docPositions:
    - 675
  handbook: !ruby/object:Word
    word: handbook
    stem: handbook
    docFrequency: 3.0
    docPositions:
    - 675
    - 695
  statistics: !ruby/object:Word
    word: statistics
    stem: statist
    docFrequency: 2.0
    docPositions:
    - 675
  crc: !ruby/object:Word
    word: crc
    stem: crc
    docFrequency: 3.0
    docPositions:
    - 675
    - 680
  rewritten: !ruby/object:Word
    word: rewritten
    stem: rewritten
    docFrequency: 2.0
    docPositions:
    - 676
  wearing: !ruby/object:Word
    word: wearing
    stem: wear
    docFrequency: 2.0
    docPositions:
    - 676
  heavy: !ruby/object:Word
    word: heavy
    stem: heavi
    docFrequency: 2.0
    docPositions:
    - 676
  verma: !ruby/object:Word
    word: verma
    stem: verma
    docFrequency: 3.0
    docPositions:
    - 676
    - 696
  mielke: !ruby/object:Word
    word: mielke
    stem: mielk
    docFrequency: 3.0
    docPositions:
    - 676
    - 696
  eadie: !ruby/object:Word
    word: eadie
    stem: eadi
    docFrequency: 2.0
    docPositions:
    - 677
  prentice: !ruby/object:Word
    word: prentice
    stem: prentic
    docFrequency: 2.0
    docPositions:
    - 677
  hall: !ruby/object:Word
    word: hall
    stem: hall
    docFrequency: 2.0
    docPositions:
    - 677
  arpad: !ruby/object:Word
    word: arpad
    stem: arpad
    docFrequency: 2.0
    docPositions:
    - 678
  barna: !ruby/object:Word
    word: barna
    stem: barna
    docFrequency: 2.0
    docPositions:
    - 678
  dan: !ruby/object:Word
    word: dan
    stem: dan
    docFrequency: 2.0
    docPositions:
    - 678
  porat: !ruby/object:Word
    word: porat
    stem: porat
    docFrequency: 2.0
    docPositions:
    - 678
  microcomputers: !ruby/object:Word
    word: microcomputers
    stem: microcomput
    docFrequency: 2.0
    docPositions:
    - 678
  wiley: !ruby/object:Word
    word: wiley
    stem: wilei
    docFrequency: 4.0
    docPositions:
    - 678
    - 703
    - 704
  jerry: !ruby/object:Word
    word: jerry
    stem: jerri
    docFrequency: 2.0
    docPositions:
    - 679
  peek: !ruby/object:Word
    word: peek
    stem: peek
    docFrequency: 2.0
    docPositions:
    - 679
  todino: !ruby/object:Word
    word: todino
    stem: todino
    docFrequency: 2.0
    docPositions:
    - 679
  strang: !ruby/object:Word
    word: strang
    stem: strang
    docFrequency: 2.0
    docPositions:
    - 679
  guide: !ruby/object:Word
    word: guide
    stem: guid
    docFrequency: 2.0
    docPositions:
    - 679
  reilly: !ruby/object:Word
    word: reilly
    stem: reilli
    docFrequency: 2.0
    docPositions:
    - 679
  gillian: !ruby/object:Word
    word: gillian
    stem: gillian
    docFrequency: 2.0
    docPositions:
    - 680
  m: !ruby/object:Word
    word: m
    stem: m
    docFrequency: 3.0
    docPositions:
    - 680
    - 878
  davis: !ruby/object:Word
    word: davis
    stem: davi
    docFrequency: 2.0
    docPositions:
    - 680
  noise: !ruby/object:Word
    word: noise
    stem: nois
    docFrequency: 2.0
    docPositions:
    - 680
  reduction: !ruby/object:Word
    word: reduction
    stem: reduct
    docFrequency: 2.0
    docPositions:
    - 680
  speech: !ruby/object:Word
    word: speech
    stem: speech
    docFrequency: 2.0
    docPositions:
    - 680
  construct: !ruby/object:Word
    word: construct
    stem: construct
    docFrequency: 2.0
    docPositions:
    - 681
  pieces: !ruby/object:Word
    word: pieces
    stem: piec
    docFrequency: 2.0
    docPositions:
    - 681
  connected: !ruby/object:Word
    word: connected
    stem: connect
    docFrequency: 2.0
    docPositions:
    - 681
  clusters: !ruby/object:Word
    word: clusters
    stem: cluster
    docFrequency: 2.0
    docPositions:
    - 681
  cost: !ruby/object:Word
    word: cost
    stem: cost
    docFrequency: 2.0
    docPositions:
    - 681
  custom: !ruby/object:Word
    word: custom
    stem: custom
    docFrequency: 2.0
    docPositions:
    - 681
  proliferation: !ruby/object:Word
    word: proliferation
    stem: prolifer
    docFrequency: 2.0
    docPositions:
    - 681
  cluster: !ruby/object:Word
    word: cluster
    stem: cluster
    docFrequency: 2.0
    docPositions:
    - 681
  recent: !ruby/object:Word
    word: recent
    stem: recent
    docFrequency: 2.0
    docPositions:
    - 681
  agatha: !ruby/object:Word
    word: agatha
    stem: agatha
    docFrequency: 2.0
    docPositions:
    - 682
  hughes: !ruby/object:Word
    word: hughes
    stem: hugh
    docFrequency: 2.0
    docPositions:
    - 682
  experts: !ruby/object:Word
    word: experts
    stem: expert
    docFrequency: 2.0
    docPositions:
    - 682
  experience: !ruby/object:Word
    word: experience
    stem: experi
    docFrequency: 2.0
    docPositions:
    - 682
  helped: !ruby/object:Word
    word: helped
    stem: help
    docFrequency: 2.0
    docPositions:
    - 682
  truly: !ruby/object:Word
    word: truly
    stem: truli
    docFrequency: 2.0
    docPositions:
    - 682
  computerized: !ruby/object:Word
    word: computerized
    stem: computer
    docFrequency: 2.0
    docPositions:
    - 682
  airline: !ruby/object:Word
    word: airline
    stem: airlin
    docFrequency: 2.0
    docPositions:
    - 682
  reservations: !ruby/object:Word
    word: reservations
    stem: reserv
    docFrequency: 2.0
    docPositions:
    - 682
  fundamentals: !ruby/object:Word
    word: fundamentals
    stem: fundament
    docFrequency: 2.0
    docPositions:
    - 684
  principles: !ruby/object:Word
    word: principles
    stem: principl
    docFrequency: 2.0
    docPositions:
    - 684
  joseph: !ruby/object:Word
    word: joseph
    stem: joseph
    docFrequency: 2.0
    docPositions:
    - 684
  dumas: !ruby/object:Word
    word: dumas
    stem: duma
    docFrequency: 2.0
    docPositions:
    - 684
  page: !ruby/object:Word
    word: page
    stem: page
    docFrequency: 6.0
    docPositions:
    - 684
    - 860
    - 866
    - 883
    - 899
  shorter: !ruby/object:Word
    word: shorter
    stem: shorter
    docFrequency: 2.0
    docPositions:
    - 685
  dates: !ruby/object:Word
    word: dates
    stem: date
    docFrequency: 3.0
    docPositions:
    - 685
    - 798
  observatory: !ruby/object:Word
    word: observatory
    stem: observatori
    docFrequency: 2.0
    docPositions:
    - 685
  thefreedictionary: !ruby/object:Word
    word: thefreedictionary
    stem: thefreedictionari
    docFrequency: 2.0
    docPositions:
    - 686
  listed: !ruby/object:Word
    word: listed
    stem: list
    docFrequency: 2.0
    docPositions:
    - 687
  existed: !ruby/object:Word
    word: existed
    stem: exist
    docFrequency: 2.0
    docPositions:
    - 687
  incarnations: !ruby/object:Word
    word: incarnations
    stem: incarn
    docFrequency: 2.0
    docPositions:
    - 687
  fuegi: !ruby/object:Word
    word: fuegi
    stem: fuegi
    docFrequency: 2.0
    docPositions:
    - 691
  creation: !ruby/object:Word
    word: creation
    stem: creation
    docFrequency: 2.0
    docPositions:
    - 691
  identifier: !ruby/object:Word
    word: identifier
    stem: identifi
    docFrequency: 2.0
    docPositions:
    - 691
  kempf: !ruby/object:Word
    word: kempf
    stem: kempf
    docFrequency: 2.0
    docPositions:
    - 692
  karl: !ruby/object:Word
    word: karl
    stem: karl
    docFrequency: 2.0
    docPositions:
    - 692
  monograph: !ruby/object:Word
    word: monograph
    stem: monograph
    docFrequency: 2.0
    docPositions:
    - 692
  ordnance: !ruby/object:Word
    word: ordnance
    stem: ordnanc
    docFrequency: 2.0
    docPositions:
    - 692
  corps: !ruby/object:Word
    word: corps
    stem: corp
    docFrequency: 2.0
    docPositions:
    - 692
  aberdeen: !ruby/object:Word
    word: aberdeen
    stem: aberdeen
    docFrequency: 2.0
    docPositions:
    - 692
  proving: !ruby/object:Word
    word: proving
    stem: prove
    docFrequency: 2.0
    docPositions:
    - 692
  ground: !ruby/object:Word
    word: ground
    stem: ground
    docFrequency: 2.0
    docPositions:
    - 692
  phillips: !ruby/object:Word
    word: phillips
    stem: phillip
    docFrequency: 2.0
    docPositions:
    - 693
  tony: !ruby/object:Word
    word: tony
    stem: toni
    docFrequency: 2.0
    docPositions:
    - 693
  shannon: !ruby/object:Word
    word: shannon
    stem: shannon
    docFrequency: 2.0
    docPositions:
    - 694
  claude: !ruby/object:Word
    word: claude
    stem: claud
    docFrequency: 2.0
    docPositions:
    - 694
  elwood: !ruby/object:Word
    word: elwood
    stem: elwood
    docFrequency: 2.0
    docPositions:
    - 694
  symbolic: !ruby/object:Word
    word: symbolic
    stem: symbol
    docFrequency: 2.0
    docPositions:
    - 694
  massachusetts: !ruby/object:Word
    word: massachusetts
    stem: massachusett
    docFrequency: 4.0
    docPositions:
    - 694
    - 705
    - 710
  maynard: !ruby/object:Word
    word: maynard
    stem: maynard
    docFrequency: 2.0
    docPositions:
    - 695
  ma: !ruby/object:Word
    word: ma
    stem: ma
    docFrequency: 2.0
    docPositions:
    - 695
  etox: !ruby/object:Word
    word: etox
    stem: etox
    docFrequency: 2.0
    docPositions:
    - 696
  international: !ruby/object:Word
    word: international
    stem: intern
    docFrequency: 2.0
    docPositions:
    - 696
  physics: !ruby/object:Word
    word: physics
    stem: physic
    docFrequency: 2.0
    docPositions:
    - 696
  doron: !ruby/object:Word
    word: doron
    stem: doron
    docFrequency: 2.0
    docPositions:
    - 697
  swade: !ruby/object:Word
    word: swade
    stem: swade
    docFrequency: 2.0
    docPositions:
    - 697
  redeeming: !ruby/object:Word
    word: redeeming
    stem: redeem
    docFrequency: 2.0
    docPositions:
    - 697
  meuer: !ruby/object:Word
    word: meuer
    stem: meuer
    docFrequency: 2.0
    docPositions:
    - 698
  hans: !ruby/object:Word
    word: hans
    stem: han
    docFrequency: 2.0
    docPositions:
    - 698
  strohmaier: !ruby/object:Word
    word: strohmaier
    stem: strohmaier
    docFrequency: 2.0
    docPositions:
    - 698
  erich: !ruby/object:Word
    word: erich
    stem: erich
    docFrequency: 2.0
    docPositions:
    - 698
  dongarra: !ruby/object:Word
    word: dongarra
    stem: dongarra
    docFrequency: 2.0
    docPositions:
    - 698
  stokes: !ruby/object:Word
    word: stokes
    stem: stoke
    docFrequency: 2.0
    docPositions:
    - 700
  jon: !ruby/object:Word
    word: jon
    stem: jon
    docFrequency: 2.0
    docPositions:
    - 700
  illustrated: !ruby/object:Word
    word: illustrated
    stem: illustr
    docFrequency: 2.0
    docPositions:
    - 700
  starch: !ruby/object:Word
    word: starch
    stem: starch
    docFrequency: 2.0
    docPositions:
    - 700
  pringler: !ruby/object:Word
    word: pringler
    stem: pringler
    docFrequency: 2.0
    docPositions:
    - 701
  felt: !ruby/object:Word
    word: felt
    stem: felt
    docFrequency: 2.0
    docPositions:
    - 702
  dorr: !ruby/object:Word
    word: dorr
    stem: dorr
    docFrequency: 2.0
    docPositions:
    - 702
  chicago: !ruby/object:Word
    word: chicago
    stem: chicago
    docFrequency: 2.0
    docPositions:
    - 702
  ifrah: !ruby/object:Word
    word: ifrah
    stem: ifrah
    docFrequency: 2.0
    docPositions:
    - 703
  georges: !ruby/object:Word
    word: georges
    stem: georg
    docFrequency: 2.0
    docPositions:
    - 703
  sons: !ruby/object:Word
    word: sons
    stem: son
    docFrequency: 3.0
    docPositions:
    - 703
    - 704
  berkeley: !ruby/object:Word
    word: berkeley
    stem: berkelei
    docFrequency: 2.0
    docPositions:
    - 704
  edmund: !ruby/object:Word
    word: edmund
    stem: edmund
    docFrequency: 2.0
    docPositions:
    - 704
  giant: !ruby/object:Word
    word: giant
    stem: giant
    docFrequency: 2.0
    docPositions:
    - 704
  brains: !ruby/object:Word
    word: brains
    stem: brain
    docFrequency: 2.0
    docPositions:
    - 704
  think: !ruby/object:Word
    word: think
    stem: think
    docFrequency: 2.0
    docPositions:
    - 704
  cohen: !ruby/object:Word
    word: cohen
    stem: cohen
    docFrequency: 3.0
    docPositions:
    - 705
    - 710
  bernard: !ruby/object:Word
    word: bernard
    stem: bernard
    docFrequency: 3.0
    docPositions:
    - 705
    - 710
  howard: !ruby/object:Word
    word: howard
    stem: howard
    docFrequency: 3.0
    docPositions:
    - 705
    - 710
  aiken: !ruby/object:Word
    word: aiken
    stem: aiken
    docFrequency: 3.0
    docPositions:
    - 705
    - 710
  portrait: !ruby/object:Word
    word: portrait
    stem: portrait
    docFrequency: 3.0
    docPositions:
    - 705
    - 710
  cambridge: !ruby/object:Word
    word: cambridge
    stem: cambridg
    docFrequency: 3.0
    docPositions:
    - 705
    - 710
  ligonni: !ruby/object:Word
    word: ligonni
    stem: ligonni
    docFrequency: 2.0
    docPositions:
    - 706
  pr: !ruby/object:Word
    word: pr
    stem: pr
    docFrequency: 2.0
    docPositions:
    - 706
  ordinateurs: !ruby/object:Word
    word: ordinateurs
    stem: ordinateur
    docFrequency: 2.0
    docPositions:
    - 706
  paris: !ruby/object:Word
    word: paris
    stem: pari
    docFrequency: 3.0
    docPositions:
    - 706
    - 707
  laffont: !ruby/object:Word
    word: laffont
    stem: laffont
    docFrequency: 2.0
    docPositions:
    - 706
  couffignal: !ruby/object:Word
    word: couffignal
    stem: couffign
    docFrequency: 2.0
    docPositions:
    - 707
  louis: !ruby/object:Word
    word: louis
    stem: loui
    docFrequency: 2.0
    docPositions:
    - 707
  les: !ruby/object:Word
    word: les
    stem: le
    docFrequency: 2.0
    docPositions:
    - 707
  calculer: !ruby/object:Word
    word: calculer
    stem: calcul
    docFrequency: 2.0
    docPositions:
    - 707
  leurs: !ruby/object:Word
    word: leurs
    stem: leur
    docFrequency: 2.0
    docPositions:
    - 707
  principes: !ruby/object:Word
    word: principes
    stem: princip
    docFrequency: 2.0
    docPositions:
    - 707
  leur: !ruby/object:Word
    word: leur
    stem: leur
    docFrequency: 2.0
    docPositions:
    - 707
  volution: !ruby/object:Word
    word: volution
    stem: volut
    docFrequency: 2.0
    docPositions:
    - 707
  gauthier: !ruby/object:Word
    word: gauthier
    stem: gauthier
    docFrequency: 2.0
    docPositions:
    - 707
  villars: !ruby/object:Word
    word: villars
    stem: villar
    docFrequency: 2.0
    docPositions:
    - 707
  essinger: !ruby/object:Word
    word: essinger
    stem: essing
    docFrequency: 2.0
    docPositions:
    - 708
  birth: !ruby/object:Word
    word: birth
    stem: birth
    docFrequency: 2.0
    docPositions:
    - 708
  hyman: !ruby/object:Word
    word: hyman
    stem: hyman
    docFrequency: 2.0
    docPositions:
    - 709
  anthony: !ruby/object:Word
    word: anthony
    stem: anthoni
    docFrequency: 2.0
    docPositions:
    - 709
  princeton: !ruby/object:Word
    word: princeton
    stem: princeton
    docFrequency: 2.0
    docPositions:
    - 709
  bowden: !ruby/object:Word
    word: bowden
    stem: bowden
    docFrequency: 2.0
    docPositions:
    - 711
  thought: !ruby/object:Word
    word: thought
    stem: thought
    docFrequency: 2.0
    docPositions:
    - 711
  toronto: !ruby/object:Word
    word: toronto
    stem: toronto
    docFrequency: 2.0
    docPositions:
    - 711
  pitman: !ruby/object:Word
    word: pitman
    stem: pitman
    docFrequency: 2.0
    docPositions:
    - 711
  moseley: !ruby/object:Word
    word: moseley
    stem: moselei
    docFrequency: 2.0
    docPositions:
    - 712
  maboth: !ruby/object:Word
    word: maboth
    stem: maboth
    docFrequency: 2.0
    docPositions:
    - 712
  irascible: !ruby/object:Word
    word: irascible
    stem: irasc
    docFrequency: 2.0
    docPositions:
    - 712
  genius: !ruby/object:Word
    word: genius
    stem: geniu
    docFrequency: 2.0
    docPositions:
    - 712
  inventor: !ruby/object:Word
    word: inventor
    stem: inventor
    docFrequency: 2.0
    docPositions:
    - 712
  hutchinson: !ruby/object:Word
    word: hutchinson
    stem: hutchinson
    docFrequency: 2.0
    docPositions:
    - 712
  bruce: !ruby/object:Word
    word: bruce
    stem: bruce
    docFrequency: 2.0
    docPositions:
    - 713
  little: !ruby/object:Word
    word: little
    stem: littl
    docFrequency: 2.0
    docPositions:
    - 713
  ve: !ruby/object:Word
    word: ve
    stem: ve
    docFrequency: 2.0
    docPositions:
    - 713
  garland: !ruby/object:Word
    word: garland
    stem: garland
    docFrequency: 2.0
    docPositions:
    - 713
  inc: !ruby/object:Word
    word: inc
    stem: inc
    docFrequency: 3.0
    docPositions:
    - 713
    - 885
  contributions: !ruby/object:Word
    word: contributions
    stem: contribut
    docFrequency: 2.0
    docPositions:
    - 714
  ludgate: !ruby/object:Word
    word: ludgate
    stem: ludgat
    docFrequency: 2.0
    docPositions:
    - 714
  torres: !ruby/object:Word
    word: torres
    stem: torr
    docFrequency: 2.0
    docPositions:
    - 714
  warhol: !ruby/object:Word
    word: warhol
    stem: warhol
    docFrequency: 2.0
    docPositions:
    - 717
  wikiversity: !ruby/object:Word
    word: wikiversity
    stem: wikivers
    docFrequency: 3.0
    docPositions:
    - 718
    - 902
  quiz: !ruby/object:Word
    word: quiz
    stem: quiz
    docFrequency: 3.0
    docPositions:
    - 718
    - 902
  authority: !ruby/object:Word
    word: authority
    stem: author
    docFrequency: 2.0
    docPositions:
    - 720
  lccn: !ruby/object:Word
    word: lccn
    stem: lccn
    docFrequency: 3.0
    docPositions:
    - 723
    - 798
  gnd: !ruby/object:Word
    word: gnd
    stem: gnd
    docFrequency: 3.0
    docPositions:
    - 724
    - 798
  bnf: !ruby/object:Word
    word: bnf
    stem: bnf
    docFrequency: 3.0
    docPositions:
    - 725
    - 798
  ndl: !ruby/object:Word
    word: ndl
    stem: ndl
    docFrequency: 2.0
    docPositions:
    - 726
  t: !ruby/object:Word
    word: t
    stem: t
    docFrequency: 2.0
    docPositions:
    - 734
  combinational: !ruby/object:Word
    word: combinational
    stem: combin
    docFrequency: 2.0
    docPositions:
    - 743
  ic: !ruby/object:Word
    word: ic
    stem: ic
    docFrequency: 2.0
    docPositions:
    - 744
  gate: !ruby/object:Word
    word: gate
    stem: gate
    docFrequency: 2.0
    docPositions:
    - 745
  sequential: !ruby/object:Word
    word: sequential
    stem: sequenti
    docFrequency: 2.0
    docPositions:
    - 746
  algebra: !ruby/object:Word
    word: algebra
    stem: algebra
    docFrequency: 2.0
    docPositions:
    - 754
  minimization: !ruby/object:Word
    word: minimization
    stem: minim
    docFrequency: 2.0
    docPositions:
    - 760
  equivalence: !ruby/object:Word
    word: equivalence
    stem: equival
    docFrequency: 2.0
    docPositions:
    - 769
  checking: !ruby/object:Word
    word: checking
    stem: check
    docFrequency: 2.0
    docPositions:
    - 769
  synchronous: !ruby/object:Word
    word: synchronous
    stem: synchron
    docFrequency: 2.0
    docPositions:
    - 770
  asynchronous: !ruby/object:Word
    word: asynchronous
    stem: asynchron
    docFrequency: 2.0
    docPositions:
    - 771
  photography: !ruby/object:Word
    word: photography
    stem: photographi
    docFrequency: 2.0
    docPositions:
    - 781
  literature: !ruby/object:Word
    word: literature
    stem: literatur
    docFrequency: 2.0
    docPositions:
    - 783
  telecommunication: !ruby/object:Word
    word: telecommunication
    stem: telecommun
    docFrequency: 2.0
    docPositions:
    - 784
  issues: !ruby/object:Word
    word: issues
    stem: issu
    docFrequency: 2.0
    docPositions:
    - 788
  metastability: !ruby/object:Word
    word: metastability
    stem: metast
    docFrequency: 2.0
    docPositions:
    - 791
  runt: !ruby/object:Word
    word: runt
    stem: runt
    docFrequency: 2.0
    docPositions:
    - 792
  https: !ruby/object:Word
    word: https
    stem: http
    docFrequency: 2.0
    docPositions:
    - 797
  en: !ruby/object:Word
    word: en
    stem: en
    docFrequency: 2.0
    docPositions:
    - 797
  index: !ruby/object:Word
    word: index
    stem: index
    docFrequency: 2.0
    docPositions:
    - 797
  title: !ruby/object:Word
    word: title
    stem: titl
    docFrequency: 2.0
    docPositions:
    - 797
  oldid: !ruby/object:Word
    word: oldid
    stem: oldid
    docFrequency: 2.0
    docPositions:
    - 797
  categories: !ruby/object:Word
    word: categories
    stem: categori
    docFrequency: 3.0
    docPositions:
    - 798
  computershidden: !ruby/object:Word
    word: computershidden
    stem: computershidden
    docFrequency: 2.0
    docPositions:
    - 798
  linksarticles: !ruby/object:Word
    word: linksarticles
    stem: linksarticl
    docFrequency: 2.0
    docPositions:
    - 798
  pages: !ruby/object:Word
    word: pages
    stem: page
    docFrequency: 2.0
    docPositions:
    - 798
  contentwikipedia: !ruby/object:Word
    word: contentwikipedia
    stem: contentwikipedia
    docFrequency: 2.0
    docPositions:
    - 798
  semi: !ruby/object:Word
    word: semi
    stem: semi
    docFrequency: 2.0
    docPositions:
    - 798
  protected: !ruby/object:Word
    word: protected
    stem: protect
    docFrequency: 3.0
    docPositions:
    - 798
  pageswikipedia: !ruby/object:Word
    word: pageswikipedia
    stem: pageswikipedia
    docFrequency: 2.0
    docPositions:
    - 798
  pagesarticles: !ruby/object:Word
    word: pagesarticles
    stem: pagesarticl
    docFrequency: 2.0
    docPositions:
    - 798
  infobox: !ruby/object:Word
    word: infobox
    stem: infobox
    docFrequency: 2.0
    docPositions:
    - 798
  templates: !ruby/object:Word
    word: templates
    stem: templat
    docFrequency: 2.0
    docPositions:
    - 798
  rowsall: !ruby/object:Word
    word: rowsall
    stem: rowsal
    docFrequency: 2.0
    docPositions:
    - 798
  statementsarticles: !ruby/object:Word
    word: statementsarticles
    stem: statementsarticl
    docFrequency: 2.0
    docPositions:
    - 798
  needing: !ruby/object:Word
    word: needing
    stem: need
    docFrequency: 3.0
    docPositions:
    - 798
  additional: !ruby/object:Word
    word: additional
    stem: addit
    docFrequency: 4.0
    docPositions:
    - 798
    - 885
  referencesarticles: !ruby/object:Word
    word: referencesarticles
    stem: referencesarticl
    docFrequency: 2.0
    docPositions:
    - 798
  dmy: !ruby/object:Word
    word: dmy
    stem: dmy
    docFrequency: 2.0
    docPositions:
    - 798
  identifierswikipedia: !ruby/object:Word
    word: identifierswikipedia
    stem: identifierswikipedia
    docFrequency: 3.0
    docPositions:
    - 798
  identifiersarticles: !ruby/object:Word
    word: identifiersarticles
    stem: identifiersarticl
    docFrequency: 2.0
    docPositions:
    - 798
  clipsarticles: !ruby/object:Word
    word: clipsarticles
    stem: clipsarticl
    docFrequency: 2.0
    docPositions:
    - 798
  menu: !ruby/object:Word
    word: menu
    stem: menu
    docFrequency: 2.0
    docPositions:
    - 802
  tools: !ruby/object:Word
    word: tools
    stem: tool
    docFrequency: 3.0
    docPositions:
    - 806
    - 863
  logged: !ruby/object:Word
    word: logged
    stem: log
    docFrequency: 2.0
    docPositions:
    - 807
  intalkcontributionscreate: !ruby/object:Word
    word: intalkcontributionscreate
    stem: intalkcontributionscr
    docFrequency: 2.0
    docPositions:
    - 807
  accountlog: !ruby/object:Word
    word: accountlog
    stem: accountlog
    docFrequency: 2.0
    docPositions:
    - 807
  namespaces: !ruby/object:Word
    word: namespaces
    stem: namespac
    docFrequency: 2.0
    docPositions:
    - 810
  talk: !ruby/object:Word
    word: talk
    stem: talk
    docFrequency: 2.0
    docPositions:
    - 812
  variants: !ruby/object:Word
    word: variants
    stem: variant
    docFrequency: 2.0
    docPositions:
    - 816
  views: !ruby/object:Word
    word: views
    stem: view
    docFrequency: 2.0
    docPositions:
    - 825
  view: !ruby/object:Word
    word: view
    stem: view
    docFrequency: 5.0
    docPositions:
    - 827
    - 828
    - 891
    - 899
  pagecontentsfeatured: !ruby/object:Word
    word: pagecontentsfeatured
    stem: pagecontentsfeatur
    docFrequency: 2.0
    docPositions:
    - 854
  contentcurrent: !ruby/object:Word
    word: contentcurrent
    stem: contentcurr
    docFrequency: 2.0
    docPositions:
    - 854
  eventsrandom: !ruby/object:Word
    word: eventsrandom
    stem: eventsrandom
    docFrequency: 2.0
    docPositions:
    - 854
  articledonate: !ruby/object:Word
    word: articledonate
    stem: articledon
    docFrequency: 2.0
    docPositions:
    - 854
  wikipediawikipedia: !ruby/object:Word
    word: wikipediawikipedia
    stem: wikipediawikipedia
    docFrequency: 2.0
    docPositions:
    - 854
  helpabout: !ruby/object:Word
    word: helpabout
    stem: helpabout
    docFrequency: 2.0
    docPositions:
    - 860
  wikipediacommunity: !ruby/object:Word
    word: wikipediacommunity
    stem: wikipediacommun
    docFrequency: 2.0
    docPositions:
    - 860
  portalrecent: !ruby/object:Word
    word: portalrecent
    stem: portalrec
    docFrequency: 2.0
    docPositions:
    - 860
  changescontact: !ruby/object:Word
    word: changescontact
    stem: changescontact
    docFrequency: 2.0
    docPositions:
    - 860
  hererelated: !ruby/object:Word
    word: hererelated
    stem: hererel
    docFrequency: 2.0
    docPositions:
    - 866
  changesupload: !ruby/object:Word
    word: changesupload
    stem: changesupload
    docFrequency: 2.0
    docPositions:
    - 866
  filespecial: !ruby/object:Word
    word: filespecial
    stem: filespeci
    docFrequency: 2.0
    docPositions:
    - 866
  pagespermanent: !ruby/object:Word
    word: pagespermanent
    stem: pagesperman
    docFrequency: 2.0
    docPositions:
    - 866
  linkpage: !ruby/object:Word
    word: linkpage
    stem: linkpag
    docFrequency: 2.0
    docPositions:
    - 866
  informationwikidata: !ruby/object:Word
    word: informationwikidata
    stem: informationwikidata
    docFrequency: 2.0
    docPositions:
    - 866
  itemcite: !ruby/object:Word
    word: itemcite
    stem: itemcit
    docFrequency: 2.0
    docPositions:
    - 866
  print: !ruby/object:Word
    word: print
    stem: print
    docFrequency: 2.0
    docPositions:
    - 869
  export: !ruby/object:Word
    word: export
    stem: export
    docFrequency: 2.0
    docPositions:
    - 869
  create: !ruby/object:Word
    word: create
    stem: creat
    docFrequency: 2.0
    docPositions:
    - 872
  bookdownload: !ruby/object:Word
    word: bookdownload
    stem: bookdownload
    docFrequency: 2.0
    docPositions:
    - 872
  pdfprintable: !ruby/object:Word
    word: pdfprintable
    stem: pdfprintabl
    docFrequency: 2.0
    docPositions:
    - 872
  ac: !ruby/object:Word
    word: ac
    stem: ac
    docFrequency: 2.0
    docPositions:
    - 878
  hafrikaansalemannisch: !ruby/object:Word
    word: hafrikaansalemannisch
    stem: hafrikaansalemannisch
    docFrequency: 2.0
    docPositions:
    - 878
  nglisc: !ruby/object:Word
    word: nglisc
    stem: nglisc
    docFrequency: 2.0
    docPositions:
    - 878
  aragon: !ruby/object:Word
    word: aragon
    stem: aragon
    docFrequency: 2.0
    docPositions:
    - 878
  asturianuava: !ruby/object:Word
    word: asturianuava
    stem: asturianuava
    docFrequency: 2.0
    docPositions:
    - 878
  az: !ruby/object:Word
    word: az
    stem: az
    docFrequency: 2.0
    docPositions:
    - 878
  rbaycanca: !ruby/object:Word
    word: rbaycanca
    stem: rbaycanca
    docFrequency: 2.0
    docPositions:
    - 878
  boarisch: !ruby/object:Word
    word: boarisch
    stem: boarisch
    docFrequency: 2.0
    docPositions:
    - 878
  bosanskibrezhoneg: !ruby/object:Word
    word: bosanskibrezhoneg
    stem: bosanskibrezhoneg
    docFrequency: 2.0
    docPositions:
    - 878
  catal: !ruby/object:Word
    word: catal
    stem: catal
    docFrequency: 2.0
    docPositions:
    - 878
  cebuano: !ruby/object:Word
    word: cebuano
    stem: cebuano
    docFrequency: 2.0
    docPositions:
    - 878
  tinacymraegdanskdeutschdin: !ruby/object:Word
    word: tinacymraegdanskdeutschdin
    stem: tinacymraegdanskdeutschdin
    docFrequency: 2.0
    docPositions:
    - 878
  bizaadeesti: !ruby/object:Word
    word: bizaadeesti
    stem: bizaadeesti
    docFrequency: 2.0
    docPositions:
    - 878
  emili: !ruby/object:Word
    word: emili
    stem: emili
    docFrequency: 2.0
    docPositions:
    - 878
  rumagn: !ruby/object:Word
    word: rumagn
    stem: rumagn
    docFrequency: 2.0
    docPositions:
    - 878
  espa: !ruby/object:Word
    word: espa
    stem: espa
    docFrequency: 2.0
    docPositions:
    - 878
  olesperantoeuskara: !ruby/object:Word
    word: olesperantoeuskara
    stem: olesperantoeuskara
    docFrequency: 2.0
    docPositions:
    - 878
  fiji: !ruby/object:Word
    word: fiji
    stem: fiji
    docFrequency: 2.0
    docPositions:
    - 878
  hindif: !ruby/object:Word
    word: hindif
    stem: hindif
    docFrequency: 2.0
    docPositions:
    - 878
  roysktfran: !ruby/object:Word
    word: roysktfran
    stem: roysktfran
    docFrequency: 2.0
    docPositions:
    - 878
  aisfryskfurlangaeilgegaelgg: !ruby/object:Word
    word: aisfryskfurlangaeilgegaelgg
    stem: aisfryskfurlangaeilgegaelgg
    docFrequency: 2.0
    docPositions:
    - 878
  idhliggalego: !ruby/object:Word
    word: idhliggalego
    stem: idhliggalego
    docFrequency: 2.0
    docPositions:
    - 878
  hak: !ruby/object:Word
    word: hak
    stem: hak
    docFrequency: 2.0
    docPositions:
    - 878
  ng: !ruby/object:Word
    word: ng
    stem: ng
    docFrequency: 6.0
    docPositions:
    - 878
  hausa: !ruby/object:Word
    word: hausa
    stem: hausa
    docFrequency: 2.0
    docPositions:
    - 878
  hrvatskiidoigboilokano: !ruby/object:Word
    word: hrvatskiidoigboilokano
    stem: hrvatskiidoigboilokano
    docFrequency: 2.0
    docPositions:
    - 878
  bahasa: !ruby/object:Word
    word: bahasa
    stem: bahasa
    docFrequency: 3.0
    docPositions:
    - 878
  indonesiainterlinguainterlingue: !ruby/object:Word
    word: indonesiainterlinguainterlingue
    stem: indonesiainterlinguainterlingu
    docFrequency: 2.0
    docPositions:
    - 878
  inuktituti: !ruby/object:Word
    word: inuktituti
    stem: inuktituti
    docFrequency: 2.0
    docPositions:
    - 878
  upiakisixhosaisizulu: !ruby/object:Word
    word: upiakisixhosaisizulu
    stem: upiakisixhosaisizulu
    docFrequency: 2.0
    docPositions:
    - 878
  slenskaitaliano: !ruby/object:Word
    word: slenskaitaliano
    stem: slenskaitaliano
    docFrequency: 2.0
    docPositions:
    - 878
  basa: !ruby/object:Word
    word: basa
    stem: basa
    docFrequency: 3.0
    docPositions:
    - 878
  jawa: !ruby/object:Word
    word: jawa
    stem: jawa
    docFrequency: 2.0
    docPositions:
    - 878
  kapampangan: !ruby/object:Word
    word: kapampangan
    stem: kapampangan
    docFrequency: 2.0
    docPositions:
    - 878
  kasz: !ruby/object:Word
    word: kasz
    stem: kasz
    docFrequency: 2.0
    docPositions:
    - 878
  bsczi: !ruby/object:Word
    word: bsczi
    stem: bsczi
    docFrequency: 2.0
    docPositions:
    - 878
  kernowekkiswahili: !ruby/object:Word
    word: kernowekkiswahili
    stem: kernowekkiswahili
    docFrequency: 2.0
    docPositions:
    - 878
  kongokrey: !ruby/object:Word
    word: kongokrey
    stem: kongokrei
    docFrequency: 2.0
    docPositions:
    - 878
  ayisyenkurd: !ruby/object:Word
    word: ayisyenkurd
    stem: ayisyenkurd
    docFrequency: 2.0
    docPositions:
    - 878
  ladino: !ruby/object:Word
    word: ladino
    stem: ladino
    docFrequency: 2.0
    docPositions:
    - 878
  latinalatvie: !ruby/object:Word
    word: latinalatvie
    stem: latinalatvi
    docFrequency: 2.0
    docPositions:
    - 878
  ul: !ruby/object:Word
    word: ul
    stem: ul
    docFrequency: 2.0
    docPositions:
    - 878
  tzebuergeschlietuvi: !ruby/object:Word
    word: tzebuergeschlietuvi
    stem: tzebuergeschlietuvi
    docFrequency: 2.0
    docPositions:
    - 878
  limburgsling: !ruby/object:Word
    word: limburgsling
    stem: limburgsl
    docFrequency: 2.0
    docPositions:
    - 878
  lalojbanlumbaartmagyar: !ruby/object:Word
    word: lalojbanlumbaartmagyar
    stem: lalojbanlumbaartmagyar
    docFrequency: 2.0
    docPositions:
    - 878
  malagasy: !ruby/object:Word
    word: malagasy
    stem: malagasi
    docFrequency: 2.0
    docPositions:
    - 878
  malti: !ruby/object:Word
    word: malti
    stem: malti
    docFrequency: 2.0
    docPositions:
    - 878
  melayum: !ruby/object:Word
    word: melayum
    stem: melayum
    docFrequency: 2.0
    docPositions:
    - 878
  mirand: !ruby/object:Word
    word: mirand
    stem: mirand
    docFrequency: 2.0
    docPositions:
    - 878
  huatlnederlandsnedersaksies: !ruby/object:Word
    word: huatlnederlandsnedersaksies
    stem: huatlnederlandsnedersaksi
    docFrequency: 2.0
    docPositions:
    - 878
  napulitano: !ruby/object:Word
    word: napulitano
    stem: napulitano
    docFrequency: 2.0
    docPositions:
    - 878
  norfuk: !ruby/object:Word
    word: norfuk
    stem: norfuk
    docFrequency: 2.0
    docPositions:
    - 878
  pitkernnorsk: !ruby/object:Word
    word: pitkernnorsk
    stem: pitkernnorsk
    docFrequency: 2.0
    docPositions:
    - 878
  bokm: !ruby/object:Word
    word: bokm
    stem: bokm
    docFrequency: 2.0
    docPositions:
    - 878
  lnorsk: !ruby/object:Word
    word: lnorsk
    stem: lnorsk
    docFrequency: 2.0
    docPositions:
    - 878
  nynorskoccitan: !ruby/object:Word
    word: nynorskoccitan
    stem: nynorskoccitan
    docFrequency: 2.0
    docPositions:
    - 878
  oromooo: !ruby/object:Word
    word: oromooo
    stem: oromooo
    docFrequency: 2.0
    docPositions:
    - 878
  zbekcha: !ruby/object:Word
    word: zbekcha
    stem: zbekcha
    docFrequency: 2.0
    docPositions:
    - 878
  piemont: !ruby/object:Word
    word: piemont
    stem: piemont
    docFrequency: 2.0
    docPositions:
    - 878
  isplattd: !ruby/object:Word
    word: isplattd
    stem: isplattd
    docFrequency: 2.0
    docPositions:
    - 878
  tschpolski: !ruby/object:Word
    word: tschpolski
    stem: tschpolski
    docFrequency: 2.0
    docPositions:
    - 878
  portugu: !ruby/object:Word
    word: portugu
    stem: portugu
    docFrequency: 2.0
    docPositions:
    - 878
  sqaraqalpaqshaq: !ruby/object:Word
    word: sqaraqalpaqshaq
    stem: sqaraqalpaqshaq
    docFrequency: 2.0
    docPositions:
    - 878
  mtatarcarom: !ruby/object:Word
    word: mtatarcarom
    stem: mtatarcarom
    docFrequency: 2.0
    docPositions:
    - 878
  runa: !ruby/object:Word
    word: runa
    stem: runa
    docFrequency: 2.0
    docPositions:
    - 878
  simi: !ruby/object:Word
    word: simi
    stem: simi
    docFrequency: 2.0
    docPositions:
    - 878
  sarduscotsseeltersksesothoshqipsicilianu: !ruby/object:Word
    word: sarduscotsseeltersksesothoshqipsicilianu
    stem: sarduscotsseeltersksesothoshqipsicilianu
    docFrequency: 2.0
    docPositions:
    - 878
  englishsloven: !ruby/object:Word
    word: englishsloven
    stem: englishsloven
    docFrequency: 2.0
    docPositions:
    - 878
  inasloven: !ruby/object:Word
    word: inasloven
    stem: inasloven
    docFrequency: 2.0
    docPositions:
    - 878
  ina: !ruby/object:Word
    word: ina
    stem: ina
    docFrequency: 2.0
    docPositions:
    - 878
  nskisoomaaliga: !ruby/object:Word
    word: nskisoomaaliga
    stem: nskisoomaaliga
    docFrequency: 2.0
    docPositions:
    - 878
  srpskisrpskohrvatski: !ruby/object:Word
    word: srpskisrpskohrvatski
    stem: srpskisrpskohrvatski
    docFrequency: 2.0
    docPositions:
    - 878
  sundasuomisvenskatagalog: !ruby/object:Word
    word: sundasuomisvenskatagalog
    stem: sundasuomisvenskatagalog
    docFrequency: 2.0
    docPositions:
    - 878
  tatar: !ruby/object:Word
    word: tatar
    stem: tatar
    docFrequency: 2.0
    docPositions:
    - 878
  tsets: !ruby/object:Word
    word: tsets
    stem: tset
    docFrequency: 2.0
    docPositions:
    - 878
  hest: !ruby/object:Word
    word: hest
    stem: hest
    docFrequency: 2.0
    docPositions:
    - 878
  heset: !ruby/object:Word
    word: heset
    stem: heset
    docFrequency: 2.0
    docPositions:
    - 878
  rk: !ruby/object:Word
    word: rk
    stem: rk
    docFrequency: 2.0
    docPositions:
    - 878
  rkmen: !ruby/object:Word
    word: rkmen
    stem: rkmen
    docFrequency: 2.0
    docPositions:
    - 878
  uyghurchevahcuenghv: !ruby/object:Word
    word: uyghurchevahcuenghv
    stem: uyghurchevahcuenghv
    docFrequency: 2.0
    docPositions:
    - 878
  netoti: !ruby/object:Word
    word: netoti
    stem: netoti
    docFrequency: 2.0
    docPositions:
    - 878
  vi: !ruby/object:Word
    word: vi
    stem: vi
    docFrequency: 2.0
    docPositions:
    - 878
  tv: !ruby/object:Word
    word: tv
    stem: tv
    docFrequency: 2.0
    docPositions:
    - 878
  rowalon: !ruby/object:Word
    word: rowalon
    stem: rowalon
    docFrequency: 2.0
    docPositions:
    - 878
  west: !ruby/object:Word
    word: west
    stem: west
    docFrequency: 2.0
    docPositions:
    - 878
  vlamswinaraywolof: !ruby/object:Word
    word: vlamswinaraywolof
    stem: vlamswinaraywolof
    docFrequency: 2.0
    docPositions:
    - 878
  yor: !ruby/object:Word
    word: yor
    stem: yor
    docFrequency: 2.0
    docPositions:
    - 878
  zazaki: !ruby/object:Word
    word: zazaki
    stem: zazaki
    docFrequency: 2.0
    docPositions:
    - 878
  emait: !ruby/object:Word
    word: emait
    stem: emait
    docFrequency: 2.0
    docPositions:
    - 878
  ka: !ruby/object:Word
    word: ka
    stem: ka
    docFrequency: 2.0
    docPositions:
    - 878
  edit: !ruby/object:Word
    word: edit
    stem: edit
    docFrequency: 2.0
    docPositions:
    - 878
  last: !ruby/object:Word
    word: last
    stem: last
    docFrequency: 2.0
    docPositions:
    - 883
  creative: !ruby/object:Word
    word: creative
    stem: creativ
    docFrequency: 2.0
    docPositions:
    - 884
  commons: !ruby/object:Word
    word: commons
    stem: common
    docFrequency: 2.0
    docPositions:
    - 884
  attribution: !ruby/object:Word
    word: attribution
    stem: attribut
    docFrequency: 2.0
    docPositions:
    - 884
  sharealike: !ruby/object:Word
    word: sharealike
    stem: sharealik
    docFrequency: 2.0
    docPositions:
    - 884
  license: !ruby/object:Word
    word: license
    stem: licens
    docFrequency: 2.0
    docPositions:
    - 884
  site: !ruby/object:Word
    word: site
    stem: site
    docFrequency: 4.0
    docPositions:
    - 885
    - 899
  you: !ruby/object:Word
    word: you
    stem: you
    docFrequency: 2.0
    docPositions:
    - 885
  agree: !ruby/object:Word
    word: agree
    stem: agre
    docFrequency: 2.0
    docPositions:
    - 885
  privacy: !ruby/object:Word
    word: privacy
    stem: privaci
    docFrequency: 3.0
    docPositions:
    - 885
    - 886
  policy: !ruby/object:Word
    word: policy
    stem: polici
    docFrequency: 3.0
    docPositions:
    - 885
    - 886
  registered: !ruby/object:Word
    word: registered
    stem: regist
    docFrequency: 2.0
    docPositions:
    - 885
  trademark: !ruby/object:Word
    word: trademark
    stem: trademark
    docFrequency: 2.0
    docPositions:
    - 885
  wikimedia: !ruby/object:Word
    word: wikimedia
    stem: wikimedia
    docFrequency: 2.0
    docPositions:
    - 885
  profit: !ruby/object:Word
    word: profit
    stem: profit
    docFrequency: 2.0
    docPositions:
    - 885
  disclaimers: !ruby/object:Word
    word: disclaimers
    stem: disclaim
    docFrequency: 2.0
    docPositions:
    - 888
  contact: !ruby/object:Word
    word: contact
    stem: contact
    docFrequency: 2.0
    docPositions:
    - 889
  developers: !ruby/object:Word
    word: developers
    stem: develop
    docFrequency: 2.0
    docPositions:
    - 890
  window: !ruby/object:Word
    word: window
    stem: window
    docFrequency: 7.0
    docPositions:
    - 898
    - 900
  rlq: !ruby/object:Word
    word: rlq
    stem: rlq
    docFrequency: 7.0
    docPositions:
    - 898
    - 900
  push: !ruby/object:Word
    word: push
    stem: push
    docFrequency: 3.0
    docPositions:
    - 898
    - 900
  mw: !ruby/object:Word
    word: mw
    stem: mw
    docFrequency: 4.0
    docPositions:
    - 899
    - 901
  loader: !ruby/object:Word
    word: loader
    stem: loader
    docFrequency: 3.0
    docPositions:
    - 899
  ext: !ruby/object:Word
    word: ext
    stem: ext
    docFrequency: 17.0
    docPositions:
    - 899
  globalcssjs: !ruby/object:Word
    word: globalcssjs
    stem: globalcssj
    docFrequency: 3.0
    docPositions:
    - 899
  ready: !ruby/object:Word
    word: ready
    stem: readi
    docFrequency: 6.0
    docPositions:
    - 899
  load: !ruby/object:Word
    word: load
    stem: load
    docFrequency: 2.0
    docPositions:
    - 899
  mediawiki: !ruby/object:Word
    word: mediawiki
    stem: mediawiki
    docFrequency: 7.0
    docPositions:
    - 899
  toc: !ruby/object:Word
    word: toc
    stem: toc
    docFrequency: 2.0
    docPositions:
    - 899
  action: !ruby/object:Word
    word: action
    stem: action
    docFrequency: 2.0
    docPositions:
    - 899
  postedit: !ruby/object:Word
    word: postedit
    stem: postedit
    docFrequency: 2.0
    docPositions:
    - 899
  hidpi: !ruby/object:Word
    word: hidpi
    stem: hidpi
    docFrequency: 2.0
    docPositions:
    - 899
  searchsuggest: !ruby/object:Word
    word: searchsuggest
    stem: searchsuggest
    docFrequency: 2.0
    docPositions:
    - 899
  eventlogging: !ruby/object:Word
    word: eventlogging
    stem: eventlog
    docFrequency: 2.0
    docPositions:
    - 899
  subscriber: !ruby/object:Word
    word: subscriber
    stem: subscrib
    docFrequency: 2.0
    docPositions:
    - 899
  wikimediaevents: !ruby/object:Word
    word: wikimediaevents
    stem: wikimediaev
    docFrequency: 2.0
    docPositions:
    - 899
  navigationtiming: !ruby/object:Word
    word: navigationtiming
    stem: navigationtim
    docFrequency: 2.0
    docPositions:
    - 899
  gadget: !ruby/object:Word
    word: gadget
    stem: gadget
    docFrequency: 8.0
    docPositions:
    - 899
  teahouse: !ruby/object:Word
    word: teahouse
    stem: teahous
    docFrequency: 2.0
    docPositions:
    - 899
  referencetooltips: !ruby/object:Word
    word: referencetooltips
    stem: referencetooltip
    docFrequency: 2.0
    docPositions:
    - 899
  drn: !ruby/object:Word
    word: drn
    stem: drn
    docFrequency: 2.0
    docPositions:
    - 899
  charinsert: !ruby/object:Word
    word: charinsert
    stem: charinsert
    docFrequency: 2.0
    docPositions:
    - 899
  reftoolbar: !ruby/object:Word
    word: reftoolbar
    stem: reftoolbar
    docFrequency: 2.0
    docPositions:
    - 899
  switcher: !ruby/object:Word
    word: switcher
    stem: switcher
    docFrequency: 2.0
    docPositions:
    - 899
  featured: !ruby/object:Word
    word: featured
    stem: featur
    docFrequency: 2.0
    docPositions:
    - 899
  mmv: !ruby/object:Word
    word: mmv
    stem: mmv
    docFrequency: 2.0
    docPositions:
    - 899
  bootstrap: !ruby/object:Word
    word: bootstrap
    stem: bootstrap
    docFrequency: 2.0
    docPositions:
    - 899
  autostart: !ruby/object:Word
    word: autostart
    stem: autostart
    docFrequency: 2.0
    docPositions:
    - 899
  visualeditor: !ruby/object:Word
    word: visualeditor
    stem: visualeditor
    docFrequency: 2.0
    docPositions:
    - 899
  targetloader: !ruby/object:Word
    word: targetloader
    stem: targetload
    docFrequency: 2.0
    docPositions:
    - 899
  schema: !ruby/object:Word
    word: schema
    stem: schema
    docFrequency: 2.0
    docPositions:
    - 899
  universallanguageselector: !ruby/object:Word
    word: universallanguageselector
    stem: universallanguageselector
    docFrequency: 2.0
    docPositions:
    - 899
  uls: !ruby/object:Word
    word: uls
    stem: ul
    docFrequency: 3.0
    docPositions:
    - 899
  eventlogger: !ruby/object:Word
    word: eventlogger
    stem: eventlogg
    docFrequency: 2.0
    docPositions:
    - 899
  interlanguage: !ruby/object:Word
    word: interlanguage
    stem: interlanguag
    docFrequency: 2.0
    docPositions:
    - 899
  config: !ruby/object:Word
    word: config
    stem: config
    docFrequency: 2.0
    docPositions:
    - 901
  wgbackendresponsetime: !ruby/object:Word
    word: wgbackendresponsetime
    stem: wgbackendresponsetim
    docFrequency: 2.0
    docPositions:
    - 901
  wghostname: !ruby/object:Word
    word: wghostname
    stem: wghostnam
    docFrequency: 2.0
    docPositions:
    - 901
  nomin: !ruby/object:Word
    word: nomin
    stem: nomin
    docFrequency: 2.0
    docPositions:
    - 901
lineCount: 903
wordCount: 20479
rank: 0.25
title: Computer - Wikipedia, the free encyclopedia
links:
- http://www.upenn.edu/computing/provider/docs/hardware/powerusage.html
- http://www.intel.com/cd/channel/reseller/asmo-na/eng/products/mobile/processors/core2duo_m/feature/index.htm
- http://dictionary.oed.com/
- http://www.laits.utexas.edu/ghazal/Chap1/dsb/chapter1.html
- http://www.antikythera-mechanism.gr/project/general/the-project.html
- http://www.nature.com/nature/journal/v444/n7119/fig_tab/444551a_F2.html
- http://www.chonday.com/Videos/the-writer-automaton
- http://www.scientific-computing.com/scwmayjun03computingmachines.html
- http://www.sciencemuseum.org.uk/onlinestuff/stories/babbage.aspx?page=5
- http://www.newscientist.com/article/mg20827915.500-lets-build-babbages-ultimate-mechanical-computer.html
- http://plato.stanford.edu/entries/computing-history/
- http://plms.oxfordjournals.org/cgi/reprint/s2-42/1/230
- https://web.archive.org/web/20080601210541/http://www.epemag.com/zuse/part4a.htm
- http://www.epemag.com/zuse/part4a.htm
- http://www.nytimes.com/1994/04/20/news/20iht-zuse.html
- https://web.archive.org/web/20080318184915/http://www.crash-it.com/crash/index.php?page=73
- http://www.inf.fu-berlin.de/users/rojas/1997/Universal_Computer.pdf
- http://news.bbc.co.uk/1/hi/technology/8492762.stm
- http://www.tnmoc.org/colossus-rebuild-story
- http://www.independent.co.uk/news/people/obituary-allen-coombs-1611270.html
- http://www.guardian.co.uk/theguardian/2010/nov/08/harry-fensom-obituary
- http://www.techiwarehouse.com/engine/a046ee08/Generations-of-Computer
- http://www.cs.man.ac.uk/CCS/res/res20.htm#d
- http://www.cs.man.ac.uk/CCS/res/res04.htm#g
- http://www.computer50.org/mark1/contemporary.html
- http://www.computer50.org/mark1/mark1intro.html
- http://www.ourcomputerheritage.org/wp/
- http://www.bcs.org/server.php?
- http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=00689507
- http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=00689507
- http://www.epn-online.com/page/22909/the-hapless-tale-of-geoffrey-dummer-this-is-the-sad-.html
- http://nobelprize.org/nobel_prizes/physics/laureates/2000/kilby-lecture.pdf
- http://www.ti.com/corp/docs/kilbyctr/jackbuilt.shtml
- https://books.google.com/?id=gfeCXlElJTwC&pg=PA221
- http://worldwide.espacenet.com/textdoc?DB=EPODOC&IDX=US2981877
- http://www.intel.com/museum/archives/4004.htm
- http://arstechnica.com/uncategorized/2008/12/global-notebook-shipments-finally-overtake-desktops/
- http://www.idc.com/getdoc.jsp?containerId=prUS24239313
- http://www.time.com/time/printout/0,8816,954266,00.html
- http://www.isoc.org/internet/history/brief.shtml
- https://books.google.com/books?id=ZWaUurOwMPQC&q=quantum+computers&dq=insufficient+address+computer+architecture&source=gbs_word_cloud_r&cad=3#v=snippet&q=quantum%20computers&f=false
- http://thefreedictionary.com/computer
- http://dx.doi.org/10.1109/MAHC.2003.1253887
- http://ed-thelen.org/comp-hist/U-S-Ord-61.html
- http://www.math.sunysb.edu/~tony/whatsnew/column/antikytheraI-0400/kyth1.html
- http://hdl.handle.net/1721.1/11173
- http://bitsavers.vt100.net/dec/www.computer.museum.uq.edu.au_mirror/D-09-30_PDP11-40_Processor_Handbook.pdf
- https://web.archive.org/web/20070220095222/http://www.top500.org/lists/2006/11/overtime/Architectures
- http://www.top500.org/lists/2006/11/overtime/Architectures
- https://archive.org/details/mechanicalarithm00feltrich
- http://robroy.dyndns.info/collier/index.html
- http://www.cs.ncl.ac.uk/publications/articles/papers/398.pdf
- http://www.computerhistory.org/atchm/warhol-the-computer/
- http://id.loc.gov/authorities/subjects/sh85029552
- http://d-nb.info/gnd/4070083-5
- http://catalogue.bnf.fr/ark:/12148/cb119401913
- http://data.bnf.fr/ark:/12148/cb119401913
- http://id.ndl.go.jp/auth/ndlna/00561435
- https://en.wikipedia.org/w/index.php?title=Computer&oldid=695014391
- https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en
- https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute
rawText: "\n\t\t\n\t\t\n\t\t\n\t\t\t\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\n\n\t\t\tComputer\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tFrom
  Wikipedia, the free encyclopedia\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tJump
  to:\t\t\t\t\tnavigation, \t\t\t\t\tsearch\n\t\t\t\t\n\t\t\t\t\"Computer technology\"
  and \"Computer system\" redirect here. For the company, see Computer Technology
  Limited. For other uses, see Computer (disambiguation) and Computer system (disambiguation).\nComputer\n\n\n\nA
  computer is a general-purpose device that can be programmed to carry out a set of
  arithmetic or logical operations automatically. Since a sequence of operations can
  be readily changed, the computer can solve more than one kind of problem.\nConventionally,
  a computer consists of at least one processing element, typically a central processing
  unit (CPU), and some form of memory. The processing element carries out arithmetic
  and logic operations, and a sequencing and control unit can change the order of
  operations in response to stored information. Peripheral devices allow information
  to be retrieved from an external source, and the result of operations saved and
  retrieved.\nMechanical analog computers started appearing in the first century and
  were later used in the medieval era for astronomical calculations. In World War
  II, mechanical analog computers were used for specialized military applications
  such as calculating torpedo aiming. During this time the first electronic digital
  computers were developed. Originally they were the size of a large room, consuming
  as much power as several hundred modern personal computers (PCs).[1]\nModern computers
  based on integrated circuits are millions to billions of times more capable than
  the early machines, and occupy a fraction of the space.[2] Computers are small enough
  to fit into mobile devices, and mobile computers can be powered by small batteries.
  Personal computers in their various forms are icons of the Information Age and are
  generally considered as \"computers\". However, the embedded computers found in
  many devices from MP3 players to fighter aircraft and from electronic toys to industrial
  robots are the most numerous.\n\n\n\nContents\n\n1 Etymology\n2 History\n2.1 Pre-twentieth
  century\n2.2 First general-purpose computing device\n2.3 Later analog computers\n2.4
  Digital computer development\n2.4.1 Electromechanical\n2.4.2 Vacuum tubes and digital
  electronic circuits\n2.4.3 Stored programs\n2.4.4 Transistors\n2.4.5 Integrated
  circuits\n\n2.5 Mobile computers become dominant\n\n3 Programs\n3.1 Stored program
  architecture\n3.2 Machine code\n3.3 Programming language\n3.3.1 Low-level languages\n3.3.2
  High-level languages/Third Generation Language\n\n3.4 Fourth Generation Languages\n3.5
  Program design\n3.6 Bugs\n\n4 Components\n4.1 Control unit\n4.2 Central Processing
  unit (CPU)\n4.3 Arithmetic logic unit (ALU)\n4.4 Memory\n4.5 Input/output (I/O)\n4.6
  Multitasking\n4.7 Multiprocessing\n\n5 Networking and the Internet\n5.1 Computer
  architecture paradigms\n\n6 Misconceptions\n6.1 Unconventional computing\n\n7 Future\n8
  Further topics\n8.1 Artificial intelligence\n\n9 Hardware\n9.1 History of computing
  hardware\n9.2 Other hardware topics\n\n10 Software\n11 Languages\n11.1 Firmware\n\n12
  Types of computers\n12.1 Based on uses\n12.2 Based on sizes\n\n13 Input Devices\n14
  Output Devices\n15 Professions and organizations\n16 See also\n17 Notes\n18 References\n19
  External links\n\n\nEtymology\nThe first known use of the word \"computer\" was
  in 1613 in a book called The Yong Mans Gleanings by English writer Richard Braithwait:
  \"I haue read the truest computer of Times, and the best Arithmetician that euer
  breathed, and he reduceth thy dayes into a short number.\" It referred to a person
  who carried out calculations, or computations. The word continued with the same
  meaning until the middle of the 20th century. From the end of the 19th century the
  word began to take on its more familiar meaning, a machine that carries out computations.[3]\nHistory\nMain
  article: History of computing hardware\nPre-twentieth century\n\n\n\n\nThe Ishango
  bone\n\n\nDevices have been used to aid computation for thousands of years, mostly
  using one-to-one correspondence with fingers. The earliest counting device was probably
  a form of tally stick. Later record keeping aids throughout the Fertile Crescent
  included calculi (clay spheres, cones, etc.) which represented counts of items,
  probably livestock or grains, sealed in hollow unbaked clay containers.[4][5] The
  use of counting rods is one example.\n\n\n\n\nSuanpan (the number represented on
  this abacus is 6,302,715,408)\n\n\nThe abacus was initially used for arithmetic
  tasks. The Roman abacus was used in Babylonia as early as 2400 BC. Since then, many
  other forms of reckoning boards or tables have been invented. In a medieval European
  counting house, a checkered cloth would be placed on a table, and markers moved
  around on it according to certain rules, as an aid to calculating sums of money.\n\n\n\n\nThe
  ancient Greek-designed Antikythera mechanism, dating between 150 to 100 BC, is the
  world's oldest analog computer.\n\n\nThe Antikythera mechanism is believed to be
  the earliest mechanical analog \"computer\", according to Derek J. de Solla Price.[6]
  It was designed to calculate astronomical positions. It was discovered in 1901 in
  the Antikythera wreck off the Greek island of Antikythera, between Kythera and Crete,
  and has been dated to circa 100 BC. Devices of a level of complexity comparable
  to that of the Antikythera mechanism would not reappear until a thousand years later.\nMany
  mechanical aids to calculation and measurement were constructed for astronomical
  and navigation use. The planisphere was a star chart invented by Abū Rayhān al-Bīrūnī
  in the early 11th century.[7] The astrolabe was invented in the Hellenistic world
  in either the 1st or 2nd centuries BC and is often attributed to Hipparchus. A combination
  of the planisphere and dioptra, the astrolabe was effectively an analog computer
  capable of working out several different kinds of problems in spherical astronomy.
  An astrolabe incorporating a mechanical calendar computer[8][9] and gear-wheels
  was invented by Abi Bakr of Isfahan, Persia in 1235.[10]Abū Rayhān al-Bīrūnī invented
  the first mechanical geared lunisolar calendar astrolabe,[11] an early fixed-wired
  knowledge processing machine[12] with a gear train and gear-wheels,[13]circa 1000
  AD.\nThe sector, a calculating instrument used for solving problems in proportion,
  trigonometry, multiplication and division, and for various functions, such as squares
  and cube roots, was developed in the late 16th century and found application in
  gunnery, surveying and navigation.\nThe planimeter was a manual instrument to calculate
  the area of a closed figure by tracing over it with a mechanical linkage.\n\n\n\n\nA
  slide rule\n\n\nThe slide rule was invented around 1620–1630, shortly after the
  publication of the concept of the logarithm. It is a hand-operated analog computer
  for doing multiplication and division. As slide rule development progressed, added
  scales provided reciprocals, squares and square roots, cubes and cube roots, as
  well as transcendental functions such as logarithms and exponentials, circular and
  hyperbolic trigonometry and other functions. Aviation is one of the few fields where
  slide rules are still in widespread use, particularly for solving time–distance
  problems in light aircraft. To save space and for ease of reading, these are typically
  circular devices rather than the classic linear slide rule shape. A popular example
  is the E6B.\nIn the 1770s Pierre Jaquet-Droz, a Swiss watchmaker, built a mechanical
  doll (automata) that could write holding a quill pen. By switching the number and
  order of its internal wheels different letters, and hence different messages, could
  be produced. In effect, it could be mechanically \"programmed\" to read instructions.
  Along with two other complex machines, the doll is at the Musée d'Art et d'Histoire
  of Neuchâtel, Switzerland, and still operates.[14]\nThe tide-predicting machine
  invented by Sir William Thomson in 1872 was of great utility to navigation in shallow
  waters. It used a system of pulleys and wires to automatically calculate predicted
  tide levels for a set period at a particular location.\nThe differential analyser,
  a mechanical analog computer designed to solve differential equations by integration,
  used wheel-and-disc mechanisms to perform the integration. In 1876 Lord Kelvin had
  already discussed the possible construction of such calculators, but he had been
  stymied by the limited output torque of the ball-and-disk integrators.[15] In a
  differential analyzer, the output of one integrator drove the input of the next
  integrator, or a graphing output. The torque amplifier was the advance that allowed
  these machines to work. Starting in the 1920s, Vannevar Bush and others developed
  mechanical differential analyzers.\nFirst general-purpose computing device\n\n\n\n\nA
  portion of Babbage's Difference engine.\n\n\nCharles Babbage, an English mechanical
  engineer and polymath, originated the concept of a programmable computer. Considered
  the \"father of the computer\",[16] he conceptualized and invented the first mechanical
  computer in the early 19th century. After working on his revolutionary difference
  engine, designed to aid in navigational calculations, in 1833 he realized that a
  much more general design, an Analytical Engine, was possible. The input of programs
  and data was to be provided to the machine via punched cards, a method being used
  at the time to direct mechanical looms such as the Jacquard loom. For output, the
  machine would have a printer, a curve plotter and a bell. The machine would also
  be able to punch numbers onto cards to be read in later. The Engine incorporated
  an arithmetic logic unit, control flow in the form of conditional branching and
  loops, and integrated memory, making it the first design for a general-purpose computer
  that could be described in modern terms as Turing-complete.[17][18]\nThe machine
  was about a century ahead of its time. All the parts for his machine had to be made
  by hand — this was a major problem for a device with thousands of parts. Eventually,
  the project was dissolved with the decision of the British Government to cease funding.
  Babbage's failure to complete the analytical engine can be chiefly attributed to
  difficulties not only of politics and financing, but also to his desire to develop
  an increasingly sophisticated computer and to move ahead faster than anyone else
  could follow. Nevertheless, his son, Henry Babbage, completed a simplified version
  of the analytical engine's computing unit (the mill) in 1888. He gave a successful
  demonstration of its use in computing tables in 1906.\nLater analog computers\n\n\n\n\nSir
  William Thomson's third tide-predicting machine design, 1879–81\n\n\nDuring the
  first half of the 20th century, many scientific computing needs were met by increasingly
  sophisticated analog computers, which used a direct mechanical or electrical model
  of the problem as a basis for computation. However, these were not programmable
  and generally lacked the versatility and accuracy of modern digital computers.[19]\nThe
  first modern analog computer was a tide-predicting machine, invented by Sir William
  Thomson in 1872. The differential analyser, a mechanical analog computer designed
  to solve differential equations by integration using wheel-and-disc mechanisms,
  was conceptualized in 1876 by James Thomson, the brother of the more famous Lord
  Kelvin.[15]\nThe art of mechanical analog computing reached its zenith with the
  differential analyzer, built by H. L. Hazen and Vannevar Bush at MIT starting in
  1927. This built on the mechanical integrators of James Thomson and the torque amplifiers
  invented by H. W. Nieman. A dozen of these devices were built before their obsolescence
  became obvious.\nBy the 1950s the success of digital electronic computers had spelled
  the end for most analog computing machines, but analog computers remain in use in
  some specialized applications such as education (control systems) and aircraft (slide
  rule).\nDigital computer development\nThe principle of the modern computer was first
  described by mathematician and pioneering computer scientist Alan Turing, who set
  out the idea in his seminal 1936 paper,[20]On Computable Numbers. Turing reformulated
  Kurt Gödel's 1931 results on the limits of proof and computation, replacing Gödel's
  universal arithmetic-based formal language with the formal and simple hypothetical
  devices that became known as Turing machines. He proved that some such machine would
  be capable of performing any conceivable mathematical computation if it were representable
  as an algorithm. He went on to prove that there was no solution to the Entscheidungsproblem
  by first showing that the halting problem for Turing machines is undecidable: in
  general, it is not possible to decide algorithmically whether a given Turing machine
  will ever halt.\nHe also introduced the notion of a 'Universal Machine' (now known
  as a Universal Turing machine), with the idea that such a machine could perform
  the tasks of any other machine, or in other words, it is provably capable of computing
  anything that is computable by executing a program stored on tape, allowing the
  machine to be programmable. Von Neumann acknowledged that the central concept of
  the modern computer was due to this paper.[21] Turing machines are to this day a
  central object of study in theory of computation. Except for the limitations imposed
  by their finite memory stores, modern computers are said to be Turing-complete,
  which is to say, they have algorithm execution capability equivalent to a universal
  Turing machine.\nElectromechanical\nBy 1938 the United States Navy had developed
  an electromechanical analog computer small enough to use aboard a submarine. This
  was the Torpedo Data Computer, which used trigonometry to solve the problem of firing
  a torpedo at a moving target. During World War II similar devices were developed
  in other countries as well.\n\n\n\n\nReplica of Zuse's Z3, the first fully automatic,
  digital (electromechanical) computer.\n\n\nEarly digital computers were electromechanical;
  electric switches drove mechanical relays to perform the calculation. These devices
  had a low operating speed and were eventually superseded by much faster all-electric
  computers, originally using vacuum tubes. The Z2, created by German engineer Konrad
  Zuse in 1939, was one of the earliest examples of an electromechanical relay computer.[22]\nIn
  1941, Zuse followed his earlier machine up with the Z3, the world's first working
  electromechanical programmable, fully automatic digital computer.[23][24] The Z3
  was built with 2000 relays, implementing a 22 bit word length that operated at a
  clock frequency of about 5–10 Hz.[25] Program code was supplied on punched film
  while data could be stored in 64 words of memory or supplied from the keyboard.
  It was quite similar to modern machines in some respects, pioneering numerous advances
  such as floating point numbers. Replacement of the hard-to-implement decimal system
  (used in Charles Babbage's earlier design) by the simpler binary system meant that
  Zuse's machines were easier to build and potentially more reliable, given the technologies
  available at that time.[26] The Z3 was Turing complete.[27][28]\nVacuum tubes and
  digital electronic circuits\nPurely electronic circuit elements soon replaced their
  mechanical and electromechanical equivalents, at the same time that digital calculation
  replaced analog. The engineer Tommy Flowers, working at the Post Office Research
  Station in London in the 1930s, began to explore the possible use of electronics
  for the telephone exchange. Experimental equipment that he built in 1934 went into
  operation 5 years later, converting a portion of the telephone exchange network
  into an electronic data processing system, using thousands of vacuum tubes.[19]
  In the US, John Vincent Atanasoff and Clifford E. Berry of Iowa State University
  developed and tested the Atanasoff–Berry Computer (ABC) in 1942,[29] the first \"automatic
  electronic digital computer\".[30] This design was also all-electronic and used
  about 300 vacuum tubes, with capacitors fixed in a mechanically rotating drum for
  memory.[31]\n\n\n\n\nColossus was the first electronic digital programmable computing
  device, and was used to break German ciphers during World War II.\n\n\nDuring World
  War II, the British at Bletchley Park achieved a number of successes at breaking
  encrypted German military communications. The German encryption machine, Enigma,
  was first attacked with the help of the electro-mechanical bombes. To crack the
  more sophisticated German Lorenz SZ 40/42 machine, used for high-level Army communications,
  Max Newman and his colleagues commissioned Flowers to build the Colossus.[31] He
  spent eleven months from early February 1943 designing and building the first Colossus.[32]
  After a functional test in December 1943, Colossus was shipped to Bletchley Park,
  where it was delivered on 18 January 1944[33] and attacked its first message on
  5 February.[31]\nColossus was the world's first electronic digital programmable
  computer.[19] It used a large number of valves (vacuum tubes). It had paper-tape
  input and was capable of being configured to perform a variety of boolean logical
  operations on its data, but it was not Turing-complete. Nine Mk II Colossi were
  built (The Mk I was converted to a Mk II making ten machines in total). Colossus
  Mark I contained 1500 thermionic valves (tubes), but Mark II with 2400 valves, was
  both 5 times faster and simpler to operate than Mark 1, greatly speeding the decoding
  process.[34][35]\n\n\n\n\nENIAC was the first Turing-complete device, and performed
  ballistics trajectory calculations for the United States Army.\n\n\nThe US-built
  ENIAC[36] (Electronic Numerical Integrator and Computer) was the first electronic
  programmable computer built in the US. Although the ENIAC was similar to the Colossus
  it was much faster and more flexible. It was unambiguously a Turing-complete device
  and could compute any problem that would fit into its memory. Like the Colossus,
  a \"program\" on the ENIAC was defined by the states of its patch cables and switches,
  a far cry from the stored program electronic machines that came later. Once a program
  was written, it had to be mechanically set into the machine with manual resetting
  of plugs and switches.\nIt combined the high speed of electronics with the ability
  to be programmed for many complex problems. It could add or subtract 5000 times
  a second, a thousand times faster than any other machine. It also had modules to
  multiply, divide, and square root. High speed memory was limited to 20 words (about
  80 bytes). Built under the direction of John Mauchly and J. Presper Eckert at the
  University of Pennsylvania, ENIAC's development and construction lasted from 1943
  to full operation at the end of 1945. The machine was huge, weighing 30 tons, using
  200 kilowatts of electric power and contained over 18,000 vacuum tubes, 1,500 relays,
  and hundreds of thousands of resistors, capacitors, and inductors.[37]\nStored programs\n\n\n\n\nA
  section of the Manchester Small-Scale Experimental Machine, the first stored-program
  computer.\n\n\nEarly computing machines had fixed programs. Changing its function
  required the re-wiring and re-structuring of the machine.[31] With the proposal
  of the stored-program computer this changed. A stored-program computer includes
  by design an instruction set and can store in memory a set of instructions (a program)
  that details the computation. The theoretical basis for the stored-program computer
  was laid by Alan Turing in his 1936 paper. In 1945 Turing joined the National Physical
  Laboratory and began work on developing an electronic stored-program digital computer.
  His 1945 report ‘Proposed Electronic Calculator’ was the first specification for
  such a device. John von Neumann at the University of Pennsylvania, also circulated
  his First Draft of a Report on the EDVAC in 1945.[19]\n\n\n\n\nFerranti Mark 1,
  c. 1951.\n\n\nThe Manchester Small-Scale Experimental Machine, nicknamed Baby, was
  the world's first stored-program computer. It was built at the Victoria University
  of Manchester by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its
  first program on 21 June 1948.[38] It was designed as a testbed for the Williams
  tube the first random-access digital storage device.[39] Although the computer was
  considered \"small and primitive\" by the standards of its time, it was the first
  working machine to contain all of the elements essential to a modern electronic
  computer.[40] As soon as the SSEM had demonstrated the feasibility of its design,
  a project was initiated at the university to develop it into a more usable computer,
  the Manchester Mark 1.\nThe Mark 1 in turn quickly became the prototype for the
  Ferranti Mark 1, the world's first commercially available general-purpose computer.[41]
  Built by Ferranti, it was delivered to the University of Manchester in February
  1951. At least seven of these later machines were delivered between 1953 and 1957,
  one of them to Shell labs in Amsterdam.[42] In October 1947, the directors of British
  catering company J. Lyons & Company decided to take an active role in promoting
  the commercial development of computers. The LEO I computer became operational in
  April 1951 [43] and ran the world's first regular routine office computer job.\nTransistors\n\n\n\n\nA
  bipolar junction transistor\n\n\nThe bipolar transistor was invented in 1947. From
  1955 onwards transistors replaced vacuum tubes in computer designs, giving rise
  to the \"second generation\" of computers. Compared to vacuum tubes, transistors
  have many advantages: they are smaller, and require less power than vacuum tubes,
  so give off less heat. Silicon junction transistors were much more reliable than
  vacuum tubes and had longer, indefinite, service life. Transistorized computers
  could contain tens of thousands of binary logic circuits in a relatively compact
  space.\nAt the University of Manchester, a team under the leadership of Tom Kilburn
  designed and built a machine using the newly developed transistors instead of valves.[44]
  Their first transistorised computer and the first in the world, was operational
  by 1953, and a second version was completed there in April 1955. However, the machine
  did make use of valves to generate its 125 kHz clock waveforms and in the circuitry
  to read and write on its magnetic drum memory, so it was not the first completely
  transistorized computer. That distinction goes to the Harwell CADET of 1955,[45]
  built by the electronics division of the Atomic Energy Research Establishment at
  Harwell.[46][47]\nIntegrated circuits\nThe next great advance in computing power
  came with the advent of the integrated circuit. The idea of the integrated circuit
  was first conceived by a radar scientist working for the Royal Radar Establishment
  of the Ministry of Defence, Geoffrey W.A. Dummer. Dummer presented the first public
  description of an integrated circuit at the Symposium on Progress in Quality Electronic
  Components in Washington, D.C. on 7 May 1952.[48]\nThe first practical ICs were
  invented by Jack Kilby at Texas Instruments and Robert Noyce at Fairchild Semiconductor.[49]
  Kilby recorded his initial ideas concerning the integrated circuit in July 1958,
  successfully demonstrating the first working integrated example on 12 September
  1958.[50] In his patent application of 6 February 1959, Kilby described his new
  device as \"a body of semiconductor material ... wherein all the components of the
  electronic circuit are completely integrated\".[51][52] Noyce also came up with
  his own idea of an integrated circuit half a year later than Kilby.[53] His chip
  solved many practical problems that Kilby's had not. Produced at Fairchild Semiconductor,
  it was made of silicon, whereas Kilby's chip was made of germanium.\nThis new development
  heralded an explosion in the commercial and personal use of computers and led to
  the invention of the microprocessor. While the subject of exactly which device was
  the first microprocessor is contentious, partly due to lack of agreement on the
  exact definition of the term \"microprocessor\", it is largely undisputed that the
  first single-chip microprocessor was the Intel 4004,[54] designed and realized by
  Ted Hoff, Federico Faggin, and Stanley Mazor at Intel.[55]\nMobile computers become
  dominant\nWith the continued miniaturization of computing resources, and advancements
  in portable battery life, portable computers grew in popularity in the 2000s.[56]
  The same developments that spurred the growth of laptop computers and other portable
  computers allowed manufacturers to integrate computing resources into cellular phones.
  These so-called smartphones and tablets run on a variety of operating systems and
  have become the dominant computing device on the market, with manufacturers reporting
  having shipped an estimated 237 million devices in 2Q 2013.[57]\nPrograms\nThe defining
  feature of modern computers which distinguishes them from all other machines is
  that they can be programmed. That is to say that some type of instructions (the
  program) can be given to the computer, and it will process them. Modern computers
  based on the von Neumann architecture often have machine code in the form of an
  imperative programming language.\nIn practical terms, a computer program may be
  just a few instructions or extend to many millions of instructions, as do the programs
  for word processors and web browsers for example. A typical modern computer can
  execute billions of instructions per second (gigaflops) and rarely makes a mistake
  over many years of operation. Large computer programs consisting of several million
  instructions may take teams of programmers years to write, and due to the complexity
  of the task almost certainly contain errors.\nStored program architecture\nMain
  articles: Computer program and Computer programming\n\n\n\n\nReplica of the Small-Scale
  Experimental Machine (SSEM), the world's first stored-program computer, at the Museum
  of Science and Industry in Manchester, England\n\n\nThis section applies to most
  common RAM machine-based computers.\nIn most cases, computer instructions are simple:
  add one number to another, move some data from one location to another, send a message
  to some external device, etc. These instructions are read from the computer's memory
  and are generally carried out (executed) in the order they were given. However,
  there are usually specialized instructions to tell the computer to jump ahead or
  backwards to some other place in the program and to carry on executing from there.
  These are called \"jump\" instructions (or branches). Furthermore, jump instructions
  may be made to happen conditionally so that different sequences of instructions
  may be used depending on the result of some previous calculation or some external
  event. Many computers directly support subroutines by providing a type of jump that
  \"remembers\" the location it jumped from and another instruction to return to the
  instruction following that jump instruction.\nProgram execution might be likened
  to reading a book. While a person will normally read each word and line in sequence,
  they may at times jump back to an earlier place in the text or skip sections that
  are not of interest. Similarly, a computer may sometimes go back and repeat the
  instructions in some section of the program over and over again until some internal
  condition is met. This is called the flow of control within the program and it is
  what allows the computer to perform tasks repeatedly without human intervention.\nComparatively,
  a person using a pocket calculator can perform a basic arithmetic operation such
  as adding two numbers with just a few button presses. But to add together all of
  the numbers from 1 to 1,000 would take thousands of button presses and a lot of
  time, with a near certainty of making a mistake. On the other hand, a computer may
  be programmed to do this with just a few simple instructions. The following example
  is written in the MIPS assembly language:\n\n\n\n  begin:\n  addi $8, $0, 0           #
  initialize sum to 0\n  addi $9, $0, 1           # set first number to add = 1\n
  \ loop:\n  slti $10, $9, 1000       # check if the number is less than 1000\n  beq
  $10, $0, finish      # if odd number is greater than n then exit\n  add $8, $8,
  $9           # update sum\n  addi $9, $9, 1           # get next number\n  j loop
  \                  # repeat the summing process\n  finish:\n  add $2, $8, $0           #
  put sum in output register\n\nOnce told to run this program, the computer will perform
  the repetitive addition task without further human intervention. It will almost
  never make a mistake and a modern PC can complete the task in a fraction of a second.\nMachine
  code\nIn most computers, individual instructions are stored as machine code with
  each instruction being given a unique number (its operation code or opcode for short).
  The command to add two numbers together would have one opcode; the command to multiply
  them would have a different opcode, and so on. The simplest computers are able to
  perform any of a handful of different instructions; the more complex computers have
  several hundred to choose from, each with a unique numerical code. Since the computer's
  memory is able to store numbers, it can also store the instruction codes. This leads
  to the important fact that entire programs (which are just lists of these instructions)
  can be represented as lists of numbers and can themselves be manipulated inside
  the computer in the same way as numeric data. The fundamental concept of storing
  programs in the computer's memory alongside the data they operate on is the crux
  of the von Neumann, or stored program[citation needed], architecture. In some cases,
  a computer might store some or all of its program in memory that is kept separate
  from the data it operates on. This is called the Harvard architecture after the
  Harvard Mark I computer. Modern von Neumann computers display some traits of the
  Harvard architecture in their designs, such as in CPU caches.\nWhile it is possible
  to write computer programs as long lists of numbers (machine language) and while
  this technique was used with many early computers,[58] it is extremely tedious and
  potentially error-prone to do so in practice, especially for complicated programs.
  Instead, each basic instruction can be given a short name that is indicative of
  its function and easy to remember – a mnemonic such as ADD, SUB, MULT or JUMP. These
  mnemonics are collectively known as a computer's assembly language. Converting programs
  written in assembly language into something the computer can actually understand
  (machine language) is usually done by a computer program called an assembler.\n\n\n\n\nA
  1970s punched card containing one line from a FORTRAN program. The card reads: \"Z(1)
  = Y + W(1)\" and is labeled \"PROJ039\" for identification purposes.\n\n\nProgramming
  language\nMain article: Programming language\nProgramming languages provide various
  ways of specifying programs for computers to run. Unlike natural languages, programming
  languages are designed to permit no ambiguity and to be concise. They are purely
  written languages and are often difficult to read aloud. They are generally either
  translated into machine code by a compiler or an assembler before being run, or
  translated directly at run time by an interpreter. Sometimes programs are executed
  by a hybrid method of the two techniques.\nLow-level languages\nMain article: Low-level
  programming language\nMachine languages and the assembly languages that represent
  them (collectively termed low-level programming languages) tend to be unique to
  a particular type of computer. For instance, an ARM architecture computer (such
  as may be found in a PDA or a hand-held videogame) cannot understand the machine
  language of an Intel Pentium or the AMD Athlon 64 computer that might be in a PC.[59]\nHigh-level
  languages/Third Generation Language\nMain article: High-level programming language\nThough
  considerably easier than in machine language, writing long programs in assembly
  language is often difficult and is also error prone. Therefore, most practical programs
  are written in more abstract high-level programming languages that are able to express
  the needs of the programmer more conveniently (and thereby help reduce programmer
  error). High level languages are usually \"compiled\" into machine language (or
  sometimes into assembly language and then into machine language) using another computer
  program called a compiler.[60] High level languages are less related to the workings
  of the target computer than assembly language, and more related to the language
  and structure of the problem(s) to be solved by the final program. It is therefore
  often possible to use different compilers to translate the same high level language
  program into the machine language of many different types of computer. This is part
  of the means by which software like video games may be made available for different
  computer architectures such as personal computers and various video game consoles.\nFourth
  Generation Languages\nThese 4G languages are less procedural than 3G languages.
  The benefit of 4GL is that it provides ways to obtain information without requiring
  the direct help of a programmer. Example of 4GL is SQL.\nProgram design\n\n\n\nThis
  section does not cite any references (sources). Please help improve this section
  by adding citations to reliable sources. Unsourced material may be challenged and
  removed. (July 2012)\nProgram design of small programs is relatively simple and
  involves the analysis of the problem, collection of inputs, using the programming
  constructs within languages, devising or using established procedures and algorithms,
  providing data for output devices and solutions to the problem as applicable. As
  problems become larger and more complex, features such as subprograms, modules,
  formal documentation, and new paradigms such as object-oriented programming are
  encountered. Large programs involving thousands of line of code and more require
  formal software methodologies. The task of developing large software systems presents
  a significant intellectual challenge. Producing software with an acceptably high
  reliability within a predictable schedule and budget has historically been difficult;
  the academic and professional discipline of software engineering concentrates specifically
  on this challenge.\nBugs\nMain article: Software bug\n\n\n\n\nThe actual first computer
  bug, a moth found trapped on a relay of the Harvard Mark II computer\n\n\nErrors
  in computer programs are called \"bugs\". They may be benign and not affect the
  usefulness of the program, or have only subtle effects. But in some cases, they
  may cause the program or the entire system to \"hang\", becoming unresponsive to
  input such as mouse clicks or keystrokes, to completely fail, or to crash. Otherwise
  benign bugs may sometimes be harnessed for malicious intent by an unscrupulous user
  writing an exploit, code designed to take advantage of a bug and disrupt a computer's
  proper execution. Bugs are usually not the fault of the computer. Since computers
  merely execute the instructions they are given, bugs are nearly always the result
  of programmer error or an oversight made in the program's design.[61]\nAdmiral Grace
  Hopper, an American computer scientist and developer of the first compiler, is credited
  for having first used the term \"bugs\" in computing after a dead moth was found
  shorting a relay in the Harvard Mark II computer in September 1947.[62]\nComponents\nMain
  articles: Central processing unit and Microprocessor\n\n\nPlay media\n\n\nVideo
  demonstrating the standard components of a \"slimline\" computer\n\n\nA general
  purpose computer has four main components: the arithmetic logic unit (ALU), the
  control unit, the memory, and the input and output devices (collectively termed
  I/O). These parts are interconnected by buses, often made of groups of wires.\nInside
  each of these parts are thousands to trillions of small electrical circuits which
  can be turned off or on by means of an electronic switch. Each circuit represents
  a bit (binary digit) of information so that when the circuit is on it represents
  a \"1\", and when off it represents a \"0\" (in positive logic representation).
  The circuits are arranged in logic gates so that one or more of the circuits may
  control the state of one or more of the other circuits.\nControl unit\nMain articles:
  CPU design and Control unit\n\n\n\n\nDiagram showing how a particular MIPS architecture
  instruction would be decoded by the control system\n\n\nThe control unit (often
  called a control system or central controller) manages the computer's various components;
  it reads and interprets (decodes) the program instructions, transforming them into
  control signals that activate other parts of the computer.[63] Control systems in
  advanced computers may change the order of execution of some instructions to improve
  performance.\nA key component common to all CPUs is the program counter, a special
  memory cell (a register) that keeps track of which location in memory the next instruction
  is to be read from.[64]\nThe control system's function is as follows—note that this
  is a simplified description, and some of these steps may be performed concurrently
  or in a different order depending on the type of CPU:\nRead the code for the next
  instruction from the cell indicated by the program counter.\nDecode the numerical
  code for the instruction into a set of commands or signals for each of the other
  systems.\nIncrement the program counter so it points to the next instruction.\nRead
  whatever data the instruction requires from cells in memory (or perhaps from an
  input device). The location of this required data is typically stored within the
  instruction code.\nProvide the necessary data to an ALU or register.\nIf the instruction
  requires an ALU or specialized hardware to complete, instruct the hardware to perform
  the requested operation.\nWrite the result from the ALU back to a memory location
  or to a register or perhaps an output device.\nJump back to step (1).\nSince the
  program counter is (conceptually) just another set of memory cells, it can be changed
  by calculations done in the ALU. Adding 100 to the program counter would cause the
  next instruction to be read from a place 100 locations further down the program.
  Instructions that modify the program counter are often known as \"jumps\" and allow
  for loops (instructions that are repeated by the computer) and often conditional
  instruction execution (both examples of control flow).\nThe sequence of operations
  that the control unit goes through to process an instruction is in itself like a
  short computer program, and indeed, in some more complex CPU designs, there is another
  yet smaller computer called a microsequencer, which runs a microcode program that
  causes all of these events to happen.\nCentral Processing unit (CPU)\nThe control
  unit, ALU, and registers are collectively known as a central processing unit (CPU).
  Early CPUs were composed of many separate components but since the mid-1970s CPUs
  have typically been constructed on a single integrated circuit called a microprocessor.\nArithmetic
  logic unit (ALU)\nMain article: Arithmetic logic unit\nThe ALU is capable of performing
  two classes of operations: arithmetic and logic.[65]\nThe set of arithmetic operations
  that a particular ALU supports may be limited to addition and subtraction, or might
  include multiplication, division, trigonometry functions such as sine, cosine, etc.,
  and square roots. Some can only operate on whole numbers (integers) whilst others
  use floating point to represent real numbers, albeit with limited precision. However,
  any computer that is capable of performing just the simplest operations can be programmed
  to break down the more complex operations into simple steps that it can perform.
  Therefore, any computer can be programmed to perform any arithmetic operation—although
  it will take more time to do so if its ALU does not directly support the operation.
  An ALU may also compare numbers and return boolean truth values (true or false)
  depending on whether one is equal to, greater than or less than the other (\"is
  64 greater than 65?\").\nLogic operations involve Boolean logic: AND, OR, XOR, and
  NOT. These can be useful for creating complicated conditional statements and processing
  boolean logic.\nSuperscalar computers may contain multiple ALUs, allowing them to
  process several instructions simultaneously.[66]Graphics processors and computers
  with SIMD and MIMD features often contain ALUs that can perform arithmetic on vectors
  and matrices.\nMemory\nMain article: Computer data storage\n\n\n\n\nMagnetic core
  memory was the computer memory of choice throughout the 1960s, until it was replaced
  by semiconductor memory.\n\n\nA computer's memory can be viewed as a list of cells
  into which numbers can be placed or read. Each cell has a numbered \"address\" and
  can store a single number. The computer can be instructed to \"put the number 123
  into the cell numbered 1357\" or to \"add the number that is in cell 1357 to the
  number that is in cell 2468 and put the answer into cell 1595.\" The information
  stored in memory may represent practically anything. Letters, numbers, even computer
  instructions can be placed into memory with equal ease. Since the CPU does not differentiate
  between different types of information, it is the software's responsibility to give
  significance to what the memory sees as nothing but a series of numbers.\nIn almost
  all modern computers, each memory cell is set up to store binary numbers in groups
  of eight bits (called a byte). Each byte is able to represent 256 different numbers
  (2^8 = 256); either from 0 to 255 or −128 to +127. To store larger numbers, several
  consecutive bytes may be used (typically, two, four or eight). When negative numbers
  are required, they are usually stored in two's complement notation. Other arrangements
  are possible, but are usually not seen outside of specialized applications or historical
  contexts. A computer can store any kind of information in memory if it can be represented
  numerically. Modern computers have billions or even trillions of bytes of memory.\nThe
  CPU contains a special set of memory cells called registers that can be read and
  written to much more rapidly than the main memory area. There are typically between
  two and one hundred registers depending on the type of CPU. Registers are used for
  the most frequently needed data items to avoid having to access main memory every
  time data is needed. As data is constantly being worked on, reducing the need to
  access main memory (which is often slow compared to the ALU and control units) greatly
  increases the computer's speed.\nComputer main memory comes in two principal varieties:\nrandom-access
  memory or RAM\nread-only memory or ROM\nRAM can be read and written to anytime the
  CPU commands it, but ROM is preloaded with data and software that never changes,
  therefore the CPU can only read from it. ROM is typically used to store the computer's
  initial start-up instructions. In general, the contents of RAM are erased when the
  power to the computer is turned off, but ROM retains its data indefinitely. In a
  PC, the ROM contains a specialized program called the BIOS that orchestrates loading
  the computer's operating system from the hard disk drive into RAM whenever the computer
  is turned on or reset. In embedded computers, which frequently do not have disk
  drives, all of the required software may be stored in ROM. Software stored in ROM
  is often called firmware, because it is notionally more like hardware than software.
  Flash memory blurs the distinction between ROM and RAM, as it retains its data when
  turned off but is also rewritable. It is typically much slower than conventional
  ROM and RAM however, so its use is restricted to applications where high speed is
  unnecessary.[67]\nIn more sophisticated computers there may be one or more RAM cache
  memories, which are slower than registers but faster than main memory. Generally
  computers with this sort of cache are designed to move frequently needed data into
  the cache automatically, often without the need for any intervention on the programmer's
  part.\nInput/output (I/O)\nMain article: Input/output\n\n\n\n\nHard disk drives
  are common storage devices used with computers.\n\n\nI/O is the means by which a
  computer exchanges information with the outside world.[68] Devices that provide
  input or output to the computer are called peripherals.[69] On a typical personal
  computer, peripherals include input devices like the keyboard and mouse, and output
  devices such as the display and printer. Hard disk drives, floppy disk drives and
  optical disc drives serve as both input and output devices. Computer networking
  is another form of I/O.\nI/O devices are often complex computers in their own right,
  with their own CPU and memory. A graphics processing unit might contain fifty or
  more tiny computers that perform the calculations necessary to display 3D graphics.[citation
  needed] Modern desktop computers contain many smaller computers that assist the
  main CPU in performing I/O.\nMultitasking\nMain article: Computer multitasking\nWhile
  a computer may be viewed as running one gigantic program stored in its main memory,
  in some systems it is necessary to give the appearance of running several programs
  simultaneously. This is achieved by multitasking i.e. having the computer switch
  rapidly between running each program in turn.[70]\nOne means by which this is done
  is with a special signal called an interrupt, which can periodically cause the computer
  to stop executing instructions where it was and do something else instead. By remembering
  where it was executing prior to the interrupt, the computer can return to that task
  later. If several programs are running \"at the same time\". then the interrupt
  generator might be causing several hundred interrupts per second, causing a program
  switch each time. Since modern computers typically execute instructions several
  orders of magnitude faster than human perception, it may appear that many programs
  are running at the same time even though only one is ever executing in any given
  instant. This method of multitasking is sometimes termed \"time-sharing\" since
  each program is allocated a \"slice\" of time in turn.[71]\nBefore the era of cheap
  computers, the principal use for multitasking was to allow many people to share
  the same computer.\nSeemingly, multitasking would cause a computer that is switching
  between several programs to run more slowly, in direct proportion to the number
  of programs it is running, but most programs spend much of their time waiting for
  slow input/output devices to complete their tasks. If a program is waiting for the
  user to click on the mouse or press a key on the keyboard, then it will not take
  a \"time slice\" until the event it is waiting for has occurred. This frees up time
  for other programs to execute so that many programs may be run simultaneously without
  unacceptable speed loss.\nMultiprocessing\nMain article: Multiprocessing\n\n\n\n\nCray
  designed many supercomputers that used multiprocessing heavily.\n\n\nSome computers
  are designed to distribute their work across several CPUs in a multiprocessing configuration,
  a technique once employed only in large and powerful machines such as supercomputers,
  mainframe computers and servers. Multiprocessor and multi-core (multiple CPUs on
  a single integrated circuit) personal and laptop computers are now widely available,
  and are being increasingly used in lower-end markets as a result.\nSupercomputers
  in particular often have highly unique architectures that differ significantly from
  the basic stored-program architecture and from general purpose computers.[72] They
  often feature thousands of CPUs, customized high-speed interconnects, and specialized
  computing hardware. Such designs tend to be useful only for specialized tasks due
  to the large scale of program organization required to successfully utilize most
  of the available resources at once. Supercomputers usually see usage in large-scale
  simulation, graphics rendering, and cryptography applications, as well as with other
  so-called \"embarrassingly parallel\" tasks.\nNetworking and the Internet\nMain
  articles: Computer networking and Internet\n\n\n\n\nVisualization of a portion of
  the routes on the Internet\n\n\nComputers have been used to coordinate information
  between multiple locations since the 1950s. The U.S. military's SAGE system was
  the first large-scale example of such a system, which led to a number of special-purpose
  commercial systems such as Sabre.[73]\nIn the 1970s, computer engineers at research
  institutions throughout the United States began to link their computers together
  using telecommunications technology. The effort was funded by ARPA (now DARPA),
  and the computer network that resulted was called the ARPANET.[74] The technologies
  that made the Arpanet possible spread and evolved.\nIn time, the network spread
  beyond academic and military institutions and became known as the Internet. The
  emergence of networking involved a redefinition of the nature and boundaries of
  the computer. Computer operating systems and applications were modified to include
  the ability to define and access the resources of other computers on the network,
  such as peripheral devices, stored information, and the like, as extensions of the
  resources of an individual computer. Initially these facilities were available primarily
  to people working in high-tech environments, but in the 1990s the spread of applications
  like e-mail and the World Wide Web, combined with the development of cheap, fast
  networking technologies like Ethernet and ADSL saw computer networking become almost
  ubiquitous. In fact, the number of computers that are networked is growing phenomenally.
  A very large proportion of personal computers regularly connect to the Internet
  to communicate and receive information. \"Wireless\" networking, often utilizing
  mobile phone networks, has meant networking is becoming increasingly ubiquitous
  even in mobile computing environments.\n\nComputer architecture paradigms\nThere
  are many types of computer architectures:\nQuantum computer vs. Chemical computer\nScalar
  processor vs. Vector processor\nNon-Uniform Memory Access (NUMA) computers\nRegister
  machine vs. Stack machine\nHarvard architecture vs. von Neumann architecture\nCellular
  architecture\nOf all these abstract machines, a quantum computer holds the most
  promise for revolutionizing computing.[75]\nLogic gates are a common abstraction
  which can apply to most of the above digital or analog paradigms.\nThe ability to
  store and execute lists of instructions called programs makes computers extremely
  versatile, distinguishing them from calculators. The Church–Turing thesis is a mathematical
  statement of this versatility: any computer with a minimum capability (being Turing-complete)
  is, in principle, capable of performing the same tasks that any other computer can
  perform. Therefore, any type of computer (netbook, supercomputer, cellular automaton,
  etc.) is able to perform the same computational tasks, given enough time and storage
  capacity.\nMisconceptions\nMain articles: Human computer and Harvard Computers\n\n\n\n\nWomen
  as computers in NACA High Speed Flight Station \"Computer Room\"\n\n\nA computer
  does not need to be electronic, nor even have a processor, nor RAM, nor even a hard
  disk. While popular usage of the word \"computer\" is synonymous with a personal
  electronic computer, the modern[76] definition of a computer is literally: \"A device
  that computes, especially a programmable [usually] electronic machine that performs
  high-speed mathematical or logical operations or that assembles, stores, correlates,
  or otherwise processes information.\"[77] Any device which processes information
  qualifies as a computer, especially if the processing is purposeful.[citation needed]\nUnconventional
  computing\nMain article: Unconventional computing\nHistorically, computers evolved
  from mechanical computers and eventually from vacuum tubes to transistors. However,
  conceptually computational systems as flexible as a personal computer can be built
  out of almost anything. For example, a computer can be made out of billiard balls
  (billiard ball computer); an often quoted example.[citation needed] More realistically,
  modern computers are made out of transistors made of photolithographed semiconductors.\nFuture\nThere
  is active research to make computers out of many promising new types of technology,
  such as optical computers, DNA computers, neural computers, and quantum computers.
  Most computers are universal, and are able to calculate any computable function,
  and are limited only by their memory capacity and operating speed. However different
  designs of computers can give very different performance for particular problems;
  for example quantum computers can potentially break some modern encryption algorithms
  (by quantum factoring) very quickly.\nFurther topics\nGlossary of computers\nArtificial
  intelligence\nA computer will solve problems in exactly the way it is programmed
  to, without regard to efficiency, alternative solutions, possible shortcuts, or
  possible errors in the code. Computer programs that learn and adapt are part of
  the emerging field of artificial intelligence and machine learning.\nHardware\nMain
  articles: Computer hardware and Personal computer hardware\nThe term hardware covers
  all of those parts of a computer that are tangible objects. Circuits, displays,
  power supplies, cables, keyboards, printers and mice are all hardware.\nHistory
  of computing hardware\nMain article: History of computing hardware\nFirst generation
  (mechanical/electromechanical)\nCalculators\nPascal's calculator, Arithmometer,
  Difference engine, Quevedo's analytical machines\nProgrammable devices\nJacquard
  loom, Analytical engine, IBM ASCC/Harvard Mark I, Harvard Mark II, IBM SSEC, Z1,
  Z2, Z3\nSecond generation (vacuum tubes)\nCalculators\nAtanasoff–Berry Computer,
  IBM 604, UNIVAC 60, UNIVAC 120\nProgrammable devices\nColossus, ENIAC, Manchester
  Small-Scale Experimental Machine, EDSAC, Manchester Mark 1, Ferranti Pegasus, Ferranti
  Mercury, CSIRAC, EDVAC, UNIVAC I, IBM 701, IBM 702, IBM 650, Z22\nThird generation
  (discrete transistors and SSI, MSI, LSI integrated circuits)\nMainframes\nIBM 7090,
  IBM 7080, IBM System/360, BUNCH\nMinicomputer\nLINC, PDP-8, PDP-11, IBM System/32,
  IBM System/36\nFourth generation (VLSI integrated circuits)\nMinicomputer\nVAX,
  IBM System i\n4-bit microcomputer\nIntel 4004, Intel 4040\n8-bit microcomputer\nIntel
  8008, Intel 8080, Motorola 6800, Motorola 6809, MOS Technology 6502, Zilog Z80\n16-bit
  microcomputer\nIntel 8088, Zilog Z8000, WDC 65816/65802\n32-bit microcomputer\nIntel
  80386, Pentium, Motorola 68000, ARM\n64-bit microcomputer[78]\nAlpha, MIPS, PA-RISC,
  PowerPC, SPARC, x86-64, ARMv8-A\nEmbedded computer\nIntel 8048, Intel 8051\nPersonal
  computer\nDesktop computer, Home computer, Laptop computer, Personal digital assistant
  (PDA), Portable computer, Tablet PC, Wearable computer\nTheoretical/experimental\nQuantum
  computer, Chemical computer, DNA computing, Optical computer, Spintronics based
  computer\nOther hardware topics\nPeripheral device (input/output)\nInput\nMouse,
  keyboard, joystick, image scanner, webcam, graphics tablet, microphone\nOutput\nMonitor,
  printer, loudspeaker\nBoth\nFloppy disk drive, hard disk drive, optical disc drive,
  teleprinter\nComputer buses\nShort range\nRS-232, SCSI, PCI, USB\nLong range (computer
  networking)\nEthernet, ATM, FDDI\nSoftware\nMain article: Computer software\nSoftware
  refers to parts of the computer which do not have a material form, such as programs,
  data, protocols, etc. When software is stored in hardware that cannot easily be
  modified (such as BIOS ROM in an IBM PC compatible), it is sometimes called \"firmware\".\nOperating
  system /System Software\nUnix and BSD\nUNIX System V, IBM AIX, HP-UX, Solaris (SunOS),
  IRIX, List of BSD operating systems\nGNU/Linux\nList of Linux distributions, Comparison
  of Linux distributions\nMicrosoft Windows\nWindows 95, Windows 98, Windows NT, Windows
  2000, Windows Me, Windows XP, Windows Vista, Windows 7, Windows 8, Windows 10\nDOS\n86-DOS
  (QDOS), IBM PC DOS, MS-DOS, DR-DOS, FreeDOS\nMac OS\nMac OS classic, Mac OS X\nEmbedded
  and real-time\nList of embedded operating systems\nExperimental\nAmoeba, Oberon/Bluebottle,
  Plan 9 from Bell Labs\nLibrary\nMultimedia\nDirectX, OpenGL, OpenAL, Vulkan_(API)\nProgramming
  library\nC standard library, Standard Template Library\nData\nProtocol\nTCP/IP,
  Kermit, FTP, HTTP, SMTP\nFile format\nHTML, XML, JPEG, MPEG, PNG\nUser interface\nGraphical
  user interface (WIMP)\nMicrosoft Windows, GNOME, KDE, QNX Photon, CDE, GEM, Aqua\nText-based
  user interface\nCommand-line interface, Text user interface\nApplication Software\nOffice
  suite\nWord processing, Desktop publishing, Presentation program, Database management
  system, Scheduling & Time management, Spreadsheet, Accounting software\nInternet
  Access\nBrowser, E-mail client, Web server, Mail transfer agent, Instant messaging\nDesign
  and manufacturing\nComputer-aided design, Computer-aided manufacturing, Plant management,
  Robotic manufacturing, Supply chain management\nGraphics\nRaster graphics editor,
  Vector graphics editor, 3D modeler, Animation editor, 3D computer graphics, Video
  editing, Image processing\nAudio\nDigital audio editor, Audio playback, Mixing,
  Audio synthesis, Computer music\nSoftware engineering\nCompiler, Assembler, Interpreter,
  Debugger, Text editor, Integrated development environment, Software performance
  analysis, Revision control, Software configuration management\nEducational\nEdutainment,
  Educational game, Serious game, Flight simulator\nGames\nStrategy, Arcade, Puzzle,
  Simulation, First-person shooter, Platform, Massively multiplayer, Interactive fiction\nMisc\nArtificial
  intelligence, Antivirus software, Malware scanner, Installer/Package management
  systems, File manager\nLanguages\nThere are thousands of different programming languages—some
  intended to be general purpose, others useful only for highly specialized applications.\nProgramming
  languages\nLists of programming languages\nTimeline of programming languages, List
  of programming languages by category, Generational list of programming languages,
  List of programming languages, Non-English-based programming languages\nCommonly
  used assembly languages\nARM, MIPS, x86\nCommonly used high-level programming languages\nAda,
  BASIC, C, C++, C#, COBOL, Fortran, PL/1, REXX, Java, Lisp, Pascal, Object Pascal\nCommonly
  used scripting languages\nBourne script, JavaScript, Python, Ruby, PHP, Perl\nFirmware\nFirmware
  is the technology which has the combination of both hardware and software such as
  BIOS chip inside a computer. This chip (hardware) is located on the motherboard
  and has the BIOS set up (software) stored in it.\nTypes of computers\nComputers
  are typically classified based on their uses:\nBased on uses\nAnalog computer\nDigital
  computer\nHybrid computer\nBased on sizes\nMicro computer\nPersonal computer\nMini
  Computer\nMainframe computer\nSuper computer\nInput Devices\nWhen unprocessed data
  is sent to the computer with the help of input devices, the data is processed and
  sent to output devices. The input devices may be hand-operated or automated. The
  act of processing is mainly regulated by the CPU. Some examples of hand-operated
  input devices are:\nOverlay keyboard\nTrackball\nJoystick\nDigital camera\nMicrophone\nTouchscreen\nDigital
  video\nImage scanner\nGraphics tablet\nComputer keyboard\nMouse\nOutput Devices\nThe
  means through which computer gives output are known as output devices. Some examples
  of output devices are:\nComputer monitor\nPrinter\nProjector\nSound card\nPC speaker\nVideo
  card\nProfessions and organizations\nAs the use of computers has spread throughout
  society, there are an increasing number of careers involving computers.\nComputer-related
  professions\nHardware-related\nElectrical engineering, Electronic engineering, Computer
  engineering, Telecommunications engineering, Optical engineering, Nanoengineering\nSoftware-related\nComputer
  science, Computer engineering, Desktop publishing, Human–computer interaction, Information
  technology, Information systems, Computational science, Software engineering, Video
  game industry, Web design\nThe need for computers to work well together and to be
  able to exchange information has spawned the need for many standards organizations,
  clubs and societies of both a formal and informal nature.\nOrganizations\nStandards
  groups\nANSI, IEC, IEEE, IETF, ISO, W3C\nProfessional societies\nACM, AIS, IET,
  IFIP, BCS\nFree/open source software groups\nFree Software Foundation, Mozilla Foundation,
  Apache Software Foundation\nSee also\n\n\nInformation technology portal\n\n\nComputability
  theory\nComputer insecurity\nComputer security\nList of computer term etymologies\nList
  of fictional computers\nPulse computation\nTOP500 (list of most powerful computers)\n\nNotes\n\n^
  In 1946, ENIAC required an estimated 174 kW. By comparison, a modern laptop computer
  may use around 30 W; nearly six thousand times less. \"Approximate Desktop & Notebook
  Power Usage\". University of Pennsylvania. Retrieved 20 June 2009. \n^ Early computers
  such as Colossus and ENIAC were able to process between 5 and 100 operations per
  second. A modern “commodity” microprocessor (as of 2007) can process billions of
  operations per second, and many of these operations are more complicated and useful
  than early computer operations. \"Intel Core2 Duo Mobile Processor: Features\".
  Intel Corporation. Retrieved 20 June 2009. \n^ \"computer, n.\". Oxford English
  Dictionary (2 ed.). Oxford University Press. 1989. Retrieved 10 April 2009. \n^
  According to Schmandt-Besserat 1981, these clay containers contained tokens, the
  total of which were the count of objects being transferred. The containers thus
  served as something of a bill of lading or an accounts book. In order to avoid breaking
  open the containers, first, clay impressions of the tokens were placed on the outside
  of the containers, for the count; the shapes of the impressions were abstracted
  into stylized marks; finally, the abstract marks were systematically used as numerals;
  these numerals were finally formalized as numbers. Eventually (Schmandt-Besserat
  estimates it took 4000 years[dead link]) the marks on the outside of the containers
  were all that were needed to convey the count, and the clay containers evolved into
  clay tablets with marks for the count.\n^ Robson, Eleanor (2008), Mathematics in
  Ancient Iraq, ISBN 978-0-691-09182-2 . p.5: calculi were in use in Iraq for primitive
  accounting systems as early as 3200–3000 BCE, with commodity-specific counting representation
  systems. Balanced accounting was in use by 3000–2350 BCE, and a sexagesimal number
  system was in use 2350–2000 BCE.\n^ The Antikythera Mechanism Research Project,
  The Antikythera Mechanism Research Project. Retrieved 1 July 2007.\n^ G. Wiet, V.
  Elisseeff, P. Wolff, J. Naudu (1975). History of Mankind, Vol 3: The Great medieval
  Civilisations, p. 649. George Allen & Unwin Ltd, UNESCO.\n^ Fuat Sezgin \"Catalogue
  of the Exhibition of the Institute for the History of Arabic-Islamic Science (at
  the Johann Wolfgang Goethe University\", Frankfurt, Germany) Frankfurt Book Fair
  2004, p.35 & 38.\n^ François Charette, Archaeology: High tech from Ancient Greece,
  Nature 444, 551-552(30 November 2006), doi:10.1038/444551a [1]\n^ Silvio A. Bedini,
  Francis R. Maddison (1966). \"Mechanical Universe: The Astrarium of Giovanni de'
  Dondi\", Transactions of the American Philosophical Society 56 (5), p. 1-69.\n^
  D. De S. Price (1984). \"A History of Calculating Machines\", IEEE Micro 4 (1),
  p. 22-52.\n^ Tuncer Őren (2001). \"Advances in Computer and Information Sciences:
  From Abacus to Holonic Agents\", Turk J Elec Engin 9 (1), p. 63-70 [64].\n^ Donald
  Routledge Hill (1985). \"Al-Biruni's mechanical calendar\", Annals of Science 42,
  p. 139-163.\n^ The Writer Automaton, Switzerland\n^ a b Ray Girvan, \"The revealed
  grace of the mechanism: computing after Babbage\", Scientific Computing World, May/June
  2003\n^ Halacy, Daniel Stephen (1970). Charles Babbage, Father of the Computer.
  Crowell-Collier Press. ISBN 0-02-741370-5. \n^ \"Babbage\". Online stuff. Science
  Museum. 2007-01-19. Retrieved 2012-08-01. \n^ \"Let's build Babbage's ultimate mechanical
  computer\". opinion. New Scientist. 23 December 2010. Retrieved 2012-08-01. \n^
  a b c d \"The Modern History of Computing\". Stanford Encyclopedia of Philosophy. \n^
  Proceedings of the London Mathematical Society\n^ \"von Neumann ... firmly emphasized
  to me, and to others I am sure, that the fundamental conception is owing to Turing—insofar
  as not anticipated by Babbage, Lovelace and others.\" Letter by Stanley Frankel
  to Brian Randell, 1972, quoted in Jack Copeland (2004) The Essential Turing, p22.\n^
  Zuse, Horst. \"Part 4: Konrad Zuse's Z1 and Z3 Computers\". The Life and Work of
  Konrad Zuse. EPE Online. Archived from the original on 2008-06-01. Retrieved 2008-06-17. \n^
  Zuse, Konrad (2010) [1984], The Computer – My Life Translated by McKenna, Patricia
  and Ross, J. Andrew from: Der Computer, mein Lebenswerk (1984) (in English translated
  from German), Berlin/Heidelberg: Springer-Verlag, ISBN 978-3-642-08151-4  CS1 maint:
  Unrecognized language (link)\n^ \"A Computer Pioneer Rediscovered, 50 Years On\".
  The New York Times. April 20, 1994. \n^ Zuse, Konrad (1993). Der Computer. Mein
  Lebenswerk. (in German) (3rd ed.). Berlin: Springer-Verlag. p. 55. ISBN 978-3-540-56292-4. \n^
  Crash! The Story of IT: Zuse at the Wayback Machine (archived March 18, 2008)\n^
  Rojas, R. (1998). \"How to make Zuse's Z3 a universal computer\". IEEE Annals of
  the History of Computing 20 (3): 51–54. doi:10.1109/85.707574. \n^ Rojas, Raúl.
  \"How to Make Zuse's Z3 a Universal Computer\" (PDF). \n^ January 15, 1941 notice
  in the Des Moines Register,\n^ Arthur W. Burks. The First Electronic Computer. \n^
  a b c d Copeland, Jack (2006), Colossus: The Secrets of Bletchley Park's Codebreaking
  Computers, Oxford: Oxford University Press, pp. 101–115, ISBN 0-19-284055-X \n^
  \"Bletchley's code-cracking Colossus\", BBC News, 2 February 2010, retrieved 19
  October 2012 \n^ The Colossus Rebuild http://www.tnmoc.org/colossus-rebuild-story\n^
  Randell, Brian; Fensom, Harry; Milne, Frank A. (15 March 1995), \"Obituary: Allen
  Coombs\", The Independent, retrieved 18 October 2012 \n^ Fensom, Jim (8 November
  2010), Harry Fensom obituary, retrieved 17 October 2012 \n^ John Presper Eckert
  Jr. and John W. Mauchly, Electronic Numerical Integrator and Computer, United States
  Patent Office, US Patent 3,120,606, filed 26 June 1947, issued 4 February 1964,
  and invalidated 19 October 1973 after court ruling on Honeywell v. Sperry Rand.\n^
  Generations of Computers\n^ Enticknap, Nicholas (Summer 1998), \"Computing's Golden
  Jubilee\", Resurrection (The Computer Conservation Society) (20), ISSN 0958-7403,
  retrieved 19 April 2008 \n^ \"Early computers at Manchester University\", Resurrection
  (The Computer Conservation Society) 1 (4), Summer 1992, ISSN 0958-7403, retrieved
  7 July 2010 \n^ Early Electronic Computers (1946–51), University of Manchester,
  retrieved 16 November 2008 \n^ Napper, R. B. E., Introduction to the Mark 1, The
  University of Manchester, retrieved 4 November 2008 \n^ Computer Conservation Society,
  Our Computer Heritage Pilot Study: Deliveries of Ferranti Mark I and Mark I Star
  computers., retrieved 9 January 2010 [dead link]\n^ Lavington, Simon. \"A brief
  history of British computers: the first 25 years (1948–1973).\". British Computer
  Society. Retrieved 10 January 2010. \n^ Lavington, Simon (1998), A History of Manchester
  Computers (2 ed.), Swindon: The British Computer Society, pp. 34–35 \n^ Cooke-Yarborough,
  E. H. (June 1998), \"Some early transistor applications in the UK\", Engineering
  and Science Education Journal (IEE) 7 (3): 100–106, doi:10.1049/esej:19980301, ISSN 0963-7346,
  retrieved 7 June 2009  (subscription required)\n^ Cooke-Yarborough, E.H. (1957).
  Introduction to Transistor Circuits. Edinburgh: Oliver and Boyd. p. 139. \n^ Cooke-Yarborough,
  E.H. (June 1998). \"Some early transistor applications in the UK\". Engineering
  and Science Education Journal (London, UK: IEE) 7 (3): 100–106. doi:10.1049/esej:19980301.
  ISSN 0963-7346. Retrieved 2009-06-07. \n^ \"The Hapless Tale of Geoffrey Dummer\"[dead
  link], (n.d.), (HTML), Electronic Product News, accessed 8 July 2008.\n^ Kilby,
  Jack (2000), Nobel lecture (PDF), Stockholm: Nobel Foundation, retrieved 2008-05-15 \n^
  The Chip that Jack Built, (c. 2008), (HTML), Texas Instruments, Retrieved 29 May
  2008.\n^ Jack S. Kilby, Miniaturized Electronic Circuits, United States Patent Office,
  US Patent 3,138,743, filed 6 February 1959, issued 23 June 1964.\n^ Winston, Brian
  (1998). Media Technology and Society: A History : From the Telegraph to the Internet.
  Routledge. p. 221. ISBN 978-0-415-14230-4. \n^ Robert Noyce's Unitary circuit, US
  patent 2981877, \"Semiconductor device-and-lead structure\", issued 1961-04-25,
  \ assigned to Fairchild Semiconductor Corporation \n^ Intel_4004 (November 1971),
  Intel's First Microprocessor—the Intel 4004, Intel Corp., retrieved 2008-05-17 [dead
  link]\n^ The Intel 4004 (1971) die was 12 mm2, composed of 2300 transistors; by
  comparison, the Pentium Pro was 306 mm2, composed of 5.5 million transistors, according
  to Patterson, David; Hennessy, John (1998), Computer Organization and Design, San
  Francisco: Morgan Kaufmann, pp. 27–39, ISBN 1-55860-428-6 \n^ Global notebook shipments
  finally overtake desktops | Ars Technica\n^ [2][dead link]\n^ Even some later computers
  were commonly programmed directly in machine code. Some minicomputers like the DEC
  PDP-8 could be programmed directly from a panel of switches. However, this method
  was usually used only as part of the booting process. Most modern computers boot
  entirely automatically by reading a boot program from some non-volatile memory.\n^
  However, there is sometimes some form of machine language compatibility between
  different computers. An x86-64 compatible microprocessor like the AMD Athlon 64
  is able to run most of the same programs that an Intel Core 2 microprocessor can,
  as well as programs designed for earlier microprocessors like the Intel Pentiums
  and Intel 80486. This contrasts with very early commercial computers, which were
  often one-of-a-kind and totally incompatible with other computers.\n^ High level
  languages are also often interpreted rather than compiled. Interpreted languages
  are translated into machine code on the fly, while running, by another program called
  an interpreter.\n^ It is not universally true that bugs are solely due to programmer
  oversight. Computer hardware may fail or may itself have a fundamental problem that
  produces unexpected results in certain situations. For instance, the Pentium FDIV
  bug caused some Intel microprocessors in the early 1990s to produce inaccurate results
  for certain floating point division operations. This was caused by a flaw in the
  microprocessor design and resulted in a partial recall of the affected devices.\n^
  Taylor, Alexander L., III (16 April 1984). \"The Wizard Inside the Machine\". TIME.
  Retrieved 17 February 2007.  (subscription required)\n^ The control unit's role
  in interpreting instructions has varied somewhat in the past. Although the control
  unit is solely responsible for instruction interpretation in most modern computers,
  this is not always the case. Some computers have instructions that are partially
  interpreted by the control unit with further interpretation performed by another
  device. For example, EDVAC, one of the earliest stored-program computers, used a
  central control unit that only interpreted four instructions. All of the arithmetic-related
  instructions were passed on to its arithmetic unit and further decoded there.\n^
  Instructions often occupy more than one memory address, therefore the program counter
  usually increases by the number of memory locations required to store one instruction.\n^
  David J. Eck (2000). The Most Complex Machine: A Survey of Computers and Computing.
  A K Peters, Ltd. p. 54. ISBN 978-1-56881-128-4. \n^ Erricos John Kontoghiorghes
  (2006). Handbook of Parallel Computing and Statistics. CRC Press. p. 45. ISBN 978-0-8247-4067-2. \n^
  Flash memory also may only be rewritten a limited number of times before wearing
  out, making it less useful for heavy random access usage. (Verma & Mielke 1988)\n^
  Donald Eadie (1968). Introduction to the Basic Computer. Prentice-Hall. p. 12. \n^
  Arpad Barna; Dan I. Porat (1976). Introduction to Microcomputers and the Microprocessors.
  Wiley. p. 85. ISBN 978-0-471-05051-3. \n^ Jerry Peek; Grace Todino; John Strang
  (2002). Learning the UNIX Operating System: A Concise Guide for the New User. O'Reilly.
  p. 130. ISBN 978-0-596-00261-9. \n^ Gillian M. Davis (2002). Noise Reduction in
  Speech Applications. CRC Press. p. 111. ISBN 978-0-8493-0949-6. \n^ However, it
  is also very common to construct supercomputers out of many pieces of cheap commodity
  hardware; usually individual computers connected by networks. These so-called computer
  clusters can often provide supercomputer performance at a much lower cost than customized
  designs. While custom architectures are still used for most of the most powerful
  supercomputers, there has been a proliferation of cluster computers in recent years.
  (TOP500 2006)\n^ Agatha C. Hughes (2000). Systems, Experts, and Computers. MIT Press.
  p. 161. ISBN 978-0-262-08285-3. The experience of SAGE helped make possible the
  first truly large-scale commercial real-time network: the SABRE computerized airline
  reservations system... \n^ \"A Brief History of the Internet\". Internet Society.
  Retrieved 20 September 2008. \n^ \"Computer architecture: fundamentals and principles
  of computer design\" by Joseph D. Dumas 2006. page 340.\n^ According to the Shorter
  Oxford English Dictionary (6th ed, 2007), the word computer dates back to the mid
  17th century, when it referred to “A person who makes calculations; specifically
  a person employed for this in an observatory etc.”\n^ \"Definition of computer\".
  Thefreedictionary.com. Retrieved 29 January 2012. \n^ Most major 64-bit instruction
  set architectures are extensions of earlier designs. All of the architectures listed
  in this table, except for Alpha, existed in 32-bit forms before their 64-bit incarnations
  were introduced.\n\nReferences\n\nFuegi, J. and Francis, J. \"Lovelace & Babbage
  and the creation of the 1843 'notes'\". IEEE Annals of the History of Computing
  25 No. 4 (October–December 2003): Digital Object Identifier[dead link]\na Kempf,
  Karl (1961). \"Historical Monograph: Electronic Computers Within the Ordnance Corps\".
  Aberdeen Proving Ground (United States Army). \na Phillips, Tony (2000). \"The Antikythera
  Mechanism I\". American Mathematical Society. Retrieved 5 April 2006. \na Shannon,
  Claude Elwood (1940). \"A symbolic analysis of relay and switching circuits\". Massachusetts
  Institute of Technology. \nDigital Equipment Corporation (1972). PDP-11/40 Processor
  Handbook (PDF). Maynard, MA: Digital Equipment Corporation. \nVerma, G.; Mielke,
  N. (1988). \"Reliability performance of ETOX based flash memories\". IEEE International
  Reliability Physics Symposium. \nDoron D. Swade (February 1993). \"Redeeming Charles
  Babbage's Mechanical Computer\". Scientific American: 89. \nMeuer, Hans; Strohmaier,
  Erich; Simon, Horst; Dongarra, Jack (13 November 2006). \"Architectures Share Over
  Time\". TOP500. Archived from the original on 20 February 2007. Retrieved 27 November
  2006. \nLavington, Simon (1998). A History of Manchester Computers (2 ed.). Swindon:
  The British Computer Society. ISBN 978-0-902505-01-8. \nStokes, Jon (2007). Inside
  the Machine: An Illustrated Introduction to Microprocessors and Computer Architecture.
  San Francisco: No Starch Press. ISBN 978-1-59327-104-6. \nZuse, Konrad (1993). The
  Computer - My life. Berlin: Pringler-Verlag. ISBN 0-387-56453-5. \nFelt, Dorr E.
  (1916). Mechanical arithmetic, or The history of the counting machine. Chicago:
  Washington Institute. \nIfrah, Georges (2001). The Universal History of Computing:
  From the Abacus to the Quantum Computer. New York: John Wiley & Sons. ISBN 0-471-39671-0. \nBerkeley,
  Edmund (1949). Giant Brains, or Machines That Think. John Wiley & Sons. \nCohen,
  Bernard (2000). Howard Aiken, Portrait of a computer pioneer. Cambridge, Massachusetts:
  The MIT Press. ISBN 978-0-2625317-9-5. \nLigonnière, Robert (1987). Préhistoire
  et Histoire des ordinateurs. Paris: Robert Laffont. ISBN 9-782221-052617. \nCouffignal,
  Louis (1933). Les machines à calculer ; leurs principes, leur évolution. Paris:
  Gauthier-Villars. \nEssinger, James (2004). Jacquard's Web, How a hand loom led
  to the birth of the information age. Oxford University Press. ISBN 0-19-280577-0. \nHyman,
  Anthony (1985). Charles Babbage: Pioneer of the Computer. Princeton University Press.
  ISBN 978-0-6910237-7-9. \nCohen, Bernard (2000). Howard Aiken, Portrait of a computer
  pioneer. Cambridge, Massachusetts: The MIT Press. ISBN 978-0-2625317-9-5. \nBowden,
  B. V. (1953). Faster than thought. New York, Toronto, London: Pitman publishing
  corporation. \nMoseley, Maboth (1964). Irascible Genius, Charles Babbage, inventor.
  London: Hutchinson. \nCollier, Bruce (1970). The little engine that could've: The
  calculating machines of Charles Babbage. Garland Publishing Inc. ISBN 0-8240-0043-9. \nRandell,
  Brian (1982). \"From Analytical Engine to Electronic Digital Computer: The Contributions
  of Ludgate, Torres, and Bush\" (PDF). Retrieved 29 October 2013. \n\nExternal links\nWarhol
  & The Computer\nWikiversity has a quiz on this article\n\nAuthority control\n\n\nLCCN:
  sh85029552\nGND: 4070083-5\nBNF: cb119401913 (data)\nNDL: 00561435\n\n\n\n\n\n\nv\nt\ne\n\nDigital
  electronics\n\n\nComponents\n\n\nCombinational logic\nIntegrated circuit (IC)\nLogic
  gate\nSequential logic\n\n\n\nTheory\n\n\nDigital signal (electronics)\nBoolean
  algebra\nLogic synthesis\nLogic in computer science\nComputer architecture\nDigital
  signal (signal processing)\nDigital signal processing\nCircuit minimization\n\n\n\nDesign\n\n\nLogic
  synthesis\nRegister-transfer level\nFormal equivalence checking\nSynchronous logic\nAsynchronous
  logic\nFinite-state machine\n\n\n\nApplications\n\n\nComputer hardware\nDigital
  audio\nDigital photography\nDigital video\nElectronic literature\nTelecommunication\n\n\n\nDesign
  issues\n\n\nMetastability\nRunt pulse\n\n\n\n\t\t\t\t\t\n\t\t\t\t\t\tRetrieved from
  \"https://en.wikipedia.org/w/index.php?title=Computer&oldid=695014391\"\t\t\t\t\t\n\t\t\t\tCategories:
  ComputersHidden categories: All articles with dead external linksArticles with dead
  external links from March 2015CS1 maint: Unrecognized languageCS1 German-language
  sources (de)Pages containing links to subscription-only contentWikipedia indefinitely
  semi-protected pagesWikipedia indefinitely move-protected pagesArticles which use
  infobox templates with no data rowsAll articles with unsourced statementsArticles
  with unsourced statements from May 2014Articles needing additional references from
  July 2012All articles needing additional referencesArticles with unsourced statements
  from December 2007Articles with unsourced statements from September 2015Articles
  with unsourced statements from December 2012Articles with dead external links from
  October 2013Use dmy dates from April 2012Wikipedia articles with LCCN identifiersWikipedia
  articles with GND identifiersWikipedia articles with BNF identifiersArticles containing
  video clipsArticles with example code\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\n\t\t\n\t\t\tNavigation
  menu\n\n\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tPersonal tools\n\t\t\t\t\t\tNot
  logged inTalkContributionsCreate accountLog in\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tNamespaces\n\t\t\t\t\t\tArticle\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTalk\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tVariants\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tViews\n\t\t\t\t\t\tRead\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView
  source\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tView history\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tMore\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\n\t\t\tNavigation\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tMain
  pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia
  store\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tInteraction\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tHelpAbout
  WikipediaCommunity portalRecent changesContact page\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tTools\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tWhat
  links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata
  itemCite this page\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tPrint/export\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tCreate
  a bookDownload as PDFPrintable version\t\t\t\t\t\n\t\t\n\t\t\t\n\t\t\tLanguages\n\n\t\t\t\n\t\t\t\t\t\t\t\t\tAcèhAfrikaansAlemannischአማርኛÆngliscالعربيةAragonésܐܪܡܝܐঅসমীয়াAsturianuAvañe'ẽAzərbaycancaتۆرکجهবাংলাBân-lâm-gúБашҡортсаБеларускаяБеларуская
  (тарашкевіца)‎भोजपुरीБългарскиBoarischབོད་ཡིགBosanskiBrezhonegБуряадCatalàЧӑвашлаCebuanoČeštinaCymraegDanskDeutschDiné
  bizaadEestiΕλληνικάEmiliàn e rumagnòlЭрзяньEspañolEsperantoEuskaraفارسیFiji HindiFøroysktFrançaisFryskFurlanGaeilgeGaelgGàidhligGalego贛語ગુજરાતી客家語/Hak-kâ-ngî한국어HausaՀայերենहिन्दीHrvatskiIdoIgboIlokanoবিষ্ণুপ্রিয়া
  মণিপুরীBahasa IndonesiaInterlinguaInterlingueᐃᓄᒃᑎᑐᑦ/inuktitutIñupiakIsiXhosaIsiZuluÍslenskaItalianoעבריתBasa
  Jawaಕನ್ನಡKapampanganКъарачай-малкъарქართულიकॉशुर / کٲشُرKaszëbscziҚазақшаKernowekKiswahiliКомиKongoKreyòl
  ayisyenKurdîКыргызчаLadinoЛезгиລາວLatinaLatviešuLëtzebuergeschLietuviųLimburgsLingálaLojbanLumbaartMagyarМакедонскиMalagasyമലയാളംMaltiमराठीმარგალურიمصرىمازِرونیBahasa
  MelayuMìng-dĕ̤ng-ngṳ̄MirandésМонголမြန်မာဘာသာNāhuatlNederlandsNedersaksiesनेपालीनेपाल
  भाषा日本語NapulitanoНохчийнNorfuk / PitkernNorsk bokmålNorsk nynorskOccitanОлык марийଓଡ଼ିଆOromooOʻzbekcha/ўзбекчаਪੰਜਾਬੀپنجابیپښتوភាសាខ្មែរPiemontèisPlattdüütschPolskiΠοντιακάPortuguêsQaraqalpaqshaQırımtatarcaRomânăRuna
  SimiРусиньскыйРусскийСаха тылаसंस्कृतम्SarduScotsSeelterskSesothoShqipSicilianuසිංහලSimple
  EnglishSlovenčinaSlovenščinaСловѣньскъ / ⰔⰎⰑⰂⰡⰐⰠⰔⰍⰟŚlůnskiSoomaaligaکوردیی ناوەندیСрпски
  / srpskiSrpskohrvatski / српскохрватскиBasa SundaSuomiSvenskaTagalogதமிழ்Татарча/tatarçaతెలుగుไทยТоҷикӣTsetsêhestâheseTürkçeTürkmençeᨅᨔ
  ᨕᨘᨁᨗУкраїнськаاردوئۇيغۇرچە / UyghurcheVahcuenghVènetoTiếng ViệtVõroWalon文言West-VlamsWinarayWolof吴语ייִדישYorùbá粵語ZazakiŽemaitėška中文\t\t\t\t\tEdit
  links\t\t\t\n\t\t\n\t\t\t\t\n\t\t\n\t\t\n\t\t\t\t\t\t\t This page was last modified
  on 13 December 2015, at 04:46.\n\t\t\t\t\t\t\t\t\t\t\tText is available under the
  Creative Commons Attribution-ShareAlike License;\nadditional terms may apply.  By
  using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is
  a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\t\t\t\t\t\t\t\t\tPrivacy
  policy\n\t\t\t\t\t\t\t\t\t\t\tAbout Wikipedia\n\t\t\t\t\t\t\t\t\t\t\tDisclaimers\n\t\t\t\t\t\t\t\t\t\t\tContact
  Wikipedia\n\t\t\t\t\t\t\t\t\t\t\tDevelopers\n\t\t\t\t\t\t\t\t\t\t\tMobile view\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\n\t\twindow.RLQ
  = window.RLQ || []; window.RLQ.push( function () {\nmw.loader.state({\"ext.globalCssJs.site\":\"ready\",\"ext.globalCssJs.user\":\"ready\",\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"ext.cite.a11y\",\"mediawiki.toc\",\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"ext.eventLogging.subscriber\",\"ext.wikimediaEvents\",\"ext.navigationTiming\",\"ext.gadget.teahouse\",\"ext.gadget.ReferenceTooltips\",\"ext.gadget.DRN-wizard\",\"ext.gadget.charinsert\",\"ext.gadget.refToolbar\",\"ext.gadget.switcher\",\"ext.gadget.featured-articles-links\",\"mmv.bootstrap.autostart\",\"ext.visualEditor.targetLoader\",\"schema.UniversalLanguageSelector\",\"ext.uls.eventlogger\",\"ext.uls.interlanguage\"]);\n}
  );window.RLQ = window.RLQ || []; window.RLQ.push( function () {\nmw.config.set({\"wgBackendResponseTime\":177,\"wgHostname\":\"mw1099\"});
  /* @nomin */\n} );A computer is a general-purpose device that can be programmed
  to carry out a set of arithmetic or logical operations automatically. Since a sequence
  of operations can be readily changed, the computer can solve more than one kind
  of problem.Conventionally, a computer consists of at least one processing element,
  typically a central processing unit (CPU), and some form of memory. The processing
  element carries out arithmetic and logic operations, and a sequencing and control
  unit can change the order of operations in response to stored information. Peripheral
  devices allow information to be retrieved from an external source, and the result
  of operations saved and retrieved.Mechanical analog computers started appearing
  in the first century and were later used in the medieval era for astronomical calculations.
  In World War II, mechanical analog computers were used for specialized military
  applications such as calculating torpedo aiming. During this time the first electronic
  digital computers were developed. Originally they were the size of a large room,
  consuming as much power as several hundred modern personal computers (PCs).[1]Modern
  computers based on integrated circuits are millions to billions of times more capable
  than the early machines, and occupy a fraction of the space.[2] Computers are small
  enough to fit into mobile devices, and mobile computers can be powered by small
  batteries. Personal computers in their various forms are icons of the Information
  Age and are generally considered as \"computers\". However, the embedded computers
  found in many devices from MP3 players to fighter aircraft and from electronic toys
  to industrial robots are the most numerous.The first known use of the word \"computer\"
  was in 1613 in a book called The Yong Mans Gleanings by English writer Richard Braithwait:
  \"I haue read the truest computer of Times, and the best Arithmetician that euer
  breathed, and he reduceth thy dayes into a short number.\" It referred to a person
  who carried out calculations, or computations. The word continued with the same
  meaning until the middle of the 20th century. From the end of the 19th century the
  word began to take on its more familiar meaning, a machine that carries out computations.[3]Devices
  have been used to aid computation for thousands of years, mostly using one-to-one
  correspondence with fingers. The earliest counting device was probably a form of
  tally stick. Later record keeping aids throughout the Fertile Crescent included
  calculi (clay spheres, cones, etc.) which represented counts of items, probably
  livestock or grains, sealed in hollow unbaked clay containers.[4][5] The use of
  counting rods is one example.The abacus was initially used for arithmetic tasks.
  The Roman abacus was used in Babylonia as early as 2400 BC. Since then, many other
  forms of reckoning boards or tables have been invented. In a medieval European counting
  house, a checkered cloth would be placed on a table, and markers moved around on
  it according to certain rules, as an aid to calculating sums of money.The Antikythera
  mechanism is believed to be the earliest mechanical analog \"computer\", according
  to Derek J. de Solla Price.[6] It was designed to calculate astronomical positions.
  It was discovered in 1901 in the Antikythera wreck off the Greek island of Antikythera,
  between Kythera and Crete, and has been dated to circa 100 BC. Devices of a level
  of complexity comparable to that of the Antikythera mechanism would not reappear
  until a thousand years later.Many mechanical aids to calculation and measurement
  were constructed for astronomical and navigation use. The planisphere was a star
  chart invented by Abū Rayhān al-Bīrūnī in the early 11th century.[7] The astrolabe
  was invented in the Hellenistic world in either the 1st or 2nd centuries BC and
  is often attributed to Hipparchus. A combination of the planisphere and dioptra,
  the astrolabe was effectively an analog computer capable of working out several
  different kinds of problems in spherical astronomy. An astrolabe incorporating a
  mechanical calendar computer[8][9] and gear-wheels was invented by Abi Bakr of Isfahan,
  Persia in 1235.[10]Abū Rayhān al-Bīrūnī invented the first mechanical geared lunisolar
  calendar astrolabe,[11] an early fixed-wired knowledge processing machine[12] with
  a gear train and gear-wheels,[13]circa 1000 AD.The sector, a calculating instrument
  used for solving problems in proportion, trigonometry, multiplication and division,
  and for various functions, such as squares and cube roots, was developed in the
  late 16th century and found application in gunnery, surveying and navigation.The
  planimeter was a manual instrument to calculate the area of a closed figure by tracing
  over it with a mechanical linkage.The slide rule was invented around 1620–1630,
  shortly after the publication of the concept of the logarithm. It is a hand-operated
  analog computer for doing multiplication and division. As slide rule development
  progressed, added scales provided reciprocals, squares and square roots, cubes and
  cube roots, as well as transcendental functions such as logarithms and exponentials,
  circular and hyperbolic trigonometry and other functions. Aviation is one of the
  few fields where slide rules are still in widespread use, particularly for solving
  time–distance problems in light aircraft. To save space and for ease of reading,
  these are typically circular devices rather than the classic linear slide rule shape.
  A popular example is the E6B.In the 1770s Pierre Jaquet-Droz, a Swiss watchmaker,
  built a mechanical doll (automata) that could write holding a quill pen. By switching
  the number and order of its internal wheels different letters, and hence different
  messages, could be produced. In effect, it could be mechanically \"programmed\"
  to read instructions. Along with two other complex machines, the doll is at the
  Musée d'Art et d'Histoire of Neuchâtel, Switzerland, and still operates.[14]The
  tide-predicting machine invented by Sir William Thomson in 1872 was of great utility
  to navigation in shallow waters. It used a system of pulleys and wires to automatically
  calculate predicted tide levels for a set period at a particular location.The differential
  analyser, a mechanical analog computer designed to solve differential equations
  by integration, used wheel-and-disc mechanisms to perform the integration. In 1876
  Lord Kelvin had already discussed the possible construction of such calculators,
  but he had been stymied by the limited output torque of the ball-and-disk integrators.[15]
  In a differential analyzer, the output of one integrator drove the input of the
  next integrator, or a graphing output. The torque amplifier was the advance that
  allowed these machines to work. Starting in the 1920s, Vannevar Bush and others
  developed mechanical differential analyzers.Charles Babbage, an English mechanical
  engineer and polymath, originated the concept of a programmable computer. Considered
  the \"father of the computer\",[16] he conceptualized and invented the first mechanical
  computer in the early 19th century. After working on his revolutionary difference
  engine, designed to aid in navigational calculations, in 1833 he realized that a
  much more general design, an Analytical Engine, was possible. The input of programs
  and data was to be provided to the machine via punched cards, a method being used
  at the time to direct mechanical looms such as the Jacquard loom. For output, the
  machine would have a printer, a curve plotter and a bell. The machine would also
  be able to punch numbers onto cards to be read in later. The Engine incorporated
  an arithmetic logic unit, control flow in the form of conditional branching and
  loops, and integrated memory, making it the first design for a general-purpose computer
  that could be described in modern terms as Turing-complete.[17][18]The machine was
  about a century ahead of its time. All the parts for his machine had to be made
  by hand — this was a major problem for a device with thousands of parts. Eventually,
  the project was dissolved with the decision of the British Government to cease funding.
  Babbage's failure to complete the analytical engine can be chiefly attributed to
  difficulties not only of politics and financing, but also to his desire to develop
  an increasingly sophisticated computer and to move ahead faster than anyone else
  could follow. Nevertheless, his son, Henry Babbage, completed a simplified version
  of the analytical engine's computing unit (the mill) in 1888. He gave a successful
  demonstration of its use in computing tables in 1906.During the first half of the
  20th century, many scientific computing needs were met by increasingly sophisticated
  analog computers, which used a direct mechanical or electrical model of the problem
  as a basis for computation. However, these were not programmable and generally lacked
  the versatility and accuracy of modern digital computers.[19]The first modern analog
  computer was a tide-predicting machine, invented by Sir William Thomson in 1872.
  The differential analyser, a mechanical analog computer designed to solve differential
  equations by integration using wheel-and-disc mechanisms, was conceptualized in
  1876 by James Thomson, the brother of the more famous Lord Kelvin.[15]The art of
  mechanical analog computing reached its zenith with the differential analyzer, built
  by H. L. Hazen and Vannevar Bush at MIT starting in 1927. This built on the mechanical
  integrators of James Thomson and the torque amplifiers invented by H. W. Nieman.
  A dozen of these devices were built before their obsolescence became obvious.By
  the 1950s the success of digital electronic computers had spelled the end for most
  analog computing machines, but analog computers remain in use in some specialized
  applications such as education (control systems) and aircraft (slide rule).The principle
  of the modern computer was first described by mathematician and pioneering computer
  scientist Alan Turing, who set out the idea in his seminal 1936 paper,[20]On Computable
  Numbers. Turing reformulated Kurt Gödel's 1931 results on the limits of proof and
  computation, replacing Gödel's universal arithmetic-based formal language with the
  formal and simple hypothetical devices that became known as Turing machines. He
  proved that some such machine would be capable of performing any conceivable mathematical
  computation if it were representable as an algorithm. He went on to prove that there
  was no solution to the Entscheidungsproblem by first showing that the halting problem
  for Turing machines is undecidable: in general, it is not possible to decide algorithmically
  whether a given Turing machine will ever halt.He also introduced the notion of a
  'Universal Machine' (now known as a Universal Turing machine), with the idea that
  such a machine could perform the tasks of any other machine, or in other words,
  it is provably capable of computing anything that is computable by executing a program
  stored on tape, allowing the machine to be programmable. Von Neumann acknowledged
  that the central concept of the modern computer was due to this paper.[21] Turing
  machines are to this day a central object of study in theory of computation. Except
  for the limitations imposed by their finite memory stores, modern computers are
  said to be Turing-complete, which is to say, they have algorithm execution capability
  equivalent to a universal Turing machine.By 1938 the United States Navy had developed
  an electromechanical analog computer small enough to use aboard a submarine. This
  was the Torpedo Data Computer, which used trigonometry to solve the problem of firing
  a torpedo at a moving target. During World War II similar devices were developed
  in other countries as well.Early digital computers were electromechanical; electric
  switches drove mechanical relays to perform the calculation. These devices had a
  low operating speed and were eventually superseded by much faster all-electric computers,
  originally using vacuum tubes. The Z2, created by German engineer Konrad Zuse in
  1939, was one of the earliest examples of an electromechanical relay computer.[22]In
  1941, Zuse followed his earlier machine up with the Z3, the world's first working
  electromechanical programmable, fully automatic digital computer.[23][24] The Z3
  was built with 2000 relays, implementing a 22 bit word length that operated at a
  clock frequency of about 5–10 Hz.[25] Program code was supplied on punched film
  while data could be stored in 64 words of memory or supplied from the keyboard.
  It was quite similar to modern machines in some respects, pioneering numerous advances
  such as floating point numbers. Replacement of the hard-to-implement decimal system
  (used in Charles Babbage's earlier design) by the simpler binary system meant that
  Zuse's machines were easier to build and potentially more reliable, given the technologies
  available at that time.[26] The Z3 was Turing complete.[27][28]Purely electronic
  circuit elements soon replaced their mechanical and electromechanical equivalents,
  at the same time that digital calculation replaced analog. The engineer Tommy Flowers,
  working at the Post Office Research Station in London in the 1930s, began to explore
  the possible use of electronics for the telephone exchange. Experimental equipment
  that he built in 1934 went into operation 5 years later, converting a portion of
  the telephone exchange network into an electronic data processing system, using
  thousands of vacuum tubes.[19] In the US, John Vincent Atanasoff and Clifford E.
  Berry of Iowa State University developed and tested the Atanasoff–Berry Computer
  (ABC) in 1942,[29] the first \"automatic electronic digital computer\".[30] This
  design was also all-electronic and used about 300 vacuum tubes, with capacitors
  fixed in a mechanically rotating drum for memory.[31]During World War II, the British
  at Bletchley Park achieved a number of successes at breaking encrypted German military
  communications. The German encryption machine, Enigma, was first attacked with the
  help of the electro-mechanical bombes. To crack the more sophisticated German Lorenz
  SZ 40/42 machine, used for high-level Army communications, Max Newman and his colleagues
  commissioned Flowers to build the Colossus.[31] He spent eleven months from early
  February 1943 designing and building the first Colossus.[32] After a functional
  test in December 1943, Colossus was shipped to Bletchley Park, where it was delivered
  on 18 January 1944[33] and attacked its first message on 5 February.[31]Colossus
  was the world's first electronic digital programmable computer.[19] It used a large
  number of valves (vacuum tubes). It had paper-tape input and was capable of being
  configured to perform a variety of boolean logical operations on its data, but it
  was not Turing-complete. Nine Mk II Colossi were built (The Mk I was converted to
  a Mk II making ten machines in total). Colossus Mark I contained 1500 thermionic
  valves (tubes), but Mark II with 2400 valves, was both 5 times faster and simpler
  to operate than Mark 1, greatly speeding the decoding process.[34][35]The US-built
  ENIAC[36] (Electronic Numerical Integrator and Computer) was the first electronic
  programmable computer built in the US. Although the ENIAC was similar to the Colossus
  it was much faster and more flexible. It was unambiguously a Turing-complete device
  and could compute any problem that would fit into its memory. Like the Colossus,
  a \"program\" on the ENIAC was defined by the states of its patch cables and switches,
  a far cry from the stored program electronic machines that came later. Once a program
  was written, it had to be mechanically set into the machine with manual resetting
  of plugs and switches.It combined the high speed of electronics with the ability
  to be programmed for many complex problems. It could add or subtract 5000 times
  a second, a thousand times faster than any other machine. It also had modules to
  multiply, divide, and square root. High speed memory was limited to 20 words (about
  80 bytes). Built under the direction of John Mauchly and J. Presper Eckert at the
  University of Pennsylvania, ENIAC's development and construction lasted from 1943
  to full operation at the end of 1945. The machine was huge, weighing 30 tons, using
  200 kilowatts of electric power and contained over 18,000 vacuum tubes, 1,500 relays,
  and hundreds of thousands of resistors, capacitors, and inductors.[37]Early computing
  machines had fixed programs. Changing its function required the re-wiring and re-structuring
  of the machine.[31] With the proposal of the stored-program computer this changed.
  A stored-program computer includes by design an instruction set and can store in
  memory a set of instructions (a program) that details the computation. The theoretical
  basis for the stored-program computer was laid by Alan Turing in his 1936 paper.
  In 1945 Turing joined the National Physical Laboratory and began work on developing
  an electronic stored-program digital computer. His 1945 report ‘Proposed Electronic
  Calculator’ was the first specification for such a device. John von Neumann at the
  University of Pennsylvania, also circulated his First Draft of a Report on the EDVAC
  in 1945.[19]The Manchester Small-Scale Experimental Machine, nicknamed Baby, was
  the world's first stored-program computer. It was built at the Victoria University
  of Manchester by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its
  first program on 21 June 1948.[38] It was designed as a testbed for the Williams
  tube the first random-access digital storage device.[39] Although the computer was
  considered \"small and primitive\" by the standards of its time, it was the first
  working machine to contain all of the elements essential to a modern electronic
  computer.[40] As soon as the SSEM had demonstrated the feasibility of its design,
  a project was initiated at the university to develop it into a more usable computer,
  the Manchester Mark 1.The Mark 1 in turn quickly became the prototype for the Ferranti
  Mark 1, the world's first commercially available general-purpose computer.[41] Built
  by Ferranti, it was delivered to the University of Manchester in February 1951.
  At least seven of these later machines were delivered between 1953 and 1957, one
  of them to Shell labs in Amsterdam.[42] In October 1947, the directors of British
  catering company J. Lyons & Company decided to take an active role in promoting
  the commercial development of computers. The LEO I computer became operational in
  April 1951 [43] and ran the world's first regular routine office computer job.The
  bipolar transistor was invented in 1947. From 1955 onwards transistors replaced
  vacuum tubes in computer designs, giving rise to the \"second generation\" of computers.
  Compared to vacuum tubes, transistors have many advantages: they are smaller, and
  require less power than vacuum tubes, so give off less heat. Silicon junction transistors
  were much more reliable than vacuum tubes and had longer, indefinite, service life.
  Transistorized computers could contain tens of thousands of binary logic circuits
  in a relatively compact space.At the University of Manchester, a team under the
  leadership of Tom Kilburn designed and built a machine using the newly developed
  transistors instead of valves.[44] Their first transistorised computer and the first
  in the world, was operational by 1953, and a second version was completed there
  in April 1955. However, the machine did make use of valves to generate its 125 kHz
  clock waveforms and in the circuitry to read and write on its magnetic drum memory,
  so it was not the first completely transistorized computer. That distinction goes
  to the Harwell CADET of 1955,[45] built by the electronics division of the Atomic
  Energy Research Establishment at Harwell.[46][47]The next great advance in computing
  power came with the advent of the integrated circuit. The idea of the integrated
  circuit was first conceived by a radar scientist working for the Royal Radar Establishment
  of the Ministry of Defence, Geoffrey W.A. Dummer. Dummer presented the first public
  description of an integrated circuit at the Symposium on Progress in Quality Electronic
  Components in Washington, D.C. on 7 May 1952.[48]The first practical ICs were invented
  by Jack Kilby at Texas Instruments and Robert Noyce at Fairchild Semiconductor.[49]
  Kilby recorded his initial ideas concerning the integrated circuit in July 1958,
  successfully demonstrating the first working integrated example on 12 September
  1958.[50] In his patent application of 6 February 1959, Kilby described his new
  device as \"a body of semiconductor material ... wherein all the components of the
  electronic circuit are completely integrated\".[51][52] Noyce also came up with
  his own idea of an integrated circuit half a year later than Kilby.[53] His chip
  solved many practical problems that Kilby's had not. Produced at Fairchild Semiconductor,
  it was made of silicon, whereas Kilby's chip was made of germanium.This new development
  heralded an explosion in the commercial and personal use of computers and led to
  the invention of the microprocessor. While the subject of exactly which device was
  the first microprocessor is contentious, partly due to lack of agreement on the
  exact definition of the term \"microprocessor\", it is largely undisputed that the
  first single-chip microprocessor was the Intel 4004,[54] designed and realized by
  Ted Hoff, Federico Faggin, and Stanley Mazor at Intel.[55]With the continued miniaturization
  of computing resources, and advancements in portable battery life, portable computers
  grew in popularity in the 2000s.[56] The same developments that spurred the growth
  of laptop computers and other portable computers allowed manufacturers to integrate
  computing resources into cellular phones. These so-called smartphones and tablets
  run on a variety of operating systems and have become the dominant computing device
  on the market, with manufacturers reporting having shipped an estimated 237 million
  devices in 2Q 2013.[57]The defining feature of modern computers which distinguishes
  them from all other machines is that they can be programmed. That is to say that
  some type of instructions (the program) can be given to the computer, and it will
  process them. Modern computers based on the von Neumann architecture often have
  machine code in the form of an imperative programming language.In practical terms,
  a computer program may be just a few instructions or extend to many millions of
  instructions, as do the programs for word processors and web browsers for example.
  A typical modern computer can execute billions of instructions per second (gigaflops)
  and rarely makes a mistake over many years of operation. Large computer programs
  consisting of several million instructions may take teams of programmers years to
  write, and due to the complexity of the task almost certainly contain errors.This
  section applies to most common RAM machine-based computers.In most cases, computer
  instructions are simple: add one number to another, move some data from one location
  to another, send a message to some external device, etc. These instructions are
  read from the computer's memory and are generally carried out (executed) in the
  order they were given. However, there are usually specialized instructions to tell
  the computer to jump ahead or backwards to some other place in the program and to
  carry on executing from there. These are called \"jump\" instructions (or branches).
  Furthermore, jump instructions may be made to happen conditionally so that different
  sequences of instructions may be used depending on the result of some previous calculation
  or some external event. Many computers directly support subroutines by providing
  a type of jump that \"remembers\" the location it jumped from and another instruction
  to return to the instruction following that jump instruction.Program execution might
  be likened to reading a book. While a person will normally read each word and line
  in sequence, they may at times jump back to an earlier place in the text or skip
  sections that are not of interest. Similarly, a computer may sometimes go back and
  repeat the instructions in some section of the program over and over again until
  some internal condition is met. This is called the flow of control within the program
  and it is what allows the computer to perform tasks repeatedly without human intervention.Comparatively,
  a person using a pocket calculator can perform a basic arithmetic operation such
  as adding two numbers with just a few button presses. But to add together all of
  the numbers from 1 to 1,000 would take thousands of button presses and a lot of
  time, with a near certainty of making a mistake. On the other hand, a computer may
  be programmed to do this with just a few simple instructions. The following example
  is written in the MIPS assembly language:Once told to run this program, the computer
  will perform the repetitive addition task without further human intervention. It
  will almost never make a mistake and a modern PC can complete the task in a fraction
  of a second.In most computers, individual instructions are stored as machine code
  with each instruction being given a unique number (its operation code or opcode
  for short). The command to add two numbers together would have one opcode; the command
  to multiply them would have a different opcode, and so on. The simplest computers
  are able to perform any of a handful of different instructions; the more complex
  computers have several hundred to choose from, each with a unique numerical code.
  Since the computer's memory is able to store numbers, it can also store the instruction
  codes. This leads to the important fact that entire programs (which are just lists
  of these instructions) can be represented as lists of numbers and can themselves
  be manipulated inside the computer in the same way as numeric data. The fundamental
  concept of storing programs in the computer's memory alongside the data they operate
  on is the crux of the von Neumann, or stored program[citation needed], architecture.
  In some cases, a computer might store some or all of its program in memory that
  is kept separate from the data it operates on. This is called the Harvard architecture
  after the Harvard Mark I computer. Modern von Neumann computers display some traits
  of the Harvard architecture in their designs, such as in CPU caches.While it is
  possible to write computer programs as long lists of numbers (machine language)
  and while this technique was used with many early computers,[58] it is extremely
  tedious and potentially error-prone to do so in practice, especially for complicated
  programs. Instead, each basic instruction can be given a short name that is indicative
  of its function and easy to remember – a mnemonic such as ADD, SUB, MULT or JUMP.
  These mnemonics are collectively known as a computer's assembly language. Converting
  programs written in assembly language into something the computer can actually understand
  (machine language) is usually done by a computer program called an assembler.Programming
  languages provide various ways of specifying programs for computers to run. Unlike
  natural languages, programming languages are designed to permit no ambiguity and
  to be concise. They are purely written languages and are often difficult to read
  aloud. They are generally either translated into machine code by a compiler or an
  assembler before being run, or translated directly at run time by an interpreter.
  Sometimes programs are executed by a hybrid method of the two techniques.Machine
  languages and the assembly languages that represent them (collectively termed low-level
  programming languages) tend to be unique to a particular type of computer. For instance,
  an ARM architecture computer (such as may be found in a PDA or a hand-held videogame)
  cannot understand the machine language of an Intel Pentium or the AMD Athlon 64
  computer that might be in a PC.[59]Though considerably easier than in machine language,
  writing long programs in assembly language is often difficult and is also error
  prone. Therefore, most practical programs are written in more abstract high-level
  programming languages that are able to express the needs of the programmer more
  conveniently (and thereby help reduce programmer error). High level languages are
  usually \"compiled\" into machine language (or sometimes into assembly language
  and then into machine language) using another computer program called a compiler.[60]
  High level languages are less related to the workings of the target computer than
  assembly language, and more related to the language and structure of the problem(s)
  to be solved by the final program. It is therefore often possible to use different
  compilers to translate the same high level language program into the machine language
  of many different types of computer. This is part of the means by which software
  like video games may be made available for different computer architectures such
  as personal computers and various video game consoles.These 4G languages are less
  procedural than 3G languages. The benefit of 4GL is that it provides ways to obtain
  information without requiring the direct help of a programmer. Example of 4GL is
  SQL.Program design of small programs is relatively simple and involves the analysis
  of the problem, collection of inputs, using the programming constructs within languages,
  devising or using established procedures and algorithms, providing data for output
  devices and solutions to the problem as applicable. As problems become larger and
  more complex, features such as subprograms, modules, formal documentation, and new
  paradigms such as object-oriented programming are encountered. Large programs involving
  thousands of line of code and more require formal software methodologies. The task
  of developing large software systems presents a significant intellectual challenge.
  Producing software with an acceptably high reliability within a predictable schedule
  and budget has historically been difficult; the academic and professional discipline
  of software engineering concentrates specifically on this challenge.Errors in computer
  programs are called \"bugs\". They may be benign and not affect the usefulness of
  the program, or have only subtle effects. But in some cases, they may cause the
  program or the entire system to \"hang\", becoming unresponsive to input such as
  mouse clicks or keystrokes, to completely fail, or to crash. Otherwise benign bugs
  may sometimes be harnessed for malicious intent by an unscrupulous user writing
  an exploit, code designed to take advantage of a bug and disrupt a computer's proper
  execution. Bugs are usually not the fault of the computer. Since computers merely
  execute the instructions they are given, bugs are nearly always the result of programmer
  error or an oversight made in the program's design.[61]Admiral Grace Hopper, an
  American computer scientist and developer of the first compiler, is credited for
  having first used the term \"bugs\" in computing after a dead moth was found shorting
  a relay in the Harvard Mark II computer in September 1947.[62]A general purpose
  computer has four main components: the arithmetic logic unit (ALU), the control
  unit, the memory, and the input and output devices (collectively termed I/O). These
  parts are interconnected by buses, often made of groups of wires.Inside each of
  these parts are thousands to trillions of small electrical circuits which can be
  turned off or on by means of an electronic switch. Each circuit represents a bit
  (binary digit) of information so that when the circuit is on it represents a \"1\",
  and when off it represents a \"0\" (in positive logic representation). The circuits
  are arranged in logic gates so that one or more of the circuits may control the
  state of one or more of the other circuits.The control unit (often called a control
  system or central controller) manages the computer's various components; it reads
  and interprets (decodes) the program instructions, transforming them into control
  signals that activate other parts of the computer.[63] Control systems in advanced
  computers may change the order of execution of some instructions to improve performance.A
  key component common to all CPUs is the program counter, a special memory cell (a
  register) that keeps track of which location in memory the next instruction is to
  be read from.[64]The control system's function is as follows—note that this is a
  simplified description, and some of these steps may be performed concurrently or
  in a different order depending on the type of CPU:Since the program counter is (conceptually)
  just another set of memory cells, it can be changed by calculations done in the
  ALU. Adding 100 to the program counter would cause the next instruction to be read
  from a place 100 locations further down the program. Instructions that modify the
  program counter are often known as \"jumps\" and allow for loops (instructions that
  are repeated by the computer) and often conditional instruction execution (both
  examples of control flow).The sequence of operations that the control unit goes
  through to process an instruction is in itself like a short computer program, and
  indeed, in some more complex CPU designs, there is another yet smaller computer
  called a microsequencer, which runs a microcode program that causes all of these
  events to happen.The control unit, ALU, and registers are collectively known as
  a central processing unit (CPU). Early CPUs were composed of many separate components
  but since the mid-1970s CPUs have typically been constructed on a single integrated
  circuit called a microprocessor.The ALU is capable of performing two classes of
  operations: arithmetic and logic.[65]The set of arithmetic operations that a particular
  ALU supports may be limited to addition and subtraction, or might include multiplication,
  division, trigonometry functions such as sine, cosine, etc., and square roots. Some
  can only operate on whole numbers (integers) whilst others use floating point to
  represent real numbers, albeit with limited precision. However, any computer that
  is capable of performing just the simplest operations can be programmed to break
  down the more complex operations into simple steps that it can perform. Therefore,
  any computer can be programmed to perform any arithmetic operation—although it will
  take more time to do so if its ALU does not directly support the operation. An ALU
  may also compare numbers and return boolean truth values (true or false) depending
  on whether one is equal to, greater than or less than the other (\"is 64 greater
  than 65?\").Logic operations involve Boolean logic: AND, OR, XOR, and NOT. These
  can be useful for creating complicated conditional statements and processing boolean
  logic.Superscalar computers may contain multiple ALUs, allowing them to process
  several instructions simultaneously.[66]Graphics processors and computers with SIMD
  and MIMD features often contain ALUs that can perform arithmetic on vectors and
  matrices.A computer's memory can be viewed as a list of cells into which numbers
  can be placed or read. Each cell has a numbered \"address\" and can store a single
  number. The computer can be instructed to \"put the number 123 into the cell numbered
  1357\" or to \"add the number that is in cell 1357 to the number that is in cell
  2468 and put the answer into cell 1595.\" The information stored in memory may represent
  practically anything. Letters, numbers, even computer instructions can be placed
  into memory with equal ease. Since the CPU does not differentiate between different
  types of information, it is the software's responsibility to give significance to
  what the memory sees as nothing but a series of numbers.In almost all modern computers,
  each memory cell is set up to store binary numbers in groups of eight bits (called
  a byte). Each byte is able to represent 256 different numbers (2^8 = 256); either
  from 0 to 255 or −128 to +127. To store larger numbers, several consecutive bytes
  may be used (typically, two, four or eight). When negative numbers are required,
  they are usually stored in two's complement notation. Other arrangements are possible,
  but are usually not seen outside of specialized applications or historical contexts.
  A computer can store any kind of information in memory if it can be represented
  numerically. Modern computers have billions or even trillions of bytes of memory.The
  CPU contains a special set of memory cells called registers that can be read and
  written to much more rapidly than the main memory area. There are typically between
  two and one hundred registers depending on the type of CPU. Registers are used for
  the most frequently needed data items to avoid having to access main memory every
  time data is needed. As data is constantly being worked on, reducing the need to
  access main memory (which is often slow compared to the ALU and control units) greatly
  increases the computer's speed.Computer main memory comes in two principal varieties:RAM
  can be read and written to anytime the CPU commands it, but ROM is preloaded with
  data and software that never changes, therefore the CPU can only read from it. ROM
  is typically used to store the computer's initial start-up instructions. In general,
  the contents of RAM are erased when the power to the computer is turned off, but
  ROM retains its data indefinitely. In a PC, the ROM contains a specialized program
  called the BIOS that orchestrates loading the computer's operating system from the
  hard disk drive into RAM whenever the computer is turned on or reset. In embedded
  computers, which frequently do not have disk drives, all of the required software
  may be stored in ROM. Software stored in ROM is often called firmware, because it
  is notionally more like hardware than software. Flash memory blurs the distinction
  between ROM and RAM, as it retains its data when turned off but is also rewritable.
  It is typically much slower than conventional ROM and RAM however, so its use is
  restricted to applications where high speed is unnecessary.[67]In more sophisticated
  computers there may be one or more RAM cache memories, which are slower than registers
  but faster than main memory. Generally computers with this sort of cache are designed
  to move frequently needed data into the cache automatically, often without the need
  for any intervention on the programmer's part.I/O is the means by which a computer
  exchanges information with the outside world.[68] Devices that provide input or
  output to the computer are called peripherals.[69] On a typical personal computer,
  peripherals include input devices like the keyboard and mouse, and output devices
  such as the display and printer. Hard disk drives, floppy disk drives and optical
  disc drives serve as both input and output devices. Computer networking is another
  form of I/O.I/O devices are often complex computers in their own right, with their
  own CPU and memory. A graphics processing unit might contain fifty or more tiny
  computers that perform the calculations necessary to display 3D graphics.[citation
  needed] Modern desktop computers contain many smaller computers that assist the
  main CPU in performing I/O.While a computer may be viewed as running one gigantic
  program stored in its main memory, in some systems it is necessary to give the appearance
  of running several programs simultaneously. This is achieved by multitasking i.e.
  having the computer switch rapidly between running each program in turn.[70]One
  means by which this is done is with a special signal called an interrupt, which
  can periodically cause the computer to stop executing instructions where it was
  and do something else instead. By remembering where it was executing prior to the
  interrupt, the computer can return to that task later. If several programs are running
  \"at the same time\". then the interrupt generator might be causing several hundred
  interrupts per second, causing a program switch each time. Since modern computers
  typically execute instructions several orders of magnitude faster than human perception,
  it may appear that many programs are running at the same time even though only one
  is ever executing in any given instant. This method of multitasking is sometimes
  termed \"time-sharing\" since each program is allocated a \"slice\" of time in turn.[71]Before
  the era of cheap computers, the principal use for multitasking was to allow many
  people to share the same computer.Seemingly, multitasking would cause a computer
  that is switching between several programs to run more slowly, in direct proportion
  to the number of programs it is running, but most programs spend much of their time
  waiting for slow input/output devices to complete their tasks. If a program is waiting
  for the user to click on the mouse or press a key on the keyboard, then it will
  not take a \"time slice\" until the event it is waiting for has occurred. This frees
  up time for other programs to execute so that many programs may be run simultaneously
  without unacceptable speed loss.Some computers are designed to distribute their
  work across several CPUs in a multiprocessing configuration, a technique once employed
  only in large and powerful machines such as supercomputers, mainframe computers
  and servers. Multiprocessor and multi-core (multiple CPUs on a single integrated
  circuit) personal and laptop computers are now widely available, and are being increasingly
  used in lower-end markets as a result.Supercomputers in particular often have highly
  unique architectures that differ significantly from the basic stored-program architecture
  and from general purpose computers.[72] They often feature thousands of CPUs, customized
  high-speed interconnects, and specialized computing hardware. Such designs tend
  to be useful only for specialized tasks due to the large scale of program organization
  required to successfully utilize most of the available resources at once. Supercomputers
  usually see usage in large-scale simulation, graphics rendering, and cryptography
  applications, as well as with other so-called \"embarrassingly parallel\" tasks.Computers
  have been used to coordinate information between multiple locations since the 1950s.
  The U.S. military's SAGE system was the first large-scale example of such a system,
  which led to a number of special-purpose commercial systems such as Sabre.[73]In
  the 1970s, computer engineers at research institutions throughout the United States
  began to link their computers together using telecommunications technology. The
  effort was funded by ARPA (now DARPA), and the computer network that resulted was
  called the ARPANET.[74] The technologies that made the Arpanet possible spread and
  evolved.In time, the network spread beyond academic and military institutions and
  became known as the Internet. The emergence of networking involved a redefinition
  of the nature and boundaries of the computer. Computer operating systems and applications
  were modified to include the ability to define and access the resources of other
  computers on the network, such as peripheral devices, stored information, and the
  like, as extensions of the resources of an individual computer. Initially these
  facilities were available primarily to people working in high-tech environments,
  but in the 1990s the spread of applications like e-mail and the World Wide Web,
  combined with the development of cheap, fast networking technologies like Ethernet
  and ADSL saw computer networking become almost ubiquitous. In fact, the number of
  computers that are networked is growing phenomenally. A very large proportion of
  personal computers regularly connect to the Internet to communicate and receive
  information. \"Wireless\" networking, often utilizing mobile phone networks, has
  meant networking is becoming increasingly ubiquitous even in mobile computing environments.There
  are many types of computer architectures:Of all these abstract machines, a quantum
  computer holds the most promise for revolutionizing computing.[75]Logic gates are
  a common abstraction which can apply to most of the above digital or analog paradigms.The
  ability to store and execute lists of instructions called programs makes computers
  extremely versatile, distinguishing them from calculators. The Church–Turing thesis
  is a mathematical statement of this versatility: any computer with a minimum capability
  (being Turing-complete) is, in principle, capable of performing the same tasks that
  any other computer can perform. Therefore, any type of computer (netbook, supercomputer,
  cellular automaton, etc.) is able to perform the same computational tasks, given
  enough time and storage capacity.A computer does not need to be electronic, nor
  even have a processor, nor RAM, nor even a hard disk. While popular usage of the
  word \"computer\" is synonymous with a personal electronic computer, the modern[76]
  definition of a computer is literally: \"A device that computes, especially a programmable
  [usually] electronic machine that performs high-speed mathematical or logical operations
  or that assembles, stores, correlates, or otherwise processes information.\"[77]
  Any device which processes information qualifies as a computer, especially if the
  processing is purposeful.[citation needed]Historically, computers evolved from mechanical
  computers and eventually from vacuum tubes to transistors. However, conceptually
  computational systems as flexible as a personal computer can be built out of almost
  anything. For example, a computer can be made out of billiard balls (billiard ball
  computer); an often quoted example.[citation needed] More realistically, modern
  computers are made out of transistors made of photolithographed semiconductors.There
  is active research to make computers out of many promising new types of technology,
  such as optical computers, DNA computers, neural computers, and quantum computers.
  Most computers are universal, and are able to calculate any computable function,
  and are limited only by their memory capacity and operating speed. However different
  designs of computers can give very different performance for particular problems;
  for example quantum computers can potentially break some modern encryption algorithms
  (by quantum factoring) very quickly.A computer will solve problems in exactly the
  way it is programmed to, without regard to efficiency, alternative solutions, possible
  shortcuts, or possible errors in the code. Computer programs that learn and adapt
  are part of the emerging field of artificial intelligence and machine learning.The
  term hardware covers all of those parts of a computer that are tangible objects.
  Circuits, displays, power supplies, cables, keyboards, printers and mice are all
  hardware.Software refers to parts of the computer which do not have a material form,
  such as programs, data, protocols, etc. When software is stored in hardware that
  cannot easily be modified (such as BIOS ROM in an IBM PC compatible), it is sometimes
  called \"firmware\".There are thousands of different programming languages—some
  intended to be general purpose, others useful only for highly specialized applications.Firmware
  is the technology which has the combination of both hardware and software such as
  BIOS chip inside a computer. This chip (hardware) is located on the motherboard
  and has the BIOS set up (software) stored in it.Computers are typically classified
  based on their uses:When unprocessed data is sent to the computer with the help
  of input devices, the data is processed and sent to output devices. The input devices
  may be hand-operated or automated. The act of processing is mainly regulated by
  the CPU. Some examples of hand-operated input devices are:The means through which
  computer gives output are known as output devices. Some examples of output devices
  are:As the use of computers has spread throughout society, there are an increasing
  number of careers involving computers.The need for computers to work well together
  and to be able to exchange information has spawned the need for many standards organizations,
  clubs and societies of both a formal and informal nature.Wikiversity has a quiz
  on this article"
