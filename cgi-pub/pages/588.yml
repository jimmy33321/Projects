--- !ruby/object:WebPage
page: !ruby/object:Nokogiri::HTML::Document
  decorators: 
  node_cache:
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  errors: []
address: http://plato.stanford.edu/entries/computing-history/
inboundLinks: []
lines:
- |2+

- |2+

- |2+

- "  \n"
- "    \n"
- "      \n"
- |2
        Stanford Encyclopedia of Philosophy
- "    \n"
- "    \n"
- "      \n"
- "        \n"
- "          \n"
- "              Menu \n"
- "            \n"
- |2
                 Browse
- |2
                    Table of Contents
- |2
                      What's New
- |2
                      Random Entry
- |2
                      Chronological
- |2
                      Archives
- "                  \n"
- |2
                   About
- |2
                    Editorial Information
- |2
                      About the SEP
- |2
                      Editorial Board
- |2
                      How to Cite the SEP
- |2
                      Special Characters
- |2
                      Advanced Tools
- |2
                      Contact
- "                  \n"
- |2
                   Support SEP
- |2
                    Support the SEP
- |2
                      PDFs for SEP Friends
- |2
                      Make a Donation
- |2
                      SEPIA for Libraries
- "                  \n"
- "              \n"
- "          \n"
- "        \n"
- "      \n"
- "    \n"
- "    \n"
- "    \n"
- "    \n"
- "      \n"
- "        \n"
- "      \n"
- "    \n"
- "     \n"
- "    \n"
- "  \n"
- "   \n"
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- "  \n"
- "    \n"
- "      \n"
- "          Entry Navigation \n"
- "        \n"
- |2
            Entry Contents
- |2
              Bibliography
- |2
              Academic Tools
- "            Friends PDF Preview \n"
- "            Author and Citation Info  \n"
- "            Back to Top \n"
- "          \n"
- "      \n"
- "    \n"
- "  \n"
- |2+

- " \n"
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |
  The Modern History of ComputingFirst published Mon Dec 18, 2000; substantive revision Fri Jun 9, 2006
- |2+

- |2+

- |2+

- |2+

- |2+

- |
  Historically, computers were human clerks who calculated in accordance
- |
  with effective methods. These human computers did the sorts of
- |
  calculation nowadays carried out by electronic computers, and many
- |
  thousands of them were employed in commerce, government, and research
- |
  establishments. The term computing machine, used increasingly
- |
  from the 1920s, refers to any machine that does the work of a human
- |
  computer, i.e., any machine that calculates in accordance with
- |
  effective methods. During the late 1940s and early 1950s, with the
- |
  advent of electronic computing machines, the phrase ‘computing
- |
  machine’ gradually gave way simply to ‘computer’,
- |
  initially usually with the prefix ‘electronic’ or
- |
  ‘digital’. This entry surveys the history of these
- "machines. \n"
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |
  Babbage
- |2+

- |
  Analog Computers
- |2+

- |
  The Universal Turing Machine
- |2+

- |
  Electromechanical versus Electronic Computation
- |2+

- |
  Atanasoff
- |2+

- |
  Colossus
- |2+

- |
  Turing's Automatic Computing Engine
- |2+

- |
  The Manchester Machine
- |2+

- |
  ENIAC and EDVAC
- |2+

- |
  Other Notable Early Computers
- |2+

- |
  High-Speed Memory
- |2+

- |
  Bibliography
- |2+

- |
  Academic Tools
- |
  Other Internet Resources
- |2+

- |
  Related Entries
- |2+

- |2+

- |2+

- |2+

- |
  Babbage
- |2+

- |2+

- |2+

- |
  Charles Babbage was Lucasian Professor of Mathematics at Cambridge
- |
  University from 1828 to 1839 (a post formerly held by Isaac Newton).
- |
  Babbage's proposed Difference Engine was a special-purpose digital
- |
  computing machine for the automatic production of mathematical tables
- |
  (such as logarithm tables, tide tables, and astronomical tables). The
- |
  Difference Engine consisted entirely of mechanical components —
- |
  brass gear wheels, rods, ratchets, pinions, etc. Numbers were
- |
  represented in the decimal system by the positions of 10-toothed metal
- |
  wheels mounted in columns. Babbage exhibited a small working model in
- |
  1822. He never completed the full-scale machine that he had designed
- |
  but did complete several fragments. The largest — one ninth of
- |
  the complete calculator — is on display in the London Science
- |
  Museum. Baabage used it to perform serious computational work,
- |
  calculating various mathematical tables. In 1990, Babbage's Difference
- |
  Engine No. 2 was finally built from Babbage's designs and is also on
- "display at the London Science Museum. \n"
- |2+

- |2+

- |2+

- |
  The Swedes Georg and Edvard Scheutz (father and son) constructed a
- |
  modified version of Babbage's Difference Engine. Three were made, a
- |
  prototype and two commercial models, one of these being sold to an
- |
  observatory in Albany, New York, and the other to the
- |
  Registrar-General's office in London, where it calculated and printed
- |
  actuarial tables.
- |2+

- |2+

- |2+

- |
  Babbage's proposed Analytical Engine, considerably more ambitious
- |
  than the Difference Engine, was to have been a general-purpose
- |
  mechanical digital computer. The Analytical Engine was to have had a
- |
  memory store and a central processing unit (or ‘mill’) and
- |
  would have been able to select from among alternative actions
- |
  consequent upon the outcome of its previous actions (a facility
- |
  nowadays known as conditional branching). The behaviour of the
- |
  Analytical Engine would have been controlled by a program of
- |
  instructions contained on punched cards connected together with ribbons
- |
  (an idea that Babbage had adopted from the Jacquard weaving loom).
- |
  Babbage emphasised the generality of the Analytical Engine, saying
- |
  ‘the conditions which enable a finite machine to make
- |
  calculations of unlimited extent are fulfilled in the Analytical
- |
  Engine’ (Babbage [1994], p. 97).
- |2+

- |2+

- |2+

- |
  Babbage worked closely with Ada Lovelace, daughter of the poet
- |
  Byron, after whom the modern programming language ADA is named.
- |
  Lovelace foresaw the possibility of using the Analytical Engine for
- |
  non-numeric computation, suggesting that the Engine might even be
- |
  capable of composing elaborate pieces of music.
- |2+

- |2+

- |2+

- |
  A large model of the Analytical Engine was under construction at the
- |
  time of Babbage's death in 1871 but a full-scale version was never
- |
  built. Babbage's idea of a general-purpose calculating engine was never
- |
  forgotten, especially at Cambridge, and was on occasion a lively topic
- |
  of mealtime discussion at the war-time headquarters of the Government
- |
  Code and Cypher School, Bletchley Park, Buckinghamshire, birthplace of
- |
  the electronic digital computer.
- |2+

- |
  Analog computers
- |2+

- |2+

- |2+

- |
  The earliest computing machines in wide use were not digital but
- |
  analog. In analog representation, properties of the representational
- |
  medium ape (or reflect or model) properties of the represented
- |
  state-of-affairs. (In obvious contrast, the strings of binary digits
- |
  employed in digital representation do not represent by means
- |
  of possessing some physical property — such as length —
- |
  whose magnitude varies in proportion to the magnitude of the property
- |
  that is being represented.) Analog representations form a diverse
- |
  class. Some examples: the longer a line on a road map, the longer the
- |
  road that the line represents; the greater the number of clear plastic
- |
  squares in an architect's model, the greater the number of windows in
- |
  the building represented; the higher the pitch of an acoustic depth
- |
  meter, the shallower the water. In analog computers, numerical
- |
  quantities are represented by, for example, the angle of rotation of a
- |
  shaft or a difference in electrical potential. Thus the output voltage
- |
  of the machine at a time might represent the momentary speed of the
- "object being modelled. \n"
- |2+

- |2+

- |2+

- |
  As the case of the architect's model makes plain, analog
- |
  representation may be discrete in nature (there is no such
- |
  thing as a fractional number of windows). Among computer scientists,
- |
  the term ‘analog’ is sometimes used narrowly, to indicate
- |
  representation of one continuously-valued quantity by another
- |
  (e.g., speed by voltage). As Brian Cantwell Smith has remarked:
- |2+

- |
  ‘Analog’ should … be a predicate on a
- |
  representation whose structure corresponds to that of which it
- |
  represents … That continuous representations should historically
- |
  have come to be called analog presumably betrays the recognition that,
- |
  at the levels at which it matters to us, the world is more
- |
  foundationally continuous than it is discrete. (Smith [1991], p.
- |
  271)
- |2+

- |2+

- |2+

- |
  James Thomson, brother of Lord Kelvin, invented the mechanical
- |
  wheel-and-disc integrator that became the foundation of analog
- |
  computation (Thomson [1876]). The two brothers constructed a device for
- |
  computing the integral of the product of two given functions, and
- |
  Kelvin described (although did not construct) general-purpose analog
- |
  machines for integrating linear differential equations of any order and
- |
  for solving simultaneous linear equations. Kelvin's most successful
- |
  analog computer was his tide predicting machine, which remained in use
- |
  at the port of Liverpool until the 1960s. Mechanical analog devices
- |
  based on the wheel-and-disc integrator were in use during World War I
- |
  for gunnery calculations. Following the war, the design of the
- "integrator was considerably improved by Hannibal Ford (Ford [1919]). \n"
- |2+

- |2+

- |2+

- |
  Stanley Fifer reports that the first semi-automatic mechanical
- |
  analog computer was built in England by the Manchester firm of
- |
  Metropolitan Vickers prior to 1930 (Fifer [1961], p. 29); however, I
- |
  have so far been unable to verify this claim. In 1931, Vannevar Bush,
- |
  working at MIT, built the differential analyser, the first large-scale
- |
  automatic general-purpose mechanical analog computer. Bush's design was
- |
  based on the wheel and disc integrator. Soon copies of his machine were
- |
  in use around the world (including, at Cambridge and Manchester
- |
  Universities in England, differential analysers built out of kit-set
- |
  Meccano, the once popular engineering toy).
- |2+

- |2+

- |2+

- |
  It required a skilled mechanic equipped with a lead hammer to set up
- |
  Bush's mechanical differential analyser for each new job. Subsequently,
- |
  Bush and his colleagues replaced the wheel-and-disc integrators and
- |
  other mechanical components by electromechanical, and finally by
- |
  electronic, devices.
- |2+

- |2+

- |2+

- |
  A differential analyser may be conceptualised as a collection of
- |
  ‘black boxes’ connected together in such a way as to allow
- |
  considerable feedback. Each box performs a fundamental process, for
- |
  example addition, multiplication of a variable by a constant, and
- |
  integration. In setting up the machine for a given task, boxes are
- |
  connected together so that the desired set of fundamental processes is
- |
  executed. In the case of electrical machines, this was done typically
- |
  by plugging wires into sockets on a patch panel (computing machines
- |
  whose function is determined in this way are referred to as
- |
  ‘program-controlled’).
- |2+

- |2+

- |2+

- |
  Since all the boxes work in parallel, an electronic differential
- |
  analyser solves sets of equations very quickly. Against this has to be
- |
  set the cost of massaging the problem to be solved into the form
- |
  demanded by the analog machine, and of setting up the hardware to
- |
  perform the desired computation. A major drawback of analog computation
- |
  is the higher cost, relative to digital machines, of an increase in
- |
  precision. During the 1960s and 1970s, there was considerable interest
- |
  in ‘hybrid’ machines, where an analog section is controlled
- |
  by and programmed via a digital section. However, such machines are now
- |
  a rarity.
- |2+

- |
  The Universal Turing Machine
- |2+

- |2+

- |2+

- |
  In 1936, at Cambridge University, Turing invented the principle of the
- |
  modern computer. He described an abstract digital computing machine
- |
  consisting of a limitless memory and a scanner that moves back and
- |
  forth through the memory, symbol by symbol, reading what it finds and
- |
  writing further symbols (Turing [1936]). The actions of the scanner are
- |
  dictated by a program of instructions that is stored in the memory in
- |
  the form of symbols. This is Turing's stored-program concept, and
- |
  implicit in it is the possibility of the machine operating on and
- |
  modifying its own program. (In London in 1947, in the course of what
- |
  was, so far as is known, the earliest public lecture to mention
- |
  computer intelligence, Turing said, ‘What we want is a machine
- |
  that can learn from experience’, adding that the
- |
  ‘possibility of letting the machine alter its own instructions
- |
  provides the mechanism for this’ (Turing [1947] p. 393). Turing's
- |
  computing machine of 1936 is now known simply as the universal Turing
- |
  machine. Cambridge mathematician Max Newman remarked that right from
- |
  the start Turing was interested in the possibility of actually building
- |
  a computing machine of the sort that he had described (Newman in
- "interview with Christopher Evans in Evans [197?]. \n"
- |2+

- |2+

- |2+

- |
  From the start of the Second World War Turing was a leading
- |
  cryptanalyst at the Government Code and Cypher School, Bletchley Park.
- |
  Here he became familiar with Thomas Flowers' work involving large-scale
- |
  high-speed electronic switching (described below). However, Turing
- |
  could not turn to the project of building an electronic stored-program
- |
  computing machine until the cessation of hostilities in Europe in
- |
  1945.
- |2+

- |2+

- |2+

- |
  During the wartime years Turing did give considerable thought to the
- |
  question of machine intelligence. Colleagues at Bletchley Park recall
- |
  numerous off-duty discussions with him on the topic, and at one point
- |
  Turing circulated a typewritten report (now lost) setting out some of
- |
  his ideas. One of these colleagues, Donald Michie (who later founded
- |
  the Department of Machine Intelligence and Perception at the University
- |
  of Edinburgh), remembers Turing talking often about the possibility of
- |
  computing machines (1) learning from experience and (2) solving
- |
  problems by means of searching through the space of possible solutions,
- |
  guided by rule-of-thumb principles (Michie in interview with Copeland,
- |
  1995). The modern term for the latter idea is ‘heuristic
- |
  search’, a heuristic being any rule-of-thumb principle that cuts
- |
  down the amount of searching required in order to find a solution to a
- |
  problem. At Bletchley Park Turing illustrated his ideas on machine
- |
  intelligence by reference to chess. Michie recalls Turing experimenting
- |
  with heuristics that later became common in chess programming (in
- |
  particular minimax and best-first).
- |2+

- |2+

- |2+

- |
  Further information about Turing and the computer, including his
- |
  wartime work on codebreaking and his thinking about artificial
- |
  intelligence and artificial life, can be found in Copeland 2004.
- |2+

- |
  Electromechanical versus Electronic Computation
- |2+

- |2+

- |2+

- |
  With some exceptions — including Babbage's purely mechanical
- |
  engines, and the finger-powered National Accounting Machine - early
- |
  digital computing machines were electromechanical. That is to say,
- |
  their basic components were small, electrically-driven, mechanical
- |
  switches called ‘relays’. These operate relatively slowly,
- |
  whereas the basic components of an electronic computer —
- |
  originally vacuum tubes (valves) — have no moving parts save
- |
  electrons and so operate extremely fast. Electromechanical digital
- |
  computing machines were built before and during the second world war by
- |
  (among others) Howard Aiken at Harvard University, George Stibitz at
- |
  Bell Telephone Laboratories, Turing at Princeton University and
- |
  Bletchley Park, and Konrad Zuse in Berlin. To Zuse belongs the honour
- |
  of having built the first working general-purpose program-controlled
- |
  digital computer. This machine, later called the Z3, was functioning in
- |
  1941. (A program-controlled computer, as opposed to a stored-program
- |
  computer, is set up for a new task by re-routing wires, by means of
- "plugs etc.) \n"
- |2+

- |2+

- |2+

- |
  Relays were too slow and unreliable a medium for large-scale
- |
  general-purpose digital computation (although Aiken made a valiant
- |
  effort). It was the development of high-speed digital techniques using
- |
  vacuum tubes that made the modern computer possible.
- |2+

- |2+

- |2+

- |
  The earliest extensive use of vacuum tubes for digital
- |
  data-processing appears to have been by the engineer Thomas Flowers,
- |
  working in London at the British Post Office Research Station at Dollis
- |
  Hill. Electronic equipment designed by Flowers in 1934, for controlling
- |
  the connections between telephone exchanges, went into operation in
- |
  1939, and involved between three and four thousand vacuum tubes running
- |
  continuously. In 1938–1939 Flowers worked on an experimental
- |
  electronic digital data-processing system, involving a high-speed data
- |
  store. Flowers' aim, achieved after the war, was that electronic
- |
  equipment should replace existing, less reliable, systems built from
- |
  relays and used in telephone exchanges. Flowers did not investigate the
- |
  idea of using electronic equipment for numerical calculation, but has
- |
  remarked that at the outbreak of war with Germany in 1939 he was
- |
  possibly the only person in Britain who realized that vacuum tubes
- |
  could be used on a large scale for high-speed digital computation. (See
- |
  Copeland 2006 for m more information on Flowers' work.)
- |2+

- |
  Atanasoff
- |2+

- |2+

- |2+

- |
  The earliest comparable use of vacuum tubes in the U.S. seems to have
- |
  been by John Atanasoff at what was then Iowa State College (now
- |
  University). During the period 1937–1942 Atanasoff developed
- |
  techniques for using vacuum tubes to perform numerical calculations
- |
  digitally. In 1939, with the assistance of his student Clifford Berry,
- |
  Atanasoff began building what is sometimes called the Atanasoff-Berry
- |
  Computer, or ABC, a small-scale special-purpose electronic digital
- |
  machine for the solution of systems of linear algebraic equations. The
- |
  machine contained approximately 300 vacuum tubes. Although the
- |
  electronic part of the machine functioned successfully, the computer as
- |
  a whole never worked reliably, errors being introduced by the
- |
  unsatisfactory binary card-reader. Work was discontinued in 1942 when
- "Atanasoff left Iowa State. \n"
- |2+

- |
  Colossus
- |2+

- |2+

- |2+

- |
  The first fully functioning electronic digital computer was Colossus,
- "used by the Bletchley Park cryptanalysts from February 1944. \n"
- |2+

- |2+

- |2+

- |
  From very early in the war the Government Code and Cypher School
- |
  (GC&CS) was successfully deciphering German radio communications
- |
  encoded by means of the Enigma system, and by early 1942 about 39,000
- |
  intercepted messages were being decoded each month, thanks to
- |
  electromechanical machines known as ‘bombes’. These were
- |
  designed by Turing and Gordon Welchman (building on earlier work by
- |
  Polish cryptanalysts).
- |2+

- |2+

- |2+

- |
  During the second half of 1941, messages encoded by means of a
- |
  totally different method began to be intercepted. This new cipher
- |
  machine, code-named ‘Tunny’ by Bletchley Park, was broken
- |
  in April 1942 and current traffic was read for the first time in July
- |
  of that year. Based on binary teleprinter code, Tunny was used in
- |
  preference to Morse-based Enigma for the encryption of high-level
- |
  signals, for example messages from Hitler and members of the German
- |
  High Command.
- |2+

- |2+

- |2+

- |
  The need to decipher this vital intelligence as rapidly as possible
- |
  led Max Newman to propose in November 1942 (shortly after his
- |
  recruitment to GC&CS from Cambridge University) that key parts of
- |
  the decryption process be automated, by means of high-speed electronic
- |
  counting devices. The first machine designed and built to Newman's
- |
  specification, known as the Heath Robinson, was relay-based with
- |
  electronic circuits for counting. (The electronic counters were
- |
  designed by C.E. Wynn-Williams, who had been using thyratron tubes in
- |
  counting circuits at the Cavendish Laboratory, Cambridge, since 1932
- |
  [Wynn-Williams 1932].) Installed in June 1943, Heath Robinson was
- |
  unreliable and slow, and its high-speed paper tapes were continually
- |
  breaking, but it proved the worth of Newman's idea. Flowers recommended
- |
  that an all-electronic machine be built instead, but he received no
- |
  official encouragement from GC&CS. Working independently at the
- |
  Post Office Research Station at Dollis Hill, Flowers quietly got on
- |
  with constructing the world's first large-scale programmable electronic
- |
  digital computer. Colossus I was delivered to Bletchley Park in January
- |
  1943.
- |2+

- |2+

- |2+

- |
  By the end of the war there were ten Colossi working round the clock
- |
  at Bletchley Park. From a cryptanalytic viewpoint, a major difference
- |
  between the prototype Colossus I and the later machines was the
- |
  addition of the so-called Special Attachment, following a key discovery
- |
  by cryptanalysts Donald Michie and Jack Good. This broadened the
- |
  function of Colossus from ‘wheel setting’ — i.e.,
- |
  determining the settings of the encoding wheels of the Tunny machine
- |
  for a particular message, given the ‘patterns’ of the
- |
  wheels — to ‘wheel breaking’, i.e., determining the
- |
  wheel patterns themselves. The wheel patterns were eventually changed
- |
  daily by the Germans on each of the numerous links between the German
- |
  Army High Command and Army Group commanders in the field. By 1945 there
- |
  were as many 30 links in total. About ten of these were broken and read
- |
  regularly.
- |2+

- |2+

- |2+

- |
  Colossus I contained approximately 1600 vacuum tubes and each of the
- |
  subsequent machines approximately 2400 vacuum tubes. Like the smaller
- |
  ABC, Colossus lacked two important features of modern computers. First,
- |
  it had no internally stored programs. To set it up for a new task, the
- |
  operator had to alter the machine's physical wiring, using plugs and
- |
  switches. Second, Colossus was not a general-purpose machine, being
- |
  designed for a specific cryptanalytic task involving counting and
- |
  Boolean operations.
- |2+

- |2+

- |2+

- |
  F.H. Hinsley, official historian of GC&CS, has estimated that
- |
  the war in Europe was shortened by at least two years as a result of
- |
  the signals intelligence operation carried out at Bletchley Park, in
- |
  which Colossus played a major role. Most of the Colossi were destroyed
- |
  once hostilities ceased. Some of the electronic panels ended up at
- |
  Newman's Computing Machine Laboratory in Manchester (see below), all
- |
  trace of their original use having been removed. Two Colossi were
- |
  retained by GC&CS (renamed GCHQ following the end of the war). The
- |
  last Colossus is believed to have stopped running in 1960.
- |2+

- |2+

- |2+

- |
  Those who knew of Colossus were prohibited by the Official Secrets
- |
  Act from sharing their knowledge. Until the 1970s, few had any idea
- |
  that electronic computation had been used successfully during the
- |
  second world war. In 1970 and 1975, respectively, Good and Michie
- |
  published notes giving the barest outlines of Colossus. By 1983,
- |
  Flowers had received clearance from the British Government to publish a
- |
  partial account of the hardware of Colossus I. Details of the later
- |
  machines and of the Special Attachment, the uses to which the Colossi
- |
  were put, and the cryptanalytic algorithms that they ran, have only
- |
  recently been declassified. (For the full account of Colossus and the
- |
  attack on Tunny see Copeland 2006.)
- |2+

- |2+

- |2+

- |
  To those acquainted with the universal Turing machine of 1936, and
- |
  the associated stored-program concept, Flowers' racks of digital
- |
  electronic equipment were proof of the feasibility of using large
- |
  numbers of vacuum tubes to implement a high-speed general-purpose
- |
  stored-program computer. The war over, Newman lost no time in
- |
  establishing the Royal Society Computing Machine Laboratory at
- |
  Manchester University for precisely that purpose. A few months after
- |
  his arrival at Manchester, Newman wrote as follows to the Princeton
- |
  mathematician John von Neumann (February 1946):
- |2+

- |
  I am … hoping to embark on a computing machine
- |
  section here, having got very interested in electronic devices of this
- |
  kind during the last two or three years. By about eighteen months ago I
- |
  had decided to try my hand at starting up a machine unit when I got
- |
  out. … I am of course in close touch with Turing.
- |2+

- |
  Turing's Automatic Computing Engine
- |2+

- |2+

- |2+

- |
  Turing and Newman were thinking along similar lines. In 1945 Turing
- |
  joined the National Physical Laboratory (NPL) in London, his brief to
- |
  design and develop an electronic stored-program digital computer for
- |
  scientific work. (Artificial Intelligence was not far from Turing's
- |
  thoughts: he described himself as ‘building a brain’ and
- |
  remarked in a letter that he was ‘more interested in the
- |
  possibility of producing models of the action of the brain than in the
- |
  practical applications to computing’.) John Womersley, Turing's
- |
  immediate superior at NPL, christened Turing's proposed machine the
- |
  Automatic Computing Engine, or ACE, in homage to Babbage's Difference
- "Engine and Analytical Engine. \n"
- |2+

- |2+

- |2+

- |
  Turing's 1945 report ‘Proposed Electronic Calculator’
- |
  gave the first relatively complete specification of an electronic
- |
  stored-program general-purpose digital computer. The report is
- |
  reprinted in full in Copeland 2005.
- |2+

- |2+

- |2+

- |
  The first electronic stored-program digital computer to be proposed
- |
  in the U.S. was the EDVAC (see below). The ‘First Draft of a
- |
  Report on the EDVAC’ (May 1945), composed by von Neumann,
- |
  contained little engineering detail, in particular concerning
- |
  electronic hardware (owing to restrictions in the U.S.). Turing's
- |
  ‘Proposed Electronic Calculator’, on the other hand,
- |
  supplied detailed circuit designs and specifications of hardware units,
- |
  specimen programs in machine code, and even an estimate of the cost of
- |
  building the machine (£11,200). ACE and EDVAC differed
- |
  fundamentally from one another; for example, ACE employed distributed
- |
  processing, while EDVAC had a centralised structure.
- |2+

- |2+

- |2+

- |
  Turing saw that speed and memory were the keys to computing.
- |
  Turing's colleague at NPL, Jim Wilkinson, observed that Turing
- |
  ‘was obsessed with the idea of speed on the machine’
- |
  [Copeland 2005, p. 2]. Turing's design had much in common with today's
- |
  RISC architectures and it called for a high-speed memory of roughly the
- |
  same capacity as an early Macintosh computer (enormous by the standards
- |
  of his day). Had Turing's ACE been built as planned it would have been
- |
  in a different league from the other early computers. However, progress
- |
  on Turing's Automatic Computing Engine ran slowly, due to
- |
  organisational difficulties at NPL, and in 1948 a ‘very fed
- |
  up’ Turing (Robin Gandy's description, in interview with
- |
  Copeland, 1995) left NPL for Newman's Computing Machine Laboratory at
- |
  Manchester University. It was not until May 1950 that a small pilot
- |
  model of the Automatic Computing Engine, built by Wilkinson, Edward
- |
  Newman, Mike Woodger, and others, first executed a program. With an
- |
  operating speed of 1 MHz, the Pilot Model ACE was for some time the
- |
  fastest computer in the world.
- |2+

- |2+

- |2+

- |
  Sales of DEUCE, the production version of the Pilot Model ACE, were
- |
  buoyant — confounding the suggestion, made in 1946 by the
- |
  Director of the NPL, Sir Charles Darwin, that ‘it is very
- |
  possible that … one machine would suffice to solve all the
- |
  problems that are demanded of it from the whole country’
- |
  [Copeland 2005, p. 4]. The fundamentals of Turing's ACE design were
- |
  employed by Harry Huskey (at Wayne State University, Detroit) in the
- |
  Bendix G15 computer (Huskey in interview with Copeland, 1998). The G15
- |
  was arguably the first personal computer; over 400 were sold worldwide.
- |
  DEUCE and the G15 remained in use until about 1970. Another computer
- |
  deriving from Turing's ACE design, the MOSAIC, played a role in
- |
  Britain's air defences during the Cold War period; other derivatives
- |
  include the Packard-Bell PB250 (1961). (More information about these
- |
  early computers is given in [Copeland 2005].)
- |2+

- |
  The Manchester Machine
- |2+

- |2+

- |2+

- |
  The earliest general-purpose stored-program electronic digital computer
- |
  to work was built in Newman's Computing Machine Laboratory at
- |
  Manchester University. The Manchester ‘Baby’, as it became
- |
  known, was constructed by the engineers F.C. Williams and Tom Kilburn,
- |
  and performed its first calculation on 21 June 1948. The tiny program,
- |
  stored on the face of a cathode ray tube, was just seventeen
- |
  instructions long. A much enlarged version of the machine, with a
- |
  programming system designed by Turing, became the world's first
- |
  commercially available computer, the Ferranti Mark I. The first to be
- |
  completed was installed at Manchester University in February 1951; in
- "all about ten were sold, in Britain, Canada, Holland and Italy. \n"
- |2+

- |2+

- |2+

- |
  The fundamental logico-mathematical contributions by Turing and
- |
  Newman to the triumph at Manchester have been neglected, and the
- |
  Manchester machine is nowadays remembered as the work of Williams and
- |
  Kilburn. Indeed, Newman's role in the development of computers has
- |
  never been sufficiently emphasised (due perhaps to his thoroughly
- |
  self-effacing way of relating the relevant events).
- |2+

- |2+

- |2+

- |
  It was Newman who, in a lecture in Cambridge in 1935, introduced
- |
  Turing to the concept that led directly to the Turing machine: Newman
- |
  defined a constructive process as one that a machine can carry
- |
  out (Newman in interview with Evans, op. cit.). As a result of his
- |
  knowledge of Turing's work, Newman became interested in the
- |
  possibilities of computing machinery in, as he put it, ‘a rather
- |
  theoretical way’. It was not until Newman joined GC&CS in
- |
  1942 that his interest in computing machinery suddenly became
- |
  practical, with his realisation that the attack on Tunny could be
- |
  mechanised. During the building of Colossus, Newman tried to interest
- |
  Flowers in Turing's 1936 paper — birthplace of the stored-program
- |
  concept - but Flowers did not make much of Turing's arcane notation.
- |
  There is no doubt that by 1943, Newman had firmly in mind the idea of
- |
  using electronic technology in order to construct a stored-program
- |
  general-purpose digital computing machine.
- |2+

- |2+

- |2+

- |
  In July of 1946 (the month in which the Royal Society approved
- |
  Newman's application for funds to found the Computing Machine
- |
  Laboratory), Freddie Williams, working at the Telecommunications
- |
  Research Establishment, Malvern, began the series of experiments on
- |
  cathode ray tube storage that was to lead to the Williams tube memory.
- |
  Williams, until then a radar engineer, explains how it was that he came
- |
  to be working on the problem of computer memory:
- |2+

- |
  [O]nce [the German Armies] collapsed … nobody was
- |
  going to care a toss about radar, and people like me … were
- |
  going to be in the soup unless we found something else to do. And
- |
  computers were in the air. Knowing absolutely nothing about them I
- |
  latched onto the problem of storage and tackled that. (Quoted in
- |
  Bennett 1976.)
- |2+

- |2+

- |2+

- |
  Newman learned of Williams' work, and with the able help of Patrick
- |
  Blackett, Langworthy Professor of Physics at Manchester and one of the
- |
  most powerful figures in the University, was instrumental in the
- |
  appointment of the 35 year old Williams to the recently vacated Chair
- |
  of Electro-Technics at Manchester. (Both were members of the appointing
- |
  committee (Kilburn in interview with Copeland, 1997).) Williams
- |
  immediately had Kilburn, his assistant at Malvern, seconded to
- |
  Manchester. To take up the story in Williams' own words:
- |2+

- |
  [N]either Tom Kilburn nor I knew the first thing about
- |
  computers when we arrived in Manchester University. We'd had enough
- |
  explained to us to understand what the problem of storage was and what
- |
  we wanted to store, and that we'd achieved, so the point now had been
- |
  reached when we'd got to find out about computers … Newman
- |
  explained the whole business of how a computer works to us. (F.C.
- |
  Williams in interview with Evans [1976])
- |2+

- |2+

- |2+

- |
  Elsewhere Williams is explicit concerning Turing's role and gives
- |
  something of the flavour of the explanation that he and Kilburn
- |
  received:
- |2+

- |
  Tom Kilburn and I knew nothing about computers, but a lot
- |
  about circuits. Professor Newman and Mr A.M. Turing … knew a lot
- |
  about computers and substantially nothing about electronics. They took
- |
  us by the hand and explained how numbers could live in houses with
- |
  addresses and how if they did they could be kept track of during a
- |
  calculation. (Williams [1975], p. 328)
- |2+

- |2+

- |2+

- |
  It seems that Newman must have used much the same words with
- |
  Williams and Kilburn as he did in an address to the Royal Society on
- |
  4th March 1948:
- |2+

- |
  Professor Hartree … has recalled that all the
- |
  essential ideas of the general-purpose calculating machines now being
- |
  made are to be found in Babbage's plans for his analytical engine. In
- |
  modern times the idea of a universal calculating machine was
- |
  independently introduced by Turing … [T]he machines now being
- |
  made in America and in this country … [are] in certain general
- |
  respects … all similar. There is provision for storing numbers,
- |
  say in the scale of 2, so that each number appears as a row of, say,
- |
  forty 0's and 1's in certain places or "houses" in the machine.
- |
  … Certain of these numbers, or "words" are read, one after
- |
  another, as orders. In one possible type of machine an order consists
- |
  of four numbers, for example 11, 13, 27, 4. The number 4 signifies
- |
  "add", and when control shifts to this word the "houses" H11 and H13
- |
  will be connected to the adder as inputs, and H27 as output. The
- |
  numbers stored in H11 and H13 pass through the adder, are added, and
- |
  the sum is passed on to H27. The control then shifts to the next order.
- |
  In most real machines the process just described would be done by three
- |
  separate orders, the first bringing [H11] (=content of H11) to a
- |
  central accumulator, the second adding [H13] into the accumulator, and
- |
  the third sending the result to H27; thus only one address would be
- |
  required in each order. … A machine with storage, with this
- |
  automatic-telephone-exchange arrangement and with the necessary adders,
- |
  subtractors and so on, is, in a sense, already a universal machine.
- |
  (Newman [1948], pp. 271–272)
- |2+

- |2+

- |2+

- |
  Following this explanation of Turing's three-address concept (source
- |
  1, source 2, destination, function) Newman went on to describe program
- |
  storage (‘the orders shall be in a series of houses X1, X2,
- |
  …’) and conditional branching. He then summed up:
- |2+

- |
  From this highly simplified account it emerges that the
- |
  essential internal parts of the machine are, first, a storage for
- |
  numbers (which may also be orders). … Secondly, adders,
- |
  multipliers, etc. Thirdly, an "automatic telephone exchange" for
- |
  selecting "houses", connecting them to the arithmetic organ, and
- |
  writing the answers in other prescribed houses. Finally, means of
- |
  moving control at any stage to any chosen order, if a certain condition
- |
  is satisfied, otherwise passing to the next order in the normal
- |
  sequence. Besides these there must be ways of setting up the machine at
- |
  the outset, and extracting the final answer in useable form. (Newman
- |
  [1948], pp. 273–4)
- |2+

- |2+

- |2+

- |
  In a letter written in 1972 Williams described in some detail what
- |
  he and Kilburn were told by Newman:
- |2+

- |
  About the middle of the year [1946] the possibility of an
- |
  appointment at Manchester University arose and I had a talk with
- |
  Professor Newman who was already interested in the possibility of
- |
  developing computers and had acquired a grant from the Royal Society of
- |
  £30,000 for this purpose. Since he understood computers and I
- |
  understood electronics the possibilities of fruitful collaboration were
- |
  obvious. I remember Newman giving us a few lectures in which he
- |
  outlined the organisation of a computer in terms of numbers being
- |
  identified by the address of the house in which they were placed and in
- |
  terms of numbers being transferred from this address, one at a time, to
- |
  an accumulator where each entering number was added to what was already
- |
  there. At any time the number in the accumulator could be transferred
- |
  back to an assigned address in the store and the accumulator cleared
- |
  for further use. The transfers were to be effected by a stored program
- |
  in which a list of instructions was obeyed sequentially. Ordered
- |
  progress through the list could be interrupted by a test instruction
- |
  which examined the sign of the number in the accumulator. Thereafter
- |
  operation started from a new point in the list of instructions. This
- |
  was the first information I received about the organisation of
- |
  computers. … Our first computer was the simplest embodiment of
- |
  these principles, with the sole difference that it used a subtracting
- |
  rather than an adding accumulator. (Letter from Williams to Randell,
- |
  1972; in Randell [1972], p. 9)
- |2+

- |2+

- |2+

- |
  Turing's early input to the developments at Manchester, hinted at by
- |
  Williams in his above-quoted reference to Turing, may have been via the
- |
  lectures on computer design that Turing and Wilkinson gave in London
- |
  during the period December 1946 to February 1947 (Turing and Wilkinson
- |
  [1946–7]). The lectures were attended by representatives of
- |
  various organisations planning to use or build an electronic computer.
- |
  Kilburn was in the audience (Bowker and Giordano [1993]). (Kilburn
- |
  usually said, when asked from where he obtained his basic knowledge of
- |
  the computer, that he could not remember (letter from Brian Napper to
- |
  Copeland, 2002); for example, in a 1992 interview he said:
- |
  ‘Between early 1945 and early 1947, in that period, somehow or
- |
  other I knew what a digital computer was … Where I got this
- |
  knowledge from I've no idea’ (Bowker and Giordano [1993], p.
- |
  19).)
- |2+

- |2+

- |2+

- |
  Whatever role Turing's lectures may have played in informing
- |
  Kilburn, there is little doubt that credit for the Manchester computer
- |
  — called the ‘Newman-Williams machine’ in a
- |
  contemporary document (Huskey 1947) — belongs not only to
- |
  Williams and Kilburn but also to Newman, and that the influence on
- |
  Newman of Turing's 1936 paper was crucial, as was the influence of
- |
  Flowers' Colossus.
- |2+

- |2+

- |2+

- |
  The first working AI program, a draughts (checkers) player written
- |
  by Christopher Strachey, ran on the Ferranti Mark I in the Manchester
- |
  Computing Machine Laboratory. Strachey (at the time a teacher at Harrow
- |
  School and an amateur programmer) wrote the program with Turing's
- |
  encouragement and utilising the latter's recently completed
- |
  Programmers' Handbook for the Ferranti. (Strachey later became Director
- |
  of the Programming Research Group at Oxford University.) By the summer
- |
  of 1952, the program could, Strachey reported, ‘play a complete
- |
  game of draughts at a reasonable speed’. (Strachey's program formed the
- |
  basis for Arthur Samuel's well-known checkers program.) The first
- |
  chess-playing program, also, was written for the Manchester Ferranti,
- |
  by Dietrich Prinz; the program first ran in November 1951. Designed for
- |
  solving simple problems of the mate-in-two variety, the program would
- |
  examine every possible move until a solution was found. Turing started
- |
  to program his ‘Turochamp’ chess-player on the Ferranti
- |
  Mark I, but never completed the task. Unlike Prinz's program, the
- |
  Turochamp could play a complete game (when hand-simulated) and operated
- |
  not by exhaustive search but under the guidance of heuristics.
- |2+

- |
  ENIAC and EDVAC
- |2+

- |2+

- |2+

- |
  The first fully functioning electronic digital computer to be built in
- |
  the U.S. was ENIAC, constructed at the Moore School of Electrical
- |
  Engineering, University of Pennsylvania, for the Army Ordnance
- |
  Department, by J. Presper Eckert and John Mauchly. Completed in 1945,
- |
  ENIAC was somewhat similar to the earlier Colossus, but considerably
- |
  larger and more flexible (although far from general-purpose). The
- |
  primary function for which ENIAC was designed was the calculation of
- |
  tables used in aiming artillery. ENIAC was not a stored-program
- |
  computer, and setting it up for a new job involved reconfiguring the
- |
  machine by means of plugs and switches. For many years, ENIAC was
- |
  believed to have been the first functioning electronic digital
- "computer, Colossus being unknown to all but a few. \n"
- |2+

- |2+

- |2+

- |
  In 1944, John von Neumann joined the ENIAC group. He had become
- |
  ‘intrigued’ (Goldstine's word, [1972], p. 275) with
- |
  Turing's universal machine while Turing was at Princeton University
- |
  during 1936–1938. At the Moore School, von Neumann emphasised the
- |
  importance of the stored-program concept for electronic computing,
- |
  including the possibility of allowing the machine to modify its own
- |
  program in useful ways while running (for example, in order to control
- |
  loops and branching). Turing's paper of 1936 (‘On Computable
- |
  Numbers, with an Application to the Entscheidungsproblem’) was
- |
  required reading for members of von Neumann's post-war computer project
- |
  at the Institute for Advanced Study, Princeton University (letter from
- |
  Julian Bigelow to Copeland, 2002; see also Copeland [2004], p. 23).
- |
  Eckert appears to have realised independently, and prior to von
- |
  Neumann's joining the ENIAC group, that the way to take full advantage
- |
  of the speed at which data is processed by electronic circuits is to
- |
  place suitably encoded instructions for controlling the processing in
- |
  the same high-speed storage devices that hold the data itself
- |
  (documented in Copeland [2004], pp. 26–7). In 1945, while ENIAC
- |
  was still under construction, von Neumann produced a draft report,
- |
  mentioned previously, setting out the ENIAC group's ideas for an
- |
  electronic stored-program general-purpose digital computer, the EDVAC
- |
  (von Neuman [1945]). The EDVAC was completed six years later, but not
- |
  by its originators, who left the Moore School to build computers
- |
  elsewhere. Lectures held at the Moore School in 1946 on the proposed
- |
  EDVAC were widely attended and contributed greatly to the dissemination
- |
  of the new ideas.
- |2+

- |2+

- |2+

- |
  Von Neumann was a prestigious figure and he made the concept of a
- |
  high-speed stored-program digital computer widely known through his
- |
  writings and public addresses. As a result of his high profile in the
- |
  field, it became customary, although historically inappropriate, to
- |
  refer to electronic stored-program digital computers as ‘von
- |
  Neumann machines’.
- |2+

- |2+

- |2+

- |
  The Los Alamos physicist Stanley Frankel, responsible with von
- |
  Neumann and others for mechanising the large-scale calculations
- |
  involved in the design of the atomic bomb, has described von Neumann's
- |
  view of the importance of Turing's 1936 paper, in a letter:
- |2+

- |
  I know that in or about 1943 or ‘44 von Neumann was
- |
  well aware of the fundamental importance of Turing's paper of 1936
- |
  … Von Neumann introduced me to that paper and at his urging I
- |
  studied it with care. Many people have acclaimed von Neumann as the
- |
  "father of the computer" (in a modern sense of the term) but I am sure
- |
  that he would never have made that mistake himself. He might well be
- |
  called the midwife, perhaps, but he firmly emphasized to me, and to
- |
  others I am sure, that the fundamental conception is owing to Turing,
- |
  in so far as not anticipated by Babbage … Both Turing and von
- |
  Neumann, of course, also made substantial contributions to the
- |
  "reduction to practice" of these concepts but I would not regard these
- |
  as comparable in importance with the introduction and explication of
- |
  the concept of a computer able to store in its memory its program of
- |
  activities and of modifying that program in the course of these
- |
  activities. (Quoted in Randell [1972], p. 10)
- |2+

- |
  Other Notable Early Computers
- |2+

- |2+

- |2+

- "Other notable early stored-program electronic digital computers were: \n"
- |2+

- |
  EDSAC, 1949, built at Cambridge University by Maurice Wilkes
- |2+

- |
  BINAC, 1949, built by Eckert's and Mauchly's Electronic Control
- |
  Co., Philadelphia (opinions differ over whether BINAC ever actually
- |
  worked)
- |2+

- |
  Whirlwind I, 1949, Digital Computer Laboratory, Massachusetts
- |
  Institute of Technology, Jay Forrester
- |2+

- |
  SEAC, 1950, US Bureau of Standards Eastern Division, Washington
- |
  D.C., Samuel Alexander, Ralph Slutz
- |2+

- |
  SWAC, 1950, US Bureau of Standards Western Division, Institute for
- |
  Numerical Analysis, University of California at Los Angeles, Harry
- |
  Huskey
- |2+

- |
  UNIVAC, 1951, Eckert-Mauchly Computer Corporation, Philadelphia
- |
  (the first computer to be available commercially in the U.S.)
- |2+

- |
  the IAS computer, 1952, Institute for Advanced Study, Princeton
- |
  University, Julian Bigelow, Arthur Burks, Herman Goldstine, von
- |
  Neumann, and others (thanks to von Neumann's publishing the
- |
  specifications of the IAS machine, it became the model for a group of
- |
  computers known as the Princeton Class machines; the IAS computer was
- |
  also a strong influence on the IBM 701)
- |2+

- |
  IBM 701, 1952, International Business Machine's first mass-produced
- |
  electronic stored-program computer.
- |
  High-Speed Memory
- |2+

- |2+

- |2+

- |
  The EDVAC and ACE proposals both advocated the use of mercury-filled
- |
  tubes, called ‘delay lines’, for high-speed internal
- |
  memory. This form of memory is known as acoustic memory. Delay lines
- |
  had initially been developed for echo cancellation in radar; the idea
- |
  of using them as memory devices originated with Eckert at the Moore
- "School. Here is Turing's description: \n"
- |2+

- |
  It is proposed to build "delay line" units consisting of
- |
  mercury … tubes about 5′ long and 1″ in diameter in
- |
  contact with a quartz crystal at each end. The velocity of sound in
- |
  … mercury … is such that the delay will be 1.024 ms. The
- |
  information to be stored may be considered to be a sequence of 1024
- |
  ‘digits’ (0 or 1) … These digits will be represented
- |
  by a corresponding sequence of pulses. The digit 0 … will be
- |
  represented by the absence of a pulse at the appropriate time, the
- |
  digit 1 … by its presence. This series of pulses is impressed on
- |
  the end of the line by one piezo-crystal, it is transmitted down the
- |
  line in the form of supersonic waves, and is reconverted into a varying
- |
  voltage by the crystal at the far end. This voltage is amplified
- |
  sufficiently to give an output of the order of 10 volts peak to peak
- |
  and is used to gate a standard pulse generated by the clock. This pulse
- |
  may be again fed into the line by means of the transmitting crystal, or
- |
  we may feed in some altogether different signal. We also have the
- |
  possibility of leading the gated pulse to some other part of the
- |
  calculator, if we have need of that information at the time. Making use
- |
  of the information does not of course preclude keeping it also. (Turing
- |
  [1945], p. 375)
- |2+

- |2+

- |2+

- |
  Mercury delay line memory was used in EDSAC, BINAC, SEAC, Pilot
- |
  Model ACE, EDVAC, DEUCE, and full-scale ACE (1958). The chief advantage
- |
  of the delay line as a memory medium was, as Turing put it, that delay
- |
  lines were "already a going concern" (Turing [1947], p. 380). The
- |
  fundamental disadvantages of the delay line were that random access is
- |
  impossible and, moreover, the time taken for an instruction, or number,
- |
  to emerge from a delay line depends on where in the line it happens to
- |
  be.
- |2+

- |2+

- |2+

- |
  In order to minimize waiting-time, Turing arranged for instructions
- |
  to be stored not in consecutive positions in the delay line, but in
- |
  relative positions selected by the programmer in such a way that each
- |
  instruction would emerge at exactly the time it was required, in so far
- |
  as this was possible. Each instruction contained a specification of the
- |
  location of the next. This system subsequently became known as
- |
  ‘optimum coding’. It was an integral feature of every
- |
  version of the ACE design. Optimum coding made for difficult and untidy
- |
  programming, but the advantage in terms of speed was considerable.
- |
  Thanks to optimum coding, the Pilot Model ACE was able to do a floating
- |
  point multiplication in 3 milliseconds (Wilkes's EDSAC required 4.5
- |
  milliseconds to perform a single fixed point multiplication).
- |2+

- |2+

- |2+

- |
  In the Williams tube or electrostatic memory, previously mentioned,
- |
  a two-dimensional rectangular array of binary digits was stored on the
- |
  face of a commercially-available cathode ray tube. Access to data was
- |
  immediate. Williams tube memories were employed in the Manchester
- |
  series of machines, SWAC, the IAS computer, and the IBM 701, and a
- |
  modified form of Williams tube in Whirlwind I (until replacement by
- |
  magnetic core in 1953).
- |2+

- |2+

- |2+

- |
  Drum memories, in which data was stored magnetically on the surface
- |
  of a metal cylinder, were developed on both sides of the Atlantic. The
- |
  initial idea appears to have been Eckert's. The drum provided
- |
  reasonably large quantities of medium-speed memory and was used to
- |
  supplement a high-speed acoustic or electrostatic memory. In 1949, the
- |
  Manchester computer was successfully equipped with a drum memory; this
- |
  was constructed by the Manchester engineers on the model of a drum
- |
  developed by Andrew Booth at Birkbeck College, London.
- |2+

- |2+

- |2+

- |
  The final major event in the early history of electronic computation
- |
  was the development of magnetic core memory. Jay Forrester realised
- |
  that the hysteresis properties of magnetic core (normally used in
- |
  transformers) lent themselves to the implementation of a
- |
  three-dimensional solid array of randomly accessible storage points. In
- |
  1949, at Massachusetts Institute of Technology, he began to investigate
- |
  this idea empirically. Forrester's early experiments with metallic core
- |
  soon led him to develop the superior ferrite core memory. Digital
- |
  Equipment Corporation undertook to build a computer similar to the
- |
  Whirlwind I as a test vehicle for a ferrite core memory. The Memory
- |
  Test Computer was completed in 1953. (This computer was used in 1954
- |
  for the first simulations of neural networks, by Belmont Farley and
- |
  Wesley Clark of MIT's Lincoln Laboratory (see Copeland and Proudfoot
- |
  [1996]).
- |2+

- |2+

- |2+

- |
  Once the absolute reliability, relative cheapness, high capacity and
- |
  permanent life of ferrite core memory became apparent, core soon
- |
  replaced other forms of high-speed memory. The IBM 704 and 705
- |
  computers (announced in May and October 1954, respectively) brought
- |
  core memory into wide use.
- |2+

- |2+

- |2+

- |2+

- |2+

- |
  Bibliography
- |2+

- |
  Works Cited
- |2+

- |
  Babbage, C. (ed. by Campbell-Kelly, M.), 1994, Passages from
- |
  the Life of a Philosopher, New Brunswick: Rutgers University
- |
  Press
- |2+

- |
  Bennett, S., 1976, ‘F.C. Williams: his contribution to the
- |
  development of automatic control’, National Archive for the
- |
  History of Computing, University of Manchester, England. (This is a
- |
  typescript based on interviews with Williams in 1976.)
- |2+

- |
  Bowker, G., and Giordano, R., 1993, ‘Interview with Tom
- |
  Kilburn’, Annals of the History of Computing,
- |
  15: 17–32.
- |2+

- |
  Copeland, B.J. (ed.), 2004, The Essential Turing Oxford
- |
  University Press
- |2+

- |
  Copeland, B.J. (ed.), 2005, Alan Turing's Automatic Computing
- |
  Engine: The Master Codebreaker's Struggle to Build the Modern
- |
  Computer Oxford University Press
- |2+

- |
  Copeland, B.J. and others, 2006, Colossus: The Secrets of
- |
  Bletchley Park's Codebreaking Computers Oxford University
- |
  Press
- |2+

- |
  Copeland, B.J., and Proudfoot, D., 1996, ‘On Alan Turing's
- |
  Anticipation of Connectionism’ Synthese,
- |
  108: 361–377
- |2+

- |
  Evans, C., 197?, interview with M.H.A. Newman in ‘The
- |
  Pioneers of Computing: an Oral History of Computing’, London:
- |
  Science Museum
- |2+

- |
  Fifer, S., 1961, Analog Computation: Theory, Techniques,
- |
  Applications New York: McGraw-Hill
- |2+

- |
  Ford, H., 1919, ‘Mechanical Movement’, Official
- |
  Gazette of the United States Patent Office, October 7, 1919:
- |
  48
- |2+

- |
  Goldstine, H., 1972, The Computer from Pascal to von
- |
  Neumann Princeton University Press
- |2+

- |
  Huskey, H.D., 1947, ‘The State of the Art in Electronic
- |
  Digital Computing in Britain and the United States’, in [Copeland
- |
  2005]
- |2+

- |
  Newman, M.H.A., 1948, ‘General Principles of the Design of
- |
  All-Purpose Computing Machines’ Proceedings of the Royal
- |
  Society of London, series A, 195 (1948):
- |
  271–274
- |2+

- |
  Randell, B., 1972, ‘On Alan Turing and the Origins of Digital
- |
  Computers’, in Meltzer, B., Michie, D. (eds), Machine
- |
  Intelligence 7, Edinburgh: Edinburgh University Press, 1972
- |2+

- |
  Smith, B.C., 1991, ‘The Owl and the Electric
- |
  Encyclopaedia’, Artificial Intelligence,
- |
  47: 251–288
- |2+

- |
  Thomson, J., 1876, ‘On an Integrating Machine Having a New
- |
  Kinematic Principle’ Proceedings of the Royal Society of
- |
  London, 24: 262–5
- |2+

- |
  Turing, A.M., 1936, ‘On Computable Numbers, with an
- |
  Application to the Entscheidungsproblem’ Proceedings of the
- |
  London Mathematical Society, Series 2, 42
- |
  (1936–37): 230–265. Reprinted in The Essential
- |
  Turing (Copeland [2004]).
- |2+

- |
  Turing, A.M, 1945, ‘Proposed Electronic Calculator’, in
- |
  Alan Turing's Automatic Computing Engine (Copeland
- |
  [2005])
- |2+

- |
  Turing, A.M., 1947, ‘Lecture on the Automatic Computing
- |
  Engine’, in The Essential Turing (Copeland [2004])
- |2+

- |
  Turing, A.M., and Wilkinson, J.H., 1946–7, ‘The
- |
  Turing-Wilkinson Lecture Series (1946-7)’, in Alan Turing's
- |
  Automatic Computing Engine (Copeland [2005])
- |2+

- |
  von Neumann, J., 1945, ‘First Draft of a Report on the
- |
  EDVAC’, in Stern, N. From ENIAC to UNIVAC: An Appraisal of
- |
  the Eckert-Mauchly Computers Bedford, Mass.: Digital Press (1981),
- |
  pp. 181–246
- |2+

- |
  Williams, F.C., 1975, ‘Early Computers at Manchester
- |
  University’ The Radio and Electronic Engineer,
- |
  45 (1975): 237–331
- |2+

- |
  Wynn-Williams, C.E., 1932, ‘A Thyratron "Scale of Two"
- |
  Automatic Counter’ Proceedings of the Royal Society of
- |
  London, series A, 136: 312–324
- |
  Further Reading
- |2+

- |
  Copeland, B.J., 2004, ‘Colossus — Its Origins and
- |
  Originators’ Annals of the History of Computing,
- |
  26: 38–45
- |2+

- |
  Metropolis, N., Howlett, J., Rota, G.C. (eds), 1980, A History
- |
  of Computing in the Twentieth Century New York: Academic
- |
  Press
- |2+

- |
  Randell, B. (ed.), 1982, The Origins of Digital Computers:
- |
  Selected Papers Berlin: Springer-Verlag
- |2+

- |
  Williams, M.R., 1997, A History of Computing Technology
- |
  Los Alamitos: IEEE Computer Society Press
- |2+

- |2+

- |2+

- |2+

- |
  Academic Tools
- |2+

- |2+

- |2+

- |
  How to cite this entry.
- |2+

- |
  Preview the PDF version of this entry at the Friends of the SEP Society.
- |2+

- |
  Look up this entry topic at the Indiana Philosophy Ontology Project (InPhO).
- |2+

- |
  Enhanced bibliography for this entry at PhilPapers, with links to its database.
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |
  Other Internet Resources
- |2+

- |
  The Turing Archive for the History of Computing
- |2+

- |
  The Alan Turing Home Page
- |2+

- |2+

- |2+

- |
  Charles Babbage Institute
- |2+

- |2+

- |
  The Computer Conservation Society (UK)
- |2+

- |
  CSIRAC (a.k.a. CSIR MARK I) Home Page
- |2+

- |2+

- |
  Logic and Computation Group at Penn
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |
  Related Entries
- |2+

- |2+

- |2+

- |2
   computability and complexity |
- |2
   function: recursive |
- |2
   Turing, Alan |
- |2
   Turing machines
- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- |2+

- " \n"
- |2+

- "  \n"
- "    \n"
- |2
   Copyright © 2006 by
- |2+

- |
  B. Jack Copeland
- |
  <jack.copeland@canterbury.ac.nz>
- "    \n"
- "  \n"
- |2+

- " \n"
- |2+

- |2+

- |2+

- "  \n"
- |2+

- |2+

- |2
    Open access to the Encyclopedia has been made possible, in part, with
- |2
    a financial contribution from the Indiana University Libraries.
- |2
    We gratefully acknowledge this support.
- |
  The SEP would like to congratulate the National Endowment for the Humanities on its 50th anniversary and express our indebtedness for the five generous grants it awarded our project from 1997 to 2007.
- |
  Readers who have benefited from the SEP are encouraged to examine the NEH’s anniversary page and, if inspired to do so, send a testimonial to neh50@neh.gov.
- |2+

- |2+

- "    \n"
- "   \n"
- |2+

- "     \n"
- |2+

- "    \n"
- |2+

- "      \n"
- "        \n"
- |2
             Browse
- |2
            Table of Contents
- |2
              What's New
- |2
              Random Entry
- |2
              Chronological
- |2
              Archives
- "          \n"
- "        \n"
- |2
             About
- |2
            Editorial Information
- |2
              About the SEP
- |2
              Editorial Board
- |2
              How to Cite the SEP
- |2
              Special Characters
- |2
              Advanced Tools
- |2
              Contact
- "          \n"
- "        \n"
- |2
             Support SEP
- |2
            Support the SEP
- |2
              PDFs for SEP Friends
- |2
              Make a Donation
- |2
              SEPIA for Libraries
- "          \n"
- "       \n"
- |2+

- "      \n"
- "        \n"
- |2
             Mirror Sites
- |2
            View this site from another server:
- "        \n"
- "        \n"
- "          \n"
- "             USA (Main Site) \n"
- |2
              CSLI, Stanford University
- "          \n"
- |2
             Australia
- |2
                SETIS, University of Sydney
- |2
               Netherlands
- |2
                ILLC, University of Amsterdam
- "          \n"
- "       \n"
- "      \n"
- "      \n"
- "        \n"
- |2
          The Stanford Encyclopedia of Philosophy is copyright © 2014 by The Metaphysics Research Lab, Center for the Study of Language and Information (CSLI), Stanford University
- |2
          Library of Congress Catalog Data: ISSN 1095-5054
- "       \n"
- |2+

- "     \n"
- |2+

- "   \n"
- |2+

- "   \n"
- "  \n"
- |2
      $('.dropdown-toggle').dropdown();
- "  \n"
- |2
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
- |2
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
- |2
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
- |2
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
- |2+

- |2
    ga('create', 'UA-40353515-1', 'stanford.edu');
- |2
    ga('send', 'pageview');
- |2+

- |2+

- |2+

- |
  Historically, computers were human clerks who calculated in accordance
- |
  with effective methods. These human computers did the sorts of
- |
  calculation nowadays carried out by electronic computers, and many
- |
  thousands of them were employed in commerce, government, and research
- |
  establishments. The term computing machine, used increasingly
- |
  from the 1920s, refers to any machine that does the work of a human
- |
  computer, i.e., any machine that calculates in accordance with
- |
  effective methods. During the late 1940s and early 1950s, with the
- |
  advent of electronic computing machines, the phrase ‘computing
- |
  machine’ gradually gave way simply to ‘computer’,
- |
  initially usually with the prefix ‘electronic’ or
- |
  ‘digital’. This entry surveys the history of these
- "machines. \n"
- |2+

- |2+

- |
  Charles Babbage was Lucasian Professor of Mathematics at Cambridge
- |
  University from 1828 to 1839 (a post formerly held by Isaac Newton).
- |
  Babbage's proposed Difference Engine was a special-purpose digital
- |
  computing machine for the automatic production of mathematical tables
- |
  (such as logarithm tables, tide tables, and astronomical tables). The
- |
  Difference Engine consisted entirely of mechanical components —
- |
  brass gear wheels, rods, ratchets, pinions, etc. Numbers were
- |
  represented in the decimal system by the positions of 10-toothed metal
- |
  wheels mounted in columns. Babbage exhibited a small working model in
- |
  1822. He never completed the full-scale machine that he had designed
- |
  but did complete several fragments. The largest — one ninth of
- |
  the complete calculator — is on display in the London Science
- |
  Museum. Baabage used it to perform serious computational work,
- |
  calculating various mathematical tables. In 1990, Babbage's Difference
- |
  Engine No. 2 was finally built from Babbage's designs and is also on
- "display at the London Science Museum. \n"
- |2+

- |
  The Swedes Georg and Edvard Scheutz (father and son) constructed a
- |
  modified version of Babbage's Difference Engine. Three were made, a
- |
  prototype and two commercial models, one of these being sold to an
- |
  observatory in Albany, New York, and the other to the
- |
  Registrar-General's office in London, where it calculated and printed
- |
  actuarial tables.
- |2+

- |
  Babbage's proposed Analytical Engine, considerably more ambitious
- |
  than the Difference Engine, was to have been a general-purpose
- |
  mechanical digital computer. The Analytical Engine was to have had a
- |
  memory store and a central processing unit (or ‘mill’) and
- |
  would have been able to select from among alternative actions
- |
  consequent upon the outcome of its previous actions (a facility
- |
  nowadays known as conditional branching). The behaviour of the
- |
  Analytical Engine would have been controlled by a program of
- |
  instructions contained on punched cards connected together with ribbons
- |
  (an idea that Babbage had adopted from the Jacquard weaving loom).
- |
  Babbage emphasised the generality of the Analytical Engine, saying
- |
  ‘the conditions which enable a finite machine to make
- |
  calculations of unlimited extent are fulfilled in the Analytical
- |
  Engine’ (Babbage [1994], p. 97).
- |2+

- |
  Babbage worked closely with Ada Lovelace, daughter of the poet
- |
  Byron, after whom the modern programming language ADA is named.
- |
  Lovelace foresaw the possibility of using the Analytical Engine for
- |
  non-numeric computation, suggesting that the Engine might even be
- |
  capable of composing elaborate pieces of music.
- |2+

- |
  A large model of the Analytical Engine was under construction at the
- |
  time of Babbage's death in 1871 but a full-scale version was never
- |
  built. Babbage's idea of a general-purpose calculating engine was never
- |
  forgotten, especially at Cambridge, and was on occasion a lively topic
- |
  of mealtime discussion at the war-time headquarters of the Government
- |
  Code and Cypher School, Bletchley Park, Buckinghamshire, birthplace of
- |
  the electronic digital computer.
- |2+

- |
  The earliest computing machines in wide use were not digital but
- |
  analog. In analog representation, properties of the representational
- |
  medium ape (or reflect or model) properties of the represented
- |
  state-of-affairs. (In obvious contrast, the strings of binary digits
- |
  employed in digital representation do not represent by means
- |
  of possessing some physical property — such as length —
- |
  whose magnitude varies in proportion to the magnitude of the property
- |
  that is being represented.) Analog representations form a diverse
- |
  class. Some examples: the longer a line on a road map, the longer the
- |
  road that the line represents; the greater the number of clear plastic
- |
  squares in an architect's model, the greater the number of windows in
- |
  the building represented; the higher the pitch of an acoustic depth
- |
  meter, the shallower the water. In analog computers, numerical
- |
  quantities are represented by, for example, the angle of rotation of a
- |
  shaft or a difference in electrical potential. Thus the output voltage
- |
  of the machine at a time might represent the momentary speed of the
- "object being modelled. \n"
- |2+

- |
  As the case of the architect's model makes plain, analog
- |
  representation may be discrete in nature (there is no such
- |
  thing as a fractional number of windows). Among computer scientists,
- |
  the term ‘analog’ is sometimes used narrowly, to indicate
- |
  representation of one continuously-valued quantity by another
- |
  (e.g., speed by voltage). As Brian Cantwell Smith has remarked:
- |2+

- |
  James Thomson, brother of Lord Kelvin, invented the mechanical
- |
  wheel-and-disc integrator that became the foundation of analog
- |
  computation (Thomson [1876]). The two brothers constructed a device for
- |
  computing the integral of the product of two given functions, and
- |
  Kelvin described (although did not construct) general-purpose analog
- |
  machines for integrating linear differential equations of any order and
- |
  for solving simultaneous linear equations. Kelvin's most successful
- |
  analog computer was his tide predicting machine, which remained in use
- |
  at the port of Liverpool until the 1960s. Mechanical analog devices
- |
  based on the wheel-and-disc integrator were in use during World War I
- |
  for gunnery calculations. Following the war, the design of the
- "integrator was considerably improved by Hannibal Ford (Ford [1919]). \n"
- |2+

- |
  Stanley Fifer reports that the first semi-automatic mechanical
- |
  analog computer was built in England by the Manchester firm of
- |
  Metropolitan Vickers prior to 1930 (Fifer [1961], p. 29); however, I
- |
  have so far been unable to verify this claim. In 1931, Vannevar Bush,
- |
  working at MIT, built the differential analyser, the first large-scale
- |
  automatic general-purpose mechanical analog computer. Bush's design was
- |
  based on the wheel and disc integrator. Soon copies of his machine were
- |
  in use around the world (including, at Cambridge and Manchester
- |
  Universities in England, differential analysers built out of kit-set
- |
  Meccano, the once popular engineering toy).
- |2+

- |
  It required a skilled mechanic equipped with a lead hammer to set up
- |
  Bush's mechanical differential analyser for each new job. Subsequently,
- |
  Bush and his colleagues replaced the wheel-and-disc integrators and
- |
  other mechanical components by electromechanical, and finally by
- |
  electronic, devices.
- |2+

- |
  A differential analyser may be conceptualised as a collection of
- |
  ‘black boxes’ connected together in such a way as to allow
- |
  considerable feedback. Each box performs a fundamental process, for
- |
  example addition, multiplication of a variable by a constant, and
- |
  integration. In setting up the machine for a given task, boxes are
- |
  connected together so that the desired set of fundamental processes is
- |
  executed. In the case of electrical machines, this was done typically
- |
  by plugging wires into sockets on a patch panel (computing machines
- |
  whose function is determined in this way are referred to as
- |
  ‘program-controlled’).
- |2+

- |
  Since all the boxes work in parallel, an electronic differential
- |
  analyser solves sets of equations very quickly. Against this has to be
- |
  set the cost of massaging the problem to be solved into the form
- |
  demanded by the analog machine, and of setting up the hardware to
- |
  perform the desired computation. A major drawback of analog computation
- |
  is the higher cost, relative to digital machines, of an increase in
- |
  precision. During the 1960s and 1970s, there was considerable interest
- |
  in ‘hybrid’ machines, where an analog section is controlled
- |
  by and programmed via a digital section. However, such machines are now
- |
  a rarity.
- |2+

- |
  In 1936, at Cambridge University, Turing invented the principle of the
- |
  modern computer. He described an abstract digital computing machine
- |
  consisting of a limitless memory and a scanner that moves back and
- |
  forth through the memory, symbol by symbol, reading what it finds and
- |
  writing further symbols (Turing [1936]). The actions of the scanner are
- |
  dictated by a program of instructions that is stored in the memory in
- |
  the form of symbols. This is Turing's stored-program concept, and
- |
  implicit in it is the possibility of the machine operating on and
- |
  modifying its own program. (In London in 1947, in the course of what
- |
  was, so far as is known, the earliest public lecture to mention
- |
  computer intelligence, Turing said, ‘What we want is a machine
- |
  that can learn from experience’, adding that the
- |
  ‘possibility of letting the machine alter its own instructions
- |
  provides the mechanism for this’ (Turing [1947] p. 393). Turing's
- |
  computing machine of 1936 is now known simply as the universal Turing
- |
  machine. Cambridge mathematician Max Newman remarked that right from
- |
  the start Turing was interested in the possibility of actually building
- |
  a computing machine of the sort that he had described (Newman in
- "interview with Christopher Evans in Evans [197?]. \n"
- |2+

- |
  From the start of the Second World War Turing was a leading
- |
  cryptanalyst at the Government Code and Cypher School, Bletchley Park.
- |
  Here he became familiar with Thomas Flowers' work involving large-scale
- |
  high-speed electronic switching (described below). However, Turing
- |
  could not turn to the project of building an electronic stored-program
- |
  computing machine until the cessation of hostilities in Europe in
- |
  1945.
- |2+

- |
  During the wartime years Turing did give considerable thought to the
- |
  question of machine intelligence. Colleagues at Bletchley Park recall
- |
  numerous off-duty discussions with him on the topic, and at one point
- |
  Turing circulated a typewritten report (now lost) setting out some of
- |
  his ideas. One of these colleagues, Donald Michie (who later founded
- |
  the Department of Machine Intelligence and Perception at the University
- |
  of Edinburgh), remembers Turing talking often about the possibility of
- |
  computing machines (1) learning from experience and (2) solving
- |
  problems by means of searching through the space of possible solutions,
- |
  guided by rule-of-thumb principles (Michie in interview with Copeland,
- |
  1995). The modern term for the latter idea is ‘heuristic
- |
  search’, a heuristic being any rule-of-thumb principle that cuts
- |
  down the amount of searching required in order to find a solution to a
- |
  problem. At Bletchley Park Turing illustrated his ideas on machine
- |
  intelligence by reference to chess. Michie recalls Turing experimenting
- |
  with heuristics that later became common in chess programming (in
- |
  particular minimax and best-first).
- |2+

- |
  Further information about Turing and the computer, including his
- |
  wartime work on codebreaking and his thinking about artificial
- |
  intelligence and artificial life, can be found in Copeland 2004.
- |2+

- |
  With some exceptions — including Babbage's purely mechanical
- |
  engines, and the finger-powered National Accounting Machine - early
- |
  digital computing machines were electromechanical. That is to say,
- |
  their basic components were small, electrically-driven, mechanical
- |
  switches called ‘relays’. These operate relatively slowly,
- |
  whereas the basic components of an electronic computer —
- |
  originally vacuum tubes (valves) — have no moving parts save
- |
  electrons and so operate extremely fast. Electromechanical digital
- |
  computing machines were built before and during the second world war by
- |
  (among others) Howard Aiken at Harvard University, George Stibitz at
- |
  Bell Telephone Laboratories, Turing at Princeton University and
- |
  Bletchley Park, and Konrad Zuse in Berlin. To Zuse belongs the honour
- |
  of having built the first working general-purpose program-controlled
- |
  digital computer. This machine, later called the Z3, was functioning in
- |
  1941. (A program-controlled computer, as opposed to a stored-program
- |
  computer, is set up for a new task by re-routing wires, by means of
- "plugs etc.) \n"
- |2+

- |
  Relays were too slow and unreliable a medium for large-scale
- |
  general-purpose digital computation (although Aiken made a valiant
- |
  effort). It was the development of high-speed digital techniques using
- |
  vacuum tubes that made the modern computer possible.
- |2+

- |
  The earliest extensive use of vacuum tubes for digital
- |
  data-processing appears to have been by the engineer Thomas Flowers,
- |
  working in London at the British Post Office Research Station at Dollis
- |
  Hill. Electronic equipment designed by Flowers in 1934, for controlling
- |
  the connections between telephone exchanges, went into operation in
- |
  1939, and involved between three and four thousand vacuum tubes running
- |
  continuously. In 1938–1939 Flowers worked on an experimental
- |
  electronic digital data-processing system, involving a high-speed data
- |
  store. Flowers' aim, achieved after the war, was that electronic
- |
  equipment should replace existing, less reliable, systems built from
- |
  relays and used in telephone exchanges. Flowers did not investigate the
- |
  idea of using electronic equipment for numerical calculation, but has
- |
  remarked that at the outbreak of war with Germany in 1939 he was
- |
  possibly the only person in Britain who realized that vacuum tubes
- |
  could be used on a large scale for high-speed digital computation. (See
- |
  Copeland 2006 for m more information on Flowers' work.)
- |2+

- |
  The earliest comparable use of vacuum tubes in the U.S. seems to have
- |
  been by John Atanasoff at what was then Iowa State College (now
- |
  University). During the period 1937–1942 Atanasoff developed
- |
  techniques for using vacuum tubes to perform numerical calculations
- |
  digitally. In 1939, with the assistance of his student Clifford Berry,
- |
  Atanasoff began building what is sometimes called the Atanasoff-Berry
- |
  Computer, or ABC, a small-scale special-purpose electronic digital
- |
  machine for the solution of systems of linear algebraic equations. The
- |
  machine contained approximately 300 vacuum tubes. Although the
- |
  electronic part of the machine functioned successfully, the computer as
- |
  a whole never worked reliably, errors being introduced by the
- |
  unsatisfactory binary card-reader. Work was discontinued in 1942 when
- "Atanasoff left Iowa State. \n"
- |2+

- |
  The first fully functioning electronic digital computer was Colossus,
- "used by the Bletchley Park cryptanalysts from February 1944. \n"
- |2+

- |
  From very early in the war the Government Code and Cypher School
- |
  (GC&CS) was successfully deciphering German radio communications
- |
  encoded by means of the Enigma system, and by early 1942 about 39,000
- |
  intercepted messages were being decoded each month, thanks to
- |
  electromechanical machines known as ‘bombes’. These were
- |
  designed by Turing and Gordon Welchman (building on earlier work by
- |
  Polish cryptanalysts).
- |2+

- |
  During the second half of 1941, messages encoded by means of a
- |
  totally different method began to be intercepted. This new cipher
- |
  machine, code-named ‘Tunny’ by Bletchley Park, was broken
- |
  in April 1942 and current traffic was read for the first time in July
- |
  of that year. Based on binary teleprinter code, Tunny was used in
- |
  preference to Morse-based Enigma for the encryption of high-level
- |
  signals, for example messages from Hitler and members of the German
- |
  High Command.
- |2+

- |
  The need to decipher this vital intelligence as rapidly as possible
- |
  led Max Newman to propose in November 1942 (shortly after his
- |
  recruitment to GC&CS from Cambridge University) that key parts of
- |
  the decryption process be automated, by means of high-speed electronic
- |
  counting devices. The first machine designed and built to Newman's
- |
  specification, known as the Heath Robinson, was relay-based with
- |
  electronic circuits for counting. (The electronic counters were
- |
  designed by C.E. Wynn-Williams, who had been using thyratron tubes in
- |
  counting circuits at the Cavendish Laboratory, Cambridge, since 1932
- |
  [Wynn-Williams 1932].) Installed in June 1943, Heath Robinson was
- |
  unreliable and slow, and its high-speed paper tapes were continually
- |
  breaking, but it proved the worth of Newman's idea. Flowers recommended
- |
  that an all-electronic machine be built instead, but he received no
- |
  official encouragement from GC&CS. Working independently at the
- |
  Post Office Research Station at Dollis Hill, Flowers quietly got on
- |
  with constructing the world's first large-scale programmable electronic
- |
  digital computer. Colossus I was delivered to Bletchley Park in January
- |
  1943.
- |2+

- |
  By the end of the war there were ten Colossi working round the clock
- |
  at Bletchley Park. From a cryptanalytic viewpoint, a major difference
- |
  between the prototype Colossus I and the later machines was the
- |
  addition of the so-called Special Attachment, following a key discovery
- |
  by cryptanalysts Donald Michie and Jack Good. This broadened the
- |
  function of Colossus from ‘wheel setting’ — i.e.,
- |
  determining the settings of the encoding wheels of the Tunny machine
- |
  for a particular message, given the ‘patterns’ of the
- |
  wheels — to ‘wheel breaking’, i.e., determining the
- |
  wheel patterns themselves. The wheel patterns were eventually changed
- |
  daily by the Germans on each of the numerous links between the German
- |
  Army High Command and Army Group commanders in the field. By 1945 there
- |
  were as many 30 links in total. About ten of these were broken and read
- |
  regularly.
- |2+

- |
  Colossus I contained approximately 1600 vacuum tubes and each of the
- |
  subsequent machines approximately 2400 vacuum tubes. Like the smaller
- |
  ABC, Colossus lacked two important features of modern computers. First,
- |
  it had no internally stored programs. To set it up for a new task, the
- |
  operator had to alter the machine's physical wiring, using plugs and
- |
  switches. Second, Colossus was not a general-purpose machine, being
- |
  designed for a specific cryptanalytic task involving counting and
- |
  Boolean operations.
- |2+

- |
  F.H. Hinsley, official historian of GC&CS, has estimated that
- |
  the war in Europe was shortened by at least two years as a result of
- |
  the signals intelligence operation carried out at Bletchley Park, in
- |
  which Colossus played a major role. Most of the Colossi were destroyed
- |
  once hostilities ceased. Some of the electronic panels ended up at
- |
  Newman's Computing Machine Laboratory in Manchester (see below), all
- |
  trace of their original use having been removed. Two Colossi were
- |
  retained by GC&CS (renamed GCHQ following the end of the war). The
- |
  last Colossus is believed to have stopped running in 1960.
- |2+

- |
  Those who knew of Colossus were prohibited by the Official Secrets
- |
  Act from sharing their knowledge. Until the 1970s, few had any idea
- |
  that electronic computation had been used successfully during the
- |
  second world war. In 1970 and 1975, respectively, Good and Michie
- |
  published notes giving the barest outlines of Colossus. By 1983,
- |
  Flowers had received clearance from the British Government to publish a
- |
  partial account of the hardware of Colossus I. Details of the later
- |
  machines and of the Special Attachment, the uses to which the Colossi
- |
  were put, and the cryptanalytic algorithms that they ran, have only
- |
  recently been declassified. (For the full account of Colossus and the
- |
  attack on Tunny see Copeland 2006.)
- |2+

- |
  To those acquainted with the universal Turing machine of 1936, and
- |
  the associated stored-program concept, Flowers' racks of digital
- |
  electronic equipment were proof of the feasibility of using large
- |
  numbers of vacuum tubes to implement a high-speed general-purpose
- |
  stored-program computer. The war over, Newman lost no time in
- |
  establishing the Royal Society Computing Machine Laboratory at
- |
  Manchester University for precisely that purpose. A few months after
- |
  his arrival at Manchester, Newman wrote as follows to the Princeton
- |
  mathematician John von Neumann (February 1946):
- |2+

- |
  Turing and Newman were thinking along similar lines. In 1945 Turing
- |
  joined the National Physical Laboratory (NPL) in London, his brief to
- |
  design and develop an electronic stored-program digital computer for
- |
  scientific work. (Artificial Intelligence was not far from Turing's
- |
  thoughts: he described himself as ‘building a brain’ and
- |
  remarked in a letter that he was ‘more interested in the
- |
  possibility of producing models of the action of the brain than in the
- |
  practical applications to computing’.) John Womersley, Turing's
- |
  immediate superior at NPL, christened Turing's proposed machine the
- |
  Automatic Computing Engine, or ACE, in homage to Babbage's Difference
- "Engine and Analytical Engine. \n"
- |2+

- |
  Turing's 1945 report ‘Proposed Electronic Calculator’
- |
  gave the first relatively complete specification of an electronic
- |
  stored-program general-purpose digital computer. The report is
- |
  reprinted in full in Copeland 2005.
- |2+

- |
  The first electronic stored-program digital computer to be proposed
- |
  in the U.S. was the EDVAC (see below). The ‘First Draft of a
- |
  Report on the EDVAC’ (May 1945), composed by von Neumann,
- |
  contained little engineering detail, in particular concerning
- |
  electronic hardware (owing to restrictions in the U.S.). Turing's
- |
  ‘Proposed Electronic Calculator’, on the other hand,
- |
  supplied detailed circuit designs and specifications of hardware units,
- |
  specimen programs in machine code, and even an estimate of the cost of
- |
  building the machine (£11,200). ACE and EDVAC differed
- |
  fundamentally from one another; for example, ACE employed distributed
- |
  processing, while EDVAC had a centralised structure.
- |2+

- |
  Turing saw that speed and memory were the keys to computing.
- |
  Turing's colleague at NPL, Jim Wilkinson, observed that Turing
- |
  ‘was obsessed with the idea of speed on the machine’
- |
  [Copeland 2005, p. 2]. Turing's design had much in common with today's
- |
  RISC architectures and it called for a high-speed memory of roughly the
- |
  same capacity as an early Macintosh computer (enormous by the standards
- |
  of his day). Had Turing's ACE been built as planned it would have been
- |
  in a different league from the other early computers. However, progress
- |
  on Turing's Automatic Computing Engine ran slowly, due to
- |
  organisational difficulties at NPL, and in 1948 a ‘very fed
- |
  up’ Turing (Robin Gandy's description, in interview with
- |
  Copeland, 1995) left NPL for Newman's Computing Machine Laboratory at
- |
  Manchester University. It was not until May 1950 that a small pilot
- |
  model of the Automatic Computing Engine, built by Wilkinson, Edward
- |
  Newman, Mike Woodger, and others, first executed a program. With an
- |
  operating speed of 1 MHz, the Pilot Model ACE was for some time the
- |
  fastest computer in the world.
- |2+

- |
  Sales of DEUCE, the production version of the Pilot Model ACE, were
- |
  buoyant — confounding the suggestion, made in 1946 by the
- |
  Director of the NPL, Sir Charles Darwin, that ‘it is very
- |
  possible that … one machine would suffice to solve all the
- |
  problems that are demanded of it from the whole country’
- |
  [Copeland 2005, p. 4]. The fundamentals of Turing's ACE design were
- |
  employed by Harry Huskey (at Wayne State University, Detroit) in the
- |
  Bendix G15 computer (Huskey in interview with Copeland, 1998). The G15
- |
  was arguably the first personal computer; over 400 were sold worldwide.
- |
  DEUCE and the G15 remained in use until about 1970. Another computer
- |
  deriving from Turing's ACE design, the MOSAIC, played a role in
- |
  Britain's air defences during the Cold War period; other derivatives
- |
  include the Packard-Bell PB250 (1961). (More information about these
- |
  early computers is given in [Copeland 2005].)
- |2+

- |
  The earliest general-purpose stored-program electronic digital computer
- |
  to work was built in Newman's Computing Machine Laboratory at
- |
  Manchester University. The Manchester ‘Baby’, as it became
- |
  known, was constructed by the engineers F.C. Williams and Tom Kilburn,
- |
  and performed its first calculation on 21 June 1948. The tiny program,
- |
  stored on the face of a cathode ray tube, was just seventeen
- |
  instructions long. A much enlarged version of the machine, with a
- |
  programming system designed by Turing, became the world's first
- |
  commercially available computer, the Ferranti Mark I. The first to be
- |
  completed was installed at Manchester University in February 1951; in
- "all about ten were sold, in Britain, Canada, Holland and Italy. \n"
- |2+

- |
  The fundamental logico-mathematical contributions by Turing and
- |
  Newman to the triumph at Manchester have been neglected, and the
- |
  Manchester machine is nowadays remembered as the work of Williams and
- |
  Kilburn. Indeed, Newman's role in the development of computers has
- |
  never been sufficiently emphasised (due perhaps to his thoroughly
- |
  self-effacing way of relating the relevant events).
- |2+

- |
  It was Newman who, in a lecture in Cambridge in 1935, introduced
- |
  Turing to the concept that led directly to the Turing machine: Newman
- |
  defined a constructive process as one that a machine can carry
- |
  out (Newman in interview with Evans, op. cit.). As a result of his
- |
  knowledge of Turing's work, Newman became interested in the
- |
  possibilities of computing machinery in, as he put it, ‘a rather
- |
  theoretical way’. It was not until Newman joined GC&CS in
- |
  1942 that his interest in computing machinery suddenly became
- |
  practical, with his realisation that the attack on Tunny could be
- |
  mechanised. During the building of Colossus, Newman tried to interest
- |
  Flowers in Turing's 1936 paper — birthplace of the stored-program
- |
  concept - but Flowers did not make much of Turing's arcane notation.
- |
  There is no doubt that by 1943, Newman had firmly in mind the idea of
- |
  using electronic technology in order to construct a stored-program
- |
  general-purpose digital computing machine.
- |2+

- |
  In July of 1946 (the month in which the Royal Society approved
- |
  Newman's application for funds to found the Computing Machine
- |
  Laboratory), Freddie Williams, working at the Telecommunications
- |
  Research Establishment, Malvern, began the series of experiments on
- |
  cathode ray tube storage that was to lead to the Williams tube memory.
- |
  Williams, until then a radar engineer, explains how it was that he came
- |
  to be working on the problem of computer memory:
- |2+

- |
  Newman learned of Williams' work, and with the able help of Patrick
- |
  Blackett, Langworthy Professor of Physics at Manchester and one of the
- |
  most powerful figures in the University, was instrumental in the
- |
  appointment of the 35 year old Williams to the recently vacated Chair
- |
  of Electro-Technics at Manchester. (Both were members of the appointing
- |
  committee (Kilburn in interview with Copeland, 1997).) Williams
- |
  immediately had Kilburn, his assistant at Malvern, seconded to
- |
  Manchester. To take up the story in Williams' own words:
- |2+

- |
  Elsewhere Williams is explicit concerning Turing's role and gives
- |
  something of the flavour of the explanation that he and Kilburn
- |
  received:
- |2+

- |
  It seems that Newman must have used much the same words with
- |
  Williams and Kilburn as he did in an address to the Royal Society on
- |
  4th March 1948:
- |2+

- |
  Following this explanation of Turing's three-address concept (source
- |
  1, source 2, destination, function) Newman went on to describe program
- |
  storage (‘the orders shall be in a series of houses X1, X2,
- |
  …’) and conditional branching. He then summed up:
- |2+

- |
  In a letter written in 1972 Williams described in some detail what
- |
  he and Kilburn were told by Newman:
- |2+

- |
  Turing's early input to the developments at Manchester, hinted at by
- |
  Williams in his above-quoted reference to Turing, may have been via the
- |
  lectures on computer design that Turing and Wilkinson gave in London
- |
  during the period December 1946 to February 1947 (Turing and Wilkinson
- |
  [1946–7]). The lectures were attended by representatives of
- |
  various organisations planning to use or build an electronic computer.
- |
  Kilburn was in the audience (Bowker and Giordano [1993]). (Kilburn
- |
  usually said, when asked from where he obtained his basic knowledge of
- |
  the computer, that he could not remember (letter from Brian Napper to
- |
  Copeland, 2002); for example, in a 1992 interview he said:
- |
  ‘Between early 1945 and early 1947, in that period, somehow or
- |
  other I knew what a digital computer was … Where I got this
- |
  knowledge from I've no idea’ (Bowker and Giordano [1993], p.
- |
  19).)
- |2+

- |
  Whatever role Turing's lectures may have played in informing
- |
  Kilburn, there is little doubt that credit for the Manchester computer
- |
  — called the ‘Newman-Williams machine’ in a
- |
  contemporary document (Huskey 1947) — belongs not only to
- |
  Williams and Kilburn but also to Newman, and that the influence on
- |
  Newman of Turing's 1936 paper was crucial, as was the influence of
- |
  Flowers' Colossus.
- |2+

- |
  The first working AI program, a draughts (checkers) player written
- |
  by Christopher Strachey, ran on the Ferranti Mark I in the Manchester
- |
  Computing Machine Laboratory. Strachey (at the time a teacher at Harrow
- |
  School and an amateur programmer) wrote the program with Turing's
- |
  encouragement and utilising the latter's recently completed
- |
  Programmers' Handbook for the Ferranti. (Strachey later became Director
- |
  of the Programming Research Group at Oxford University.) By the summer
- |
  of 1952, the program could, Strachey reported, ‘play a complete
- |
  game of draughts at a reasonable speed’. (Strachey's program formed the
- |
  basis for Arthur Samuel's well-known checkers program.) The first
- |
  chess-playing program, also, was written for the Manchester Ferranti,
- |
  by Dietrich Prinz; the program first ran in November 1951. Designed for
- |
  solving simple problems of the mate-in-two variety, the program would
- |
  examine every possible move until a solution was found. Turing started
- |
  to program his ‘Turochamp’ chess-player on the Ferranti
- |
  Mark I, but never completed the task. Unlike Prinz's program, the
- |
  Turochamp could play a complete game (when hand-simulated) and operated
- |
  not by exhaustive search but under the guidance of heuristics.
- |2+

- |
  The first fully functioning electronic digital computer to be built in
- |
  the U.S. was ENIAC, constructed at the Moore School of Electrical
- |
  Engineering, University of Pennsylvania, for the Army Ordnance
- |
  Department, by J. Presper Eckert and John Mauchly. Completed in 1945,
- |
  ENIAC was somewhat similar to the earlier Colossus, but considerably
- |
  larger and more flexible (although far from general-purpose). The
- |
  primary function for which ENIAC was designed was the calculation of
- |
  tables used in aiming artillery. ENIAC was not a stored-program
- |
  computer, and setting it up for a new job involved reconfiguring the
- |
  machine by means of plugs and switches. For many years, ENIAC was
- |
  believed to have been the first functioning electronic digital
- "computer, Colossus being unknown to all but a few. \n"
- |2+

- |
  In 1944, John von Neumann joined the ENIAC group. He had become
- |
  ‘intrigued’ (Goldstine's word, [1972], p. 275) with
- |
  Turing's universal machine while Turing was at Princeton University
- |
  during 1936–1938. At the Moore School, von Neumann emphasised the
- |
  importance of the stored-program concept for electronic computing,
- |
  including the possibility of allowing the machine to modify its own
- |
  program in useful ways while running (for example, in order to control
- |
  loops and branching). Turing's paper of 1936 (‘On Computable
- |
  Numbers, with an Application to the Entscheidungsproblem’) was
- |
  required reading for members of von Neumann's post-war computer project
- |
  at the Institute for Advanced Study, Princeton University (letter from
- |
  Julian Bigelow to Copeland, 2002; see also Copeland [2004], p. 23).
- |
  Eckert appears to have realised independently, and prior to von
- |
  Neumann's joining the ENIAC group, that the way to take full advantage
- |
  of the speed at which data is processed by electronic circuits is to
- |
  place suitably encoded instructions for controlling the processing in
- |
  the same high-speed storage devices that hold the data itself
- |
  (documented in Copeland [2004], pp. 26–7). In 1945, while ENIAC
- |
  was still under construction, von Neumann produced a draft report,
- |
  mentioned previously, setting out the ENIAC group's ideas for an
- |
  electronic stored-program general-purpose digital computer, the EDVAC
- |
  (von Neuman [1945]). The EDVAC was completed six years later, but not
- |
  by its originators, who left the Moore School to build computers
- |
  elsewhere. Lectures held at the Moore School in 1946 on the proposed
- |
  EDVAC were widely attended and contributed greatly to the dissemination
- |
  of the new ideas.
- |2+

- |
  Von Neumann was a prestigious figure and he made the concept of a
- |
  high-speed stored-program digital computer widely known through his
- |
  writings and public addresses. As a result of his high profile in the
- |
  field, it became customary, although historically inappropriate, to
- |
  refer to electronic stored-program digital computers as ‘von
- |
  Neumann machines’.
- |2+

- |
  The Los Alamos physicist Stanley Frankel, responsible with von
- |
  Neumann and others for mechanising the large-scale calculations
- |
  involved in the design of the atomic bomb, has described von Neumann's
- |
  view of the importance of Turing's 1936 paper, in a letter:
- |2+

- "Other notable early stored-program electronic digital computers were: \n"
- |2+

- |
  The EDVAC and ACE proposals both advocated the use of mercury-filled
- |
  tubes, called ‘delay lines’, for high-speed internal
- |
  memory. This form of memory is known as acoustic memory. Delay lines
- |
  had initially been developed for echo cancellation in radar; the idea
- |
  of using them as memory devices originated with Eckert at the Moore
- "School. Here is Turing's description: \n"
- |2+

- |
  Mercury delay line memory was used in EDSAC, BINAC, SEAC, Pilot
- |
  Model ACE, EDVAC, DEUCE, and full-scale ACE (1958). The chief advantage
- |
  of the delay line as a memory medium was, as Turing put it, that delay
- |
  lines were "already a going concern" (Turing [1947], p. 380). The
- |
  fundamental disadvantages of the delay line were that random access is
- |
  impossible and, moreover, the time taken for an instruction, or number,
- |
  to emerge from a delay line depends on where in the line it happens to
- |
  be.
- |2+

- |
  In order to minimize waiting-time, Turing arranged for instructions
- |
  to be stored not in consecutive positions in the delay line, but in
- |
  relative positions selected by the programmer in such a way that each
- |
  instruction would emerge at exactly the time it was required, in so far
- |
  as this was possible. Each instruction contained a specification of the
- |
  location of the next. This system subsequently became known as
- |
  ‘optimum coding’. It was an integral feature of every
- |
  version of the ACE design. Optimum coding made for difficult and untidy
- |
  programming, but the advantage in terms of speed was considerable.
- |
  Thanks to optimum coding, the Pilot Model ACE was able to do a floating
- |
  point multiplication in 3 milliseconds (Wilkes's EDSAC required 4.5
- |
  milliseconds to perform a single fixed point multiplication).
- |2+

- |
  In the Williams tube or electrostatic memory, previously mentioned,
- |
  a two-dimensional rectangular array of binary digits was stored on the
- |
  face of a commercially-available cathode ray tube. Access to data was
- |
  immediate. Williams tube memories were employed in the Manchester
- |
  series of machines, SWAC, the IAS computer, and the IBM 701, and a
- |
  modified form of Williams tube in Whirlwind I (until replacement by
- |
  magnetic core in 1953).
- |2+

- |
  Drum memories, in which data was stored magnetically on the surface
- |
  of a metal cylinder, were developed on both sides of the Atlantic. The
- |
  initial idea appears to have been Eckert's. The drum provided
- |
  reasonably large quantities of medium-speed memory and was used to
- |
  supplement a high-speed acoustic or electrostatic memory. In 1949, the
- |
  Manchester computer was successfully equipped with a drum memory; this
- |
  was constructed by the Manchester engineers on the model of a drum
- |
  developed by Andrew Booth at Birkbeck College, London.
- |2+

- |
  The final major event in the early history of electronic computation
- |
  was the development of magnetic core memory. Jay Forrester realised
- |
  that the hysteresis properties of magnetic core (normally used in
- |
  transformers) lent themselves to the implementation of a
- |
  three-dimensional solid array of randomly accessible storage points. In
- |
  1949, at Massachusetts Institute of Technology, he began to investigate
- |
  this idea empirically. Forrester's early experiments with metallic core
- |
  soon led him to develop the superior ferrite core memory. Digital
- |
  Equipment Corporation undertook to build a computer similar to the
- |
  Whirlwind I as a test vehicle for a ferrite core memory. The Memory
- |
  Test Computer was completed in 1953. (This computer was used in 1954
- |
  for the first simulations of neural networks, by Belmont Farley and
- |
  Wesley Clark of MIT's Lincoln Laboratory (see Copeland and Proudfoot
- |
  [1996]).
- |2+

- |
  Once the absolute reliability, relative cheapness, high capacity and
- |
  permanent life of ferrite core memory became apparent, core soon
- |
  replaced other forms of high-speed memory. The IBM 704 and 705
- |
  computers (announced in May and October 1954, respectively) brought
- |
  core memory into wide use.
- |2+

- |2
   computability and complexity |
- |2
   function: recursive |
- |2
   Turing, Alan |
- |2
   Turing machines
- |2+

- |2+

- |2
   Copyright © 2006 by
- |2+

- |
  B. Jack Copeland
- |
  <jack.copeland@canterbury.ac.nz>
- "    View this site from another server:The Stanford Encyclopedia of Philosophy
  is copyright © 2014 by The Metaphysics Research Lab, Center for the Study of Language
  and Information (CSLI), Stanford UniversityLibrary of Congress Catalog Data: ISSN
  1095-5054"
index:
  stanford: !ruby/object:Word
    word: stanford
    stem: stanford
    docFrequency: 8.0
    docPositions:
    - 6
    - 1311
    - 1322
    - 1339
    - 1991
  encyclopedia: !ruby/object:Word
    word: encyclopedia
    stem: encyclopedia
    docFrequency: 5.0
    docPositions:
    - 6
    - 1261
    - 1322
    - 1991
  philosophy: !ruby/object:Word
    word: philosophy
    stem: philosophi
    docFrequency: 5.0
    docPositions:
    - 6
    - 1192
    - 1322
    - 1991
  menu: !ruby/object:Word
    word: menu
    stem: menu
    docFrequency: 2.0
    docPositions:
    - 12
  browse: !ruby/object:Word
    word: browse
    stem: brows
    docFrequency: 3.0
    docPositions:
    - 14
    - 1277
  table: !ruby/object:Word
    word: table
    stem: tabl
    docFrequency: 3.0
    docPositions:
    - 15
    - 1278
  contents: !ruby/object:Word
    word: contents
    stem: content
    docFrequency: 4.0
    docPositions:
    - 15
    - 64
    - 1278
  s: !ruby/object:Word
    word: s
    stem: s
    docFrequency: 168.0
    docPositions:
    - 16
    - 123
    - 149
    - 160
    - 161
    - 167
    - 170
    - 175
    - 201
    - 202
    - 222
    - 232
    - 255
    - 269
    - 278
    - 319
    - 326
    - 373
    - 421
    - 469
    - 476
    - 480
    - 507
    - 519
    - 556
    - 563
    - 567
    - 568
    - 569
    - 574
    - 582
    - 585
    - 596
    - 598
    - 601
    - 603
    - 605
    - 606
    - 620
    - 625
    - 626
    - 635
    - 641
    - 651
    - 661
    - 667
    - 668
    - 676
    - 711
    - 730
    - 736
    - 755
    - 803
    - 820
    - 825
    - 833
    - 834
    - 838
    - 839
    - 845
    - 854
    - 869
    - 870
    - 875
    - 877
    - 881
    - 887
    - 908
    - 909
    - 912
    - 935
    - 950
    - 954
    - 959
    - 970
    - 1016
    - 1033
    - 1048
    - 1054
    - 1077
    - 1089
    - 1090
    - 1094
    - 1097
    - 1105
    - 1143
    - 1150
    - 1265
    - 1279
    - 1334
    - 1335
    - 1336
    - 1361
    - 1372
    - 1373
    - 1377
    - 1380
    - 1383
    - 1405
    - 1406
    - 1422
    - 1430
    - 1443
    - 1455
    - 1462
    - 1495
    - 1502
    - 1539
    - 1579
    - 1617
    - 1624
    - 1628
    - 1651
    - 1661
    - 1691
    - 1695
    - 1696
    - 1697
    - 1700
    - 1706
    - 1709
    - 1718
    - 1720
    - 1723
    - 1725
    - 1727
    - 1728
    - 1740
    - 1745
    - 1746
    - 1751
    - 1757
    - 1765
    - 1773
    - 1779
    - 1780
    - 1786
    - 1802
    - 1810
    - 1818
    - 1833
    - 1838
    - 1844
    - 1845
    - 1849
    - 1850
    - 1856
    - 1861
    - 1874
    - 1875
    - 1880
    - 1882
    - 1886
    - 1892
    - 1909
    - 1910
    - 1919
    - 1940
    - 1953
    - 1966
    - 1972
  new: !ruby/object:Word
    word: new
    stem: new
    docFrequency: 23.0
    docPositions:
    - 16
    - 169
    - 278
    - 388
    - 455
    - 506
    - 794
    - 861
    - 893
    - 1074
    - 1106
    - 1132
    - 1172
    - 1279
    - 1335
    - 1379
    - 1462
    - 1554
    - 1605
    - 1650
    - 1868
    - 1898
  random: !ruby/object:Word
    word: random
    stem: random
    docFrequency: 5.0
    docPositions:
    - 17
    - 999
    - 1280
    - 1925
  entry: !ruby/object:Word
    word: entry
    stem: entri
    docFrequency: 11.0
    docPositions:
    - 17
    - 62
    - 64
    - 103
    - 1188
    - 1190
    - 1192
    - 1194
    - 1280
    - 1355
  chronological: !ruby/object:Word
    word: chronological
    stem: chronolog
    docFrequency: 3.0
    docPositions:
    - 18
    - 1281
  archives: !ruby/object:Word
    word: archives
    stem: archiv
    docFrequency: 3.0
    docPositions:
    - 19
    - 1282
  editorial: !ruby/object:Word
    word: editorial
    stem: editori
    docFrequency: 5.0
    docPositions:
    - 22
    - 24
    - 1286
    - 1288
  information: !ruby/object:Word
    word: information
    stem: inform
    docFrequency: 15.0
    docPositions:
    - 22
    - 365
    - 415
    - 627
    - 795
    - 976
    - 989
    - 990
    - 1286
    - 1322
    - 1535
    - 1577
    - 1747
    - 1991
  sep: !ruby/object:Word
    word: sep
    stem: sep
    docFrequency: 14.0
    docPositions:
    - 23
    - 25
    - 30
    - 31
    - 32
    - 1190
    - 1264
    - 1265
    - 1287
    - 1289
    - 1295
    - 1296
    - 1297
  board: !ruby/object:Word
    word: board
    stem: board
    docFrequency: 3.0
    docPositions:
    - 24
    - 1288
  cite: !ruby/object:Word
    word: cite
    stem: cite
    docFrequency: 4.0
    docPositions:
    - 25
    - 1188
    - 1289
  special: !ruby/object:Word
    word: special
    stem: special
    docFrequency: 11.0
    docPositions:
    - 26
    - 149
    - 427
    - 489
    - 533
    - 1290
    - 1361
    - 1585
    - 1635
    - 1673
  characters: !ruby/object:Word
    word: characters
    stem: charact
    docFrequency: 3.0
    docPositions:
    - 26
    - 1290
  advanced: !ruby/object:Word
    word: advanced
    stem: advanc
    docFrequency: 6.0
    docPositions:
    - 27
    - 878
    - 952
    - 1291
    - 1883
  tools: !ruby/object:Word
    word: tools
    stem: tool
    docFrequency: 6.0
    docPositions:
    - 27
    - 66
    - 135
    - 1184
    - 1291
  contact: !ruby/object:Word
    word: contact
    stem: contact
    docFrequency: 4.0
    docPositions:
    - 28
    - 974
    - 1292
  support: !ruby/object:Word
    word: support
    stem: support
    docFrequency: 6.0
    docPositions:
    - 30
    - 31
    - 1263
    - 1295
    - 1296
  pdfs: !ruby/object:Word
    word: pdfs
    stem: pdf
    docFrequency: 3.0
    docPositions:
    - 32
    - 1297
  friends: !ruby/object:Word
    word: friends
    stem: friend
    docFrequency: 5.0
    docPositions:
    - 32
    - 67
    - 1190
    - 1297
  make: !ruby/object:Word
    word: make
    stem: make
    docFrequency: 7.0
    docPositions:
    - 33
    - 186
    - 668
    - 1298
    - 1394
    - 1780
  donation: !ruby/object:Word
    word: donation
    stem: donat
    docFrequency: 3.0
    docPositions:
    - 33
    - 1298
  sepia: !ruby/object:Word
    word: sepia
    stem: sepia
    docFrequency: 3.0
    docPositions:
    - 34
    - 1299
  libraries: !ruby/object:Word
    word: libraries
    stem: librari
    docFrequency: 4.0
    docPositions:
    - 34
    - 1262
    - 1299
  navigation: !ruby/object:Word
    word: navigation
    stem: navig
    docFrequency: 2.0
    docPositions:
    - 62
  bibliography: !ruby/object:Word
    word: bibliography
    stem: bibliographi
    docFrequency: 5.0
    docPositions:
    - 65
    - 133
    - 1069
    - 1194
  academic: !ruby/object:Word
    word: academic
    stem: academ
    docFrequency: 5.0
    docPositions:
    - 66
    - 135
    - 1172
    - 1184
  pdf: !ruby/object:Word
    word: pdf
    stem: pdf
    docFrequency: 3.0
    docPositions:
    - 67
    - 1190
  preview: !ruby/object:Word
    word: preview
    stem: preview
    docFrequency: 3.0
    docPositions:
    - 67
    - 1190
  author: !ruby/object:Word
    word: author
    stem: author
    docFrequency: 2.0
    docPositions:
    - 68
  and: !ruby/object:Word
    word: and
    stem: and
    docFrequency: 313.0
    docPositions:
    - 68
    - 94
    - 95
    - 99
    - 127
    - 151
    - 161
    - 166
    - 168
    - 169
    - 170
    - 178
    - 203
    - 205
    - 250
    - 252
    - 254
    - 258
    - 270
    - 271
    - 279
    - 280
    - 288
    - 301
    - 304
    - 306
    - 315
    - 316
    - 319
    - 320
    - 336
    - 347
    - 350
    - 352
    - 361
    - 365
    - 366
    - 367
    - 374
    - 380
    - 381
    - 383
    - 384
    - 393
    - 405
    - 410
    - 444
    - 446
    - 449
    - 457
    - 460
    - 469
    - 475
    - 488
    - 490
    - 497
    - 498
    - 503
    - 507
    - 509
    - 529
    - 533
    - 534
    - 535
    - 540
    - 560
    - 562
    - 564
    - 570
    - 587
    - 588
    - 589
    - 595
    - 599
    - 604
    - 609
    - 624
    - 637
    - 638
    - 644
    - 648
    - 649
    - 650
    - 684
    - 685
    - 687
    - 692
    - 693
    - 703
    - 704
    - 711
    - 712
    - 715
    - 716
    - 717
    - 718
    - 719
    - 725
    - 733
    - 736
    - 740
    - 741
    - 742
    - 746
    - 749
    - 750
    - 758
    - 764
    - 769
    - 775
    - 778
    - 780
    - 781
    - 785
    - 789
    - 805
    - 806
    - 809
    - 813
    - 815
    - 824
    - 833
    - 834
    - 846
    - 849
    - 856
    - 858
    - 861
    - 862
    - 875
    - 880
    - 892
    - 897
    - 899
    - 907
    - 913
    - 917
    - 919
    - 922
    - 924
    - 935
    - 954
    - 965
    - 973
    - 982
    - 985
    - 996
    - 1000
    - 1013
    - 1025
    - 1034
    - 1053
    - 1054
    - 1059
    - 1061
    - 1062
    - 1082
    - 1093
    - 1097
    - 1116
    - 1124
    - 1128
    - 1149
    - 1159
    - 1167
    - 1217
    - 1230
    - 1264
    - 1265
    - 1322
    - 1346
    - 1347
    - 1351
    - 1363
    - 1373
    - 1376
    - 1378
    - 1379
    - 1380
    - 1386
    - 1407
    - 1409
    - 1438
    - 1440
    - 1442
    - 1446
    - 1456
    - 1457
    - 1463
    - 1464
    - 1470
    - 1481
    - 1484
    - 1486
    - 1491
    - 1492
    - 1495
    - 1496
    - 1510
    - 1519
    - 1522
    - 1524
    - 1533
    - 1535
    - 1536
    - 1537
    - 1540
    - 1546
    - 1547
    - 1549
    - 1550
    - 1557
    - 1567
    - 1572
    - 1596
    - 1598
    - 1601
    - 1607
    - 1610
    - 1617
    - 1623
    - 1634
    - 1636
    - 1643
    - 1644
    - 1647
    - 1651
    - 1653
    - 1669
    - 1673
    - 1674
    - 1675
    - 1678
    - 1688
    - 1690
    - 1692
    - 1698
    - 1711
    - 1712
    - 1713
    - 1717
    - 1721
    - 1726
    - 1731
    - 1744
    - 1753
    - 1754
    - 1760
    - 1762
    - 1763
    - 1764
    - 1793
    - 1794
    - 1802
    - 1803
    - 1807
    - 1813
    - 1816
    - 1820
    - 1821
    - 1824
    - 1828
    - 1830
    - 1837
    - 1844
    - 1845
    - 1857
    - 1863
    - 1865
    - 1868
    - 1869
    - 1880
    - 1885
    - 1897
    - 1900
    - 1902
    - 1908
    - 1914
    - 1922
    - 1926
    - 1937
    - 1947
    - 1954
    - 1971
    - 1972
    - 1975
    - 1977
    - 1978
    - 1981
    - 1991
  citation: !ruby/object:Word
    word: citation
    stem: citat
    docFrequency: 2.0
    docPositions:
    - 68
  info: !ruby/object:Word
    word: info
    stem: info
    docFrequency: 2.0
    docPositions:
    - 68
  back: !ruby/object:Word
    word: back
    stem: back
    docFrequency: 5.0
    docPositions:
    - 69
    - 315
    - 789
    - 1491
  top: !ruby/object:Word
    word: top
    stem: top
    docFrequency: 2.0
    docPositions:
    - 69
  modern: !ruby/object:Word
    word: modern
    stem: modern
    docFrequency: 15.0
    docPositions:
    - 86
    - 193
    - 314
    - 355
    - 396
    - 505
    - 731
    - 915
    - 1090
    - 1399
    - 1490
    - 1527
    - 1560
    - 1649
  history: !ruby/object:Word
    word: history
    stem: histori
    docFrequency: 13.0
    docPositions:
    - 86
    - 103
    - 1042
    - 1079
    - 1083
    - 1102
    - 1168
    - 1171
    - 1178
    - 1203
    - 1355
    - 1960
  computingfirst: !ruby/object:Word
    word: computingfirst
    stem: computingfirst
    docFrequency: 2.0
    docPositions:
    - 86
  published: !ruby/object:Word
    word: published
    stem: publish
    docFrequency: 4.0
    docPositions:
    - 86
    - 530
    - 1670
  mon: !ruby/object:Word
    word: mon
    stem: mon
    docFrequency: 2.0
    docPositions:
    - 86
  dec: !ruby/object:Word
    word: dec
    stem: dec
    docFrequency: 2.0
    docPositions:
    - 86
  substantive: !ruby/object:Word
    word: substantive
    stem: substant
    docFrequency: 2.0
    docPositions:
    - 86
  revision: !ruby/object:Word
    word: revision
    stem: revis
    docFrequency: 2.0
    docPositions:
    - 86
  fri: !ruby/object:Word
    word: fri
    stem: fri
    docFrequency: 2.0
    docPositions:
    - 86
  jun: !ruby/object:Word
    word: jun
    stem: jun
    docFrequency: 2.0
    docPositions:
    - 86
  historically: !ruby/object:Word
    word: historically
    stem: histor
    docFrequency: 6.0
    docPositions:
    - 92
    - 241
    - 900
    - 1344
    - 1903
  computers: !ruby/object:Word
    word: computers
    stem: comput
    docFrequency: 43.0
    docPositions:
    - 92
    - 93
    - 94
    - 113
    - 129
    - 208
    - 224
    - 505
    - 602
    - 628
    - 651
    - 686
    - 702
    - 705
    - 715
    - 717
    - 780
    - 781
    - 796
    - 890
    - 901
    - 927
    - 931
    - 956
    - 1062
    - 1094
    - 1125
    - 1155
    - 1158
    - 1175
    - 1344
    - 1345
    - 1346
    - 1424
    - 1649
    - 1724
    - 1748
    - 1765
    - 1895
    - 1904
    - 1912
    - 1978
  were: !ruby/object:Word
    word: were
    stem: were
    docFrequency: 84.0
    docPositions:
    - 92
    - 95
    - 153
    - 167
    - 212
    - 258
    - 270
    - 375
    - 376
    - 381
    - 393
    - 447
    - 448
    - 471
    - 475
    - 486
    - 495
    - 498
    - 517
    - 520
    - 526
    - 534
    - 542
    - 560
    - 595
    - 615
    - 620
    - 623
    - 644
    - 684
    - 686
    - 696
    - 775
    - 782
    - 785
    - 790
    - 807
    - 892
    - 931
    - 998
    - 999
    - 1024
    - 1032
    - 1344
    - 1347
    - 1365
    - 1377
    - 1412
    - 1446
    - 1456
    - 1541
    - 1542
    - 1547
    - 1557
    - 1599
    - 1600
    - 1619
    - 1623
    - 1632
    - 1641
    - 1644
    - 1659
    - 1662
    - 1666
    - 1674
    - 1680
    - 1688
    - 1717
    - 1735
    - 1740
    - 1743
    - 1760
    - 1797
    - 1816
    - 1822
    - 1897
    - 1912
    - 1924
    - 1925
    - 1946
    - 1952
  human: !ruby/object:Word
    word: human
    stem: human
    docFrequency: 7.0
    docPositions:
    - 92
    - 93
    - 97
    - 1344
    - 1345
    - 1349
  clerks: !ruby/object:Word
    word: clerks
    stem: clerk
    docFrequency: 3.0
    docPositions:
    - 92
    - 1344
  calculated: !ruby/object:Word
    word: calculated
    stem: calcul
    docFrequency: 5.0
    docPositions:
    - 92
    - 170
    - 1344
    - 1380
  accordance: !ruby/object:Word
    word: accordance
    stem: accord
    docFrequency: 5.0
    docPositions:
    - 92
    - 98
    - 1344
    - 1350
  effective: !ruby/object:Word
    word: effective
    stem: effect
    docFrequency: 5.0
    docPositions:
    - 93
    - 99
    - 1345
    - 1351
  methods: !ruby/object:Word
    word: methods
    stem: method
    docFrequency: 5.0
    docPositions:
    - 93
    - 99
    - 1345
    - 1351
  these: !ruby/object:Word
    word: these
    stem: these
    docFrequency: 24.0
    docPositions:
    - 93
    - 103
    - 168
    - 349
    - 377
    - 448
    - 498
    - 627
    - 737
    - 768
    - 797
    - 921
    - 924
    - 977
    - 1345
    - 1355
    - 1378
    - 1521
    - 1543
    - 1600
    - 1644
    - 1747
  did: !ruby/object:Word
    word: did
    stem: did
    docFrequency: 16.0
    docPositions:
    - 93
    - 157
    - 253
    - 345
    - 410
    - 668
    - 719
    - 725
    - 1345
    - 1369
    - 1441
    - 1517
    - 1572
    - 1780
    - 1807
  sorts: !ruby/object:Word
    word: sorts
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 93
    - 1345
  calculation: !ruby/object:Word
    word: calculation
    stem: calcul
    docFrequency: 10.0
    docPositions:
    - 94
    - 411
    - 638
    - 720
    - 859
    - 1346
    - 1573
    - 1754
    - 1866
  nowadays: !ruby/object:Word
    word: nowadays
    stem: nowadai
    docFrequency: 7.0
    docPositions:
    - 94
    - 181
    - 650
    - 1346
    - 1389
    - 1764
  carried: !ruby/object:Word
    word: carried
    stem: carri
    docFrequency: 5.0
    docPositions:
    - 94
    - 516
    - 1346
    - 1658
  out: !ruby/object:Word
    word: out
    stem: out
    docFrequency: 15.0
    docPositions:
    - 94
    - 272
    - 348
    - 516
    - 554
    - 660
    - 705
    - 887
    - 1346
    - 1458
    - 1520
    - 1658
    - 1772
    - 1892
  electronic: !ruby/object:Word
    word: electronic
    stem: electron
    docFrequency: 91.0
    docPositions:
    - 94
    - 100
    - 102
    - 117
    - 206
    - 281
    - 298
    - 338
    - 339
    - 369
    - 378
    - 403
    - 407
    - 408
    - 411
    - 427
    - 430
    - 439
    - 468
    - 471
    - 477
    - 480
    - 518
    - 528
    - 542
    - 551
    - 562
    - 574
    - 575
    - 581
    - 585
    - 586
    - 634
    - 670
    - 808
    - 853
    - 863
    - 872
    - 882
    - 888
    - 901
    - 931
    - 935
    - 960
    - 1042
    - 1115
    - 1142
    - 1159
    - 1346
    - 1352
    - 1354
    - 1410
    - 1465
    - 1478
    - 1512
    - 1513
    - 1544
    - 1565
    - 1569
    - 1570
    - 1573
    - 1585
    - 1588
    - 1593
    - 1616
    - 1619
    - 1625
    - 1628
    - 1660
    - 1668
    - 1680
    - 1690
    - 1700
    - 1701
    - 1705
    - 1709
    - 1710
    - 1750
    - 1782
    - 1823
    - 1860
    - 1870
    - 1877
    - 1887
    - 1893
    - 1904
    - 1912
    - 1960
  many: !ruby/object:Word
    word: many
    stem: mani
    docFrequency: 8.0
    docPositions:
    - 94
    - 498
    - 862
    - 914
    - 1346
    - 1644
    - 1869
  thousands: !ruby/object:Word
    word: thousands
    stem: thousand
    docFrequency: 3.0
    docPositions:
    - 95
    - 1347
  them: !ruby/object:Word
    word: them
    stem: them
    docFrequency: 7.0
    docPositions:
    - 95
    - 686
    - 764
    - 969
    - 1347
    - 1918
  employed: !ruby/object:Word
    word: employed
    stem: emploi
    docFrequency: 11.0
    docPositions:
    - 95
    - 216
    - 590
    - 621
    - 1024
    - 1347
    - 1416
    - 1714
    - 1741
    - 1946
  commerce: !ruby/object:Word
    word: commerce
    stem: commerc
    docFrequency: 3.0
    docPositions:
    - 95
    - 1347
  government: !ruby/object:Word
    word: government
    stem: govern
    docFrequency: 11.0
    docPositions:
    - 95
    - 204
    - 336
    - 444
    - 531
    - 1347
    - 1408
    - 1510
    - 1596
    - 1671
  research: !ruby/object:Word
    word: research
    stem: research
    docFrequency: 13.0
    docPositions:
    - 95
    - 402
    - 479
    - 678
    - 836
    - 1322
    - 1347
    - 1564
    - 1627
    - 1788
    - 1847
    - 1991
  establishments: !ruby/object:Word
    word: establishments
    stem: establish
    docFrequency: 3.0
    docPositions:
    - 96
    - 1348
  term: !ruby/object:Word
    word: term
    stem: term
    docFrequency: 8.0
    docPositions:
    - 96
    - 235
    - 355
    - 915
    - 1348
    - 1433
    - 1527
  computing: !ruby/object:Word
    word: computing
    stem: comput
    docFrequency: 76.0
    docPositions:
    - 96
    - 100
    - 123
    - 150
    - 212
    - 252
    - 292
    - 314
    - 327
    - 330
    - 340
    - 352
    - 375
    - 381
    - 519
    - 545
    - 550
    - 556
    - 567
    - 569
    - 595
    - 603
    - 606
    - 608
    - 635
    - 662
    - 664
    - 671
    - 676
    - 832
    - 872
    - 1079
    - 1083
    - 1089
    - 1102
    - 1116
    - 1120
    - 1143
    - 1146
    - 1151
    - 1168
    - 1172
    - 1178
    - 1203
    - 1348
    - 1352
    - 1362
    - 1412
    - 1440
    - 1474
    - 1490
    - 1503
    - 1506
    - 1514
    - 1524
    - 1541
    - 1547
    - 1661
    - 1683
    - 1695
    - 1697
    - 1717
    - 1725
    - 1728
    - 1730
    - 1751
    - 1774
    - 1776
    - 1783
    - 1786
    - 1843
    - 1877
  machine: !ruby/object:Word
    word: machine
    stem: machin
    docFrequency: 128.0
    docPositions:
    - 96
    - 97
    - 98
    - 101
    - 115
    - 125
    - 150
    - 156
    - 186
    - 227
    - 256
    - 270
    - 289
    - 301
    - 309
    - 314
    - 320
    - 323
    - 325
    - 327
    - 328
    - 330
    - 340
    - 346
    - 350
    - 358
    - 374
    - 386
    - 428
    - 429
    - 430
    - 456
    - 469
    - 477
    - 492
    - 507
    - 508
    - 519
    - 540
    - 545
    - 550
    - 553
    - 568
    - 588
    - 589
    - 597
    - 606
    - 618
    - 630
    - 635
    - 640
    - 650
    - 658
    - 659
    - 671
    - 676
    - 731
    - 736
    - 738
    - 748
    - 750
    - 761
    - 768
    - 822
    - 832
    - 862
    - 870
    - 873
    - 955
    - 959
    - 1125
    - 1132
    - 1348
    - 1349
    - 1350
    - 1353
    - 1362
    - 1368
    - 1394
    - 1427
    - 1444
    - 1456
    - 1471
    - 1481
    - 1490
    - 1496
    - 1499
    - 1501
    - 1503
    - 1504
    - 1506
    - 1514
    - 1518
    - 1522
    - 1530
    - 1540
    - 1552
    - 1586
    - 1587
    - 1588
    - 1606
    - 1617
    - 1625
    - 1638
    - 1651
    - 1652
    - 1661
    - 1678
    - 1683
    - 1696
    - 1712
    - 1713
    - 1719
    - 1728
    - 1738
    - 1751
    - 1756
    - 1764
    - 1770
    - 1771
    - 1783
    - 1786
    - 1835
    - 1843
    - 1869
    - 1875
    - 1878
  used: !ruby/object:Word
    word: used
    stem: us
    docFrequency: 31.0
    docPositions:
    - 96
    - 159
    - 235
    - 410
    - 414
    - 440
    - 458
    - 528
    - 724
    - 797
    - 860
    - 985
    - 995
    - 1034
    - 1044
    - 1052
    - 1348
    - 1371
    - 1433
    - 1572
    - 1576
    - 1594
    - 1608
    - 1668
    - 1806
    - 1867
    - 1921
    - 1954
    - 1962
    - 1970
  increasingly: !ruby/object:Word
    word: increasingly
    stem: increasingli
    docFrequency: 3.0
    docPositions:
    - 96
    - 1348
  refers: !ruby/object:Word
    word: refers
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 97
    - 1349
  any: !ruby/object:Word
    word: any
    stem: ani
    docFrequency: 14.0
    docPositions:
    - 97
    - 98
    - 254
    - 356
    - 527
    - 766
    - 788
    - 1349
    - 1350
    - 1442
    - 1528
    - 1667
  does: !ruby/object:Word
    word: does
    stem: doe
    docFrequency: 4.0
    docPositions:
    - 97
    - 990
    - 1349
  work: !ruby/object:Word
    word: work
    stem: work
    docFrequency: 27.0
    docPositions:
    - 97
    - 159
    - 298
    - 337
    - 366
    - 415
    - 432
    - 449
    - 563
    - 635
    - 650
    - 661
    - 692
    - 1349
    - 1371
    - 1478
    - 1511
    - 1536
    - 1577
    - 1590
    - 1601
    - 1691
    - 1751
    - 1764
    - 1773
    - 1793
  computer: !ruby/object:Word
    word: computer
    stem: comput
    docFrequency: 112.0
    docPositions:
    - 98
    - 101
    - 177
    - 206
    - 234
    - 256
    - 265
    - 269
    - 314
    - 323
    - 365
    - 378
    - 386
    - 387
    - 388
    - 396
    - 427
    - 430
    - 439
    - 481
    - 544
    - 562
    - 576
    - 581
    - 600
    - 611
    - 622
    - 623
    - 624
    - 634
    - 642
    - 681
    - 706
    - 784
    - 796
    - 805
    - 808
    - 811
    - 814
    - 821
    - 853
    - 861
    - 864
    - 877
    - 888
    - 898
    - 915
    - 923
    - 939
    - 949
    - 950
    - 952
    - 956
    - 960
    - 1025
    - 1036
    - 1050
    - 1052
    - 1091
    - 1112
    - 1179
    - 1212
    - 1350
    - 1353
    - 1385
    - 1410
    - 1432
    - 1444
    - 1451
    - 1455
    - 1490
    - 1499
    - 1535
    - 1544
    - 1552
    - 1553
    - 1554
    - 1560
    - 1585
    - 1588
    - 1593
    - 1629
    - 1682
    - 1690
    - 1702
    - 1705
    - 1722
    - 1733
    - 1742
    - 1743
    - 1744
    - 1750
    - 1758
    - 1791
    - 1820
    - 1823
    - 1826
    - 1829
    - 1834
    - 1860
    - 1868
    - 1871
    - 1882
    - 1893
    - 1901
    - 1947
    - 1956
    - 1968
    - 1970
  i: !ruby/object:Word
    word: i
    stem: i
    docFrequency: 60.0
    docPositions:
    - 98
    - 258
    - 266
    - 481
    - 488
    - 491
    - 494
    - 503
    - 532
    - 550
    - 552
    - 553
    - 554
    - 642
    - 686
    - 701
    - 715
    - 778
    - 781
    - 783
    - 795
    - 814
    - 815
    - 831
    - 845
    - 911
    - 913
    - 915
    - 918
    - 921
    - 939
    - 1026
    - 1051
    - 1214
    - 1334
    - 1335
    - 1350
    - 1446
    - 1452
    - 1629
    - 1634
    - 1637
    - 1640
    - 1647
    - 1672
    - 1758
    - 1829
    - 1830
    - 1842
    - 1856
    - 1948
    - 1969
  e: !ruby/object:Word
    word: e
    stem: e
    docFrequency: 12.0
    docPositions:
    - 98
    - 237
    - 472
    - 491
    - 494
    - 1162
    - 1350
    - 1435
    - 1620
    - 1637
    - 1640
  calculates: !ruby/object:Word
    word: calculates
    stem: calcul
    docFrequency: 3.0
    docPositions:
    - 98
    - 1350
  during: !ruby/object:Word
    word: during
    stem: dure
    docFrequency: 27.0
    docPositions:
    - 99
    - 258
    - 304
    - 345
    - 381
    - 423
    - 454
    - 528
    - 552
    - 626
    - 666
    - 719
    - 806
    - 871
    - 1351
    - 1446
    - 1484
    - 1517
    - 1547
    - 1581
    - 1604
    - 1668
    - 1746
    - 1778
    - 1821
    - 1876
  late: !ruby/object:Word
    word: late
    stem: late
    docFrequency: 3.0
    docPositions:
    - 99
    - 1351
  early: !ruby/object:Word
    word: early
    stem: earli
    docFrequency: 30.0
    docPositions:
    - 99
    - 129
    - 374
    - 444
    - 446
    - 600
    - 602
    - 628
    - 803
    - 813
    - 927
    - 931
    - 1042
    - 1048
    - 1158
    - 1351
    - 1540
    - 1596
    - 1598
    - 1722
    - 1724
    - 1748
    - 1818
    - 1828
    - 1912
    - 1960
    - 1966
  advent: !ruby/object:Word
    word: advent
    stem: advent
    docFrequency: 3.0
    docPositions:
    - 100
    - 1352
  machines: !ruby/object:Word
    word: machines
    stem: machin
    docFrequency: 44.0
    docPositions:
    - 100
    - 104
    - 212
    - 254
    - 291
    - 292
    - 303
    - 305
    - 306
    - 352
    - 375
    - 381
    - 448
    - 488
    - 504
    - 533
    - 729
    - 732
    - 744
    - 902
    - 956
    - 1025
    - 1120
    - 1233
    - 1352
    - 1356
    - 1412
    - 1442
    - 1473
    - 1474
    - 1483
    - 1485
    - 1486
    - 1524
    - 1541
    - 1547
    - 1600
    - 1634
    - 1648
    - 1673
    - 1905
    - 1947
    - 1984
  phrase: !ruby/object:Word
    word: phrase
    stem: phrase
    docFrequency: 3.0
    docPositions:
    - 100
    - 1352
  gradually: !ruby/object:Word
    word: gradually
    stem: gradual
    docFrequency: 3.0
    docPositions:
    - 101
    - 1353
  gave: !ruby/object:Word
    word: gave
    stem: gave
    docFrequency: 7.0
    docPositions:
    - 101
    - 575
    - 805
    - 1353
    - 1701
    - 1820
  way: !ruby/object:Word
    word: way
    stem: wai
    docFrequency: 15.0
    docPositions:
    - 101
    - 286
    - 293
    - 653
    - 663
    - 881
    - 1008
    - 1353
    - 1468
    - 1475
    - 1767
    - 1775
    - 1886
    - 1932
  simply: !ruby/object:Word
    word: simply
    stem: simpli
    docFrequency: 5.0
    docPositions:
    - 101
    - 327
    - 1353
    - 1503
  initially: !ruby/object:Word
    word: initially
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 102
    - 968
    - 1354
    - 1917
  usually: !ruby/object:Word
    word: usually
    stem: usual
    docFrequency: 5.0
    docPositions:
    - 102
    - 810
    - 1354
    - 1825
  prefix: !ruby/object:Word
    word: prefix
    stem: prefix
    docFrequency: 3.0
    docPositions:
    - 102
    - 1354
  '': !ruby/object:Word
    word: ''
    stem: ''
    docFrequency: 72.0
    docPositions:
    - 103
    - 151
    - 184
    - 186
    - 237
    - 239
    - 286
    - 294
    - 325
    - 382
    - 445
    - 474
    - 586
    - 597
    - 598
    - 620
    - 683
    - 701
    - 737
    - 740
    - 751
    - 758
    - 770
    - 781
    - 807
    - 813
    - 822
    - 869
    - 885
    - 889
    - 913
    - 915
    - 921
    - 950
    - 975
    - 977
    - 991
    - 1012
    - 1055
    - 1139
    - 1144
    - 1250
    - 1332
    - 1334
    - 1335
    - 1337
    - 1355
    - 1363
    - 1392
    - 1394
    - 1435
    - 1468
    - 1476
    - 1501
    - 1548
    - 1597
    - 1622
    - 1710
    - 1719
    - 1720
    - 1740
    - 1813
    - 1822
    - 1828
    - 1835
    - 1874
    - 1890
    - 1894
    - 1936
    - 1973
    - 1990
  digital: !ruby/object:Word
    word: digital
    stem: digit
    docFrequency: 74.0
    docPositions:
    - 103
    - 149
    - 177
    - 206
    - 212
    - 216
    - 303
    - 306
    - 314
    - 375
    - 380
    - 386
    - 394
    - 395
    - 400
    - 407
    - 414
    - 427
    - 439
    - 481
    - 541
    - 562
    - 576
    - 581
    - 634
    - 671
    - 814
    - 853
    - 863
    - 888
    - 898
    - 901
    - 931
    - 939
    - 1049
    - 1116
    - 1124
    - 1155
    - 1175
    - 1355
    - 1361
    - 1385
    - 1410
    - 1412
    - 1416
    - 1483
    - 1486
    - 1490
    - 1541
    - 1546
    - 1552
    - 1558
    - 1559
    - 1562
    - 1569
    - 1576
    - 1585
    - 1593
    - 1629
    - 1679
    - 1690
    - 1702
    - 1705
    - 1750
    - 1783
    - 1829
    - 1860
    - 1870
    - 1893
    - 1901
    - 1904
    - 1912
    - 1967
  surveys: !ruby/object:Word
    word: surveys
    stem: survei
    docFrequency: 3.0
    docPositions:
    - 103
    - 1355
  babbage: !ruby/object:Word
    word: babbage
    stem: babbag
    docFrequency: 37.0
    docPositions:
    - 111
    - 143
    - 147
    - 149
    - 155
    - 160
    - 161
    - 167
    - 175
    - 184
    - 185
    - 188
    - 192
    - 201
    - 202
    - 373
    - 569
    - 730
    - 919
    - 1073
    - 1209
    - 1359
    - 1361
    - 1367
    - 1372
    - 1373
    - 1377
    - 1383
    - 1392
    - 1393
    - 1396
    - 1398
    - 1405
    - 1406
    - 1539
    - 1697
  analog: !ruby/object:Word
    word: analog
    stem: analog
    docFrequency: 36.0
    docPositions:
    - 113
    - 208
    - 213
    - 219
    - 224
    - 232
    - 235
    - 239
    - 242
    - 250
    - 253
    - 256
    - 257
    - 265
    - 269
    - 301
    - 302
    - 305
    - 1105
    - 1413
    - 1419
    - 1424
    - 1430
    - 1433
    - 1438
    - 1441
    - 1444
    - 1445
    - 1451
    - 1455
    - 1481
    - 1482
    - 1485
  universal: !ruby/object:Word
    word: universal
    stem: univers
    docFrequency: 11.0
    docPositions:
    - 115
    - 309
    - 327
    - 540
    - 731
    - 750
    - 870
    - 1503
    - 1678
    - 1875
  turing: !ruby/object:Word
    word: turing
    stem: ture
    docFrequency: 151.0
    docPositions:
    - 115
    - 123
    - 309
    - 313
    - 317
    - 319
    - 323
    - 326
    - 327
    - 329
    - 335
    - 338
    - 345
    - 348
    - 351
    - 358
    - 359
    - 365
    - 383
    - 449
    - 540
    - 554
    - 556
    - 560
    - 563
    - 567
    - 568
    - 574
    - 585
    - 595
    - 596
    - 598
    - 601
    - 603
    - 605
    - 620
    - 625
    - 641
    - 648
    - 658
    - 661
    - 667
    - 668
    - 711
    - 716
    - 732
    - 755
    - 803
    - 804
    - 805
    - 806
    - 820
    - 825
    - 833
    - 843
    - 870
    - 875
    - 909
    - 912
    - 918
    - 919
    - 970
    - 990
    - 997
    - 998
    - 1006
    - 1086
    - 1089
    - 1097
    - 1124
    - 1136
    - 1140
    - 1142
    - 1143
    - 1146
    - 1147
    - 1149
    - 1150
    - 1203
    - 1205
    - 1232
    - 1233
    - 1489
    - 1493
    - 1495
    - 1499
    - 1502
    - 1503
    - 1505
    - 1509
    - 1512
    - 1517
    - 1520
    - 1523
    - 1530
    - 1531
    - 1535
    - 1549
    - 1601
    - 1678
    - 1688
    - 1691
    - 1695
    - 1696
    - 1700
    - 1709
    - 1717
    - 1718
    - 1720
    - 1723
    - 1725
    - 1727
    - 1740
    - 1745
    - 1757
    - 1762
    - 1770
    - 1773
    - 1779
    - 1780
    - 1802
    - 1810
    - 1818
    - 1819
    - 1820
    - 1821
    - 1833
    - 1838
    - 1844
    - 1854
    - 1875
    - 1880
    - 1910
    - 1919
    - 1923
    - 1924
    - 1930
    - 1983
    - 1984
  electromechanical: !ruby/object:Word
    word: electromechanical
    stem: electromechan
    docFrequency: 11.0
    docPositions:
    - 117
    - 280
    - 369
    - 375
    - 380
    - 448
    - 1464
    - 1541
    - 1546
    - 1600
  versus: !ruby/object:Word
    word: versus
    stem: versu
    docFrequency: 3.0
    docPositions:
    - 117
    - 369
  computation: !ruby/object:Word
    word: computation
    stem: comput
    docFrequency: 21.0
    docPositions:
    - 117
    - 195
    - 251
    - 302
    - 369
    - 394
    - 414
    - 528
    - 1042
    - 1105
    - 1217
    - 1401
    - 1439
    - 1482
    - 1558
    - 1576
    - 1668
    - 1960
  atanasoff: !ruby/object:Word
    word: atanasoff
    stem: atanasoff
    docFrequency: 13.0
    docPositions:
    - 119
    - 417
    - 422
    - 423
    - 426
    - 433
    - 1580
    - 1581
    - 1584
    - 1591
  colossus: !ruby/object:Word
    word: colossus
    stem: colossu
    docFrequency: 39.0
    docPositions:
    - 121
    - 435
    - 439
    - 481
    - 488
    - 491
    - 503
    - 505
    - 508
    - 517
    - 522
    - 526
    - 530
    - 532
    - 535
    - 666
    - 826
    - 857
    - 864
    - 1093
    - 1167
    - 1593
    - 1629
    - 1634
    - 1637
    - 1647
    - 1649
    - 1652
    - 1659
    - 1664
    - 1666
    - 1670
    - 1672
    - 1675
    - 1778
    - 1839
    - 1864
    - 1871
  automatic: !ruby/object:Word
    word: automatic
    stem: automat
    docFrequency: 23.0
    docPositions:
    - 123
    - 150
    - 264
    - 269
    - 556
    - 569
    - 603
    - 608
    - 749
    - 763
    - 1078
    - 1089
    - 1143
    - 1146
    - 1151
    - 1163
    - 1362
    - 1450
    - 1455
    - 1697
    - 1725
    - 1730
  engine: !ruby/object:Word
    word: engine
    stem: engin
    docFrequency: 46.0
    docPositions:
    - 123
    - 149
    - 152
    - 161
    - 167
    - 175
    - 176
    - 177
    - 182
    - 185
    - 188
    - 194
    - 195
    - 200
    - 202
    - 556
    - 569
    - 570
    - 603
    - 608
    - 730
    - 1090
    - 1143
    - 1147
    - 1151
    - 1361
    - 1364
    - 1373
    - 1377
    - 1383
    - 1384
    - 1385
    - 1390
    - 1393
    - 1396
    - 1400
    - 1401
    - 1404
    - 1406
    - 1697
    - 1698
    - 1725
    - 1730
  manchester: !ruby/object:Word
    word: manchester
    stem: manchest
    docFrequency: 49.0
    docPositions:
    - 125
    - 265
    - 271
    - 519
    - 546
    - 547
    - 607
    - 630
    - 636
    - 643
    - 649
    - 650
    - 693
    - 696
    - 699
    - 702
    - 778
    - 803
    - 821
    - 831
    - 840
    - 1024
    - 1036
    - 1037
    - 1079
    - 1158
    - 1451
    - 1457
    - 1661
    - 1684
    - 1685
    - 1729
    - 1752
    - 1759
    - 1763
    - 1764
    - 1794
    - 1797
    - 1800
    - 1818
    - 1834
    - 1842
    - 1851
    - 1946
    - 1956
    - 1957
  eniac: !ruby/object:Word
    word: eniac
    stem: eniac
    docFrequency: 22.0
    docPositions:
    - 127
    - 849
    - 854
    - 857
    - 859
    - 860
    - 862
    - 868
    - 881
    - 885
    - 887
    - 1154
    - 1861
    - 1864
    - 1866
    - 1867
    - 1869
    - 1873
    - 1886
    - 1890
    - 1892
  edvac: !ruby/object:Word
    word: edvac
    stem: edvac
    docFrequency: 22.0
    docPositions:
    - 127
    - 582
    - 583
    - 589
    - 591
    - 849
    - 888
    - 889
    - 892
    - 965
    - 996
    - 1154
    - 1706
    - 1707
    - 1713
    - 1715
    - 1893
    - 1894
    - 1897
    - 1914
    - 1922
  other: !ruby/object:Word
    word: other
    stem: other
    docFrequency: 23.0
    docPositions:
    - 129
    - 136
    - 169
    - 280
    - 586
    - 602
    - 626
    - 765
    - 814
    - 927
    - 931
    - 988
    - 1061
    - 1201
    - 1379
    - 1464
    - 1710
    - 1724
    - 1746
    - 1829
    - 1912
    - 1977
  notable: !ruby/object:Word
    word: notable
    stem: notabl
    docFrequency: 5.0
    docPositions:
    - 129
    - 927
    - 931
    - 1912
  high: !ruby/object:Word
    word: high
    stem: high
    docFrequency: 39.0
    docPositions:
    - 131
    - 338
    - 395
    - 407
    - 414
    - 459
    - 461
    - 468
    - 475
    - 497
    - 543
    - 599
    - 884
    - 898
    - 899
    - 961
    - 966
    - 1035
    - 1059
    - 1061
    - 1512
    - 1559
    - 1569
    - 1576
    - 1609
    - 1611
    - 1616
    - 1623
    - 1643
    - 1681
    - 1721
    - 1889
    - 1901
    - 1902
    - 1915
    - 1955
    - 1975
    - 1977
  speed: !ruby/object:Word
    word: speed
    stem: speed
    docFrequency: 47.0
    docPositions:
    - 131
    - 227
    - 237
    - 338
    - 395
    - 407
    - 414
    - 468
    - 475
    - 543
    - 595
    - 597
    - 599
    - 610
    - 838
    - 882
    - 884
    - 898
    - 961
    - 966
    - 1014
    - 1034
    - 1035
    - 1061
    - 1427
    - 1435
    - 1512
    - 1559
    - 1569
    - 1576
    - 1616
    - 1623
    - 1681
    - 1717
    - 1719
    - 1721
    - 1732
    - 1849
    - 1887
    - 1889
    - 1901
    - 1915
    - 1938
    - 1954
    - 1955
    - 1977
  memory: !ruby/object:Word
    word: memory
    stem: memori
    docFrequency: 54.0
    docPositions:
    - 131
    - 178
    - 315
    - 316
    - 318
    - 595
    - 599
    - 679
    - 681
    - 923
    - 961
    - 967
    - 969
    - 995
    - 997
    - 1021
    - 1034
    - 1035
    - 1036
    - 1043
    - 1049
    - 1051
    - 1060
    - 1061
    - 1063
    - 1386
    - 1491
    - 1492
    - 1494
    - 1717
    - 1721
    - 1789
    - 1791
    - 1916
    - 1918
    - 1921
    - 1923
    - 1943
    - 1954
    - 1955
    - 1956
    - 1961
    - 1967
    - 1969
    - 1976
    - 1977
    - 1979
  internet: !ruby/object:Word
    word: internet
    stem: internet
    docFrequency: 3.0
    docPositions:
    - 136
    - 1201
  resources: !ruby/object:Word
    word: resources
    stem: resourc
    docFrequency: 3.0
    docPositions:
    - 136
    - 1201
  related: !ruby/object:Word
    word: related
    stem: relat
    docFrequency: 3.0
    docPositions:
    - 138
    - 1226
  entries: !ruby/object:Word
    word: entries
    stem: entri
    docFrequency: 3.0
    docPositions:
    - 138
    - 1226
  charles: !ruby/object:Word
    word: charles
    stem: charl
    docFrequency: 6.0
    docPositions:
    - 147
    - 617
    - 1209
    - 1359
    - 1737
  lucasian: !ruby/object:Word
    word: lucasian
    stem: lucasian
    docFrequency: 3.0
    docPositions:
    - 147
    - 1359
  professor: !ruby/object:Word
    word: professor
    stem: professor
    docFrequency: 8.0
    docPositions:
    - 147
    - 693
    - 716
    - 728
    - 779
    - 1359
    - 1794
  mathematics: !ruby/object:Word
    word: mathematics
    stem: mathemat
    docFrequency: 3.0
    docPositions:
    - 147
    - 1359
  cambridge: !ruby/object:Word
    word: cambridge
    stem: cambridg
    docFrequency: 18.0
    docPositions:
    - 147
    - 203
    - 271
    - 313
    - 328
    - 467
    - 473
    - 657
    - 933
    - 1359
    - 1407
    - 1457
    - 1489
    - 1504
    - 1615
    - 1621
    - 1769
  university: !ruby/object:Word
    word: university
    stem: univers
    docFrequency: 53.0
    docPositions:
    - 148
    - 313
    - 350
    - 382
    - 383
    - 423
    - 467
    - 546
    - 607
    - 621
    - 636
    - 643
    - 694
    - 702
    - 778
    - 836
    - 855
    - 870
    - 878
    - 933
    - 946
    - 953
    - 1074
    - 1079
    - 1087
    - 1091
    - 1094
    - 1113
    - 1126
    - 1159
    - 1262
    - 1311
    - 1314
    - 1316
    - 1322
    - 1360
    - 1489
    - 1522
    - 1548
    - 1549
    - 1581
    - 1615
    - 1684
    - 1729
    - 1741
    - 1752
    - 1759
    - 1795
    - 1847
    - 1862
    - 1875
    - 1883
  post: !ruby/object:Word
    word: post
    stem: post
    docFrequency: 9.0
    docPositions:
    - 148
    - 402
    - 479
    - 877
    - 1360
    - 1564
    - 1627
    - 1882
  formerly: !ruby/object:Word
    word: formerly
    stem: formerli
    docFrequency: 3.0
    docPositions:
    - 148
    - 1360
  held: !ruby/object:Word
    word: held
    stem: held
    docFrequency: 5.0
    docPositions:
    - 148
    - 891
    - 1360
    - 1896
  isaac: !ruby/object:Word
    word: isaac
    stem: isaac
    docFrequency: 3.0
    docPositions:
    - 148
    - 1360
  newton: !ruby/object:Word
    word: newton
    stem: newton
    docFrequency: 3.0
    docPositions:
    - 148
    - 1360
  proposed: !ruby/object:Word
    word: proposed
    stem: propos
    docFrequency: 17.0
    docPositions:
    - 149
    - 175
    - 568
    - 574
    - 581
    - 586
    - 891
    - 972
    - 1142
    - 1361
    - 1383
    - 1696
    - 1700
    - 1705
    - 1710
    - 1896
  difference: !ruby/object:Word
    word: difference
    stem: differ
    docFrequency: 18.0
    docPositions:
    - 149
    - 152
    - 160
    - 167
    - 176
    - 226
    - 487
    - 569
    - 797
    - 1361
    - 1364
    - 1372
    - 1377
    - 1384
    - 1426
    - 1633
    - 1697
  purpose: !ruby/object:Word
    word: purpose
    stem: purpos
    docFrequency: 36.0
    docPositions:
    - 149
    - 176
    - 202
    - 253
    - 269
    - 385
    - 394
    - 427
    - 508
    - 543
    - 546
    - 576
    - 634
    - 671
    - 729
    - 781
    - 858
    - 888
    - 1120
    - 1361
    - 1384
    - 1406
    - 1441
    - 1455
    - 1551
    - 1558
    - 1585
    - 1652
    - 1681
    - 1684
    - 1702
    - 1750
    - 1783
    - 1865
    - 1893
  production: !ruby/object:Word
    word: production
    stem: product
    docFrequency: 5.0
    docPositions:
    - 150
    - 615
    - 1362
    - 1735
  mathematical: !ruby/object:Word
    word: mathematical
    stem: mathemat
    docFrequency: 8.0
    docPositions:
    - 150
    - 160
    - 648
    - 1138
    - 1362
    - 1372
    - 1762
  tables: !ruby/object:Word
    word: tables
    stem: tabl
    docFrequency: 15.0
    docPositions:
    - 150
    - 151
    - 160
    - 171
    - 860
    - 1362
    - 1363
    - 1372
    - 1381
    - 1867
  such: !ruby/object:Word
    word: such
    stem: such
    docFrequency: 14.0
    docPositions:
    - 151
    - 217
    - 233
    - 286
    - 306
    - 975
    - 1008
    - 1363
    - 1417
    - 1431
    - 1468
    - 1486
    - 1932
  logarithm: !ruby/object:Word
    word: logarithm
    stem: logarithm
    docFrequency: 3.0
    docPositions:
    - 151
    - 1363
  tide: !ruby/object:Word
    word: tide
    stem: tide
    docFrequency: 5.0
    docPositions:
    - 151
    - 256
    - 1363
    - 1444
  astronomical: !ruby/object:Word
    word: astronomical
    stem: astronom
    docFrequency: 3.0
    docPositions:
    - 151
    - 1363
  consisted: !ruby/object:Word
    word: consisted
    stem: consist
    docFrequency: 3.0
    docPositions:
    - 152
    - 1364
  entirely: !ruby/object:Word
    word: entirely
    stem: entir
    docFrequency: 3.0
    docPositions:
    - 152
    - 1364
  mechanical: !ruby/object:Word
    word: mechanical
    stem: mechan
    docFrequency: 22.0
    docPositions:
    - 152
    - 177
    - 249
    - 257
    - 264
    - 269
    - 278
    - 280
    - 373
    - 376
    - 1108
    - 1364
    - 1385
    - 1437
    - 1445
    - 1450
    - 1455
    - 1462
    - 1464
    - 1539
    - 1542
  components: !ruby/object:Word
    word: components
    stem: compon
    docFrequency: 9.0
    docPositions:
    - 152
    - 280
    - 376
    - 378
    - 1364
    - 1464
    - 1542
    - 1544
  brass: !ruby/object:Word
    word: brass
    stem: brass
    docFrequency: 3.0
    docPositions:
    - 153
    - 1365
  gear: !ruby/object:Word
    word: gear
    stem: gear
    docFrequency: 3.0
    docPositions:
    - 153
    - 1365
  wheels: !ruby/object:Word
    word: wheels
    stem: wheel
    docFrequency: 9.0
    docPositions:
    - 153
    - 155
    - 492
    - 494
    - 1365
    - 1367
    - 1638
    - 1640
  rods: !ruby/object:Word
    word: rods
    stem: rod
    docFrequency: 3.0
    docPositions:
    - 153
    - 1365
  ratchets: !ruby/object:Word
    word: ratchets
    stem: ratchet
    docFrequency: 3.0
    docPositions:
    - 153
    - 1365
  pinions: !ruby/object:Word
    word: pinions
    stem: pinion
    docFrequency: 3.0
    docPositions:
    - 153
    - 1365
  etc: !ruby/object:Word
    word: etc
    stem: etc
    docFrequency: 6.0
    docPositions:
    - 153
    - 389
    - 763
    - 1365
    - 1555
  numbers: !ruby/object:Word
    word: numbers
    stem: number
    docFrequency: 16.0
    docPositions:
    - 153
    - 543
    - 718
    - 734
    - 737
    - 739
    - 742
    - 762
    - 784
    - 786
    - 876
    - 1136
    - 1365
    - 1681
    - 1881
  represented: !ruby/object:Word
    word: represented
    stem: repres
    docFrequency: 13.0
    docPositions:
    - 154
    - 214
    - 219
    - 223
    - 225
    - 977
    - 979
    - 1366
    - 1414
    - 1419
    - 1423
    - 1425
  decimal: !ruby/object:Word
    word: decimal
    stem: decim
    docFrequency: 3.0
    docPositions:
    - 154
    - 1366
  system: !ruby/object:Word
    word: system
    stem: system
    docFrequency: 11.0
    docPositions:
    - 154
    - 407
    - 446
    - 641
    - 1011
    - 1366
    - 1569
    - 1598
    - 1757
    - 1935
  positions: !ruby/object:Word
    word: positions
    stem: posit
    docFrequency: 7.0
    docPositions:
    - 154
    - 1007
    - 1008
    - 1366
    - 1931
    - 1932
  toothed: !ruby/object:Word
    word: toothed
    stem: tooth
    docFrequency: 3.0
    docPositions:
    - 154
    - 1366
  metal: !ruby/object:Word
    word: metal
    stem: metal
    docFrequency: 5.0
    docPositions:
    - 154
    - 1032
    - 1366
    - 1952
  mounted: !ruby/object:Word
    word: mounted
    stem: mount
    docFrequency: 3.0
    docPositions:
    - 155
    - 1367
  columns: !ruby/object:Word
    word: columns
    stem: column
    docFrequency: 3.0
    docPositions:
    - 155
    - 1367
  exhibited: !ruby/object:Word
    word: exhibited
    stem: exhibit
    docFrequency: 3.0
    docPositions:
    - 155
    - 1367
  small: !ruby/object:Word
    word: small
    stem: small
    docFrequency: 9.0
    docPositions:
    - 155
    - 376
    - 427
    - 607
    - 1367
    - 1542
    - 1585
    - 1729
  working: !ruby/object:Word
    word: working
    stem: work
    docFrequency: 19.0
    docPositions:
    - 155
    - 268
    - 385
    - 402
    - 478
    - 486
    - 677
    - 681
    - 830
    - 1367
    - 1454
    - 1551
    - 1564
    - 1626
    - 1632
    - 1787
    - 1791
    - 1841
  model: !ruby/object:Word
    word: model
    stem: model
    docFrequency: 24.0
    docPositions:
    - 155
    - 200
    - 214
    - 222
    - 232
    - 608
    - 610
    - 615
    - 955
    - 996
    - 1015
    - 1037
    - 1367
    - 1404
    - 1414
    - 1422
    - 1430
    - 1730
    - 1732
    - 1735
    - 1922
    - 1939
    - 1957
  he: !ruby/object:Word
    word: he
    stem: he
    docFrequency: 49.0
    docPositions:
    - 156
    - 314
    - 330
    - 337
    - 412
    - 477
    - 564
    - 565
    - 662
    - 680
    - 712
    - 725
    - 732
    - 758
    - 775
    - 781
    - 783
    - 810
    - 811
    - 812
    - 868
    - 897
    - 916
    - 917
    - 1047
    - 1368
    - 1490
    - 1506
    - 1511
    - 1574
    - 1625
    - 1692
    - 1693
    - 1774
    - 1790
    - 1803
    - 1807
    - 1813
    - 1816
    - 1825
    - 1826
    - 1827
    - 1873
    - 1900
    - 1965
  never: !ruby/object:Word
    word: never
    stem: never
    docFrequency: 14.0
    docPositions:
    - 156
    - 201
    - 202
    - 431
    - 652
    - 845
    - 916
    - 1368
    - 1405
    - 1406
    - 1589
    - 1766
    - 1856
  completed: !ruby/object:Word
    word: completed
    stem: complet
    docFrequency: 15.0
    docPositions:
    - 156
    - 643
    - 834
    - 845
    - 856
    - 889
    - 1052
    - 1368
    - 1759
    - 1845
    - 1856
    - 1863
    - 1894
    - 1970
  full: !ruby/object:Word
    word: full
    stem: full
    docFrequency: 13.0
    docPositions:
    - 156
    - 201
    - 535
    - 577
    - 881
    - 996
    - 1368
    - 1405
    - 1675
    - 1703
    - 1886
    - 1922
  scale: !ruby/object:Word
    word: scale
    stem: scale
    docFrequency: 23.0
    docPositions:
    - 156
    - 201
    - 268
    - 337
    - 393
    - 414
    - 427
    - 480
    - 735
    - 907
    - 996
    - 1162
    - 1368
    - 1405
    - 1454
    - 1511
    - 1557
    - 1576
    - 1585
    - 1628
    - 1908
    - 1922
  had: !ruby/object:Word
    word: had
    stem: had
    docFrequency: 40.0
    docPositions:
    - 156
    - 177
    - 184
    - 330
    - 472
    - 506
    - 507
    - 527
    - 528
    - 531
    - 553
    - 591
    - 598
    - 601
    - 669
    - 698
    - 702
    - 704
    - 778
    - 780
    - 868
    - 968
    - 1368
    - 1385
    - 1392
    - 1506
    - 1620
    - 1650
    - 1651
    - 1667
    - 1668
    - 1671
    - 1715
    - 1720
    - 1723
    - 1781
    - 1799
    - 1873
    - 1917
  designed: !ruby/object:Word
    word: designed
    stem: design
    docFrequency: 19.0
    docPositions:
    - 156
    - 403
    - 449
    - 469
    - 472
    - 509
    - 641
    - 841
    - 859
    - 1368
    - 1565
    - 1601
    - 1617
    - 1620
    - 1653
    - 1757
    - 1852
    - 1866
  but: !ruby/object:Word
    word: but
    stem: but
    docFrequency: 35.0
    docPositions:
    - 157
    - 201
    - 212
    - 411
    - 476
    - 477
    - 668
    - 715
    - 824
    - 845
    - 847
    - 857
    - 864
    - 889
    - 915
    - 917
    - 921
    - 1007
    - 1014
    - 1369
    - 1405
    - 1412
    - 1573
    - 1624
    - 1625
    - 1780
    - 1837
    - 1856
    - 1858
    - 1864
    - 1871
    - 1894
    - 1931
    - 1938
  complete: !ruby/object:Word
    word: complete
    stem: complet
    docFrequency: 11.0
    docPositions:
    - 157
    - 158
    - 575
    - 837
    - 846
    - 1369
    - 1370
    - 1701
    - 1848
    - 1857
  several: !ruby/object:Word
    word: several
    stem: sever
    docFrequency: 3.0
    docPositions:
    - 157
    - 1369
  fragments: !ruby/object:Word
    word: fragments
    stem: fragment
    docFrequency: 3.0
    docPositions:
    - 157
    - 1369
  largest: !ruby/object:Word
    word: largest
    stem: largest
    docFrequency: 3.0
    docPositions:
    - 157
    - 1369
  one: !ruby/object:Word
    word: one
    stem: 'on'
    docFrequency: 24.0
    docPositions:
    - 157
    - 168
    - 236
    - 347
    - 349
    - 590
    - 618
    - 659
    - 693
    - 737
    - 738
    - 747
    - 786
    - 981
    - 1369
    - 1378
    - 1434
    - 1519
    - 1521
    - 1714
    - 1738
    - 1771
    - 1794
  ninth: !ruby/object:Word
    word: ninth
    stem: ninth
    docFrequency: 3.0
    docPositions:
    - 157
    - 1369
  calculator: !ruby/object:Word
    word: calculator
    stem: calcul
    docFrequency: 9.0
    docPositions:
    - 158
    - 574
    - 586
    - 989
    - 1142
    - 1370
    - 1700
    - 1710
  display: !ruby/object:Word
    word: display
    stem: displai
    docFrequency: 5.0
    docPositions:
    - 158
    - 162
    - 1370
    - 1374
  london: !ruby/object:Word
    word: london
    stem: london
    docFrequency: 22.0
    docPositions:
    - 158
    - 162
    - 170
    - 321
    - 402
    - 561
    - 805
    - 1038
    - 1102
    - 1121
    - 1134
    - 1138
    - 1164
    - 1370
    - 1374
    - 1380
    - 1497
    - 1564
    - 1689
    - 1820
    - 1958
  science: !ruby/object:Word
    word: science
    stem: scienc
    docFrequency: 6.0
    docPositions:
    - 158
    - 162
    - 1103
    - 1370
    - 1374
  museum: !ruby/object:Word
    word: museum
    stem: museum
    docFrequency: 6.0
    docPositions:
    - 159
    - 162
    - 1103
    - 1371
    - 1374
  baabage: !ruby/object:Word
    word: baabage
    stem: baabag
    docFrequency: 3.0
    docPositions:
    - 159
    - 1371
  perform: !ruby/object:Word
    word: perform
    stem: perform
    docFrequency: 9.0
    docPositions:
    - 159
    - 302
    - 424
    - 1017
    - 1371
    - 1482
    - 1582
    - 1941
  serious: !ruby/object:Word
    word: serious
    stem: seriou
    docFrequency: 3.0
    docPositions:
    - 159
    - 1371
  computational: !ruby/object:Word
    word: computational
    stem: comput
    docFrequency: 3.0
    docPositions:
    - 159
    - 1371
  calculating: !ruby/object:Word
    word: calculating
    stem: calcul
    docFrequency: 7.0
    docPositions:
    - 160
    - 202
    - 729
    - 731
    - 1372
    - 1406
  various: !ruby/object:Word
    word: various
    stem: variou
    docFrequency: 5.0
    docPositions:
    - 160
    - 808
    - 1372
    - 1823
  'no': !ruby/object:Word
    word: 'no'
    stem: 'no'
    docFrequency: 17.0
    docPositions:
    - 161
    - 233
    - 379
    - 477
    - 506
    - 544
    - 669
    - 815
    - 1373
    - 1431
    - 1545
    - 1625
    - 1650
    - 1682
    - 1781
    - 1830
  finally: !ruby/object:Word
    word: finally
    stem: final
    docFrequency: 6.0
    docPositions:
    - 161
    - 280
    - 765
    - 1373
    - 1464
  built: !ruby/object:Word
    word: built
    stem: built
    docFrequency: 31.0
    docPositions:
    - 161
    - 202
    - 265
    - 268
    - 272
    - 381
    - 385
    - 409
    - 469
    - 477
    - 601
    - 608
    - 635
    - 853
    - 933
    - 935
    - 1373
    - 1406
    - 1451
    - 1454
    - 1458
    - 1547
    - 1551
    - 1571
    - 1617
    - 1625
    - 1723
    - 1730
    - 1751
    - 1860
  designs: !ruby/object:Word
    word: designs
    stem: design
    docFrequency: 5.0
    docPositions:
    - 161
    - 587
    - 1373
    - 1711
  also: !ruby/object:Word
    word: also
    stem: also
    docFrequency: 14.0
    docPositions:
    - 161
    - 762
    - 824
    - 840
    - 879
    - 920
    - 957
    - 987
    - 990
    - 1373
    - 1837
    - 1851
    - 1884
  swedes: !ruby/object:Word
    word: swedes
    stem: swede
    docFrequency: 3.0
    docPositions:
    - 166
    - 1376
  georg: !ruby/object:Word
    word: georg
    stem: georg
    docFrequency: 3.0
    docPositions:
    - 166
    - 1376
  edvard: !ruby/object:Word
    word: edvard
    stem: edvard
    docFrequency: 3.0
    docPositions:
    - 166
    - 1376
  scheutz: !ruby/object:Word
    word: scheutz
    stem: scheutz
    docFrequency: 3.0
    docPositions:
    - 166
    - 1376
  father: !ruby/object:Word
    word: father
    stem: father
    docFrequency: 4.0
    docPositions:
    - 166
    - 915
    - 1376
  son: !ruby/object:Word
    word: son
    stem: son
    docFrequency: 3.0
    docPositions:
    - 166
    - 1376
  constructed: !ruby/object:Word
    word: constructed
    stem: construct
    docFrequency: 11.0
    docPositions:
    - 166
    - 251
    - 637
    - 854
    - 1037
    - 1376
    - 1439
    - 1753
    - 1861
    - 1957
  modified: !ruby/object:Word
    word: modified
    stem: modifi
    docFrequency: 5.0
    docPositions:
    - 167
    - 1026
    - 1377
    - 1948
  version: !ruby/object:Word
    word: version
    stem: version
    docFrequency: 12.0
    docPositions:
    - 167
    - 201
    - 615
    - 640
    - 1013
    - 1190
    - 1377
    - 1405
    - 1735
    - 1756
    - 1937
  three: !ruby/object:Word
    word: three
    stem: three
    docFrequency: 11.0
    docPositions:
    - 167
    - 405
    - 552
    - 744
    - 755
    - 1046
    - 1377
    - 1567
    - 1810
    - 1964
  made: !ruby/object:Word
    word: made
    stem: made
    docFrequency: 18.0
    docPositions:
    - 167
    - 394
    - 396
    - 616
    - 730
    - 733
    - 897
    - 916
    - 920
    - 1013
    - 1261
    - 1377
    - 1558
    - 1560
    - 1736
    - 1900
    - 1937
  prototype: !ruby/object:Word
    word: prototype
    stem: prototyp
    docFrequency: 5.0
    docPositions:
    - 168
    - 488
    - 1378
    - 1634
  two: !ruby/object:Word
    word: two
    stem: two
    docFrequency: 19.0
    docPositions:
    - 168
    - 251
    - 252
    - 505
    - 515
    - 520
    - 552
    - 842
    - 1022
    - 1162
    - 1378
    - 1439
    - 1440
    - 1649
    - 1657
    - 1662
    - 1853
    - 1944
  commercial: !ruby/object:Word
    word: commercial
    stem: commerci
    docFrequency: 3.0
    docPositions:
    - 168
    - 1378
  models: !ruby/object:Word
    word: models
    stem: model
    docFrequency: 5.0
    docPositions:
    - 168
    - 566
    - 1378
    - 1694
  being: !ruby/object:Word
    word: being
    stem: be
    docFrequency: 21.0
    docPositions:
    - 168
    - 219
    - 228
    - 356
    - 431
    - 447
    - 508
    - 729
    - 732
    - 784
    - 786
    - 864
    - 1378
    - 1419
    - 1428
    - 1528
    - 1589
    - 1599
    - 1652
    - 1871
  sold: !ruby/object:Word
    word: sold
    stem: sold
    docFrequency: 7.0
    docPositions:
    - 168
    - 623
    - 644
    - 1378
    - 1743
    - 1760
  observatory: !ruby/object:Word
    word: observatory
    stem: observatori
    docFrequency: 3.0
    docPositions:
    - 169
    - 1379
  albany: !ruby/object:Word
    word: albany
    stem: albani
    docFrequency: 3.0
    docPositions:
    - 169
    - 1379
  york: !ruby/object:Word
    word: york
    stem: york
    docFrequency: 5.0
    docPositions:
    - 169
    - 1106
    - 1172
    - 1379
  registrar: !ruby/object:Word
    word: registrar
    stem: registrar
    docFrequency: 3.0
    docPositions:
    - 170
    - 1380
  general: !ruby/object:Word
    word: general
    stem: gener
    docFrequency: 32.0
    docPositions:
    - 170
    - 176
    - 202
    - 253
    - 269
    - 385
    - 394
    - 508
    - 543
    - 576
    - 634
    - 671
    - 729
    - 733
    - 858
    - 888
    - 1119
    - 1380
    - 1384
    - 1406
    - 1441
    - 1455
    - 1551
    - 1558
    - 1652
    - 1681
    - 1702
    - 1750
    - 1783
    - 1865
    - 1893
  office: !ruby/object:Word
    word: office
    stem: offic
    docFrequency: 8.0
    docPositions:
    - 170
    - 402
    - 479
    - 1109
    - 1380
    - 1564
    - 1627
  printed: !ruby/object:Word
    word: printed
    stem: print
    docFrequency: 3.0
    docPositions:
    - 170
    - 1380
  actuarial: !ruby/object:Word
    word: actuarial
    stem: actuari
    docFrequency: 3.0
    docPositions:
    - 171
    - 1381
  analytical: !ruby/object:Word
    word: analytical
    stem: analyt
    docFrequency: 18.0
    docPositions:
    - 175
    - 177
    - 182
    - 185
    - 187
    - 194
    - 200
    - 570
    - 730
    - 1383
    - 1385
    - 1390
    - 1393
    - 1395
    - 1400
    - 1404
    - 1698
  considerably: !ruby/object:Word
    word: considerably
    stem: consider
    docFrequency: 7.0
    docPositions:
    - 175
    - 260
    - 857
    - 1383
    - 1448
    - 1864
  more: !ruby/object:Word
    word: more
    stem: more
    docFrequency: 12.0
    docPositions:
    - 175
    - 243
    - 415
    - 565
    - 627
    - 858
    - 1383
    - 1577
    - 1693
    - 1747
    - 1865
  ambitious: !ruby/object:Word
    word: ambitious
    stem: ambiti
    docFrequency: 3.0
    docPositions:
    - 175
    - 1383
  than: !ruby/object:Word
    word: than
    stem: than
    docFrequency: 7.0
    docPositions:
    - 176
    - 244
    - 566
    - 798
    - 1384
    - 1694
  have: !ruby/object:Word
    word: have
    stem: have
    docFrequency: 43.0
    docPositions:
    - 176
    - 177
    - 179
    - 182
    - 242
    - 267
    - 379
    - 401
    - 421
    - 522
    - 534
    - 601
    - 649
    - 724
    - 804
    - 820
    - 863
    - 880
    - 914
    - 916
    - 987
    - 989
    - 1033
    - 1265
    - 1384
    - 1385
    - 1387
    - 1390
    - 1453
    - 1545
    - 1563
    - 1579
    - 1664
    - 1674
    - 1723
    - 1763
    - 1806
    - 1819
    - 1833
    - 1870
    - 1885
    - 1953
  been: !ruby/object:Word
    word: been
    stem: been
    docFrequency: 39.0
    docPositions:
    - 176
    - 179
    - 182
    - 267
    - 401
    - 422
    - 472
    - 520
    - 528
    - 535
    - 601
    - 649
    - 652
    - 704
    - 804
    - 863
    - 968
    - 1033
    - 1261
    - 1384
    - 1387
    - 1390
    - 1453
    - 1563
    - 1580
    - 1620
    - 1662
    - 1668
    - 1675
    - 1723
    - 1763
    - 1766
    - 1819
    - 1870
    - 1917
    - 1953
  store: !ruby/object:Word
    word: store
    stem: store
    docFrequency: 8.0
    docPositions:
    - 178
    - 408
    - 704
    - 789
    - 923
    - 1386
    - 1570
  central: !ruby/object:Word
    word: central
    stem: central
    docFrequency: 4.0
    docPositions:
    - 178
    - 746
    - 1386
  processing: !ruby/object:Word
    word: processing
    stem: process
    docFrequency: 11.0
    docPositions:
    - 178
    - 401
    - 407
    - 591
    - 883
    - 1386
    - 1563
    - 1569
    - 1715
    - 1888
  unit: !ruby/object:Word
    word: unit
    stem: unit
    docFrequency: 4.0
    docPositions:
    - 178
    - 553
    - 1386
  mill: !ruby/object:Word
    word: mill
    stem: mill
    docFrequency: 3.0
    docPositions:
    - 178
    - 1386
  would: !ruby/object:Word
    word: would
    stem: would
    docFrequency: 18.0
    docPositions:
    - 179
    - 182
    - 601
    - 618
    - 744
    - 747
    - 842
    - 916
    - 921
    - 1009
    - 1264
    - 1387
    - 1390
    - 1723
    - 1738
    - 1853
    - 1933
  able: !ruby/object:Word
    word: able
    stem: abl
    docFrequency: 8.0
    docPositions:
    - 179
    - 692
    - 923
    - 1015
    - 1387
    - 1793
    - 1939
  select: !ruby/object:Word
    word: select
    stem: select
    docFrequency: 3.0
    docPositions:
    - 179
    - 1387
  among: !ruby/object:Word
    word: among
    stem: among
    docFrequency: 7.0
    docPositions:
    - 179
    - 234
    - 382
    - 1387
    - 1432
    - 1548
  alternative: !ruby/object:Word
    word: alternative
    stem: altern
    docFrequency: 3.0
    docPositions:
    - 179
    - 1387
  actions: !ruby/object:Word
    word: actions
    stem: action
    docFrequency: 7.0
    docPositions:
    - 179
    - 180
    - 317
    - 1387
    - 1388
    - 1493
  consequent: !ruby/object:Word
    word: consequent
    stem: consequ
    docFrequency: 3.0
    docPositions:
    - 180
    - 1388
  upon: !ruby/object:Word
    word: upon
    stem: upon
    docFrequency: 3.0
    docPositions:
    - 180
    - 1388
  outcome: !ruby/object:Word
    word: outcome
    stem: outcom
    docFrequency: 3.0
    docPositions:
    - 180
    - 1388
  its: !ruby/object:Word
    word: its
    stem: it
    docFrequency: 21.0
    docPositions:
    - 180
    - 321
    - 325
    - 475
    - 638
    - 873
    - 890
    - 923
    - 980
    - 1167
    - 1194
    - 1264
    - 1388
    - 1497
    - 1501
    - 1623
    - 1754
    - 1878
    - 1895
  previous: !ruby/object:Word
    word: previous
    stem: previou
    docFrequency: 3.0
    docPositions:
    - 180
    - 1388
  facility: !ruby/object:Word
    word: facility
    stem: facil
    docFrequency: 3.0
    docPositions:
    - 180
    - 1388
  known: !ruby/object:Word
    word: known
    stem: known
    docFrequency: 22.0
    docPositions:
    - 181
    - 322
    - 327
    - 448
    - 470
    - 637
    - 839
    - 898
    - 956
    - 967
    - 1011
    - 1389
    - 1498
    - 1503
    - 1600
    - 1618
    - 1753
    - 1850
    - 1901
    - 1916
    - 1935
  conditional: !ruby/object:Word
    word: conditional
    stem: condit
    docFrequency: 5.0
    docPositions:
    - 181
    - 758
    - 1389
    - 1813
  branching: !ruby/object:Word
    word: branching
    stem: branch
    docFrequency: 7.0
    docPositions:
    - 181
    - 758
    - 875
    - 1389
    - 1813
    - 1880
  behaviour: !ruby/object:Word
    word: behaviour
    stem: behaviour
    docFrequency: 3.0
    docPositions:
    - 181
    - 1389
  controlled: !ruby/object:Word
    word: controlled
    stem: control
    docFrequency: 11.0
    docPositions:
    - 182
    - 294
    - 305
    - 385
    - 387
    - 1390
    - 1476
    - 1485
    - 1551
    - 1553
  program: !ruby/object:Word
    word: program
    stem: program
    docFrequency: 79.0
    docPositions:
    - 182
    - 294
    - 318
    - 319
    - 321
    - 339
    - 385
    - 387
    - 541
    - 544
    - 562
    - 576
    - 581
    - 609
    - 634
    - 638
    - 667
    - 670
    - 756
    - 790
    - 830
    - 833
    - 837
    - 838
    - 839
    - 840
    - 841
    - 842
    - 844
    - 845
    - 860
    - 872
    - 874
    - 888
    - 898
    - 901
    - 923
    - 924
    - 931
    - 960
    - 1390
    - 1476
    - 1494
    - 1495
    - 1497
    - 1513
    - 1551
    - 1553
    - 1679
    - 1682
    - 1690
    - 1702
    - 1705
    - 1731
    - 1750
    - 1754
    - 1779
    - 1782
    - 1811
    - 1841
    - 1844
    - 1848
    - 1849
    - 1850
    - 1851
    - 1852
    - 1853
    - 1855
    - 1856
    - 1867
    - 1877
    - 1879
    - 1893
    - 1901
    - 1904
    - 1912
  instructions: !ruby/object:Word
    word: instructions
    stem: instruct
    docFrequency: 15.0
    docPositions:
    - 183
    - 318
    - 325
    - 640
    - 791
    - 794
    - 883
    - 1006
    - 1391
    - 1494
    - 1501
    - 1756
    - 1888
    - 1930
  contained: !ruby/object:Word
    word: contained
    stem: contain
    docFrequency: 11.0
    docPositions:
    - 183
    - 429
    - 503
    - 584
    - 1010
    - 1391
    - 1587
    - 1647
    - 1708
    - 1934
  punched: !ruby/object:Word
    word: punched
    stem: punch
    docFrequency: 3.0
    docPositions:
    - 183
    - 1391
  cards: !ruby/object:Word
    word: cards
    stem: card
    docFrequency: 3.0
    docPositions:
    - 183
    - 1391
  connected: !ruby/object:Word
    word: connected
    stem: connect
    docFrequency: 8.0
    docPositions:
    - 183
    - 286
    - 290
    - 741
    - 1391
    - 1468
    - 1472
  together: !ruby/object:Word
    word: together
    stem: togeth
    docFrequency: 7.0
    docPositions:
    - 183
    - 286
    - 290
    - 1391
    - 1468
    - 1472
  ribbons: !ruby/object:Word
    word: ribbons
    stem: ribbon
    docFrequency: 3.0
    docPositions:
    - 183
    - 1391
  idea: !ruby/object:Word
    word: idea
    stem: idea
    docFrequency: 26.0
    docPositions:
    - 184
    - 202
    - 355
    - 411
    - 476
    - 527
    - 597
    - 669
    - 731
    - 815
    - 968
    - 1033
    - 1048
    - 1392
    - 1406
    - 1527
    - 1573
    - 1624
    - 1667
    - 1719
    - 1781
    - 1830
    - 1917
    - 1953
    - 1966
  adopted: !ruby/object:Word
    word: adopted
    stem: adopt
    docFrequency: 3.0
    docPositions:
    - 184
    - 1392
  jacquard: !ruby/object:Word
    word: jacquard
    stem: jacquard
    docFrequency: 3.0
    docPositions:
    - 184
    - 1392
  weaving: !ruby/object:Word
    word: weaving
    stem: weav
    docFrequency: 3.0
    docPositions:
    - 184
    - 1392
  loom: !ruby/object:Word
    word: loom
    stem: loom
    docFrequency: 3.0
    docPositions:
    - 184
    - 1392
  emphasised: !ruby/object:Word
    word: emphasised
    stem: emphasis
    docFrequency: 7.0
    docPositions:
    - 185
    - 652
    - 871
    - 1393
    - 1766
    - 1876
  generality: !ruby/object:Word
    word: generality
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 185
    - 1393
  saying: !ruby/object:Word
    word: saying
    stem: sai
    docFrequency: 3.0
    docPositions:
    - 185
    - 1393
  conditions: !ruby/object:Word
    word: conditions
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 186
    - 1394
  which: !ruby/object:Word
    word: which
    stem: which
    docFrequency: 24.0
    docPositions:
    - 186
    - 240
    - 243
    - 256
    - 517
    - 533
    - 675
    - 762
    - 783
    - 785
    - 791
    - 793
    - 859
    - 882
    - 1031
    - 1394
    - 1444
    - 1659
    - 1673
    - 1785
    - 1866
    - 1887
    - 1951
  enable: !ruby/object:Word
    word: enable
    stem: enabl
    docFrequency: 3.0
    docPositions:
    - 186
    - 1394
  finite: !ruby/object:Word
    word: finite
    stem: finit
    docFrequency: 3.0
    docPositions:
    - 186
    - 1394
  calculations: !ruby/object:Word
    word: calculations
    stem: calcul
    docFrequency: 9.0
    docPositions:
    - 187
    - 259
    - 424
    - 907
    - 1395
    - 1447
    - 1582
    - 1908
  unlimited: !ruby/object:Word
    word: unlimited
    stem: unlimit
    docFrequency: 3.0
    docPositions:
    - 187
    - 1395
  extent: !ruby/object:Word
    word: extent
    stem: extent
    docFrequency: 3.0
    docPositions:
    - 187
    - 1395
  fulfilled: !ruby/object:Word
    word: fulfilled
    stem: fulfil
    docFrequency: 3.0
    docPositions:
    - 187
    - 1395
  p: !ruby/object:Word
    word: p
    stem: p
    docFrequency: 24.0
    docPositions:
    - 188
    - 244
    - 266
    - 326
    - 598
    - 620
    - 720
    - 799
    - 815
    - 869
    - 879
    - 925
    - 991
    - 998
    - 1396
    - 1452
    - 1502
    - 1720
    - 1740
    - 1830
    - 1874
    - 1884
    - 1924
  worked: !ruby/object:Word
    word: worked
    stem: work
    docFrequency: 8.0
    docPositions:
    - 192
    - 406
    - 431
    - 937
    - 1398
    - 1568
    - 1589
  closely: !ruby/object:Word
    word: closely
    stem: close
    docFrequency: 3.0
    docPositions:
    - 192
    - 1398
  ada: !ruby/object:Word
    word: ada
    stem: ada
    docFrequency: 5.0
    docPositions:
    - 192
    - 193
    - 1398
    - 1399
  lovelace: !ruby/object:Word
    word: lovelace
    stem: lovelac
    docFrequency: 5.0
    docPositions:
    - 192
    - 194
    - 1398
    - 1400
  daughter: !ruby/object:Word
    word: daughter
    stem: daughter
    docFrequency: 3.0
    docPositions:
    - 192
    - 1398
  poet: !ruby/object:Word
    word: poet
    stem: poet
    docFrequency: 3.0
    docPositions:
    - 192
    - 1398
  byron: !ruby/object:Word
    word: byron
    stem: byron
    docFrequency: 3.0
    docPositions:
    - 193
    - 1399
  after: !ruby/object:Word
    word: after
    stem: after
    docFrequency: 10.0
    docPositions:
    - 193
    - 408
    - 466
    - 546
    - 737
    - 1399
    - 1570
    - 1614
    - 1684
  whom: !ruby/object:Word
    word: whom
    stem: whom
    docFrequency: 3.0
    docPositions:
    - 193
    - 1399
  programming: !ruby/object:Word
    word: programming
    stem: program
    docFrequency: 11.0
    docPositions:
    - 193
    - 360
    - 641
    - 836
    - 1014
    - 1399
    - 1532
    - 1757
    - 1847
    - 1938
  language: !ruby/object:Word
    word: language
    stem: languag
    docFrequency: 5.0
    docPositions:
    - 193
    - 1322
    - 1399
    - 1991
  named: !ruby/object:Word
    word: named
    stem: name
    docFrequency: 5.0
    docPositions:
    - 193
    - 456
    - 1399
    - 1606
  foresaw: !ruby/object:Word
    word: foresaw
    stem: foresaw
    docFrequency: 3.0
    docPositions:
    - 194
    - 1400
  possibility: !ruby/object:Word
    word: possibility
    stem: possibl
    docFrequency: 18.0
    docPositions:
    - 194
    - 320
    - 325
    - 329
    - 351
    - 566
    - 777
    - 779
    - 873
    - 988
    - 1400
    - 1496
    - 1501
    - 1505
    - 1523
    - 1694
    - 1878
  using: !ruby/object:Word
    word: using
    stem: us
    docFrequency: 19.0
    docPositions:
    - 194
    - 395
    - 411
    - 424
    - 472
    - 507
    - 542
    - 670
    - 969
    - 1400
    - 1559
    - 1573
    - 1582
    - 1620
    - 1651
    - 1680
    - 1782
    - 1918
  non: !ruby/object:Word
    word: non
    stem: non
    docFrequency: 3.0
    docPositions:
    - 195
    - 1401
  numeric: !ruby/object:Word
    word: numeric
    stem: numer
    docFrequency: 3.0
    docPositions:
    - 195
    - 1401
  suggesting: !ruby/object:Word
    word: suggesting
    stem: suggest
    docFrequency: 3.0
    docPositions:
    - 195
    - 1401
  might: !ruby/object:Word
    word: might
    stem: might
    docFrequency: 6.0
    docPositions:
    - 195
    - 227
    - 916
    - 1401
    - 1427
  even: !ruby/object:Word
    word: even
    stem: even
    docFrequency: 5.0
    docPositions:
    - 195
    - 588
    - 1401
    - 1712
  capable: !ruby/object:Word
    word: capable
    stem: capabl
    docFrequency: 3.0
    docPositions:
    - 196
    - 1402
  composing: !ruby/object:Word
    word: composing
    stem: compos
    docFrequency: 3.0
    docPositions:
    - 196
    - 1402
  elaborate: !ruby/object:Word
    word: elaborate
    stem: elabor
    docFrequency: 3.0
    docPositions:
    - 196
    - 1402
  pieces: !ruby/object:Word
    word: pieces
    stem: piec
    docFrequency: 3.0
    docPositions:
    - 196
    - 1402
  music: !ruby/object:Word
    word: music
    stem: music
    docFrequency: 3.0
    docPositions:
    - 196
    - 1402
  large: !ruby/object:Word
    word: large
    stem: larg
    docFrequency: 19.0
    docPositions:
    - 200
    - 268
    - 337
    - 393
    - 414
    - 480
    - 542
    - 907
    - 1034
    - 1404
    - 1454
    - 1511
    - 1557
    - 1576
    - 1628
    - 1680
    - 1908
    - 1954
  under: !ruby/object:Word
    word: under
    stem: under
    docFrequency: 7.0
    docPositions:
    - 200
    - 847
    - 886
    - 1404
    - 1858
    - 1891
  construction: !ruby/object:Word
    word: construction
    stem: construct
    docFrequency: 5.0
    docPositions:
    - 200
    - 886
    - 1404
    - 1891
  time: !ruby/object:Word
    word: time
    stem: time
    docFrequency: 25.0
    docPositions:
    - 201
    - 204
    - 227
    - 457
    - 544
    - 610
    - 786
    - 788
    - 832
    - 979
    - 989
    - 1000
    - 1006
    - 1009
    - 1405
    - 1408
    - 1427
    - 1607
    - 1682
    - 1732
    - 1843
    - 1926
    - 1930
    - 1933
  death: !ruby/object:Word
    word: death
    stem: death
    docFrequency: 3.0
    docPositions:
    - 201
    - 1405
  forgotten: !ruby/object:Word
    word: forgotten
    stem: forgotten
    docFrequency: 3.0
    docPositions:
    - 203
    - 1407
  especially: !ruby/object:Word
    word: especially
    stem: especi
    docFrequency: 3.0
    docPositions:
    - 203
    - 1407
  occasion: !ruby/object:Word
    word: occasion
    stem: occas
    docFrequency: 3.0
    docPositions:
    - 203
    - 1407
  lively: !ruby/object:Word
    word: lively
    stem: live
    docFrequency: 3.0
    docPositions:
    - 203
    - 1407
  topic: !ruby/object:Word
    word: topic
    stem: topic
    docFrequency: 6.0
    docPositions:
    - 203
    - 347
    - 1192
    - 1407
    - 1519
  mealtime: !ruby/object:Word
    word: mealtime
    stem: mealtim
    docFrequency: 3.0
    docPositions:
    - 204
    - 1408
  discussion: !ruby/object:Word
    word: discussion
    stem: discuss
    docFrequency: 3.0
    docPositions:
    - 204
    - 1408
  war: !ruby/object:Word
    word: war
    stem: war
    docFrequency: 31.0
    docPositions:
    - 204
    - 258
    - 259
    - 335
    - 381
    - 408
    - 412
    - 444
    - 486
    - 515
    - 521
    - 529
    - 544
    - 626
    - 877
    - 1408
    - 1446
    - 1447
    - 1509
    - 1547
    - 1570
    - 1574
    - 1596
    - 1632
    - 1657
    - 1663
    - 1669
    - 1682
    - 1746
    - 1882
  headquarters: !ruby/object:Word
    word: headquarters
    stem: headquart
    docFrequency: 3.0
    docPositions:
    - 204
    - 1408
  code: !ruby/object:Word
    word: code
    stem: code
    docFrequency: 13.0
    docPositions:
    - 205
    - 336
    - 444
    - 456
    - 458
    - 588
    - 1409
    - 1510
    - 1596
    - 1606
    - 1608
    - 1712
  cypher: !ruby/object:Word
    word: cypher
    stem: cypher
    docFrequency: 7.0
    docPositions:
    - 205
    - 336
    - 444
    - 1409
    - 1510
    - 1596
  school: !ruby/object:Word
    word: school
    stem: school
    docFrequency: 19.0
    docPositions:
    - 205
    - 336
    - 444
    - 833
    - 854
    - 871
    - 890
    - 891
    - 970
    - 1409
    - 1510
    - 1596
    - 1844
    - 1861
    - 1876
    - 1895
    - 1896
    - 1919
  bletchley: !ruby/object:Word
    word: bletchley
    stem: bletchlei
    docFrequency: 22.0
    docPositions:
    - 205
    - 336
    - 346
    - 358
    - 384
    - 440
    - 456
    - 481
    - 487
    - 516
    - 1094
    - 1409
    - 1510
    - 1518
    - 1530
    - 1550
    - 1594
    - 1606
    - 1629
    - 1633
    - 1658
  park: !ruby/object:Word
    word: park
    stem: park
    docFrequency: 22.0
    docPositions:
    - 205
    - 336
    - 346
    - 358
    - 384
    - 440
    - 456
    - 481
    - 487
    - 516
    - 1094
    - 1409
    - 1510
    - 1518
    - 1530
    - 1550
    - 1594
    - 1606
    - 1629
    - 1633
    - 1658
  buckinghamshire: !ruby/object:Word
    word: buckinghamshire
    stem: buckinghamshir
    docFrequency: 3.0
    docPositions:
    - 205
    - 1409
  birthplace: !ruby/object:Word
    word: birthplace
    stem: birthplac
    docFrequency: 5.0
    docPositions:
    - 205
    - 667
    - 1409
    - 1779
  earliest: !ruby/object:Word
    word: earliest
    stem: earliest
    docFrequency: 11.0
    docPositions:
    - 212
    - 322
    - 400
    - 421
    - 634
    - 1412
    - 1498
    - 1562
    - 1579
    - 1750
  wide: !ruby/object:Word
    word: wide
    stem: wide
    docFrequency: 5.0
    docPositions:
    - 212
    - 1063
    - 1412
    - 1979
  use: !ruby/object:Word
    word: use
    stem: us
    docFrequency: 25.0
    docPositions:
    - 212
    - 256
    - 258
    - 271
    - 400
    - 421
    - 520
    - 624
    - 790
    - 808
    - 965
    - 989
    - 1063
    - 1412
    - 1444
    - 1446
    - 1457
    - 1562
    - 1579
    - 1662
    - 1744
    - 1823
    - 1914
    - 1979
  not: !ruby/object:Word
    word: not
    stem: not
    docFrequency: 36.0
    docPositions:
    - 212
    - 216
    - 253
    - 339
    - 410
    - 508
    - 563
    - 607
    - 663
    - 668
    - 811
    - 823
    - 847
    - 860
    - 889
    - 919
    - 921
    - 990
    - 1007
    - 1412
    - 1416
    - 1441
    - 1513
    - 1572
    - 1652
    - 1691
    - 1729
    - 1775
    - 1780
    - 1826
    - 1836
    - 1858
    - 1867
    - 1894
    - 1931
  representation: !ruby/object:Word
    word: representation
    stem: represent
    docFrequency: 10.0
    docPositions:
    - 213
    - 216
    - 233
    - 236
    - 240
    - 1413
    - 1416
    - 1431
    - 1434
  properties: !ruby/object:Word
    word: properties
    stem: properti
    docFrequency: 7.0
    docPositions:
    - 213
    - 214
    - 1044
    - 1413
    - 1414
    - 1962
  representational: !ruby/object:Word
    word: representational
    stem: represent
    docFrequency: 3.0
    docPositions:
    - 213
    - 1413
  medium: !ruby/object:Word
    word: medium
    stem: medium
    docFrequency: 9.0
    docPositions:
    - 214
    - 393
    - 997
    - 1034
    - 1414
    - 1557
    - 1923
    - 1954
  ape: !ruby/object:Word
    word: ape
    stem: ap
    docFrequency: 3.0
    docPositions:
    - 214
    - 1414
  reflect: !ruby/object:Word
    word: reflect
    stem: reflect
    docFrequency: 3.0
    docPositions:
    - 214
    - 1414
  state: !ruby/object:Word
    word: state
    stem: state
    docFrequency: 10.0
    docPositions:
    - 215
    - 422
    - 433
    - 621
    - 1115
    - 1415
    - 1580
    - 1591
    - 1741
  affairs: !ruby/object:Word
    word: affairs
    stem: affair
    docFrequency: 3.0
    docPositions:
    - 215
    - 1415
  obvious: !ruby/object:Word
    word: obvious
    stem: obviou
    docFrequency: 4.0
    docPositions:
    - 215
    - 783
    - 1415
  contrast: !ruby/object:Word
    word: contrast
    stem: contrast
    docFrequency: 3.0
    docPositions:
    - 215
    - 1415
  strings: !ruby/object:Word
    word: strings
    stem: string
    docFrequency: 3.0
    docPositions:
    - 215
    - 1415
  binary: !ruby/object:Word
    word: binary
    stem: binari
    docFrequency: 9.0
    docPositions:
    - 215
    - 432
    - 458
    - 1022
    - 1415
    - 1590
    - 1608
    - 1944
  digits: !ruby/object:Word
    word: digits
    stem: digit
    docFrequency: 7.0
    docPositions:
    - 215
    - 977
    - 1022
    - 1415
    - 1944
  do: !ruby/object:Word
    word: do
    stem: do
    docFrequency: 7.0
    docPositions:
    - 216
    - 685
    - 1015
    - 1265
    - 1416
    - 1939
  represent: !ruby/object:Word
    word: represent
    stem: repres
    docFrequency: 5.0
    docPositions:
    - 216
    - 227
    - 1416
    - 1427
  means: !ruby/object:Word
    word: means
    stem: mean
    docFrequency: 17.0
    docPositions:
    - 216
    - 353
    - 388
    - 446
    - 454
    - 468
    - 765
    - 862
    - 986
    - 1416
    - 1525
    - 1554
    - 1598
    - 1604
    - 1616
    - 1869
  possessing: !ruby/object:Word
    word: possessing
    stem: possess
    docFrequency: 3.0
    docPositions:
    - 217
    - 1417
  some: !ruby/object:Word
    word: some
    stem: some
    docFrequency: 17.0
    docPositions:
    - 217
    - 220
    - 348
    - 373
    - 518
    - 610
    - 774
    - 987
    - 988
    - 1417
    - 1420
    - 1520
    - 1539
    - 1660
    - 1732
    - 1815
  physical: !ruby/object:Word
    word: physical
    stem: physic
    docFrequency: 7.0
    docPositions:
    - 217
    - 507
    - 561
    - 1417
    - 1651
    - 1689
  property: !ruby/object:Word
    word: property
    stem: properti
    docFrequency: 5.0
    docPositions:
    - 217
    - 218
    - 1417
    - 1418
  length: !ruby/object:Word
    word: length
    stem: length
    docFrequency: 3.0
    docPositions:
    - 217
    - 1417
  whose: !ruby/object:Word
    word: whose
    stem: whose
    docFrequency: 6.0
    docPositions:
    - 218
    - 240
    - 293
    - 1418
    - 1475
  magnitude: !ruby/object:Word
    word: magnitude
    stem: magnitud
    docFrequency: 5.0
    docPositions:
    - 218
    - 1418
  varies: !ruby/object:Word
    word: varies
    stem: vari
    docFrequency: 3.0
    docPositions:
    - 218
    - 1418
  proportion: !ruby/object:Word
    word: proportion
    stem: proport
    docFrequency: 3.0
    docPositions:
    - 218
    - 1418
  representations: !ruby/object:Word
    word: representations
    stem: represent
    docFrequency: 4.0
    docPositions:
    - 219
    - 241
    - 1419
  form: !ruby/object:Word
    word: form
    stem: form
    docFrequency: 13.0
    docPositions:
    - 219
    - 300
    - 319
    - 769
    - 967
    - 982
    - 1026
    - 1419
    - 1480
    - 1495
    - 1916
    - 1948
  diverse: !ruby/object:Word
    word: diverse
    stem: divers
    docFrequency: 3.0
    docPositions:
    - 219
    - 1419
  class: !ruby/object:Word
    word: class
    stem: class
    docFrequency: 4.0
    docPositions:
    - 220
    - 956
    - 1420
  examples: !ruby/object:Word
    word: examples
    stem: exampl
    docFrequency: 3.0
    docPositions:
    - 220
    - 1420
  longer: !ruby/object:Word
    word: longer
    stem: longer
    docFrequency: 5.0
    docPositions:
    - 220
    - 1420
  line: !ruby/object:Word
    word: line
    stem: line
    docFrequency: 21.0
    docPositions:
    - 220
    - 221
    - 972
    - 981
    - 982
    - 986
    - 995
    - 997
    - 999
    - 1001
    - 1007
    - 1420
    - 1421
    - 1921
    - 1923
    - 1925
    - 1927
    - 1931
  road: !ruby/object:Word
    word: road
    stem: road
    docFrequency: 5.0
    docPositions:
    - 220
    - 221
    - 1420
    - 1421
  map: !ruby/object:Word
    word: map
    stem: map
    docFrequency: 3.0
    docPositions:
    - 220
    - 1420
  represents: !ruby/object:Word
    word: represents
    stem: repres
    docFrequency: 4.0
    docPositions:
    - 221
    - 241
    - 1421
  greater: !ruby/object:Word
    word: greater
    stem: greater
    docFrequency: 5.0
    docPositions:
    - 221
    - 222
    - 1421
    - 1422
  number: !ruby/object:Word
    word: number
    stem: number
    docFrequency: 14.0
    docPositions:
    - 221
    - 222
    - 234
    - 735
    - 739
    - 787
    - 788
    - 793
    - 1000
    - 1421
    - 1422
    - 1432
    - 1926
  clear: !ruby/object:Word
    word: clear
    stem: clear
    docFrequency: 3.0
    docPositions:
    - 221
    - 1421
  plastic: !ruby/object:Word
    word: plastic
    stem: plastic
    docFrequency: 3.0
    docPositions:
    - 221
    - 1421
  squares: !ruby/object:Word
    word: squares
    stem: squar
    docFrequency: 3.0
    docPositions:
    - 222
    - 1422
  architect: !ruby/object:Word
    word: architect
    stem: architect
    docFrequency: 5.0
    docPositions:
    - 222
    - 232
    - 1422
    - 1430
  windows: !ruby/object:Word
    word: windows
    stem: window
    docFrequency: 5.0
    docPositions:
    - 222
    - 234
    - 1422
    - 1432
  building: !ruby/object:Word
    word: building
    stem: build
    docFrequency: 17.0
    docPositions:
    - 223
    - 329
    - 339
    - 426
    - 449
    - 564
    - 589
    - 666
    - 1423
    - 1505
    - 1513
    - 1584
    - 1601
    - 1692
    - 1713
    - 1778
  higher: !ruby/object:Word
    word: higher
    stem: higher
    docFrequency: 5.0
    docPositions:
    - 223
    - 303
    - 1423
    - 1483
  pitch: !ruby/object:Word
    word: pitch
    stem: pitch
    docFrequency: 3.0
    docPositions:
    - 223
    - 1423
  acoustic: !ruby/object:Word
    word: acoustic
    stem: acoust
    docFrequency: 7.0
    docPositions:
    - 223
    - 967
    - 1035
    - 1423
    - 1916
    - 1955
  depth: !ruby/object:Word
    word: depth
    stem: depth
    docFrequency: 3.0
    docPositions:
    - 223
    - 1423
  meter: !ruby/object:Word
    word: meter
    stem: meter
    docFrequency: 3.0
    docPositions:
    - 224
    - 1424
  shallower: !ruby/object:Word
    word: shallower
    stem: shallow
    docFrequency: 3.0
    docPositions:
    - 224
    - 1424
  water: !ruby/object:Word
    word: water
    stem: water
    docFrequency: 3.0
    docPositions:
    - 224
    - 1424
  numerical: !ruby/object:Word
    word: numerical
    stem: numer
    docFrequency: 8.0
    docPositions:
    - 224
    - 411
    - 424
    - 946
    - 1424
    - 1573
    - 1582
  quantities: !ruby/object:Word
    word: quantities
    stem: quantiti
    docFrequency: 5.0
    docPositions:
    - 225
    - 1034
    - 1425
    - 1954
  example: !ruby/object:Word
    word: example
    stem: exampl
    docFrequency: 14.0
    docPositions:
    - 225
    - 288
    - 460
    - 590
    - 739
    - 812
    - 874
    - 1425
    - 1470
    - 1610
    - 1714
    - 1827
    - 1879
  angle: !ruby/object:Word
    word: angle
    stem: angl
    docFrequency: 3.0
    docPositions:
    - 225
    - 1425
  rotation: !ruby/object:Word
    word: rotation
    stem: rotat
    docFrequency: 3.0
    docPositions:
    - 225
    - 1425
  shaft: !ruby/object:Word
    word: shaft
    stem: shaft
    docFrequency: 3.0
    docPositions:
    - 226
    - 1426
  electrical: !ruby/object:Word
    word: electrical
    stem: electr
    docFrequency: 7.0
    docPositions:
    - 226
    - 291
    - 854
    - 1426
    - 1473
    - 1861
  potential: !ruby/object:Word
    word: potential
    stem: potenti
    docFrequency: 3.0
    docPositions:
    - 226
    - 1426
  thus: !ruby/object:Word
    word: thus
    stem: thu
    docFrequency: 4.0
    docPositions:
    - 226
    - 747
    - 1426
  output: !ruby/object:Word
    word: output
    stem: output
    docFrequency: 5.0
    docPositions:
    - 226
    - 741
    - 984
    - 1426
  voltage: !ruby/object:Word
    word: voltage
    stem: voltag
    docFrequency: 7.0
    docPositions:
    - 226
    - 237
    - 983
    - 1426
    - 1435
  momentary: !ruby/object:Word
    word: momentary
    stem: momentari
    docFrequency: 3.0
    docPositions:
    - 227
    - 1427
  object: !ruby/object:Word
    word: object
    stem: object
    docFrequency: 3.0
    docPositions:
    - 228
    - 1428
  modelled: !ruby/object:Word
    word: modelled
    stem: model
    docFrequency: 3.0
    docPositions:
    - 228
    - 1428
  case: !ruby/object:Word
    word: case
    stem: case
    docFrequency: 5.0
    docPositions:
    - 232
    - 291
    - 1430
    - 1473
  makes: !ruby/object:Word
    word: makes
    stem: make
    docFrequency: 3.0
    docPositions:
    - 232
    - 1430
  plain: !ruby/object:Word
    word: plain
    stem: plain
    docFrequency: 3.0
    docPositions:
    - 232
    - 1430
  may: !ruby/object:Word
    word: may
    stem: mai
    docFrequency: 19.0
    docPositions:
    - 233
    - 285
    - 583
    - 607
    - 762
    - 804
    - 820
    - 976
    - 986
    - 987
    - 1062
    - 1431
    - 1467
    - 1707
    - 1729
    - 1819
    - 1833
    - 1978
  discrete: !ruby/object:Word
    word: discrete
    stem: discret
    docFrequency: 4.0
    docPositions:
    - 233
    - 244
    - 1431
  nature: !ruby/object:Word
    word: nature
    stem: natur
    docFrequency: 3.0
    docPositions:
    - 233
    - 1431
  there: !ruby/object:Word
    word: there
    stem: there
    docFrequency: 16.0
    docPositions:
    - 233
    - 304
    - 486
    - 497
    - 669
    - 734
    - 768
    - 788
    - 821
    - 1431
    - 1484
    - 1632
    - 1643
    - 1781
    - 1834
  thing: !ruby/object:Word
    word: thing
    stem: thing
    docFrequency: 4.0
    docPositions:
    - 234
    - 701
    - 1432
  fractional: !ruby/object:Word
    word: fractional
    stem: fraction
    docFrequency: 3.0
    docPositions:
    - 234
    - 1432
  scientists: !ruby/object:Word
    word: scientists
    stem: scientist
    docFrequency: 3.0
    docPositions:
    - 234
    - 1432
  sometimes: !ruby/object:Word
    word: sometimes
    stem: sometim
    docFrequency: 5.0
    docPositions:
    - 235
    - 426
    - 1433
    - 1584
  narrowly: !ruby/object:Word
    word: narrowly
    stem: narrowli
    docFrequency: 3.0
    docPositions:
    - 235
    - 1433
  indicate: !ruby/object:Word
    word: indicate
    stem: indic
    docFrequency: 3.0
    docPositions:
    - 235
    - 1433
  continuously: !ruby/object:Word
    word: continuously
    stem: continu
    docFrequency: 5.0
    docPositions:
    - 236
    - 406
    - 1434
    - 1568
  valued: !ruby/object:Word
    word: valued
    stem: valu
    docFrequency: 3.0
    docPositions:
    - 236
    - 1434
  quantity: !ruby/object:Word
    word: quantity
    stem: quantiti
    docFrequency: 3.0
    docPositions:
    - 236
    - 1434
  another: !ruby/object:Word
    word: another
    stem: anoth
    docFrequency: 10.0
    docPositions:
    - 236
    - 590
    - 624
    - 738
    - 1306
    - 1434
    - 1714
    - 1744
    - 1991
  g: !ruby/object:Word
    word: g
    stem: g
    docFrequency: 7.0
    docPositions:
    - 237
    - 1082
    - 1171
    - 1334
    - 1336
    - 1435
  brian: !ruby/object:Word
    word: brian
    stem: brian
    docFrequency: 5.0
    docPositions:
    - 237
    - 811
    - 1435
    - 1826
  cantwell: !ruby/object:Word
    word: cantwell
    stem: cantwel
    docFrequency: 3.0
    docPositions:
    - 237
    - 1435
  smith: !ruby/object:Word
    word: smith
    stem: smith
    docFrequency: 5.0
    docPositions:
    - 237
    - 244
    - 1128
    - 1435
  has: !ruby/object:Word
    word: has
    stem: ha
    docFrequency: 15.0
    docPositions:
    - 237
    - 299
    - 411
    - 514
    - 651
    - 728
    - 908
    - 1261
    - 1435
    - 1479
    - 1573
    - 1656
    - 1765
    - 1909
  remarked: !ruby/object:Word
    word: remarked
    stem: remark
    docFrequency: 9.0
    docPositions:
    - 237
    - 328
    - 412
    - 565
    - 1435
    - 1504
    - 1574
    - 1693
  should: !ruby/object:Word
    word: should
    stem: should
    docFrequency: 5.0
    docPositions:
    - 239
    - 241
    - 409
    - 1571
  predicate: !ruby/object:Word
    word: predicate
    stem: predic
    docFrequency: 2.0
    docPositions:
    - 239
  structure: !ruby/object:Word
    word: structure
    stem: structur
    docFrequency: 4.0
    docPositions:
    - 240
    - 591
    - 1715
  corresponds: !ruby/object:Word
    word: corresponds
    stem: correspond
    docFrequency: 2.0
    docPositions:
    - 240
  continuous: !ruby/object:Word
    word: continuous
    stem: continu
    docFrequency: 3.0
    docPositions:
    - 241
    - 244
  come: !ruby/object:Word
    word: come
    stem: come
    docFrequency: 2.0
    docPositions:
    - 242
  called: !ruby/object:Word
    word: called
    stem: call
    docFrequency: 17.0
    docPositions:
    - 242
    - 377
    - 386
    - 426
    - 489
    - 599
    - 822
    - 917
    - 966
    - 1543
    - 1552
    - 1584
    - 1635
    - 1721
    - 1835
    - 1915
  presumably: !ruby/object:Word
    word: presumably
    stem: presum
    docFrequency: 2.0
    docPositions:
    - 242
  betrays: !ruby/object:Word
    word: betrays
    stem: betrai
    docFrequency: 2.0
    docPositions:
    - 242
  recognition: !ruby/object:Word
    word: recognition
    stem: recognit
    docFrequency: 2.0
    docPositions:
    - 242
  levels: !ruby/object:Word
    word: levels
    stem: level
    docFrequency: 2.0
    docPositions:
    - 243
  matters: !ruby/object:Word
    word: matters
    stem: matter
    docFrequency: 2.0
    docPositions:
    - 243
  us: !ruby/object:Word
    word: us
    stem: us
    docFrequency: 8.0
    docPositions:
    - 243
    - 703
    - 706
    - 718
    - 783
    - 942
    - 945
  world: !ruby/object:Word
    word: world
    stem: world
    docFrequency: 18.0
    docPositions:
    - 243
    - 258
    - 271
    - 335
    - 381
    - 480
    - 529
    - 611
    - 641
    - 1446
    - 1457
    - 1509
    - 1547
    - 1628
    - 1669
    - 1733
    - 1757
  foundationally: !ruby/object:Word
    word: foundationally
    stem: foundation
    docFrequency: 2.0
    docPositions:
    - 244
  james: !ruby/object:Word
    word: james
    stem: jame
    docFrequency: 3.0
    docPositions:
    - 249
    - 1437
  thomson: !ruby/object:Word
    word: thomson
    stem: thomson
    docFrequency: 6.0
    docPositions:
    - 249
    - 251
    - 1132
    - 1437
    - 1439
  brother: !ruby/object:Word
    word: brother
    stem: brother
    docFrequency: 3.0
    docPositions:
    - 249
    - 1437
  lord: !ruby/object:Word
    word: lord
    stem: lord
    docFrequency: 3.0
    docPositions:
    - 249
    - 1437
  kelvin: !ruby/object:Word
    word: kelvin
    stem: kelvin
    docFrequency: 7.0
    docPositions:
    - 249
    - 253
    - 255
    - 1437
    - 1441
    - 1443
  invented: !ruby/object:Word
    word: invented
    stem: invent
    docFrequency: 5.0
    docPositions:
    - 249
    - 313
    - 1437
    - 1489
  wheel: !ruby/object:Word
    word: wheel
    stem: wheel
    docFrequency: 17.0
    docPositions:
    - 250
    - 258
    - 270
    - 279
    - 491
    - 494
    - 495
    - 1438
    - 1446
    - 1456
    - 1463
    - 1637
    - 1640
    - 1641
  disc: !ruby/object:Word
    word: disc
    stem: disc
    docFrequency: 9.0
    docPositions:
    - 250
    - 258
    - 270
    - 279
    - 1438
    - 1446
    - 1456
    - 1463
  integrator: !ruby/object:Word
    word: integrator
    stem: integr
    docFrequency: 9.0
    docPositions:
    - 250
    - 258
    - 260
    - 270
    - 1438
    - 1446
    - 1448
    - 1456
  became: !ruby/object:Word
    word: became
    stem: becam
    docFrequency: 24.0
    docPositions:
    - 250
    - 337
    - 360
    - 636
    - 641
    - 661
    - 664
    - 835
    - 900
    - 955
    - 1011
    - 1060
    - 1438
    - 1511
    - 1532
    - 1752
    - 1757
    - 1773
    - 1776
    - 1846
    - 1903
    - 1935
    - 1976
  foundation: !ruby/object:Word
    word: foundation
    stem: foundat
    docFrequency: 3.0
    docPositions:
    - 250
    - 1438
  brothers: !ruby/object:Word
    word: brothers
    stem: brother
    docFrequency: 3.0
    docPositions:
    - 251
    - 1439
  device: !ruby/object:Word
    word: device
    stem: devic
    docFrequency: 3.0
    docPositions:
    - 251
    - 1439
  integral: !ruby/object:Word
    word: integral
    stem: integr
    docFrequency: 5.0
    docPositions:
    - 252
    - 1012
    - 1440
    - 1936
  product: !ruby/object:Word
    word: product
    stem: product
    docFrequency: 3.0
    docPositions:
    - 252
    - 1440
  given: !ruby/object:Word
    word: given
    stem: given
    docFrequency: 9.0
    docPositions:
    - 252
    - 289
    - 493
    - 628
    - 1440
    - 1471
    - 1639
    - 1748
  functions: !ruby/object:Word
    word: functions
    stem: function
    docFrequency: 3.0
    docPositions:
    - 252
    - 1440
  described: !ruby/object:Word
    word: described
    stem: describ
    docFrequency: 16.0
    docPositions:
    - 253
    - 314
    - 330
    - 338
    - 564
    - 744
    - 774
    - 908
    - 1441
    - 1490
    - 1506
    - 1512
    - 1692
    - 1815
    - 1909
  although: !ruby/object:Word
    word: although
    stem: although
    docFrequency: 11.0
    docPositions:
    - 253
    - 394
    - 429
    - 858
    - 900
    - 1441
    - 1558
    - 1587
    - 1865
    - 1903
  construct: !ruby/object:Word
    word: construct
    stem: construct
    docFrequency: 5.0
    docPositions:
    - 253
    - 670
    - 1441
    - 1782
  integrating: !ruby/object:Word
    word: integrating
    stem: integr
    docFrequency: 4.0
    docPositions:
    - 254
    - 1132
    - 1442
  linear: !ruby/object:Word
    word: linear
    stem: linear
    docFrequency: 7.0
    docPositions:
    - 254
    - 255
    - 428
    - 1442
    - 1443
    - 1586
  differential: !ruby/object:Word
    word: differential
    stem: differenti
    docFrequency: 13.0
    docPositions:
    - 254
    - 268
    - 272
    - 278
    - 285
    - 298
    - 1442
    - 1454
    - 1458
    - 1462
    - 1467
    - 1478
  equations: !ruby/object:Word
    word: equations
    stem: equat
    docFrequency: 9.0
    docPositions:
    - 254
    - 255
    - 299
    - 428
    - 1442
    - 1443
    - 1479
    - 1586
  order: !ruby/object:Word
    word: order
    stem: order
    docFrequency: 17.0
    docPositions:
    - 254
    - 357
    - 670
    - 738
    - 743
    - 748
    - 766
    - 767
    - 874
    - 984
    - 1006
    - 1442
    - 1529
    - 1782
    - 1879
    - 1930
  solving: !ruby/object:Word
    word: solving
    stem: solv
    docFrequency: 7.0
    docPositions:
    - 255
    - 352
    - 842
    - 1443
    - 1524
    - 1853
  simultaneous: !ruby/object:Word
    word: simultaneous
    stem: simultan
    docFrequency: 3.0
    docPositions:
    - 255
    - 1443
  most: !ruby/object:Word
    word: most
    stem: most
    docFrequency: 8.0
    docPositions:
    - 255
    - 517
    - 694
    - 744
    - 1443
    - 1659
    - 1795
  successful: !ruby/object:Word
    word: successful
    stem: success
    docFrequency: 3.0
    docPositions:
    - 255
    - 1443
  his: !ruby/object:Word
    word: his
    stem: hi
    docFrequency: 48.0
    docPositions:
    - 256
    - 270
    - 279
    - 349
    - 358
    - 365
    - 366
    - 425
    - 466
    - 547
    - 561
    - 601
    - 652
    - 660
    - 664
    - 665
    - 698
    - 730
    - 804
    - 810
    - 844
    - 898
    - 899
    - 913
    - 1077
    - 1444
    - 1456
    - 1463
    - 1521
    - 1530
    - 1535
    - 1536
    - 1583
    - 1614
    - 1685
    - 1689
    - 1723
    - 1766
    - 1772
    - 1776
    - 1777
    - 1799
    - 1819
    - 1825
    - 1855
    - 1901
    - 1902
  predicting: !ruby/object:Word
    word: predicting
    stem: predict
    docFrequency: 3.0
    docPositions:
    - 256
    - 1444
  remained: !ruby/object:Word
    word: remained
    stem: remain
    docFrequency: 5.0
    docPositions:
    - 256
    - 624
    - 1444
    - 1744
  port: !ruby/object:Word
    word: port
    stem: port
    docFrequency: 3.0
    docPositions:
    - 257
    - 1445
  liverpool: !ruby/object:Word
    word: liverpool
    stem: liverpool
    docFrequency: 3.0
    docPositions:
    - 257
    - 1445
  until: !ruby/object:Word
    word: until
    stem: until
    docFrequency: 19.0
    docPositions:
    - 257
    - 340
    - 527
    - 607
    - 624
    - 663
    - 680
    - 843
    - 1026
    - 1445
    - 1514
    - 1667
    - 1729
    - 1744
    - 1775
    - 1790
    - 1854
    - 1948
  devices: !ruby/object:Word
    word: devices
    stem: devic
    docFrequency: 12.0
    docPositions:
    - 257
    - 281
    - 469
    - 551
    - 884
    - 969
    - 1445
    - 1465
    - 1617
    - 1889
    - 1918
  based: !ruby/object:Word
    word: based
    stem: base
    docFrequency: 12.0
    docPositions:
    - 258
    - 270
    - 458
    - 459
    - 470
    - 1080
    - 1446
    - 1456
    - 1608
    - 1609
    - 1618
  gunnery: !ruby/object:Word
    word: gunnery
    stem: gunneri
    docFrequency: 3.0
    docPositions:
    - 259
    - 1447
  following: !ruby/object:Word
    word: following
    stem: follow
    docFrequency: 9.0
    docPositions:
    - 259
    - 489
    - 521
    - 755
    - 1447
    - 1635
    - 1663
    - 1810
  design: !ruby/object:Word
    word: design
    stem: design
    docFrequency: 20.0
    docPositions:
    - 259
    - 269
    - 562
    - 598
    - 620
    - 625
    - 805
    - 908
    - 1013
    - 1119
    - 1447
    - 1455
    - 1690
    - 1720
    - 1740
    - 1745
    - 1820
    - 1909
    - 1937
  improved: !ruby/object:Word
    word: improved
    stem: improv
    docFrequency: 3.0
    docPositions:
    - 260
    - 1448
  hannibal: !ruby/object:Word
    word: hannibal
    stem: hannib
    docFrequency: 3.0
    docPositions:
    - 260
    - 1448
  ford: !ruby/object:Word
    word: ford
    stem: ford
    docFrequency: 6.0
    docPositions:
    - 260
    - 1108
    - 1448
  stanley: !ruby/object:Word
    word: stanley
    stem: stanlei
    docFrequency: 5.0
    docPositions:
    - 264
    - 906
    - 1450
    - 1907
  fifer: !ruby/object:Word
    word: fifer
    stem: fifer
    docFrequency: 6.0
    docPositions:
    - 264
    - 266
    - 1105
    - 1450
    - 1452
  reports: !ruby/object:Word
    word: reports
    stem: report
    docFrequency: 3.0
    docPositions:
    - 264
    - 1450
  first: !ruby/object:Word
    word: first
    stem: first
    docFrequency: 55.0
    docPositions:
    - 264
    - 268
    - 361
    - 385
    - 439
    - 457
    - 469
    - 480
    - 505
    - 575
    - 581
    - 582
    - 609
    - 623
    - 638
    - 641
    - 642
    - 701
    - 745
    - 761
    - 795
    - 796
    - 830
    - 839
    - 841
    - 853
    - 863
    - 950
    - 959
    - 1053
    - 1153
    - 1450
    - 1454
    - 1533
    - 1551
    - 1593
    - 1607
    - 1617
    - 1628
    - 1649
    - 1701
    - 1705
    - 1706
    - 1731
    - 1743
    - 1754
    - 1757
    - 1758
    - 1841
    - 1850
    - 1852
    - 1860
    - 1870
    - 1971
  semi: !ruby/object:Word
    word: semi
    stem: semi
    docFrequency: 3.0
    docPositions:
    - 264
    - 1450
  england: !ruby/object:Word
    word: england
    stem: england
    docFrequency: 6.0
    docPositions:
    - 265
    - 272
    - 1079
    - 1451
    - 1458
  firm: !ruby/object:Word
    word: firm
    stem: firm
    docFrequency: 3.0
    docPositions:
    - 265
    - 1451
  metropolitan: !ruby/object:Word
    word: metropolitan
    stem: metropolitan
    docFrequency: 3.0
    docPositions:
    - 266
    - 1452
  vickers: !ruby/object:Word
    word: vickers
    stem: vicker
    docFrequency: 3.0
    docPositions:
    - 266
    - 1452
  prior: !ruby/object:Word
    word: prior
    stem: prior
    docFrequency: 5.0
    docPositions:
    - 266
    - 880
    - 1452
    - 1885
  however: !ruby/object:Word
    word: however
    stem: howev
    docFrequency: 9.0
    docPositions:
    - 266
    - 306
    - 338
    - 602
    - 1452
    - 1486
    - 1512
    - 1724
  so: !ruby/object:Word
    word: so
    stem: so
    docFrequency: 18.0
    docPositions:
    - 267
    - 290
    - 322
    - 380
    - 489
    - 704
    - 735
    - 750
    - 919
    - 1009
    - 1265
    - 1453
    - 1472
    - 1498
    - 1546
    - 1635
    - 1933
  far: !ruby/object:Word
    word: far
    stem: far
    docFrequency: 13.0
    docPositions:
    - 267
    - 322
    - 563
    - 858
    - 919
    - 983
    - 1009
    - 1453
    - 1498
    - 1691
    - 1865
    - 1933
  unable: !ruby/object:Word
    word: unable
    stem: unabl
    docFrequency: 3.0
    docPositions:
    - 267
    - 1453
  verify: !ruby/object:Word
    word: verify
    stem: verifi
    docFrequency: 3.0
    docPositions:
    - 267
    - 1453
  claim: !ruby/object:Word
    word: claim
    stem: claim
    docFrequency: 3.0
    docPositions:
    - 267
    - 1453
  vannevar: !ruby/object:Word
    word: vannevar
    stem: vannevar
    docFrequency: 3.0
    docPositions:
    - 267
    - 1453
  bush: !ruby/object:Word
    word: bush
    stem: bush
    docFrequency: 9.0
    docPositions:
    - 267
    - 269
    - 278
    - 279
    - 1453
    - 1455
    - 1462
    - 1463
  mit: !ruby/object:Word
    word: mit
    stem: mit
    docFrequency: 5.0
    docPositions:
    - 268
    - 1054
    - 1454
    - 1972
  analyser: !ruby/object:Word
    word: analyser
    stem: analys
    docFrequency: 9.0
    docPositions:
    - 268
    - 278
    - 285
    - 299
    - 1454
    - 1462
    - 1467
    - 1479
  soon: !ruby/object:Word
    word: soon
    stem: soon
    docFrequency: 7.0
    docPositions:
    - 270
    - 1049
    - 1060
    - 1456
    - 1967
    - 1976
  copies: !ruby/object:Word
    word: copies
    stem: copi
    docFrequency: 3.0
    docPositions:
    - 270
    - 1456
  around: !ruby/object:Word
    word: around
    stem: around
    docFrequency: 3.0
    docPositions:
    - 271
    - 1457
  including: !ruby/object:Word
    word: including
    stem: includ
    docFrequency: 9.0
    docPositions:
    - 271
    - 365
    - 373
    - 873
    - 1457
    - 1535
    - 1539
    - 1878
  universities: !ruby/object:Word
    word: universities
    stem: univers
    docFrequency: 3.0
    docPositions:
    - 272
    - 1458
  analysers: !ruby/object:Word
    word: analysers
    stem: analys
    docFrequency: 3.0
    docPositions:
    - 272
    - 1458
  kit: !ruby/object:Word
    word: kit
    stem: kit
    docFrequency: 3.0
    docPositions:
    - 272
    - 1458
  set: !ruby/object:Word
    word: set
    stem: set
    docFrequency: 13.0
    docPositions:
    - 272
    - 277
    - 290
    - 300
    - 388
    - 506
    - 1458
    - 1461
    - 1472
    - 1480
    - 1554
    - 1650
  meccano: !ruby/object:Word
    word: meccano
    stem: meccano
    docFrequency: 3.0
    docPositions:
    - 273
    - 1459
  once: !ruby/object:Word
    word: once
    stem: onc
    docFrequency: 7.0
    docPositions:
    - 273
    - 518
    - 1059
    - 1459
    - 1660
    - 1975
  popular: !ruby/object:Word
    word: popular
    stem: popular
    docFrequency: 3.0
    docPositions:
    - 273
    - 1459
  engineering: !ruby/object:Word
    word: engineering
    stem: engin
    docFrequency: 7.0
    docPositions:
    - 273
    - 584
    - 855
    - 1459
    - 1708
    - 1862
  toy: !ruby/object:Word
    word: toy
    stem: toi
    docFrequency: 3.0
    docPositions:
    - 273
    - 1459
  required: !ruby/object:Word
    word: required
    stem: requir
    docFrequency: 12.0
    docPositions:
    - 277
    - 357
    - 748
    - 877
    - 1009
    - 1016
    - 1461
    - 1529
    - 1882
    - 1933
    - 1940
  skilled: !ruby/object:Word
    word: skilled
    stem: skill
    docFrequency: 3.0
    docPositions:
    - 277
    - 1461
  mechanic: !ruby/object:Word
    word: mechanic
    stem: mechan
    docFrequency: 3.0
    docPositions:
    - 277
    - 1461
  equipped: !ruby/object:Word
    word: equipped
    stem: equip
    docFrequency: 5.0
    docPositions:
    - 277
    - 1036
    - 1461
    - 1956
  lead: !ruby/object:Word
    word: lead
    stem: lead
    docFrequency: 5.0
    docPositions:
    - 277
    - 679
    - 1461
    - 1789
  hammer: !ruby/object:Word
    word: hammer
    stem: hammer
    docFrequency: 3.0
    docPositions:
    - 277
    - 1461
  up: !ruby/object:Word
    word: up
    stem: up
    docFrequency: 24.0
    docPositions:
    - 277
    - 289
    - 301
    - 388
    - 506
    - 518
    - 553
    - 605
    - 699
    - 758
    - 768
    - 861
    - 1192
    - 1461
    - 1471
    - 1481
    - 1554
    - 1650
    - 1660
    - 1727
    - 1800
    - 1813
    - 1868
  each: !ruby/object:Word
    word: each
    stem: each
    docFrequency: 19.0
    docPositions:
    - 278
    - 287
    - 447
    - 496
    - 503
    - 735
    - 748
    - 787
    - 974
    - 1008
    - 1010
    - 1462
    - 1469
    - 1599
    - 1642
    - 1647
    - 1932
    - 1934
  job: !ruby/object:Word
    word: job
    stem: job
    docFrequency: 5.0
    docPositions:
    - 278
    - 861
    - 1462
    - 1868
  subsequently: !ruby/object:Word
    word: subsequently
    stem: subsequ
    docFrequency: 5.0
    docPositions:
    - 278
    - 1011
    - 1462
    - 1935
  colleagues: !ruby/object:Word
    word: colleagues
    stem: colleagu
    docFrequency: 7.0
    docPositions:
    - 279
    - 346
    - 349
    - 1463
    - 1518
    - 1521
  replaced: !ruby/object:Word
    word: replaced
    stem: replac
    docFrequency: 5.0
    docPositions:
    - 279
    - 1061
    - 1463
    - 1977
  integrators: !ruby/object:Word
    word: integrators
    stem: integr
    docFrequency: 3.0
    docPositions:
    - 279
    - 1463
  conceptualised: !ruby/object:Word
    word: conceptualised
    stem: conceptualis
    docFrequency: 3.0
    docPositions:
    - 285
    - 1467
  collection: !ruby/object:Word
    word: collection
    stem: collect
    docFrequency: 3.0
    docPositions:
    - 285
    - 1467
  black: !ruby/object:Word
    word: black
    stem: black
    docFrequency: 3.0
    docPositions:
    - 286
    - 1468
  boxes: !ruby/object:Word
    word: boxes
    stem: box
    docFrequency: 7.0
    docPositions:
    - 286
    - 289
    - 298
    - 1468
    - 1471
    - 1478
  allow: !ruby/object:Word
    word: allow
    stem: allow
    docFrequency: 3.0
    docPositions:
    - 286
    - 1468
  considerable: !ruby/object:Word
    word: considerable
    stem: consider
    docFrequency: 9.0
    docPositions:
    - 287
    - 304
    - 345
    - 1014
    - 1469
    - 1484
    - 1517
    - 1938
  feedback: !ruby/object:Word
    word: feedback
    stem: feedback
    docFrequency: 3.0
    docPositions:
    - 287
    - 1469
  box: !ruby/object:Word
    word: box
    stem: box
    docFrequency: 3.0
    docPositions:
    - 287
    - 1469
  performs: !ruby/object:Word
    word: performs
    stem: perform
    docFrequency: 3.0
    docPositions:
    - 287
    - 1469
  fundamental: !ruby/object:Word
    word: fundamental
    stem: fundament
    docFrequency: 11.0
    docPositions:
    - 287
    - 290
    - 648
    - 912
    - 918
    - 999
    - 1469
    - 1472
    - 1762
    - 1925
  process: !ruby/object:Word
    word: process
    stem: process
    docFrequency: 8.0
    docPositions:
    - 287
    - 468
    - 659
    - 744
    - 1469
    - 1616
    - 1771
  addition: !ruby/object:Word
    word: addition
    stem: addit
    docFrequency: 5.0
    docPositions:
    - 288
    - 489
    - 1470
    - 1635
  multiplication: !ruby/object:Word
    word: multiplication
    stem: multipl
    docFrequency: 7.0
    docPositions:
    - 288
    - 1016
    - 1017
    - 1470
    - 1940
    - 1941
  variable: !ruby/object:Word
    word: variable
    stem: variabl
    docFrequency: 3.0
    docPositions:
    - 288
    - 1470
  constant: !ruby/object:Word
    word: constant
    stem: constant
    docFrequency: 3.0
    docPositions:
    - 288
    - 1470
  integration: !ruby/object:Word
    word: integration
    stem: integr
    docFrequency: 3.0
    docPositions:
    - 289
    - 1471
  setting: !ruby/object:Word
    word: setting
    stem: set
    docFrequency: 14.0
    docPositions:
    - 289
    - 301
    - 348
    - 491
    - 768
    - 861
    - 887
    - 1471
    - 1481
    - 1520
    - 1637
    - 1868
    - 1892
  task: !ruby/object:Word
    word: task
    stem: task
    docFrequency: 11.0
    docPositions:
    - 289
    - 388
    - 506
    - 509
    - 845
    - 1471
    - 1554
    - 1650
    - 1653
    - 1856
  desired: !ruby/object:Word
    word: desired
    stem: desir
    docFrequency: 5.0
    docPositions:
    - 290
    - 302
    - 1472
    - 1482
  processes: !ruby/object:Word
    word: processes
    stem: process
    docFrequency: 3.0
    docPositions:
    - 290
    - 1472
  executed: !ruby/object:Word
    word: executed
    stem: execut
    docFrequency: 5.0
    docPositions:
    - 291
    - 609
    - 1473
    - 1731
  done: !ruby/object:Word
    word: done
    stem: done
    docFrequency: 4.0
    docPositions:
    - 291
    - 744
    - 1473
  typically: !ruby/object:Word
    word: typically
    stem: typic
    docFrequency: 3.0
    docPositions:
    - 291
    - 1473
  plugging: !ruby/object:Word
    word: plugging
    stem: plug
    docFrequency: 3.0
    docPositions:
    - 292
    - 1474
  wires: !ruby/object:Word
    word: wires
    stem: wire
    docFrequency: 5.0
    docPositions:
    - 292
    - 388
    - 1474
    - 1554
  into: !ruby/object:Word
    word: into
    stem: into
    docFrequency: 12.0
    docPositions:
    - 292
    - 300
    - 404
    - 746
    - 982
    - 986
    - 1063
    - 1474
    - 1480
    - 1566
    - 1979
  sockets: !ruby/object:Word
    word: sockets
    stem: socket
    docFrequency: 3.0
    docPositions:
    - 292
    - 1474
  patch: !ruby/object:Word
    word: patch
    stem: patch
    docFrequency: 3.0
    docPositions:
    - 292
    - 1474
  panel: !ruby/object:Word
    word: panel
    stem: panel
    docFrequency: 3.0
    docPositions:
    - 292
    - 1474
  function: !ruby/object:Word
    word: function
    stem: function
    docFrequency: 13.0
    docPositions:
    - 293
    - 491
    - 756
    - 859
    - 1231
    - 1334
    - 1475
    - 1637
    - 1811
    - 1866
    - 1982
  determined: !ruby/object:Word
    word: determined
    stem: determin
    docFrequency: 3.0
    docPositions:
    - 293
    - 1475
  referred: !ruby/object:Word
    word: referred
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 293
    - 1475
  since: !ruby/object:Word
    word: since
    stem: sinc
    docFrequency: 6.0
    docPositions:
    - 298
    - 473
    - 781
    - 1478
    - 1621
  all: !ruby/object:Word
    word: all
    stem: all
    docFrequency: 16.0
    docPositions:
    - 298
    - 477
    - 519
    - 618
    - 644
    - 728
    - 734
    - 864
    - 1120
    - 1478
    - 1625
    - 1661
    - 1738
    - 1760
    - 1871
  parallel: !ruby/object:Word
    word: parallel
    stem: parallel
    docFrequency: 3.0
    docPositions:
    - 298
    - 1478
  solves: !ruby/object:Word
    word: solves
    stem: solv
    docFrequency: 3.0
    docPositions:
    - 299
    - 1479
  sets: !ruby/object:Word
    word: sets
    stem: set
    docFrequency: 3.0
    docPositions:
    - 299
    - 1479
  very: !ruby/object:Word
    word: very
    stem: veri
    docFrequency: 10.0
    docPositions:
    - 299
    - 444
    - 551
    - 604
    - 617
    - 1479
    - 1596
    - 1726
    - 1737
  quickly: !ruby/object:Word
    word: quickly
    stem: quickli
    docFrequency: 3.0
    docPositions:
    - 299
    - 1479
  against: !ruby/object:Word
    word: against
    stem: against
    docFrequency: 3.0
    docPositions:
    - 299
    - 1479
  cost: !ruby/object:Word
    word: cost
    stem: cost
    docFrequency: 7.0
    docPositions:
    - 300
    - 303
    - 588
    - 1480
    - 1483
    - 1712
  massaging: !ruby/object:Word
    word: massaging
    stem: massag
    docFrequency: 3.0
    docPositions:
    - 300
    - 1480
  problem: !ruby/object:Word
    word: problem
    stem: problem
    docFrequency: 9.0
    docPositions:
    - 300
    - 358
    - 681
    - 687
    - 703
    - 1480
    - 1530
    - 1791
  solved: !ruby/object:Word
    word: solved
    stem: solv
    docFrequency: 3.0
    docPositions:
    - 300
    - 1480
  demanded: !ruby/object:Word
    word: demanded
    stem: demand
    docFrequency: 5.0
    docPositions:
    - 301
    - 619
    - 1481
    - 1739
  hardware: !ruby/object:Word
    word: hardware
    stem: hardwar
    docFrequency: 9.0
    docPositions:
    - 301
    - 532
    - 585
    - 587
    - 1481
    - 1672
    - 1709
    - 1711
  major: !ruby/object:Word
    word: major
    stem: major
    docFrequency: 9.0
    docPositions:
    - 302
    - 487
    - 517
    - 1042
    - 1482
    - 1633
    - 1659
    - 1960
  drawback: !ruby/object:Word
    word: drawback
    stem: drawback
    docFrequency: 3.0
    docPositions:
    - 302
    - 1482
  relative: !ruby/object:Word
    word: relative
    stem: rel
    docFrequency: 7.0
    docPositions:
    - 303
    - 1008
    - 1059
    - 1483
    - 1932
    - 1975
  increase: !ruby/object:Word
    word: increase
    stem: increas
    docFrequency: 3.0
    docPositions:
    - 303
    - 1483
  precision: !ruby/object:Word
    word: precision
    stem: precis
    docFrequency: 3.0
    docPositions:
    - 304
    - 1484
  interest: !ruby/object:Word
    word: interest
    stem: interest
    docFrequency: 7.0
    docPositions:
    - 304
    - 664
    - 666
    - 1484
    - 1776
    - 1778
  hybrid: !ruby/object:Word
    word: hybrid
    stem: hybrid
    docFrequency: 3.0
    docPositions:
    - 305
    - 1485
  section: !ruby/object:Word
    word: section
    stem: section
    docFrequency: 6.0
    docPositions:
    - 305
    - 306
    - 551
    - 1485
    - 1486
  programmed: !ruby/object:Word
    word: programmed
    stem: program
    docFrequency: 3.0
    docPositions:
    - 306
    - 1486
  via: !ruby/object:Word
    word: via
    stem: via
    docFrequency: 5.0
    docPositions:
    - 306
    - 804
    - 1486
    - 1819
  now: !ruby/object:Word
    word: now
    stem: now
    docFrequency: 12.0
    docPositions:
    - 306
    - 327
    - 348
    - 422
    - 704
    - 729
    - 732
    - 1486
    - 1503
    - 1520
    - 1580
  rarity: !ruby/object:Word
    word: rarity
    stem: rariti
    docFrequency: 3.0
    docPositions:
    - 307
    - 1487
  principle: !ruby/object:Word
    word: principle
    stem: principl
    docFrequency: 6.0
    docPositions:
    - 313
    - 356
    - 1133
    - 1489
    - 1528
  abstract: !ruby/object:Word
    word: abstract
    stem: abstract
    docFrequency: 3.0
    docPositions:
    - 314
    - 1490
  consisting: !ruby/object:Word
    word: consisting
    stem: consist
    docFrequency: 4.0
    docPositions:
    - 315
    - 972
    - 1491
  limitless: !ruby/object:Word
    word: limitless
    stem: limitless
    docFrequency: 3.0
    docPositions:
    - 315
    - 1491
  scanner: !ruby/object:Word
    word: scanner
    stem: scanner
    docFrequency: 5.0
    docPositions:
    - 315
    - 317
    - 1491
    - 1493
  moves: !ruby/object:Word
    word: moves
    stem: move
    docFrequency: 3.0
    docPositions:
    - 315
    - 1491
  forth: !ruby/object:Word
    word: forth
    stem: forth
    docFrequency: 3.0
    docPositions:
    - 316
    - 1492
  through: !ruby/object:Word
    word: through
    stem: through
    docFrequency: 9.0
    docPositions:
    - 316
    - 353
    - 742
    - 792
    - 898
    - 1492
    - 1525
    - 1901
  symbol: !ruby/object:Word
    word: symbol
    stem: symbol
    docFrequency: 5.0
    docPositions:
    - 316
    - 1492
  reading: !ruby/object:Word
    word: reading
    stem: read
    docFrequency: 6.0
    docPositions:
    - 316
    - 877
    - 1165
    - 1492
    - 1882
  finds: !ruby/object:Word
    word: finds
    stem: find
    docFrequency: 3.0
    docPositions:
    - 316
    - 1492
  writing: !ruby/object:Word
    word: writing
    stem: write
    docFrequency: 4.0
    docPositions:
    - 317
    - 765
    - 1493
  further: !ruby/object:Word
    word: further
    stem: further
    docFrequency: 7.0
    docPositions:
    - 317
    - 365
    - 790
    - 1165
    - 1493
    - 1535
  symbols: !ruby/object:Word
    word: symbols
    stem: symbol
    docFrequency: 5.0
    docPositions:
    - 317
    - 319
    - 1493
    - 1495
  dictated: !ruby/object:Word
    word: dictated
    stem: dictat
    docFrequency: 3.0
    docPositions:
    - 318
    - 1494
  stored: !ruby/object:Word
    word: stored
    stem: store
    docFrequency: 51.0
    docPositions:
    - 318
    - 319
    - 339
    - 387
    - 506
    - 541
    - 544
    - 562
    - 576
    - 581
    - 634
    - 639
    - 667
    - 670
    - 742
    - 790
    - 860
    - 872
    - 888
    - 898
    - 901
    - 931
    - 960
    - 976
    - 1007
    - 1022
    - 1031
    - 1494
    - 1495
    - 1513
    - 1553
    - 1650
    - 1679
    - 1682
    - 1690
    - 1702
    - 1705
    - 1750
    - 1755
    - 1779
    - 1782
    - 1867
    - 1877
    - 1893
    - 1901
    - 1904
    - 1912
    - 1931
    - 1944
    - 1951
  concept: !ruby/object:Word
    word: concept
    stem: concept
    docFrequency: 16.0
    docPositions:
    - 319
    - 541
    - 658
    - 668
    - 755
    - 872
    - 897
    - 923
    - 1495
    - 1679
    - 1770
    - 1780
    - 1810
    - 1877
    - 1900
  implicit: !ruby/object:Word
    word: implicit
    stem: implicit
    docFrequency: 3.0
    docPositions:
    - 320
    - 1496
  operating: !ruby/object:Word
    word: operating
    stem: oper
    docFrequency: 5.0
    docPositions:
    - 320
    - 610
    - 1496
    - 1732
  modifying: !ruby/object:Word
    word: modifying
    stem: modifi
    docFrequency: 4.0
    docPositions:
    - 321
    - 924
    - 1497
  own: !ruby/object:Word
    word: own
    stem: own
    docFrequency: 9.0
    docPositions:
    - 321
    - 325
    - 699
    - 873
    - 1497
    - 1501
    - 1800
    - 1878
  course: !ruby/object:Word
    word: course
    stem: cours
    docFrequency: 7.0
    docPositions:
    - 321
    - 554
    - 920
    - 924
    - 990
    - 1497
  public: !ruby/object:Word
    word: public
    stem: public
    docFrequency: 5.0
    docPositions:
    - 322
    - 899
    - 1498
    - 1902
  lecture: !ruby/object:Word
    word: lecture
    stem: lectur
    docFrequency: 7.0
    docPositions:
    - 322
    - 657
    - 1146
    - 1150
    - 1498
    - 1769
  mention: !ruby/object:Word
    word: mention
    stem: mention
    docFrequency: 3.0
    docPositions:
    - 322
    - 1498
  intelligence: !ruby/object:Word
    word: intelligence
    stem: intellig
    docFrequency: 19.0
    docPositions:
    - 323
    - 346
    - 350
    - 359
    - 367
    - 465
    - 516
    - 563
    - 1126
    - 1129
    - 1499
    - 1518
    - 1522
    - 1531
    - 1537
    - 1613
    - 1658
    - 1691
  said: !ruby/object:Word
    word: said
    stem: said
    docFrequency: 7.0
    docPositions:
    - 323
    - 810
    - 812
    - 1499
    - 1825
    - 1827
  we: !ruby/object:Word
    word: we
    stem: we
    docFrequency: 13.0
    docPositions:
    - 323
    - 685
    - 702
    - 704
    - 705
    - 987
    - 989
    - 1263
    - 1499
  want: !ruby/object:Word
    word: want
    stem: want
    docFrequency: 3.0
    docPositions:
    - 323
    - 1499
  can: !ruby/object:Word
    word: can
    stem: can
    docFrequency: 7.0
    docPositions:
    - 324
    - 367
    - 659
    - 1500
    - 1537
    - 1771
  learn: !ruby/object:Word
    word: learn
    stem: learn
    docFrequency: 3.0
    docPositions:
    - 324
    - 1500
  experience: !ruby/object:Word
    word: experience
    stem: experi
    docFrequency: 5.0
    docPositions:
    - 324
    - 352
    - 1500
    - 1524
  adding: !ruby/object:Word
    word: adding
    stem: ad
    docFrequency: 5.0
    docPositions:
    - 324
    - 746
    - 798
    - 1500
  letting: !ruby/object:Word
    word: letting
    stem: let
    docFrequency: 3.0
    docPositions:
    - 325
    - 1501
  alter: !ruby/object:Word
    word: alter
    stem: alter
    docFrequency: 5.0
    docPositions:
    - 325
    - 507
    - 1501
    - 1651
  provides: !ruby/object:Word
    word: provides
    stem: provid
    docFrequency: 3.0
    docPositions:
    - 326
    - 1502
  mechanism: !ruby/object:Word
    word: mechanism
    stem: mechan
    docFrequency: 3.0
    docPositions:
    - 326
    - 1502
  mathematician: !ruby/object:Word
    word: mathematician
    stem: mathematician
    docFrequency: 5.0
    docPositions:
    - 328
    - 548
    - 1504
    - 1686
  max: !ruby/object:Word
    word: max
    stem: max
    docFrequency: 5.0
    docPositions:
    - 328
    - 466
    - 1504
    - 1614
  newman: !ruby/object:Word
    word: newman
    stem: newman
    docFrequency: 67.0
    docPositions:
    - 328
    - 330
    - 466
    - 469
    - 476
    - 519
    - 544
    - 547
    - 560
    - 606
    - 609
    - 635
    - 649
    - 651
    - 657
    - 658
    - 660
    - 661
    - 663
    - 666
    - 669
    - 676
    - 692
    - 705
    - 716
    - 724
    - 751
    - 756
    - 769
    - 775
    - 779
    - 783
    - 822
    - 824
    - 825
    - 1101
    - 1119
    - 1504
    - 1506
    - 1614
    - 1617
    - 1624
    - 1661
    - 1682
    - 1685
    - 1688
    - 1728
    - 1731
    - 1751
    - 1763
    - 1765
    - 1769
    - 1770
    - 1772
    - 1773
    - 1775
    - 1778
    - 1781
    - 1786
    - 1793
    - 1806
    - 1811
    - 1816
    - 1835
    - 1837
    - 1838
  right: !ruby/object:Word
    word: right
    stem: right
    docFrequency: 3.0
    docPositions:
    - 328
    - 1504
  start: !ruby/object:Word
    word: start
    stem: start
    docFrequency: 5.0
    docPositions:
    - 329
    - 335
    - 1505
    - 1509
  interested: !ruby/object:Word
    word: interested
    stem: interest
    docFrequency: 9.0
    docPositions:
    - 329
    - 551
    - 565
    - 661
    - 779
    - 1505
    - 1693
    - 1773
  actually: !ruby/object:Word
    word: actually
    stem: actual
    docFrequency: 4.0
    docPositions:
    - 329
    - 936
    - 1505
  sort: !ruby/object:Word
    word: sort
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 330
    - 1506
  interview: !ruby/object:Word
    word: interview
    stem: interview
    docFrequency: 18.0
    docPositions:
    - 331
    - 354
    - 605
    - 622
    - 660
    - 697
    - 707
    - 812
    - 1082
    - 1101
    - 1507
    - 1526
    - 1727
    - 1742
    - 1772
    - 1798
    - 1827
  christopher: !ruby/object:Word
    word: christopher
    stem: christoph
    docFrequency: 5.0
    docPositions:
    - 331
    - 831
    - 1507
    - 1842
  evans: !ruby/object:Word
    word: evans
    stem: evan
    docFrequency: 9.0
    docPositions:
    - 331
    - 660
    - 707
    - 1101
    - 1507
    - 1772
  second: !ruby/object:Word
    word: second
    stem: second
    docFrequency: 12.0
    docPositions:
    - 335
    - 381
    - 454
    - 508
    - 529
    - 746
    - 1509
    - 1547
    - 1604
    - 1652
    - 1669
  leading: !ruby/object:Word
    word: leading
    stem: lead
    docFrequency: 4.0
    docPositions:
    - 335
    - 988
    - 1509
  cryptanalyst: !ruby/object:Word
    word: cryptanalyst
    stem: cryptanalyst
    docFrequency: 3.0
    docPositions:
    - 336
    - 1510
  here: !ruby/object:Word
    word: here
    stem: here
    docFrequency: 6.0
    docPositions:
    - 337
    - 551
    - 970
    - 1511
    - 1919
  familiar: !ruby/object:Word
    word: familiar
    stem: familiar
    docFrequency: 3.0
    docPositions:
    - 337
    - 1511
  thomas: !ruby/object:Word
    word: thomas
    stem: thoma
    docFrequency: 5.0
    docPositions:
    - 337
    - 401
    - 1511
    - 1563
  flowers: !ruby/object:Word
    word: flowers
    stem: flower
    docFrequency: 29.0
    docPositions:
    - 337
    - 401
    - 403
    - 406
    - 408
    - 410
    - 415
    - 476
    - 479
    - 531
    - 541
    - 667
    - 668
    - 826
    - 1511
    - 1563
    - 1565
    - 1568
    - 1570
    - 1572
    - 1577
    - 1624
    - 1627
    - 1671
    - 1679
    - 1779
    - 1780
    - 1839
  involving: !ruby/object:Word
    word: involving
    stem: involv
    docFrequency: 7.0
    docPositions:
    - 337
    - 407
    - 509
    - 1511
    - 1569
    - 1653
  switching: !ruby/object:Word
    word: switching
    stem: switch
    docFrequency: 3.0
    docPositions:
    - 338
    - 1512
  below: !ruby/object:Word
    word: below
    stem: below
    docFrequency: 7.0
    docPositions:
    - 338
    - 519
    - 582
    - 1512
    - 1661
    - 1706
  could: !ruby/object:Word
    word: could
    stem: could
    docFrequency: 17.0
    docPositions:
    - 339
    - 414
    - 665
    - 718
    - 719
    - 788
    - 792
    - 811
    - 837
    - 846
    - 1513
    - 1576
    - 1777
    - 1826
    - 1848
    - 1857
  turn: !ruby/object:Word
    word: turn
    stem: turn
    docFrequency: 3.0
    docPositions:
    - 339
    - 1513
  project: !ruby/object:Word
    word: project
    stem: project
    docFrequency: 7.0
    docPositions:
    - 339
    - 877
    - 1192
    - 1264
    - 1513
    - 1882
  cessation: !ruby/object:Word
    word: cessation
    stem: cessat
    docFrequency: 3.0
    docPositions:
    - 340
    - 1514
  hostilities: !ruby/object:Word
    word: hostilities
    stem: hostil
    docFrequency: 5.0
    docPositions:
    - 340
    - 518
    - 1514
    - 1660
  europe: !ruby/object:Word
    word: europe
    stem: europ
    docFrequency: 5.0
    docPositions:
    - 340
    - 515
    - 1514
    - 1657
  wartime: !ruby/object:Word
    word: wartime
    stem: wartim
    docFrequency: 5.0
    docPositions:
    - 345
    - 366
    - 1517
    - 1536
  years: !ruby/object:Word
    word: years
    stem: year
    docFrequency: 10.0
    docPositions:
    - 345
    - 515
    - 552
    - 862
    - 889
    - 1517
    - 1657
    - 1869
    - 1894
  give: !ruby/object:Word
    word: give
    stem: give
    docFrequency: 4.0
    docPositions:
    - 345
    - 984
    - 1517
  thought: !ruby/object:Word
    word: thought
    stem: thought
    docFrequency: 3.0
    docPositions:
    - 345
    - 1517
  question: !ruby/object:Word
    word: question
    stem: question
    docFrequency: 3.0
    docPositions:
    - 346
    - 1518
  recall: !ruby/object:Word
    word: recall
    stem: recal
    docFrequency: 3.0
    docPositions:
    - 346
    - 1518
  numerous: !ruby/object:Word
    word: numerous
    stem: numer
    docFrequency: 5.0
    docPositions:
    - 347
    - 496
    - 1519
    - 1642
  'off': !ruby/object:Word
    word: 'off'
    stem: 'off'
    docFrequency: 3.0
    docPositions:
    - 347
    - 1519
  duty: !ruby/object:Word
    word: duty
    stem: duti
    docFrequency: 3.0
    docPositions:
    - 347
    - 1519
  discussions: !ruby/object:Word
    word: discussions
    stem: discuss
    docFrequency: 3.0
    docPositions:
    - 347
    - 1519
  him: !ruby/object:Word
    word: him
    stem: him
    docFrequency: 5.0
    docPositions:
    - 347
    - 1049
    - 1519
    - 1967
  point: !ruby/object:Word
    word: point
    stem: point
    docFrequency: 9.0
    docPositions:
    - 347
    - 704
    - 794
    - 1016
    - 1017
    - 1519
    - 1940
    - 1941
  circulated: !ruby/object:Word
    word: circulated
    stem: circul
    docFrequency: 3.0
    docPositions:
    - 348
    - 1520
  typewritten: !ruby/object:Word
    word: typewritten
    stem: typewritten
    docFrequency: 3.0
    docPositions:
    - 348
    - 1520
  report: !ruby/object:Word
    word: report
    stem: report
    docFrequency: 12.0
    docPositions:
    - 348
    - 574
    - 576
    - 583
    - 886
    - 1153
    - 1520
    - 1700
    - 1702
    - 1707
    - 1891
  lost: !ruby/object:Word
    word: lost
    stem: lost
    docFrequency: 5.0
    docPositions:
    - 348
    - 544
    - 1520
    - 1682
  ideas: !ruby/object:Word
    word: ideas
    stem: idea
    docFrequency: 10.0
    docPositions:
    - 349
    - 358
    - 729
    - 887
    - 893
    - 1521
    - 1530
    - 1892
    - 1898
  donald: !ruby/object:Word
    word: donald
    stem: donald
    docFrequency: 5.0
    docPositions:
    - 349
    - 490
    - 1521
    - 1636
  michie: !ruby/object:Word
    word: michie
    stem: michi
    docFrequency: 12.0
    docPositions:
    - 349
    - 354
    - 359
    - 490
    - 529
    - 1125
    - 1521
    - 1526
    - 1531
    - 1636
    - 1669
  later: !ruby/object:Word
    word: later
    stem: later
    docFrequency: 15.0
    docPositions:
    - 349
    - 360
    - 386
    - 488
    - 532
    - 835
    - 889
    - 1521
    - 1532
    - 1552
    - 1634
    - 1672
    - 1846
    - 1894
  founded: !ruby/object:Word
    word: founded
    stem: found
    docFrequency: 3.0
    docPositions:
    - 349
    - 1521
  department: !ruby/object:Word
    word: department
    stem: depart
    docFrequency: 5.0
    docPositions:
    - 350
    - 856
    - 1522
    - 1863
  perception: !ruby/object:Word
    word: perception
    stem: percept
    docFrequency: 3.0
    docPositions:
    - 350
    - 1522
  edinburgh: !ruby/object:Word
    word: edinburgh
    stem: edinburgh
    docFrequency: 5.0
    docPositions:
    - 351
    - 1126
    - 1523
  remembers: !ruby/object:Word
    word: remembers
    stem: rememb
    docFrequency: 3.0
    docPositions:
    - 351
    - 1523
  talking: !ruby/object:Word
    word: talking
    stem: talk
    docFrequency: 3.0
    docPositions:
    - 351
    - 1523
  often: !ruby/object:Word
    word: often
    stem: often
    docFrequency: 3.0
    docPositions:
    - 351
    - 1523
  learning: !ruby/object:Word
    word: learning
    stem: learn
    docFrequency: 3.0
    docPositions:
    - 352
    - 1524
  problems: !ruby/object:Word
    word: problems
    stem: problem
    docFrequency: 7.0
    docPositions:
    - 353
    - 619
    - 842
    - 1525
    - 1739
    - 1853
  searching: !ruby/object:Word
    word: searching
    stem: search
    docFrequency: 5.0
    docPositions:
    - 353
    - 357
    - 1525
    - 1529
  space: !ruby/object:Word
    word: space
    stem: space
    docFrequency: 3.0
    docPositions:
    - 353
    - 1525
  possible: !ruby/object:Word
    word: possible
    stem: possibl
    docFrequency: 15.0
    docPositions:
    - 353
    - 396
    - 465
    - 618
    - 738
    - 843
    - 1010
    - 1261
    - 1525
    - 1560
    - 1613
    - 1738
    - 1854
    - 1934
  solutions: !ruby/object:Word
    word: solutions
    stem: solut
    docFrequency: 3.0
    docPositions:
    - 353
    - 1525
  guided: !ruby/object:Word
    word: guided
    stem: guid
    docFrequency: 3.0
    docPositions:
    - 354
    - 1526
  rule: !ruby/object:Word
    word: rule
    stem: rule
    docFrequency: 5.0
    docPositions:
    - 354
    - 356
    - 1526
    - 1528
  thumb: !ruby/object:Word
    word: thumb
    stem: thumb
    docFrequency: 5.0
    docPositions:
    - 354
    - 356
    - 1526
    - 1528
  principles: !ruby/object:Word
    word: principles
    stem: principl
    docFrequency: 5.0
    docPositions:
    - 354
    - 797
    - 1119
    - 1526
  copeland: !ruby/object:Word
    word: copeland
    stem: copeland
    docFrequency: 47.0
    docPositions:
    - 354
    - 367
    - 415
    - 536
    - 577
    - 598
    - 606
    - 620
    - 622
    - 628
    - 697
    - 812
    - 879
    - 885
    - 1054
    - 1086
    - 1089
    - 1093
    - 1097
    - 1116
    - 1140
    - 1143
    - 1147
    - 1151
    - 1167
    - 1249
    - 1250
    - 1526
    - 1537
    - 1577
    - 1676
    - 1703
    - 1720
    - 1728
    - 1740
    - 1742
    - 1748
    - 1798
    - 1827
    - 1884
    - 1890
    - 1972
    - 1989
    - 1990
  latter: !ruby/object:Word
    word: latter
    stem: latter
    docFrequency: 5.0
    docPositions:
    - 355
    - 834
    - 1527
    - 1845
  heuristic: !ruby/object:Word
    word: heuristic
    stem: heurist
    docFrequency: 5.0
    docPositions:
    - 355
    - 356
    - 1527
    - 1528
  search: !ruby/object:Word
    word: search
    stem: search
    docFrequency: 5.0
    docPositions:
    - 356
    - 847
    - 1528
    - 1858
  cuts: !ruby/object:Word
    word: cuts
    stem: cut
    docFrequency: 3.0
    docPositions:
    - 356
    - 1528
  down: !ruby/object:Word
    word: down
    stem: down
    docFrequency: 4.0
    docPositions:
    - 357
    - 981
    - 1529
  amount: !ruby/object:Word
    word: amount
    stem: amount
    docFrequency: 3.0
    docPositions:
    - 357
    - 1529
  find: !ruby/object:Word
    word: find
    stem: find
    docFrequency: 4.0
    docPositions:
    - 357
    - 705
    - 1529
  solution: !ruby/object:Word
    word: solution
    stem: solut
    docFrequency: 7.0
    docPositions:
    - 357
    - 428
    - 843
    - 1529
    - 1586
    - 1854
  illustrated: !ruby/object:Word
    word: illustrated
    stem: illustr
    docFrequency: 3.0
    docPositions:
    - 358
    - 1530
  reference: !ruby/object:Word
    word: reference
    stem: refer
    docFrequency: 5.0
    docPositions:
    - 359
    - 804
    - 1531
    - 1819
  chess: !ruby/object:Word
    word: chess
    stem: chess
    docFrequency: 9.0
    docPositions:
    - 359
    - 360
    - 840
    - 844
    - 1531
    - 1532
    - 1851
    - 1855
  recalls: !ruby/object:Word
    word: recalls
    stem: recal
    docFrequency: 3.0
    docPositions:
    - 359
    - 1531
  experimenting: !ruby/object:Word
    word: experimenting
    stem: experi
    docFrequency: 3.0
    docPositions:
    - 359
    - 1531
  heuristics: !ruby/object:Word
    word: heuristics
    stem: heurist
    docFrequency: 5.0
    docPositions:
    - 360
    - 847
    - 1532
    - 1858
  common: !ruby/object:Word
    word: common
    stem: common
    docFrequency: 5.0
    docPositions:
    - 360
    - 598
    - 1532
    - 1720
  particular: !ruby/object:Word
    word: particular
    stem: particular
    docFrequency: 7.0
    docPositions:
    - 361
    - 493
    - 584
    - 1533
    - 1639
    - 1708
  minimax: !ruby/object:Word
    word: minimax
    stem: minimax
    docFrequency: 3.0
    docPositions:
    - 361
    - 1533
  best: !ruby/object:Word
    word: best
    stem: best
    docFrequency: 3.0
    docPositions:
    - 361
    - 1533
  codebreaking: !ruby/object:Word
    word: codebreaking
    stem: codebreak
    docFrequency: 4.0
    docPositions:
    - 366
    - 1094
    - 1536
  thinking: !ruby/object:Word
    word: thinking
    stem: think
    docFrequency: 5.0
    docPositions:
    - 366
    - 560
    - 1536
    - 1688
  artificial: !ruby/object:Word
    word: artificial
    stem: artifici
    docFrequency: 8.0
    docPositions:
    - 366
    - 367
    - 563
    - 1129
    - 1536
    - 1537
    - 1691
  life: !ruby/object:Word
    word: life
    stem: life
    docFrequency: 6.0
    docPositions:
    - 367
    - 1060
    - 1074
    - 1537
    - 1976
  found: !ruby/object:Word
    word: found
    stem: found
    docFrequency: 9.0
    docPositions:
    - 367
    - 676
    - 685
    - 730
    - 843
    - 1537
    - 1786
    - 1854
  exceptions: !ruby/object:Word
    word: exceptions
    stem: except
    docFrequency: 3.0
    docPositions:
    - 373
    - 1539
  purely: !ruby/object:Word
    word: purely
    stem: pure
    docFrequency: 3.0
    docPositions:
    - 373
    - 1539
  engines: !ruby/object:Word
    word: engines
    stem: engin
    docFrequency: 3.0
    docPositions:
    - 374
    - 1540
  finger: !ruby/object:Word
    word: finger
    stem: finger
    docFrequency: 3.0
    docPositions:
    - 374
    - 1540
  powered: !ruby/object:Word
    word: powered
    stem: power
    docFrequency: 3.0
    docPositions:
    - 374
    - 1540
  national: !ruby/object:Word
    word: national
    stem: nation
    docFrequency: 7.0
    docPositions:
    - 374
    - 561
    - 1078
    - 1264
    - 1540
    - 1689
  accounting: !ruby/object:Word
    word: accounting
    stem: account
    docFrequency: 3.0
    docPositions:
    - 374
    - 1540
  say: !ruby/object:Word
    word: say
    stem: sai
    docFrequency: 5.0
    docPositions:
    - 375
    - 735
    - 1541
  their: !ruby/object:Word
    word: their
    stem: their
    docFrequency: 7.0
    docPositions:
    - 376
    - 520
    - 527
    - 1542
    - 1662
    - 1667
  basic: !ruby/object:Word
    word: basic
    stem: basic
    docFrequency: 7.0
    docPositions:
    - 376
    - 378
    - 810
    - 1542
    - 1544
    - 1825
  electrically: !ruby/object:Word
    word: electrically
    stem: electr
    docFrequency: 3.0
    docPositions:
    - 376
    - 1542
  driven: !ruby/object:Word
    word: driven
    stem: driven
    docFrequency: 3.0
    docPositions:
    - 376
    - 1542
  switches: !ruby/object:Word
    word: switches
    stem: switch
    docFrequency: 7.0
    docPositions:
    - 377
    - 508
    - 862
    - 1543
    - 1652
    - 1869
  relays: !ruby/object:Word
    word: relays
    stem: relai
    docFrequency: 7.0
    docPositions:
    - 377
    - 393
    - 410
    - 1543
    - 1557
    - 1572
  operate: !ruby/object:Word
    word: operate
    stem: oper
    docFrequency: 5.0
    docPositions:
    - 377
    - 380
    - 1543
    - 1546
  relatively: !ruby/object:Word
    word: relatively
    stem: rel
    docFrequency: 5.0
    docPositions:
    - 377
    - 575
    - 1543
    - 1701
  slowly: !ruby/object:Word
    word: slowly
    stem: slowli
    docFrequency: 5.0
    docPositions:
    - 377
    - 603
    - 1543
    - 1725
  whereas: !ruby/object:Word
    word: whereas
    stem: wherea
    docFrequency: 3.0
    docPositions:
    - 378
    - 1544
  originally: !ruby/object:Word
    word: originally
    stem: origin
    docFrequency: 3.0
    docPositions:
    - 379
    - 1545
  vacuum: !ruby/object:Word
    word: vacuum
    stem: vacuum
    docFrequency: 23.0
    docPositions:
    - 379
    - 396
    - 400
    - 405
    - 413
    - 421
    - 424
    - 429
    - 503
    - 504
    - 543
    - 1545
    - 1560
    - 1562
    - 1567
    - 1575
    - 1579
    - 1582
    - 1587
    - 1647
    - 1648
    - 1681
  tubes: !ruby/object:Word
    word: tubes
    stem: tube
    docFrequency: 28.0
    docPositions:
    - 379
    - 396
    - 400
    - 405
    - 413
    - 421
    - 424
    - 429
    - 472
    - 503
    - 504
    - 543
    - 966
    - 973
    - 1545
    - 1560
    - 1562
    - 1567
    - 1575
    - 1579
    - 1582
    - 1587
    - 1620
    - 1647
    - 1648
    - 1681
    - 1915
  valves: !ruby/object:Word
    word: valves
    stem: valv
    docFrequency: 3.0
    docPositions:
    - 379
    - 1545
  moving: !ruby/object:Word
    word: moving
    stem: move
    docFrequency: 4.0
    docPositions:
    - 379
    - 766
    - 1545
  parts: !ruby/object:Word
    word: parts
    stem: part
    docFrequency: 6.0
    docPositions:
    - 379
    - 467
    - 761
    - 1545
    - 1615
  save: !ruby/object:Word
    word: save
    stem: save
    docFrequency: 3.0
    docPositions:
    - 379
    - 1545
  electrons: !ruby/object:Word
    word: electrons
    stem: electron
    docFrequency: 3.0
    docPositions:
    - 380
    - 1546
  extremely: !ruby/object:Word
    word: extremely
    stem: extrem
    docFrequency: 3.0
    docPositions:
    - 380
    - 1546
  fast: !ruby/object:Word
    word: fast
    stem: fast
    docFrequency: 3.0
    docPositions:
    - 380
    - 1546
  before: !ruby/object:Word
    word: before
    stem: befor
    docFrequency: 3.0
    docPositions:
    - 381
    - 1547
  others: !ruby/object:Word
    word: others
    stem: other
    docFrequency: 10.0
    docPositions:
    - 382
    - 609
    - 907
    - 918
    - 954
    - 1093
    - 1548
    - 1731
    - 1908
  howard: !ruby/object:Word
    word: howard
    stem: howard
    docFrequency: 3.0
    docPositions:
    - 382
    - 1548
  aiken: !ruby/object:Word
    word: aiken
    stem: aiken
    docFrequency: 5.0
    docPositions:
    - 382
    - 394
    - 1548
    - 1558
  harvard: !ruby/object:Word
    word: harvard
    stem: harvard
    docFrequency: 3.0
    docPositions:
    - 382
    - 1548
  george: !ruby/object:Word
    word: george
    stem: georg
    docFrequency: 3.0
    docPositions:
    - 382
    - 1548
  stibitz: !ruby/object:Word
    word: stibitz
    stem: stibitz
    docFrequency: 3.0
    docPositions:
    - 382
    - 1548
  bell: !ruby/object:Word
    word: bell
    stem: bell
    docFrequency: 5.0
    docPositions:
    - 383
    - 627
    - 1549
    - 1747
  telephone: !ruby/object:Word
    word: telephone
    stem: telephon
    docFrequency: 9.0
    docPositions:
    - 383
    - 404
    - 410
    - 749
    - 763
    - 1549
    - 1566
    - 1572
  laboratories: !ruby/object:Word
    word: laboratories
    stem: laboratori
    docFrequency: 3.0
    docPositions:
    - 383
    - 1549
  princeton: !ruby/object:Word
    word: princeton
    stem: princeton
    docFrequency: 12.0
    docPositions:
    - 383
    - 547
    - 870
    - 878
    - 952
    - 956
    - 1113
    - 1549
    - 1685
    - 1875
    - 1883
  konrad: !ruby/object:Word
    word: konrad
    stem: konrad
    docFrequency: 3.0
    docPositions:
    - 384
    - 1550
  zuse: !ruby/object:Word
    word: zuse
    stem: zuse
    docFrequency: 5.0
    docPositions:
    - 384
    - 1550
  berlin: !ruby/object:Word
    word: berlin
    stem: berlin
    docFrequency: 4.0
    docPositions:
    - 384
    - 1176
    - 1550
  belongs: !ruby/object:Word
    word: belongs
    stem: belong
    docFrequency: 5.0
    docPositions:
    - 384
    - 823
    - 1550
    - 1836
  honour: !ruby/object:Word
    word: honour
    stem: honour
    docFrequency: 3.0
    docPositions:
    - 384
    - 1550
  having: !ruby/object:Word
    word: having
    stem: have
    docFrequency: 7.0
    docPositions:
    - 385
    - 520
    - 551
    - 1132
    - 1551
    - 1662
  functioning: !ruby/object:Word
    word: functioning
    stem: function
    docFrequency: 9.0
    docPositions:
    - 386
    - 439
    - 853
    - 863
    - 1552
    - 1593
    - 1860
    - 1870
  opposed: !ruby/object:Word
    word: opposed
    stem: oppos
    docFrequency: 3.0
    docPositions:
    - 387
    - 1553
  re: !ruby/object:Word
    word: re
    stem: re
    docFrequency: 3.0
    docPositions:
    - 388
    - 1554
  routing: !ruby/object:Word
    word: routing
    stem: rout
    docFrequency: 3.0
    docPositions:
    - 388
    - 1554
  plugs: !ruby/object:Word
    word: plugs
    stem: plug
    docFrequency: 7.0
    docPositions:
    - 389
    - 507
    - 862
    - 1555
    - 1651
    - 1869
  too: !ruby/object:Word
    word: too
    stem: too
    docFrequency: 3.0
    docPositions:
    - 393
    - 1557
  slow: !ruby/object:Word
    word: slow
    stem: slow
    docFrequency: 5.0
    docPositions:
    - 393
    - 475
    - 1557
    - 1623
  unreliable: !ruby/object:Word
    word: unreliable
    stem: unreli
    docFrequency: 5.0
    docPositions:
    - 393
    - 475
    - 1557
    - 1623
  valiant: !ruby/object:Word
    word: valiant
    stem: valiant
    docFrequency: 3.0
    docPositions:
    - 394
    - 1558
  effort: !ruby/object:Word
    word: effort
    stem: effort
    docFrequency: 3.0
    docPositions:
    - 395
    - 1559
  development: !ruby/object:Word
    word: development
    stem: develop
    docFrequency: 8.0
    docPositions:
    - 395
    - 651
    - 1043
    - 1078
    - 1559
    - 1765
    - 1961
  techniques: !ruby/object:Word
    word: techniques
    stem: techniqu
    docFrequency: 6.0
    docPositions:
    - 395
    - 424
    - 1105
    - 1559
    - 1582
  extensive: !ruby/object:Word
    word: extensive
    stem: extens
    docFrequency: 3.0
    docPositions:
    - 400
    - 1562
  data: !ruby/object:Word
    word: data
    stem: data
    docFrequency: 17.0
    docPositions:
    - 401
    - 407
    - 882
    - 884
    - 1023
    - 1031
    - 1323
    - 1563
    - 1569
    - 1887
    - 1889
    - 1945
    - 1951
    - 1991
  appears: !ruby/object:Word
    word: appears
    stem: appear
    docFrequency: 8.0
    docPositions:
    - 401
    - 735
    - 880
    - 1033
    - 1563
    - 1885
    - 1953
  engineer: !ruby/object:Word
    word: engineer
    stem: engin
    docFrequency: 6.0
    docPositions:
    - 401
    - 680
    - 1159
    - 1563
    - 1790
  british: !ruby/object:Word
    word: british
    stem: british
    docFrequency: 5.0
    docPositions:
    - 402
    - 531
    - 1564
    - 1671
  station: !ruby/object:Word
    word: station
    stem: station
    docFrequency: 5.0
    docPositions:
    - 402
    - 479
    - 1564
    - 1627
  dollis: !ruby/object:Word
    word: dollis
    stem: dolli
    docFrequency: 5.0
    docPositions:
    - 402
    - 479
    - 1564
    - 1627
  hill: !ruby/object:Word
    word: hill
    stem: hill
    docFrequency: 6.0
    docPositions:
    - 403
    - 479
    - 1106
    - 1565
    - 1627
  equipment: !ruby/object:Word
    word: equipment
    stem: equip
    docFrequency: 11.0
    docPositions:
    - 403
    - 409
    - 411
    - 542
    - 1050
    - 1565
    - 1571
    - 1573
    - 1680
    - 1968
  controlling: !ruby/object:Word
    word: controlling
    stem: control
    docFrequency: 5.0
    docPositions:
    - 403
    - 883
    - 1565
    - 1888
  connections: !ruby/object:Word
    word: connections
    stem: connect
    docFrequency: 3.0
    docPositions:
    - 404
    - 1566
  between: !ruby/object:Word
    word: between
    stem: between
    docFrequency: 11.0
    docPositions:
    - 404
    - 405
    - 488
    - 496
    - 813
    - 1566
    - 1567
    - 1634
    - 1642
    - 1828
  exchanges: !ruby/object:Word
    word: exchanges
    stem: exchang
    docFrequency: 5.0
    docPositions:
    - 404
    - 410
    - 1566
    - 1572
  went: !ruby/object:Word
    word: went
    stem: went
    docFrequency: 5.0
    docPositions:
    - 404
    - 756
    - 1566
    - 1811
  operation: !ruby/object:Word
    word: operation
    stem: oper
    docFrequency: 6.0
    docPositions:
    - 404
    - 516
    - 794
    - 1566
    - 1658
  involved: !ruby/object:Word
    word: involved
    stem: involv
    docFrequency: 7.0
    docPositions:
    - 405
    - 861
    - 908
    - 1567
    - 1868
    - 1909
  four: !ruby/object:Word
    word: four
    stem: four
    docFrequency: 4.0
    docPositions:
    - 405
    - 739
    - 1567
  thousand: !ruby/object:Word
    word: thousand
    stem: thousand
    docFrequency: 3.0
    docPositions:
    - 405
    - 1567
  running: !ruby/object:Word
    word: running
    stem: run
    docFrequency: 7.0
    docPositions:
    - 405
    - 522
    - 874
    - 1567
    - 1664
    - 1879
  experimental: !ruby/object:Word
    word: experimental
    stem: experiment
    docFrequency: 3.0
    docPositions:
    - 406
    - 1568
  aim: !ruby/object:Word
    word: aim
    stem: aim
    docFrequency: 3.0
    docPositions:
    - 408
    - 1570
  achieved: !ruby/object:Word
    word: achieved
    stem: achiev
    docFrequency: 4.0
    docPositions:
    - 408
    - 704
    - 1570
  replace: !ruby/object:Word
    word: replace
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 409
    - 1571
  existing: !ruby/object:Word
    word: existing
    stem: exist
    docFrequency: 3.0
    docPositions:
    - 409
    - 1571
  less: !ruby/object:Word
    word: less
    stem: less
    docFrequency: 3.0
    docPositions:
    - 409
    - 1571
  reliable: !ruby/object:Word
    word: reliable
    stem: reliabl
    docFrequency: 3.0
    docPositions:
    - 409
    - 1571
  systems: !ruby/object:Word
    word: systems
    stem: system
    docFrequency: 5.0
    docPositions:
    - 409
    - 428
    - 1571
    - 1586
  investigate: !ruby/object:Word
    word: investigate
    stem: investig
    docFrequency: 5.0
    docPositions:
    - 410
    - 1047
    - 1572
    - 1965
  outbreak: !ruby/object:Word
    word: outbreak
    stem: outbreak
    docFrequency: 3.0
    docPositions:
    - 412
    - 1574
  germany: !ruby/object:Word
    word: germany
    stem: germani
    docFrequency: 3.0
    docPositions:
    - 412
    - 1574
  possibly: !ruby/object:Word
    word: possibly
    stem: possibl
    docFrequency: 3.0
    docPositions:
    - 413
    - 1575
  only: !ruby/object:Word
    word: only
    stem: onli
    docFrequency: 8.0
    docPositions:
    - 413
    - 534
    - 747
    - 823
    - 1575
    - 1674
    - 1836
  person: !ruby/object:Word
    word: person
    stem: person
    docFrequency: 3.0
    docPositions:
    - 413
    - 1575
  britain: !ruby/object:Word
    word: britain
    stem: britain
    docFrequency: 8.0
    docPositions:
    - 413
    - 626
    - 644
    - 1116
    - 1575
    - 1746
    - 1760
  realized: !ruby/object:Word
    word: realized
    stem: realiz
    docFrequency: 3.0
    docPositions:
    - 413
    - 1575
  see: !ruby/object:Word
    word: see
    stem: see
    docFrequency: 13.0
    docPositions:
    - 414
    - 519
    - 536
    - 582
    - 879
    - 1054
    - 1576
    - 1661
    - 1676
    - 1706
    - 1884
    - 1972
  m: !ruby/object:Word
    word: m
    stem: m
    docFrequency: 16.0
    docPositions:
    - 415
    - 716
    - 1073
    - 1101
    - 1119
    - 1136
    - 1142
    - 1146
    - 1149
    - 1178
    - 1334
    - 1336
    - 1577
  comparable: !ruby/object:Word
    word: comparable
    stem: compar
    docFrequency: 4.0
    docPositions:
    - 421
    - 922
    - 1579
  u: !ruby/object:Word
    word: u
    stem: u
    docFrequency: 10.0
    docPositions:
    - 421
    - 582
    - 585
    - 854
    - 950
    - 1579
    - 1706
    - 1709
    - 1861
  seems: !ruby/object:Word
    word: seems
    stem: seem
    docFrequency: 5.0
    docPositions:
    - 421
    - 724
    - 1579
    - 1806
  john: !ruby/object:Word
    word: john
    stem: john
    docFrequency: 11.0
    docPositions:
    - 422
    - 548
    - 567
    - 856
    - 868
    - 1580
    - 1686
    - 1695
    - 1863
    - 1873
  then: !ruby/object:Word
    word: then
    stem: then
    docFrequency: 8.0
    docPositions:
    - 422
    - 680
    - 743
    - 758
    - 1580
    - 1790
    - 1813
  iowa: !ruby/object:Word
    word: iowa
    stem: iowa
    docFrequency: 5.0
    docPositions:
    - 422
    - 433
    - 1580
    - 1591
  college: !ruby/object:Word
    word: college
    stem: colleg
    docFrequency: 5.0
    docPositions:
    - 422
    - 1038
    - 1580
    - 1958
  period: !ruby/object:Word
    word: period
    stem: period
    docFrequency: 9.0
    docPositions:
    - 423
    - 626
    - 806
    - 813
    - 1581
    - 1746
    - 1821
    - 1828
  developed: !ruby/object:Word
    word: developed
    stem: develop
    docFrequency: 9.0
    docPositions:
    - 423
    - 968
    - 1032
    - 1038
    - 1581
    - 1917
    - 1952
    - 1958
  digitally: !ruby/object:Word
    word: digitally
    stem: digit
    docFrequency: 3.0
    docPositions:
    - 425
    - 1583
  assistance: !ruby/object:Word
    word: assistance
    stem: assist
    docFrequency: 3.0
    docPositions:
    - 425
    - 1583
  student: !ruby/object:Word
    word: student
    stem: student
    docFrequency: 3.0
    docPositions:
    - 425
    - 1583
  clifford: !ruby/object:Word
    word: clifford
    stem: clifford
    docFrequency: 3.0
    docPositions:
    - 425
    - 1583
  berry: !ruby/object:Word
    word: berry
    stem: berri
    docFrequency: 5.0
    docPositions:
    - 425
    - 426
    - 1583
    - 1584
  began: !ruby/object:Word
    word: began
    stem: began
    docFrequency: 9.0
    docPositions:
    - 426
    - 455
    - 678
    - 1047
    - 1584
    - 1605
    - 1788
    - 1965
  abc: !ruby/object:Word
    word: abc
    stem: abc
    docFrequency: 5.0
    docPositions:
    - 427
    - 505
    - 1585
    - 1649
  algebraic: !ruby/object:Word
    word: algebraic
    stem: algebra
    docFrequency: 3.0
    docPositions:
    - 428
    - 1586
  approximately: !ruby/object:Word
    word: approximately
    stem: approxim
    docFrequency: 7.0
    docPositions:
    - 429
    - 503
    - 504
    - 1587
    - 1647
    - 1648
  part: !ruby/object:Word
    word: part
    stem: part
    docFrequency: 5.0
    docPositions:
    - 430
    - 988
    - 1261
    - 1588
  functioned: !ruby/object:Word
    word: functioned
    stem: function
    docFrequency: 3.0
    docPositions:
    - 430
    - 1588
  successfully: !ruby/object:Word
    word: successfully
    stem: successfulli
    docFrequency: 9.0
    docPositions:
    - 430
    - 445
    - 528
    - 1036
    - 1588
    - 1597
    - 1668
    - 1956
  whole: !ruby/object:Word
    word: whole
    stem: whole
    docFrequency: 6.0
    docPositions:
    - 431
    - 619
    - 706
    - 1589
    - 1739
  reliably: !ruby/object:Word
    word: reliably
    stem: reliabl
    docFrequency: 3.0
    docPositions:
    - 431
    - 1589
  errors: !ruby/object:Word
    word: errors
    stem: error
    docFrequency: 3.0
    docPositions:
    - 431
    - 1589
  introduced: !ruby/object:Word
    word: introduced
    stem: introduc
    docFrequency: 7.0
    docPositions:
    - 431
    - 657
    - 732
    - 913
    - 1589
    - 1769
  unsatisfactory: !ruby/object:Word
    word: unsatisfactory
    stem: unsatisfactori
    docFrequency: 3.0
    docPositions:
    - 432
    - 1590
  card: !ruby/object:Word
    word: card
    stem: card
    docFrequency: 3.0
    docPositions:
    - 432
    - 1590
  reader: !ruby/object:Word
    word: reader
    stem: reader
    docFrequency: 3.0
    docPositions:
    - 432
    - 1590
  discontinued: !ruby/object:Word
    word: discontinued
    stem: discontinu
    docFrequency: 3.0
    docPositions:
    - 432
    - 1590
  left: !ruby/object:Word
    word: left
    stem: left
    docFrequency: 7.0
    docPositions:
    - 433
    - 606
    - 890
    - 1591
    - 1728
    - 1895
  fully: !ruby/object:Word
    word: fully
    stem: fulli
    docFrequency: 5.0
    docPositions:
    - 439
    - 853
    - 1593
    - 1860
  cryptanalysts: !ruby/object:Word
    word: cryptanalysts
    stem: cryptanalyst
    docFrequency: 7.0
    docPositions:
    - 440
    - 450
    - 490
    - 1594
    - 1602
    - 1636
  february: !ruby/object:Word
    word: february
    stem: februari
    docFrequency: 9.0
    docPositions:
    - 440
    - 548
    - 643
    - 806
    - 1594
    - 1686
    - 1759
    - 1821
  gc: !ruby/object:Word
    word: gc
    stem: gc
    docFrequency: 13.0
    docPositions:
    - 445
    - 467
    - 478
    - 514
    - 521
    - 663
    - 1597
    - 1615
    - 1626
    - 1656
    - 1663
    - 1775
  cs: !ruby/object:Word
    word: cs
    stem: cs
    docFrequency: 13.0
    docPositions:
    - 445
    - 467
    - 478
    - 514
    - 521
    - 663
    - 1597
    - 1615
    - 1626
    - 1656
    - 1663
    - 1775
  deciphering: !ruby/object:Word
    word: deciphering
    stem: deciph
    docFrequency: 3.0
    docPositions:
    - 445
    - 1597
  german: !ruby/object:Word
    word: german
    stem: german
    docFrequency: 8.0
    docPositions:
    - 445
    - 460
    - 496
    - 683
    - 1597
    - 1610
    - 1642
  radio: !ruby/object:Word
    word: radio
    stem: radio
    docFrequency: 4.0
    docPositions:
    - 445
    - 1159
    - 1597
  communications: !ruby/object:Word
    word: communications
    stem: commun
    docFrequency: 3.0
    docPositions:
    - 445
    - 1597
  encoded: !ruby/object:Word
    word: encoded
    stem: encod
    docFrequency: 7.0
    docPositions:
    - 446
    - 454
    - 883
    - 1598
    - 1604
    - 1888
  enigma: !ruby/object:Word
    word: enigma
    stem: enigma
    docFrequency: 5.0
    docPositions:
    - 446
    - 459
    - 1598
    - 1609
  intercepted: !ruby/object:Word
    word: intercepted
    stem: intercept
    docFrequency: 5.0
    docPositions:
    - 447
    - 455
    - 1599
    - 1605
  messages: !ruby/object:Word
    word: messages
    stem: messag
    docFrequency: 7.0
    docPositions:
    - 447
    - 454
    - 460
    - 1599
    - 1604
    - 1610
  decoded: !ruby/object:Word
    word: decoded
    stem: decod
    docFrequency: 3.0
    docPositions:
    - 447
    - 1599
  month: !ruby/object:Word
    word: month
    stem: month
    docFrequency: 5.0
    docPositions:
    - 447
    - 675
    - 1599
    - 1785
  thanks: !ruby/object:Word
    word: thanks
    stem: thank
    docFrequency: 6.0
    docPositions:
    - 447
    - 954
    - 1015
    - 1599
    - 1939
  bombes: !ruby/object:Word
    word: bombes
    stem: bomb
    docFrequency: 3.0
    docPositions:
    - 448
    - 1600
  gordon: !ruby/object:Word
    word: gordon
    stem: gordon
    docFrequency: 3.0
    docPositions:
    - 449
    - 1601
  welchman: !ruby/object:Word
    word: welchman
    stem: welchman
    docFrequency: 3.0
    docPositions:
    - 449
    - 1601
  earlier: !ruby/object:Word
    word: earlier
    stem: earlier
    docFrequency: 5.0
    docPositions:
    - 449
    - 857
    - 1601
    - 1864
  polish: !ruby/object:Word
    word: polish
    stem: polish
    docFrequency: 3.0
    docPositions:
    - 450
    - 1602
  half: !ruby/object:Word
    word: half
    stem: half
    docFrequency: 3.0
    docPositions:
    - 454
    - 1604
  totally: !ruby/object:Word
    word: totally
    stem: total
    docFrequency: 3.0
    docPositions:
    - 455
    - 1605
  different: !ruby/object:Word
    word: different
    stem: differ
    docFrequency: 6.0
    docPositions:
    - 455
    - 602
    - 987
    - 1605
    - 1724
  method: !ruby/object:Word
    word: method
    stem: method
    docFrequency: 3.0
    docPositions:
    - 455
    - 1605
  cipher: !ruby/object:Word
    word: cipher
    stem: cipher
    docFrequency: 3.0
    docPositions:
    - 455
    - 1605
  tunny: !ruby/object:Word
    word: tunny
    stem: tunni
    docFrequency: 11.0
    docPositions:
    - 456
    - 458
    - 492
    - 536
    - 665
    - 1606
    - 1608
    - 1638
    - 1676
    - 1777
  broken: !ruby/object:Word
    word: broken
    stem: broken
    docFrequency: 5.0
    docPositions:
    - 456
    - 498
    - 1606
    - 1644
  april: !ruby/object:Word
    word: april
    stem: april
    docFrequency: 3.0
    docPositions:
    - 457
    - 1607
  current: !ruby/object:Word
    word: current
    stem: current
    docFrequency: 3.0
    docPositions:
    - 457
    - 1607
  traffic: !ruby/object:Word
    word: traffic
    stem: traffic
    docFrequency: 3.0
    docPositions:
    - 457
    - 1607
  read: !ruby/object:Word
    word: read
    stem: read
    docFrequency: 6.0
    docPositions:
    - 457
    - 498
    - 737
    - 1607
    - 1644
  july: !ruby/object:Word
    word: july
    stem: juli
    docFrequency: 5.0
    docPositions:
    - 457
    - 675
    - 1607
    - 1785
  year: !ruby/object:Word
    word: year
    stem: year
    docFrequency: 6.0
    docPositions:
    - 458
    - 695
    - 777
    - 1608
    - 1796
  teleprinter: !ruby/object:Word
    word: teleprinter
    stem: teleprint
    docFrequency: 3.0
    docPositions:
    - 458
    - 1608
  preference: !ruby/object:Word
    word: preference
    stem: prefer
    docFrequency: 3.0
    docPositions:
    - 459
    - 1609
  morse: !ruby/object:Word
    word: morse
    stem: mors
    docFrequency: 3.0
    docPositions:
    - 459
    - 1609
  encryption: !ruby/object:Word
    word: encryption
    stem: encrypt
    docFrequency: 3.0
    docPositions:
    - 459
    - 1609
  level: !ruby/object:Word
    word: level
    stem: level
    docFrequency: 3.0
    docPositions:
    - 459
    - 1609
  signals: !ruby/object:Word
    word: signals
    stem: signal
    docFrequency: 5.0
    docPositions:
    - 460
    - 516
    - 1610
    - 1658
  hitler: !ruby/object:Word
    word: hitler
    stem: hitler
    docFrequency: 3.0
    docPositions:
    - 460
    - 1610
  members: !ruby/object:Word
    word: members
    stem: member
    docFrequency: 7.0
    docPositions:
    - 460
    - 696
    - 877
    - 1610
    - 1797
    - 1882
  command: !ruby/object:Word
    word: command
    stem: command
    docFrequency: 5.0
    docPositions:
    - 461
    - 497
    - 1611
    - 1643
  need: !ruby/object:Word
    word: need
    stem: need
    docFrequency: 4.0
    docPositions:
    - 465
    - 989
    - 1613
  decipher: !ruby/object:Word
    word: decipher
    stem: deciph
    docFrequency: 3.0
    docPositions:
    - 465
    - 1613
  vital: !ruby/object:Word
    word: vital
    stem: vital
    docFrequency: 3.0
    docPositions:
    - 465
    - 1613
  rapidly: !ruby/object:Word
    word: rapidly
    stem: rapidli
    docFrequency: 3.0
    docPositions:
    - 465
    - 1613
  led: !ruby/object:Word
    word: led
    stem: led
    docFrequency: 7.0
    docPositions:
    - 466
    - 658
    - 1049
    - 1614
    - 1770
    - 1967
  propose: !ruby/object:Word
    word: propose
    stem: propos
    docFrequency: 3.0
    docPositions:
    - 466
    - 1614
  november: !ruby/object:Word
    word: november
    stem: novemb
    docFrequency: 5.0
    docPositions:
    - 466
    - 841
    - 1614
    - 1852
  shortly: !ruby/object:Word
    word: shortly
    stem: shortli
    docFrequency: 3.0
    docPositions:
    - 466
    - 1614
  recruitment: !ruby/object:Word
    word: recruitment
    stem: recruit
    docFrequency: 3.0
    docPositions:
    - 467
    - 1615
  key: !ruby/object:Word
    word: key
    stem: kei
    docFrequency: 5.0
    docPositions:
    - 467
    - 489
    - 1615
    - 1635
  decryption: !ruby/object:Word
    word: decryption
    stem: decrypt
    docFrequency: 3.0
    docPositions:
    - 468
    - 1616
  automated: !ruby/object:Word
    word: automated
    stem: autom
    docFrequency: 3.0
    docPositions:
    - 468
    - 1616
  counting: !ruby/object:Word
    word: counting
    stem: count
    docFrequency: 9.0
    docPositions:
    - 469
    - 471
    - 473
    - 509
    - 1617
    - 1619
    - 1621
    - 1653
  specification: !ruby/object:Word
    word: specification
    stem: specif
    docFrequency: 7.0
    docPositions:
    - 470
    - 575
    - 1010
    - 1618
    - 1701
    - 1934
  heath: !ruby/object:Word
    word: heath
    stem: heath
    docFrequency: 5.0
    docPositions:
    - 470
    - 474
    - 1618
    - 1622
  robinson: !ruby/object:Word
    word: robinson
    stem: robinson
    docFrequency: 5.0
    docPositions:
    - 470
    - 474
    - 1618
    - 1622
  relay: !ruby/object:Word
    word: relay
    stem: relai
    docFrequency: 3.0
    docPositions:
    - 470
    - 1618
  circuits: !ruby/object:Word
    word: circuits
    stem: circuit
    docFrequency: 8.0
    docPositions:
    - 471
    - 473
    - 716
    - 882
    - 1619
    - 1621
    - 1887
  counters: !ruby/object:Word
    word: counters
    stem: counter
    docFrequency: 3.0
    docPositions:
    - 471
    - 1619
  c: !ruby/object:Word
    word: c
    stem: c
    docFrequency: 14.0
    docPositions:
    - 472
    - 637
    - 706
    - 943
    - 1073
    - 1077
    - 1101
    - 1128
    - 1158
    - 1162
    - 1171
    - 1620
    - 1753
  wynn: !ruby/object:Word
    word: wynn
    stem: wynn
    docFrequency: 6.0
    docPositions:
    - 472
    - 474
    - 1162
    - 1620
    - 1622
  williams: !ruby/object:Word
    word: williams
    stem: william
    docFrequency: 49.0
    docPositions:
    - 472
    - 474
    - 637
    - 650
    - 677
    - 679
    - 680
    - 692
    - 695
    - 697
    - 699
    - 707
    - 711
    - 720
    - 725
    - 774
    - 798
    - 804
    - 822
    - 824
    - 1021
    - 1024
    - 1026
    - 1077
    - 1080
    - 1158
    - 1162
    - 1178
    - 1620
    - 1622
    - 1753
    - 1764
    - 1787
    - 1789
    - 1790
    - 1793
    - 1796
    - 1798
    - 1800
    - 1802
    - 1807
    - 1815
    - 1819
    - 1835
    - 1837
    - 1943
    - 1946
    - 1948
  thyratron: !ruby/object:Word
    word: thyratron
    stem: thyratron
    docFrequency: 4.0
    docPositions:
    - 472
    - 1162
    - 1620
  cavendish: !ruby/object:Word
    word: cavendish
    stem: cavendish
    docFrequency: 3.0
    docPositions:
    - 473
    - 1621
  laboratory: !ruby/object:Word
    word: laboratory
    stem: laboratori
    docFrequency: 20.0
    docPositions:
    - 473
    - 519
    - 545
    - 561
    - 606
    - 635
    - 677
    - 832
    - 939
    - 1054
    - 1621
    - 1661
    - 1683
    - 1689
    - 1728
    - 1751
    - 1787
    - 1843
    - 1972
  installed: !ruby/object:Word
    word: installed
    stem: instal
    docFrequency: 5.0
    docPositions:
    - 474
    - 643
    - 1622
    - 1759
  june: !ruby/object:Word
    word: june
    stem: june
    docFrequency: 5.0
    docPositions:
    - 474
    - 638
    - 1622
    - 1754
  paper: !ruby/object:Word
    word: paper
    stem: paper
    docFrequency: 13.0
    docPositions:
    - 475
    - 667
    - 825
    - 875
    - 909
    - 912
    - 913
    - 1623
    - 1779
    - 1838
    - 1880
    - 1910
  tapes: !ruby/object:Word
    word: tapes
    stem: tape
    docFrequency: 3.0
    docPositions:
    - 475
    - 1623
  continually: !ruby/object:Word
    word: continually
    stem: continu
    docFrequency: 3.0
    docPositions:
    - 475
    - 1623
  breaking: !ruby/object:Word
    word: breaking
    stem: break
    docFrequency: 5.0
    docPositions:
    - 476
    - 494
    - 1624
    - 1640
  proved: !ruby/object:Word
    word: proved
    stem: prove
    docFrequency: 3.0
    docPositions:
    - 476
    - 1624
  worth: !ruby/object:Word
    word: worth
    stem: worth
    docFrequency: 3.0
    docPositions:
    - 476
    - 1624
  recommended: !ruby/object:Word
    word: recommended
    stem: recommend
    docFrequency: 3.0
    docPositions:
    - 476
    - 1624
  instead: !ruby/object:Word
    word: instead
    stem: instead
    docFrequency: 3.0
    docPositions:
    - 477
    - 1625
  received: !ruby/object:Word
    word: received
    stem: receiv
    docFrequency: 8.0
    docPositions:
    - 477
    - 531
    - 713
    - 795
    - 1625
    - 1671
    - 1804
  official: !ruby/object:Word
    word: official
    stem: offici
    docFrequency: 8.0
    docPositions:
    - 478
    - 514
    - 526
    - 1108
    - 1626
    - 1656
    - 1666
  encouragement: !ruby/object:Word
    word: encouragement
    stem: encourag
    docFrequency: 5.0
    docPositions:
    - 478
    - 834
    - 1626
    - 1845
  independently: !ruby/object:Word
    word: independently
    stem: independ
    docFrequency: 6.0
    docPositions:
    - 478
    - 732
    - 880
    - 1626
    - 1885
  quietly: !ruby/object:Word
    word: quietly
    stem: quietli
    docFrequency: 3.0
    docPositions:
    - 479
    - 1627
  got: !ruby/object:Word
    word: got
    stem: got
    docFrequency: 8.0
    docPositions:
    - 479
    - 551
    - 553
    - 705
    - 814
    - 1627
    - 1829
  constructing: !ruby/object:Word
    word: constructing
    stem: construct
    docFrequency: 3.0
    docPositions:
    - 480
    - 1628
  programmable: !ruby/object:Word
    word: programmable
    stem: programm
    docFrequency: 3.0
    docPositions:
    - 480
    - 1628
  delivered: !ruby/object:Word
    word: delivered
    stem: deliv
    docFrequency: 3.0
    docPositions:
    - 481
    - 1629
  january: !ruby/object:Word
    word: january
    stem: januari
    docFrequency: 3.0
    docPositions:
    - 481
    - 1629
  end: !ruby/object:Word
    word: end
    stem: end
    docFrequency: 8.0
    docPositions:
    - 486
    - 521
    - 974
    - 981
    - 983
    - 1632
    - 1663
  ten: !ruby/object:Word
    word: ten
    stem: ten
    docFrequency: 7.0
    docPositions:
    - 486
    - 498
    - 644
    - 1632
    - 1644
    - 1760
  colossi: !ruby/object:Word
    word: colossi
    stem: colossi
    docFrequency: 9.0
    docPositions:
    - 486
    - 517
    - 520
    - 533
    - 1632
    - 1659
    - 1662
    - 1673
  round: !ruby/object:Word
    word: round
    stem: round
    docFrequency: 3.0
    docPositions:
    - 486
    - 1632
  clock: !ruby/object:Word
    word: clock
    stem: clock
    docFrequency: 4.0
    docPositions:
    - 486
    - 985
    - 1632
  cryptanalytic: !ruby/object:Word
    word: cryptanalytic
    stem: cryptanalyt
    docFrequency: 7.0
    docPositions:
    - 487
    - 509
    - 534
    - 1633
    - 1653
    - 1674
  viewpoint: !ruby/object:Word
    word: viewpoint
    stem: viewpoint
    docFrequency: 3.0
    docPositions:
    - 487
    - 1633
  attachment: !ruby/object:Word
    word: attachment
    stem: attach
    docFrequency: 5.0
    docPositions:
    - 489
    - 533
    - 1635
    - 1673
  discovery: !ruby/object:Word
    word: discovery
    stem: discoveri
    docFrequency: 3.0
    docPositions:
    - 489
    - 1635
  jack: !ruby/object:Word
    word: jack
    stem: jack
    docFrequency: 7.0
    docPositions:
    - 490
    - 1249
    - 1250
    - 1636
    - 1989
    - 1990
  good: !ruby/object:Word
    word: good
    stem: good
    docFrequency: 5.0
    docPositions:
    - 490
    - 529
    - 1636
    - 1669
  broadened: !ruby/object:Word
    word: broadened
    stem: broaden
    docFrequency: 3.0
    docPositions:
    - 490
    - 1636
  determining: !ruby/object:Word
    word: determining
    stem: determin
    docFrequency: 5.0
    docPositions:
    - 492
    - 494
    - 1638
    - 1640
  settings: !ruby/object:Word
    word: settings
    stem: set
    docFrequency: 3.0
    docPositions:
    - 492
    - 1638
  encoding: !ruby/object:Word
    word: encoding
    stem: encod
    docFrequency: 3.0
    docPositions:
    - 492
    - 1638
  message: !ruby/object:Word
    word: message
    stem: messag
    docFrequency: 3.0
    docPositions:
    - 493
    - 1639
  patterns: !ruby/object:Word
    word: patterns
    stem: pattern
    docFrequency: 7.0
    docPositions:
    - 493
    - 495
    - 1639
    - 1641
  themselves: !ruby/object:Word
    word: themselves
    stem: themselv
    docFrequency: 5.0
    docPositions:
    - 495
    - 1045
    - 1641
    - 1963
  eventually: !ruby/object:Word
    word: eventually
    stem: eventu
    docFrequency: 3.0
    docPositions:
    - 495
    - 1641
  changed: !ruby/object:Word
    word: changed
    stem: chang
    docFrequency: 3.0
    docPositions:
    - 495
    - 1641
  daily: !ruby/object:Word
    word: daily
    stem: daili
    docFrequency: 3.0
    docPositions:
    - 496
    - 1642
  germans: !ruby/object:Word
    word: germans
    stem: german
    docFrequency: 3.0
    docPositions:
    - 496
    - 1642
  links: !ruby/object:Word
    word: links
    stem: link
    docFrequency: 6.0
    docPositions:
    - 496
    - 498
    - 1194
    - 1642
    - 1644
  army: !ruby/object:Word
    word: army
    stem: armi
    docFrequency: 7.0
    docPositions:
    - 497
    - 855
    - 1643
    - 1862
  group: !ruby/object:Word
    word: group
    stem: group
    docFrequency: 13.0
    docPositions:
    - 497
    - 836
    - 868
    - 881
    - 887
    - 955
    - 1217
    - 1643
    - 1847
    - 1873
    - 1886
    - 1892
  commanders: !ruby/object:Word
    word: commanders
    stem: command
    docFrequency: 3.0
    docPositions:
    - 497
    - 1643
  field: !ruby/object:Word
    word: field
    stem: field
    docFrequency: 5.0
    docPositions:
    - 497
    - 900
    - 1643
    - 1903
  total: !ruby/object:Word
    word: total
    stem: total
    docFrequency: 3.0
    docPositions:
    - 498
    - 1644
  regularly: !ruby/object:Word
    word: regularly
    stem: regularli
    docFrequency: 3.0
    docPositions:
    - 499
    - 1645
  subsequent: !ruby/object:Word
    word: subsequent
    stem: subsequ
    docFrequency: 3.0
    docPositions:
    - 504
    - 1648
  like: !ruby/object:Word
    word: like
    stem: like
    docFrequency: 5.0
    docPositions:
    - 504
    - 684
    - 1264
    - 1648
  smaller: !ruby/object:Word
    word: smaller
    stem: smaller
    docFrequency: 3.0
    docPositions:
    - 504
    - 1648
  lacked: !ruby/object:Word
    word: lacked
    stem: lack
    docFrequency: 3.0
    docPositions:
    - 505
    - 1649
  important: !ruby/object:Word
    word: important
    stem: import
    docFrequency: 3.0
    docPositions:
    - 505
    - 1649
  features: !ruby/object:Word
    word: features
    stem: featur
    docFrequency: 3.0
    docPositions:
    - 505
    - 1649
  internally: !ruby/object:Word
    word: internally
    stem: intern
    docFrequency: 3.0
    docPositions:
    - 506
    - 1650
  programs: !ruby/object:Word
    word: programs
    stem: program
    docFrequency: 5.0
    docPositions:
    - 506
    - 588
    - 1650
    - 1712
  operator: !ruby/object:Word
    word: operator
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 507
    - 1651
  wiring: !ruby/object:Word
    word: wiring
    stem: wire
    docFrequency: 3.0
    docPositions:
    - 507
    - 1651
  specific: !ruby/object:Word
    word: specific
    stem: specif
    docFrequency: 3.0
    docPositions:
    - 509
    - 1653
  boolean: !ruby/object:Word
    word: boolean
    stem: boolean
    docFrequency: 3.0
    docPositions:
    - 510
    - 1654
  operations: !ruby/object:Word
    word: operations
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 510
    - 1654
  f: !ruby/object:Word
    word: f
    stem: f
    docFrequency: 8.0
    docPositions:
    - 514
    - 637
    - 706
    - 1077
    - 1158
    - 1656
    - 1753
  h: !ruby/object:Word
    word: h
    stem: h
    docFrequency: 9.0
    docPositions:
    - 514
    - 1101
    - 1108
    - 1112
    - 1115
    - 1119
    - 1149
    - 1656
  hinsley: !ruby/object:Word
    word: hinsley
    stem: hinslei
    docFrequency: 3.0
    docPositions:
    - 514
    - 1656
  historian: !ruby/object:Word
    word: historian
    stem: historian
    docFrequency: 3.0
    docPositions:
    - 514
    - 1656
  estimated: !ruby/object:Word
    word: estimated
    stem: estim
    docFrequency: 3.0
    docPositions:
    - 514
    - 1656
  shortened: !ruby/object:Word
    word: shortened
    stem: shorten
    docFrequency: 3.0
    docPositions:
    - 515
    - 1657
  least: !ruby/object:Word
    word: least
    stem: least
    docFrequency: 3.0
    docPositions:
    - 515
    - 1657
  result: !ruby/object:Word
    word: result
    stem: result
    docFrequency: 8.0
    docPositions:
    - 515
    - 660
    - 747
    - 899
    - 1657
    - 1772
    - 1902
  played: !ruby/object:Word
    word: played
    stem: plai
    docFrequency: 7.0
    docPositions:
    - 517
    - 625
    - 820
    - 1659
    - 1745
    - 1833
  role: !ruby/object:Word
    word: role
    stem: role
    docFrequency: 11.0
    docPositions:
    - 517
    - 625
    - 651
    - 711
    - 820
    - 1659
    - 1745
    - 1765
    - 1802
    - 1833
  destroyed: !ruby/object:Word
    word: destroyed
    stem: destroi
    docFrequency: 3.0
    docPositions:
    - 517
    - 1659
  ceased: !ruby/object:Word
    word: ceased
    stem: ceas
    docFrequency: 3.0
    docPositions:
    - 518
    - 1660
  panels: !ruby/object:Word
    word: panels
    stem: panel
    docFrequency: 3.0
    docPositions:
    - 518
    - 1660
  ended: !ruby/object:Word
    word: ended
    stem: end
    docFrequency: 3.0
    docPositions:
    - 518
    - 1660
  trace: !ruby/object:Word
    word: trace
    stem: trace
    docFrequency: 3.0
    docPositions:
    - 520
    - 1662
  original: !ruby/object:Word
    word: original
    stem: origin
    docFrequency: 3.0
    docPositions:
    - 520
    - 1662
  removed: !ruby/object:Word
    word: removed
    stem: remov
    docFrequency: 3.0
    docPositions:
    - 520
    - 1662
  retained: !ruby/object:Word
    word: retained
    stem: retain
    docFrequency: 3.0
    docPositions:
    - 521
    - 1663
  renamed: !ruby/object:Word
    word: renamed
    stem: renam
    docFrequency: 3.0
    docPositions:
    - 521
    - 1663
  gchq: !ruby/object:Word
    word: gchq
    stem: gchq
    docFrequency: 3.0
    docPositions:
    - 521
    - 1663
  last: !ruby/object:Word
    word: last
    stem: last
    docFrequency: 4.0
    docPositions:
    - 522
    - 552
    - 1664
  believed: !ruby/object:Word
    word: believed
    stem: believ
    docFrequency: 5.0
    docPositions:
    - 522
    - 863
    - 1664
    - 1870
  stopped: !ruby/object:Word
    word: stopped
    stem: stop
    docFrequency: 3.0
    docPositions:
    - 522
    - 1664
  those: !ruby/object:Word
    word: those
    stem: those
    docFrequency: 5.0
    docPositions:
    - 526
    - 540
    - 1666
    - 1678
  knew: !ruby/object:Word
    word: knew
    stem: knew
    docFrequency: 8.0
    docPositions:
    - 526
    - 701
    - 715
    - 716
    - 814
    - 1666
    - 1829
  prohibited: !ruby/object:Word
    word: prohibited
    stem: prohibit
    docFrequency: 3.0
    docPositions:
    - 526
    - 1666
  secrets: !ruby/object:Word
    word: secrets
    stem: secret
    docFrequency: 4.0
    docPositions:
    - 526
    - 1093
    - 1666
  act: !ruby/object:Word
    word: act
    stem: act
    docFrequency: 3.0
    docPositions:
    - 527
    - 1667
  sharing: !ruby/object:Word
    word: sharing
    stem: share
    docFrequency: 3.0
    docPositions:
    - 527
    - 1667
  knowledge: !ruby/object:Word
    word: knowledge
    stem: knowledg
    docFrequency: 9.0
    docPositions:
    - 527
    - 661
    - 810
    - 815
    - 1667
    - 1773
    - 1825
    - 1830
  few: !ruby/object:Word
    word: few
    stem: few
    docFrequency: 8.0
    docPositions:
    - 527
    - 546
    - 783
    - 864
    - 1667
    - 1684
    - 1871
  respectively: !ruby/object:Word
    word: respectively
    stem: respect
    docFrequency: 5.0
    docPositions:
    - 529
    - 1062
    - 1669
    - 1978
  notes: !ruby/object:Word
    word: notes
    stem: note
    docFrequency: 3.0
    docPositions:
    - 530
    - 1670
  giving: !ruby/object:Word
    word: giving
    stem: give
    docFrequency: 4.0
    docPositions:
    - 530
    - 783
    - 1670
  barest: !ruby/object:Word
    word: barest
    stem: barest
    docFrequency: 3.0
    docPositions:
    - 530
    - 1670
  outlines: !ruby/object:Word
    word: outlines
    stem: outlin
    docFrequency: 3.0
    docPositions:
    - 530
    - 1670
  clearance: !ruby/object:Word
    word: clearance
    stem: clearanc
    docFrequency: 3.0
    docPositions:
    - 531
    - 1671
  publish: !ruby/object:Word
    word: publish
    stem: publish
    docFrequency: 3.0
    docPositions:
    - 531
    - 1671
  partial: !ruby/object:Word
    word: partial
    stem: partial
    docFrequency: 3.0
    docPositions:
    - 532
    - 1672
  account: !ruby/object:Word
    word: account
    stem: account
    docFrequency: 6.0
    docPositions:
    - 532
    - 535
    - 760
    - 1672
    - 1675
  details: !ruby/object:Word
    word: details
    stem: detail
    docFrequency: 3.0
    docPositions:
    - 532
    - 1672
  uses: !ruby/object:Word
    word: uses
    stem: us
    docFrequency: 3.0
    docPositions:
    - 533
    - 1673
  put: !ruby/object:Word
    word: put
    stem: put
    docFrequency: 7.0
    docPositions:
    - 534
    - 662
    - 997
    - 1674
    - 1774
    - 1923
  algorithms: !ruby/object:Word
    word: algorithms
    stem: algorithm
    docFrequency: 3.0
    docPositions:
    - 534
    - 1674
  they: !ruby/object:Word
    word: they
    stem: thei
    docFrequency: 7.0
    docPositions:
    - 534
    - 717
    - 719
    - 785
    - 1674
  ran: !ruby/object:Word
    word: ran
    stem: ran
    docFrequency: 9.0
    docPositions:
    - 534
    - 603
    - 831
    - 841
    - 1674
    - 1725
    - 1842
    - 1852
  recently: !ruby/object:Word
    word: recently
    stem: recent
    docFrequency: 7.0
    docPositions:
    - 535
    - 695
    - 834
    - 1675
    - 1796
    - 1845
  declassified: !ruby/object:Word
    word: declassified
    stem: declassifi
    docFrequency: 3.0
    docPositions:
    - 535
    - 1675
  attack: !ruby/object:Word
    word: attack
    stem: attack
    docFrequency: 5.0
    docPositions:
    - 536
    - 665
    - 1676
    - 1777
  acquainted: !ruby/object:Word
    word: acquainted
    stem: acquaint
    docFrequency: 3.0
    docPositions:
    - 540
    - 1678
  associated: !ruby/object:Word
    word: associated
    stem: associ
    docFrequency: 3.0
    docPositions:
    - 541
    - 1679
  racks: !ruby/object:Word
    word: racks
    stem: rack
    docFrequency: 3.0
    docPositions:
    - 541
    - 1679
  proof: !ruby/object:Word
    word: proof
    stem: proof
    docFrequency: 3.0
    docPositions:
    - 542
    - 1680
  feasibility: !ruby/object:Word
    word: feasibility
    stem: feasibl
    docFrequency: 3.0
    docPositions:
    - 542
    - 1680
  implement: !ruby/object:Word
    word: implement
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 543
    - 1681
  over: !ruby/object:Word
    word: over
    stem: over
    docFrequency: 6.0
    docPositions:
    - 544
    - 623
    - 936
    - 1682
    - 1743
  establishing: !ruby/object:Word
    word: establishing
    stem: establish
    docFrequency: 3.0
    docPositions:
    - 545
    - 1683
  royal: !ruby/object:Word
    word: royal
    stem: royal
    docFrequency: 11.0
    docPositions:
    - 545
    - 675
    - 725
    - 780
    - 1120
    - 1133
    - 1163
    - 1683
    - 1785
    - 1807
  society: !ruby/object:Word
    word: society
    stem: societi
    docFrequency: 15.0
    docPositions:
    - 545
    - 675
    - 725
    - 780
    - 1121
    - 1133
    - 1138
    - 1163
    - 1179
    - 1190
    - 1212
    - 1683
    - 1785
    - 1807
  precisely: !ruby/object:Word
    word: precisely
    stem: precis
    docFrequency: 3.0
    docPositions:
    - 546
    - 1684
  months: !ruby/object:Word
    word: months
    stem: month
    docFrequency: 4.0
    docPositions:
    - 546
    - 552
    - 1684
  arrival: !ruby/object:Word
    word: arrival
    stem: arriv
    docFrequency: 3.0
    docPositions:
    - 547
    - 1685
  wrote: !ruby/object:Word
    word: wrote
    stem: wrote
    docFrequency: 5.0
    docPositions:
    - 547
    - 833
    - 1685
    - 1844
  follows: !ruby/object:Word
    word: follows
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 547
    - 1685
  von: !ruby/object:Word
    word: von
    stem: von
    docFrequency: 33.0
    docPositions:
    - 548
    - 583
    - 868
    - 871
    - 877
    - 880
    - 886
    - 889
    - 897
    - 901
    - 906
    - 908
    - 911
    - 913
    - 914
    - 919
    - 953
    - 954
    - 1112
    - 1153
    - 1686
    - 1707
    - 1873
    - 1876
    - 1882
    - 1885
    - 1891
    - 1894
    - 1900
    - 1904
    - 1907
    - 1909
  neumann: !ruby/object:Word
    word: neumann
    stem: neumann
    docFrequency: 31.0
    docPositions:
    - 548
    - 583
    - 868
    - 871
    - 877
    - 881
    - 886
    - 897
    - 902
    - 907
    - 908
    - 911
    - 913
    - 914
    - 920
    - 954
    - 1113
    - 1153
    - 1686
    - 1707
    - 1873
    - 1876
    - 1882
    - 1886
    - 1891
    - 1900
    - 1905
    - 1908
    - 1909
  am: !ruby/object:Word
    word: am
    stem: am
    docFrequency: 5.0
    docPositions:
    - 550
    - 554
    - 915
    - 918
  hoping: !ruby/object:Word
    word: hoping
    stem: hope
    docFrequency: 2.0
    docPositions:
    - 550
  embark: !ruby/object:Word
    word: embark
    stem: embark
    docFrequency: 2.0
    docPositions:
    - 550
  kind: !ruby/object:Word
    word: kind
    stem: kind
    docFrequency: 2.0
    docPositions:
    - 552
  eighteen: !ruby/object:Word
    word: eighteen
    stem: eighteen
    docFrequency: 2.0
    docPositions:
    - 552
  ago: !ruby/object:Word
    word: ago
    stem: ago
    docFrequency: 2.0
    docPositions:
    - 552
  decided: !ruby/object:Word
    word: decided
    stem: decid
    docFrequency: 2.0
    docPositions:
    - 553
  try: !ruby/object:Word
    word: try
    stem: try
    docFrequency: 2.0
    docPositions:
    - 553
  my: !ruby/object:Word
    word: my
    stem: my
    docFrequency: 2.0
    docPositions:
    - 553
  hand: !ruby/object:Word
    word: hand
    stem: hand
    docFrequency: 7.0
    docPositions:
    - 553
    - 586
    - 718
    - 846
    - 1710
    - 1857
  starting: !ruby/object:Word
    word: starting
    stem: start
    docFrequency: 2.0
    docPositions:
    - 553
  close: !ruby/object:Word
    word: close
    stem: close
    docFrequency: 2.0
    docPositions:
    - 554
  touch: !ruby/object:Word
    word: touch
    stem: touch
    docFrequency: 2.0
    docPositions:
    - 554
  along: !ruby/object:Word
    word: along
    stem: along
    docFrequency: 3.0
    docPositions:
    - 560
    - 1688
  similar: !ruby/object:Word
    word: similar
    stem: similar
    docFrequency: 8.0
    docPositions:
    - 560
    - 734
    - 857
    - 1050
    - 1688
    - 1864
    - 1968
  lines: !ruby/object:Word
    word: lines
    stem: line
    docFrequency: 9.0
    docPositions:
    - 560
    - 966
    - 967
    - 998
    - 1688
    - 1915
    - 1916
    - 1924
  joined: !ruby/object:Word
    word: joined
    stem: join
    docFrequency: 7.0
    docPositions:
    - 561
    - 663
    - 868
    - 1689
    - 1775
    - 1873
  npl: !ruby/object:Word
    word: npl
    stem: npl
    docFrequency: 13.0
    docPositions:
    - 561
    - 568
    - 596
    - 604
    - 606
    - 617
    - 1689
    - 1696
    - 1718
    - 1726
    - 1728
    - 1737
  brief: !ruby/object:Word
    word: brief
    stem: brief
    docFrequency: 3.0
    docPositions:
    - 561
    - 1689
  develop: !ruby/object:Word
    word: develop
    stem: develop
    docFrequency: 5.0
    docPositions:
    - 562
    - 1049
    - 1690
    - 1967
  scientific: !ruby/object:Word
    word: scientific
    stem: scientif
    docFrequency: 3.0
    docPositions:
    - 563
    - 1691
  thoughts: !ruby/object:Word
    word: thoughts
    stem: thought
    docFrequency: 3.0
    docPositions:
    - 564
    - 1692
  himself: !ruby/object:Word
    word: himself
    stem: himself
    docFrequency: 4.0
    docPositions:
    - 564
    - 916
    - 1692
  brain: !ruby/object:Word
    word: brain
    stem: brain
    docFrequency: 5.0
    docPositions:
    - 564
    - 566
    - 1692
    - 1694
  letter: !ruby/object:Word
    word: letter
    stem: letter
    docFrequency: 12.0
    docPositions:
    - 565
    - 774
    - 798
    - 811
    - 878
    - 909
    - 1693
    - 1815
    - 1826
    - 1883
    - 1910
  producing: !ruby/object:Word
    word: producing
    stem: produc
    docFrequency: 3.0
    docPositions:
    - 566
    - 1694
  action: !ruby/object:Word
    word: action
    stem: action
    docFrequency: 3.0
    docPositions:
    - 566
    - 1694
  practical: !ruby/object:Word
    word: practical
    stem: practic
    docFrequency: 5.0
    docPositions:
    - 567
    - 665
    - 1695
    - 1777
  applications: !ruby/object:Word
    word: applications
    stem: applic
    docFrequency: 4.0
    docPositions:
    - 567
    - 1106
    - 1695
  womersley: !ruby/object:Word
    word: womersley
    stem: womerslei
    docFrequency: 3.0
    docPositions:
    - 567
    - 1695
  immediate: !ruby/object:Word
    word: immediate
    stem: immedi
    docFrequency: 5.0
    docPositions:
    - 568
    - 1024
    - 1696
    - 1946
  superior: !ruby/object:Word
    word: superior
    stem: superior
    docFrequency: 5.0
    docPositions:
    - 568
    - 1049
    - 1696
    - 1967
  christened: !ruby/object:Word
    word: christened
    stem: christen
    docFrequency: 3.0
    docPositions:
    - 568
    - 1696
  ace: !ruby/object:Word
    word: ace
    stem: ac
    docFrequency: 27.0
    docPositions:
    - 569
    - 589
    - 590
    - 601
    - 610
    - 615
    - 620
    - 625
    - 965
    - 996
    - 1013
    - 1015
    - 1697
    - 1713
    - 1714
    - 1723
    - 1732
    - 1735
    - 1740
    - 1745
    - 1914
    - 1922
    - 1937
    - 1939
  homage: !ruby/object:Word
    word: homage
    stem: homag
    docFrequency: 3.0
    docPositions:
    - 569
    - 1697
  reprinted: !ruby/object:Word
    word: reprinted
    stem: reprint
    docFrequency: 4.0
    docPositions:
    - 577
    - 1139
    - 1703
  draft: !ruby/object:Word
    word: draft
    stem: draft
    docFrequency: 6.0
    docPositions:
    - 582
    - 886
    - 1153
    - 1706
    - 1891
  composed: !ruby/object:Word
    word: composed
    stem: compos
    docFrequency: 3.0
    docPositions:
    - 583
    - 1707
  little: !ruby/object:Word
    word: little
    stem: littl
    docFrequency: 5.0
    docPositions:
    - 584
    - 821
    - 1708
    - 1834
  detail: !ruby/object:Word
    word: detail
    stem: detail
    docFrequency: 5.0
    docPositions:
    - 584
    - 774
    - 1708
    - 1815
  concerning: !ruby/object:Word
    word: concerning
    stem: concern
    docFrequency: 5.0
    docPositions:
    - 584
    - 711
    - 1708
    - 1802
  owing: !ruby/object:Word
    word: owing
    stem: ow
    docFrequency: 4.0
    docPositions:
    - 585
    - 918
    - 1709
  restrictions: !ruby/object:Word
    word: restrictions
    stem: restrict
    docFrequency: 3.0
    docPositions:
    - 585
    - 1709
  supplied: !ruby/object:Word
    word: supplied
    stem: suppli
    docFrequency: 3.0
    docPositions:
    - 587
    - 1711
  detailed: !ruby/object:Word
    word: detailed
    stem: detail
    docFrequency: 3.0
    docPositions:
    - 587
    - 1711
  circuit: !ruby/object:Word
    word: circuit
    stem: circuit
    docFrequency: 3.0
    docPositions:
    - 587
    - 1711
  specifications: !ruby/object:Word
    word: specifications
    stem: specif
    docFrequency: 4.0
    docPositions:
    - 587
    - 955
    - 1711
  units: !ruby/object:Word
    word: units
    stem: unit
    docFrequency: 4.0
    docPositions:
    - 587
    - 972
    - 1711
  specimen: !ruby/object:Word
    word: specimen
    stem: specimen
    docFrequency: 3.0
    docPositions:
    - 588
    - 1712
  estimate: !ruby/object:Word
    word: estimate
    stem: estim
    docFrequency: 3.0
    docPositions:
    - 588
    - 1712
  differed: !ruby/object:Word
    word: differed
    stem: differ
    docFrequency: 3.0
    docPositions:
    - 589
    - 1713
  fundamentally: !ruby/object:Word
    word: fundamentally
    stem: fundament
    docFrequency: 3.0
    docPositions:
    - 590
    - 1714
  distributed: !ruby/object:Word
    word: distributed
    stem: distribut
    docFrequency: 3.0
    docPositions:
    - 590
    - 1714
  while: !ruby/object:Word
    word: while
    stem: while
    docFrequency: 9.0
    docPositions:
    - 591
    - 870
    - 874
    - 885
    - 1715
    - 1875
    - 1879
    - 1890
  centralised: !ruby/object:Word
    word: centralised
    stem: centralis
    docFrequency: 3.0
    docPositions:
    - 591
    - 1715
  saw: !ruby/object:Word
    word: saw
    stem: saw
    docFrequency: 3.0
    docPositions:
    - 595
    - 1717
  keys: !ruby/object:Word
    word: keys
    stem: kei
    docFrequency: 3.0
    docPositions:
    - 595
    - 1717
  colleague: !ruby/object:Word
    word: colleague
    stem: colleagu
    docFrequency: 3.0
    docPositions:
    - 596
    - 1718
  jim: !ruby/object:Word
    word: jim
    stem: jim
    docFrequency: 3.0
    docPositions:
    - 596
    - 1718
  wilkinson: !ruby/object:Word
    word: wilkinson
    stem: wilkinson
    docFrequency: 11.0
    docPositions:
    - 596
    - 608
    - 805
    - 806
    - 1149
    - 1150
    - 1718
    - 1730
    - 1820
    - 1821
  observed: !ruby/object:Word
    word: observed
    stem: observ
    docFrequency: 3.0
    docPositions:
    - 596
    - 1718
  obsessed: !ruby/object:Word
    word: obsessed
    stem: obsess
    docFrequency: 3.0
    docPositions:
    - 597
    - 1719
  much: !ruby/object:Word
    word: much
    stem: much
    docFrequency: 9.0
    docPositions:
    - 598
    - 640
    - 668
    - 724
    - 1720
    - 1756
    - 1780
    - 1806
  today: !ruby/object:Word
    word: today
    stem: todai
    docFrequency: 3.0
    docPositions:
    - 598
    - 1720
  risc: !ruby/object:Word
    word: risc
    stem: risc
    docFrequency: 3.0
    docPositions:
    - 599
    - 1721
  architectures: !ruby/object:Word
    word: architectures
    stem: architectur
    docFrequency: 3.0
    docPositions:
    - 599
    - 1721
  roughly: !ruby/object:Word
    word: roughly
    stem: roughli
    docFrequency: 3.0
    docPositions:
    - 599
    - 1721
  same: !ruby/object:Word
    word: same
    stem: same
    docFrequency: 7.0
    docPositions:
    - 600
    - 724
    - 884
    - 1722
    - 1806
    - 1889
  capacity: !ruby/object:Word
    word: capacity
    stem: capac
    docFrequency: 5.0
    docPositions:
    - 600
    - 1059
    - 1722
    - 1975
  macintosh: !ruby/object:Word
    word: macintosh
    stem: macintosh
    docFrequency: 3.0
    docPositions:
    - 600
    - 1722
  enormous: !ruby/object:Word
    word: enormous
    stem: enorm
    docFrequency: 3.0
    docPositions:
    - 600
    - 1722
  standards: !ruby/object:Word
    word: standards
    stem: standard
    docFrequency: 5.0
    docPositions:
    - 600
    - 942
    - 945
    - 1722
  day: !ruby/object:Word
    word: day
    stem: dai
    docFrequency: 3.0
    docPositions:
    - 601
    - 1723
  planned: !ruby/object:Word
    word: planned
    stem: plan
    docFrequency: 3.0
    docPositions:
    - 601
    - 1723
  league: !ruby/object:Word
    word: league
    stem: leagu
    docFrequency: 3.0
    docPositions:
    - 602
    - 1724
  progress: !ruby/object:Word
    word: progress
    stem: progress
    docFrequency: 4.0
    docPositions:
    - 602
    - 792
    - 1724
  due: !ruby/object:Word
    word: due
    stem: due
    docFrequency: 5.0
    docPositions:
    - 603
    - 652
    - 1725
    - 1766
  organisational: !ruby/object:Word
    word: organisational
    stem: organis
    docFrequency: 3.0
    docPositions:
    - 604
    - 1726
  difficulties: !ruby/object:Word
    word: difficulties
    stem: difficulti
    docFrequency: 3.0
    docPositions:
    - 604
    - 1726
  fed: !ruby/object:Word
    word: fed
    stem: fed
    docFrequency: 4.0
    docPositions:
    - 604
    - 986
    - 1726
  robin: !ruby/object:Word
    word: robin
    stem: robin
    docFrequency: 3.0
    docPositions:
    - 605
    - 1727
  gandy: !ruby/object:Word
    word: gandy
    stem: gandi
    docFrequency: 3.0
    docPositions:
    - 605
    - 1727
  description: !ruby/object:Word
    word: description
    stem: descript
    docFrequency: 5.0
    docPositions:
    - 605
    - 970
    - 1727
    - 1919
  pilot: !ruby/object:Word
    word: pilot
    stem: pilot
    docFrequency: 11.0
    docPositions:
    - 607
    - 610
    - 615
    - 995
    - 1015
    - 1729
    - 1732
    - 1735
    - 1921
    - 1939
  edward: !ruby/object:Word
    word: edward
    stem: edward
    docFrequency: 3.0
    docPositions:
    - 608
    - 1730
  mike: !ruby/object:Word
    word: mike
    stem: mike
    docFrequency: 3.0
    docPositions:
    - 609
    - 1731
  woodger: !ruby/object:Word
    word: woodger
    stem: woodger
    docFrequency: 3.0
    docPositions:
    - 609
    - 1731
  mhz: !ruby/object:Word
    word: mhz
    stem: mhz
    docFrequency: 3.0
    docPositions:
    - 610
    - 1732
  fastest: !ruby/object:Word
    word: fastest
    stem: fastest
    docFrequency: 3.0
    docPositions:
    - 611
    - 1733
  sales: !ruby/object:Word
    word: sales
    stem: sale
    docFrequency: 3.0
    docPositions:
    - 615
    - 1735
  deuce: !ruby/object:Word
    word: deuce
    stem: deuc
    docFrequency: 7.0
    docPositions:
    - 615
    - 624
    - 996
    - 1735
    - 1744
    - 1922
  buoyant: !ruby/object:Word
    word: buoyant
    stem: buoyant
    docFrequency: 3.0
    docPositions:
    - 616
    - 1736
  confounding: !ruby/object:Word
    word: confounding
    stem: confound
    docFrequency: 3.0
    docPositions:
    - 616
    - 1736
  suggestion: !ruby/object:Word
    word: suggestion
    stem: suggest
    docFrequency: 3.0
    docPositions:
    - 616
    - 1736
  director: !ruby/object:Word
    word: director
    stem: director
    docFrequency: 5.0
    docPositions:
    - 617
    - 835
    - 1737
    - 1846
  sir: !ruby/object:Word
    word: sir
    stem: sir
    docFrequency: 3.0
    docPositions:
    - 617
    - 1737
  darwin: !ruby/object:Word
    word: darwin
    stem: darwin
    docFrequency: 3.0
    docPositions:
    - 617
    - 1737
  suffice: !ruby/object:Word
    word: suffice
    stem: suffic
    docFrequency: 3.0
    docPositions:
    - 618
    - 1738
  solve: !ruby/object:Word
    word: solve
    stem: solv
    docFrequency: 3.0
    docPositions:
    - 618
    - 1738
  country: !ruby/object:Word
    word: country
    stem: countri
    docFrequency: 4.0
    docPositions:
    - 619
    - 733
    - 1739
  fundamentals: !ruby/object:Word
    word: fundamentals
    stem: fundament
    docFrequency: 3.0
    docPositions:
    - 620
    - 1740
  harry: !ruby/object:Word
    word: harry
    stem: harri
    docFrequency: 4.0
    docPositions:
    - 621
    - 946
    - 1741
  huskey: !ruby/object:Word
    word: huskey
    stem: huskei
    docFrequency: 9.0
    docPositions:
    - 621
    - 622
    - 823
    - 947
    - 1115
    - 1741
    - 1742
    - 1836
  wayne: !ruby/object:Word
    word: wayne
    stem: wayn
    docFrequency: 3.0
    docPositions:
    - 621
    - 1741
  detroit: !ruby/object:Word
    word: detroit
    stem: detroit
    docFrequency: 3.0
    docPositions:
    - 621
    - 1741
  bendix: !ruby/object:Word
    word: bendix
    stem: bendix
    docFrequency: 3.0
    docPositions:
    - 622
    - 1742
  arguably: !ruby/object:Word
    word: arguably
    stem: arguabl
    docFrequency: 3.0
    docPositions:
    - 623
    - 1743
  personal: !ruby/object:Word
    word: personal
    stem: person
    docFrequency: 3.0
    docPositions:
    - 623
    - 1743
  worldwide: !ruby/object:Word
    word: worldwide
    stem: worldwid
    docFrequency: 3.0
    docPositions:
    - 623
    - 1743
  deriving: !ruby/object:Word
    word: deriving
    stem: deriv
    docFrequency: 3.0
    docPositions:
    - 625
    - 1745
  mosaic: !ruby/object:Word
    word: mosaic
    stem: mosaic
    docFrequency: 3.0
    docPositions:
    - 625
    - 1745
  air: !ruby/object:Word
    word: air
    stem: air
    docFrequency: 4.0
    docPositions:
    - 626
    - 686
    - 1746
  defences: !ruby/object:Word
    word: defences
    stem: defenc
    docFrequency: 3.0
    docPositions:
    - 626
    - 1746
  cold: !ruby/object:Word
    word: cold
    stem: cold
    docFrequency: 3.0
    docPositions:
    - 626
    - 1746
  derivatives: !ruby/object:Word
    word: derivatives
    stem: deriv
    docFrequency: 3.0
    docPositions:
    - 626
    - 1746
  include: !ruby/object:Word
    word: include
    stem: includ
    docFrequency: 3.0
    docPositions:
    - 627
    - 1747
  packard: !ruby/object:Word
    word: packard
    stem: packard
    docFrequency: 3.0
    docPositions:
    - 627
    - 1747
  baby: !ruby/object:Word
    word: baby
    stem: babi
    docFrequency: 3.0
    docPositions:
    - 636
    - 1752
  engineers: !ruby/object:Word
    word: engineers
    stem: engin
    docFrequency: 5.0
    docPositions:
    - 637
    - 1037
    - 1753
    - 1957
  tom: !ruby/object:Word
    word: tom
    stem: tom
    docFrequency: 6.0
    docPositions:
    - 637
    - 701
    - 715
    - 1082
    - 1753
  kilburn: !ruby/object:Word
    word: kilburn
    stem: kilburn
    docFrequency: 26.0
    docPositions:
    - 637
    - 651
    - 697
    - 698
    - 701
    - 712
    - 715
    - 725
    - 775
    - 809
    - 821
    - 824
    - 1083
    - 1753
    - 1765
    - 1798
    - 1799
    - 1803
    - 1807
    - 1816
    - 1824
    - 1834
    - 1837
  performed: !ruby/object:Word
    word: performed
    stem: perform
    docFrequency: 3.0
    docPositions:
    - 638
    - 1754
  tiny: !ruby/object:Word
    word: tiny
    stem: tini
    docFrequency: 3.0
    docPositions:
    - 638
    - 1754
  face: !ruby/object:Word
    word: face
    stem: face
    docFrequency: 5.0
    docPositions:
    - 639
    - 1023
    - 1755
    - 1945
  cathode: !ruby/object:Word
    word: cathode
    stem: cathod
    docFrequency: 7.0
    docPositions:
    - 639
    - 679
    - 1023
    - 1755
    - 1789
    - 1945
  ray: !ruby/object:Word
    word: ray
    stem: rai
    docFrequency: 7.0
    docPositions:
    - 639
    - 679
    - 1023
    - 1755
    - 1789
    - 1945
  tube: !ruby/object:Word
    word: tube
    stem: tube
    docFrequency: 15.0
    docPositions:
    - 639
    - 679
    - 1021
    - 1023
    - 1024
    - 1026
    - 1755
    - 1789
    - 1943
    - 1945
    - 1946
    - 1948
  just: !ruby/object:Word
    word: just
    stem: just
    docFrequency: 4.0
    docPositions:
    - 639
    - 744
    - 1755
  seventeen: !ruby/object:Word
    word: seventeen
    stem: seventeen
    docFrequency: 3.0
    docPositions:
    - 639
    - 1755
  long: !ruby/object:Word
    word: long
    stem: long
    docFrequency: 4.0
    docPositions:
    - 640
    - 973
    - 1756
  enlarged: !ruby/object:Word
    word: enlarged
    stem: enlarg
    docFrequency: 3.0
    docPositions:
    - 640
    - 1756
  commercially: !ruby/object:Word
    word: commercially
    stem: commerci
    docFrequency: 6.0
    docPositions:
    - 642
    - 950
    - 1023
    - 1758
    - 1945
  available: !ruby/object:Word
    word: available
    stem: avail
    docFrequency: 6.0
    docPositions:
    - 642
    - 950
    - 1023
    - 1758
    - 1945
  ferranti: !ruby/object:Word
    word: ferranti
    stem: ferranti
    docFrequency: 11.0
    docPositions:
    - 642
    - 831
    - 835
    - 840
    - 844
    - 1758
    - 1842
    - 1846
    - 1851
    - 1855
  mark: !ruby/object:Word
    word: mark
    stem: mark
    docFrequency: 8.0
    docPositions:
    - 642
    - 831
    - 845
    - 1214
    - 1758
    - 1842
    - 1856
  canada: !ruby/object:Word
    word: canada
    stem: canada
    docFrequency: 3.0
    docPositions:
    - 644
    - 1760
  holland: !ruby/object:Word
    word: holland
    stem: holland
    docFrequency: 3.0
    docPositions:
    - 644
    - 1760
  italy: !ruby/object:Word
    word: italy
    stem: itali
    docFrequency: 3.0
    docPositions:
    - 644
    - 1760
  logico: !ruby/object:Word
    word: logico
    stem: logico
    docFrequency: 3.0
    docPositions:
    - 648
    - 1762
  contributions: !ruby/object:Word
    word: contributions
    stem: contribut
    docFrequency: 4.0
    docPositions:
    - 648
    - 920
    - 1762
  triumph: !ruby/object:Word
    word: triumph
    stem: triumph
    docFrequency: 3.0
    docPositions:
    - 649
    - 1763
  neglected: !ruby/object:Word
    word: neglected
    stem: neglect
    docFrequency: 3.0
    docPositions:
    - 649
    - 1763
  remembered: !ruby/object:Word
    word: remembered
    stem: rememb
    docFrequency: 3.0
    docPositions:
    - 650
    - 1764
  indeed: !ruby/object:Word
    word: indeed
    stem: inde
    docFrequency: 3.0
    docPositions:
    - 651
    - 1765
  sufficiently: !ruby/object:Word
    word: sufficiently
    stem: suffici
    docFrequency: 4.0
    docPositions:
    - 652
    - 984
    - 1766
  perhaps: !ruby/object:Word
    word: perhaps
    stem: perhap
    docFrequency: 4.0
    docPositions:
    - 652
    - 917
    - 1766
  thoroughly: !ruby/object:Word
    word: thoroughly
    stem: thoroughli
    docFrequency: 3.0
    docPositions:
    - 652
    - 1766
  self: !ruby/object:Word
    word: self
    stem: self
    docFrequency: 3.0
    docPositions:
    - 653
    - 1767
  effacing: !ruby/object:Word
    word: effacing
    stem: effac
    docFrequency: 3.0
    docPositions:
    - 653
    - 1767
  relating: !ruby/object:Word
    word: relating
    stem: relat
    docFrequency: 3.0
    docPositions:
    - 653
    - 1767
  relevant: !ruby/object:Word
    word: relevant
    stem: relev
    docFrequency: 3.0
    docPositions:
    - 653
    - 1767
  events: !ruby/object:Word
    word: events
    stem: event
    docFrequency: 3.0
    docPositions:
    - 653
    - 1767
  directly: !ruby/object:Word
    word: directly
    stem: directli
    docFrequency: 3.0
    docPositions:
    - 658
    - 1770
  defined: !ruby/object:Word
    word: defined
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 659
    - 1771
  constructive: !ruby/object:Word
    word: constructive
    stem: construct
    docFrequency: 3.0
    docPositions:
    - 659
    - 1771
  carry: !ruby/object:Word
    word: carry
    stem: carri
    docFrequency: 3.0
    docPositions:
    - 659
    - 1771
  op: !ruby/object:Word
    word: op
    stem: op
    docFrequency: 3.0
    docPositions:
    - 660
    - 1772
  cit: !ruby/object:Word
    word: cit
    stem: cit
    docFrequency: 3.0
    docPositions:
    - 660
    - 1772
  possibilities: !ruby/object:Word
    word: possibilities
    stem: possibl
    docFrequency: 4.0
    docPositions:
    - 662
    - 782
    - 1774
  machinery: !ruby/object:Word
    word: machinery
    stem: machineri
    docFrequency: 5.0
    docPositions:
    - 662
    - 664
    - 1774
    - 1776
  rather: !ruby/object:Word
    word: rather
    stem: rather
    docFrequency: 4.0
    docPositions:
    - 662
    - 798
    - 1774
  theoretical: !ruby/object:Word
    word: theoretical
    stem: theoret
    docFrequency: 3.0
    docPositions:
    - 663
    - 1775
  suddenly: !ruby/object:Word
    word: suddenly
    stem: suddenli
    docFrequency: 3.0
    docPositions:
    - 664
    - 1776
  realisation: !ruby/object:Word
    word: realisation
    stem: realis
    docFrequency: 3.0
    docPositions:
    - 665
    - 1777
  mechanised: !ruby/object:Word
    word: mechanised
    stem: mechanis
    docFrequency: 3.0
    docPositions:
    - 666
    - 1778
  tried: !ruby/object:Word
    word: tried
    stem: tri
    docFrequency: 3.0
    docPositions:
    - 666
    - 1778
  arcane: !ruby/object:Word
    word: arcane
    stem: arcan
    docFrequency: 3.0
    docPositions:
    - 668
    - 1780
  notation: !ruby/object:Word
    word: notation
    stem: notat
    docFrequency: 3.0
    docPositions:
    - 668
    - 1780
  doubt: !ruby/object:Word
    word: doubt
    stem: doubt
    docFrequency: 5.0
    docPositions:
    - 669
    - 821
    - 1781
    - 1834
  firmly: !ruby/object:Word
    word: firmly
    stem: firmli
    docFrequency: 4.0
    docPositions:
    - 669
    - 917
    - 1781
  mind: !ruby/object:Word
    word: mind
    stem: mind
    docFrequency: 3.0
    docPositions:
    - 669
    - 1781
  technology: !ruby/object:Word
    word: technology
    stem: technolog
    docFrequency: 7.0
    docPositions:
    - 670
    - 940
    - 1047
    - 1178
    - 1782
    - 1965
  approved: !ruby/object:Word
    word: approved
    stem: approv
    docFrequency: 3.0
    docPositions:
    - 675
    - 1785
  application: !ruby/object:Word
    word: application
    stem: applic
    docFrequency: 6.0
    docPositions:
    - 676
    - 876
    - 1137
    - 1786
    - 1881
  funds: !ruby/object:Word
    word: funds
    stem: fund
    docFrequency: 3.0
    docPositions:
    - 676
    - 1786
  freddie: !ruby/object:Word
    word: freddie
    stem: freddi
    docFrequency: 3.0
    docPositions:
    - 677
    - 1787
  telecommunications: !ruby/object:Word
    word: telecommunications
    stem: telecommun
    docFrequency: 3.0
    docPositions:
    - 677
    - 1787
  establishment: !ruby/object:Word
    word: establishment
    stem: establish
    docFrequency: 3.0
    docPositions:
    - 678
    - 1788
  malvern: !ruby/object:Word
    word: malvern
    stem: malvern
    docFrequency: 5.0
    docPositions:
    - 678
    - 698
    - 1788
    - 1799
  series: !ruby/object:Word
    word: series
    stem: seri
    docFrequency: 12.0
    docPositions:
    - 678
    - 757
    - 980
    - 1025
    - 1121
    - 1138
    - 1150
    - 1164
    - 1788
    - 1812
    - 1947
  experiments: !ruby/object:Word
    word: experiments
    stem: experi
    docFrequency: 5.0
    docPositions:
    - 678
    - 1048
    - 1788
    - 1966
  storage: !ruby/object:Word
    word: storage
    stem: storag
    docFrequency: 13.0
    docPositions:
    - 679
    - 687
    - 703
    - 748
    - 757
    - 761
    - 884
    - 1046
    - 1789
    - 1812
    - 1889
    - 1964
  radar: !ruby/object:Word
    word: radar
    stem: radar
    docFrequency: 6.0
    docPositions:
    - 680
    - 684
    - 968
    - 1790
    - 1917
  explains: !ruby/object:Word
    word: explains
    stem: explain
    docFrequency: 3.0
    docPositions:
    - 680
    - 1790
  came: !ruby/object:Word
    word: came
    stem: came
    docFrequency: 3.0
    docPositions:
    - 680
    - 1790
  o: !ruby/object:Word
    word: o
    stem: o
    docFrequency: 5.0
    docPositions:
    - 683
    - 1334
    - 1335
    - 1336
  nce: !ruby/object:Word
    word: nce
    stem: nce
    docFrequency: 2.0
    docPositions:
    - 683
  armies: !ruby/object:Word
    word: armies
    stem: armi
    docFrequency: 2.0
    docPositions:
    - 683
  collapsed: !ruby/object:Word
    word: collapsed
    stem: collaps
    docFrequency: 2.0
    docPositions:
    - 683
  nobody: !ruby/object:Word
    word: nobody
    stem: nobodi
    docFrequency: 2.0
    docPositions:
    - 683
  going: !ruby/object:Word
    word: going
    stem: go
    docFrequency: 5.0
    docPositions:
    - 684
    - 685
    - 998
    - 1924
  care: !ruby/object:Word
    word: care
    stem: care
    docFrequency: 3.0
    docPositions:
    - 684
    - 914
  toss: !ruby/object:Word
    word: toss
    stem: toss
    docFrequency: 2.0
    docPositions:
    - 684
  people: !ruby/object:Word
    word: people
    stem: peopl
    docFrequency: 3.0
    docPositions:
    - 684
    - 914
  me: !ruby/object:Word
    word: me
    stem: me
    docFrequency: 4.0
    docPositions:
    - 684
    - 913
    - 917
  soup: !ruby/object:Word
    word: soup
    stem: soup
    docFrequency: 2.0
    docPositions:
    - 685
  unless: !ruby/object:Word
    word: unless
    stem: unless
    docFrequency: 2.0
    docPositions:
    - 685
  something: !ruby/object:Word
    word: something
    stem: someth
    docFrequency: 4.0
    docPositions:
    - 685
    - 712
    - 1803
  else: !ruby/object:Word
    word: else
    stem: els
    docFrequency: 2.0
    docPositions:
    - 685
  knowing: !ruby/object:Word
    word: knowing
    stem: know
    docFrequency: 2.0
    docPositions:
    - 686
  absolutely: !ruby/object:Word
    word: absolutely
    stem: absolut
    docFrequency: 2.0
    docPositions:
    - 686
  nothing: !ruby/object:Word
    word: nothing
    stem: noth
    docFrequency: 4.0
    docPositions:
    - 686
    - 715
    - 717
  latched: !ruby/object:Word
    word: latched
    stem: latch
    docFrequency: 2.0
    docPositions:
    - 687
  onto: !ruby/object:Word
    word: onto
    stem: onto
    docFrequency: 2.0
    docPositions:
    - 687
  tackled: !ruby/object:Word
    word: tackled
    stem: tackl
    docFrequency: 2.0
    docPositions:
    - 687
  quoted: !ruby/object:Word
    word: quoted
    stem: quot
    docFrequency: 5.0
    docPositions:
    - 687
    - 804
    - 925
    - 1819
  bennett: !ruby/object:Word
    word: bennett
    stem: bennett
    docFrequency: 3.0
    docPositions:
    - 688
    - 1077
  learned: !ruby/object:Word
    word: learned
    stem: learn
    docFrequency: 3.0
    docPositions:
    - 692
    - 1793
  help: !ruby/object:Word
    word: help
    stem: help
    docFrequency: 3.0
    docPositions:
    - 692
    - 1793
  patrick: !ruby/object:Word
    word: patrick
    stem: patrick
    docFrequency: 3.0
    docPositions:
    - 692
    - 1793
  blackett: !ruby/object:Word
    word: blackett
    stem: blackett
    docFrequency: 3.0
    docPositions:
    - 693
    - 1794
  langworthy: !ruby/object:Word
    word: langworthy
    stem: langworthi
    docFrequency: 3.0
    docPositions:
    - 693
    - 1794
  physics: !ruby/object:Word
    word: physics
    stem: physic
    docFrequency: 3.0
    docPositions:
    - 693
    - 1794
  powerful: !ruby/object:Word
    word: powerful
    stem: power
    docFrequency: 3.0
    docPositions:
    - 694
    - 1795
  figures: !ruby/object:Word
    word: figures
    stem: figur
    docFrequency: 3.0
    docPositions:
    - 694
    - 1795
  instrumental: !ruby/object:Word
    word: instrumental
    stem: instrument
    docFrequency: 3.0
    docPositions:
    - 694
    - 1795
  appointment: !ruby/object:Word
    word: appointment
    stem: appoint
    docFrequency: 4.0
    docPositions:
    - 695
    - 778
    - 1796
  old: !ruby/object:Word
    word: old
    stem: old
    docFrequency: 3.0
    docPositions:
    - 695
    - 1796
  vacated: !ruby/object:Word
    word: vacated
    stem: vacat
    docFrequency: 3.0
    docPositions:
    - 695
    - 1796
  chair: !ruby/object:Word
    word: chair
    stem: chair
    docFrequency: 3.0
    docPositions:
    - 695
    - 1796
  electro: !ruby/object:Word
    word: electro
    stem: electro
    docFrequency: 3.0
    docPositions:
    - 696
    - 1797
  technics: !ruby/object:Word
    word: technics
    stem: technic
    docFrequency: 3.0
    docPositions:
    - 696
    - 1797
  both: !ruby/object:Word
    word: both
    stem: both
    docFrequency: 8.0
    docPositions:
    - 696
    - 919
    - 965
    - 1032
    - 1797
    - 1914
    - 1952
  appointing: !ruby/object:Word
    word: appointing
    stem: appoint
    docFrequency: 3.0
    docPositions:
    - 696
    - 1797
  committee: !ruby/object:Word
    word: committee
    stem: committe
    docFrequency: 3.0
    docPositions:
    - 697
    - 1798
  immediately: !ruby/object:Word
    word: immediately
    stem: immedi
    docFrequency: 3.0
    docPositions:
    - 698
    - 1799
  assistant: !ruby/object:Word
    word: assistant
    stem: assist
    docFrequency: 3.0
    docPositions:
    - 698
    - 1799
  seconded: !ruby/object:Word
    word: seconded
    stem: second
    docFrequency: 3.0
    docPositions:
    - 698
    - 1799
  take: !ruby/object:Word
    word: take
    stem: take
    docFrequency: 5.0
    docPositions:
    - 699
    - 881
    - 1800
    - 1886
  story: !ruby/object:Word
    word: story
    stem: stori
    docFrequency: 3.0
    docPositions:
    - 699
    - 1800
  words: !ruby/object:Word
    word: words
    stem: word
    docFrequency: 6.0
    docPositions:
    - 699
    - 724
    - 737
    - 1800
    - 1806
  n: !ruby/object:Word
    word: n
    stem: n
    docFrequency: 4.0
    docPositions:
    - 701
    - 1154
    - 1171
  either: !ruby/object:Word
    word: either
    stem: either
    docFrequency: 2.0
    docPositions:
    - 701
  nor: !ruby/object:Word
    word: nor
    stem: nor
    docFrequency: 2.0
    docPositions:
    - 701
  arrived: !ruby/object:Word
    word: arrived
    stem: arriv
    docFrequency: 2.0
    docPositions:
    - 702
  d: !ruby/object:Word
    word: d
    stem: d
    docFrequency: 8.0
    docPositions:
    - 702
    - 704
    - 705
    - 943
    - 1097
    - 1115
    - 1125
  enough: !ruby/object:Word
    word: enough
    stem: enough
    docFrequency: 2.0
    docPositions:
    - 702
  explained: !ruby/object:Word
    word: explained
    stem: explain
    docFrequency: 4.0
    docPositions:
    - 703
    - 706
    - 718
  understand: !ruby/object:Word
    word: understand
    stem: understand
    docFrequency: 2.0
    docPositions:
    - 703
  wanted: !ruby/object:Word
    word: wanted
    stem: want
    docFrequency: 2.0
    docPositions:
    - 704
  reached: !ruby/object:Word
    word: reached
    stem: reach
    docFrequency: 2.0
    docPositions:
    - 705
  business: !ruby/object:Word
    word: business
    stem: busi
    docFrequency: 3.0
    docPositions:
    - 706
    - 959
  works: !ruby/object:Word
    word: works
    stem: work
    docFrequency: 3.0
    docPositions:
    - 706
    - 1071
  elsewhere: !ruby/object:Word
    word: elsewhere
    stem: elsewher
    docFrequency: 5.0
    docPositions:
    - 711
    - 891
    - 1802
    - 1896
  explicit: !ruby/object:Word
    word: explicit
    stem: explicit
    docFrequency: 3.0
    docPositions:
    - 711
    - 1802
  gives: !ruby/object:Word
    word: gives
    stem: give
    docFrequency: 3.0
    docPositions:
    - 711
    - 1802
  flavour: !ruby/object:Word
    word: flavour
    stem: flavour
    docFrequency: 3.0
    docPositions:
    - 712
    - 1803
  explanation: !ruby/object:Word
    word: explanation
    stem: explan
    docFrequency: 5.0
    docPositions:
    - 712
    - 755
    - 1803
    - 1810
  lot: !ruby/object:Word
    word: lot
    stem: lot
    docFrequency: 3.0
    docPositions:
    - 715
    - 716
  mr: !ruby/object:Word
    word: mr
    stem: mr
    docFrequency: 2.0
    docPositions:
    - 716
  substantially: !ruby/object:Word
    word: substantially
    stem: substanti
    docFrequency: 2.0
    docPositions:
    - 717
  electronics: !ruby/object:Word
    word: electronics
    stem: electron
    docFrequency: 3.0
    docPositions:
    - 717
    - 782
  took: !ruby/object:Word
    word: took
    stem: took
    docFrequency: 2.0
    docPositions:
    - 717
  live: !ruby/object:Word
    word: live
    stem: live
    docFrequency: 2.0
    docPositions:
    - 718
  houses: !ruby/object:Word
    word: houses
    stem: hous
    docFrequency: 8.0
    docPositions:
    - 718
    - 736
    - 740
    - 757
    - 764
    - 765
    - 1812
  addresses: !ruby/object:Word
    word: addresses
    stem: address
    docFrequency: 4.0
    docPositions:
    - 719
    - 899
    - 1902
  if: !ruby/object:Word
    word: if
    stem: if
    docFrequency: 5.0
    docPositions:
    - 719
    - 766
    - 989
    - 1265
  kept: !ruby/object:Word
    word: kept
    stem: kept
    docFrequency: 2.0
    docPositions:
    - 719
  track: !ruby/object:Word
    word: track
    stem: track
    docFrequency: 2.0
    docPositions:
    - 719
  must: !ruby/object:Word
    word: must
    stem: must
    docFrequency: 4.0
    docPositions:
    - 724
    - 768
    - 1806
  address: !ruby/object:Word
    word: address
    stem: address
    docFrequency: 9.0
    docPositions:
    - 725
    - 747
    - 755
    - 785
    - 786
    - 789
    - 1807
    - 1810
  march: !ruby/object:Word
    word: march
    stem: march
    docFrequency: 3.0
    docPositions:
    - 726
    - 1808
  hartree: !ruby/object:Word
    word: hartree
    stem: hartre
    docFrequency: 2.0
    docPositions:
    - 728
  recalled: !ruby/object:Word
    word: recalled
    stem: recal
    docFrequency: 2.0
    docPositions:
    - 728
  essential: !ruby/object:Word
    word: essential
    stem: essenti
    docFrequency: 6.0
    docPositions:
    - 729
    - 761
    - 1086
    - 1139
    - 1147
  plans: !ruby/object:Word
    word: plans
    stem: plan
    docFrequency: 2.0
    docPositions:
    - 730
  times: !ruby/object:Word
    word: times
    stem: time
    docFrequency: 2.0
    docPositions:
    - 731
  t: !ruby/object:Word
    word: t
    stem: t
    docFrequency: 2.0
    docPositions:
    - 732
  america: !ruby/object:Word
    word: america
    stem: america
    docFrequency: 2.0
    docPositions:
    - 733
  certain: !ruby/object:Word
    word: certain
    stem: certain
    docFrequency: 5.0
    docPositions:
    - 733
    - 736
    - 737
    - 766
  respects: !ruby/object:Word
    word: respects
    stem: respect
    docFrequency: 2.0
    docPositions:
    - 734
  provision: !ruby/object:Word
    word: provision
    stem: provis
    docFrequency: 2.0
    docPositions:
    - 734
  storing: !ruby/object:Word
    word: storing
    stem: store
    docFrequency: 2.0
    docPositions:
    - 734
  row: !ruby/object:Word
    word: row
    stem: row
    docFrequency: 2.0
    docPositions:
    - 735
  forty: !ruby/object:Word
    word: forty
    stem: forti
    docFrequency: 2.0
    docPositions:
    - 736
  places: !ruby/object:Word
    word: places
    stem: place
    docFrequency: 2.0
    docPositions:
    - 736
  orders: !ruby/object:Word
    word: orders
    stem: order
    docFrequency: 6.0
    docPositions:
    - 738
    - 745
    - 757
    - 762
    - 1812
  type: !ruby/object:Word
    word: type
    stem: type
    docFrequency: 2.0
    docPositions:
    - 738
  consists: !ruby/object:Word
    word: consists
    stem: consist
    docFrequency: 2.0
    docPositions:
    - 738
  signifies: !ruby/object:Word
    word: signifies
    stem: signifi
    docFrequency: 2.0
    docPositions:
    - 739
  add: !ruby/object:Word
    word: add
    stem: add
    docFrequency: 2.0
    docPositions:
    - 740
  control: !ruby/object:Word
    word: control
    stem: control
    docFrequency: 8.0
    docPositions:
    - 740
    - 743
    - 766
    - 874
    - 935
    - 1078
    - 1879
  shifts: !ruby/object:Word
    word: shifts
    stem: shift
    docFrequency: 3.0
    docPositions:
    - 740
    - 743
  word: !ruby/object:Word
    word: word
    stem: word
    docFrequency: 4.0
    docPositions:
    - 740
    - 869
    - 1874
  adder: !ruby/object:Word
    word: adder
    stem: adder
    docFrequency: 3.0
    docPositions:
    - 741
    - 742
  inputs: !ruby/object:Word
    word: inputs
    stem: input
    docFrequency: 2.0
    docPositions:
    - 741
  pass: !ruby/object:Word
    word: pass
    stem: pass
    docFrequency: 2.0
    docPositions:
    - 742
  added: !ruby/object:Word
    word: added
    stem: ad
    docFrequency: 3.0
    docPositions:
    - 742
    - 787
  sum: !ruby/object:Word
    word: sum
    stem: sum
    docFrequency: 2.0
    docPositions:
    - 743
  passed: !ruby/object:Word
    word: passed
    stem: pass
    docFrequency: 2.0
    docPositions:
    - 743
  next: !ruby/object:Word
    word: next
    stem: next
    docFrequency: 5.0
    docPositions:
    - 743
    - 767
    - 1011
    - 1935
  real: !ruby/object:Word
    word: real
    stem: real
    docFrequency: 2.0
    docPositions:
    - 744
  separate: !ruby/object:Word
    word: separate
    stem: separ
    docFrequency: 2.0
    docPositions:
    - 745
  bringing: !ruby/object:Word
    word: bringing
    stem: bring
    docFrequency: 2.0
    docPositions:
    - 745
  content: !ruby/object:Word
    word: content
    stem: content
    docFrequency: 2.0
    docPositions:
    - 745
  accumulator: !ruby/object:Word
    word: accumulator
    stem: accumul
    docFrequency: 8.0
    docPositions:
    - 746
    - 787
    - 788
    - 789
    - 793
    - 798
  third: !ruby/object:Word
    word: third
    stem: third
    docFrequency: 2.0
    docPositions:
    - 747
  sending: !ruby/object:Word
    word: sending
    stem: send
    docFrequency: 2.0
    docPositions:
    - 747
  exchange: !ruby/object:Word
    word: exchange
    stem: exchang
    docFrequency: 3.0
    docPositions:
    - 749
    - 763
  arrangement: !ruby/object:Word
    word: arrangement
    stem: arrang
    docFrequency: 2.0
    docPositions:
    - 749
  necessary: !ruby/object:Word
    word: necessary
    stem: necessari
    docFrequency: 2.0
    docPositions:
    - 749
  adders: !ruby/object:Word
    word: adders
    stem: adder
    docFrequency: 3.0
    docPositions:
    - 749
    - 762
  subtractors: !ruby/object:Word
    word: subtractors
    stem: subtractor
    docFrequency: 2.0
    docPositions:
    - 750
  sense: !ruby/object:Word
    word: sense
    stem: sens
    docFrequency: 3.0
    docPositions:
    - 750
    - 915
  already: !ruby/object:Word
    word: already
    stem: alreadi
    docFrequency: 6.0
    docPositions:
    - 750
    - 779
    - 787
    - 998
    - 1924
  pp: !ruby/object:Word
    word: pp
    stem: pp
    docFrequency: 6.0
    docPositions:
    - 751
    - 770
    - 885
    - 1156
    - 1890
  source: !ruby/object:Word
    word: source
    stem: sourc
    docFrequency: 5.0
    docPositions:
    - 755
    - 756
    - 1810
    - 1811
  destination: !ruby/object:Word
    word: destination
    stem: destin
    docFrequency: 3.0
    docPositions:
    - 756
    - 1811
  describe: !ruby/object:Word
    word: describe
    stem: describ
    docFrequency: 3.0
    docPositions:
    - 756
    - 1811
  shall: !ruby/object:Word
    word: shall
    stem: shall
    docFrequency: 3.0
    docPositions:
    - 757
    - 1812
  summed: !ruby/object:Word
    word: summed
    stem: sum
    docFrequency: 3.0
    docPositions:
    - 758
    - 1813
  highly: !ruby/object:Word
    word: highly
    stem: highli
    docFrequency: 2.0
    docPositions:
    - 760
  simplified: !ruby/object:Word
    word: simplified
    stem: simplifi
    docFrequency: 2.0
    docPositions:
    - 760
  emerges: !ruby/object:Word
    word: emerges
    stem: emerg
    docFrequency: 2.0
    docPositions:
    - 760
  internal: !ruby/object:Word
    word: internal
    stem: intern
    docFrequency: 4.0
    docPositions:
    - 761
    - 966
    - 1915
  secondly: !ruby/object:Word
    word: secondly
    stem: secondli
    docFrequency: 2.0
    docPositions:
    - 762
  multipliers: !ruby/object:Word
    word: multipliers
    stem: multipli
    docFrequency: 2.0
    docPositions:
    - 763
  thirdly: !ruby/object:Word
    word: thirdly
    stem: thirdli
    docFrequency: 2.0
    docPositions:
    - 763
  selecting: !ruby/object:Word
    word: selecting
    stem: select
    docFrequency: 2.0
    docPositions:
    - 764
  connecting: !ruby/object:Word
    word: connecting
    stem: connect
    docFrequency: 2.0
    docPositions:
    - 764
  arithmetic: !ruby/object:Word
    word: arithmetic
    stem: arithmet
    docFrequency: 2.0
    docPositions:
    - 764
  organ: !ruby/object:Word
    word: organ
    stem: organ
    docFrequency: 2.0
    docPositions:
    - 764
  answers: !ruby/object:Word
    word: answers
    stem: answer
    docFrequency: 2.0
    docPositions:
    - 765
  prescribed: !ruby/object:Word
    word: prescribed
    stem: prescrib
    docFrequency: 2.0
    docPositions:
    - 765
  stage: !ruby/object:Word
    word: stage
    stem: stage
    docFrequency: 2.0
    docPositions:
    - 766
  chosen: !ruby/object:Word
    word: chosen
    stem: chosen
    docFrequency: 2.0
    docPositions:
    - 766
  condition: !ruby/object:Word
    word: condition
    stem: condit
    docFrequency: 2.0
    docPositions:
    - 766
  satisfied: !ruby/object:Word
    word: satisfied
    stem: satisfi
    docFrequency: 2.0
    docPositions:
    - 767
  otherwise: !ruby/object:Word
    word: otherwise
    stem: otherwis
    docFrequency: 2.0
    docPositions:
    - 767
  passing: !ruby/object:Word
    word: passing
    stem: pass
    docFrequency: 2.0
    docPositions:
    - 767
  normal: !ruby/object:Word
    word: normal
    stem: normal
    docFrequency: 2.0
    docPositions:
    - 767
  sequence: !ruby/object:Word
    word: sequence
    stem: sequenc
    docFrequency: 4.0
    docPositions:
    - 768
    - 976
    - 978
  besides: !ruby/object:Word
    word: besides
    stem: besid
    docFrequency: 2.0
    docPositions:
    - 768
  ways: !ruby/object:Word
    word: ways
    stem: wai
    docFrequency: 4.0
    docPositions:
    - 768
    - 874
    - 1879
  outset: !ruby/object:Word
    word: outset
    stem: outset
    docFrequency: 2.0
    docPositions:
    - 769
  extracting: !ruby/object:Word
    word: extracting
    stem: extract
    docFrequency: 2.0
    docPositions:
    - 769
  final: !ruby/object:Word
    word: final
    stem: final
    docFrequency: 4.0
    docPositions:
    - 769
    - 1042
    - 1960
  answer: !ruby/object:Word
    word: answer
    stem: answer
    docFrequency: 2.0
    docPositions:
    - 769
  useable: !ruby/object:Word
    word: useable
    stem: useabl
    docFrequency: 2.0
    docPositions:
    - 769
  written: !ruby/object:Word
    word: written
    stem: written
    docFrequency: 7.0
    docPositions:
    - 774
    - 830
    - 840
    - 1815
    - 1841
    - 1851
  told: !ruby/object:Word
    word: told
    stem: told
    docFrequency: 3.0
    docPositions:
    - 775
    - 1816
  middle: !ruby/object:Word
    word: middle
    stem: middl
    docFrequency: 2.0
    docPositions:
    - 777
  arose: !ruby/object:Word
    word: arose
    stem: aros
    docFrequency: 2.0
    docPositions:
    - 778
  talk: !ruby/object:Word
    word: talk
    stem: talk
    docFrequency: 2.0
    docPositions:
    - 778
  developing: !ruby/object:Word
    word: developing
    stem: develop
    docFrequency: 2.0
    docPositions:
    - 780
  acquired: !ruby/object:Word
    word: acquired
    stem: acquir
    docFrequency: 2.0
    docPositions:
    - 780
  grant: !ruby/object:Word
    word: grant
    stem: grant
    docFrequency: 2.0
    docPositions:
    - 780
  understood: !ruby/object:Word
    word: understood
    stem: understood
    docFrequency: 3.0
    docPositions:
    - 781
    - 782
  fruitful: !ruby/object:Word
    word: fruitful
    stem: fruit
    docFrequency: 2.0
    docPositions:
    - 782
  collaboration: !ruby/object:Word
    word: collaboration
    stem: collabor
    docFrequency: 2.0
    docPositions:
    - 782
  remember: !ruby/object:Word
    word: remember
    stem: rememb
    docFrequency: 4.0
    docPositions:
    - 783
    - 811
    - 1826
  lectures: !ruby/object:Word
    word: lectures
    stem: lectur
    docFrequency: 10.0
    docPositions:
    - 783
    - 805
    - 807
    - 820
    - 891
    - 1820
    - 1822
    - 1833
    - 1896
  outlined: !ruby/object:Word
    word: outlined
    stem: outlin
    docFrequency: 2.0
    docPositions:
    - 784
  organisation: !ruby/object:Word
    word: organisation
    stem: organis
    docFrequency: 3.0
    docPositions:
    - 784
    - 795
  terms: !ruby/object:Word
    word: terms
    stem: term
    docFrequency: 5.0
    docPositions:
    - 784
    - 786
    - 1014
    - 1938
  identified: !ruby/object:Word
    word: identified
    stem: identifi
    docFrequency: 2.0
    docPositions:
    - 785
  house: !ruby/object:Word
    word: house
    stem: hous
    docFrequency: 2.0
    docPositions:
    - 785
  placed: !ruby/object:Word
    word: placed
    stem: place
    docFrequency: 2.0
    docPositions:
    - 785
  transferred: !ruby/object:Word
    word: transferred
    stem: transfer
    docFrequency: 3.0
    docPositions:
    - 786
    - 788
  entering: !ruby/object:Word
    word: entering
    stem: enter
    docFrequency: 2.0
    docPositions:
    - 787
  assigned: !ruby/object:Word
    word: assigned
    stem: assign
    docFrequency: 2.0
    docPositions:
    - 789
  cleared: !ruby/object:Word
    word: cleared
    stem: clear
    docFrequency: 2.0
    docPositions:
    - 789
  transfers: !ruby/object:Word
    word: transfers
    stem: transfer
    docFrequency: 2.0
    docPositions:
    - 790
  effected: !ruby/object:Word
    word: effected
    stem: effect
    docFrequency: 2.0
    docPositions:
    - 790
  list: !ruby/object:Word
    word: list
    stem: list
    docFrequency: 4.0
    docPositions:
    - 791
    - 792
    - 794
  obeyed: !ruby/object:Word
    word: obeyed
    stem: obei
    docFrequency: 2.0
    docPositions:
    - 791
  sequentially: !ruby/object:Word
    word: sequentially
    stem: sequenti
    docFrequency: 2.0
    docPositions:
    - 791
  ordered: !ruby/object:Word
    word: ordered
    stem: order
    docFrequency: 2.0
    docPositions:
    - 791
  interrupted: !ruby/object:Word
    word: interrupted
    stem: interrupt
    docFrequency: 2.0
    docPositions:
    - 792
  test: !ruby/object:Word
    word: test
    stem: test
    docFrequency: 6.0
    docPositions:
    - 792
    - 1051
    - 1052
    - 1969
    - 1970
  instruction: !ruby/object:Word
    word: instruction
    stem: instruct
    docFrequency: 8.0
    docPositions:
    - 792
    - 1000
    - 1009
    - 1010
    - 1926
    - 1933
    - 1934
  examined: !ruby/object:Word
    word: examined
    stem: examin
    docFrequency: 2.0
    docPositions:
    - 793
  sign: !ruby/object:Word
    word: sign
    stem: sign
    docFrequency: 2.0
    docPositions:
    - 793
  thereafter: !ruby/object:Word
    word: thereafter
    stem: thereaft
    docFrequency: 2.0
    docPositions:
    - 793
  started: !ruby/object:Word
    word: started
    stem: start
    docFrequency: 4.0
    docPositions:
    - 794
    - 843
    - 1854
  our: !ruby/object:Word
    word: our
    stem: our
    docFrequency: 4.0
    docPositions:
    - 796
    - 1264
  simplest: !ruby/object:Word
    word: simplest
    stem: simplest
    docFrequency: 2.0
    docPositions:
    - 796
  embodiment: !ruby/object:Word
    word: embodiment
    stem: embodi
    docFrequency: 2.0
    docPositions:
    - 796
  sole: !ruby/object:Word
    word: sole
    stem: sole
    docFrequency: 2.0
    docPositions:
    - 797
  subtracting: !ruby/object:Word
    word: subtracting
    stem: subtract
    docFrequency: 2.0
    docPositions:
    - 797
  randell: !ruby/object:Word
    word: randell
    stem: randel
    docFrequency: 6.0
    docPositions:
    - 798
    - 799
    - 925
    - 1124
    - 1175
  input: !ruby/object:Word
    word: input
    stem: input
    docFrequency: 3.0
    docPositions:
    - 803
    - 1818
  developments: !ruby/object:Word
    word: developments
    stem: develop
    docFrequency: 3.0
    docPositions:
    - 803
    - 1818
  hinted: !ruby/object:Word
    word: hinted
    stem: hint
    docFrequency: 3.0
    docPositions:
    - 803
    - 1818
  above: !ruby/object:Word
    word: above
    stem: abov
    docFrequency: 3.0
    docPositions:
    - 804
    - 1819
  december: !ruby/object:Word
    word: december
    stem: decemb
    docFrequency: 3.0
    docPositions:
    - 806
    - 1821
  attended: !ruby/object:Word
    word: attended
    stem: attend
    docFrequency: 5.0
    docPositions:
    - 807
    - 892
    - 1822
    - 1897
  representatives: !ruby/object:Word
    word: representatives
    stem: repres
    docFrequency: 3.0
    docPositions:
    - 807
    - 1822
  organisations: !ruby/object:Word
    word: organisations
    stem: organis
    docFrequency: 3.0
    docPositions:
    - 808
    - 1823
  planning: !ruby/object:Word
    word: planning
    stem: plan
    docFrequency: 3.0
    docPositions:
    - 808
    - 1823
  build: !ruby/object:Word
    word: build
    stem: build
    docFrequency: 9.0
    docPositions:
    - 808
    - 890
    - 972
    - 1050
    - 1090
    - 1823
    - 1895
    - 1968
  audience: !ruby/object:Word
    word: audience
    stem: audienc
    docFrequency: 3.0
    docPositions:
    - 809
    - 1824
  bowker: !ruby/object:Word
    word: bowker
    stem: bowker
    docFrequency: 6.0
    docPositions:
    - 809
    - 815
    - 1082
    - 1824
    - 1830
  giordano: !ruby/object:Word
    word: giordano
    stem: giordano
    docFrequency: 6.0
    docPositions:
    - 809
    - 815
    - 1082
    - 1824
    - 1830
  asked: !ruby/object:Word
    word: asked
    stem: ask
    docFrequency: 3.0
    docPositions:
    - 810
    - 1825
  obtained: !ruby/object:Word
    word: obtained
    stem: obtain
    docFrequency: 3.0
    docPositions:
    - 810
    - 1825
  napper: !ruby/object:Word
    word: napper
    stem: napper
    docFrequency: 3.0
    docPositions:
    - 811
    - 1826
  somehow: !ruby/object:Word
    word: somehow
    stem: somehow
    docFrequency: 3.0
    docPositions:
    - 813
    - 1828
  ve: !ruby/object:Word
    word: ve
    stem: ve
    docFrequency: 3.0
    docPositions:
    - 815
    - 1830
  whatever: !ruby/object:Word
    word: whatever
    stem: whatev
    docFrequency: 3.0
    docPositions:
    - 820
    - 1833
  informing: !ruby/object:Word
    word: informing
    stem: inform
    docFrequency: 3.0
    docPositions:
    - 820
    - 1833
  credit: !ruby/object:Word
    word: credit
    stem: credit
    docFrequency: 3.0
    docPositions:
    - 821
    - 1834
  contemporary: !ruby/object:Word
    word: contemporary
    stem: contemporari
    docFrequency: 3.0
    docPositions:
    - 823
    - 1836
  document: !ruby/object:Word
    word: document
    stem: document
    docFrequency: 4.0
    docPositions:
    - 823
    - 1337
    - 1836
  influence: !ruby/object:Word
    word: influence
    stem: influenc
    docFrequency: 6.0
    docPositions:
    - 824
    - 825
    - 957
    - 1837
    - 1838
  crucial: !ruby/object:Word
    word: crucial
    stem: crucial
    docFrequency: 3.0
    docPositions:
    - 825
    - 1838
  ai: !ruby/object:Word
    word: ai
    stem: ai
    docFrequency: 3.0
    docPositions:
    - 830
    - 1841
  draughts: !ruby/object:Word
    word: draughts
    stem: draught
    docFrequency: 5.0
    docPositions:
    - 830
    - 838
    - 1841
    - 1849
  checkers: !ruby/object:Word
    word: checkers
    stem: checker
    docFrequency: 5.0
    docPositions:
    - 830
    - 839
    - 1841
    - 1850
  player: !ruby/object:Word
    word: player
    stem: player
    docFrequency: 5.0
    docPositions:
    - 830
    - 844
    - 1841
    - 1855
  strachey: !ruby/object:Word
    word: strachey
    stem: strachei
    docFrequency: 11.0
    docPositions:
    - 831
    - 832
    - 835
    - 837
    - 838
    - 1842
    - 1843
    - 1846
    - 1848
    - 1849
  teacher: !ruby/object:Word
    word: teacher
    stem: teacher
    docFrequency: 3.0
    docPositions:
    - 832
    - 1843
  harrow: !ruby/object:Word
    word: harrow
    stem: harrow
    docFrequency: 3.0
    docPositions:
    - 832
    - 1843
  amateur: !ruby/object:Word
    word: amateur
    stem: amateur
    docFrequency: 3.0
    docPositions:
    - 833
    - 1844
  programmer: !ruby/object:Word
    word: programmer
    stem: programm
    docFrequency: 5.0
    docPositions:
    - 833
    - 1008
    - 1844
    - 1932
  utilising: !ruby/object:Word
    word: utilising
    stem: utilis
    docFrequency: 3.0
    docPositions:
    - 834
    - 1845
  programmers: !ruby/object:Word
    word: programmers
    stem: programm
    docFrequency: 3.0
    docPositions:
    - 835
    - 1846
  handbook: !ruby/object:Word
    word: handbook
    stem: handbook
    docFrequency: 3.0
    docPositions:
    - 835
    - 1846
  oxford: !ruby/object:Word
    word: oxford
    stem: oxford
    docFrequency: 6.0
    docPositions:
    - 836
    - 1086
    - 1091
    - 1094
    - 1847
  summer: !ruby/object:Word
    word: summer
    stem: summer
    docFrequency: 3.0
    docPositions:
    - 836
    - 1847
  reported: !ruby/object:Word
    word: reported
    stem: report
    docFrequency: 3.0
    docPositions:
    - 837
    - 1848
  play: !ruby/object:Word
    word: play
    stem: plai
    docFrequency: 5.0
    docPositions:
    - 837
    - 846
    - 1848
    - 1857
  game: !ruby/object:Word
    word: game
    stem: game
    docFrequency: 5.0
    docPositions:
    - 838
    - 846
    - 1849
    - 1857
  reasonable: !ruby/object:Word
    word: reasonable
    stem: reason
    docFrequency: 3.0
    docPositions:
    - 838
    - 1849
  formed: !ruby/object:Word
    word: formed
    stem: form
    docFrequency: 3.0
    docPositions:
    - 838
    - 1849
  basis: !ruby/object:Word
    word: basis
    stem: basi
    docFrequency: 3.0
    docPositions:
    - 839
    - 1850
  arthur: !ruby/object:Word
    word: arthur
    stem: arthur
    docFrequency: 4.0
    docPositions:
    - 839
    - 953
    - 1850
  samuel: !ruby/object:Word
    word: samuel
    stem: samuel
    docFrequency: 4.0
    docPositions:
    - 839
    - 943
    - 1850
  well: !ruby/object:Word
    word: well
    stem: well
    docFrequency: 5.0
    docPositions:
    - 839
    - 912
    - 916
    - 1850
  playing: !ruby/object:Word
    word: playing
    stem: plai
    docFrequency: 3.0
    docPositions:
    - 840
    - 1851
  dietrich: !ruby/object:Word
    word: dietrich
    stem: dietrich
    docFrequency: 3.0
    docPositions:
    - 841
    - 1852
  prinz: !ruby/object:Word
    word: prinz
    stem: prinz
    docFrequency: 5.0
    docPositions:
    - 841
    - 845
    - 1852
    - 1856
  simple: !ruby/object:Word
    word: simple
    stem: simpl
    docFrequency: 3.0
    docPositions:
    - 842
    - 1853
  mate: !ruby/object:Word
    word: mate
    stem: mate
    docFrequency: 3.0
    docPositions:
    - 842
    - 1853
  variety: !ruby/object:Word
    word: variety
    stem: varieti
    docFrequency: 3.0
    docPositions:
    - 842
    - 1853
  examine: !ruby/object:Word
    word: examine
    stem: examin
    docFrequency: 4.0
    docPositions:
    - 843
    - 1265
    - 1854
  every: !ruby/object:Word
    word: every
    stem: everi
    docFrequency: 5.0
    docPositions:
    - 843
    - 1012
    - 1854
    - 1936
  move: !ruby/object:Word
    word: move
    stem: move
    docFrequency: 3.0
    docPositions:
    - 843
    - 1854
  turochamp: !ruby/object:Word
    word: turochamp
    stem: turochamp
    docFrequency: 5.0
    docPositions:
    - 844
    - 846
    - 1855
    - 1857
  unlike: !ruby/object:Word
    word: unlike
    stem: unlik
    docFrequency: 3.0
    docPositions:
    - 845
    - 1856
  simulated: !ruby/object:Word
    word: simulated
    stem: simul
    docFrequency: 3.0
    docPositions:
    - 846
    - 1857
  operated: !ruby/object:Word
    word: operated
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 846
    - 1857
  exhaustive: !ruby/object:Word
    word: exhaustive
    stem: exhaust
    docFrequency: 3.0
    docPositions:
    - 847
    - 1858
  guidance: !ruby/object:Word
    word: guidance
    stem: guidanc
    docFrequency: 3.0
    docPositions:
    - 847
    - 1858
  moore: !ruby/object:Word
    word: moore
    stem: moor
    docFrequency: 11.0
    docPositions:
    - 854
    - 871
    - 890
    - 891
    - 969
    - 1861
    - 1876
    - 1895
    - 1896
    - 1918
  pennsylvania: !ruby/object:Word
    word: pennsylvania
    stem: pennsylvania
    docFrequency: 3.0
    docPositions:
    - 855
    - 1862
  ordnance: !ruby/object:Word
    word: ordnance
    stem: ordnanc
    docFrequency: 3.0
    docPositions:
    - 855
    - 1862
  j: !ruby/object:Word
    word: j
    stem: j
    docFrequency: 12.0
    docPositions:
    - 856
    - 1086
    - 1089
    - 1093
    - 1097
    - 1132
    - 1149
    - 1153
    - 1167
    - 1171
    - 1863
  presper: !ruby/object:Word
    word: presper
    stem: presper
    docFrequency: 3.0
    docPositions:
    - 856
    - 1863
  eckert: !ruby/object:Word
    word: eckert
    stem: eckert
    docFrequency: 12.0
    docPositions:
    - 856
    - 880
    - 935
    - 949
    - 969
    - 1033
    - 1155
    - 1863
    - 1885
    - 1918
    - 1953
  mauchly: !ruby/object:Word
    word: mauchly
    stem: mauchli
    docFrequency: 6.0
    docPositions:
    - 856
    - 935
    - 949
    - 1155
    - 1863
  somewhat: !ruby/object:Word
    word: somewhat
    stem: somewhat
    docFrequency: 3.0
    docPositions:
    - 857
    - 1864
  larger: !ruby/object:Word
    word: larger
    stem: larger
    docFrequency: 3.0
    docPositions:
    - 858
    - 1865
  flexible: !ruby/object:Word
    word: flexible
    stem: flexibl
    docFrequency: 3.0
    docPositions:
    - 858
    - 1865
  primary: !ruby/object:Word
    word: primary
    stem: primari
    docFrequency: 3.0
    docPositions:
    - 859
    - 1866
  aiming: !ruby/object:Word
    word: aiming
    stem: aim
    docFrequency: 3.0
    docPositions:
    - 860
    - 1867
  artillery: !ruby/object:Word
    word: artillery
    stem: artilleri
    docFrequency: 3.0
    docPositions:
    - 860
    - 1867
  reconfiguring: !ruby/object:Word
    word: reconfiguring
    stem: reconfigur
    docFrequency: 3.0
    docPositions:
    - 861
    - 1868
  unknown: !ruby/object:Word
    word: unknown
    stem: unknown
    docFrequency: 3.0
    docPositions:
    - 864
    - 1871
  become: !ruby/object:Word
    word: become
    stem: becom
    docFrequency: 3.0
    docPositions:
    - 868
    - 1873
  intrigued: !ruby/object:Word
    word: intrigued
    stem: intrigu
    docFrequency: 3.0
    docPositions:
    - 869
    - 1874
  goldstine: !ruby/object:Word
    word: goldstine
    stem: goldstin
    docFrequency: 5.0
    docPositions:
    - 869
    - 953
    - 1112
    - 1874
  importance: !ruby/object:Word
    word: importance
    stem: import
    docFrequency: 7.0
    docPositions:
    - 872
    - 909
    - 912
    - 922
    - 1877
    - 1910
  allowing: !ruby/object:Word
    word: allowing
    stem: allow
    docFrequency: 3.0
    docPositions:
    - 873
    - 1878
  modify: !ruby/object:Word
    word: modify
    stem: modifi
    docFrequency: 3.0
    docPositions:
    - 873
    - 1878
  useful: !ruby/object:Word
    word: useful
    stem: us
    docFrequency: 3.0
    docPositions:
    - 874
    - 1879
  loops: !ruby/object:Word
    word: loops
    stem: loop
    docFrequency: 3.0
    docPositions:
    - 875
    - 1880
  computable: !ruby/object:Word
    word: computable
    stem: comput
    docFrequency: 4.0
    docPositions:
    - 875
    - 1136
    - 1880
  entscheidungsproblem: !ruby/object:Word
    word: entscheidungsproblem
    stem: entscheidungsproblem
    docFrequency: 4.0
    docPositions:
    - 876
    - 1137
    - 1881
  institute: !ruby/object:Word
    word: institute
    stem: institut
    docFrequency: 9.0
    docPositions:
    - 878
    - 940
    - 945
    - 952
    - 1047
    - 1209
    - 1883
    - 1965
  study: !ruby/object:Word
    word: study
    stem: studi
    docFrequency: 6.0
    docPositions:
    - 878
    - 952
    - 1322
    - 1883
    - 1991
  julian: !ruby/object:Word
    word: julian
    stem: julian
    docFrequency: 4.0
    docPositions:
    - 879
    - 953
    - 1884
  bigelow: !ruby/object:Word
    word: bigelow
    stem: bigelow
    docFrequency: 4.0
    docPositions:
    - 879
    - 953
    - 1884
  realised: !ruby/object:Word
    word: realised
    stem: realis
    docFrequency: 5.0
    docPositions:
    - 880
    - 1043
    - 1885
    - 1961
  joining: !ruby/object:Word
    word: joining
    stem: join
    docFrequency: 3.0
    docPositions:
    - 881
    - 1886
  advantage: !ruby/object:Word
    word: advantage
    stem: advantag
    docFrequency: 7.0
    docPositions:
    - 881
    - 996
    - 1014
    - 1886
    - 1922
    - 1938
  processed: !ruby/object:Word
    word: processed
    stem: process
    docFrequency: 3.0
    docPositions:
    - 882
    - 1887
  place: !ruby/object:Word
    word: place
    stem: place
    docFrequency: 3.0
    docPositions:
    - 883
    - 1888
  suitably: !ruby/object:Word
    word: suitably
    stem: suitabl
    docFrequency: 3.0
    docPositions:
    - 883
    - 1888
  hold: !ruby/object:Word
    word: hold
    stem: hold
    docFrequency: 3.0
    docPositions:
    - 884
    - 1889
  itself: !ruby/object:Word
    word: itself
    stem: itself
    docFrequency: 3.0
    docPositions:
    - 884
    - 1889
  documented: !ruby/object:Word
    word: documented
    stem: document
    docFrequency: 3.0
    docPositions:
    - 885
    - 1890
  still: !ruby/object:Word
    word: still
    stem: still
    docFrequency: 3.0
    docPositions:
    - 886
    - 1891
  produced: !ruby/object:Word
    word: produced
    stem: produc
    docFrequency: 4.0
    docPositions:
    - 886
    - 959
    - 1891
  mentioned: !ruby/object:Word
    word: mentioned
    stem: mention
    docFrequency: 5.0
    docPositions:
    - 887
    - 1021
    - 1892
    - 1943
  previously: !ruby/object:Word
    word: previously
    stem: previous
    docFrequency: 5.0
    docPositions:
    - 887
    - 1021
    - 1892
    - 1943
  neuman: !ruby/object:Word
    word: neuman
    stem: neuman
    docFrequency: 3.0
    docPositions:
    - 889
    - 1894
  six: !ruby/object:Word
    word: six
    stem: six
    docFrequency: 3.0
    docPositions:
    - 889
    - 1894
  originators: !ruby/object:Word
    word: originators
    stem: origin
    docFrequency: 4.0
    docPositions:
    - 890
    - 1168
    - 1895
  widely: !ruby/object:Word
    word: widely
    stem: wide
    docFrequency: 5.0
    docPositions:
    - 892
    - 898
    - 1897
    - 1901
  contributed: !ruby/object:Word
    word: contributed
    stem: contribut
    docFrequency: 3.0
    docPositions:
    - 892
    - 1897
  greatly: !ruby/object:Word
    word: greatly
    stem: greatli
    docFrequency: 3.0
    docPositions:
    - 892
    - 1897
  dissemination: !ruby/object:Word
    word: dissemination
    stem: dissemin
    docFrequency: 3.0
    docPositions:
    - 892
    - 1897
  prestigious: !ruby/object:Word
    word: prestigious
    stem: prestigi
    docFrequency: 3.0
    docPositions:
    - 897
    - 1900
  figure: !ruby/object:Word
    word: figure
    stem: figur
    docFrequency: 3.0
    docPositions:
    - 897
    - 1900
  writings: !ruby/object:Word
    word: writings
    stem: write
    docFrequency: 3.0
    docPositions:
    - 899
    - 1902
  profile: !ruby/object:Word
    word: profile
    stem: profil
    docFrequency: 3.0
    docPositions:
    - 899
    - 1902
  customary: !ruby/object:Word
    word: customary
    stem: customari
    docFrequency: 3.0
    docPositions:
    - 900
    - 1903
  inappropriate: !ruby/object:Word
    word: inappropriate
    stem: inappropri
    docFrequency: 3.0
    docPositions:
    - 900
    - 1903
  refer: !ruby/object:Word
    word: refer
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 901
    - 1904
  los: !ruby/object:Word
    word: los
    stem: lo
    docFrequency: 5.0
    docPositions:
    - 906
    - 946
    - 1179
    - 1907
  alamos: !ruby/object:Word
    word: alamos
    stem: alamo
    docFrequency: 3.0
    docPositions:
    - 906
    - 1907
  physicist: !ruby/object:Word
    word: physicist
    stem: physicist
    docFrequency: 3.0
    docPositions:
    - 906
    - 1907
  frankel: !ruby/object:Word
    word: frankel
    stem: frankel
    docFrequency: 3.0
    docPositions:
    - 906
    - 1907
  responsible: !ruby/object:Word
    word: responsible
    stem: respons
    docFrequency: 3.0
    docPositions:
    - 906
    - 1907
  mechanising: !ruby/object:Word
    word: mechanising
    stem: mechanis
    docFrequency: 3.0
    docPositions:
    - 907
    - 1908
  atomic: !ruby/object:Word
    word: atomic
    stem: atom
    docFrequency: 3.0
    docPositions:
    - 908
    - 1909
  bomb: !ruby/object:Word
    word: bomb
    stem: bomb
    docFrequency: 3.0
    docPositions:
    - 908
    - 1909
  view: !ruby/object:Word
    word: view
    stem: view
    docFrequency: 5.0
    docPositions:
    - 909
    - 1306
    - 1910
    - 1991
  know: !ruby/object:Word
    word: know
    stem: know
    docFrequency: 2.0
    docPositions:
    - 911
  aware: !ruby/object:Word
    word: aware
    stem: awar
    docFrequency: 2.0
    docPositions:
    - 912
  urging: !ruby/object:Word
    word: urging
    stem: urg
    docFrequency: 2.0
    docPositions:
    - 913
  studied: !ruby/object:Word
    word: studied
    stem: studi
    docFrequency: 2.0
    docPositions:
    - 914
  acclaimed: !ruby/object:Word
    word: acclaimed
    stem: acclaim
    docFrequency: 2.0
    docPositions:
    - 914
  sure: !ruby/object:Word
    word: sure
    stem: sure
    docFrequency: 3.0
    docPositions:
    - 915
    - 918
  mistake: !ruby/object:Word
    word: mistake
    stem: mistak
    docFrequency: 2.0
    docPositions:
    - 916
  midwife: !ruby/object:Word
    word: midwife
    stem: midwif
    docFrequency: 2.0
    docPositions:
    - 917
  emphasized: !ruby/object:Word
    word: emphasized
    stem: emphas
    docFrequency: 2.0
    docPositions:
    - 917
  conception: !ruby/object:Word
    word: conception
    stem: concept
    docFrequency: 2.0
    docPositions:
    - 918
  anticipated: !ruby/object:Word
    word: anticipated
    stem: anticip
    docFrequency: 2.0
    docPositions:
    - 919
  substantial: !ruby/object:Word
    word: substantial
    stem: substanti
    docFrequency: 2.0
    docPositions:
    - 920
  reduction: !ruby/object:Word
    word: reduction
    stem: reduct
    docFrequency: 2.0
    docPositions:
    - 921
  practice: !ruby/object:Word
    word: practice
    stem: practic
    docFrequency: 2.0
    docPositions:
    - 921
  concepts: !ruby/object:Word
    word: concepts
    stem: concept
    docFrequency: 2.0
    docPositions:
    - 921
  regard: !ruby/object:Word
    word: regard
    stem: regard
    docFrequency: 2.0
    docPositions:
    - 921
  introduction: !ruby/object:Word
    word: introduction
    stem: introduct
    docFrequency: 2.0
    docPositions:
    - 922
  explication: !ruby/object:Word
    word: explication
    stem: explic
    docFrequency: 2.0
    docPositions:
    - 922
  activities: !ruby/object:Word
    word: activities
    stem: activ
    docFrequency: 3.0
    docPositions:
    - 924
    - 925
  edsac: !ruby/object:Word
    word: edsac
    stem: edsac
    docFrequency: 6.0
    docPositions:
    - 933
    - 995
    - 1016
    - 1921
    - 1940
  maurice: !ruby/object:Word
    word: maurice
    stem: mauric
    docFrequency: 2.0
    docPositions:
    - 933
  wilkes: !ruby/object:Word
    word: wilkes
    stem: wilk
    docFrequency: 4.0
    docPositions:
    - 933
    - 1016
    - 1940
  binac: !ruby/object:Word
    word: binac
    stem: binac
    docFrequency: 5.0
    docPositions:
    - 935
    - 936
    - 995
    - 1921
  co: !ruby/object:Word
    word: co
    stem: co
    docFrequency: 2.0
    docPositions:
    - 936
  philadelphia: !ruby/object:Word
    word: philadelphia
    stem: philadelphia
    docFrequency: 3.0
    docPositions:
    - 936
    - 949
  opinions: !ruby/object:Word
    word: opinions
    stem: opinion
    docFrequency: 2.0
    docPositions:
    - 936
  differ: !ruby/object:Word
    word: differ
    stem: differ
    docFrequency: 2.0
    docPositions:
    - 936
  whether: !ruby/object:Word
    word: whether
    stem: whether
    docFrequency: 2.0
    docPositions:
    - 936
  ever: !ruby/object:Word
    word: ever
    stem: ever
    docFrequency: 2.0
    docPositions:
    - 936
  whirlwind: !ruby/object:Word
    word: whirlwind
    stem: whirlwind
    docFrequency: 6.0
    docPositions:
    - 939
    - 1026
    - 1051
    - 1948
    - 1969
  massachusetts: !ruby/object:Word
    word: massachusetts
    stem: massachusett
    docFrequency: 4.0
    docPositions:
    - 939
    - 1047
    - 1965
  jay: !ruby/object:Word
    word: jay
    stem: jai
    docFrequency: 4.0
    docPositions:
    - 940
    - 1043
    - 1961
  forrester: !ruby/object:Word
    word: forrester
    stem: forrest
    docFrequency: 6.0
    docPositions:
    - 940
    - 1043
    - 1048
    - 1961
    - 1966
  seac: !ruby/object:Word
    word: seac
    stem: seac
    docFrequency: 4.0
    docPositions:
    - 942
    - 995
    - 1921
  bureau: !ruby/object:Word
    word: bureau
    stem: bureau
    docFrequency: 3.0
    docPositions:
    - 942
    - 945
  eastern: !ruby/object:Word
    word: eastern
    stem: eastern
    docFrequency: 2.0
    docPositions:
    - 942
  division: !ruby/object:Word
    word: division
    stem: divis
    docFrequency: 3.0
    docPositions:
    - 942
    - 945
  washington: !ruby/object:Word
    word: washington
    stem: washington
    docFrequency: 2.0
    docPositions:
    - 942
  alexander: !ruby/object:Word
    word: alexander
    stem: alexand
    docFrequency: 2.0
    docPositions:
    - 943
  ralph: !ruby/object:Word
    word: ralph
    stem: ralph
    docFrequency: 2.0
    docPositions:
    - 943
  slutz: !ruby/object:Word
    word: slutz
    stem: slutz
    docFrequency: 2.0
    docPositions:
    - 943
  swac: !ruby/object:Word
    word: swac
    stem: swac
    docFrequency: 4.0
    docPositions:
    - 945
    - 1025
    - 1947
  western: !ruby/object:Word
    word: western
    stem: western
    docFrequency: 2.0
    docPositions:
    - 945
  analysis: !ruby/object:Word
    word: analysis
    stem: analysi
    docFrequency: 2.0
    docPositions:
    - 946
  california: !ruby/object:Word
    word: california
    stem: california
    docFrequency: 2.0
    docPositions:
    - 946
  angeles: !ruby/object:Word
    word: angeles
    stem: angel
    docFrequency: 2.0
    docPositions:
    - 946
  univac: !ruby/object:Word
    word: univac
    stem: univac
    docFrequency: 3.0
    docPositions:
    - 949
    - 1154
  corporation: !ruby/object:Word
    word: corporation
    stem: corpor
    docFrequency: 4.0
    docPositions:
    - 949
    - 1050
    - 1968
  ias: !ruby/object:Word
    word: ias
    stem: ia
    docFrequency: 6.0
    docPositions:
    - 952
    - 955
    - 956
    - 1025
    - 1947
  burks: !ruby/object:Word
    word: burks
    stem: burk
    docFrequency: 2.0
    docPositions:
    - 953
  herman: !ruby/object:Word
    word: herman
    stem: herman
    docFrequency: 2.0
    docPositions:
    - 953
  publishing: !ruby/object:Word
    word: publishing
    stem: publish
    docFrequency: 2.0
    docPositions:
    - 954
  strong: !ruby/object:Word
    word: strong
    stem: strong
    docFrequency: 2.0
    docPositions:
    - 957
  ibm: !ruby/object:Word
    word: ibm
    stem: ibm
    docFrequency: 7.0
    docPositions:
    - 957
    - 959
    - 1025
    - 1061
    - 1947
    - 1977
  international: !ruby/object:Word
    word: international
    stem: intern
    docFrequency: 2.0
    docPositions:
    - 959
  mass: !ruby/object:Word
    word: mass
    stem: mass
    docFrequency: 3.0
    docPositions:
    - 959
    - 1155
  proposals: !ruby/object:Word
    word: proposals
    stem: propos
    docFrequency: 3.0
    docPositions:
    - 965
    - 1914
  advocated: !ruby/object:Word
    word: advocated
    stem: advoc
    docFrequency: 3.0
    docPositions:
    - 965
    - 1914
  mercury: !ruby/object:Word
    word: mercury
    stem: mercuri
    docFrequency: 7.0
    docPositions:
    - 965
    - 973
    - 975
    - 995
    - 1914
    - 1921
  filled: !ruby/object:Word
    word: filled
    stem: fill
    docFrequency: 3.0
    docPositions:
    - 965
    - 1914
  delay: !ruby/object:Word
    word: delay
    stem: delai
    docFrequency: 19.0
    docPositions:
    - 966
    - 967
    - 972
    - 975
    - 995
    - 997
    - 999
    - 1001
    - 1007
    - 1915
    - 1916
    - 1921
    - 1923
    - 1925
    - 1927
    - 1931
  echo: !ruby/object:Word
    word: echo
    stem: echo
    docFrequency: 3.0
    docPositions:
    - 968
    - 1917
  cancellation: !ruby/object:Word
    word: cancellation
    stem: cancel
    docFrequency: 3.0
    docPositions:
    - 968
    - 1917
  originated: !ruby/object:Word
    word: originated
    stem: origin
    docFrequency: 3.0
    docPositions:
    - 969
    - 1918
  diameter: !ruby/object:Word
    word: diameter
    stem: diamet
    docFrequency: 2.0
    docPositions:
    - 973
  quartz: !ruby/object:Word
    word: quartz
    stem: quartz
    docFrequency: 2.0
    docPositions:
    - 974
  crystal: !ruby/object:Word
    word: crystal
    stem: crystal
    docFrequency: 5.0
    docPositions:
    - 974
    - 981
    - 983
    - 986
  velocity: !ruby/object:Word
    word: velocity
    stem: veloc
    docFrequency: 2.0
    docPositions:
    - 974
  sound: !ruby/object:Word
    word: sound
    stem: sound
    docFrequency: 2.0
    docPositions:
    - 974
  ms: !ruby/object:Word
    word: ms
    stem: ms
    docFrequency: 2.0
    docPositions:
    - 975
  considered: !ruby/object:Word
    word: considered
    stem: consid
    docFrequency: 2.0
    docPositions:
    - 976
  corresponding: !ruby/object:Word
    word: corresponding
    stem: correspond
    docFrequency: 2.0
    docPositions:
    - 978
  pulses: !ruby/object:Word
    word: pulses
    stem: puls
    docFrequency: 3.0
    docPositions:
    - 978
    - 980
  digit: !ruby/object:Word
    word: digit
    stem: digit
    docFrequency: 3.0
    docPositions:
    - 978
    - 980
  absence: !ruby/object:Word
    word: absence
    stem: absenc
    docFrequency: 2.0
    docPositions:
    - 979
  pulse: !ruby/object:Word
    word: pulse
    stem: puls
    docFrequency: 5.0
    docPositions:
    - 979
    - 985
    - 988
  appropriate: !ruby/object:Word
    word: appropriate
    stem: appropri
    docFrequency: 2.0
    docPositions:
    - 979
  presence: !ruby/object:Word
    word: presence
    stem: presenc
    docFrequency: 2.0
    docPositions:
    - 980
  impressed: !ruby/object:Word
    word: impressed
    stem: impress
    docFrequency: 2.0
    docPositions:
    - 980
  piezo: !ruby/object:Word
    word: piezo
    stem: piezo
    docFrequency: 2.0
    docPositions:
    - 981
  transmitted: !ruby/object:Word
    word: transmitted
    stem: transmit
    docFrequency: 2.0
    docPositions:
    - 981
  supersonic: !ruby/object:Word
    word: supersonic
    stem: superson
    docFrequency: 2.0
    docPositions:
    - 982
  waves: !ruby/object:Word
    word: waves
    stem: wave
    docFrequency: 2.0
    docPositions:
    - 982
  reconverted: !ruby/object:Word
    word: reconverted
    stem: reconvert
    docFrequency: 2.0
    docPositions:
    - 982
  varying: !ruby/object:Word
    word: varying
    stem: vari
    docFrequency: 2.0
    docPositions:
    - 982
  amplified: !ruby/object:Word
    word: amplified
    stem: amplifi
    docFrequency: 2.0
    docPositions:
    - 983
  volts: !ruby/object:Word
    word: volts
    stem: volt
    docFrequency: 2.0
    docPositions:
    - 984
  peak: !ruby/object:Word
    word: peak
    stem: peak
    docFrequency: 3.0
    docPositions:
    - 984
  gate: !ruby/object:Word
    word: gate
    stem: gate
    docFrequency: 2.0
    docPositions:
    - 985
  standard: !ruby/object:Word
    word: standard
    stem: standard
    docFrequency: 2.0
    docPositions:
    - 985
  generated: !ruby/object:Word
    word: generated
    stem: gener
    docFrequency: 2.0
    docPositions:
    - 985
  again: !ruby/object:Word
    word: again
    stem: again
    docFrequency: 2.0
    docPositions:
    - 986
  transmitting: !ruby/object:Word
    word: transmitting
    stem: transmit
    docFrequency: 2.0
    docPositions:
    - 986
  feed: !ruby/object:Word
    word: feed
    stem: feed
    docFrequency: 2.0
    docPositions:
    - 987
  altogether: !ruby/object:Word
    word: altogether
    stem: altogeth
    docFrequency: 2.0
    docPositions:
    - 987
  signal: !ruby/object:Word
    word: signal
    stem: signal
    docFrequency: 2.0
    docPositions:
    - 987
  gated: !ruby/object:Word
    word: gated
    stem: gate
    docFrequency: 2.0
    docPositions:
    - 988
  making: !ruby/object:Word
    word: making
    stem: make
    docFrequency: 2.0
    docPositions:
    - 989
  preclude: !ruby/object:Word
    word: preclude
    stem: preclud
    docFrequency: 2.0
    docPositions:
    - 990
  keeping: !ruby/object:Word
    word: keeping
    stem: keep
    docFrequency: 2.0
    docPositions:
    - 990
  chief: !ruby/object:Word
    word: chief
    stem: chief
    docFrequency: 3.0
    docPositions:
    - 996
    - 1922
  concern: !ruby/object:Word
    word: concern
    stem: concern
    docFrequency: 3.0
    docPositions:
    - 998
    - 1924
  disadvantages: !ruby/object:Word
    word: disadvantages
    stem: disadvantag
    docFrequency: 3.0
    docPositions:
    - 999
    - 1925
  access: !ruby/object:Word
    word: access
    stem: access
    docFrequency: 6.0
    docPositions:
    - 999
    - 1023
    - 1261
    - 1925
    - 1945
  impossible: !ruby/object:Word
    word: impossible
    stem: imposs
    docFrequency: 3.0
    docPositions:
    - 1000
    - 1926
  moreover: !ruby/object:Word
    word: moreover
    stem: moreov
    docFrequency: 3.0
    docPositions:
    - 1000
    - 1926
  taken: !ruby/object:Word
    word: taken
    stem: taken
    docFrequency: 3.0
    docPositions:
    - 1000
    - 1926
  emerge: !ruby/object:Word
    word: emerge
    stem: emerg
    docFrequency: 5.0
    docPositions:
    - 1001
    - 1009
    - 1927
    - 1933
  depends: !ruby/object:Word
    word: depends
    stem: depend
    docFrequency: 3.0
    docPositions:
    - 1001
    - 1927
  happens: !ruby/object:Word
    word: happens
    stem: happen
    docFrequency: 3.0
    docPositions:
    - 1001
    - 1927
  minimize: !ruby/object:Word
    word: minimize
    stem: minim
    docFrequency: 3.0
    docPositions:
    - 1006
    - 1930
  waiting: !ruby/object:Word
    word: waiting
    stem: wait
    docFrequency: 3.0
    docPositions:
    - 1006
    - 1930
  arranged: !ruby/object:Word
    word: arranged
    stem: arrang
    docFrequency: 3.0
    docPositions:
    - 1006
    - 1930
  consecutive: !ruby/object:Word
    word: consecutive
    stem: consecut
    docFrequency: 3.0
    docPositions:
    - 1007
    - 1931
  selected: !ruby/object:Word
    word: selected
    stem: select
    docFrequency: 4.0
    docPositions:
    - 1008
    - 1176
    - 1932
  exactly: !ruby/object:Word
    word: exactly
    stem: exactli
    docFrequency: 3.0
    docPositions:
    - 1009
    - 1933
  location: !ruby/object:Word
    word: location
    stem: locat
    docFrequency: 3.0
    docPositions:
    - 1011
    - 1935
  optimum: !ruby/object:Word
    word: optimum
    stem: optimum
    docFrequency: 7.0
    docPositions:
    - 1012
    - 1013
    - 1015
    - 1936
    - 1937
    - 1939
  coding: !ruby/object:Word
    word: coding
    stem: code
    docFrequency: 7.0
    docPositions:
    - 1012
    - 1013
    - 1015
    - 1936
    - 1937
    - 1939
  feature: !ruby/object:Word
    word: feature
    stem: featur
    docFrequency: 3.0
    docPositions:
    - 1012
    - 1936
  difficult: !ruby/object:Word
    word: difficult
    stem: difficult
    docFrequency: 3.0
    docPositions:
    - 1013
    - 1937
  untidy: !ruby/object:Word
    word: untidy
    stem: untidi
    docFrequency: 3.0
    docPositions:
    - 1013
    - 1937
  floating: !ruby/object:Word
    word: floating
    stem: float
    docFrequency: 3.0
    docPositions:
    - 1015
    - 1939
  milliseconds: !ruby/object:Word
    word: milliseconds
    stem: millisecond
    docFrequency: 5.0
    docPositions:
    - 1016
    - 1017
    - 1940
    - 1941
  single: !ruby/object:Word
    word: single
    stem: singl
    docFrequency: 3.0
    docPositions:
    - 1017
    - 1941
  fixed: !ruby/object:Word
    word: fixed
    stem: fix
    docFrequency: 3.0
    docPositions:
    - 1017
    - 1941
  electrostatic: !ruby/object:Word
    word: electrostatic
    stem: electrostat
    docFrequency: 5.0
    docPositions:
    - 1021
    - 1035
    - 1943
    - 1955
  dimensional: !ruby/object:Word
    word: dimensional
    stem: dimension
    docFrequency: 5.0
    docPositions:
    - 1022
    - 1046
    - 1944
    - 1964
  rectangular: !ruby/object:Word
    word: rectangular
    stem: rectangular
    docFrequency: 3.0
    docPositions:
    - 1022
    - 1944
  array: !ruby/object:Word
    word: array
    stem: arrai
    docFrequency: 5.0
    docPositions:
    - 1022
    - 1046
    - 1944
    - 1964
  memories: !ruby/object:Word
    word: memories
    stem: memori
    docFrequency: 5.0
    docPositions:
    - 1024
    - 1031
    - 1946
    - 1951
  replacement: !ruby/object:Word
    word: replacement
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 1026
    - 1948
  magnetic: !ruby/object:Word
    word: magnetic
    stem: magnet
    docFrequency: 7.0
    docPositions:
    - 1027
    - 1043
    - 1044
    - 1949
    - 1961
    - 1962
  core: !ruby/object:Word
    word: core
    stem: core
    docFrequency: 19.0
    docPositions:
    - 1027
    - 1043
    - 1044
    - 1048
    - 1049
    - 1051
    - 1060
    - 1063
    - 1949
    - 1961
    - 1962
    - 1966
    - 1967
    - 1969
    - 1976
    - 1979
  drum: !ruby/object:Word
    word: drum
    stem: drum
    docFrequency: 9.0
    docPositions:
    - 1031
    - 1033
    - 1036
    - 1037
    - 1951
    - 1953
    - 1956
    - 1957
  magnetically: !ruby/object:Word
    word: magnetically
    stem: magnet
    docFrequency: 3.0
    docPositions:
    - 1031
    - 1951
  surface: !ruby/object:Word
    word: surface
    stem: surfac
    docFrequency: 3.0
    docPositions:
    - 1031
    - 1951
  cylinder: !ruby/object:Word
    word: cylinder
    stem: cylind
    docFrequency: 3.0
    docPositions:
    - 1032
    - 1952
  sides: !ruby/object:Word
    word: sides
    stem: side
    docFrequency: 3.0
    docPositions:
    - 1032
    - 1952
  atlantic: !ruby/object:Word
    word: atlantic
    stem: atlant
    docFrequency: 3.0
    docPositions:
    - 1032
    - 1952
  initial: !ruby/object:Word
    word: initial
    stem: initi
    docFrequency: 3.0
    docPositions:
    - 1033
    - 1953
  provided: !ruby/object:Word
    word: provided
    stem: provid
    docFrequency: 3.0
    docPositions:
    - 1033
    - 1953
  reasonably: !ruby/object:Word
    word: reasonably
    stem: reason
    docFrequency: 3.0
    docPositions:
    - 1034
    - 1954
  supplement: !ruby/object:Word
    word: supplement
    stem: supplement
    docFrequency: 3.0
    docPositions:
    - 1035
    - 1955
  andrew: !ruby/object:Word
    word: andrew
    stem: andrew
    docFrequency: 3.0
    docPositions:
    - 1038
    - 1958
  booth: !ruby/object:Word
    word: booth
    stem: booth
    docFrequency: 3.0
    docPositions:
    - 1038
    - 1958
  birkbeck: !ruby/object:Word
    word: birkbeck
    stem: birkbeck
    docFrequency: 3.0
    docPositions:
    - 1038
    - 1958
  event: !ruby/object:Word
    word: event
    stem: event
    docFrequency: 3.0
    docPositions:
    - 1042
    - 1960
  hysteresis: !ruby/object:Word
    word: hysteresis
    stem: hysteresi
    docFrequency: 3.0
    docPositions:
    - 1044
    - 1962
  normally: !ruby/object:Word
    word: normally
    stem: normal
    docFrequency: 3.0
    docPositions:
    - 1044
    - 1962
  transformers: !ruby/object:Word
    word: transformers
    stem: transform
    docFrequency: 3.0
    docPositions:
    - 1045
    - 1963
  lent: !ruby/object:Word
    word: lent
    stem: lent
    docFrequency: 3.0
    docPositions:
    - 1045
    - 1963
  implementation: !ruby/object:Word
    word: implementation
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 1045
    - 1963
  solid: !ruby/object:Word
    word: solid
    stem: solid
    docFrequency: 3.0
    docPositions:
    - 1046
    - 1964
  randomly: !ruby/object:Word
    word: randomly
    stem: randomli
    docFrequency: 3.0
    docPositions:
    - 1046
    - 1964
  accessible: !ruby/object:Word
    word: accessible
    stem: access
    docFrequency: 3.0
    docPositions:
    - 1046
    - 1964
  points: !ruby/object:Word
    word: points
    stem: point
    docFrequency: 3.0
    docPositions:
    - 1046
    - 1964
  empirically: !ruby/object:Word
    word: empirically
    stem: empir
    docFrequency: 3.0
    docPositions:
    - 1048
    - 1966
  metallic: !ruby/object:Word
    word: metallic
    stem: metal
    docFrequency: 3.0
    docPositions:
    - 1048
    - 1966
  ferrite: !ruby/object:Word
    word: ferrite
    stem: ferrit
    docFrequency: 7.0
    docPositions:
    - 1049
    - 1051
    - 1060
    - 1967
    - 1969
    - 1976
  undertook: !ruby/object:Word
    word: undertook
    stem: undertook
    docFrequency: 3.0
    docPositions:
    - 1050
    - 1968
  vehicle: !ruby/object:Word
    word: vehicle
    stem: vehicl
    docFrequency: 3.0
    docPositions:
    - 1051
    - 1969
  simulations: !ruby/object:Word
    word: simulations
    stem: simul
    docFrequency: 3.0
    docPositions:
    - 1053
    - 1971
  neural: !ruby/object:Word
    word: neural
    stem: neural
    docFrequency: 3.0
    docPositions:
    - 1053
    - 1971
  networks: !ruby/object:Word
    word: networks
    stem: network
    docFrequency: 3.0
    docPositions:
    - 1053
    - 1971
  belmont: !ruby/object:Word
    word: belmont
    stem: belmont
    docFrequency: 3.0
    docPositions:
    - 1053
    - 1971
  farley: !ruby/object:Word
    word: farley
    stem: farlei
    docFrequency: 3.0
    docPositions:
    - 1053
    - 1971
  wesley: !ruby/object:Word
    word: wesley
    stem: weslei
    docFrequency: 3.0
    docPositions:
    - 1054
    - 1972
  clark: !ruby/object:Word
    word: clark
    stem: clark
    docFrequency: 3.0
    docPositions:
    - 1054
    - 1972
  lincoln: !ruby/object:Word
    word: lincoln
    stem: lincoln
    docFrequency: 3.0
    docPositions:
    - 1054
    - 1972
  proudfoot: !ruby/object:Word
    word: proudfoot
    stem: proudfoot
    docFrequency: 4.0
    docPositions:
    - 1054
    - 1097
    - 1972
  absolute: !ruby/object:Word
    word: absolute
    stem: absolut
    docFrequency: 3.0
    docPositions:
    - 1059
    - 1975
  reliability: !ruby/object:Word
    word: reliability
    stem: reliabl
    docFrequency: 3.0
    docPositions:
    - 1059
    - 1975
  cheapness: !ruby/object:Word
    word: cheapness
    stem: cheap
    docFrequency: 3.0
    docPositions:
    - 1059
    - 1975
  permanent: !ruby/object:Word
    word: permanent
    stem: perman
    docFrequency: 3.0
    docPositions:
    - 1060
    - 1976
  apparent: !ruby/object:Word
    word: apparent
    stem: appar
    docFrequency: 3.0
    docPositions:
    - 1060
    - 1976
  forms: !ruby/object:Word
    word: forms
    stem: form
    docFrequency: 3.0
    docPositions:
    - 1061
    - 1977
  announced: !ruby/object:Word
    word: announced
    stem: announc
    docFrequency: 3.0
    docPositions:
    - 1062
    - 1978
  october: !ruby/object:Word
    word: october
    stem: octob
    docFrequency: 4.0
    docPositions:
    - 1062
    - 1109
    - 1978
  brought: !ruby/object:Word
    word: brought
    stem: brought
    docFrequency: 3.0
    docPositions:
    - 1062
    - 1978
  cited: !ruby/object:Word
    word: cited
    stem: cite
    docFrequency: 2.0
    docPositions:
    - 1071
  ed: !ruby/object:Word
    word: ed
    stem: ed
    docFrequency: 5.0
    docPositions:
    - 1073
    - 1086
    - 1089
    - 1175
  campbell: !ruby/object:Word
    word: campbell
    stem: campbel
    docFrequency: 2.0
    docPositions:
    - 1073
  kelly: !ruby/object:Word
    word: kelly
    stem: kelli
    docFrequency: 2.0
    docPositions:
    - 1073
  passages: !ruby/object:Word
    word: passages
    stem: passag
    docFrequency: 2.0
    docPositions:
    - 1073
  philosopher: !ruby/object:Word
    word: philosopher
    stem: philosoph
    docFrequency: 2.0
    docPositions:
    - 1074
  brunswick: !ruby/object:Word
    word: brunswick
    stem: brunswick
    docFrequency: 2.0
    docPositions:
    - 1074
  rutgers: !ruby/object:Word
    word: rutgers
    stem: rutger
    docFrequency: 2.0
    docPositions:
    - 1074
  press: !ruby/object:Word
    word: press
    stem: press
    docFrequency: 10.0
    docPositions:
    - 1075
    - 1087
    - 1091
    - 1095
    - 1113
    - 1126
    - 1155
    - 1173
    - 1179
  contribution: !ruby/object:Word
    word: contribution
    stem: contribut
    docFrequency: 3.0
    docPositions:
    - 1077
    - 1262
  archive: !ruby/object:Word
    word: archive
    stem: archiv
    docFrequency: 3.0
    docPositions:
    - 1078
    - 1203
  typescript: !ruby/object:Word
    word: typescript
    stem: typescript
    docFrequency: 2.0
    docPositions:
    - 1080
  interviews: !ruby/object:Word
    word: interviews
    stem: interview
    docFrequency: 2.0
    docPositions:
    - 1080
  r: !ruby/object:Word
    word: r
    stem: r
    docFrequency: 10.0
    docPositions:
    - 1082
    - 1178
    - 1334
    - 1335
  annals: !ruby/object:Word
    word: annals
    stem: annal
    docFrequency: 3.0
    docPositions:
    - 1083
    - 1168
  b: !ruby/object:Word
    word: b
    stem: b
    docFrequency: 12.0
    docPositions:
    - 1086
    - 1089
    - 1093
    - 1097
    - 1124
    - 1125
    - 1128
    - 1167
    - 1175
    - 1249
    - 1989
  alan: !ruby/object:Word
    word: alan
    stem: alan
    docFrequency: 9.0
    docPositions:
    - 1089
    - 1097
    - 1124
    - 1143
    - 1150
    - 1205
    - 1232
    - 1983
  master: !ruby/object:Word
    word: master
    stem: master
    docFrequency: 2.0
    docPositions:
    - 1090
  codebreaker: !ruby/object:Word
    word: codebreaker
    stem: codebreak
    docFrequency: 2.0
    docPositions:
    - 1090
  struggle: !ruby/object:Word
    word: struggle
    stem: struggl
    docFrequency: 2.0
    docPositions:
    - 1090
  anticipation: !ruby/object:Word
    word: anticipation
    stem: anticip
    docFrequency: 2.0
    docPositions:
    - 1098
  connectionism: !ruby/object:Word
    word: connectionism
    stem: connection
    docFrequency: 2.0
    docPositions:
    - 1098
  synthese: !ruby/object:Word
    word: synthese
    stem: synthes
    docFrequency: 2.0
    docPositions:
    - 1098
  pioneers: !ruby/object:Word
    word: pioneers
    stem: pioneer
    docFrequency: 2.0
    docPositions:
    - 1102
  oral: !ruby/object:Word
    word: oral
    stem: oral
    docFrequency: 2.0
    docPositions:
    - 1102
  theory: !ruby/object:Word
    word: theory
    stem: theori
    docFrequency: 2.0
    docPositions:
    - 1105
  mcgraw: !ruby/object:Word
    word: mcgraw
    stem: mcgraw
    docFrequency: 2.0
    docPositions:
    - 1106
  movement: !ruby/object:Word
    word: movement
    stem: movement
    docFrequency: 2.0
    docPositions:
    - 1108
  gazette: !ruby/object:Word
    word: gazette
    stem: gazett
    docFrequency: 2.0
    docPositions:
    - 1109
  united: !ruby/object:Word
    word: united
    stem: unit
    docFrequency: 3.0
    docPositions:
    - 1109
    - 1116
  states: !ruby/object:Word
    word: states
    stem: state
    docFrequency: 3.0
    docPositions:
    - 1109
    - 1116
  patent: !ruby/object:Word
    word: patent
    stem: patent
    docFrequency: 2.0
    docPositions:
    - 1109
  pascal: !ruby/object:Word
    word: pascal
    stem: pascal
    docFrequency: 2.0
    docPositions:
    - 1112
  art: !ruby/object:Word
    word: art
    stem: art
    docFrequency: 2.0
    docPositions:
    - 1115
  proceedings: !ruby/object:Word
    word: proceedings
    stem: proceed
    docFrequency: 5.0
    docPositions:
    - 1120
    - 1133
    - 1137
    - 1163
  origins: !ruby/object:Word
    word: origins
    stem: origin
    docFrequency: 4.0
    docPositions:
    - 1124
    - 1167
    - 1175
  meltzer: !ruby/object:Word
    word: meltzer
    stem: meltzer
    docFrequency: 2.0
    docPositions:
    - 1125
  eds: !ruby/object:Word
    word: eds
    stem: ed
    docFrequency: 3.0
    docPositions:
    - 1125
    - 1171
  owl: !ruby/object:Word
    word: owl
    stem: owl
    docFrequency: 2.0
    docPositions:
    - 1128
  electric: !ruby/object:Word
    word: electric
    stem: electr
    docFrequency: 2.0
    docPositions:
    - 1128
  encyclopaedia: !ruby/object:Word
    word: encyclopaedia
    stem: encyclopaedia
    docFrequency: 2.0
    docPositions:
    - 1129
  kinematic: !ruby/object:Word
    word: kinematic
    stem: kinemat
    docFrequency: 2.0
    docPositions:
    - 1133
  stern: !ruby/object:Word
    word: stern
    stem: stern
    docFrequency: 2.0
    docPositions:
    - 1154
  appraisal: !ruby/object:Word
    word: appraisal
    stem: apprais
    docFrequency: 2.0
    docPositions:
    - 1154
  bedford: !ruby/object:Word
    word: bedford
    stem: bedford
    docFrequency: 2.0
    docPositions:
    - 1155
  counter: !ruby/object:Word
    word: counter
    stem: counter
    docFrequency: 2.0
    docPositions:
    - 1163
  metropolis: !ruby/object:Word
    word: metropolis
    stem: metropoli
    docFrequency: 2.0
    docPositions:
    - 1171
  howlett: !ruby/object:Word
    word: howlett
    stem: howlett
    docFrequency: 2.0
    docPositions:
    - 1171
  rota: !ruby/object:Word
    word: rota
    stem: rota
    docFrequency: 2.0
    docPositions:
    - 1171
  twentieth: !ruby/object:Word
    word: twentieth
    stem: twentieth
    docFrequency: 2.0
    docPositions:
    - 1172
  century: !ruby/object:Word
    word: century
    stem: centuri
    docFrequency: 2.0
    docPositions:
    - 1172
  papers: !ruby/object:Word
    word: papers
    stem: paper
    docFrequency: 2.0
    docPositions:
    - 1176
  springer: !ruby/object:Word
    word: springer
    stem: springer
    docFrequency: 2.0
    docPositions:
    - 1176
  verlag: !ruby/object:Word
    word: verlag
    stem: verlag
    docFrequency: 2.0
    docPositions:
    - 1176
  alamitos: !ruby/object:Word
    word: alamitos
    stem: alamito
    docFrequency: 2.0
    docPositions:
    - 1179
  ieee: !ruby/object:Word
    word: ieee
    stem: ieee
    docFrequency: 2.0
    docPositions:
    - 1179
  look: !ruby/object:Word
    word: look
    stem: look
    docFrequency: 2.0
    docPositions:
    - 1192
  indiana: !ruby/object:Word
    word: indiana
    stem: indiana
    docFrequency: 3.0
    docPositions:
    - 1192
    - 1262
  ontology: !ruby/object:Word
    word: ontology
    stem: ontolog
    docFrequency: 2.0
    docPositions:
    - 1192
  inpho: !ruby/object:Word
    word: inpho
    stem: inpho
    docFrequency: 2.0
    docPositions:
    - 1192
  enhanced: !ruby/object:Word
    word: enhanced
    stem: enhanc
    docFrequency: 2.0
    docPositions:
    - 1194
  philpapers: !ruby/object:Word
    word: philpapers
    stem: philpap
    docFrequency: 2.0
    docPositions:
    - 1194
  database: !ruby/object:Word
    word: database
    stem: databas
    docFrequency: 2.0
    docPositions:
    - 1194
  home: !ruby/object:Word
    word: home
    stem: home
    docFrequency: 3.0
    docPositions:
    - 1205
    - 1214
  page: !ruby/object:Word
    word: page
    stem: page
    docFrequency: 4.0
    docPositions:
    - 1205
    - 1214
    - 1265
  conservation: !ruby/object:Word
    word: conservation
    stem: conserv
    docFrequency: 2.0
    docPositions:
    - 1212
  uk: !ruby/object:Word
    word: uk
    stem: uk
    docFrequency: 2.0
    docPositions:
    - 1212
  csirac: !ruby/object:Word
    word: csirac
    stem: csirac
    docFrequency: 2.0
    docPositions:
    - 1214
  k: !ruby/object:Word
    word: k
    stem: k
    docFrequency: 2.0
    docPositions:
    - 1214
  csir: !ruby/object:Word
    word: csir
    stem: csir
    docFrequency: 2.0
    docPositions:
    - 1214
  logic: !ruby/object:Word
    word: logic
    stem: logic
    docFrequency: 2.0
    docPositions:
    - 1217
  penn: !ruby/object:Word
    word: penn
    stem: penn
    docFrequency: 2.0
    docPositions:
    - 1217
  computability: !ruby/object:Word
    word: computability
    stem: comput
    docFrequency: 3.0
    docPositions:
    - 1230
    - 1981
  complexity: !ruby/object:Word
    word: complexity
    stem: complex
    docFrequency: 3.0
    docPositions:
    - 1230
    - 1981
  recursive: !ruby/object:Word
    word: recursive
    stem: recurs
    docFrequency: 3.0
    docPositions:
    - 1231
    - 1982
  copyright: !ruby/object:Word
    word: copyright
    stem: copyright
    docFrequency: 5.0
    docPositions:
    - 1247
    - 1322
    - 1987
    - 1991
  canterbury: !ruby/object:Word
    word: canterbury
    stem: canterburi
    docFrequency: 3.0
    docPositions:
    - 1250
    - 1990
  ac: !ruby/object:Word
    word: ac
    stem: ac
    docFrequency: 3.0
    docPositions:
    - 1250
    - 1990
  nz: !ruby/object:Word
    word: nz
    stem: nz
    docFrequency: 3.0
    docPositions:
    - 1250
    - 1990
  open: !ruby/object:Word
    word: open
    stem: open
    docFrequency: 2.0
    docPositions:
    - 1261
  financial: !ruby/object:Word
    word: financial
    stem: financi
    docFrequency: 2.0
    docPositions:
    - 1262
  gratefully: !ruby/object:Word
    word: gratefully
    stem: gratefulli
    docFrequency: 2.0
    docPositions:
    - 1263
  acknowledge: !ruby/object:Word
    word: acknowledge
    stem: acknowledg
    docFrequency: 2.0
    docPositions:
    - 1263
  congratulate: !ruby/object:Word
    word: congratulate
    stem: congratul
    docFrequency: 2.0
    docPositions:
    - 1264
  endowment: !ruby/object:Word
    word: endowment
    stem: endow
    docFrequency: 2.0
    docPositions:
    - 1264
  humanities: !ruby/object:Word
    word: humanities
    stem: human
    docFrequency: 2.0
    docPositions:
    - 1264
  anniversary: !ruby/object:Word
    word: anniversary
    stem: anniversari
    docFrequency: 3.0
    docPositions:
    - 1264
    - 1265
  express: !ruby/object:Word
    word: express
    stem: express
    docFrequency: 2.0
    docPositions:
    - 1264
  indebtedness: !ruby/object:Word
    word: indebtedness
    stem: indebted
    docFrequency: 2.0
    docPositions:
    - 1264
  five: !ruby/object:Word
    word: five
    stem: five
    docFrequency: 2.0
    docPositions:
    - 1264
  generous: !ruby/object:Word
    word: generous
    stem: gener
    docFrequency: 2.0
    docPositions:
    - 1264
  grants: !ruby/object:Word
    word: grants
    stem: grant
    docFrequency: 2.0
    docPositions:
    - 1264
  awarded: !ruby/object:Word
    word: awarded
    stem: award
    docFrequency: 2.0
    docPositions:
    - 1264
  readers: !ruby/object:Word
    word: readers
    stem: reader
    docFrequency: 2.0
    docPositions:
    - 1265
  benefited: !ruby/object:Word
    word: benefited
    stem: benefit
    docFrequency: 2.0
    docPositions:
    - 1265
  encouraged: !ruby/object:Word
    word: encouraged
    stem: encourag
    docFrequency: 2.0
    docPositions:
    - 1265
  neh: !ruby/object:Word
    word: neh
    stem: neh
    docFrequency: 3.0
    docPositions:
    - 1265
  inspired: !ruby/object:Word
    word: inspired
    stem: inspir
    docFrequency: 2.0
    docPositions:
    - 1265
  send: !ruby/object:Word
    word: send
    stem: send
    docFrequency: 3.0
    docPositions:
    - 1265
    - 1340
  testimonial: !ruby/object:Word
    word: testimonial
    stem: testimoni
    docFrequency: 2.0
    docPositions:
    - 1265
  gov: !ruby/object:Word
    word: gov
    stem: gov
    docFrequency: 2.0
    docPositions:
    - 1265
  mirror: !ruby/object:Word
    word: mirror
    stem: mirror
    docFrequency: 2.0
    docPositions:
    - 1305
  sites: !ruby/object:Word
    word: sites
    stem: site
    docFrequency: 2.0
    docPositions:
    - 1305
  site: !ruby/object:Word
    word: site
    stem: site
    docFrequency: 4.0
    docPositions:
    - 1306
    - 1310
    - 1991
  server: !ruby/object:Word
    word: server
    stem: server
    docFrequency: 3.0
    docPositions:
    - 1306
    - 1991
  usa: !ruby/object:Word
    word: usa
    stem: usa
    docFrequency: 2.0
    docPositions:
    - 1310
  main: !ruby/object:Word
    word: main
    stem: main
    docFrequency: 2.0
    docPositions:
    - 1310
  csli: !ruby/object:Word
    word: csli
    stem: csli
    docFrequency: 4.0
    docPositions:
    - 1311
    - 1322
    - 1991
  australia: !ruby/object:Word
    word: australia
    stem: australia
    docFrequency: 2.0
    docPositions:
    - 1313
  setis: !ruby/object:Word
    word: setis
    stem: seti
    docFrequency: 2.0
    docPositions:
    - 1314
  sydney: !ruby/object:Word
    word: sydney
    stem: sydnei
    docFrequency: 2.0
    docPositions:
    - 1314
  netherlands: !ruby/object:Word
    word: netherlands
    stem: netherland
    docFrequency: 2.0
    docPositions:
    - 1315
  illc: !ruby/object:Word
    word: illc
    stem: illc
    docFrequency: 2.0
    docPositions:
    - 1316
  amsterdam: !ruby/object:Word
    word: amsterdam
    stem: amsterdam
    docFrequency: 2.0
    docPositions:
    - 1316
  metaphysics: !ruby/object:Word
    word: metaphysics
    stem: metaphys
    docFrequency: 3.0
    docPositions:
    - 1322
    - 1991
  lab: !ruby/object:Word
    word: lab
    stem: lab
    docFrequency: 3.0
    docPositions:
    - 1322
    - 1991
  center: !ruby/object:Word
    word: center
    stem: center
    docFrequency: 3.0
    docPositions:
    - 1322
    - 1991
  library: !ruby/object:Word
    word: library
    stem: librari
    docFrequency: 2.0
    docPositions:
    - 1323
  congress: !ruby/object:Word
    word: congress
    stem: congress
    docFrequency: 3.0
    docPositions:
    - 1323
    - 1991
  catalog: !ruby/object:Word
    word: catalog
    stem: catalog
    docFrequency: 3.0
    docPositions:
    - 1323
    - 1991
  issn: !ruby/object:Word
    word: issn
    stem: issn
    docFrequency: 3.0
    docPositions:
    - 1323
    - 1991
  dropdown: !ruby/object:Word
    word: dropdown
    stem: dropdown
    docFrequency: 3.0
    docPositions:
    - 1332
  toggle: !ruby/object:Word
    word: toggle
    stem: toggl
    docFrequency: 2.0
    docPositions:
    - 1332
  googleanalyticsobject: !ruby/object:Word
    word: googleanalyticsobject
    stem: googleanalyticsobject
    docFrequency: 2.0
    docPositions:
    - 1334
  q: !ruby/object:Word
    word: q
    stem: q
    docFrequency: 3.0
    docPositions:
    - 1335
  push: !ruby/object:Word
    word: push
    stem: push
    docFrequency: 2.0
    docPositions:
    - 1335
  arguments: !ruby/object:Word
    word: arguments
    stem: argument
    docFrequency: 2.0
    docPositions:
    - 1335
  l: !ruby/object:Word
    word: l
    stem: l
    docFrequency: 2.0
    docPositions:
    - 1335
  date: !ruby/object:Word
    word: date
    stem: date
    docFrequency: 2.0
    docPositions:
    - 1335
  createelement: !ruby/object:Word
    word: createelement
    stem: createel
    docFrequency: 2.0
    docPositions:
    - 1335
  getelementsbytagname: !ruby/object:Word
    word: getelementsbytagname
    stem: getelementsbytagnam
    docFrequency: 2.0
    docPositions:
    - 1336
  async: !ruby/object:Word
    word: async
    stem: async
    docFrequency: 2.0
    docPositions:
    - 1336
  parentnode: !ruby/object:Word
    word: parentnode
    stem: parentnod
    docFrequency: 2.0
    docPositions:
    - 1336
  insertbefore: !ruby/object:Word
    word: insertbefore
    stem: insertbefor
    docFrequency: 2.0
    docPositions:
    - 1336
  window: !ruby/object:Word
    word: window
    stem: window
    docFrequency: 2.0
    docPositions:
    - 1337
  script: !ruby/object:Word
    word: script
    stem: script
    docFrequency: 2.0
    docPositions:
    - 1337
  google: !ruby/object:Word
    word: google
    stem: googl
    docFrequency: 2.0
    docPositions:
    - 1337
  analytics: !ruby/object:Word
    word: analytics
    stem: analyt
    docFrequency: 3.0
    docPositions:
    - 1337
  ga: !ruby/object:Word
    word: ga
    stem: ga
    docFrequency: 4.0
    docPositions:
    - 1337
    - 1339
    - 1340
  create: !ruby/object:Word
    word: create
    stem: creat
    docFrequency: 2.0
    docPositions:
    - 1339
  ua: !ruby/object:Word
    word: ua
    stem: ua
    docFrequency: 2.0
    docPositions:
    - 1339
  edu: !ruby/object:Word
    word: edu
    stem: edu
    docFrequency: 2.0
    docPositions:
    - 1339
  pageview: !ruby/object:Word
    word: pageview
    stem: pageview
    docFrequency: 2.0
    docPositions:
    - 1340
  universitylibrary: !ruby/object:Word
    word: universitylibrary
    stem: universitylibrari
    docFrequency: 2.0
    docPositions:
    - 1991
lineCount: 1992
wordCount: 14386
rank: 0.2540983606557377
title: |2

  The Modern History of Computing (Stanford Encyclopedia of Philosophy)
links:
- http://plato.stanford.edu/cgi-bin/encyclopedia/random
- https://leibniz.stanford.edu/friends/preview/computing-history/
- http://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=computing-history
- http://plato.stanford.edu/cgi-bin/encyclopedia/archinfo.cgi?entry=computing-history
- https://leibniz.stanford.edu/friends/preview/computing-history/
- https://leibniz.stanford.edu/friends/
- https://inpho.cogs.indiana.edu/entity?sep=computing-history&redirect=True
- https://inpho.cogs.indiana.edu/
- http://philpapers.org/sep/computing-history/
- http://philpapers.org
- http://www.alanturing.net/
- http://www.turing.org.uk/turing/
- http://www.cbi.umn.edu/
- http://www.cs.man.ac.uk/CCS/
- http://www.cs.mu.OZ.AU/csirac/
- http://www.cis.upenn.edu/~lc/home.html
- http://www.phil.canterbury.ac.nz/people/copeland.shtml
- http://www.neh.gov/NEH50years
- http://plato.stanford.edu/cgi-bin/encyclopedia/random
- http://plato.stanford.edu/
- http://stanford.library.usyd.edu.au/
- http://seop.illc.uva.nl/
- http://www-csli.stanford.edu/
- http://mally.stanford.edu/
rawText: "\n\n\n  \n    \n      \n      Stanford Encyclopedia of Philosophy\n    \n
  \   \n      \n        \n          \n              Menu \n            \n               Browse\n
  \                 Table of Contents\n                    What's New\n                    Random
  Entry\n                    Chronological\n                    Archives\n                  \n
  \                About\n                  Editorial Information\n                    About
  the SEP\n                    Editorial Board\n                    How to Cite the
  SEP\n                    Special Characters\n                    Advanced Tools\n
  \                   Contact\n                  \n                 Support SEP\n
  \                 Support the SEP\n                    PDFs for SEP Friends\n                    Make
  a Donation\n                    SEPIA for Libraries\n                  \n              \n
  \         \n        \n      \n    \n    \n    \n    \n      \n        \n      \n
  \   \n     \n    \n  \n   \n\n\n\n\n\n\n\n  \n    \n      \n          Entry Navigation
  \n        \n          Entry Contents\n            Bibliography\n            Academic
  Tools\n            Friends PDF Preview \n            Author and Citation Info  \n
  \           Back to Top \n          \n      \n    \n  \n\n \n\n\n\n\n\n\n\n\n\n\nThe
  Modern History of ComputingFirst published Mon Dec 18, 2000; substantive revision
  Fri Jun 9, 2006\n\n\n\n\n\nHistorically, computers were human clerks who calculated
  in accordance\nwith effective methods. These human computers did the sorts of\ncalculation
  nowadays carried out by electronic computers, and many\nthousands of them were employed
  in commerce, government, and research\nestablishments. The term computing machine,
  used increasingly\nfrom the 1920s, refers to any machine that does the work of a
  human\ncomputer, i.e., any machine that calculates in accordance with\neffective
  methods. During the late 1940s and early 1950s, with the\nadvent of electronic computing
  machines, the phrase ‘computing\nmachine’ gradually gave way simply to ‘computer’,\ninitially
  usually with the prefix ‘electronic’ or\n‘digital’. This entry surveys the history
  of these\nmachines. \n\n\n\n\n\n\nBabbage\n\nAnalog Computers\n\nThe Universal Turing
  Machine\n\nElectromechanical versus Electronic Computation\n\nAtanasoff\n\nColossus\n\nTuring's
  Automatic Computing Engine\n\nThe Manchester Machine\n\nENIAC and EDVAC\n\nOther
  Notable Early Computers\n\nHigh-Speed Memory\n\nBibliography\n\nAcademic Tools\nOther
  Internet Resources\n\nRelated Entries\n\n\n\n\nBabbage\n\n\n\nCharles Babbage was
  Lucasian Professor of Mathematics at Cambridge\nUniversity from 1828 to 1839 (a
  post formerly held by Isaac Newton).\nBabbage's proposed Difference Engine was a
  special-purpose digital\ncomputing machine for the automatic production of mathematical
  tables\n(such as logarithm tables, tide tables, and astronomical tables). The\nDifference
  Engine consisted entirely of mechanical components —\nbrass gear wheels, rods, ratchets,
  pinions, etc. Numbers were\nrepresented in the decimal system by the positions of
  10-toothed metal\nwheels mounted in columns. Babbage exhibited a small working model
  in\n1822. He never completed the full-scale machine that he had designed\nbut did
  complete several fragments. The largest — one ninth of\nthe complete calculator
  — is on display in the London Science\nMuseum. Baabage used it to perform serious
  computational work,\ncalculating various mathematical tables. In 1990, Babbage's
  Difference\nEngine No. 2 was finally built from Babbage's designs and is also on\ndisplay
  at the London Science Museum. \n\n\n\nThe Swedes Georg and Edvard Scheutz (father
  and son) constructed a\nmodified version of Babbage's Difference Engine. Three were
  made, a\nprototype and two commercial models, one of these being sold to an\nobservatory
  in Albany, New York, and the other to the\nRegistrar-General's office in London,
  where it calculated and printed\nactuarial tables.\n\n\n\nBabbage's proposed Analytical
  Engine, considerably more ambitious\nthan the Difference Engine, was to have been
  a general-purpose\nmechanical digital computer. The Analytical Engine was to have
  had a\nmemory store and a central processing unit (or ‘mill’) and\nwould have been
  able to select from among alternative actions\nconsequent upon the outcome of its
  previous actions (a facility\nnowadays known as conditional branching). The behaviour
  of the\nAnalytical Engine would have been controlled by a program of\ninstructions
  contained on punched cards connected together with ribbons\n(an idea that Babbage
  had adopted from the Jacquard weaving loom).\nBabbage emphasised the generality
  of the Analytical Engine, saying\n‘the conditions which enable a finite machine
  to make\ncalculations of unlimited extent are fulfilled in the Analytical\nEngine’
  (Babbage [1994], p. 97).\n\n\n\nBabbage worked closely with Ada Lovelace, daughter
  of the poet\nByron, after whom the modern programming language ADA is named.\nLovelace
  foresaw the possibility of using the Analytical Engine for\nnon-numeric computation,
  suggesting that the Engine might even be\ncapable of composing elaborate pieces
  of music.\n\n\n\nA large model of the Analytical Engine was under construction at
  the\ntime of Babbage's death in 1871 but a full-scale version was never\nbuilt.
  Babbage's idea of a general-purpose calculating engine was never\nforgotten, especially
  at Cambridge, and was on occasion a lively topic\nof mealtime discussion at the
  war-time headquarters of the Government\nCode and Cypher School, Bletchley Park,
  Buckinghamshire, birthplace of\nthe electronic digital computer.\n\nAnalog computers\n\n\n\nThe
  earliest computing machines in wide use were not digital but\nanalog. In analog
  representation, properties of the representational\nmedium ape (or reflect or model)
  properties of the represented\nstate-of-affairs. (In obvious contrast, the strings
  of binary digits\nemployed in digital representation do not represent by means\nof
  possessing some physical property — such as length —\nwhose magnitude varies in
  proportion to the magnitude of the property\nthat is being represented.) Analog
  representations form a diverse\nclass. Some examples: the longer a line on a road
  map, the longer the\nroad that the line represents; the greater the number of clear
  plastic\nsquares in an architect's model, the greater the number of windows in\nthe
  building represented; the higher the pitch of an acoustic depth\nmeter, the shallower
  the water. In analog computers, numerical\nquantities are represented by, for example,
  the angle of rotation of a\nshaft or a difference in electrical potential. Thus
  the output voltage\nof the machine at a time might represent the momentary speed
  of the\nobject being modelled. \n\n\n\nAs the case of the architect's model makes
  plain, analog\nrepresentation may be discrete in nature (there is no such\nthing
  as a fractional number of windows). Among computer scientists,\nthe term ‘analog’
  is sometimes used narrowly, to indicate\nrepresentation of one continuously-valued
  quantity by another\n(e.g., speed by voltage). As Brian Cantwell Smith has remarked:\n\n‘Analog’
  should … be a predicate on a\nrepresentation whose structure corresponds to that
  of which it\nrepresents … That continuous representations should historically\nhave
  come to be called analog presumably betrays the recognition that,\nat the levels
  at which it matters to us, the world is more\nfoundationally continuous than it
  is discrete. (Smith [1991], p.\n271)\n\n\n\nJames Thomson, brother of Lord Kelvin,
  invented the mechanical\nwheel-and-disc integrator that became the foundation of
  analog\ncomputation (Thomson [1876]). The two brothers constructed a device for\ncomputing
  the integral of the product of two given functions, and\nKelvin described (although
  did not construct) general-purpose analog\nmachines for integrating linear differential
  equations of any order and\nfor solving simultaneous linear equations. Kelvin's
  most successful\nanalog computer was his tide predicting machine, which remained
  in use\nat the port of Liverpool until the 1960s. Mechanical analog devices\nbased
  on the wheel-and-disc integrator were in use during World War I\nfor gunnery calculations.
  Following the war, the design of the\nintegrator was considerably improved by Hannibal
  Ford (Ford [1919]). \n\n\n\nStanley Fifer reports that the first semi-automatic
  mechanical\nanalog computer was built in England by the Manchester firm of\nMetropolitan
  Vickers prior to 1930 (Fifer [1961], p. 29); however, I\nhave so far been unable
  to verify this claim. In 1931, Vannevar Bush,\nworking at MIT, built the differential
  analyser, the first large-scale\nautomatic general-purpose mechanical analog computer.
  Bush's design was\nbased on the wheel and disc integrator. Soon copies of his machine
  were\nin use around the world (including, at Cambridge and Manchester\nUniversities
  in England, differential analysers built out of kit-set\nMeccano, the once popular
  engineering toy).\n\n\n\nIt required a skilled mechanic equipped with a lead hammer
  to set up\nBush's mechanical differential analyser for each new job. Subsequently,\nBush
  and his colleagues replaced the wheel-and-disc integrators and\nother mechanical
  components by electromechanical, and finally by\nelectronic, devices.\n\n\n\nA differential
  analyser may be conceptualised as a collection of\n‘black boxes’ connected together
  in such a way as to allow\nconsiderable feedback. Each box performs a fundamental
  process, for\nexample addition, multiplication of a variable by a constant, and\nintegration.
  In setting up the machine for a given task, boxes are\nconnected together so that
  the desired set of fundamental processes is\nexecuted. In the case of electrical
  machines, this was done typically\nby plugging wires into sockets on a patch panel
  (computing machines\nwhose function is determined in this way are referred to as\n‘program-controlled’).\n\n\n\nSince
  all the boxes work in parallel, an electronic differential\nanalyser solves sets
  of equations very quickly. Against this has to be\nset the cost of massaging the
  problem to be solved into the form\ndemanded by the analog machine, and of setting
  up the hardware to\nperform the desired computation. A major drawback of analog
  computation\nis the higher cost, relative to digital machines, of an increase in\nprecision.
  During the 1960s and 1970s, there was considerable interest\nin ‘hybrid’ machines,
  where an analog section is controlled\nby and programmed via a digital section.
  However, such machines are now\na rarity.\n\nThe Universal Turing Machine\n\n\n\nIn
  1936, at Cambridge University, Turing invented the principle of the\nmodern computer.
  He described an abstract digital computing machine\nconsisting of a limitless memory
  and a scanner that moves back and\nforth through the memory, symbol by symbol, reading
  what it finds and\nwriting further symbols (Turing [1936]). The actions of the scanner
  are\ndictated by a program of instructions that is stored in the memory in\nthe
  form of symbols. This is Turing's stored-program concept, and\nimplicit in it is
  the possibility of the machine operating on and\nmodifying its own program. (In
  London in 1947, in the course of what\nwas, so far as is known, the earliest public
  lecture to mention\ncomputer intelligence, Turing said, ‘What we want is a machine\nthat
  can learn from experience’, adding that the\n‘possibility of letting the machine
  alter its own instructions\nprovides the mechanism for this’ (Turing [1947] p. 393).
  Turing's\ncomputing machine of 1936 is now known simply as the universal Turing\nmachine.
  Cambridge mathematician Max Newman remarked that right from\nthe start Turing was
  interested in the possibility of actually building\na computing machine of the sort
  that he had described (Newman in\ninterview with Christopher Evans in Evans [197?].
  \n\n\n\nFrom the start of the Second World War Turing was a leading\ncryptanalyst
  at the Government Code and Cypher School, Bletchley Park.\nHere he became familiar
  with Thomas Flowers' work involving large-scale\nhigh-speed electronic switching
  (described below). However, Turing\ncould not turn to the project of building an
  electronic stored-program\ncomputing machine until the cessation of hostilities
  in Europe in\n1945.\n\n\n\nDuring the wartime years Turing did give considerable
  thought to the\nquestion of machine intelligence. Colleagues at Bletchley Park recall\nnumerous
  off-duty discussions with him on the topic, and at one point\nTuring circulated
  a typewritten report (now lost) setting out some of\nhis ideas. One of these colleagues,
  Donald Michie (who later founded\nthe Department of Machine Intelligence and Perception
  at the University\nof Edinburgh), remembers Turing talking often about the possibility
  of\ncomputing machines (1) learning from experience and (2) solving\nproblems by
  means of searching through the space of possible solutions,\nguided by rule-of-thumb
  principles (Michie in interview with Copeland,\n1995). The modern term for the latter
  idea is ‘heuristic\nsearch’, a heuristic being any rule-of-thumb principle that
  cuts\ndown the amount of searching required in order to find a solution to a\nproblem.
  At Bletchley Park Turing illustrated his ideas on machine\nintelligence by reference
  to chess. Michie recalls Turing experimenting\nwith heuristics that later became
  common in chess programming (in\nparticular minimax and best-first).\n\n\n\nFurther
  information about Turing and the computer, including his\nwartime work on codebreaking
  and his thinking about artificial\nintelligence and artificial life, can be found
  in Copeland 2004.\n\nElectromechanical versus Electronic Computation\n\n\n\nWith
  some exceptions — including Babbage's purely mechanical\nengines, and the finger-powered
  National Accounting Machine - early\ndigital computing machines were electromechanical.
  That is to say,\ntheir basic components were small, electrically-driven, mechanical\nswitches
  called ‘relays’. These operate relatively slowly,\nwhereas the basic components
  of an electronic computer —\noriginally vacuum tubes (valves) — have no moving parts
  save\nelectrons and so operate extremely fast. Electromechanical digital\ncomputing
  machines were built before and during the second world war by\n(among others) Howard
  Aiken at Harvard University, George Stibitz at\nBell Telephone Laboratories, Turing
  at Princeton University and\nBletchley Park, and Konrad Zuse in Berlin. To Zuse
  belongs the honour\nof having built the first working general-purpose program-controlled\ndigital
  computer. This machine, later called the Z3, was functioning in\n1941. (A program-controlled
  computer, as opposed to a stored-program\ncomputer, is set up for a new task by
  re-routing wires, by means of\nplugs etc.) \n\n\n\nRelays were too slow and unreliable
  a medium for large-scale\ngeneral-purpose digital computation (although Aiken made
  a valiant\neffort). It was the development of high-speed digital techniques using\nvacuum
  tubes that made the modern computer possible.\n\n\n\nThe earliest extensive use
  of vacuum tubes for digital\ndata-processing appears to have been by the engineer
  Thomas Flowers,\nworking in London at the British Post Office Research Station at
  Dollis\nHill. Electronic equipment designed by Flowers in 1934, for controlling\nthe
  connections between telephone exchanges, went into operation in\n1939, and involved
  between three and four thousand vacuum tubes running\ncontinuously. In 1938–1939
  Flowers worked on an experimental\nelectronic digital data-processing system, involving
  a high-speed data\nstore. Flowers' aim, achieved after the war, was that electronic\nequipment
  should replace existing, less reliable, systems built from\nrelays and used in telephone
  exchanges. Flowers did not investigate the\nidea of using electronic equipment for
  numerical calculation, but has\nremarked that at the outbreak of war with Germany
  in 1939 he was\npossibly the only person in Britain who realized that vacuum tubes\ncould
  be used on a large scale for high-speed digital computation. (See\nCopeland 2006
  for m more information on Flowers' work.)\n\nAtanasoff\n\n\n\nThe earliest comparable
  use of vacuum tubes in the U.S. seems to have\nbeen by John Atanasoff at what was
  then Iowa State College (now\nUniversity). During the period 1937–1942 Atanasoff
  developed\ntechniques for using vacuum tubes to perform numerical calculations\ndigitally.
  In 1939, with the assistance of his student Clifford Berry,\nAtanasoff began building
  what is sometimes called the Atanasoff-Berry\nComputer, or ABC, a small-scale special-purpose
  electronic digital\nmachine for the solution of systems of linear algebraic equations.
  The\nmachine contained approximately 300 vacuum tubes. Although the\nelectronic
  part of the machine functioned successfully, the computer as\na whole never worked
  reliably, errors being introduced by the\nunsatisfactory binary card-reader. Work
  was discontinued in 1942 when\nAtanasoff left Iowa State. \n\nColossus\n\n\n\nThe
  first fully functioning electronic digital computer was Colossus,\nused by the Bletchley
  Park cryptanalysts from February 1944. \n\n\n\nFrom very early in the war the Government
  Code and Cypher School\n(GC&CS) was successfully deciphering German radio communications\nencoded
  by means of the Enigma system, and by early 1942 about 39,000\nintercepted messages
  were being decoded each month, thanks to\nelectromechanical machines known as ‘bombes’.
  These were\ndesigned by Turing and Gordon Welchman (building on earlier work by\nPolish
  cryptanalysts).\n\n\n\nDuring the second half of 1941, messages encoded by means
  of a\ntotally different method began to be intercepted. This new cipher\nmachine,
  code-named ‘Tunny’ by Bletchley Park, was broken\nin April 1942 and current traffic
  was read for the first time in July\nof that year. Based on binary teleprinter code,
  Tunny was used in\npreference to Morse-based Enigma for the encryption of high-level\nsignals,
  for example messages from Hitler and members of the German\nHigh Command.\n\n\n\nThe
  need to decipher this vital intelligence as rapidly as possible\nled Max Newman
  to propose in November 1942 (shortly after his\nrecruitment to GC&CS from Cambridge
  University) that key parts of\nthe decryption process be automated, by means of
  high-speed electronic\ncounting devices. The first machine designed and built to
  Newman's\nspecification, known as the Heath Robinson, was relay-based with\nelectronic
  circuits for counting. (The electronic counters were\ndesigned by C.E. Wynn-Williams,
  who had been using thyratron tubes in\ncounting circuits at the Cavendish Laboratory,
  Cambridge, since 1932\n[Wynn-Williams 1932].) Installed in June 1943, Heath Robinson
  was\nunreliable and slow, and its high-speed paper tapes were continually\nbreaking,
  but it proved the worth of Newman's idea. Flowers recommended\nthat an all-electronic
  machine be built instead, but he received no\nofficial encouragement from GC&CS.
  Working independently at the\nPost Office Research Station at Dollis Hill, Flowers
  quietly got on\nwith constructing the world's first large-scale programmable electronic\ndigital
  computer. Colossus I was delivered to Bletchley Park in January\n1943.\n\n\n\nBy
  the end of the war there were ten Colossi working round the clock\nat Bletchley
  Park. From a cryptanalytic viewpoint, a major difference\nbetween the prototype
  Colossus I and the later machines was the\naddition of the so-called Special Attachment,
  following a key discovery\nby cryptanalysts Donald Michie and Jack Good. This broadened
  the\nfunction of Colossus from ‘wheel setting’ — i.e.,\ndetermining the settings
  of the encoding wheels of the Tunny machine\nfor a particular message, given the
  ‘patterns’ of the\nwheels — to ‘wheel breaking’, i.e., determining the\nwheel patterns
  themselves. The wheel patterns were eventually changed\ndaily by the Germans on
  each of the numerous links between the German\nArmy High Command and Army Group
  commanders in the field. By 1945 there\nwere as many 30 links in total. About ten
  of these were broken and read\nregularly.\n\n\n\nColossus I contained approximately
  1600 vacuum tubes and each of the\nsubsequent machines approximately 2400 vacuum
  tubes. Like the smaller\nABC, Colossus lacked two important features of modern computers.
  First,\nit had no internally stored programs. To set it up for a new task, the\noperator
  had to alter the machine's physical wiring, using plugs and\nswitches. Second, Colossus
  was not a general-purpose machine, being\ndesigned for a specific cryptanalytic
  task involving counting and\nBoolean operations.\n\n\n\nF.H. Hinsley, official historian
  of GC&CS, has estimated that\nthe war in Europe was shortened by at least two years
  as a result of\nthe signals intelligence operation carried out at Bletchley Park,
  in\nwhich Colossus played a major role. Most of the Colossi were destroyed\nonce
  hostilities ceased. Some of the electronic panels ended up at\nNewman's Computing
  Machine Laboratory in Manchester (see below), all\ntrace of their original use having
  been removed. Two Colossi were\nretained by GC&CS (renamed GCHQ following the end
  of the war). The\nlast Colossus is believed to have stopped running in 1960.\n\n\n\nThose
  who knew of Colossus were prohibited by the Official Secrets\nAct from sharing their
  knowledge. Until the 1970s, few had any idea\nthat electronic computation had been
  used successfully during the\nsecond world war. In 1970 and 1975, respectively,
  Good and Michie\npublished notes giving the barest outlines of Colossus. By 1983,\nFlowers
  had received clearance from the British Government to publish a\npartial account
  of the hardware of Colossus I. Details of the later\nmachines and of the Special
  Attachment, the uses to which the Colossi\nwere put, and the cryptanalytic algorithms
  that they ran, have only\nrecently been declassified. (For the full account of Colossus
  and the\nattack on Tunny see Copeland 2006.)\n\n\n\nTo those acquainted with the
  universal Turing machine of 1936, and\nthe associated stored-program concept, Flowers'
  racks of digital\nelectronic equipment were proof of the feasibility of using large\nnumbers
  of vacuum tubes to implement a high-speed general-purpose\nstored-program computer.
  The war over, Newman lost no time in\nestablishing the Royal Society Computing Machine
  Laboratory at\nManchester University for precisely that purpose. A few months after\nhis
  arrival at Manchester, Newman wrote as follows to the Princeton\nmathematician John
  von Neumann (February 1946):\n\nI am … hoping to embark on a computing machine\nsection
  here, having got very interested in electronic devices of this\nkind during the
  last two or three years. By about eighteen months ago I\nhad decided to try my hand
  at starting up a machine unit when I got\nout. … I am of course in close touch with
  Turing.\n\nTuring's Automatic Computing Engine\n\n\n\nTuring and Newman were thinking
  along similar lines. In 1945 Turing\njoined the National Physical Laboratory (NPL)
  in London, his brief to\ndesign and develop an electronic stored-program digital
  computer for\nscientific work. (Artificial Intelligence was not far from Turing's\nthoughts:
  he described himself as ‘building a brain’ and\nremarked in a letter that he was
  ‘more interested in the\npossibility of producing models of the action of the brain
  than in the\npractical applications to computing’.) John Womersley, Turing's\nimmediate
  superior at NPL, christened Turing's proposed machine the\nAutomatic Computing Engine,
  or ACE, in homage to Babbage's Difference\nEngine and Analytical Engine. \n\n\n\nTuring's
  1945 report ‘Proposed Electronic Calculator’\ngave the first relatively complete
  specification of an electronic\nstored-program general-purpose digital computer.
  The report is\nreprinted in full in Copeland 2005.\n\n\n\nThe first electronic stored-program
  digital computer to be proposed\nin the U.S. was the EDVAC (see below). The ‘First
  Draft of a\nReport on the EDVAC’ (May 1945), composed by von Neumann,\ncontained
  little engineering detail, in particular concerning\nelectronic hardware (owing
  to restrictions in the U.S.). Turing's\n‘Proposed Electronic Calculator’, on the
  other hand,\nsupplied detailed circuit designs and specifications of hardware units,\nspecimen
  programs in machine code, and even an estimate of the cost of\nbuilding the machine
  (£11,200). ACE and EDVAC differed\nfundamentally from one another; for example,
  ACE employed distributed\nprocessing, while EDVAC had a centralised structure.\n\n\n\nTuring
  saw that speed and memory were the keys to computing.\nTuring's colleague at NPL,
  Jim Wilkinson, observed that Turing\n‘was obsessed with the idea of speed on the
  machine’\n[Copeland 2005, p. 2]. Turing's design had much in common with today's\nRISC
  architectures and it called for a high-speed memory of roughly the\nsame capacity
  as an early Macintosh computer (enormous by the standards\nof his day). Had Turing's
  ACE been built as planned it would have been\nin a different league from the other
  early computers. However, progress\non Turing's Automatic Computing Engine ran slowly,
  due to\norganisational difficulties at NPL, and in 1948 a ‘very fed\nup’ Turing
  (Robin Gandy's description, in interview with\nCopeland, 1995) left NPL for Newman's
  Computing Machine Laboratory at\nManchester University. It was not until May 1950
  that a small pilot\nmodel of the Automatic Computing Engine, built by Wilkinson,
  Edward\nNewman, Mike Woodger, and others, first executed a program. With an\noperating
  speed of 1 MHz, the Pilot Model ACE was for some time the\nfastest computer in the
  world.\n\n\n\nSales of DEUCE, the production version of the Pilot Model ACE, were\nbuoyant
  — confounding the suggestion, made in 1946 by the\nDirector of the NPL, Sir Charles
  Darwin, that ‘it is very\npossible that … one machine would suffice to solve all
  the\nproblems that are demanded of it from the whole country’\n[Copeland 2005, p.
  4]. The fundamentals of Turing's ACE design were\nemployed by Harry Huskey (at Wayne
  State University, Detroit) in the\nBendix G15 computer (Huskey in interview with
  Copeland, 1998). The G15\nwas arguably the first personal computer; over 400 were
  sold worldwide.\nDEUCE and the G15 remained in use until about 1970. Another computer\nderiving
  from Turing's ACE design, the MOSAIC, played a role in\nBritain's air defences during
  the Cold War period; other derivatives\ninclude the Packard-Bell PB250 (1961). (More
  information about these\nearly computers is given in [Copeland 2005].)\n\nThe Manchester
  Machine\n\n\n\nThe earliest general-purpose stored-program electronic digital computer\nto
  work was built in Newman's Computing Machine Laboratory at\nManchester University.
  The Manchester ‘Baby’, as it became\nknown, was constructed by the engineers F.C.
  Williams and Tom Kilburn,\nand performed its first calculation on 21 June 1948.
  The tiny program,\nstored on the face of a cathode ray tube, was just seventeen\ninstructions
  long. A much enlarged version of the machine, with a\nprogramming system designed
  by Turing, became the world's first\ncommercially available computer, the Ferranti
  Mark I. The first to be\ncompleted was installed at Manchester University in February
  1951; in\nall about ten were sold, in Britain, Canada, Holland and Italy. \n\n\n\nThe
  fundamental logico-mathematical contributions by Turing and\nNewman to the triumph
  at Manchester have been neglected, and the\nManchester machine is nowadays remembered
  as the work of Williams and\nKilburn. Indeed, Newman's role in the development of
  computers has\nnever been sufficiently emphasised (due perhaps to his thoroughly\nself-effacing
  way of relating the relevant events).\n\n\n\nIt was Newman who, in a lecture in
  Cambridge in 1935, introduced\nTuring to the concept that led directly to the Turing
  machine: Newman\ndefined a constructive process as one that a machine can carry\nout
  (Newman in interview with Evans, op. cit.). As a result of his\nknowledge of Turing's
  work, Newman became interested in the\npossibilities of computing machinery in,
  as he put it, ‘a rather\ntheoretical way’. It was not until Newman joined GC&CS
  in\n1942 that his interest in computing machinery suddenly became\npractical, with
  his realisation that the attack on Tunny could be\nmechanised. During the building
  of Colossus, Newman tried to interest\nFlowers in Turing's 1936 paper — birthplace
  of the stored-program\nconcept - but Flowers did not make much of Turing's arcane
  notation.\nThere is no doubt that by 1943, Newman had firmly in mind the idea of\nusing
  electronic technology in order to construct a stored-program\ngeneral-purpose digital
  computing machine.\n\n\n\nIn July of 1946 (the month in which the Royal Society
  approved\nNewman's application for funds to found the Computing Machine\nLaboratory),
  Freddie Williams, working at the Telecommunications\nResearch Establishment, Malvern,
  began the series of experiments on\ncathode ray tube storage that was to lead to
  the Williams tube memory.\nWilliams, until then a radar engineer, explains how it
  was that he came\nto be working on the problem of computer memory:\n\n[O]nce [the
  German Armies] collapsed … nobody was\ngoing to care a toss about radar, and people
  like me … were\ngoing to be in the soup unless we found something else to do. And\ncomputers
  were in the air. Knowing absolutely nothing about them I\nlatched onto the problem
  of storage and tackled that. (Quoted in\nBennett 1976.)\n\n\n\nNewman learned of
  Williams' work, and with the able help of Patrick\nBlackett, Langworthy Professor
  of Physics at Manchester and one of the\nmost powerful figures in the University,
  was instrumental in the\nappointment of the 35 year old Williams to the recently
  vacated Chair\nof Electro-Technics at Manchester. (Both were members of the appointing\ncommittee
  (Kilburn in interview with Copeland, 1997).) Williams\nimmediately had Kilburn,
  his assistant at Malvern, seconded to\nManchester. To take up the story in Williams'
  own words:\n\n[N]either Tom Kilburn nor I knew the first thing about\ncomputers
  when we arrived in Manchester University. We'd had enough\nexplained to us to understand
  what the problem of storage was and what\nwe wanted to store, and that we'd achieved,
  so the point now had been\nreached when we'd got to find out about computers … Newman\nexplained
  the whole business of how a computer works to us. (F.C.\nWilliams in interview with
  Evans [1976])\n\n\n\nElsewhere Williams is explicit concerning Turing's role and
  gives\nsomething of the flavour of the explanation that he and Kilburn\nreceived:\n\nTom
  Kilburn and I knew nothing about computers, but a lot\nabout circuits. Professor
  Newman and Mr A.M. Turing … knew a lot\nabout computers and substantially nothing
  about electronics. They took\nus by the hand and explained how numbers could live
  in houses with\naddresses and how if they did they could be kept track of during
  a\ncalculation. (Williams [1975], p. 328)\n\n\n\nIt seems that Newman must have
  used much the same words with\nWilliams and Kilburn as he did in an address to the
  Royal Society on\n4th March 1948:\n\nProfessor Hartree … has recalled that all the\nessential
  ideas of the general-purpose calculating machines now being\nmade are to be found
  in Babbage's plans for his analytical engine. In\nmodern times the idea of a universal
  calculating machine was\nindependently introduced by Turing … [T]he machines now
  being\nmade in America and in this country … [are] in certain general\nrespects
  … all similar. There is provision for storing numbers,\nsay in the scale of 2, so
  that each number appears as a row of, say,\nforty 0's and 1's in certain places
  or \"houses\" in the machine.\n… Certain of these numbers, or \"words\" are read,
  one after\nanother, as orders. In one possible type of machine an order consists\nof
  four numbers, for example 11, 13, 27, 4. The number 4 signifies\n\"add\", and when
  control shifts to this word the \"houses\" H11 and H13\nwill be connected to the
  adder as inputs, and H27 as output. The\nnumbers stored in H11 and H13 pass through
  the adder, are added, and\nthe sum is passed on to H27. The control then shifts
  to the next order.\nIn most real machines the process just described would be done
  by three\nseparate orders, the first bringing [H11] (=content of H11) to a\ncentral
  accumulator, the second adding [H13] into the accumulator, and\nthe third sending
  the result to H27; thus only one address would be\nrequired in each order. … A machine
  with storage, with this\nautomatic-telephone-exchange arrangement and with the necessary
  adders,\nsubtractors and so on, is, in a sense, already a universal machine.\n(Newman
  [1948], pp. 271–272)\n\n\n\nFollowing this explanation of Turing's three-address
  concept (source\n1, source 2, destination, function) Newman went on to describe
  program\nstorage (‘the orders shall be in a series of houses X1, X2,\n…’) and conditional
  branching. He then summed up:\n\nFrom this highly simplified account it emerges
  that the\nessential internal parts of the machine are, first, a storage for\nnumbers
  (which may also be orders). … Secondly, adders,\nmultipliers, etc. Thirdly, an \"automatic
  telephone exchange\" for\nselecting \"houses\", connecting them to the arithmetic
  organ, and\nwriting the answers in other prescribed houses. Finally, means of\nmoving
  control at any stage to any chosen order, if a certain condition\nis satisfied,
  otherwise passing to the next order in the normal\nsequence. Besides these there
  must be ways of setting up the machine at\nthe outset, and extracting the final
  answer in useable form. (Newman\n[1948], pp. 273–4)\n\n\n\nIn a letter written in
  1972 Williams described in some detail what\nhe and Kilburn were told by Newman:\n\nAbout
  the middle of the year [1946] the possibility of an\nappointment at Manchester University
  arose and I had a talk with\nProfessor Newman who was already interested in the
  possibility of\ndeveloping computers and had acquired a grant from the Royal Society
  of\n£30,000 for this purpose. Since he understood computers and I\nunderstood electronics
  the possibilities of fruitful collaboration were\nobvious. I remember Newman giving
  us a few lectures in which he\noutlined the organisation of a computer in terms
  of numbers being\nidentified by the address of the house in which they were placed
  and in\nterms of numbers being transferred from this address, one at a time, to\nan
  accumulator where each entering number was added to what was already\nthere. At
  any time the number in the accumulator could be transferred\nback to an assigned
  address in the store and the accumulator cleared\nfor further use. The transfers
  were to be effected by a stored program\nin which a list of instructions was obeyed
  sequentially. Ordered\nprogress through the list could be interrupted by a test
  instruction\nwhich examined the sign of the number in the accumulator. Thereafter\noperation
  started from a new point in the list of instructions. This\nwas the first information
  I received about the organisation of\ncomputers. … Our first computer was the simplest
  embodiment of\nthese principles, with the sole difference that it used a subtracting\nrather
  than an adding accumulator. (Letter from Williams to Randell,\n1972; in Randell
  [1972], p. 9)\n\n\n\nTuring's early input to the developments at Manchester, hinted
  at by\nWilliams in his above-quoted reference to Turing, may have been via the\nlectures
  on computer design that Turing and Wilkinson gave in London\nduring the period December
  1946 to February 1947 (Turing and Wilkinson\n[1946–7]). The lectures were attended
  by representatives of\nvarious organisations planning to use or build an electronic
  computer.\nKilburn was in the audience (Bowker and Giordano [1993]). (Kilburn\nusually
  said, when asked from where he obtained his basic knowledge of\nthe computer, that
  he could not remember (letter from Brian Napper to\nCopeland, 2002); for example,
  in a 1992 interview he said:\n‘Between early 1945 and early 1947, in that period,
  somehow or\nother I knew what a digital computer was … Where I got this\nknowledge
  from I've no idea’ (Bowker and Giordano [1993], p.\n19).)\n\n\n\nWhatever role Turing's
  lectures may have played in informing\nKilburn, there is little doubt that credit
  for the Manchester computer\n— called the ‘Newman-Williams machine’ in a\ncontemporary
  document (Huskey 1947) — belongs not only to\nWilliams and Kilburn but also to Newman,
  and that the influence on\nNewman of Turing's 1936 paper was crucial, as was the
  influence of\nFlowers' Colossus.\n\n\n\nThe first working AI program, a draughts
  (checkers) player written\nby Christopher Strachey, ran on the Ferranti Mark I in
  the Manchester\nComputing Machine Laboratory. Strachey (at the time a teacher at
  Harrow\nSchool and an amateur programmer) wrote the program with Turing's\nencouragement
  and utilising the latter's recently completed\nProgrammers' Handbook for the Ferranti.
  (Strachey later became Director\nof the Programming Research Group at Oxford University.)
  By the summer\nof 1952, the program could, Strachey reported, ‘play a complete\ngame
  of draughts at a reasonable speed’. (Strachey's program formed the\nbasis for Arthur
  Samuel's well-known checkers program.) The first\nchess-playing program, also, was
  written for the Manchester Ferranti,\nby Dietrich Prinz; the program first ran in
  November 1951. Designed for\nsolving simple problems of the mate-in-two variety,
  the program would\nexamine every possible move until a solution was found. Turing
  started\nto program his ‘Turochamp’ chess-player on the Ferranti\nMark I, but never
  completed the task. Unlike Prinz's program, the\nTurochamp could play a complete
  game (when hand-simulated) and operated\nnot by exhaustive search but under the
  guidance of heuristics.\n\nENIAC and EDVAC\n\n\n\nThe first fully functioning electronic
  digital computer to be built in\nthe U.S. was ENIAC, constructed at the Moore School
  of Electrical\nEngineering, University of Pennsylvania, for the Army Ordnance\nDepartment,
  by J. Presper Eckert and John Mauchly. Completed in 1945,\nENIAC was somewhat similar
  to the earlier Colossus, but considerably\nlarger and more flexible (although far
  from general-purpose). The\nprimary function for which ENIAC was designed was the
  calculation of\ntables used in aiming artillery. ENIAC was not a stored-program\ncomputer,
  and setting it up for a new job involved reconfiguring the\nmachine by means of
  plugs and switches. For many years, ENIAC was\nbelieved to have been the first functioning
  electronic digital\ncomputer, Colossus being unknown to all but a few. \n\n\n\nIn
  1944, John von Neumann joined the ENIAC group. He had become\n‘intrigued’ (Goldstine's
  word, [1972], p. 275) with\nTuring's universal machine while Turing was at Princeton
  University\nduring 1936–1938. At the Moore School, von Neumann emphasised the\nimportance
  of the stored-program concept for electronic computing,\nincluding the possibility
  of allowing the machine to modify its own\nprogram in useful ways while running
  (for example, in order to control\nloops and branching). Turing's paper of 1936
  (‘On Computable\nNumbers, with an Application to the Entscheidungsproblem’) was\nrequired
  reading for members of von Neumann's post-war computer project\nat the Institute
  for Advanced Study, Princeton University (letter from\nJulian Bigelow to Copeland,
  2002; see also Copeland [2004], p. 23).\nEckert appears to have realised independently,
  and prior to von\nNeumann's joining the ENIAC group, that the way to take full advantage\nof
  the speed at which data is processed by electronic circuits is to\nplace suitably
  encoded instructions for controlling the processing in\nthe same high-speed storage
  devices that hold the data itself\n(documented in Copeland [2004], pp. 26–7). In
  1945, while ENIAC\nwas still under construction, von Neumann produced a draft report,\nmentioned
  previously, setting out the ENIAC group's ideas for an\nelectronic stored-program
  general-purpose digital computer, the EDVAC\n(von Neuman [1945]). The EDVAC was
  completed six years later, but not\nby its originators, who left the Moore School
  to build computers\nelsewhere. Lectures held at the Moore School in 1946 on the
  proposed\nEDVAC were widely attended and contributed greatly to the dissemination\nof
  the new ideas.\n\n\n\nVon Neumann was a prestigious figure and he made the concept
  of a\nhigh-speed stored-program digital computer widely known through his\nwritings
  and public addresses. As a result of his high profile in the\nfield, it became customary,
  although historically inappropriate, to\nrefer to electronic stored-program digital
  computers as ‘von\nNeumann machines’.\n\n\n\nThe Los Alamos physicist Stanley Frankel,
  responsible with von\nNeumann and others for mechanising the large-scale calculations\ninvolved
  in the design of the atomic bomb, has described von Neumann's\nview of the importance
  of Turing's 1936 paper, in a letter:\n\nI know that in or about 1943 or ‘44 von
  Neumann was\nwell aware of the fundamental importance of Turing's paper of 1936\n…
  Von Neumann introduced me to that paper and at his urging I\nstudied it with care.
  Many people have acclaimed von Neumann as the\n\"father of the computer\" (in a
  modern sense of the term) but I am sure\nthat he would never have made that mistake
  himself. He might well be\ncalled the midwife, perhaps, but he firmly emphasized
  to me, and to\nothers I am sure, that the fundamental conception is owing to Turing,\nin
  so far as not anticipated by Babbage … Both Turing and von\nNeumann, of course,
  also made substantial contributions to the\n\"reduction to practice\" of these concepts
  but I would not regard these\nas comparable in importance with the introduction
  and explication of\nthe concept of a computer able to store in its memory its program
  of\nactivities and of modifying that program in the course of these\nactivities.
  (Quoted in Randell [1972], p. 10)\n\nOther Notable Early Computers\n\n\n\nOther
  notable early stored-program electronic digital computers were: \n\nEDSAC, 1949,
  built at Cambridge University by Maurice Wilkes\n\nBINAC, 1949, built by Eckert's
  and Mauchly's Electronic Control\nCo., Philadelphia (opinions differ over whether
  BINAC ever actually\nworked)\n\nWhirlwind I, 1949, Digital Computer Laboratory,
  Massachusetts\nInstitute of Technology, Jay Forrester\n\nSEAC, 1950, US Bureau of
  Standards Eastern Division, Washington\nD.C., Samuel Alexander, Ralph Slutz\n\nSWAC,
  1950, US Bureau of Standards Western Division, Institute for\nNumerical Analysis,
  University of California at Los Angeles, Harry\nHuskey\n\nUNIVAC, 1951, Eckert-Mauchly
  Computer Corporation, Philadelphia\n(the first computer to be available commercially
  in the U.S.)\n\nthe IAS computer, 1952, Institute for Advanced Study, Princeton\nUniversity,
  Julian Bigelow, Arthur Burks, Herman Goldstine, von\nNeumann, and others (thanks
  to von Neumann's publishing the\nspecifications of the IAS machine, it became the
  model for a group of\ncomputers known as the Princeton Class machines; the IAS computer
  was\nalso a strong influence on the IBM 701)\n\nIBM 701, 1952, International Business
  Machine's first mass-produced\nelectronic stored-program computer.\nHigh-Speed Memory\n\n\n\nThe
  EDVAC and ACE proposals both advocated the use of mercury-filled\ntubes, called
  ‘delay lines’, for high-speed internal\nmemory. This form of memory is known as
  acoustic memory. Delay lines\nhad initially been developed for echo cancellation
  in radar; the idea\nof using them as memory devices originated with Eckert at the
  Moore\nSchool. Here is Turing's description: \n\nIt is proposed to build \"delay
  line\" units consisting of\nmercury … tubes about 5′ long and 1″ in diameter in\ncontact
  with a quartz crystal at each end. The velocity of sound in\n… mercury … is such
  that the delay will be 1.024 ms. The\ninformation to be stored may be considered
  to be a sequence of 1024\n‘digits’ (0 or 1) … These digits will be represented\nby
  a corresponding sequence of pulses. The digit 0 … will be\nrepresented by the absence
  of a pulse at the appropriate time, the\ndigit 1 … by its presence. This series
  of pulses is impressed on\nthe end of the line by one piezo-crystal, it is transmitted
  down the\nline in the form of supersonic waves, and is reconverted into a varying\nvoltage
  by the crystal at the far end. This voltage is amplified\nsufficiently to give an
  output of the order of 10 volts peak to peak\nand is used to gate a standard pulse
  generated by the clock. This pulse\nmay be again fed into the line by means of the
  transmitting crystal, or\nwe may feed in some altogether different signal. We also
  have the\npossibility of leading the gated pulse to some other part of the\ncalculator,
  if we have need of that information at the time. Making use\nof the information
  does not of course preclude keeping it also. (Turing\n[1945], p. 375)\n\n\n\nMercury
  delay line memory was used in EDSAC, BINAC, SEAC, Pilot\nModel ACE, EDVAC, DEUCE,
  and full-scale ACE (1958). The chief advantage\nof the delay line as a memory medium
  was, as Turing put it, that delay\nlines were \"already a going concern\" (Turing
  [1947], p. 380). The\nfundamental disadvantages of the delay line were that random
  access is\nimpossible and, moreover, the time taken for an instruction, or number,\nto
  emerge from a delay line depends on where in the line it happens to\nbe.\n\n\n\nIn
  order to minimize waiting-time, Turing arranged for instructions\nto be stored not
  in consecutive positions in the delay line, but in\nrelative positions selected
  by the programmer in such a way that each\ninstruction would emerge at exactly the
  time it was required, in so far\nas this was possible. Each instruction contained
  a specification of the\nlocation of the next. This system subsequently became known
  as\n‘optimum coding’. It was an integral feature of every\nversion of the ACE design.
  Optimum coding made for difficult and untidy\nprogramming, but the advantage in
  terms of speed was considerable.\nThanks to optimum coding, the Pilot Model ACE
  was able to do a floating\npoint multiplication in 3 milliseconds (Wilkes's EDSAC
  required 4.5\nmilliseconds to perform a single fixed point multiplication).\n\n\n\nIn
  the Williams tube or electrostatic memory, previously mentioned,\na two-dimensional
  rectangular array of binary digits was stored on the\nface of a commercially-available
  cathode ray tube. Access to data was\nimmediate. Williams tube memories were employed
  in the Manchester\nseries of machines, SWAC, the IAS computer, and the IBM 701,
  and a\nmodified form of Williams tube in Whirlwind I (until replacement by\nmagnetic
  core in 1953).\n\n\n\nDrum memories, in which data was stored magnetically on the
  surface\nof a metal cylinder, were developed on both sides of the Atlantic. The\ninitial
  idea appears to have been Eckert's. The drum provided\nreasonably large quantities
  of medium-speed memory and was used to\nsupplement a high-speed acoustic or electrostatic
  memory. In 1949, the\nManchester computer was successfully equipped with a drum
  memory; this\nwas constructed by the Manchester engineers on the model of a drum\ndeveloped
  by Andrew Booth at Birkbeck College, London.\n\n\n\nThe final major event in the
  early history of electronic computation\nwas the development of magnetic core memory.
  Jay Forrester realised\nthat the hysteresis properties of magnetic core (normally
  used in\ntransformers) lent themselves to the implementation of a\nthree-dimensional
  solid array of randomly accessible storage points. In\n1949, at Massachusetts Institute
  of Technology, he began to investigate\nthis idea empirically. Forrester's early
  experiments with metallic core\nsoon led him to develop the superior ferrite core
  memory. Digital\nEquipment Corporation undertook to build a computer similar to
  the\nWhirlwind I as a test vehicle for a ferrite core memory. The Memory\nTest Computer
  was completed in 1953. (This computer was used in 1954\nfor the first simulations
  of neural networks, by Belmont Farley and\nWesley Clark of MIT's Lincoln Laboratory
  (see Copeland and Proudfoot\n[1996]).\n\n\n\nOnce the absolute reliability, relative
  cheapness, high capacity and\npermanent life of ferrite core memory became apparent,
  core soon\nreplaced other forms of high-speed memory. The IBM 704 and 705\ncomputers
  (announced in May and October 1954, respectively) brought\ncore memory into wide
  use.\n\n\n\n\n\nBibliography\n\nWorks Cited\n\nBabbage, C. (ed. by Campbell-Kelly,
  M.), 1994, Passages from\nthe Life of a Philosopher, New Brunswick: Rutgers University\nPress\n\nBennett,
  S., 1976, ‘F.C. Williams: his contribution to the\ndevelopment of automatic control’,
  National Archive for the\nHistory of Computing, University of Manchester, England.
  (This is a\ntypescript based on interviews with Williams in 1976.)\n\nBowker, G.,
  and Giordano, R., 1993, ‘Interview with Tom\nKilburn’, Annals of the History of
  Computing,\n15: 17–32.\n\nCopeland, B.J. (ed.), 2004, The Essential Turing Oxford\nUniversity
  Press\n\nCopeland, B.J. (ed.), 2005, Alan Turing's Automatic Computing\nEngine:
  The Master Codebreaker's Struggle to Build the Modern\nComputer Oxford University
  Press\n\nCopeland, B.J. and others, 2006, Colossus: The Secrets of\nBletchley Park's
  Codebreaking Computers Oxford University\nPress\n\nCopeland, B.J., and Proudfoot,
  D., 1996, ‘On Alan Turing's\nAnticipation of Connectionism’ Synthese,\n108: 361–377\n\nEvans,
  C., 197?, interview with M.H.A. Newman in ‘The\nPioneers of Computing: an Oral History
  of Computing’, London:\nScience Museum\n\nFifer, S., 1961, Analog Computation: Theory,
  Techniques,\nApplications New York: McGraw-Hill\n\nFord, H., 1919, ‘Mechanical Movement’,
  Official\nGazette of the United States Patent Office, October 7, 1919:\n48\n\nGoldstine,
  H., 1972, The Computer from Pascal to von\nNeumann Princeton University Press\n\nHuskey,
  H.D., 1947, ‘The State of the Art in Electronic\nDigital Computing in Britain and
  the United States’, in [Copeland\n2005]\n\nNewman, M.H.A., 1948, ‘General Principles
  of the Design of\nAll-Purpose Computing Machines’ Proceedings of the Royal\nSociety
  of London, series A, 195 (1948):\n271–274\n\nRandell, B., 1972, ‘On Alan Turing
  and the Origins of Digital\nComputers’, in Meltzer, B., Michie, D. (eds), Machine\nIntelligence
  7, Edinburgh: Edinburgh University Press, 1972\n\nSmith, B.C., 1991, ‘The Owl and
  the Electric\nEncyclopaedia’, Artificial Intelligence,\n47: 251–288\n\nThomson,
  J., 1876, ‘On an Integrating Machine Having a New\nKinematic Principle’ Proceedings
  of the Royal Society of\nLondon, 24: 262–5\n\nTuring, A.M., 1936, ‘On Computable
  Numbers, with an\nApplication to the Entscheidungsproblem’ Proceedings of the\nLondon
  Mathematical Society, Series 2, 42\n(1936–37): 230–265. Reprinted in The Essential\nTuring
  (Copeland [2004]).\n\nTuring, A.M, 1945, ‘Proposed Electronic Calculator’, in\nAlan
  Turing's Automatic Computing Engine (Copeland\n[2005])\n\nTuring, A.M., 1947, ‘Lecture
  on the Automatic Computing\nEngine’, in The Essential Turing (Copeland [2004])\n\nTuring,
  A.M., and Wilkinson, J.H., 1946–7, ‘The\nTuring-Wilkinson Lecture Series (1946-7)’,
  in Alan Turing's\nAutomatic Computing Engine (Copeland [2005])\n\nvon Neumann, J.,
  1945, ‘First Draft of a Report on the\nEDVAC’, in Stern, N. From ENIAC to UNIVAC:
  An Appraisal of\nthe Eckert-Mauchly Computers Bedford, Mass.: Digital Press (1981),\npp.
  181–246\n\nWilliams, F.C., 1975, ‘Early Computers at Manchester\nUniversity’ The
  Radio and Electronic Engineer,\n45 (1975): 237–331\n\nWynn-Williams, C.E., 1932,
  ‘A Thyratron \"Scale of Two\"\nAutomatic Counter’ Proceedings of the Royal Society
  of\nLondon, series A, 136: 312–324\nFurther Reading\n\nCopeland, B.J., 2004, ‘Colossus
  — Its Origins and\nOriginators’ Annals of the History of Computing,\n26: 38–45\n\nMetropolis,
  N., Howlett, J., Rota, G.C. (eds), 1980, A History\nof Computing in the Twentieth
  Century New York: Academic\nPress\n\nRandell, B. (ed.), 1982, The Origins of Digital
  Computers:\nSelected Papers Berlin: Springer-Verlag\n\nWilliams, M.R., 1997, A History
  of Computing Technology\nLos Alamitos: IEEE Computer Society Press\n\n\n\n\nAcademic
  Tools\n\n\n\nHow to cite this entry.\n\nPreview the PDF version of this entry at
  the Friends of the SEP Society.\n\nLook up this entry topic at the Indiana Philosophy
  Ontology Project (InPhO).\n\nEnhanced bibliography for this entry at PhilPapers,
  with links to its database.\n\n\n\n\n\n\nOther Internet Resources\n\nThe Turing
  Archive for the History of Computing\n\nThe Alan Turing Home Page\n\n\n\nCharles
  Babbage Institute\n\n\nThe Computer Conservation Society (UK)\n\nCSIRAC (a.k.a.
  CSIR MARK I) Home Page\n\n\nLogic and Computation Group at Penn\n\n\n\n\n\n\n\n\nRelated
  Entries\n\n\n\n computability and complexity |\n function: recursive |\n Turing,
  Alan |\n Turing machines\n\n\n\n\n\n\n\n\n\n \n\n  \n    \n Copyright © 2006 by\n\nB.
  Jack Copeland\n<jack.copeland@canterbury.ac.nz>\n    \n  \n\n \n\n\n\n  \n\n\n  Open
  access to the Encyclopedia has been made possible, in part, with\n  a financial
  contribution from the Indiana University Libraries.\n  We gratefully acknowledge
  this support.\nThe SEP would like to congratulate the National Endowment for the
  Humanities on its 50th anniversary and express our indebtedness for the five generous
  grants it awarded our project from 1997 to 2007.\nReaders who have benefited from
  the SEP are encouraged to examine the NEH’s anniversary page and, if inspired to
  do so, send a testimonial to neh50@neh.gov.\n\n\n    \n   \n\n     \n\n    \n\n
  \     \n        \n           Browse\n          Table of Contents\n            What's
  New\n            Random Entry\n            Chronological\n            Archives\n
  \         \n        \n           About\n          Editorial Information\n            About
  the SEP\n            Editorial Board\n            How to Cite the SEP\n            Special
  Characters\n            Advanced Tools\n            Contact\n          \n        \n
  \          Support SEP\n          Support the SEP\n            PDFs for SEP Friends\n
  \           Make a Donation\n            SEPIA for Libraries\n          \n       \n\n
  \     \n        \n           Mirror Sites\n          View this site from another
  server:\n        \n        \n          \n             USA (Main Site) \n            CSLI,
  Stanford University\n          \n           Australia\n              SETIS, University
  of Sydney\n             Netherlands\n              ILLC, University of Amsterdam\n
  \         \n       \n      \n      \n        \n        The Stanford Encyclopedia
  of Philosophy is copyright © 2014 by The Metaphysics Research Lab, Center for the
  Study of Language and Information (CSLI), Stanford University\n        Library of
  Congress Catalog Data: ISSN 1095-5054\n       \n\n     \n\n   \n\n   \n  \n    $('.dropdown-toggle').dropdown();\n
  \ \n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n
  \ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n
  \ m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n
  \ })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n
  \ ga('create', 'UA-40353515-1', 'stanford.edu');\n  ga('send', 'pageview');\n\n\n\nHistorically,
  computers were human clerks who calculated in accordance\nwith effective methods.
  These human computers did the sorts of\ncalculation nowadays carried out by electronic
  computers, and many\nthousands of them were employed in commerce, government, and
  research\nestablishments. The term computing machine, used increasingly\nfrom the
  1920s, refers to any machine that does the work of a human\ncomputer, i.e., any
  machine that calculates in accordance with\neffective methods. During the late 1940s
  and early 1950s, with the\nadvent of electronic computing machines, the phrase ‘computing\nmachine’
  gradually gave way simply to ‘computer’,\ninitially usually with the prefix ‘electronic’
  or\n‘digital’. This entry surveys the history of these\nmachines. \n\n\nCharles
  Babbage was Lucasian Professor of Mathematics at Cambridge\nUniversity from 1828
  to 1839 (a post formerly held by Isaac Newton).\nBabbage's proposed Difference Engine
  was a special-purpose digital\ncomputing machine for the automatic production of
  mathematical tables\n(such as logarithm tables, tide tables, and astronomical tables).
  The\nDifference Engine consisted entirely of mechanical components —\nbrass gear
  wheels, rods, ratchets, pinions, etc. Numbers were\nrepresented in the decimal system
  by the positions of 10-toothed metal\nwheels mounted in columns. Babbage exhibited
  a small working model in\n1822. He never completed the full-scale machine that he
  had designed\nbut did complete several fragments. The largest — one ninth of\nthe
  complete calculator — is on display in the London Science\nMuseum. Baabage used
  it to perform serious computational work,\ncalculating various mathematical tables.
  In 1990, Babbage's Difference\nEngine No. 2 was finally built from Babbage's designs
  and is also on\ndisplay at the London Science Museum. \n\nThe Swedes Georg and Edvard
  Scheutz (father and son) constructed a\nmodified version of Babbage's Difference
  Engine. Three were made, a\nprototype and two commercial models, one of these being
  sold to an\nobservatory in Albany, New York, and the other to the\nRegistrar-General's
  office in London, where it calculated and printed\nactuarial tables.\n\nBabbage's
  proposed Analytical Engine, considerably more ambitious\nthan the Difference Engine,
  was to have been a general-purpose\nmechanical digital computer. The Analytical
  Engine was to have had a\nmemory store and a central processing unit (or ‘mill’)
  and\nwould have been able to select from among alternative actions\nconsequent upon
  the outcome of its previous actions (a facility\nnowadays known as conditional branching).
  The behaviour of the\nAnalytical Engine would have been controlled by a program
  of\ninstructions contained on punched cards connected together with ribbons\n(an
  idea that Babbage had adopted from the Jacquard weaving loom).\nBabbage emphasised
  the generality of the Analytical Engine, saying\n‘the conditions which enable a
  finite machine to make\ncalculations of unlimited extent are fulfilled in the Analytical\nEngine’
  (Babbage [1994], p. 97).\n\nBabbage worked closely with Ada Lovelace, daughter of
  the poet\nByron, after whom the modern programming language ADA is named.\nLovelace
  foresaw the possibility of using the Analytical Engine for\nnon-numeric computation,
  suggesting that the Engine might even be\ncapable of composing elaborate pieces
  of music.\n\nA large model of the Analytical Engine was under construction at the\ntime
  of Babbage's death in 1871 but a full-scale version was never\nbuilt. Babbage's
  idea of a general-purpose calculating engine was never\nforgotten, especially at
  Cambridge, and was on occasion a lively topic\nof mealtime discussion at the war-time
  headquarters of the Government\nCode and Cypher School, Bletchley Park, Buckinghamshire,
  birthplace of\nthe electronic digital computer.\n\nThe earliest computing machines
  in wide use were not digital but\nanalog. In analog representation, properties of
  the representational\nmedium ape (or reflect or model) properties of the represented\nstate-of-affairs.
  (In obvious contrast, the strings of binary digits\nemployed in digital representation
  do not represent by means\nof possessing some physical property — such as length
  —\nwhose magnitude varies in proportion to the magnitude of the property\nthat is
  being represented.) Analog representations form a diverse\nclass. Some examples:
  the longer a line on a road map, the longer the\nroad that the line represents;
  the greater the number of clear plastic\nsquares in an architect's model, the greater
  the number of windows in\nthe building represented; the higher the pitch of an acoustic
  depth\nmeter, the shallower the water. In analog computers, numerical\nquantities
  are represented by, for example, the angle of rotation of a\nshaft or a difference
  in electrical potential. Thus the output voltage\nof the machine at a time might
  represent the momentary speed of the\nobject being modelled. \n\nAs the case of
  the architect's model makes plain, analog\nrepresentation may be discrete in nature
  (there is no such\nthing as a fractional number of windows). Among computer scientists,\nthe
  term ‘analog’ is sometimes used narrowly, to indicate\nrepresentation of one continuously-valued
  quantity by another\n(e.g., speed by voltage). As Brian Cantwell Smith has remarked:\n\nJames
  Thomson, brother of Lord Kelvin, invented the mechanical\nwheel-and-disc integrator
  that became the foundation of analog\ncomputation (Thomson [1876]). The two brothers
  constructed a device for\ncomputing the integral of the product of two given functions,
  and\nKelvin described (although did not construct) general-purpose analog\nmachines
  for integrating linear differential equations of any order and\nfor solving simultaneous
  linear equations. Kelvin's most successful\nanalog computer was his tide predicting
  machine, which remained in use\nat the port of Liverpool until the 1960s. Mechanical
  analog devices\nbased on the wheel-and-disc integrator were in use during World
  War I\nfor gunnery calculations. Following the war, the design of the\nintegrator
  was considerably improved by Hannibal Ford (Ford [1919]). \n\nStanley Fifer reports
  that the first semi-automatic mechanical\nanalog computer was built in England by
  the Manchester firm of\nMetropolitan Vickers prior to 1930 (Fifer [1961], p. 29);
  however, I\nhave so far been unable to verify this claim. In 1931, Vannevar Bush,\nworking
  at MIT, built the differential analyser, the first large-scale\nautomatic general-purpose
  mechanical analog computer. Bush's design was\nbased on the wheel and disc integrator.
  Soon copies of his machine were\nin use around the world (including, at Cambridge
  and Manchester\nUniversities in England, differential analysers built out of kit-set\nMeccano,
  the once popular engineering toy).\n\nIt required a skilled mechanic equipped with
  a lead hammer to set up\nBush's mechanical differential analyser for each new job.
  Subsequently,\nBush and his colleagues replaced the wheel-and-disc integrators and\nother
  mechanical components by electromechanical, and finally by\nelectronic, devices.\n\nA
  differential analyser may be conceptualised as a collection of\n‘black boxes’ connected
  together in such a way as to allow\nconsiderable feedback. Each box performs a fundamental
  process, for\nexample addition, multiplication of a variable by a constant, and\nintegration.
  In setting up the machine for a given task, boxes are\nconnected together so that
  the desired set of fundamental processes is\nexecuted. In the case of electrical
  machines, this was done typically\nby plugging wires into sockets on a patch panel
  (computing machines\nwhose function is determined in this way are referred to as\n‘program-controlled’).\n\nSince
  all the boxes work in parallel, an electronic differential\nanalyser solves sets
  of equations very quickly. Against this has to be\nset the cost of massaging the
  problem to be solved into the form\ndemanded by the analog machine, and of setting
  up the hardware to\nperform the desired computation. A major drawback of analog
  computation\nis the higher cost, relative to digital machines, of an increase in\nprecision.
  During the 1960s and 1970s, there was considerable interest\nin ‘hybrid’ machines,
  where an analog section is controlled\nby and programmed via a digital section.
  However, such machines are now\na rarity.\n\nIn 1936, at Cambridge University, Turing
  invented the principle of the\nmodern computer. He described an abstract digital
  computing machine\nconsisting of a limitless memory and a scanner that moves back
  and\nforth through the memory, symbol by symbol, reading what it finds and\nwriting
  further symbols (Turing [1936]). The actions of the scanner are\ndictated by a program
  of instructions that is stored in the memory in\nthe form of symbols. This is Turing's
  stored-program concept, and\nimplicit in it is the possibility of the machine operating
  on and\nmodifying its own program. (In London in 1947, in the course of what\nwas,
  so far as is known, the earliest public lecture to mention\ncomputer intelligence,
  Turing said, ‘What we want is a machine\nthat can learn from experience’, adding
  that the\n‘possibility of letting the machine alter its own instructions\nprovides
  the mechanism for this’ (Turing [1947] p. 393). Turing's\ncomputing machine of 1936
  is now known simply as the universal Turing\nmachine. Cambridge mathematician Max
  Newman remarked that right from\nthe start Turing was interested in the possibility
  of actually building\na computing machine of the sort that he had described (Newman
  in\ninterview with Christopher Evans in Evans [197?]. \n\nFrom the start of the
  Second World War Turing was a leading\ncryptanalyst at the Government Code and Cypher
  School, Bletchley Park.\nHere he became familiar with Thomas Flowers' work involving
  large-scale\nhigh-speed electronic switching (described below). However, Turing\ncould
  not turn to the project of building an electronic stored-program\ncomputing machine
  until the cessation of hostilities in Europe in\n1945.\n\nDuring the wartime years
  Turing did give considerable thought to the\nquestion of machine intelligence. Colleagues
  at Bletchley Park recall\nnumerous off-duty discussions with him on the topic, and
  at one point\nTuring circulated a typewritten report (now lost) setting out some
  of\nhis ideas. One of these colleagues, Donald Michie (who later founded\nthe Department
  of Machine Intelligence and Perception at the University\nof Edinburgh), remembers
  Turing talking often about the possibility of\ncomputing machines (1) learning from
  experience and (2) solving\nproblems by means of searching through the space of
  possible solutions,\nguided by rule-of-thumb principles (Michie in interview with
  Copeland,\n1995). The modern term for the latter idea is ‘heuristic\nsearch’, a
  heuristic being any rule-of-thumb principle that cuts\ndown the amount of searching
  required in order to find a solution to a\nproblem. At Bletchley Park Turing illustrated
  his ideas on machine\nintelligence by reference to chess. Michie recalls Turing
  experimenting\nwith heuristics that later became common in chess programming (in\nparticular
  minimax and best-first).\n\nFurther information about Turing and the computer, including
  his\nwartime work on codebreaking and his thinking about artificial\nintelligence
  and artificial life, can be found in Copeland 2004.\n\nWith some exceptions — including
  Babbage's purely mechanical\nengines, and the finger-powered National Accounting
  Machine - early\ndigital computing machines were electromechanical. That is to say,\ntheir
  basic components were small, electrically-driven, mechanical\nswitches called ‘relays’.
  These operate relatively slowly,\nwhereas the basic components of an electronic
  computer —\noriginally vacuum tubes (valves) — have no moving parts save\nelectrons
  and so operate extremely fast. Electromechanical digital\ncomputing machines were
  built before and during the second world war by\n(among others) Howard Aiken at
  Harvard University, George Stibitz at\nBell Telephone Laboratories, Turing at Princeton
  University and\nBletchley Park, and Konrad Zuse in Berlin. To Zuse belongs the honour\nof
  having built the first working general-purpose program-controlled\ndigital computer.
  This machine, later called the Z3, was functioning in\n1941. (A program-controlled
  computer, as opposed to a stored-program\ncomputer, is set up for a new task by
  re-routing wires, by means of\nplugs etc.) \n\nRelays were too slow and unreliable
  a medium for large-scale\ngeneral-purpose digital computation (although Aiken made
  a valiant\neffort). It was the development of high-speed digital techniques using\nvacuum
  tubes that made the modern computer possible.\n\nThe earliest extensive use of vacuum
  tubes for digital\ndata-processing appears to have been by the engineer Thomas Flowers,\nworking
  in London at the British Post Office Research Station at Dollis\nHill. Electronic
  equipment designed by Flowers in 1934, for controlling\nthe connections between
  telephone exchanges, went into operation in\n1939, and involved between three and
  four thousand vacuum tubes running\ncontinuously. In 1938–1939 Flowers worked on
  an experimental\nelectronic digital data-processing system, involving a high-speed
  data\nstore. Flowers' aim, achieved after the war, was that electronic\nequipment
  should replace existing, less reliable, systems built from\nrelays and used in telephone
  exchanges. Flowers did not investigate the\nidea of using electronic equipment for
  numerical calculation, but has\nremarked that at the outbreak of war with Germany
  in 1939 he was\npossibly the only person in Britain who realized that vacuum tubes\ncould
  be used on a large scale for high-speed digital computation. (See\nCopeland 2006
  for m more information on Flowers' work.)\n\nThe earliest comparable use of vacuum
  tubes in the U.S. seems to have\nbeen by John Atanasoff at what was then Iowa State
  College (now\nUniversity). During the period 1937–1942 Atanasoff developed\ntechniques
  for using vacuum tubes to perform numerical calculations\ndigitally. In 1939, with
  the assistance of his student Clifford Berry,\nAtanasoff began building what is
  sometimes called the Atanasoff-Berry\nComputer, or ABC, a small-scale special-purpose
  electronic digital\nmachine for the solution of systems of linear algebraic equations.
  The\nmachine contained approximately 300 vacuum tubes. Although the\nelectronic
  part of the machine functioned successfully, the computer as\na whole never worked
  reliably, errors being introduced by the\nunsatisfactory binary card-reader. Work
  was discontinued in 1942 when\nAtanasoff left Iowa State. \n\nThe first fully functioning
  electronic digital computer was Colossus,\nused by the Bletchley Park cryptanalysts
  from February 1944. \n\nFrom very early in the war the Government Code and Cypher
  School\n(GC&CS) was successfully deciphering German radio communications\nencoded
  by means of the Enigma system, and by early 1942 about 39,000\nintercepted messages
  were being decoded each month, thanks to\nelectromechanical machines known as ‘bombes’.
  These were\ndesigned by Turing and Gordon Welchman (building on earlier work by\nPolish
  cryptanalysts).\n\nDuring the second half of 1941, messages encoded by means of
  a\ntotally different method began to be intercepted. This new cipher\nmachine, code-named
  ‘Tunny’ by Bletchley Park, was broken\nin April 1942 and current traffic was read
  for the first time in July\nof that year. Based on binary teleprinter code, Tunny
  was used in\npreference to Morse-based Enigma for the encryption of high-level\nsignals,
  for example messages from Hitler and members of the German\nHigh Command.\n\nThe
  need to decipher this vital intelligence as rapidly as possible\nled Max Newman
  to propose in November 1942 (shortly after his\nrecruitment to GC&CS from Cambridge
  University) that key parts of\nthe decryption process be automated, by means of
  high-speed electronic\ncounting devices. The first machine designed and built to
  Newman's\nspecification, known as the Heath Robinson, was relay-based with\nelectronic
  circuits for counting. (The electronic counters were\ndesigned by C.E. Wynn-Williams,
  who had been using thyratron tubes in\ncounting circuits at the Cavendish Laboratory,
  Cambridge, since 1932\n[Wynn-Williams 1932].) Installed in June 1943, Heath Robinson
  was\nunreliable and slow, and its high-speed paper tapes were continually\nbreaking,
  but it proved the worth of Newman's idea. Flowers recommended\nthat an all-electronic
  machine be built instead, but he received no\nofficial encouragement from GC&CS.
  Working independently at the\nPost Office Research Station at Dollis Hill, Flowers
  quietly got on\nwith constructing the world's first large-scale programmable electronic\ndigital
  computer. Colossus I was delivered to Bletchley Park in January\n1943.\n\nBy the
  end of the war there were ten Colossi working round the clock\nat Bletchley Park.
  From a cryptanalytic viewpoint, a major difference\nbetween the prototype Colossus
  I and the later machines was the\naddition of the so-called Special Attachment,
  following a key discovery\nby cryptanalysts Donald Michie and Jack Good. This broadened
  the\nfunction of Colossus from ‘wheel setting’ — i.e.,\ndetermining the settings
  of the encoding wheels of the Tunny machine\nfor a particular message, given the
  ‘patterns’ of the\nwheels — to ‘wheel breaking’, i.e., determining the\nwheel patterns
  themselves. The wheel patterns were eventually changed\ndaily by the Germans on
  each of the numerous links between the German\nArmy High Command and Army Group
  commanders in the field. By 1945 there\nwere as many 30 links in total. About ten
  of these were broken and read\nregularly.\n\nColossus I contained approximately
  1600 vacuum tubes and each of the\nsubsequent machines approximately 2400 vacuum
  tubes. Like the smaller\nABC, Colossus lacked two important features of modern computers.
  First,\nit had no internally stored programs. To set it up for a new task, the\noperator
  had to alter the machine's physical wiring, using plugs and\nswitches. Second, Colossus
  was not a general-purpose machine, being\ndesigned for a specific cryptanalytic
  task involving counting and\nBoolean operations.\n\nF.H. Hinsley, official historian
  of GC&CS, has estimated that\nthe war in Europe was shortened by at least two years
  as a result of\nthe signals intelligence operation carried out at Bletchley Park,
  in\nwhich Colossus played a major role. Most of the Colossi were destroyed\nonce
  hostilities ceased. Some of the electronic panels ended up at\nNewman's Computing
  Machine Laboratory in Manchester (see below), all\ntrace of their original use having
  been removed. Two Colossi were\nretained by GC&CS (renamed GCHQ following the end
  of the war). The\nlast Colossus is believed to have stopped running in 1960.\n\nThose
  who knew of Colossus were prohibited by the Official Secrets\nAct from sharing their
  knowledge. Until the 1970s, few had any idea\nthat electronic computation had been
  used successfully during the\nsecond world war. In 1970 and 1975, respectively,
  Good and Michie\npublished notes giving the barest outlines of Colossus. By 1983,\nFlowers
  had received clearance from the British Government to publish a\npartial account
  of the hardware of Colossus I. Details of the later\nmachines and of the Special
  Attachment, the uses to which the Colossi\nwere put, and the cryptanalytic algorithms
  that they ran, have only\nrecently been declassified. (For the full account of Colossus
  and the\nattack on Tunny see Copeland 2006.)\n\nTo those acquainted with the universal
  Turing machine of 1936, and\nthe associated stored-program concept, Flowers' racks
  of digital\nelectronic equipment were proof of the feasibility of using large\nnumbers
  of vacuum tubes to implement a high-speed general-purpose\nstored-program computer.
  The war over, Newman lost no time in\nestablishing the Royal Society Computing Machine
  Laboratory at\nManchester University for precisely that purpose. A few months after\nhis
  arrival at Manchester, Newman wrote as follows to the Princeton\nmathematician John
  von Neumann (February 1946):\n\nTuring and Newman were thinking along similar lines.
  In 1945 Turing\njoined the National Physical Laboratory (NPL) in London, his brief
  to\ndesign and develop an electronic stored-program digital computer for\nscientific
  work. (Artificial Intelligence was not far from Turing's\nthoughts: he described
  himself as ‘building a brain’ and\nremarked in a letter that he was ‘more interested
  in the\npossibility of producing models of the action of the brain than in the\npractical
  applications to computing’.) John Womersley, Turing's\nimmediate superior at NPL,
  christened Turing's proposed machine the\nAutomatic Computing Engine, or ACE, in
  homage to Babbage's Difference\nEngine and Analytical Engine. \n\nTuring's 1945
  report ‘Proposed Electronic Calculator’\ngave the first relatively complete specification
  of an electronic\nstored-program general-purpose digital computer. The report is\nreprinted
  in full in Copeland 2005.\n\nThe first electronic stored-program digital computer
  to be proposed\nin the U.S. was the EDVAC (see below). The ‘First Draft of a\nReport
  on the EDVAC’ (May 1945), composed by von Neumann,\ncontained little engineering
  detail, in particular concerning\nelectronic hardware (owing to restrictions in
  the U.S.). Turing's\n‘Proposed Electronic Calculator’, on the other hand,\nsupplied
  detailed circuit designs and specifications of hardware units,\nspecimen programs
  in machine code, and even an estimate of the cost of\nbuilding the machine (£11,200).
  ACE and EDVAC differed\nfundamentally from one another; for example, ACE employed
  distributed\nprocessing, while EDVAC had a centralised structure.\n\nTuring saw
  that speed and memory were the keys to computing.\nTuring's colleague at NPL, Jim
  Wilkinson, observed that Turing\n‘was obsessed with the idea of speed on the machine’\n[Copeland
  2005, p. 2]. Turing's design had much in common with today's\nRISC architectures
  and it called for a high-speed memory of roughly the\nsame capacity as an early
  Macintosh computer (enormous by the standards\nof his day). Had Turing's ACE been
  built as planned it would have been\nin a different league from the other early
  computers. However, progress\non Turing's Automatic Computing Engine ran slowly,
  due to\norganisational difficulties at NPL, and in 1948 a ‘very fed\nup’ Turing
  (Robin Gandy's description, in interview with\nCopeland, 1995) left NPL for Newman's
  Computing Machine Laboratory at\nManchester University. It was not until May 1950
  that a small pilot\nmodel of the Automatic Computing Engine, built by Wilkinson,
  Edward\nNewman, Mike Woodger, and others, first executed a program. With an\noperating
  speed of 1 MHz, the Pilot Model ACE was for some time the\nfastest computer in the
  world.\n\nSales of DEUCE, the production version of the Pilot Model ACE, were\nbuoyant
  — confounding the suggestion, made in 1946 by the\nDirector of the NPL, Sir Charles
  Darwin, that ‘it is very\npossible that … one machine would suffice to solve all
  the\nproblems that are demanded of it from the whole country’\n[Copeland 2005, p.
  4]. The fundamentals of Turing's ACE design were\nemployed by Harry Huskey (at Wayne
  State University, Detroit) in the\nBendix G15 computer (Huskey in interview with
  Copeland, 1998). The G15\nwas arguably the first personal computer; over 400 were
  sold worldwide.\nDEUCE and the G15 remained in use until about 1970. Another computer\nderiving
  from Turing's ACE design, the MOSAIC, played a role in\nBritain's air defences during
  the Cold War period; other derivatives\ninclude the Packard-Bell PB250 (1961). (More
  information about these\nearly computers is given in [Copeland 2005].)\n\nThe earliest
  general-purpose stored-program electronic digital computer\nto work was built in
  Newman's Computing Machine Laboratory at\nManchester University. The Manchester
  ‘Baby’, as it became\nknown, was constructed by the engineers F.C. Williams and
  Tom Kilburn,\nand performed its first calculation on 21 June 1948. The tiny program,\nstored
  on the face of a cathode ray tube, was just seventeen\ninstructions long. A much
  enlarged version of the machine, with a\nprogramming system designed by Turing,
  became the world's first\ncommercially available computer, the Ferranti Mark I.
  The first to be\ncompleted was installed at Manchester University in February 1951;
  in\nall about ten were sold, in Britain, Canada, Holland and Italy. \n\nThe fundamental
  logico-mathematical contributions by Turing and\nNewman to the triumph at Manchester
  have been neglected, and the\nManchester machine is nowadays remembered as the work
  of Williams and\nKilburn. Indeed, Newman's role in the development of computers
  has\nnever been sufficiently emphasised (due perhaps to his thoroughly\nself-effacing
  way of relating the relevant events).\n\nIt was Newman who, in a lecture in Cambridge
  in 1935, introduced\nTuring to the concept that led directly to the Turing machine:
  Newman\ndefined a constructive process as one that a machine can carry\nout (Newman
  in interview with Evans, op. cit.). As a result of his\nknowledge of Turing's work,
  Newman became interested in the\npossibilities of computing machinery in, as he
  put it, ‘a rather\ntheoretical way’. It was not until Newman joined GC&CS in\n1942
  that his interest in computing machinery suddenly became\npractical, with his realisation
  that the attack on Tunny could be\nmechanised. During the building of Colossus,
  Newman tried to interest\nFlowers in Turing's 1936 paper — birthplace of the stored-program\nconcept
  - but Flowers did not make much of Turing's arcane notation.\nThere is no doubt
  that by 1943, Newman had firmly in mind the idea of\nusing electronic technology
  in order to construct a stored-program\ngeneral-purpose digital computing machine.\n\nIn
  July of 1946 (the month in which the Royal Society approved\nNewman's application
  for funds to found the Computing Machine\nLaboratory), Freddie Williams, working
  at the Telecommunications\nResearch Establishment, Malvern, began the series of
  experiments on\ncathode ray tube storage that was to lead to the Williams tube memory.\nWilliams,
  until then a radar engineer, explains how it was that he came\nto be working on
  the problem of computer memory:\n\nNewman learned of Williams' work, and with the
  able help of Patrick\nBlackett, Langworthy Professor of Physics at Manchester and
  one of the\nmost powerful figures in the University, was instrumental in the\nappointment
  of the 35 year old Williams to the recently vacated Chair\nof Electro-Technics at
  Manchester. (Both were members of the appointing\ncommittee (Kilburn in interview
  with Copeland, 1997).) Williams\nimmediately had Kilburn, his assistant at Malvern,
  seconded to\nManchester. To take up the story in Williams' own words:\n\nElsewhere
  Williams is explicit concerning Turing's role and gives\nsomething of the flavour
  of the explanation that he and Kilburn\nreceived:\n\nIt seems that Newman must have
  used much the same words with\nWilliams and Kilburn as he did in an address to the
  Royal Society on\n4th March 1948:\n\nFollowing this explanation of Turing's three-address
  concept (source\n1, source 2, destination, function) Newman went on to describe
  program\nstorage (‘the orders shall be in a series of houses X1, X2,\n…’) and conditional
  branching. He then summed up:\n\nIn a letter written in 1972 Williams described
  in some detail what\nhe and Kilburn were told by Newman:\n\nTuring's early input
  to the developments at Manchester, hinted at by\nWilliams in his above-quoted reference
  to Turing, may have been via the\nlectures on computer design that Turing and Wilkinson
  gave in London\nduring the period December 1946 to February 1947 (Turing and Wilkinson\n[1946–7]).
  The lectures were attended by representatives of\nvarious organisations planning
  to use or build an electronic computer.\nKilburn was in the audience (Bowker and
  Giordano [1993]). (Kilburn\nusually said, when asked from where he obtained his
  basic knowledge of\nthe computer, that he could not remember (letter from Brian
  Napper to\nCopeland, 2002); for example, in a 1992 interview he said:\n‘Between
  early 1945 and early 1947, in that period, somehow or\nother I knew what a digital
  computer was … Where I got this\nknowledge from I've no idea’ (Bowker and Giordano
  [1993], p.\n19).)\n\nWhatever role Turing's lectures may have played in informing\nKilburn,
  there is little doubt that credit for the Manchester computer\n— called the ‘Newman-Williams
  machine’ in a\ncontemporary document (Huskey 1947) — belongs not only to\nWilliams
  and Kilburn but also to Newman, and that the influence on\nNewman of Turing's 1936
  paper was crucial, as was the influence of\nFlowers' Colossus.\n\nThe first working
  AI program, a draughts (checkers) player written\nby Christopher Strachey, ran on
  the Ferranti Mark I in the Manchester\nComputing Machine Laboratory. Strachey (at
  the time a teacher at Harrow\nSchool and an amateur programmer) wrote the program
  with Turing's\nencouragement and utilising the latter's recently completed\nProgrammers'
  Handbook for the Ferranti. (Strachey later became Director\nof the Programming Research
  Group at Oxford University.) By the summer\nof 1952, the program could, Strachey
  reported, ‘play a complete\ngame of draughts at a reasonable speed’. (Strachey's
  program formed the\nbasis for Arthur Samuel's well-known checkers program.) The
  first\nchess-playing program, also, was written for the Manchester Ferranti,\nby
  Dietrich Prinz; the program first ran in November 1951. Designed for\nsolving simple
  problems of the mate-in-two variety, the program would\nexamine every possible move
  until a solution was found. Turing started\nto program his ‘Turochamp’ chess-player
  on the Ferranti\nMark I, but never completed the task. Unlike Prinz's program, the\nTurochamp
  could play a complete game (when hand-simulated) and operated\nnot by exhaustive
  search but under the guidance of heuristics.\n\nThe first fully functioning electronic
  digital computer to be built in\nthe U.S. was ENIAC, constructed at the Moore School
  of Electrical\nEngineering, University of Pennsylvania, for the Army Ordnance\nDepartment,
  by J. Presper Eckert and John Mauchly. Completed in 1945,\nENIAC was somewhat similar
  to the earlier Colossus, but considerably\nlarger and more flexible (although far
  from general-purpose). The\nprimary function for which ENIAC was designed was the
  calculation of\ntables used in aiming artillery. ENIAC was not a stored-program\ncomputer,
  and setting it up for a new job involved reconfiguring the\nmachine by means of
  plugs and switches. For many years, ENIAC was\nbelieved to have been the first functioning
  electronic digital\ncomputer, Colossus being unknown to all but a few. \n\nIn 1944,
  John von Neumann joined the ENIAC group. He had become\n‘intrigued’ (Goldstine's
  word, [1972], p. 275) with\nTuring's universal machine while Turing was at Princeton
  University\nduring 1936–1938. At the Moore School, von Neumann emphasised the\nimportance
  of the stored-program concept for electronic computing,\nincluding the possibility
  of allowing the machine to modify its own\nprogram in useful ways while running
  (for example, in order to control\nloops and branching). Turing's paper of 1936
  (‘On Computable\nNumbers, with an Application to the Entscheidungsproblem’) was\nrequired
  reading for members of von Neumann's post-war computer project\nat the Institute
  for Advanced Study, Princeton University (letter from\nJulian Bigelow to Copeland,
  2002; see also Copeland [2004], p. 23).\nEckert appears to have realised independently,
  and prior to von\nNeumann's joining the ENIAC group, that the way to take full advantage\nof
  the speed at which data is processed by electronic circuits is to\nplace suitably
  encoded instructions for controlling the processing in\nthe same high-speed storage
  devices that hold the data itself\n(documented in Copeland [2004], pp. 26–7). In
  1945, while ENIAC\nwas still under construction, von Neumann produced a draft report,\nmentioned
  previously, setting out the ENIAC group's ideas for an\nelectronic stored-program
  general-purpose digital computer, the EDVAC\n(von Neuman [1945]). The EDVAC was
  completed six years later, but not\nby its originators, who left the Moore School
  to build computers\nelsewhere. Lectures held at the Moore School in 1946 on the
  proposed\nEDVAC were widely attended and contributed greatly to the dissemination\nof
  the new ideas.\n\nVon Neumann was a prestigious figure and he made the concept of
  a\nhigh-speed stored-program digital computer widely known through his\nwritings
  and public addresses. As a result of his high profile in the\nfield, it became customary,
  although historically inappropriate, to\nrefer to electronic stored-program digital
  computers as ‘von\nNeumann machines’.\n\nThe Los Alamos physicist Stanley Frankel,
  responsible with von\nNeumann and others for mechanising the large-scale calculations\ninvolved
  in the design of the atomic bomb, has described von Neumann's\nview of the importance
  of Turing's 1936 paper, in a letter:\n\nOther notable early stored-program electronic
  digital computers were: \n\nThe EDVAC and ACE proposals both advocated the use of
  mercury-filled\ntubes, called ‘delay lines’, for high-speed internal\nmemory. This
  form of memory is known as acoustic memory. Delay lines\nhad initially been developed
  for echo cancellation in radar; the idea\nof using them as memory devices originated
  with Eckert at the Moore\nSchool. Here is Turing's description: \n\nMercury delay
  line memory was used in EDSAC, BINAC, SEAC, Pilot\nModel ACE, EDVAC, DEUCE, and
  full-scale ACE (1958). The chief advantage\nof the delay line as a memory medium
  was, as Turing put it, that delay\nlines were \"already a going concern\" (Turing
  [1947], p. 380). The\nfundamental disadvantages of the delay line were that random
  access is\nimpossible and, moreover, the time taken for an instruction, or number,\nto
  emerge from a delay line depends on where in the line it happens to\nbe.\n\nIn order
  to minimize waiting-time, Turing arranged for instructions\nto be stored not in
  consecutive positions in the delay line, but in\nrelative positions selected by
  the programmer in such a way that each\ninstruction would emerge at exactly the
  time it was required, in so far\nas this was possible. Each instruction contained
  a specification of the\nlocation of the next. This system subsequently became known
  as\n‘optimum coding’. It was an integral feature of every\nversion of the ACE design.
  Optimum coding made for difficult and untidy\nprogramming, but the advantage in
  terms of speed was considerable.\nThanks to optimum coding, the Pilot Model ACE
  was able to do a floating\npoint multiplication in 3 milliseconds (Wilkes's EDSAC
  required 4.5\nmilliseconds to perform a single fixed point multiplication).\n\nIn
  the Williams tube or electrostatic memory, previously mentioned,\na two-dimensional
  rectangular array of binary digits was stored on the\nface of a commercially-available
  cathode ray tube. Access to data was\nimmediate. Williams tube memories were employed
  in the Manchester\nseries of machines, SWAC, the IAS computer, and the IBM 701,
  and a\nmodified form of Williams tube in Whirlwind I (until replacement by\nmagnetic
  core in 1953).\n\nDrum memories, in which data was stored magnetically on the surface\nof
  a metal cylinder, were developed on both sides of the Atlantic. The\ninitial idea
  appears to have been Eckert's. The drum provided\nreasonably large quantities of
  medium-speed memory and was used to\nsupplement a high-speed acoustic or electrostatic
  memory. In 1949, the\nManchester computer was successfully equipped with a drum
  memory; this\nwas constructed by the Manchester engineers on the model of a drum\ndeveloped
  by Andrew Booth at Birkbeck College, London.\n\nThe final major event in the early
  history of electronic computation\nwas the development of magnetic core memory.
  Jay Forrester realised\nthat the hysteresis properties of magnetic core (normally
  used in\ntransformers) lent themselves to the implementation of a\nthree-dimensional
  solid array of randomly accessible storage points. In\n1949, at Massachusetts Institute
  of Technology, he began to investigate\nthis idea empirically. Forrester's early
  experiments with metallic core\nsoon led him to develop the superior ferrite core
  memory. Digital\nEquipment Corporation undertook to build a computer similar to
  the\nWhirlwind I as a test vehicle for a ferrite core memory. The Memory\nTest Computer
  was completed in 1953. (This computer was used in 1954\nfor the first simulations
  of neural networks, by Belmont Farley and\nWesley Clark of MIT's Lincoln Laboratory
  (see Copeland and Proudfoot\n[1996]).\n\nOnce the absolute reliability, relative
  cheapness, high capacity and\npermanent life of ferrite core memory became apparent,
  core soon\nreplaced other forms of high-speed memory. The IBM 704 and 705\ncomputers
  (announced in May and October 1954, respectively) brought\ncore memory into wide
  use.\n\n computability and complexity |\n function: recursive |\n Turing, Alan |\n
  Turing machines\n\n\n Copyright © 2006 by\n\nB. Jack Copeland\n<jack.copeland@canterbury.ac.nz>\n
  \   View this site from another server:The Stanford Encyclopedia of Philosophy is
  copyright © 2014 by The Metaphysics Research Lab, Center for the Study of Language
  and Information (CSLI), Stanford UniversityLibrary of Congress Catalog Data: ISSN
  1095-5054"
