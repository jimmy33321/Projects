--- !ruby/object:WebPage
page: !ruby/object:Nokogiri::HTML::Document
  decorators: 
  node_cache:
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  errors: []
address: http://www.cs.man.ac.uk/CCS/res/res20.htm#d
inboundLinks: []
lines:
- "\r\n"
- "\r\n"
- "\r\n"
- "\r\n"
- "Resurrection Home  \r\n"
- "  Previous issue  \r\n"
- "  Next issue \r\n"
- "  View Original\r\n"
- "                Cover \r\n"
- "  writeLink('res20.pdf')\r\n"
- "  Computer\r\n"
- "RESURRECTION \r\n"
- "The Bulletin of the Computer Conservation Society\r\n"
- "ISSN 0958 - 7403 \r\n"
- "Number 20 \r\n"
- " \r\n"
- "Summer 1998Contents\r\n"
- "\r\n"
- "Editorial Nicholas Enticknap, Editor    News Round-up     CCS Collection Policy
  \    Computing's Golden Jubilee Nicholas Enticknap    The Original Original Program
  Geoff Tootill    The Thinking Behind the IBM 360 Peter Titman    The Argus Computer
  and Process Control Maurice Gribble    Obituary: Peter Hunt     Society Activity
  \    FTP, Web and E-mail Addresses     Forthcoming Events     Committee of the Society Aims
  and Objectives  \r\n"
- "TopPrevious  NextEditorialNicholas Enticknap, Editor\r\n"
- "The major event since issue 19 of Resurrection has unquestionably been the \r\n"
- "golden jubilee of the first operational stored program computer, which was \r\n"
- "celebrated with great enthusiasm in Manchester in June. The major events \r\n"
- "included the \"Launch Event\" at the Bridgewater Hall on 17 June, the Golden \r\n"
- "Anniversary Conference which spanned the next two days, and the handover of the
  \r\n"
- "rebuilt SSEM to the Museum of Science and Industry on the anniversary itself, 21
  \r\n"
- "June. \r\n"
- "\r\n"
- "These events were attended by just about everybody connected with Manchester \r\n"
- "computing past and present. Sir Freddie Williams was represented by his widow,
  \r\n"
- "Lady Williams, who operated the switch that formally brought the replica SSEM to
  \r\n"
- "life, in front of an audience of 1800 people in the Bridgewater Hall. Professor
  \r\n"
- "Tom Kilburn is happily still with us - a mere stripling of 76 - and he gave \r\n"
- "both this audience and the one that attended the Golden Anniversary conference
  \r\n"
- "his reminiscences of the days leading up to 21 June 1948. \r\n"
- "\r\n"
- "All of these events are reviewed in more detail in the following pages. We are
  \r\n"
- "also particularly pleased to publish an article which provides an original \r\n"
- "Resurrection contribution to the anniversary. It was written by Geoff Tootill,
  \r\n"
- "and describes the detective work put in by himself and Professor Kilburn in re-\r\n"
- "creating the world's first operational program in the exact form in which it ran
  \r\n"
- "on that epochal day 50 years ago. Geoff's article includes complete listings of
  \r\n"
- "both the earliest surviving form of this program (dating from a month after the
  \r\n"
- "first run) and of the original version as reconstructed. \r\n"
- "\r\n"
- "Within 15 years computing had advanced so fast that it was possible for the \r\n"
- "world's leading computer manufacturer, IBM, to launch a complete range of \r\n"
- "compatible machines on 7 April 1964 - another key date in the history of \r\n"
- "computing. In this issue, Peter Titman recalls the thinking and decision-making
  \r\n"
- "processes that lay behind this \"bet your company\" decision. \r\n"
- "\r\n"
- "By then it was clear that the major market for computers lay in data processing
  \r\n"
- "rather than computation. But there were other important application areas. \r\n"
- "Maurice Gribble completes the feature articles in this issue with a look at how
  \r\n"
- "Ferranti applied computer technology to industrial process control. \r\n"
- "\r\n"
- "Top Previous  Next News Round-Up\r\n"
- "The Annual General Meeting on 29 May approved a change to the constitution of \r\n"
- "the Society which provides formal recognition of our close links with the Museum
  \r\n"
- "of Science and Industry in Manchester. \r\n"
- "-101010101-\r\n"
- "Society Chairman Brian Oakley highlighted three achievements of the CCS year in
  \r\n"
- "his address to the AGM: the reconstruction of the Manchester University Small-\r\n"
- "Scale Experimental Machine; the progress made on the Bombe project; and the \r\n"
- "successful move of the Pegasus from the old canteen of the Science Museum to \r\n"
- "Blythe House. \r\n"
- "-101010101-\r\n"
- "The AGM re-elected all current officers and committee members of the Society. \r\n"
- "-101010101-\r\n"
- "The London Science Museum plans to feature the CCS Pegasus as the highlight of
  a \r\n"
- "new exhibition which is scheduled to open in the year 2000. \r\n"
- "-101010101-\r\n"
- "Nortel has made a generous sponsorship donation to the Bombe Proj\\-ect. A large
  \r\n"
- "cheque was handed over at a formal ceremony on 12 June. \r\n"
- "-101010101-\r\n"
- "The highlight of this event was the decryption of an original wartime German \r\n"
- "coded message, sent on 1 November 1944. The message was of course decoded at the
  \r\n"
- "time, but no record was kept of the Enigma settings used to do it. Tony Sale \r\n"
- "used the Bombe simulator to find these settings, and then configured an actual
  \r\n"
- "Enigma to decrypt the message. Then, to prove the concept, he successfully \r\n"
- "decoded a further message sent later the same day. \r\n"
- "-101010101-\r\n"
- "We are grateful to everybody who responded to our appeal in the last issue for
  \r\n"
- "volunteers to help with the Bombe Project. This has allowed the team to complete
  \r\n"
- "the database construction and to make very substantial progress on the CAD work.
  \r\n"
- "-101010101-\r\n"
- "Adrian Johnstone has reassumed the chairmanship of the DEC Working Party, and is
  \r\n"
- "focussing the team's efforts on a PDP-11/34 used at one time in the policing of
  \r\n"
- "the nuclear test ban treaty. \r\n"
- "-101010101-\r\n"
- "Three meetings were held in London during the spring. The first, on 12 March, \r\n"
- "saw Donald Davies and Roger Scantlebury presenting on \"The Origins of Packet \r\n"
- "Switching and the Early Arpa network\", and attracted an audience of 37. \r\n"
- "-101010101-\r\n"
- "This was followed by another seminar on a networking theme on 30 April, where \r\n"
- "Bob Cooper spoke on \"The History of Academic Networking in the UK\". He was \r\n"
- "followed by Peter Kirstein, who gave a talk on \"The History of Arpanet and early
  \r\n"
- "Internet in the UK\". \r\n"
- "-101010101-\r\n"
- "Finally, following the AGM Brian Shackel addressed members on \"Human Factors -
  \r\n"
- "-101010101-\r\n"
- "Details of the North West Group meetings programme for the autumn can be found
  \r\n"
- "under Forthcoming Events on page 44. Planning is also well advanced for three \r\n"
- "meetings in early 1999: on \"The Leo Computer\" on 26 January; on \"Computers on
  \r\n"
- "Display\" on 23 February; and on \"The Transputer\" on 23 March. \r\n"
- "-101010101-\r\n"
- "The Committee of the Society has formulated a policy statement concerning \r\n"
- "procedures for dealing with computers of historical interest that come to the \r\n"
- "Society's attention. This is published in full below. \r\n"
- "\r\n"
- "Top Previous  Next CCS Collection Policy\r\n"
- "The Society has no Collection of its own, and no premises in which to \r\n"
- "   house one. There is no intention to change this.\r\n"
- "   When the Society hears of historic equipment which is becoming available \r\n"
- "   for conservation, it will attempt to find a suitable home for it in one of the
  \r\n"
- "   following major collections:\r\n"
- "   The Bletchley Park Museum Trust\r\n"
- "      The Science Museum, South Kensington\r\n"
- "      The Museum of Science and Industry, Manchester\r\n"
- "   \r\n"
- "   The Society will also alert other collections to the availability of surplus
  \r\n"
- "   equipment, where the major collections are unable to offer to house it, if it
  \r\n"
- "   fits the appropriate area of interest. Members who know of such collections
  \r\n"
- "   are asked to ensure that the Secretary is aware of their location and subject
  \r\n"
- "   matter.\r\n"
- "\r\n"
- "Top  Previous  Next Computing's Golden JubileeNicholas Enticknap\r\n"
- "The computer is now more than 50 years old. The golden jubilee was marked by a
  \r\n"
- "series of celebrations in Manchester in the week leading up to the anniversary
  \r\n"
- "on 21 June, which fell on a Sunday. Achievement it certainly was. The designers
  of the original were too busy \r\n"
- "building it and getting it to work to have time to produce drawings or circuit
  \r\n"
- "diagrams (lack of documentation has been a problem since the very dawn of the \r\n"
- "computing age!). \r\n"
- "\r\n"
- "Fortunately, Dai Edwards, who joined the computer team three months after the \r\n"
- "first program ran, did produce some detailed drawings while the SSEM was in the
  \r\n"
- "process of evolving into the first full-scale Manchester computer, the Mark I,
  \r\n"
- "and the notebook he used has survived. Chris Burton told the packed audience at
  \r\n"
- "the launch ceremony, \"I mainly used that, and also Alec Robinson's photographs,
  \r\n"
- "which I scanned into a computer to work out the dimensions accurately\". \r\n"
- "\r\n"
- "Building the replica was the next problem, as the components used in it have \r\n"
- "been obsolete for many years. Despite that, Chris found that there are still \r\n"
- "dealers who maintain stocks of things such as thermionic valves and 1940s-\r\n"
- "vintage cathode ray tubes. \r\n"
- "\r\n"
- "He added, \"The pushbuttons used to key in a program were originally used on \r\n"
- "Spitfires. They cost 3/11 [just under 20p] in 1953, and I got them for £30 \r\n"
- "in 1995\". The standard Post Office steel racks used to house these components
  \r\n"
- "presented more difficulty than anything: two of them eventually came \"from the
  \r\n"
- "bottom of a Shropshire garden\". \r\n"
- "\r\n"
- "The result of this reconstruction process was highly praised by Tom Kilburn, who
  \r\n"
- "described the replica as \"not only identical in appearance, but identical in \r\n"
- "every wire and every circuit. It would not be able to be differentiated from the
  \r\n"
- "Baby by any computer scientist\". Kilburn's only reservation was that the replica
  \r\n"
- "was much cleaner than the original! \r\n"
- "\r\n"
- "Professor Kilburn recalled the events of 21 June 1948 in two separate addresses,
  \r\n"
- "one during the launch ceremony and the other during the Golden Anniversary \r\n"
- "conference which followed on 18-19 June. \r\n"
- "\r\n"
- "Most readers will know that the prime focus of the research conducted by \r\n"
- "Williams and Kilburn at Manchester University during the immediate postwar years
  \r\n"
- "was the development of the cathode ray tube as a memory device. By the autumn of
  \r\n"
- "1947 they had got to the point where they could store 1024 bits for a period of
  \r\n"
- "several hours. \"At this stage\", said Kilburn, \"we had demonstrated that letters
  \r\n"
- "typed in via a keyboard could be stored, but not digits arrived at as a result
  \r\n"
- "of computation. We needed a computer to do this.\" \r\n"
- "\r\n"
- "There was, of course, no such thing available in the shops at the time, so the
  \r\n"
- "team had to build its own. That was the reason for building the SSEM. \r\n"
- "\r\n"
- "The story of the SSEM has been told many times: as Kilburn said, \"What new can
  \r\n"
- "be said about the Baby?\". What is perhaps not so well known is the story of the
  \r\n"
- "program than ran on 21 June 1948 itself. \"The problem was to find the highest
  \r\n"
- "factor of an integer. We selected this problem to program because it used all \r\n"
- "seven instructions, and also combinations of instructions. It was of no \r\n"
- "mathematical significance, but everybody understood it.\" \r\n"
- "\r\n"
- "As with the machine itself, there is no contemporary extant documentation of the
  \r\n"
- "program. It \"was actually written some time before, on the train going to \r\n"
- "Dewsbury\", where Kilburn was living at the time. It was developed before the run
  \r\n"
- "on 21 June 1948, and developed further before Geoff Tootill wrote down the \r\n"
- "listing around a month later. Considerable detective work was needed to \r\n"
- "reconstruct the version actually used for the first run, and this is described
  \r\n"
- "in detail by Tootill elsewhere in this issue. \r\n"
- "\r\n"
- "It was left to Gordon Bell to put the successful construction and operation of
  \r\n"
- "the SSEM into perspective. He pointed out that although the computer as \r\n"
- "understood today was conceived in 1946, \"until you actually do it it doesn't \r\n"
- "exist, it's just another idea\". Several teams of researchers were trying to \r\n"
- "translate the concept into reality: the Manchester team was the one that \r\n"
- "succeeded and so kicked the computer industry into life. \r\n"
- "\r\n"
- "Bell also paid tribute to the CRT development work as a major necessary \r\n"
- "precursor to the computer. \"It was really the Williams tube that got the machine
  \r\n"
- "going\". \r\n"
- "\r\n"
- "Why did Manchester get to the winning post first? Two principal themes emerged
  \r\n"
- "from talks given by various speakers. One of them was the enormous influence of
  \r\n"
- "the Telecommunications Research Establishment (TRE) at Malvern. \r\n"
- "\r\n"
- "The CRT and subsequent SSEM projects had their genesis there, before Williams \r\n"
- "and Kilburn moved to Manchester. Kilburn revealed that \"we had got to the stage
  \r\n"
- "of decoding 0 and 1 before we left Malvern, but we had to decide why it worked,
  \r\n"
- "and how they could be refined\". \r\n"
- "\r\n"
- "Alec Robinson paid tribute not only to \"the backlog of ideas\" which came from
  \r\n"
- "TRE, but also to the \"TRE techniques\" that were followed at Manchester. TRE \r\n"
- "influence was also valuable in insulating the design team from the problem of \r\n"
- "postwar shortages. \r\n"
- "\r\n"
- "Robinson was one of the few Manchester people who had not himself come from TRE
  \r\n"
- "(he was previously with English Electric). Geoff Tootill did, and he recalled it
  \r\n"
- "as \"the pre-eminent electronics R&D establishment during the war\", adding that
  \r\n"
- "it was \"a hothouse of talent\". Alumni included, apart from those that went to
  \r\n"
- "Manchester, Maurice Wilkes (who went on to develop Edsac) and John Pinkerton \r\n"
- "(the chief designer of Leo). \r\n"
- "\r\n"
- "The other major factor was the leadership of Freddie Williams, acknowledged by
  \r\n"
- "Manchester University Chancellor Lord Flowers in a tribute to his \"unique \r\n"
- "inspiration, skill and enthusiasm\" which \"was so vital in the early days of \r\n"
- "computing\". Geoff Tootill described him simply as \"the boffin's boffin\". \r\n"
- "\r\n"
- "Alec Robinson, who joined the Manchester team in 1947, recalled that \"The \r\n"
- "atmosphere was very pleasant, and very informal compared to English Electric. \r\n"
- "Professor Williams' way of working was to let people get on with it. He didn't
  \r\n"
- "leave you alone, though: he provided plenty of encouragement, and gave you a lot
  \r\n"
- "of ideas. \r\n"
- "\r\n"
- "\"There were very few people involved, so communications were easy. You were \r\n"
- "allowed to pursue your own ideas in a way that was very exciting.\" \r\n"
- "\r\n"
- "Readers who would like to see what the very first operational stored program \r\n"
- "computer looked like can inspect Chris Burton's replica at the Manchester Museum
  \r\n"
- "of Science and Industry. \r\n"
- "\r\n"
- "Top  Previous  Next The Original Original ProgramGeoff Tootill\r\n"
- "\r\n"
- "There is no contemporary record of the epoch-making program that started \r\n"
- "computing as we know it today. This article documents an attempt to discover the
  \r\n"
- "precise form of that program. The attempt has almost certainly been successful,
  \r\n"
- "but there is still one remaining unanswered question. \r\n"
- "Tom Kilburn and I have been trying to reconstruct the original version of the \r\n"
- "little Highest Factor program (or \"Table of Instructions\") Tom wrote in 1948,
  to \r\n"
- "test the Small-Scale Experimental Machine (SSEM) at Manchester University. This
  \r\n"
- "was the first program ever to run on a wholly electronic stored program \r\n"
- "computer. \r\n"
- "\r\n"
- "Until 1996, all that was extant of this program was the \"Amended Version\" \r\n"
- "recorded in my lab notebook, which is dated 18 July 1948. By then I had improved
  \r\n"
- "the version that ran on 21 June 1948. \r\n"
- "\r\n"
- "When I looked at this matter in 1975, at Simon Lavington's request, I remembered
  \r\n"
- "that to produce the version in my notebook, I had altered the original to \r\n"
- "prevent the starting value for the trial factor being overwritten. I had also \r\n"
- "determined that I could save one or more instructions to improve Tom's code. \r\n"
- "\r\n"
- "In 1975, I couldn't remember how, and I wasn't able then to work out how to \r\n"
- "\"disimprove\" my version. To preserve the starting trial factor, and to avoid
  \r\n"
- "having to input both positive and negative versions of it, I would have added \r\n"
- "probably four instructions: however, I then cut out two of Tom's instructions,
  \r\n"
- "making the surviving documented version just the known nett two instructions \r\n"
- "longer than the original version. \r\n"
- "\r\n"
- "With a fresh look at all the data, including statements made in the contemporary
  \r\n"
- "letter by Williams and Kilburn to Nature, Tom and I now think we've \r\n"
- "largely solved the problem. \r\n"
- "\r\n"
- "We discussed it in detail on 22 March 1996. I then dug out a (rather poor) \r\n"
- "photocopy of my 1948 notebook, and rediscovered some notes we made when the SSEM
  \r\n"
- "first ran (see next page). I copied them, made some inferences from them, and \r\n"
- "sent a copy to Tom on 25 March. \r\n"
- "\r\n"
- "Tom and I had further talks on 27 and 29 March, and agreed various points, which
  \r\n"
- "I incorporated in a revised document called \"Further Analysis and Comments\" \r\n"
- "(which follows). \r\n"
- "\r\n"
- " SSEM Operating Notes      c(?) 11011 10111 00111(Note 1)2???(b)  00100 01000 11(Note
  2)22 ~?(b) 00111 10111 01111 1-(Note 3)20 Answer 11101000001(Note 4)Answer 1046   +1   in
  1 minutea = 4537 (= 13 x 349) Problem          a= 10011, 10110, 001 4537  line 19
  c(a) 11100,01001,11011,11...         20 b     00011,10110,00100 4536        22 c(b)
  00010,01001,11011,11...   (Note 5)line 20 Answer -1 should be 348 101110101  (Note
  6)line 24 should be blank   (Note 7)CR no. should be 17   (Note 8)Time 2 mins 25
  secs   Additional notes made in 1996: these Operating Notes are taken from a \r\n"
- "photocopy of the 29th page of my 1948 notebook, which was headed \"Numbers used
  \r\n"
- "in Tom's Routine, 21/6/48\". The first three lines are in my handwriting, and \r\n"
- "most of the rest in Tom's. \"?\" denotes illegible in the photocopy. Note 1: c(
  ) means twos complement; this one is -a = 3141 Note 2: This one is b1, of value
  a-1 = 3140 Note 3: and this is -b1. Note 4: This is 1047, ie the highest factor
  of 3141;\r\n"
- " I think we worked this out beforehand, so we would know if the answer was right.
  Note 5: I infer we had to load b in 20, and -b in 22. Note 6: Tom bracketed this
  line with the next \r\n"
- "two and awarded them a tick to indicate that the machine had got the right answer.
  Note 7: So line 24 held the remainder. Note 8: So the \"Stop\" instruction was in
  line 17 Tom, meanwhile, dictated his further thoughts onto a cassette tape on 29
  March \r\n"
- "(this has now been transcribed under the name \"The First Program\"). He sent \r\n"
- "copies of the tape to Chris Burton and myself, accompanied by a manuscript dated
  \r\n"
- "29 March and starting \"The most likely first program is...\". The program Tom
  had \r\n"
- "worked out is exactly the same as the one I had worked out independently, which
  \r\n"
- "I sent to him on 31 March. The two documents crossed in the post. \r\n"
- "\r\n"
- "What follows is my attempt at an exhaustive version of the analysis of the \r\n"
- "available data and synthesis of the original \"Table of Instructions\". \r\n"
- "\r\n"
- "Further Analysis and Comments \r\n"
- "\r\n"
- "The \"Amended Version\" dated 18 July 1948 in my notebook consists of: \r\n"
- "Initialisation (lines 1-4)\r\n"
- "Trial subtraction, Test sign of difference and Jump back (lines 6-8)\r\n"
- "Form remainder r n, Test it and Stop if Zero (lines 9-13)\r\n"
- "Form new divisor b(n+1), Jump back, Load a (lines 14-19 and 5)\r\n"
- "Fixed data (lines 20-24)\r\n"
- "Variable data (lines 25-27)\r\n"
- "\r\n"
- "I don't think we invented initialisation until a week or so after 21 June - the
  \r\n"
- "lavish idea of having instructions that would only be obeyed once seemed \r\n"
- "inefficient to me - but all the other elements must have been present in the \r\n"
- "Original Version. \r\n"
- "\r\n"
- " Amended Version of First ProgramThe 18 July 1948 version of the program is as
  follows (I wrote the explanatory \r\n"
- "comments in italics in 1998): 1 -24,  C load -b1 2    c,  26store -b1 3 -26,  Cload
  +b1 4   c,  27store +b1 5 -23,  Cload a 6 Sub 27Trial subtraction 7 Testis difference
  negative? 8 Add 20, Clstill positive, Jump back two lines 9 Sub 26overshot, so add
  back bn10   c, 25store +r n11 -25,  Cload -rn12 Testis remainder zero?13 Stopyes14
  -26,  Cno; load +bn15 Sub 21form b(n+1) = bn - 116   c,  27store b(n+1)17 -27,  Cload
  -b(n+1)18   c,  26store it19  22,  Cl Jump to line 5   init current final20 -3  21
  1  22 4  23 -a  24 b1  25 - r n r N(=0)26 - -bn -bN27 - bn bNThe Operating Notes
  show that, in the Original Version, at the \"Stop\", line 20 \r\n"
- "contained one less than the \"Answer\", so, rather strangely, the \"Stop\" occurred
  \r\n"
- "after \"Form new divisor\". Therefore after the end of the \"Trial subtractions\"
  \r\n"
- "the sequence must have been: \"Form remainder\" (correction of the overshoot of
  \r\n"
- "the \"Trial subtraction\" cannot be postponed, because the value of bn \r\n"
- "needed would not still be available), \"Form new divisor\", \"Test remainder\",
  etc. \r\n"
- "\r\n"
- "Furthermore, the first \"Trial subtraction\" must have preceded \"Form new divisor\"
  \r\n"
- "in the Table of Instructions, because it seems we worked out b1 = a-1, \r\n"
- "and -b1 by hand and typed them in. If \"Form new divisor\" had preceded \r\n"
- "the first \"Trial subtraction\", we could just have put b1 = a, and not \r\n"
- "bothered to work out -b1. So the first lines of the main loop were \"Load \r\n"
- "a\", \"Trial subtraction\", \"Test sign of difference\", \"Jump back\". \r\n"
- "\r\n"
- "From the letter to Nature, we know that the Table of Instructions \r\n"
- "was 17 in number, ignoring repetitions of the inner loop. From the \r\n"
- "Operating notes, we know that the \"Stop\" instruction was in line 17, and not
  \r\n"
- "immediately after the \"Test\" instruction as in the Amended Version. This was
  \r\n"
- "very likely intended to show with complete clarity that the original version \r\n"
- "could be part of a larger program, with further instructions following line 16
  \r\n"
- "and replacing the \"Stop\". \r\n"
- "\r\n"
- "Tom concurs in his audio tape that this is what he had in mind. Similarly, he \r\n"
- "agrees that the first line of the program cleared the accumulator simply to \r\n"
- "illustrate a point of sound practice, even though it was quite unnecessary in \r\n"
- "this case. \r\n"
- "\r\n"
- "The reconstructed original version that follows respects all these constraints.
  \r\n"
- "It also uses the lines that follow the instructions consecutively (except for \r\n"
- "line 24) for the fixed and variable data indiscriminately, so I can believe that
  \r\n"
- "Tom started with consecutive lines but altered the sequence a bit during program
  \r\n"
- "development. \r\n"
- "\r\n"
- "There may be other solutions to the problem of disimproving my Amended Version,
  \r\n"
- "but I cannot find one that meets all the conditions. For example, storing (r n
  $-$ bn),\r\n"
- " then forming -b(n+1), then forming and testing r n, \r\n"
- "then forming b(n + 1) could have 17 instructions, but leaves bN \r\n"
- "rather than b(N + 1) in line 20. I conclude that the result Tom and I \r\n"
- "arrived at is at the very least a close approximation to the Original Version.
  \r\n"
- " The Original VersionHere is the original \"Table of Instructions\" as synthesised
  from this analysis \r\n"
- "on 31 March 1996 (I wrote the italicised comments in 1998): 1 -18,  C clear accumulator 2
  -19,  Cload +a 3 Sub 20Trial subtraction 4 Testis difference negative? 5 Add 21,  Clstill
  positive, Jump back two lines 6 Sub 22overshot, so add back bn 7    c, 24store +r
  n 8 -22, Cload bn 9 Sub 23form b(n+1) = bn - 110   c, 20store b(n+1)11 -20, Cload
  -b(n+1)12   c,  22store it13 -24,  Cload -r n14 Testis remainder zero?15 25,  Clyes,
  Jump to line 1716 23,  Clno, Jump to line 2 (but see text)17 Stopload -b(n+1)  init
  current final18 0  19 -a  -a20 b1 bn or b(n+1) b(N+1)21 -3  22 -b1 -bn or -b(n+1)
  -b(N+1)23 1  24 - r n r N25 16  Background Data \r\n"
- "\r\n"
- "I do not have a copy of the Williams/Kilburn letter to Nature, but \r\n"
- "according to Simon Lavington's book it included the following passage: \r\n"
- "\r\n"
- "\"The highest proper factor of 218 was found by trying in a single routine \r\n"
- "every integer from (218-1) downwards... Thus about 130,000 numbers were \r\n"
- "tested, involving some 3.5 million operations. The correct answer was obtained
  \r\n"
- "in a 52 minute run. The instruction table in the machine contained 17 entries.\"
  \r\n"
- "\r\n"
- "Tom says that \"operations\" meant store accesses. Furthermore, he agrees that
  \r\n"
- "lines 17, 19, 20, 22 and 24 in the reconstructed version must be correct, to \r\n"
- "conform to the Operating Notes. \r\n"
- "\r\n"
- "Until recently I thought that on 21 June 1948 the digit period of the machine \r\n"
- "was 8.5 microseconds, and the \"bar\" (ie the instruction time) was 1.2 \r\n"
- "milliseconds. These two figures are consistent with each other, given that the
  bar\r\n"
- " was four \"beats\", with each beat being 32 digit \r\n"
- "periods plus 4 digit periods for the timebase flyback. \r\n"
- "\r\n"
- "However, on the 23rd page of my notebook (which was probably dated 9 June 1948),
  \r\n"
- "I find the following: \"13.4 [million] operations, approx. Each takes 1.35 mS.\"
  \r\n"
- "On 13 June a similar estimate of time also uses a figure of 1.35 milliseconds.
  \r\n"
- "These cannot be measured times for the calculation, because the date is before
  \r\n"
- "the computer started to work: the presumption is that they were measured bar \r\n"
- "times. This implies a digit period of 9.4 microseconds. \r\n"
- "\r\n"
- "Between 10 and 13 July 1948, according to my notebook, I tested the version of
  \r\n"
- "Turing's long division program that I had corrected. I noted that 333 divided by
  \r\n"
- "3 took two seconds, and that 1,073,741,823 divided by 34,636,833 took \"about \r\n"
- "1½ seconds\". I can't remember how I measured these times, but I \r\n"
- "doubt if they would give us an estimate of the digit period at that date with \r\n"
- "useful accuracy, and I certainly cannot assume that it hadn't been changed since
  \r\n"
- "21 June. We probably changed it as often as we changed our socks. \r\n"
- "\r\n"
- "But on 3 August 1948 there is \"...digit place 39...\" and \"Total time [1,103,872]
  \r\n"
- "bars = 27.5 mins ±5%\", ie 1.49 milliseconds per bar, and now with 45 digit \r\n"
- "periods per bar, the implied digit period is still 8.5 microseconds. Was this \r\n"
- "just another paper estimate, the 5% tolerance arising from the probable error \r\n"
- "in the assumed digit period, or was it a measured time? I don't know. \r\n"
- "\r\n"
- "Simon Lavington states that by April 1949 the word length was 40 bits and the \r\n"
- "bar 1.8 milliseconds. So, with a 5-digit period flyback, the digit period was 10
  \r\n"
- "microseconds. I do remember that we altered the digit period to 10 microseconds,
  \r\n"
- "but I can't remember whether we noticed what it really was beforehand. \r\n"
- "\r\n"
- "On various dates in 1948 and 1949 we experimented with different ways of digging
  \r\n"
- "and filling wells on the face of the main storage tube. It is quite possible \r\n"
- "that we altered the digit period for particular tests, and did not put it back
  \r\n"
- "to its previous value afterwards. \r\n"
- "\r\n"
- "Inferences from the Background Data\r\n"
- "\r\n"
- "The \"Further Analysis and Comments\" section above seems to provide valid \r\n"
- "reasoning for the reconstructed version of the original program shown, with one
  \r\n"
- "proviso: there is no evidence one way or the other for instruction 16. I said in
  \r\n"
- "my letter to Tom of 31 March that one can choose either 15 or 16 instructions in
  \r\n"
- "the main loop, by jumping back to line 2 or line 1. What I meant by this was \r\n"
- "that the main loop written code could have consisted of either 15 or 16 \r\n"
- "instructions. \r\n"
- "\r\n"
- "This is misleading in the context, because what we are really interested in is
  \r\n"
- "the number of instructions obeyed for one iteration of the main loop - that is,
  \r\n"
- "in testing one possible factor. For the values of a and b1 in the \r\n"
- "letter to Nature, lines 3 and 4 are executed twice and line 15 not at all. \r\n"
- "So in the reconstructed program as shown above, 16 instructions are executed per
  \r\n"
- "number tested. \r\n"
- "\r\n"
- "If, alternatively, line 16 reads \"18, Cl\", 17 instructions are executed. \r\n"
- "As it happens, both the constants (0 and 1) needed to jump to either line 1 or
  \r\n"
- "line 2 are already available, because they're both used for other purposes as \r\n"
- "well. So we cannot deduce from that whether it was 16 or 17 bars per number \r\n"
- "tested, by including or not including the superfluous \"Clear accumulator\" \r\n"
- "instruction in each iteration. To choose between these two alternatives we need
  \r\n"
- "further data. \r\n"
- "\r\n"
- "From (218-1) to 217 is certainly 131,072 numbers, so in a 52 minute \r\n"
- "run a digit period of 8.5 microseconds implies 19.45 instructions. This is \r\n"
- "implausible in view of the evidence for either 16 or 17 instructions. \r\n"
- "\r\n"
- "However, we have further timing information on the same program from the \r\n"
- "Operating Notes, with data that results in a different ratio of outer to inner
  \r\n"
- "loop executions. It is not too laborious to work out the number of bars needed
  \r\n"
- "for values of a for which we know the measured times, and indeed I have \r\n"
- "verified the figures I quote in Table 1 below by emulation. \r\n"
- "\r\n"
- " a 218 4537\t3141 31 19 b1 218-1 4536 3140 30 18 bN 217 349 1047 1 1 Measured run
  time (minutes/seconds) 52m 2m 25s\t1m   Estimated tolerance on measure ±0.3% ±2%
  ±5%   Number of trial subtractions 262,145 14,088 4713 142 77 Number of inner loop
  instructions 786,435 42,264\t14,139 426 231 Jump back to line 1Total number of instructions
  executed 2,228,22888,333 37,174 757 430 Ratio inner loop/other instructions 0.5455
  0.9174 0.6138 1.2870 1.1608 Therefore bar time (milliseconds) 1.400 1.64 1.61   and
  digit period (microseconds) 9.72 11.4 11.2   Jump back to line 1Total number of
  instructions executed 2,097,147 84,146 35,081 728 413 Ratio inner loop/other instructions
  0.6000 1.0091 0.6752 1.4106 1.2692 Therefore bar time (milliseconds) 1.487 1.72
  1.71   and digit period (microseconds) 10.33 12.0 11.0   \tTable 1: Bar Times and
  Digit Periods\tThere is good agreement between the digit periods calculated for
  the runs for \r\n"
- "4537 and 3141, which took place on 21 June 1948, and the discrepancy between \r\n"
- "these and those for the 52 minute run quoted in the letter to Nature is at \r\n"
- "least 16\\%. It therefore seems unlikely that the digit period was in fact the
  \r\n"
- "same on these two occasions. \r\n"
- "\r\n"
- "I conjecture that, having seen the logic design of the hardware and software \r\n"
- "vindicated on 21 June, we did a little preventative maintenance before embarking
  \r\n"
- "on a more exhaustive test of the robustness of the hardware, probably a day or
  \r\n"
- "more later. During this maintenance, we quite probably altered the digit period.
  \r\n"
- "\r\n"
- "If indeeed there was some justification for operating at the figure of 9.4 \r\n"
- "microseconds noted on 7 and 13 June 1948, instead of 8.5 microseconds, then \r\n"
- "conceivably during the maintenance period we set to that figure. It could be, in
  \r\n"
- "fact, that we just reset the three- or four-gang .0005 mfd variable condenser \r\n"
- "that determined the basic oscillator frequency to a particular pencil mark on \r\n"
- "the front panel. This hypothesis implies that an accurate observed value of 9.7
  \r\n"
- "microseconds, being nearer to an approximate 9.4 microseconds, is more plausible
  \r\n"
- "than an accurate one of 10.3 microseconds. So this point argues for a jump back
  \r\n"
- "to line 1 rather than to line 2. \r\n"
- "\r\n"
- "I explain the reversion on 3 August 1948 to the figure of 8.5 microseconds by \r\n"
- "assuming either that we did in fact correct it, by reviewing the pencil marks on
  \r\n"
- "the front panel, or that we knew the machine would work with the shorter digit
  \r\n"
- "period, and I therefore used this value for my estimate. \r\n"
- "\r\n"
- "On the other hand, with line 1 in the loop we have 31 main store accesses per \r\n"
- "iteration, and a total of 4.06 million during the 52 minutes. Without line 1, we
  \r\n"
- "have 29 accesses per iteration and 3.80 million in total. Neither figure agrees
  \r\n"
- "with the letter to Nature, so it seems we should accept Tom's suggestion \r\n"
- "(on his tape of 29 March) that the figure of 3.5 million was wrong. \r\n"
- "\r\n"
- "Tom points out that we had been struggling to make the machine work for some \r\n"
- "days before 21 June, which was a Monday, after we had had the weekend off. \r\n"
- "During these efforts we would certainly not have been prepared to wait as long
  \r\n"
- "as say 60 seconds for each trial, and we would therefore have tried a smaller \r\n"
- "number. We agree on this point. \r\n"
- "\r\n"
- "In fact, we probably varied the smaller number a bit. Tom suggests we used 19 or
  \r\n"
- "31 for the first successful test, since he thinks we got a zero in line 20. That
  \r\n"
- "is, we tested a prime number. I can't recall any more detail myself, I'm afraid,
  \r\n"
- "but I have included these two numbers in Table 1, to show they are indeed quite
  \r\n"
- "plausible. \r\n"
- "\r\n"
- "Conclusion\r\n"
- "In the Original Program, the jump back to line 1 gives \r\n"
- "a digit period a bit more plausible that a jump back to line 2. That is, line 16
  \r\n"
- "should read 18, Cl and not 23, Cl as I have it. But this is hair \r\n"
- "splitting, and Tom later concluded that line 2 as shown is correct. It seems \r\n"
- "unlikely that further palaeographical work would shed further light on this \r\n"
- "point. \r\n"
- "\r\n"
- "Top  Previous  Next The Thinking Behind the IBM 360Peter Titman\r\n"
- "\r\n"
- "Why did IBM embark on the risky venture of producing the System 360 series when
  \r\n"
- "it was already dominant in the market? The author describes the decision-making
  \r\n"
- "process that led to the development of the world's first range of compatible \r\n"
- "computers. \r\n"
- "I joined IBM United Kingdom as what was called an applied science \r\n"
- "representative, which meant selling scientific machines to universities and \r\n"
- "engineering installations. That job disappeared when it was decided that we did
  \r\n"
- "not need separate marketing organisations for the scientific market and the \r\n"
- "commercial market. \r\n"
- "\r\n"
- "But when my applied science job ended the 360 wasn't going to be announced for
  \r\n"
- "two years, and from a salesman's point of view, something that is not going to
  \r\n"
- "be announced for two years doesn't exist. I was spare, so I got assigned to \r\n"
- "worrying about what was going to happen in two years time. \r\n"
- "\r\n"
- "So my view is quite different from the people who were involved in delivering \r\n"
- "the 360. I was concerned with questions like: what have they got us in to? And
  \r\n"
- "what were we going to do about it? \r\n"
- "\r\n"
- "It is hard for those of us who were with IBM then not to appear boastful and \r\n"
- "stand up and say, \"Gosh, weren't we marvellous\". The fact is that we had an \r\n"
- "enormously powerful marketing position at this time, which was the end of 1961,
  \r\n"
- "beginning of 1962. We were selling the 1401 in incredible numbers. You could go
  \r\n"
- "to a company that had a punched card installation, say two accounting machines
  \r\n"
- "and a calculator, and sell them a 1401 for the same price. They could do very \r\n"
- "much more with it, and they could do it simply. \r\n"
- "\r\n"
- "Most computer users in those days were doing really simple things - just \r\n"
- "producing the invoices and getting the money back was a chore they were \r\n"
- "delighted to give to a machine. There were some people doing more complicated \r\n"
- "computing, but not in large numbers, so they weren't the main source of revenue.
  \r\n"
- "Revenue was coming from really basic things. \r\n"
- "\r\n"
- "We did have incredible control over the computer market. That is in worldwide \r\n"
- "terms: in the UK, we weren't the largest company, but in almost every other \r\n"
- "country we were. \r\n"
- "\r\n"
- "By the end of 1964, we had sold 13,000 1401s - orders of magnitude more than \r\n"
- "the ICT 1301 and the RCA 301 (which ICT also sold). This made a big difference
  \r\n"
- "when it came to how much program support you could provide, and in many other \r\n"
- "ways. \r\n"
- "\r\n"
- "I came from Leo Computers where we had to beg for every transistor. At one time
  \r\n"
- "I designed memories: when I had finished that I was at once put to work on the
  \r\n"
- "tape channels. We were that short of people. IBM had so much more resource. \r\n"
- "\r\n"
- "So the first message is that we were really strong. In some market segments such
  \r\n"
- "as large machines, we were dominant even in the UK. There was a good political
  \r\n"
- "reason for our dominance here - the people who bought large machines in those \r\n"
- "days were from organisations such as the Atomic Energy Authority and the CEGB.
  \r\n"
- "These companies were at that time very closely tied to the US nuclear industry,
  \r\n"
- "so had a strong incentive to buy the same machines that were being used in the
  \r\n"
- "US. That was one reason why we had 7090s in Aldermaston and in CEGB and other \r\n"
- "704s dotted around in Risely and similar sites. \r\n"
- "\r\n"
- "So we were very strong in that sector. The place where we were weakest was the
  \r\n"
- "scientific area, and particularly in the UK the small scientific area. \r\n"
- "\r\n"
- "I sold 1620s when I first joined IBM. The 1620 was a lovely little desktop \r\n"
- "machine with a memory of 20,000 decimal digits and a typewriter, and you sat \r\n"
- "down and used it like a PC. But it cost more than the Elliott 803 which had 8000
  \r\n"
- "words of memory and ran much faster. The 1620 didn't even have an adder: it did
  \r\n"
- "arithmetic by doing table lookup, and it did it very slowly. A multiplication \r\n"
- "took 200 milliseconds or so. \r\n"
- "\r\n"
- "Compared to the 803, the 1620 was an absolute dog. It had the most unbelievable
  \r\n"
- "paper tape reader. It was designed by someone who designed magnetic tape \r\n"
- "readers. Everybody knew that the way to sense timing on the paper tape reader \r\n"
- "was to sense the sprocket hole. But whoever designed this device knew that the
  \r\n"
- "way you drove paper tape was by a cog wheel through the sprocket hole to which
  \r\n"
- "you attached the spindle to which you attached a disc with holes in from which
  \r\n"
- "you then sensed the timing. This had the enormous advantage that you got the \r\n"
- "timing out of place and also, for a bonus, it screwed up the sprocket holes as
  \r\n"
- "well. \r\n"
- "\r\n"
- "So we weren't well placed in that sector of the market. But in the US we did \r\n"
- "sell the 1620. We sold it to universities because we were IBM and universities
  \r\n"
- "bought IBM machines. The 803 was much, much better and sold, almost uniquely \r\n"
- "among UK machines, in reasonable quantities, abroad as well as at home. \r\n"
- "\r\n"
- "The success of the 803 was one reason why John Fairclough got the job of \r\n"
- "developing a small scientific machine at Hursley. That raised a question: \r\n"
- "companies like Esso bought machines in any part of the world that they chose, \r\n"
- "but IBM maintained systems only in the countries where we sold them. Esso was \r\n"
- "very unhappy that we didn't always immediately announce things in the UK that we
  \r\n"
- "had announced in the States because the parent company wanted to have the same
  \r\n"
- "machines in all subsidiaries. The thought of someone in the UK announcing a \r\n"
- "better machine and the parent company not being able to have it was absolutely
  \r\n"
- "unthinkable. \r\n"
- "\r\n"
- "So John's chances - though he didn't know it at the time, and it is only in \r\n"
- "hindsight that I recognise this - were not that good because it raised the \r\n"
- "question of how, if we had something brilliant announced in World Trade, we were
  \r\n"
- "not going to announce it immediately in the States. (World Trade was the part of
  \r\n"
- "IBM that covered the whole of the rest of the world outside North America. World
  \r\n"
- "Trade then had about a third of the sales volume of the US.) \r\n"
- "\r\n"
- "That was one of the issues: should we have a separate UK product line, or at \r\n"
- "least a World Trade product line? Don't forget that in those days, the disparity
  \r\n"
- "in wealth between the States and Europe was much greater. An American cost about
  \r\n"
- "twice as much as an Englishman and as three times as much as an Italian. So when
  \r\n"
- "you came to do sums about displacing people and so on, you could bear much \r\n"
- "higher costs in the States. So there was a reason for thinking that the World \r\n"
- "Trade market was different. But the big decision was that it wasn't different.
  \r\n"
- "\r\n"
- "Anybody in our strong position would normally continue operating along the same
  \r\n"
- "lines. What was remarkable was that IBM decided to do something different. If we
  \r\n"
- "were doing so well, why change? \r\n"
- "\r\n"
- "Apart from market dominance, our other enormous strength was technology. People
  \r\n"
- "in the UK didn't understand the strength or depth of IBM technology. \r\n"
- "\r\n"
- "As I said earlier, when I finished doing memories at Leo I was put onto looking
  \r\n"
- "at tapes. The Decca tape had not been a great success on Leo II: EMI was trying
  \r\n"
- "to enter the tape drive market, but the main companies we investigated were \r\n"
- "Potter and Ampex. Leo III eventually used Ampex drives. But there was no \r\n"
- "possibility of making our own tape drive. \r\n"
- "\r\n"
- "IBM tape drives, I thought at the time, were terrible, because they used to do
  \r\n"
- "dreadful things to the tape. They had pinch roll capstans that used to grind it,
  \r\n"
- "the tape ran in contact with the head, and the drives needed quite a lot of \r\n"
- "maintenance. What I didn't realise, though it seems obvious in hindsight, was \r\n"
- "that if you wanted to get faster tape, as everybody did, you could either make
  \r\n"
- "the tape move faster or pack data more densely. To pack data more densely it was
  \r\n"
- "a huge advantage to have your head in contact. \r\n"
- "\r\n"
- "Only IBM did this at the time. Everybody else avoided contact because they felt
  \r\n"
- "they couldn't manage the wear on the tape. But IBM had the resources to apply to
  \r\n"
- "this problem and solve it. The solution proved to be the development of \r\n"
- "proprietary heavy duty tape. IBM had the technology right through, covering the
  \r\n"
- "materials technology, the tape technology, the drive technology, the \r\n"
- "controllers, everything. No other company could put that lot together to make a
  \r\n"
- "new solution. \r\n"
- "\r\n"
- "In printers, IBM also innovated with the 1401. Everybody else used Analex drum
  \r\n"
- "printers. On these, a big drum went round and round and you had to strike it at
  \r\n"
- "exactly the right time to produce good quality printing - if your timing was \r\n"
- "out, the letters went up and down a bit. \r\n"
- "\r\n"
- "The IBM answer was to have a chain that went sideways instead of a drum. You \r\n"
- "still had to bang it at the right time, but if the alignment was slightly out,
  \r\n"
- "the letters were displaced slightly left or right rather than up or down. That
  \r\n"
- "didn't look nearly so bad. Psychologically it looks quite different to have a \r\n"
- "letter slightly to the left rather than up or down. \r\n"
- "\r\n"
- "Furthermore, the mechanism was cheaper. You just had this one chain and that \r\n"
- "itself was replaceable, so you could have different fonts, and you could have \r\n"
- "upper and lower case and other capabilities which were impossible on the old \r\n"
- "Analex. \r\n"
- "\r\n"
- "I can remember the Powers Samas printer on the Leo II. Powers Samas really \r\n"
- "didn't believe in electricity. If it could run with a belt or a cable, it was \r\n"
- "done with a belt or a cable. Electricity was dangerously new fangled. The IBM \r\n"
- "1403 printer was a totally different machine in terms of its simplicity, \r\n"
- "reliability and all the other factors. \r\n"
- "\r\n"
- "IBM's disc technology was another plus. The first disc paper I can trace dates
  \r\n"
- "from about 1953 and was a theoretical study of floating a head on a disc - the
  \r\n"
- "air bearing disc. The first disc subsystem itself, 305 Ramac, was not a success.
  \r\n"
- "It had 5Mb capacity accessed by a single arm, which provided access times in the
  \r\n"
- "order of seconds. But it gave us valuable experience. \r\n"
- "\r\n"
- "By the time we got to the 360, we had not only realised that discs were \r\n"
- "important - far better than tape as a subsidiary storage medium - but also \r\n"
- "what an enormous advantage it was to have your operating system on a disc. \r\n"
- "Operating systems on tape were continuously chuntering up and down. If you'd \r\n"
- "performed a compile, and then wanted to link something, you had to access \r\n"
- "another part of the tape or use another tape drive. There was lot of movement \r\n"
- "trying to get the flow of jobs through a tape machine. Discs obviated this \r\n"
- "problem. \r\n"
- "\r\n"
- "We had virtually a monopoly on disc technology. I can remember John Pinkerton of
  \r\n"
- "Leo Computers coming to Wigmore Street to explore buying discs from us because
  \r\n"
- "there was no alternative source for him. So Leo Computers would have had to \r\n"
- "resell our discs onto their customers, a tremendous disadvantage. A lot of our
  \r\n"
- "other competitors just didn't go into discs at all. But we had a disc technology
  \r\n"
- "that was good and reliable, and we understood disc operating systems. \r\n"
- "\r\n"
- "Another technological strength was memory. We had invested a lot of money: the
  \r\n"
- "reason we were ahead was not because we were big but because we had invested a
  \r\n"
- "lot. For example one major investment was in a plant which automated the process
  \r\n"
- "of making a memory stack. \r\n"
- "\r\n"
- "But having made the investment, we could sell memory for about five times its \r\n"
- "manufacturing cost, or more than that even. The manufacturing cost of memory was
  \r\n"
- "nothing. So we made enormous profits on memory. \r\n"
- "\r\n"
- "So why, with these immense strengths, did we embark on this very risky System \r\n"
- "360 venture? Why abandon our existing products and produce a new range of \r\n"
- "machines that was totally incompatible with them? \r\n"
- "\r\n"
- "I was conscious at the time that customers such as ICI were keen to have the \r\n"
- "same machines in all their offices and in all their computing centres. They were
  \r\n"
- "looking for standards. This was an issue for IBM, too: we were having to train
  \r\n"
- "customer engineers and support engineers in all sorts of different machines. \r\n"
- "When I joined I had go through programming courses on the 650, the 7070, the \r\n"
- "1620 and the 709. It was all rather expensive. \r\n"
- "\r\n"
- "To compound this problem, there was a huge explosion of programming languages \r\n"
- "and operating systems. For the 7090 alone we were on to Ibsys version 13 by the
  \r\n"
- "time we were talking about the 360. Then there was a Fortran monitor system, and
  \r\n"
- "another system called the Share Operating System (SOS), designed in conjunction
  \r\n"
- "\r\n"
- "The initial Fortran group was comprised entirely of IBM people, seven of them.
  \r\n"
- "Share played a part in its subsequent development, but the initial design - and
  \r\n"
- "Fortran I was a most remarkable system because its optimisation was better than
  \r\n"
- "anything that came after it - was really good. \r\n"
- "\r\n"
- "In the sixties everybody thought that if you had the right program language, you
  \r\n"
- "could do anything. All that you had to do was to find it. We had Fortran, \r\n"
- "Comtran (the commercial translator for the 7090), Cobol and Algol. \r\n"
- "\r\n"
- "People were starting to ask some quite basic questions about programming, such
  \r\n"
- "as \"What's it for?\" and \"Why are we - IBM - writing programs for free?\" All
  \r\n"
- "the customers did when you gave it to them was moan. When we announced Ibsys, \r\n"
- "people said \"Gosh it's complicated isn't it? Doesn't it take a lot of memory?
  Do \r\n"
- "we need it?\". Of course they needed it. But they weren't grateful for it in the
  \r\n"
- "least, so it was a real concern. \r\n"
- "\r\n"
- "Then there was the question of what we should spend our development money on. A
  \r\n"
- "lot of it was going on the 7090 because all the interesting activity was on the
  \r\n"
- "big scientific machines. Where the revenue was coming from was from the 1401, \r\n"
- "but we weren't spending nearly so much on it. No one knew why. \r\n"
- "\r\n"
- "So questions like these were being bounced around group staff in the \r\n"
- "corporation. As I recollect it, group staff, and a chap called Don Spaulding in
  \r\n"
- "particular, had decided that we had to do something about the proliferation of
  \r\n"
- "software. Therefore they set up a committee. \r\n"
- "\r\n"
- "But like all the best committees the people who set it up had a very good idea
  \r\n"
- "of what they wanted the committee to say beforehand. The terms of reference were
  \r\n"
- "something like this: \"to produce a complete plan for the total product range,
  \r\n"
- "suitable for all countries and for both scientific and commercial computing\".
  \r\n"
- "There was strong pressure to make a compatible family of machines. \r\n"
- "\r\n"
- "No one knew whether it could really be done, but Bob Evans in particular had \r\n"
- "strong feelings about compatibility and felt that it was possible. He was the \r\n"
- "president of DSD - the lab systems development division - and had been \r\n"
- "involved in the 7070 which was a mixed commercial-scientific machine. \r\n"
- "\r\n"
- "The committee came back with the required conclusion. They presented us with a
  \r\n"
- "report recommending what was known as the New Line Plan. \r\n"
- "\r\n"
- "This plan caused me personally a lot of worry for a long time. It envisaged a \r\n"
- "staggered announcement of machines, the first of which was to be a small binary
  \r\n"
- "version of the model 40 - the machine being developed in Hursley. Immediately \r\n"
- "there was a problem. What we were aiming at in the long term was a grand \r\n"
- "strategy. What we were allowing to poke out was one small binary machine which,
  \r\n"
- "though an interesting machine, was not enough on its own to get anybody excited.
  \r\n"
- "\r\n"
- "The other problem was compatibility with previous systems. The report \r\n"
- "acknowledged the problem, but expected IBM to be selling new applications that
  \r\n"
- "depended on users migrating from tape to disc, and further ahead some exciting
  \r\n"
- "teleprocessing applications. Accordingly it decided to ignore the compatibility
  \r\n"
- "issue. The difficulty was that even people doing new exciting things tend to \r\n"
- "have done some boring things first which they would like to continue doing on \r\n"
- "the same machine. So compatibility was a big worry. \r\n"
- "\r\n"
- "We discussed the plan for about 18 months, exploring how we were going to \r\n"
- "achieve the ambitious targets laid down. But IBM does change it plans, though \r\n"
- "not easily. A lot of pressure has to build up to effect such a change. The \r\n"
- "catalyst in this case was the Honeywell 200 with its cheekily named Liberator \r\n"
- "program, which would take a 1401 program and run it faster and more cheaply - a
  \r\n"
- "beautiful thing to sell. Naturally it sold in large numbers, very quickly. This
  \r\n"
- "was around about the end of 1963.  \r\n"
- "\r\n"
- "Then a very typical IBM thing happened. Tom Watson became involved and ordered
  a \r\n"
- "solution to the Honeywell 200 to be found in 90 days. Suddenly we discovered \r\n"
- "something we knew already, that the way to solve the migration problem was \r\n"
- "through emulation. We had microprogramming, we had the technology to do it, we
  \r\n"
- "just had never somehow reached the conclusion that emulation was an important \r\n"
- "compatibility technique. But by this stage it was something marketing people \r\n"
- "knew they had to have. \r\n"
- "\r\n"
- "The other conclusion we reached was not to mess around announcing tiny bits at
  a \r\n"
- "time, but to launch the whole lot at once. That allowed us to emphasise the \r\n"
- "strategy rather than individual machines. Quite suddenly we had the big bang. It
  \r\n"
- "was the end of 1963 when the decision was taken that a complete range of \r\n"
- "machines would be announced on 7 April 1964. \r\n"
- "\r\n"
- "The range comprised six models of CPU and a complete set of new I/O devices. \r\n"
- "Remarkably, you could attach any I/O device to any CPU: they weren't handcrafted
  \r\n"
- "the way they were before. We developed emulators for every existing computer \r\n"
- "that was important. So suddenly we had a completely new exciting product line to
  \r\n"
- "sell. \r\n"
- "\r\n"
- "We sold it in the UK with an enormous full page text advert: we had a full \r\n"
- "newspaper page of detailed text about the 360 series on the day it was \r\n"
- "announced. Of course we took our customers to Hursley to show them round as \r\n"
- "well, but it was the media promotion that really made for an exciting launch. \r\n"
- "This was not at all the way the committee had planned it in the first place. \r\n"
- "Editor's note: this is an edited version of the talk given by the author to \r\n"
- "the Society at the Science Museum as part of the IBM System 360 seminar on 21 \r\n"
- "November 1995. \r\n"
- "\r\n"
- "Editorial fax number\r\n"
- "Readers wishing to contact the Editor may do so by fax, \r\n"
- "on 0181-715 0484.\r\n"
- "\r\n"
- "Top  Previous  Next The Argus Computer and Process ControlMaurice Gribble\r\n"
- "\r\n"
- "The first Argus grew out of a small computer that was built to study digital \r\n"
- "control systems. The circuits of that machine, which were designed about 1954-\r\n"
- "55, used Mullard OC71 low frequency germanium pnp transistors. They were \r\n"
- "originally developed for producing shift register sequences, or chain codes, for
  \r\n"
- "use in a rotating beacon missile guidance system. \r\n"
- "The circuits comprised NOR-gates and flip-flops which were clocked by narrow \r\n"
- "shift pulses to produce shift registers and counters. Positive logic was \r\n"
- "assumed, that is, the transistors were turned on - collector at earth potential
  \r\n"
- "- for \"1\" and off - collector negative - for \"0\". Diode OR-gates were \r\n"
- "followed by a transistor via a coupling network to produce a NOR-gate. The \r\n"
- "flipflops consisted of two transistors cross-coupled via RC networks with a \r\n"
- "pulse steering circuit for shift pulses, which enabled shift registers and \r\n"
- "synchronous counters to be made. The shift pulses were produced by a crystal \r\n"
- "controlled blocking oscillator, the clock frequency being 25KHz. The power \r\n"
- "supply provided +6 and -6 volts. \r\n"
- "\r\n"
- "Experimental Computer\r\n"
- "\r\n"
- "In 1956 a small computer was proposed for studying sampled data systems and the
  \r\n"
- "feasibility of digital control of weapon systems. Experimental transistor \r\n"
- "computers were being built at Manchester University and at AWE Harwell. These \r\n"
- "machines used point-contact transistors, which at that time had the advantage of
  \r\n"
- "speed and the fact that only one was needed to make a latching circuit. However,
  \r\n"
- "they were difficult to manufacture and not very reliable, so it seemed sensible
  \r\n"
- "to design circuits around junction transistors, in the hope that faster devices
  \r\n"
- "would eventually become available. Due to the rapid progress in the \r\n"
- "semiconductor industry, this happened sooner than expected. \r\n"
- "\r\n"
- "There was a need for additional circuits, such as a 3-entry flipflop, so that \r\n"
- "registers could be loaded in parallel and shifted in both directions. This was
  \r\n"
- "achieved by replicating the pulse steering circuit and ORing them together. \r\n"
- "There was also need for a shift gate, so that various shift pulse sequences \r\n"
- "could be produced. This also used a pulse steering circuit to gate shift pulses
  \r\n"
- "with the logic levels. \r\n"
- "\r\n"
- "The circuits were built into plug-in units, which were hand wired. A printed \r\n"
- "circuit version, which was fairly novel in those days, was also produced, but \r\n"
- "these were not used in this experimental machine, which used serial arithmetic
  \r\n"
- "with a 10-bit word length and represented negative numbers in twos complement \r\n"
- "form. It incorporated a Booth short-cut multiplier, which could handle positive
  \r\n"
- "and negative numbers with equal facility. The Newton-Raphson method was used for
  \r\n"
- "division and calculating square roots, while Chebyshev polynomials were used for
  \r\n"
- "trigonometric functions. \r\n"
- "\r\n"
- "Only a small amount of data storage was supplied in the form of flip-flops, \r\n"
- "since data was read in from transducers as required, and was output as soon as
  \r\n"
- "the calculations were complete. Other inputs were a random number generator and
  \r\n"
- "a timer. Output was analogue, either as voltages or in the form of width-\r\n"
- "modulated current pulses, for operating servos. \r\n"
- "\r\n"
- "The single address order code contained only 19 instructions and the program was
  \r\n"
- "stored on a pluggable diode matrix. There were two program counters: one gave 64
  \r\n"
- "program steps for the main program, the other 25 steps for subroutines. Both \r\n"
- "were ring counters to simplify matrix decoding, and the final OR-diodes were \r\n"
- "glued into the plugs. This was a source of trouble, as there was differential \r\n"
- "expansion between the plastic plug and the glass diode, which shattered the \r\n"
- "glass. The solution was to use a silicone rubber cement instead of Araldite. \r\n"
- "\r\n"
- "A Gray or cyclic progressive (CP) code was used for measuring angular position.
  \r\n"
- "This has the merit that, as the shaft with the code disc is turned, only one \r\n"
- "digit changes at a time, whereas in binary code, several digits often change in
  \r\n"
- "going from one number to the next. These changes do not all occur at exactly the
  \r\n"
- "same time and can result in false readings. \r\n"
- "\r\n"
- "Conversion from CP code to binary was easily implemented. The data from a disc
  \r\n"
- "was selected by suitable logic and transferred in parallel into a register where
  \r\n"
- "it was shifted left cyclically via an Exclusive-OR circuit. This was carried out
  \r\n"
- "by separate hardware in the computer in order to speed up the process and avoid
  \r\n"
- "adding to the complexity of the arithmetic unit. \r\n"
- "\r\n"
- "The analogue voltage output converted the least significant five bits of the \r\n"
- "number by summing currents into an operational amplifier. The logic took account
  \r\n"
- "of the sign of the number and arranged that the amplifier saturated for numbers
  \r\n"
- "of larger magnitude. \r\n"
- "\r\n"
- "The width-modulated current pulses for driving hydraulic valves were produced as
  \r\n"
- "follows: the servo error was stored in a 5-bit accumulator and, according to the
  \r\n"
- "sign of the error, unity was either added to or subtracted from it every word \r\n"
- "time until it was zero. Until zero was reached, a large current of the \r\n"
- "appropriate sign was switched into the valve, resulting in a pulse of current \r\n"
- "whose length, and thus average value, was directly proportional to the error. By
  \r\n"
- "making the maximum current twice that needed to produce maximum output from the
  \r\n"
- "valve, two such valves could be operated on a time-shared basis. \r\n"
- "\r\n"
- "Royal Demonstration\r\n"
- "\r\n"
- "The computer was completed in October 1957, in time for HRH Prince Philip's \r\n"
- "visit to the Wythenshawe Labs in November, and used in a demonstration of \r\n"
- "parallax error correction and servo control. \r\n"
- "\r\n"
- "Two turntables, separated by a metre or so and carrying digitising discs, could
  \r\n"
- "be rotated rapidly through about 90 degrees by hydraulic jacks. Each turntable
  \r\n"
- "had a optical projector mounted on it, which projected a spot of light onto a \r\n"
- "screen, one being coloured red and the other green. Care was taken to ensure \r\n"
- "that the port side was red and the starboard side green! A third digitiser was
  \r\n"
- "fitted with a knob and, when it was turned, the angle measured by this digitiser
  \r\n"
- "was compared with that of the left-hand table and the error operated a digital
  \r\n"
- "servo so as to minimise it. To correct the parallax error, the right-hand table
  \r\n"
- "was, at the same time, turned by a similar servo to another angle, given by the
  \r\n"
- "trigonometric relationship below, so that the green spot of light fell on top of
  \r\n"
- "the red one. \r\n"
- "\r\n"
- "The formula used was:\r\n"
- "\r\n"
- "tan R = tan L / [s/d (tan L) -1] \r\n"
- "\r\n"
- "where s is the separation of the turntables, d is the distance of the screen, \r\n"
- "and L and R are the left and right digitiser angles respectively. \r\n"
- "\r\n"
- "Three term Chebyshev polynomials calculated tan and arctan to sufficient \r\n"
- "accuracy, but, due to the computation time, there was a noticeable lag in the \r\n"
- "position of the green spot if the knob was turned too quickly. \r\n"
- "\r\n"
- "The demonstration behaved well when Prince Philip turned the knob. He then \r\n"
- "looked at a printed circuit version of a flipflop; the name obviously amused \r\n"
- "him, for as he went out of the door he could be heard saying, \"Flipflop, \r\n"
- "flipflop ...\". \r\n"
- "\r\n"
- "Faster Transistors\r\n"
- "\r\n"
- "High frequency transistors, developed for radio, soon became available. They \r\n"
- "were alloy junction transistors with thinner base regions, and it was necessary
  \r\n"
- "to design new circuits to get the fastest operation with them. Alloy transistors
  \r\n"
- "have a relatively large base region that can store charge carriers - holes in \r\n"
- "pnp transistors. In switching circuits, if excess base current is used, in order
  \r\n"
- "to turn the transistor on quickly, there is an excess of holes in the base \r\n"
- "region that has to be removed before the transistor ceases to conduct. Faster \r\n"
- "turn-off times can be achieved if this saturation is avoided, so the Argus \r\n"
- "circuits used a diode between the collector and the base coupling network in a
  \r\n"
- "negative feedback anti-saturation circuit. An extra power supply of $-24$ volts
  \r\n"
- "was also needed. \r\n"
- "\r\n"
- "There was also a requirement for a power NOR-gate that was capable of a much \r\n"
- "larger fan-out. It used an npn transistor to speed the removal of charge from \r\n"
- "the base of the output transistor, whose collector was returned to the 24 volt
  \r\n"
- "supply. This pull-down resistor was removed and replaced with a line-terminating
  \r\n"
- "resistor when outputs, which were inverse signals, were common-collector ORed \r\n"
- "onto a bus. \r\n"
- "\r\n"
- "The flipflop circuit was, in effect, two NOR-gates connected back to back plus
  a \r\n"
- "trigger circuit. Diode inputs were used everywhere to standardise the circuit \r\n"
- "loading and, in the case of the trigger circuit, to improve the flipflop \r\n"
- "recovery time. \r\n"
- "\r\n"
- "The shift gate for producing sequences of shift pulses used a pulse gating \r\n"
- "arrangement similar to that used in the flipflop trigger circuit. There were two
  \r\n"
- "designs of shift gate - one avoided a heavy standing current by using an npn \r\n"
- "transistor that was transformer coupled to the output transistor. \r\n"
- "\r\n"
- "These circuits were engineered in printed circuit form and used in large numbers
  \r\n"
- "in several Ferranti computers at Wythenshawe and Bracknell, and also in Canada
  \r\n"
- "for the Ferranti-Packard 6000, which became the basis of the ICL 1900 series. \r\n"
- "\r\n"
- "The improved version of the Bloodhound missile required a complex sequence of \r\n"
- "pre-launch operations involving calculations and decisions. It was realised that
  \r\n"
- "these were more suited to a digital rather than an analogue computer, if one \r\n"
- "could be built that that was sufficiently fast and reliable. A high degree of \r\n"
- "accuracy was not required for most of the calculations, so a short word length
  \r\n"
- "would suffice. Furthermore, the program was unlikely to be changed when the \r\n"
- "equipment was in service, so, for the sake of reliability, a fixed store was \r\n"
- "preferable. \r\n"
- "\r\n"
- "The Argus Computer\r\n"
- "\r\n"
- "A design was undertaken based on these requirements. More storage was needed for
  \r\n"
- "both program and data. A core store was used for the latter, while the plug \r\n"
- "board used for the program was replaced by a patent magnetic store using ferrite
  \r\n"
- "rods, which will be described later. This also held constants, used in the \r\n"
- "calculations. \r\n"
- "\r\n"
- "The word length could be either 12 or 24 bits and the clock frequency was \r\n"
- "500KHz. The machine operated in a serial/parallel mode - two bits in parallel.
  \r\n"
- "For a 12-bit word, this was a reasonable compromise between speed and cost when
  \r\n"
- "store access times were taken into account, and resulted in a 20 microsecond \r\n"
- "addition time. \r\n"
- "\r\n"
- "The order code was based on that of Pegasus, because there was already a body of
  \r\n"
- "experience with that machine, and because the Ferranti London Computer Centre \r\n"
- "was concerned with promoting the machine for process control. For example, \r\n"
- "Babcock and Wilcox, a prospective Argus customer, was a keen Pegasus user. \r\n"
- "\r\n"
- "There were eight accumulators, one of which was zero. The instruction was 24 \r\n"
- "bits long and the instruction format was similar to that of Pegasus. The first
  \r\n"
- "12 bits (the N address), addressed the main store, the next three (the X \r\n"
- "address), an accumulator, the next six specified a function, the next three (the
  \r\n"
- "M address), a modifier, and the last bit (the C bit) indicated whether the \r\n"
- "number was an instruction or one of two 12-bit constants, selected by the least
  \r\n"
- "significant address bit. So only the first 2048 locations in the program store
  \r\n"
- "were available for constants. \r\n"
- "\r\n"
- "The main differences between the Pegasus and the Argus instruction set is that
  \r\n"
- "the latter had special \"30\" type orders for input and output and the \"40\" type
  \r\n"
- "orders involved literals, not counters. Also Argus had special jumps for \r\n"
- "interrupts - \"70\" type orders. \r\n"
- "\r\n"
- "As in Pegasus, the accumulators could be addressed either as registers, using \r\n"
- "the N address, or as accumulators, using the X address; there was, however, a \r\n"
- "difference. Registers 0 to 5 corresponded to accumulators with the same \r\n"
- "addresses, but accumulator 6 was 24 bits long and consisted of registers 6 and
  \r\n"
- "7. Likewise, accumulator 7 was a double length one, consisting of accumulators
  4 \r\n"
- "and 5. Double length arithmetic was automatically used when either of these long
  \r\n"
- "accumulators was addressed. Accumulator 6 was also called P, with accumulators
  4 \r\n"
- "and 5 being called P1 and P2 , respectively; while accumulator 7 was also called
  \r\n"
- "Q. Accumulators 0 to 3 could also be used as address modifiers. \r\n"
- "\r\n"
- "The serial/parallel arithmetic used two adder/subtractors with ripple-through \r\n"
- "carry, so the delay in the carry path was kept as short as possible. The flip-\r\n"
- "flops were triple-entry types with three different shift pulse inputs to allow
  \r\n"
- "left shift, right shift and double right shift for addition and subtraction. \r\n"
- "\r\n"
- "The multiplier was a modification of the Booth multiplier used in the \r\n"
- "experimental machine. The Booth method examines the least significant bit p$_n$
  \r\n"
- "of the multiplier together with an extra bit p$_{n+1}$, initially set to 0, and,
  \r\n"
- "according to the values of these two bits, performs the operations shown in \r\n"
- "Table 1. \r\n"
- "\r\n"
- "pn pn+1 Operation\t0 0 Shift R 0 1 Add multiplicand,shift R 1 0 Subtract .. ..
  .. .. 1 1 Shift R Table 1: Booth short-cut multiplier\r\n"
- "\r\n"
- "In the Argus method, the bits p$_{n-1}$, p$_n$ and p$_{n+1}$ are examined with
  \r\n"
- "results given in Table 2. Use is made of both single and double right shift. \r\n"
- "\r\n"
- "pn-1 pn pn+1 Operation\t0 0 0 Double shift 0 0 1 Add, Double Shift 0 1 0 Add, ..
  .. .. .. 0 1 1 Shift, Add, Shift 1 0 0 Shift, Subtract, Shift 1 0 1 Subtract, Double
  Shift 1 1 0 Subtract .. .. .. .. 1 1 1 Double Shift Table 2: Argus Multiplier (Modified
  Short-cut)\r\n"
- "\r\n"
- "\r\n"
- "Like the Booth method, the Argus method worked with both positive and negative
  \r\n"
- "numbers and gave a useful increase in speed as well as a lower spread in \r\n"
- "multiplication time, which was important in control applications. \r\n"
- "\r\n"
- "Method\tNumber of Add & Subtract Operations Average MaximumBooth n/2 nArgus n/3
  n/2Table 3: Relative Speed\r\n"
- "\r\n"
- "Argus used a non-restoring divider, which would operate with both positive and
  \r\n"
- "negative numbers. The dividend was held in the accumulator P, the divisor in \r\n"
- "register D and the quotient in register QR. \r\n"
- "\r\n"
- "The bits of divisor and dividend were compared, starting at the MS end. If they
  \r\n"
- "were the same, D was subtracted from P and a least significant 1 added to QR. If
  \r\n"
- "they were different, D was added to P and a least significant 1 subtracted from
  \r\n"
- "QR. After either operation, P and D were shifted one place left. Finally, if the
  \r\n"
- "signs of the divisor and dividend were different, 1 was added to the quotient in
  \r\n"
- "QR. \r\n"
- "\r\n"
- "Division could be rounded or unrounded and, as in Pegasus, the dividend could be
  \r\n"
- "either a double or a single length number. This held when either 12-bit or 24-\r\n"
- "bit arithmetic was used. \r\n"
- "\r\n"
- "Square root was programmed using either Newton-Raphson or the digit by digit \r\n"
- "method, while Chebyshev polynomials were used for trigonometric and other \r\n"
- "transcendental functions. \r\n"
- "\r\n"
- "As previously mentioned, data was held in a core store. This was in modules of
  \r\n"
- "1024 12-bit, plus parity, words and could be increased up to a maximum of 3072
  \r\n"
- "words. It was bit-organised, that is, it used 3-D selection - X, Y and Inhibit.
  \r\n"
- "The cycle time, using state-of-the-art cores and transistors, was six \r\n"
- "microseconds. It was one of the earliest transistor-driven core stores and many
  \r\n"
- "problems had to be overcome. The transistors had to be fast enough, they had to
  \r\n"
- "handle large currents and they had to stand the relatively large voltage \r\n"
- "produced by the back emf of the magnetic cores, which were conflicting \r\n"
- "requirements. \r\n"
- "\r\n"
- "Since there was some doubt about the long-term reliability of the core store \r\n"
- "under adverse conditions and the program was seldom altered in control \r\n"
- "applications, program and constants were held in a fixed store consisting of \r\n"
- "ferrite rods the size of pencil leads. These provided magnetic coupling between
  \r\n"
- "a set of drive tracks and an orthogonal set of read tracks, one for each bit in
  \r\n"
- "the word, etched on a double-sided printed circuit. Current pulses, selected by
  \r\n"
- "a diode matrix, were sent through the drive tracks in turn; and the read tracks
  \r\n"
- "only picked up a signal when a ferrite peg was placed in a hole at the \r\n"
- "intersection and disturbed the symmetry of the magnetic field. \r\n"
- "\r\n"
- "The store was engineered as a set of trays, each holding 64 25-bit words, \r\n"
- "including parity, together with the decoding diode matrix and transformers. The
  \r\n"
- "ferrite pegs had little rubber caps to make them easier to handle and were held
  \r\n"
- "in position by a perspex cover - another source of trouble, for it used to get
  \r\n"
- "electrified and pull the little pegs out when it was removed. The store \r\n"
- "consisted of a box of 16 such trays, together with their associated drive and \r\n"
- "read circuits, making 1024 words total. The 12-bit address could accommodate \r\n"
- "four such stores, if required. \r\n"
- "\r\n"
- "This store was rather bulky, so another magnetic fixed store was developed for
  a \r\n"
- "military application where size was important. It was not used in Argus, as its
  \r\n"
- "development came too late, but it is included here for historical interest. \r\n"
- "\r\n"
- "In this store the ferrite pegs were replaced by square coupling loops, which \r\n"
- "could be cut to prevent induced eddy-currents coupling to the read tracks. The
  \r\n"
- "loops were arranged on a thin fibre-glass printed circuit, which was identical
  \r\n"
- "in size and shape to a Hollerith punched card, so that the loops could be cut \r\n"
- "with a modified card punch. Each card contained a 12 by 25 array of 300 loops,
  \r\n"
- "representing 12 25-bit words. \r\n"
- "\r\n"
- "The store had 4096 words and 342 cards were required to store them, which \r\n"
- "somewhat complicated the decoding. The cards were arranged in four shelves of 86
  \r\n"
- "cards, the last one having only four usable words, and were held in close \r\n"
- "proximity to the drive and read tracks by pressure pads in such a way that that
  \r\n"
- "they could be easily replaced. There were 1024 drive tracks, each one driving \r\n"
- "four cards - one on each shelf. \r\n"
- "\r\n"
- "There were four long flexible printed circuit read tracks and four sets of read
  \r\n"
- "amplifiers, one for each shelf. These were selected with two bits of the \r\n"
- "address, the other 10 bits selecting the drivers. The read tracks were arranged
  \r\n"
- "in concertina fashion, and such was their length that the time delay \r\n"
- "necessitated four different strobe times. \r\n"
- "\r\n"
- "The store was only about a third of the size of an equivalent ferrite peg store
  \r\n"
- "and card punching was assisted by a Pegasus program. Only one production model
  \r\n"
- "was ever built. \r\n"
- "\r\n"
- "For process control applications requiring more data storage, there was also an
  \r\n"
- "optional magnetic drum with a capacity of 50,000 words. \r\n"
- "\r\n"
- "The Argus monitor panel displayed the contents of the accumulators and that of
  \r\n"
- "any store location, selected by the rotary switches; it also had hand switches
  \r\n"
- "for manual intervention and testing. \r\n"
- "\r\n"
- "Argus had two types of interrupt. Interrupt was a novel concept in 1957, and \r\n"
- "Argus was possibly the first machine to use it outside the US. \r\n"
- "\r\n"
- "In the previous experimental machine, the sampling time for the digital servos
  \r\n"
- "was not constant, as a result of the variable multiplication time of the Booth
  \r\n"
- "multiplier, among other things, and this made system analysis difficult. When a
  \r\n"
- "program contained conditional jumps, the situation was much worse and some \r\n"
- "method of getting a constant sampling time was called for. \r\n"
- "\r\n"
- "The method adopted in Argus was to use a timer, which consisted of a register \r\n"
- "that was decremented every other word time (40 microseconds), independently of
  \r\n"
- "other operations. When the timer register became zero, the program was \r\n"
- "interrupted, the number in the instruction counter stored in a link register and
  \r\n"
- "the instruction register set to address 0, which was the start of the interrupt
  \r\n"
- "routine. The latter stored the contents of all the registers in a reserved part
  \r\n"
- "of the core store and then jumped to a subroutine that performed the required \r\n"
- "operation. At the end of the subroutine, the interrupt routine restored all the
  \r\n"
- "registers, incremented the number in the link register and transferred it to the
  \r\n"
- "instruction counter so that the main program could continue where it left off.
  \r\n"
- "\r\n"
- "Thus it operated in a very similar way to interrupt routines in more modern \r\n"
- "machines. By using other registers as counters several different interrupt \r\n"
- "subroutines could be called at times that were multiples of the shortest time.
  \r\n"
- "This was a very useful facility for process control. \r\n"
- "\r\n"
- "Another type of interrupt was the core store interrupt (CSI), which is now known
  \r\n"
- "as DMA (direct memory access). It was used to transfer blocks of data directly
  \r\n"
- "to and from the core store independently of the arithmetic unit when the latter
  \r\n"
- "was involved with multiplication, division and other operations not requiring \r\n"
- "store access. Asynchronous data to and from peripheral equipment was usually \r\n"
- "handled in this way. \r\n"
- "\r\n"
- "A variety of peripheral equipment could be attached to Argus. Both the military
  \r\n"
- "and commercial applications involved input and output data in various forms: \r\n"
- "angular data from digitisers, analogue voltages, single bit on/off data and \r\n"
- "display information, to name a few. In process control applications, there was
  \r\n"
- "considerable input and output data as well as a requirement to handle paper or
  \r\n"
- "magnetic tape and to provide printed output, or output in analogue form for \r\n"
- "driving chart recorders. \r\n"
- "\r\n"
- "Solid state switching was used to select digital and analogue inputs and \r\n"
- "outputs, which were to 10-bit accuracy, but thermocouple and other low level \r\n"
- "inputs were selected by relays. Because of the delay in selecting and digitising
  \r\n"
- "inputs, selection and reading in the data were arranged to be separately \r\n"
- "programmable operations, so that the computer could carry on with other \r\n"
- "operations and not waste time waiting. Also a \"Jump on Busy\" order allowed the
  \r\n"
- "computer to handle asynchronous outputs, like the printer, without waiting. \r\n"
- "\r\n"
- "Once the transistor failures had been eliminated by switching from a soldered to
  \r\n"
- "a welded can, and the printed circuit connectors, whose contacts were brittle \r\n"
- "and prone to spreading, replaced, the machine achieved a high degree of \r\n"
- "reliability, as a result of the technology used. This was further improved by a
  \r\n"
- "checking program that was periodically run as an interrupt, which, if it \r\n"
- "detected a failure, could sound an alarm and isolate the computer from the \r\n"
- "plant. \r\n"
- "\r\n"
- "Argus Process Control Applications\r\n"
- "\r\n"
- "The first application of Argus was the military one for which it was designed -
  \r\n"
- "the Bloodhound missile pre-launch calculations. One of the problems in that \r\n"
- "application is a common radar one, that of smoothing and predicting an aircraft
  \r\n"
- "track. The radar information is in polar co-ordinates - range and bearing - \r\n"
- "and must first be converted to X-Y co-ordinates, or latitude and longitude. \r\n"
- "\r\n"
- "Radar data is usually noisy: it can be smoothed by fitting a straight line or a
  \r\n"
- "low order polynomial to it by the method of least squares. The easiest way to do
  \r\n"
- "this is by use of orthogonal polynomials, and the noise reduction of the \r\n"
- "smoothing formulae so obtained is given by the sum of the squares of the \r\n"
- "coefficients. Taking an odd number of points and estimating the midpoint by \r\n"
- "means of a smoothing formula will always result in the greatest noise reduction:
  \r\n"
- "the greater the number of points and the lower the order of the polynomial the
  \r\n"
- "better, in this respect. \r\n"
- "\r\n"
- "Unfortunately, such an estimate of position is out of date; if one wants to \r\n"
- "obtain an estimate of the latest point, or even one point ahead, to allow for \r\n"
- "the computation time, a large number of points must be used in the smoothing \r\n"
- "formula to obtain a useful reduction in noise. \r\n"
- "\r\n"
- "The first process control application of Argus was to control a soda ash plant
  \r\n"
- "for ICI at Fleetwood. Following discussions between Ferranti and ICI at \r\n"
- "Nantwich, Alan Thompson of ICI realised that the use of a computer could be an
  \r\n"
- "economical solution if it not only took a supervisory role - printing plant and
  \r\n"
- "alarm data and calculating set points - but was also able to replace all the \r\n"
- "pneumatic 3-term controllers, of which there were just over a hundred. \r\n"
- "\r\n"
- "The plant was a fairly docile one, so if the computer failed, as long as the \r\n"
- "control valves were isolated, it could coast along without danger or too much \r\n"
- "loss of efficiency. Three-term controllers take a weighted sum of terms which \r\n"
- "are proportional to the error and the differential and integral of it. The last
  \r\n"
- "two terms deal with stability and drift respectively. \r\n"
- "\r\n"
- "Experiments with sampling servos and programming transfer functions to stabilise
  \r\n"
- "them, using the z-transform, had already been conducted with the small computer
  \r\n"
- "that preceded Argus. It was a revolutionary way of using a digital computer, \r\n"
- "because time was a parameter - as it is in a digital filter. Incidentally, a \r\n"
- "smoothing formula is really a low-pass filter and its frequency response can be
  \r\n"
- "calculated by z-transform methods. \r\n"
- "\r\n"
- "The integral term could be obtained by summation instead of integration, \r\n"
- "although this needed to use double length arithmetic in order to obtain the \r\n"
- "necessary accuracy. The rate of change of error was found by taking the \r\n"
- "difference of two consecutive sample values, but noise due to quantisation and
  \r\n"
- "other sources necessitated smoothing the data. A smoothing formula like that \r\n"
- "used for the radar application would have used too much storage when many loops
  \r\n"
- "were to be controlled, so the solution was to use a recursive smoothing formula.
  \r\n"
- "Put simply, this involved taking a fraction K of the latest difference plus a \r\n"
- "fraction 1 - K of the previous value of the rate as the new value for the rate,
  \r\n"
- "giving the following smoothed rate term: \r\n"
- "\r\n"
- "yn = K(xn - xn-1) + (1 - K)yn-1 \r\n"
- "\r\n"
- "The degree of smoothing depended on the value of K - the noise was reduced by a
  \r\n"
- "factor K/(2 - K). For example, with K=1/8, the noise was reduced to 1/15, as \r\n"
- "with a 15-point moving average filter, yet required the storage of only one \r\n"
- "extra value. The filter inserted a first order lag in the system, with time \r\n"
- "constant T/[(-ln(1 - K)], T being the sampling time. For T=5 seconds and \r\n"
- "K=1/8, the time constant was about 37.5 seconds, which was small compared with
  \r\n"
- "that of the plant and did not affect loop stability. \r\n"
- "\r\n"
- "The settings of the valves that had to be controlled were calculated \r\n"
- "sequentially every second for the fast loops - half of them - and every five \r\n"
- "seconds for the remainder. The valves were operated pneumatically; air was \r\n"
- "either admitted or exhausted at a controlled rate using solenoid valves. This \r\n"
- "only required two bits of information, so that the control signals for six \r\n"
- "valves were packed into one 12-bit word. The positions of the main valves, which
  \r\n"
- "took about 10 seconds to stroke, were measured with a potentiometer to 1% \r\n"
- "accuracy and examined 20 times a second so that they did not overshoot the dead
  \r\n"
- "space. This operation used 70% of the computer time, but left sufficient time \r\n"
- "for the other calculations, which were carried out less frequently. \r\n"
- "\r\n"
- "Isolating the computer from the plant when the checking program found a fault \r\n"
- "was considered to be too drastic in certain cases, for example where the trouble
  \r\n"
- "was an instrumentation failure. An improvement was simply to indicate where the
  \r\n"
- "fault lay, so that the affected part of the plant could be controlled either \r\n"
- "manually or by conventional methods; the isolation procedure then being used \r\n"
- "only for computer faults, which happened rarely. \r\n"
- "\r\n"
- "The computer was installed at Fleetwood in 1962, but after two years, the plant
  \r\n"
- "was shut down and the computer was used to control another similar plant at \r\n"
- "Winnington in Cheshire. Then in 1980, after 18 years of service, and still in \r\n"
- "working order, it was removed to the Science Museum in London. \r\n"
- "Editor's Note: this article is based on the talk given by the author to the \r\n"
- "North West Group of the Society at the Manchester Museum of Science and Industry
  \r\n"
- "on 10 February 1998.\r\n"
- "\r\n"
- "Top  Previous  Next Obituary: Peter Hunt\r\n"
- "Peter Hunt, a pioneer of large-scale software development, died in February aged
  \r\n"
- "70. \r\n"
- "Peter became one of the first UK computer users when he was employed, in the \r\n"
- "early fifties, in the Aerodynamics Department of the de Havilland Aircraft \r\n"
- "Company. During his three years there he learnt how to program Edsac, the Pilot
  \r\n"
- "Ace, Pegasus and the Elliott 401, and developed a variety of aircraft \r\n"
- "applications. \r\n"
- "\r\n"
- "In 1955 he was recruited by Ferranti, initially to work on aircraft applications
  \r\n"
- "for Pegasus. In the hope of stimulating sales of this computer, he developed \r\n"
- "some of the earliest standardised packages. He was later responsible for \r\n"
- "software and customer support on Perseus, the first Ferranti commercial \r\n"
- "computer. In the early 1960s, as Head of the Lily Hill Laboratories in \r\n"
- "Bracknell, he was responsible for the project management of two of the largest
  \r\n"
- "contracts undertaken at that time by the UK computer industry, the Orion 2 \r\n"
- "system at the Prudential and the Atlas 2 system at the UK Atomic Energy \r\n"
- "Authority. \r\n"
- "\r\n"
- "Following the takeover of the Ferranti computer division by ICT in 1964, he was
  \r\n"
- "made Head of Systems Development Organisation, responsible for developing a \r\n"
- "portfolio of systems and application software for the 1900 series. Under his \r\n"
- "inspirational leadership and sound project management more than 1000 programmers
  \r\n"
- "produced more than 100 software products, and as a result ICL won a Queen's \r\n"
- "Award for Industry in 1968 \"for technical innovation in the production of \r\n"
- "software\". Peter gave a talk to the Society on this subject at our 1900 seminar
  \r\n"
- "at the Science Museum in May 1996. \r\n"
- "\r\n"
- "In 1968 Peter left ICT (which had by then become ICL) to take up a position as
  \r\n"
- "managing director of the UK branch of Leasco Software. Over the next 12 years \r\n"
- "Peter built the company up to become one of the most influential of the early UK
  \r\n"
- "software houses. Leasco Software specialised in real time software projects, \r\n"
- "many of which involved pioneering communications developments. Peter was also \r\n"
- "chairman for four years of sister company Leasco Response, which operated a \r\n"
- "timesharing bureau service. \r\n"
- "\r\n"
- "In 1980 he left Leasco to operate as an independent consultant. During his later
  \r\n"
- "years he also developed a practice as an expert witness in legal cases \r\n"
- "concerning computer software in both the UK and the US.\r\n"
- "\r\n"
- "Top  Previous  Next Society Activity\r\n"
- "Small-Scale Experimental MachineChris Burton \r\n"
- "\r\n"
- "After moving the machine from the University to the Museum of Science and \r\n"
- "Industry in Manchester at the end of February, we continued to improve \r\n"
- "reliability and added various authentic details, for example some special \r\n"
- "stabilised power units and the correct Monitor CRT EHT unit. Other cosmetic \r\n"
- "improvements such as signwriting took place. The Remote Monitor was improved so
  \r\n"
- "that it could be incorporated in the barrier separating the public from the \r\n"
- "machine. A special comparator unit was designed and wired in to help find \r\n"
- "transient faults in the three CRT units. Experience helped us to optimise the \r\n"
- "setting up of the stores so as to be reasonably reliable, giving program runs of
  \r\n"
- "half an hour or more between failures. \r\n"
- "\r\n"
- "There was intense activity around us in the museum during the week starting 15
  \r\n"
- "June, as the galleries and supporting material for the SSEM were being prepared.
  \r\n"
- "The official \"switch-on\" took place on 17 June, using a satellite video link
  \r\n"
- "from the museum to the Bridgewater Hall, where 1800 people saw the mssage \"HELLO
  \r\n"
- "WORLD 1948\" stored in the CRT tube and displayed on the monitor. \r\n"
- "\r\n"
- "By 19 June, the main CRT store had suddenly badly deteriorated, and would not \r\n"
- "store correctly. Intensive work over the next two days could not identify what
  \r\n"
- "had changed, so that by Sunday 21 June - the actual 50th anniversary - we felt
  \r\n"
- "the store was not reliable enough to get through the day's events. I therefore
  \r\n"
- "had to declare that for the day we had bypassed the main store. The machine was
  \r\n"
- "formally handed over to the safekeeping of the museum, and then Tom Kilburn and
  \r\n"
- "Geoff Tootill re-ran the first program at 1115, as they had done half a century
  \r\n"
- "before. We thereby met our goal in spirit if not to the letter. In the afternoon
  \r\n"
- "of 21 June Sebastian de Ferranti made the awards to the winners of the \r\n"
- "programming competition. This was the last of the week's events. \r\n"
- "\r\n"
- "The substantial part of our project is now complete. There is a great deal of \r\n"
- "documentation still to finish, and we have to find out what has happened to the
  \r\n"
- "main store and fix it. We also have to work out a way of maintaining the machine
  \r\n"
- "and demonstrating it to the public, without the team feeling it has a job for \r\n"
- "life! \r\n"
- "\r\n"
- "To have got this far is a stunning tribute to project team members Charlie \r\n"
- "Portman, Ken Turner, Keith Wood, George Roylance, Bill Purvis, Adrian Cornforth
  \r\n"
- "and Suzanne Walker, who have collectively put in nearly 11,000 hours of \r\n"
- "voluntary effort, and who have brought tremendous credit to the CCS. In material
  \r\n"
- "and supportive terms, the project has been made possible by the £150,000-\r\n"
- "worth of sponsorship from ICL, by the University of Manchester and the Museum of
  \r\n"
- "Science and Industry, and by numerous individuals. \r\n"
- "\r\n"
- "Pegasus Working PartyLen Hewitt\r\n"
- "\r\n"
- "Since the last Pegasus Working Party report in Resurrection issue 18 in autumn
  \r\n"
- "1997, work has continued at fortnightly intervals. We have made remarkable \r\n"
- "progress, with some setbacks on the way. Pegasus has worked consistently well,
  \r\n"
- "and we have cleared a number of intermittent faults which had plagued us for a
  \r\n"
- "long time. \r\n"
- "\r\n"
- "In February we started to test the spare packages in their number order in the
  \r\n"
- "positions recommended in the maintenance manual. I had to go to the USA in the
  \r\n"
- "middle of the month, and at the last meeting I attended before I left we had a
  \r\n"
- "major disaster. \r\n"
- "\r\n"
- "We had got up to testing the Type 13 Clock/Reset package in position 10C. All \r\n"
- "previous testing had been done with HT on when removing and replacing packages.
  \r\n"
- "Things had been going so well that I had forgotten the significance of the power
  \r\n"
- "valves in the Type 13 package, and the heavy currents dissipated. This problem
  \r\n"
- "took a few meetings to resolve, as it was a multiple fault which affected more
  \r\n"
- "than the package we were testing. The fact that the problem arose on Friday 13th
  \r\n"
- "was just a coincidence! \r\n"
- "\r\n"
- "We have now completed testing the spare packages, and moved on to testing the \r\n"
- "drum. We have had consistent failures on the drum tests for many years, and were
  \r\n"
- "concerned that it was a drum surface problem and that we would have to swap head
  \r\n"
- "connections under the drum covers to sort the problem out. In fact by swapping
  \r\n"
- "packages and then replacing some of the switching diodes in the read switch \r\n"
- "packages we were able to establish that the drum surface was not the problem. \r\n"
- "\r\n"
- "We have now run through the complete drum tests several times, experiencing just
  \r\n"
- "an occasional failure on track zero. I believe by doing some more work on the \r\n"
- "drum packages we should be able to get even better reliability. \r\n"
- "\r\n"
- "Our next major task is to get the machine working with the marginal voltages \r\n"
- "reduced. We were advised at the last CCS Committee Meeting that Pegasus could be
  \r\n"
- "in the \"Making of the Modern World\" gallery which the Science Museum is planning
  \r\n"
- "to open in the year 2000 - this was very heartening news. \r\n"
- "\r\n"
- "I would like to thank the members of the Working Party - Derek Milledge, Martin
  \r\n"
- "Wingstedt and Peter Holland - for their support, and also Chris Burton, who has
  \r\n"
- "always had time to discuss problems even though he has been fully occupied with
  \r\n"
- "the Baby rebuild project. \r\n"
- "\r\n"
- "Simulators\r\n"
- "Simulators for a variety of historic computers including Edsac, Elliott 903, \r\n"
- "Pegasus, the Manchester University Small-Scale Experimental Machine and Zebra\r\n"
- "can be found at our FTP site. Access details are on the next page.\r\n"
- "\r\n"
- "TopPrevious NextFTP, Web and E-mail Addresses\r\n"
- "The Society has its own World Wide Web (WWW) site: it is located at\r\n"
- "http://www.cs.man.ac.uk/CCS/. \r\n"
- "This is in addition to the FTP site at \r\n"
- "ftp.cs.man.ac.uk/pub/CCS-Archive. \r\n"
- "The pages of information at our Web site include information about \r\n"
- "the SSEM rebuild project as well as selected papers from \r\n"
- "Resurrection. \r\n"
- "Full access to the FTP archive is also available for downloading \r\n"
- "files, including the current and all past issues of  Resurrection \r\n"
- "and simulators for historic machines.\r\n"
- "\r\n"
- "Many readers will also be interested in WWW sites run by other bodies \r\n"
- "concerned with the history of information technology. \r\n"
- "The Universal Resource Locators for a few of these organisations \r\n"
- "are as follows:\r\n"
- "\r\n"
- "Bletchley Park (contains information on Colossus) \r\n"
- " \r\n"
- "http://www.cranfield.ac.uk/CCC/BPark/ \r\n"
- "Manchester University (for its early computers) \r\n"
- "\r\n"
- "http://www.cs.man.ac.uk/mark1/ \r\n"
- "Science Museum \r\n"
- "\r\n"
- "http://www.nmsi.ac.uk/ \r\n"
- "National Archive for the History of Computing \r\n"
- "\r\n"
- "http://www.man.ac.uk/Science_Engineering/CHSTM/nahc.htm \r\n"
- "The Virtual Museum of Computing (a rich source of links to other computer history
  resources) \r\n"
- "\r\n"
- "http://www.comlab.ox.ac.uk/archive/other/museums/computing.html \r\n"
- "Readers of Resurrection who wish to contact committee members \r\n"
- "via electronic mail may do so using the following addresses.\r\n"
- "\r\n"
- "[The printed version contains the email addresses of Committee members]\r\n"
- "\r\n"
- "TopPrevious NextForthcoming Events\r\n"
- "5-6 September 1998, and fortnightly thereafter Guided tours and\r\n"
- " exhibition at Bletchley Park, price £3.00, or £2.00 for \r\n"
- "concessionsExhibition of wartime code-breaking equipment and procedures, \r\n"
- "including the replica Colossus, plus 90 minute tours of the wartime buildings\r\n"
- "\r\n"
- "29 September 1998 North West Group meeting \"The Early Days of the NCC\"\r\n"
- "\r\n"
- "20 October 1998 North West Group meeting \"From Freelance Programmers to F1 Group
  plc\"\r\n"
- "\r\n"
- "24 November 1998 North West Group meeting \"The Distributed Array Processor\" \r\n"
- "\r\n"
- "The North West Group meetings will take place in the Conference room at the \r\n"
- "Manchester Museum of Science and Industry, starting at 1730. \r\n"
- "\r\n"
- "For information on London meetings, readers should refer to the insert enclosed
  \r\n"
- "with this issue. \r\n"
- "\r\n"
- "Queries about London meetings should be addressed to George Davis on 0181 681 \r\n"
- "7784, and about Manchester meetings to William Gunn on 01663 764997. \r\n"
- "\r\n"
- "TopPrevious NextCommittee of the Society\r\n"
- "[The printed version carries contact details of committee members]\r\n"
- "Chairman  Brian Oakley CBE FBCSVice-Chairman  Tony Sale FBCSSecretary  Hamish Carmichael
  FBCSTreasurer  Dan HaytonScience Museum representative  Doron Swade CEng MBCSChairman,
  Elliott 803 Working Party  John SinclairChairman, Elliott 401 Working Party  Chris
  Burton  CEng FIEE FBCSActing Chairman, Pegasus Working Party  Len Hewitt MBCSChairman,
  DEC Working Party  Dr Adrian Johnstone CEng MIEE MBCSChairman, S100 bus Working
  Party  Robin ShirleyChairman, Turing Bombe Working Party  John Harper CEng MIEE
  MBCSChairman, North West Group  Professor Frank Sumner FBCSMeetings Secretary  George
  Davis CEng FBCSEditor, Resurrection  Nicholas EnticknapArchivist  Harold Gearing
  FBCSDr Martin Campbell-KellyProfessor Sandy Douglas CBE FBCSDr Roger Johnson FBCSGraham
  Morris FBCSJohn Southall FBCSEwart Willey FBCS\r\n"
- "\r\n"
- "TopPrevious articleAims and objectives\r\n"
- "The Computer Conservation Society (CCS) is a co-operative venture \r\n"
- "between the British Computer Society, the Science Museum of London \r\n"
- "and the Museum of Science and Industry in Manchester.\r\n"
- "The CCS was constituted in September 1989 as a Specialist Group of \r\n"
- "the British Computer Society (BCS). It thus is covered by the Royal \r\n"
- "Charter and charitable status of the BCS.\r\n"
- "The aims of the CCS are to\r\n"
- "Promote the conservation of historic computers and to identify existing \r\n"
- "computers which may need to be archived in the future\r\n"
- "Develop awareness of the importance of historic computers\r\n"
- "Encourage research on historic computers and their impact on society\r\n"
- "Membership is open to anyone interested in computer conservation and \r\n"
- "the history of computing.\r\n"
- "The CCS is funded and supported by a grant from the BCS, fees from \r\n"
- "corporate membership, donations, and by the free use of Science Museum \r\n"
- "facilities. Membership is free but some charges may be made for \r\n"
- "publications and attendance at seminars and conferences.\r\n"
- "There are a number of active Working Parties on specific computer \r\n"
- "restorations and early computer technologies and software. Younger people \r\n"
- "are especially encouraged to take part in order to achieve skills transfer.\r\n"
- "The corporate members who are supporting the Society are ICL and Vaughan Systems.\r\n"
- "\r\n"
- "Resurrection is the bulletin of the Computer \r\n"
- "Conservation Society and is distributed free to members. Additional \r\n"
- "copies are £3.00 each, or £10.00 for an annual \r\n"
- "subscription covering four issues. Editor - Nicholas Enticknap\r\n"
- "    Typesetting - Nicholas Enticknap Typesetting design - Adrian Johnstone\r\n"
- "    Cover design - Tony SalePrinted by the British Computer Society\r\n"
- "      © Copyright Computer Conservation SocietyComputerRESURRECTION The Bulletin
  of the Computer Conservation SocietyISSN 0958 - 7403 Number 20 Summer 1998Nicholas
  Enticknap, EditorThe major event since issue 19 of Resurrection has unquestionably
  been the \r\n"
- "golden jubilee of the first operational stored program computer, which was \r\n"
- "celebrated with great enthusiasm in Manchester in June. The major events \r\n"
- "included the \"Launch Event\" at the Bridgewater Hall on 17 June, the Golden \r\n"
- "Anniversary Conference which spanned the next two days, and the handover of the
  \r\n"
- "rebuilt SSEM to the Museum of Science and Industry on the anniversary itself, 21
  \r\n"
- "June. These events were attended by just about everybody connected with Manchester
  \r\n"
- "computing past and present. Sir Freddie Williams was represented by his widow,
  \r\n"
- "Lady Williams, who operated the switch that formally brought the replica SSEM to
  \r\n"
- "life, in front of an audience of 1800 people in the Bridgewater Hall. Professor
  \r\n"
- "Tom Kilburn is happily still with us - a mere stripling of 76 - and he gave \r\n"
- "both this audience and the one that attended the Golden Anniversary conference
  \r\n"
- "his reminiscences of the days leading up to 21 June 1948. All of these events are
  reviewed in more detail in the following pages. We are \r\n"
- "also particularly pleased to publish an article which provides an original \r\n"
- "Resurrection contribution to the anniversary. It was written by Geoff Tootill,
  \r\n"
- "and describes the detective work put in by himself and Professor Kilburn in re-\r\n"
- "creating the world's first operational program in the exact form in which it ran
  \r\n"
- "on that epochal day 50 years ago. Geoff's article includes complete listings of
  \r\n"
- "both the earliest surviving form of this program (dating from a month after the
  \r\n"
- "first run) and of the original version as reconstructed. Within 15 years computing
  had advanced so fast that it was possible for the \r\n"
- "world's leading computer manufacturer, IBM, to launch a complete range of \r\n"
- "compatible machines on 7 April 1964 - another key date in the history of \r\n"
- "computing. In this issue, Peter Titman recalls the thinking and decision-making
  \r\n"
- "processes that lay behind this \"bet your company\" decision. By then it was clear
  that the major market for computers lay in data processing \r\n"
- "rather than computation. But there were other important application areas. \r\n"
- "Maurice Gribble completes the feature articles in this issue with a look at how
  \r\n"
- "Ferranti applied computer technology to industrial process control.The Annual General
  Meeting on 29 May approved a change to the constitution of \r\n"
- "the Society which provides formal recognition of our close links with the Museum
  \r\n"
- "of Science and Industry in Manchester. -101010101-Society Chairman Brian Oakley
  highlighted three achievements of the CCS year in \r\n"
- "his address to the AGM: the reconstruction of the Manchester University Small-\r\n"
- "Scale Experimental Machine; the progress made on the Bombe project; and the \r\n"
- "successful move of the Pegasus from the old canteen of the Science Museum to \r\n"
- "Blythe House. -101010101-The AGM re-elected all current officers and committee
  members of the Society. -101010101-The London Science Museum plans to feature the
  CCS Pegasus as the highlight of a \r\n"
- "new exhibition which is scheduled to open in the year 2000. -101010101-Nortel has
  made a generous sponsorship donation to the Bombe Proj\\-ect. A large \r\n"
- "cheque was handed over at a formal ceremony on 12 June. -101010101-The highlight
  of this event was the decryption of an original wartime German \r\n"
- "coded message, sent on 1 November 1944. The message was of course decoded at the
  \r\n"
- "time, but no record was kept of the Enigma settings used to do it. Tony Sale \r\n"
- "used the Bombe simulator to find these settings, and then configured an actual
  \r\n"
- "Enigma to decrypt the message. Then, to prove the concept, he successfully \r\n"
- "decoded a further message sent later the same day. -101010101-We are grateful to
  everybody who responded to our appeal in the last issue for \r\n"
- "volunteers to help with the Bombe Project. This has allowed the team to complete
  \r\n"
- "the database construction and to make very substantial progress on the CAD work.
  -101010101-Adrian Johnstone has reassumed the chairmanship of the DEC Working Party,
  and is \r\n"
- "focussing the team's efforts on a PDP-11/34 used at one time in the policing of
  \r\n"
- "the nuclear test ban treaty. -101010101-Three meetings were held in London during
  the spring. The first, on 12 March, \r\n"
- "saw Donald Davies and Roger Scantlebury presenting on \"The Origins of Packet \r\n"
- "Switching and the Early Arpa network\", and attracted an audience of 37. -101010101-This
  was followed by another seminar on a networking theme on 30 April, where \r\n"
- "Bob Cooper spoke on \"The History of Academic Networking in the UK\". He was \r\n"
- "followed by Peter Kirstein, who gave a talk on \"The History of Arpanet and early
  \r\n"
- "Internet in the UK\". -101010101-Finally, following the AGM Brian Shackel addressed
  members on \"Human Factors - \r\n"
- "-101010101-Details of the North West Group meetings programme for the autumn can
  be found \r\n"
- "under Forthcoming Events on page 44. Planning is also well advanced for three \r\n"
- "meetings in early 1999: on \"The Leo Computer\" on 26 January; on \"Computers on
  \r\n"
- "Display\" on 23 February; and on \"The Transputer\" on 23 March. -101010101-The
  Committee of the Society has formulated a policy statement concerning \r\n"
- "procedures for dealing with computers of historical interest that come to the \r\n"
- "Society's attention. This is published in full below. \r\n"
- "\r\n"
- "Nicholas EnticknapThe computer is now more than 50 years old. The golden jubilee
  was marked by a \r\n"
- "series of celebrations in Manchester in the week leading up to the anniversary
  \r\n"
- "on 21 June, which fell on a Sunday. Achievement it certainly was. The designers
  of the original were too busy \r\n"
- "building it and getting it to work to have time to produce drawings or circuit
  \r\n"
- "diagrams (lack of documentation has been a problem since the very dawn of the \r\n"
- "computing age!). Fortunately, Dai Edwards, who joined the computer team three months
  after the \r\n"
- "first program ran, did produce some detailed drawings while the SSEM was in the
  \r\n"
- "process of evolving into the first full-scale Manchester computer, the Mark I,
  \r\n"
- "and the notebook he used has survived. Chris Burton told the packed audience at
  \r\n"
- "the launch ceremony, \"I mainly used that, and also Alec Robinson's photographs,
  \r\n"
- "which I scanned into a computer to work out the dimensions accurately\". Building
  the replica was the next problem, as the components used in it have \r\n"
- "been obsolete for many years. Despite that, Chris found that there are still \r\n"
- "dealers who maintain stocks of things such as thermionic valves and 1940s-\r\n"
- "vintage cathode ray tubes. He added, \"The pushbuttons used to key in a program
  were originally used on \r\n"
- "Spitfires. They cost 3/11 [just under 20p] in 1953, and I got them for £30 \r\n"
- "in 1995\". The standard Post Office steel racks used to house these components
  \r\n"
- "presented more difficulty than anything: two of them eventually came \"from the
  \r\n"
- "bottom of a Shropshire garden\". The result of this reconstruction process was
  highly praised by Tom Kilburn, who \r\n"
- "described the replica as \"not only identical in appearance, but identical in \r\n"
- "every wire and every circuit. It would not be able to be differentiated from the
  \r\n"
- "Baby by any computer scientist\". Kilburn's only reservation was that the replica
  \r\n"
- "was much cleaner than the original! Professor Kilburn recalled the events of 21
  June 1948 in two separate addresses, \r\n"
- "one during the launch ceremony and the other during the Golden Anniversary \r\n"
- "conference which followed on 18-19 June. Most readers will know that the prime
  focus of the research conducted by \r\n"
- "Williams and Kilburn at Manchester University during the immediate postwar years
  \r\n"
- "was the development of the cathode ray tube as a memory device. By the autumn of
  \r\n"
- "1947 they had got to the point where they could store 1024 bits for a period of
  \r\n"
- "several hours. \"At this stage\", said Kilburn, \"we had demonstrated that letters
  \r\n"
- "typed in via a keyboard could be stored, but not digits arrived at as a result
  \r\n"
- "of computation. We needed a computer to do this.\" There was, of course, no such
  thing available in the shops at the time, so the \r\n"
- "team had to build its own. That was the reason for building the SSEM. The story
  of the SSEM has been told many times: as Kilburn said, \"What new can \r\n"
- "be said about the Baby?\". What is perhaps not so well known is the story of the
  \r\n"
- "program than ran on 21 June 1948 itself. \"The problem was to find the highest
  \r\n"
- "factor of an integer. We selected this problem to program because it used all \r\n"
- "seven instructions, and also combinations of instructions. It was of no \r\n"
- "mathematical significance, but everybody understood it.\" As with the machine itself,
  there is no contemporary extant documentation of the \r\n"
- "program. It \"was actually written some time before, on the train going to \r\n"
- "Dewsbury\", where Kilburn was living at the time. It was developed before the run
  \r\n"
- "on 21 June 1948, and developed further before Geoff Tootill wrote down the \r\n"
- "listing around a month later. Considerable detective work was needed to \r\n"
- "reconstruct the version actually used for the first run, and this is described
  \r\n"
- "in detail by Tootill elsewhere in this issue. It was left to Gordon Bell to put
  the successful construction and operation of \r\n"
- "the SSEM into perspective. He pointed out that although the computer as \r\n"
- "understood today was conceived in 1946, \"until you actually do it it doesn't \r\n"
- "exist, it's just another idea\". Several teams of researchers were trying to \r\n"
- "translate the concept into reality: the Manchester team was the one that \r\n"
- "succeeded and so kicked the computer industry into life. Bell also paid tribute
  to the CRT development work as a major necessary \r\n"
- "precursor to the computer. \"It was really the Williams tube that got the machine
  \r\n"
- "going\". Why did Manchester get to the winning post first? Two principal themes
  emerged \r\n"
- "from talks given by various speakers. One of them was the enormous influence of
  \r\n"
- "the Telecommunications Research Establishment (TRE) at Malvern. The CRT and subsequent
  SSEM projects had their genesis there, before Williams \r\n"
- "and Kilburn moved to Manchester. Kilburn revealed that \"we had got to the stage
  \r\n"
- "of decoding 0 and 1 before we left Malvern, but we had to decide why it worked,
  \r\n"
- "and how they could be refined\". Alec Robinson paid tribute not only to \"the backlog
  of ideas\" which came from \r\n"
- "TRE, but also to the \"TRE techniques\" that were followed at Manchester. TRE \r\n"
- "influence was also valuable in insulating the design team from the problem of \r\n"
- "postwar shortages. Robinson was one of the few Manchester people who had not himself
  come from TRE \r\n"
- "(he was previously with English Electric). Geoff Tootill did, and he recalled it
  \r\n"
- "as \"the pre-eminent electronics R&D establishment during the war\", adding that
  \r\n"
- "it was \"a hothouse of talent\". Alumni included, apart from those that went to
  \r\n"
- "Manchester, Maurice Wilkes (who went on to develop Edsac) and John Pinkerton \r\n"
- "(the chief designer of Leo). The other major factor was the leadership of Freddie
  Williams, acknowledged by \r\n"
- "Manchester University Chancellor Lord Flowers in a tribute to his \"unique \r\n"
- "inspiration, skill and enthusiasm\" which \"was so vital in the early days of \r\n"
- "computing\". Geoff Tootill described him simply as \"the boffin's boffin\". Alec
  Robinson, who joined the Manchester team in 1947, recalled that \"The \r\n"
- "atmosphere was very pleasant, and very informal compared to English Electric. \r\n"
- "Professor Williams' way of working was to let people get on with it. He didn't
  \r\n"
- "leave you alone, though: he provided plenty of encouragement, and gave you a lot
  \r\n"
- "of ideas. \"There were very few people involved, so communications were easy. You
  were \r\n"
- "allowed to pursue your own ideas in a way that was very exciting.\" Readers who
  would like to see what the very first operational stored program \r\n"
- "computer looked like can inspect Chris Burton's replica at the Manchester Museum
  \r\n"
- "of Science and Industry.Geoff TootillThere is no contemporary record of the epoch-making
  program that started \r\n"
- "computing as we know it today. This article documents an attempt to discover the
  \r\n"
- "precise form of that program. The attempt has almost certainly been successful,
  \r\n"
- "but there is still one remaining unanswered question. Tom Kilburn and I have been
  trying to reconstruct the original version of the \r\n"
- "little Highest Factor program (or \"Table of Instructions\") Tom wrote in 1948,
  to \r\n"
- "test the Small-Scale Experimental Machine (SSEM) at Manchester University. This
  \r\n"
- "was the first program ever to run on a wholly electronic stored program \r\n"
- "computer. Until 1996, all that was extant of this program was the \"Amended Version\"
  \r\n"
- "recorded in my lab notebook, which is dated 18 July 1948. By then I had improved
  \r\n"
- "the version that ran on 21 June 1948. When I looked at this matter in 1975, at
  Simon Lavington's request, I remembered \r\n"
- "that to produce the version in my notebook, I had altered the original to \r\n"
- "prevent the starting value for the trial factor being overwritten. I had also \r\n"
- "determined that I could save one or more instructions to improve Tom's code. In
  1975, I couldn't remember how, and I wasn't able then to work out how to \r\n"
- "\"disimprove\" my version. To preserve the starting trial factor, and to avoid
  \r\n"
- "having to input both positive and negative versions of it, I would have added \r\n"
- "probably four instructions: however, I then cut out two of Tom's instructions,
  \r\n"
- "making the surviving documented version just the known nett two instructions \r\n"
- "longer than the original version. With a fresh look at all the data, including
  statements made in the contemporary \r\n"
- "letter by Williams and Kilburn to Nature, Tom and I now think we've \r\n"
- "largely solved the problem. We discussed it in detail on 22 March 1996. I then
  dug out a (rather poor) \r\n"
- "photocopy of my 1948 notebook, and rediscovered some notes we made when the SSEM
  \r\n"
- "first ran (see next page). I copied them, made some inferences from them, and \r\n"
- "sent a copy to Tom on 25 March. Tom and I had further talks on 27 and 29 March,
  and agreed various points, which \r\n"
- "I incorporated in a revised document called \"Further Analysis and Comments\" \r\n"
- "(which follows).       c(?) 11011 10111 00111(Note 1)2???(b)  00100 01000 11(Note
  2)22 ~?(b) 00111 10111 01111 1-(Note 3)20 Answer 11101000001(Note 4)Answer 1046   +1   in
  1 minutea = 4537 (= 13 x 349)Problem        a= 10011, 10110, 0014537line 19 c(a)
  11100,01001,11011,11...      20 b     00011,10110,001004536      22 c(b) 00010,01001,11011,11...(Note
  5)line 20 Answer -1 should be 348101110101(Note 6)line 24 should be blank(Note 7)CR
  no. should be 17(Note 8)Time 2 mins 25 secsAdditional notes made in 1996: these
  Operating Notes are taken from a \r\n"
- "photocopy of the 29th page of my 1948 notebook, which was headed \"Numbers used
  \r\n"
- "in Tom's Routine, 21/6/48\". The first three lines are in my handwriting, and \r\n"
- "most of the rest in Tom's. \"?\" denotes illegible in the photocopy.Note 1: c(
  ) means twos complement; this one is -a = 3141Note 2: This one is b1, of value a-1
  = 3140Note 3: and this is -b1.Note 4: This is 1047, ie the highest factor of 3141;\r\n"
- " I think we worked this out beforehand, so we would know if the answer was right.Note
  5: I infer we had to load b in 20, and -b in 22.Note 6: Tom bracketed this line
  with the next \r\n"
- "two and awarded them a tick to indicate that the machine had got the right answer.Note
  7: So line 24 held the remainder.Note 8: So the \"Stop\" instruction was in line
  17Tom, meanwhile, dictated his further thoughts onto a cassette tape on 29 March
  \r\n"
- "(this has now been transcribed under the name \"The First Program\"). He sent \r\n"
- "copies of the tape to Chris Burton and myself, accompanied by a manuscript dated
  \r\n"
- "29 March and starting \"The most likely first program is...\". The program Tom
  had \r\n"
- "worked out is exactly the same as the one I had worked out independently, which
  \r\n"
- "I sent to him on 31 March. The two documents crossed in the post. What follows
  is my attempt at an exhaustive version of the analysis of the \r\n"
- "available data and synthesis of the original \"Table of Instructions\".The \"Amended
  Version\" dated 18 July 1948 in my notebook consists of: \r\n"
- "Initialisation (lines 1-4)\r\n"
- "Trial subtraction, Test sign of difference and Jump back (lines 6-8)\r\n"
- "Form remainder r n, Test it and Stop if Zero (lines 9-13)\r\n"
- "Form new divisor b(n+1), Jump back, Load a (lines 14-19 and 5)\r\n"
- "Fixed data (lines 20-24)\r\n"
- "Variable data (lines 25-27)I don't think we invented initialisation until a week
  or so after 21 June - the \r\n"
- "lavish idea of having instructions that would only be obeyed once seemed \r\n"
- "inefficient to me - but all the other elements must have been present in the \r\n"
- "Original Version. The 18 July 1948 version of the program is as follows (I wrote
  the explanatory \r\n"
- "comments in italics in 1998): 1 -24,  C load -b1 2    c,  26store -b1 3 -26,  Cload
  +b1 4   c,  27store +b1 5 -23,  Cload a 6 Sub 27Trial subtraction 7 Testis difference
  negative? 8 Add 20, Clstill positive, Jump back two lines 9 Sub 26overshot, so add
  back bn10   c, 25store +r n11 -25,  Cload -rn12 Testis remainder zero?13 Stopyes14
  -26,  Cno; load +bn15 Sub 21form b(n+1) = bn - 116   c,  27store b(n+1)17 -27,  Cload
  -b(n+1)18   c,  26store it19  22,  ClJump to line 5 initcurrentfinal20-321122423-a24b125-r
  nr N(=0)26--bn-bN27-bnbNThe Operating Notes show that, in the Original Version,
  at the \"Stop\", line 20 \r\n"
- "contained one less than the \"Answer\", so, rather strangely, the \"Stop\" occurred
  \r\n"
- "after \"Form new divisor\". Therefore after the end of the \"Trial subtractions\"
  \r\n"
- "the sequence must have been: \"Form remainder\" (correction of the overshoot of
  \r\n"
- "the \"Trial subtraction\" cannot be postponed, because the value of bn \r\n"
- "needed would not still be available), \"Form new divisor\", \"Test remainder\",
  etc. Furthermore, the first \"Trial subtraction\" must have preceded \"Form new
  divisor\" \r\n"
- "in the Table of Instructions, because it seems we worked out b1 = a-1, \r\n"
- "and -b1 by hand and typed them in. If \"Form new divisor\" had preceded \r\n"
- "the first \"Trial subtraction\", we could just have put b1 = a, and not \r\n"
- "bothered to work out -b1. So the first lines of the main loop were \"Load \r\n"
- "a\", \"Trial subtraction\", \"Test sign of difference\", \"Jump back\". From the
  letter to Nature, we know that the Table of Instructions \r\n"
- "was 17 in number, ignoring repetitions of the inner loop. From the \r\n"
- "Operating notes, we know that the \"Stop\" instruction was in line 17, and not
  \r\n"
- "immediately after the \"Test\" instruction as in the Amended Version. This was
  \r\n"
- "very likely intended to show with complete clarity that the original version \r\n"
- "could be part of a larger program, with further instructions following line 16
  \r\n"
- "and replacing the \"Stop\". Tom concurs in his audio tape that this is what he
  had in mind. Similarly, he \r\n"
- "agrees that the first line of the program cleared the accumulator simply to \r\n"
- "illustrate a point of sound practice, even though it was quite unnecessary in \r\n"
- "this case. The reconstructed original version that follows respects all these constraints.
  \r\n"
- "It also uses the lines that follow the instructions consecutively (except for \r\n"
- "line 24) for the fixed and variable data indiscriminately, so I can believe that
  \r\n"
- "Tom started with consecutive lines but altered the sequence a bit during program
  \r\n"
- "development. There may be other solutions to the problem of disimproving my Amended
  Version, \r\n"
- "but I cannot find one that meets all the conditions. For example, storing (r n
  $-$ bn),\r\n"
- " then forming -b(n+1), then forming and testing r n, \r\n"
- "then forming b(n + 1) could have 17 instructions, but leaves bN \r\n"
- "rather than b(N + 1) in line 20. I conclude that the result Tom and I \r\n"
- "arrived at is at the very least a close approximation to the Original Version.
  Here is the original \"Table of Instructions\" as synthesised from this analysis
  \r\n"
- "on 31 March 1996 (I wrote the italicised comments in 1998): 1 -18,  C clear accumulator 2
  -19,  Cload +a 3 Sub 20Trial subtraction 4 Testis difference negative? 5 Add 21,  Clstill
  positive, Jump back two lines 6 Sub 22overshot, so add back bn 7    c, 24store +r
  n 8 -22, Cload bn 9 Sub 23form b(n+1) = bn - 110   c, 20store b(n+1)11 -20, Cload
  -b(n+1)12   c,  22store it13 -24,  Cload -r n14 Testis remainder zero?15 25,  Clyes,
  Jump to line 1716 23,  Clno, Jump to line 2 (but see text)17 Stopload -b(n+1) initcurrentfinal18019-a-a20b1bn
  or b(n+1)b(N+1)21-322-b1-bn or -b(n+1)-b(N+1)23124-r nr N2516I do not have a copy
  of the Williams/Kilburn letter to Nature, but \r\n"
- "according to Simon Lavington's book it included the following passage: \"The highest
  proper factor of 218 was found by trying in a single routine \r\n"
- "every integer from (218-1) downwards... Thus about 130,000 numbers were \r\n"
- "tested, involving some 3.5 million operations. The correct answer was obtained
  \r\n"
- "in a 52 minute run. The instruction table in the machine contained 17 entries.\"
  Tom says that \"operations\" meant store accesses. Furthermore, he agrees that \r\n"
- "lines 17, 19, 20, 22 and 24 in the reconstructed version must be correct, to \r\n"
- "conform to the Operating Notes. Until recently I thought that on 21 June 1948 the
  digit period of the machine \r\n"
- "was 8.5 microseconds, and the \"bar\" (ie the instruction time) was 1.2 \r\n"
- "milliseconds. These two figures are consistent with each other, given that the
  bar\r\n"
- " was four \"beats\", with each beat being 32 digit \r\n"
- "periods plus 4 digit periods for the timebase flyback. However, on the 23rd page
  of my notebook (which was probably dated 9 June 1948), \r\n"
- "I find the following: \"13.4 [million] operations, approx. Each takes 1.35 mS.\"
  \r\n"
- "On 13 June a similar estimate of time also uses a figure of 1.35 milliseconds.
  \r\n"
- "These cannot be measured times for the calculation, because the date is before
  \r\n"
- "the computer started to work: the presumption is that they were measured bar \r\n"
- "times. This implies a digit period of 9.4 microseconds. Between 10 and 13 July
  1948, according to my notebook, I tested the version of \r\n"
- "Turing's long division program that I had corrected. I noted that 333 divided by
  \r\n"
- "3 took two seconds, and that 1,073,741,823 divided by 34,636,833 took \"about \r\n"
- "1½ seconds\". I can't remember how I measured these times, but I \r\n"
- "doubt if they would give us an estimate of the digit period at that date with \r\n"
- "useful accuracy, and I certainly cannot assume that it hadn't been changed since
  \r\n"
- "21 June. We probably changed it as often as we changed our socks. But on 3 August
  1948 there is \"...digit place 39...\" and \"Total time [1,103,872] \r\n"
- "bars = 27.5 mins ±5%\", ie 1.49 milliseconds per bar, and now with 45 digit \r\n"
- "periods per bar, the implied digit period is still 8.5 microseconds. Was this \r\n"
- "just another paper estimate, the 5% tolerance arising from the probable error \r\n"
- "in the assumed digit period, or was it a measured time? I don't know. Simon Lavington
  states that by April 1949 the word length was 40 bits and the \r\n"
- "bar 1.8 milliseconds. So, with a 5-digit period flyback, the digit period was 10
  \r\n"
- "microseconds. I do remember that we altered the digit period to 10 microseconds,
  \r\n"
- "but I can't remember whether we noticed what it really was beforehand. On various
  dates in 1948 and 1949 we experimented with different ways of digging \r\n"
- "and filling wells on the face of the main storage tube. It is quite possible \r\n"
- "that we altered the digit period for particular tests, and did not put it back
  \r\n"
- "to its previous value afterwards. The \"Further Analysis and Comments\" section
  above seems to provide valid \r\n"
- "reasoning for the reconstructed version of the original program shown, with one
  \r\n"
- "proviso: there is no evidence one way or the other for instruction 16. I said in
  \r\n"
- "my letter to Tom of 31 March that one can choose either 15 or 16 instructions in
  \r\n"
- "the main loop, by jumping back to line 2 or line 1. What I meant by this was \r\n"
- "that the main loop written code could have consisted of either 15 or 16 \r\n"
- "instructions. This is misleading in the context, because what we are really interested
  in is \r\n"
- "the number of instructions obeyed for one iteration of the main loop - that is,
  \r\n"
- "in testing one possible factor. For the values of a and b1 in the \r\n"
- "letter to Nature, lines 3 and 4 are executed twice and line 15 not at all. \r\n"
- "So in the reconstructed program as shown above, 16 instructions are executed per
  \r\n"
- "number tested. If, alternatively, line 16 reads \"18, Cl\", 17 instructions are
  executed. \r\n"
- "As it happens, both the constants (0 and 1) needed to jump to either line 1 or
  \r\n"
- "line 2 are already available, because they're both used for other purposes as \r\n"
- "well. So we cannot deduce from that whether it was 16 or 17 bars per number \r\n"
- "tested, by including or not including the superfluous \"Clear accumulator\" \r\n"
- "instruction in each iteration. To choose between these two alternatives we need
  \r\n"
- "further data. From (218-1) to 217 is certainly 131,072 numbers, so in a 52 minute
  \r\n"
- "run a digit period of 8.5 microseconds implies 19.45 instructions. This is \r\n"
- "implausible in view of the evidence for either 16 or 17 instructions. However,
  we have further timing information on the same program from the \r\n"
- "Operating Notes, with data that results in a different ratio of outer to inner
  \r\n"
- "loop executions. It is not too laborious to work out the number of bars needed
  \r\n"
- "for values of a for which we know the measured times, and indeed I have \r\n"
- "verified the figures I quote in Table 1 below by emulation. a218453731413119b1218-1453631403018bN217349104711Measured
  run time (minutes/seconds)52m2m 25s1mEstimated tolerance on measure±0.3%±2%±5%Number
  of trial subtractions262,14514,088471314277Number of inner loop instructions786,43542,26414,139426231Jump
  back to line 1Total number of instructions executed2,228,22888,33337,174757430Ratio
  inner loop/other instructions0.54550.91740.61381.28701.1608Therefore bar time (milliseconds)1.4001.641.61and
  digit period (microseconds)9.7211.411.2Jump back to line 1Total number of instructions
  executed2,097,14784,14635,081728413Ratio inner loop/other instructions0.60001.00910.67521.41061.2692Therefore
  bar time (milliseconds)1.4871.721.71and digit period (microseconds)10.3312.011.0Table
  1: Bar Times and Digit PeriodsThere is good agreement between the digit periods
  calculated for the runs for \r\n"
- "4537 and 3141, which took place on 21 June 1948, and the discrepancy between \r\n"
- "these and those for the 52 minute run quoted in the letter to Nature is at \r\n"
- "least 16\\%. It therefore seems unlikely that the digit period was in fact the
  \r\n"
- "same on these two occasions. I conjecture that, having seen the logic design of
  the hardware and software \r\n"
- "vindicated on 21 June, we did a little preventative maintenance before embarking
  \r\n"
- "on a more exhaustive test of the robustness of the hardware, probably a day or
  \r\n"
- "more later. During this maintenance, we quite probably altered the digit period.
  If indeeed there was some justification for operating at the figure of 9.4 \r\n"
- "microseconds noted on 7 and 13 June 1948, instead of 8.5 microseconds, then \r\n"
- "conceivably during the maintenance period we set to that figure. It could be, in
  \r\n"
- "fact, that we just reset the three- or four-gang .0005 mfd variable condenser \r\n"
- "that determined the basic oscillator frequency to a particular pencil mark on \r\n"
- "the front panel. This hypothesis implies that an accurate observed value of 9.7
  \r\n"
- "microseconds, being nearer to an approximate 9.4 microseconds, is more plausible
  \r\n"
- "than an accurate one of 10.3 microseconds. So this point argues for a jump back
  \r\n"
- "to line 1 rather than to line 2. I explain the reversion on 3 August 1948 to the
  figure of 8.5 microseconds by \r\n"
- "assuming either that we did in fact correct it, by reviewing the pencil marks on
  \r\n"
- "the front panel, or that we knew the machine would work with the shorter digit
  \r\n"
- "period, and I therefore used this value for my estimate. On the other hand, with
  line 1 in the loop we have 31 main store accesses per \r\n"
- "iteration, and a total of 4.06 million during the 52 minutes. Without line 1, we
  \r\n"
- "have 29 accesses per iteration and 3.80 million in total. Neither figure agrees
  \r\n"
- "with the letter to Nature, so it seems we should accept Tom's suggestion \r\n"
- "(on his tape of 29 March) that the figure of 3.5 million was wrong. Tom points
  out that we had been struggling to make the machine work for some \r\n"
- "days before 21 June, which was a Monday, after we had had the weekend off. \r\n"
- "During these efforts we would certainly not have been prepared to wait as long
  \r\n"
- "as say 60 seconds for each trial, and we would therefore have tried a smaller \r\n"
- "number. We agree on this point. In fact, we probably varied the smaller number
  a bit. Tom suggests we used 19 or \r\n"
- "31 for the first successful test, since he thinks we got a zero in line 20. That
  \r\n"
- "is, we tested a prime number. I can't recall any more detail myself, I'm afraid,
  \r\n"
- "but I have included these two numbers in Table 1, to show they are indeed quite
  \r\n"
- "plausible. In the Original Program, the jump back to line 1 gives \r\n"
- "a digit period a bit more plausible that a jump back to line 2. That is, line 16
  \r\n"
- "should read 18, Cl and not 23, Cl as I have it. But this is hair \r\n"
- "splitting, and Tom later concluded that line 2 as shown is correct. It seems \r\n"
- "unlikely that further palaeographical work would shed further light on this \r\n"
- "point. Peter TitmanWhy did IBM embark on the risky venture of producing the System
  360 series when \r\n"
- "it was already dominant in the market? The author describes the decision-making
  \r\n"
- "process that led to the development of the world's first range of compatible \r\n"
- "computers. I joined IBM United Kingdom as what was called an applied science \r\n"
- "representative, which meant selling scientific machines to universities and \r\n"
- "engineering installations. That job disappeared when it was decided that we did
  \r\n"
- "not need separate marketing organisations for the scientific market and the \r\n"
- "commercial market. But when my applied science job ended the 360 wasn't going to
  be announced for \r\n"
- "two years, and from a salesman's point of view, something that is not going to
  \r\n"
- "be announced for two years doesn't exist. I was spare, so I got assigned to \r\n"
- "worrying about what was going to happen in two years time. So my view is quite
  different from the people who were involved in delivering \r\n"
- "the 360. I was concerned with questions like: what have they got us in to? And
  \r\n"
- "what were we going to do about it? It is hard for those of us who were with IBM
  then not to appear boastful and \r\n"
- "stand up and say, \"Gosh, weren't we marvellous\". The fact is that we had an \r\n"
- "enormously powerful marketing position at this time, which was the end of 1961,
  \r\n"
- "beginning of 1962. We were selling the 1401 in incredible numbers. You could go
  \r\n"
- "to a company that had a punched card installation, say two accounting machines
  \r\n"
- "and a calculator, and sell them a 1401 for the same price. They could do very \r\n"
- "much more with it, and they could do it simply. Most computer users in those days
  were doing really simple things - just \r\n"
- "producing the invoices and getting the money back was a chore they were \r\n"
- "delighted to give to a machine. There were some people doing more complicated \r\n"
- "computing, but not in large numbers, so they weren't the main source of revenue.
  \r\n"
- "Revenue was coming from really basic things. We did have incredible control over
  the computer market. That is in worldwide \r\n"
- "terms: in the UK, we weren't the largest company, but in almost every other \r\n"
- "country we were. By the end of 1964, we had sold 13,000 1401s - orders of magnitude
  more than \r\n"
- "the ICT 1301 and the RCA 301 (which ICT also sold). This made a big difference
  \r\n"
- "when it came to how much program support you could provide, and in many other \r\n"
- "ways. I came from Leo Computers where we had to beg for every transistor. At one
  time \r\n"
- "I designed memories: when I had finished that I was at once put to work on the
  \r\n"
- "tape channels. We were that short of people. IBM had so much more resource. So
  the first message is that we were really strong. In some market segments such \r\n"
- "as large machines, we were dominant even in the UK. There was a good political
  \r\n"
- "reason for our dominance here - the people who bought large machines in those \r\n"
- "days were from organisations such as the Atomic Energy Authority and the CEGB.
  \r\n"
- "These companies were at that time very closely tied to the US nuclear industry,
  \r\n"
- "so had a strong incentive to buy the same machines that were being used in the
  \r\n"
- "US. That was one reason why we had 7090s in Aldermaston and in CEGB and other \r\n"
- "704s dotted around in Risely and similar sites. So we were very strong in that
  sector. The place where we were weakest was the \r\n"
- "scientific area, and particularly in the UK the small scientific area. I sold 1620s
  when I first joined IBM. The 1620 was a lovely little desktop \r\n"
- "machine with a memory of 20,000 decimal digits and a typewriter, and you sat \r\n"
- "down and used it like a PC. But it cost more than the Elliott 803 which had 8000
  \r\n"
- "words of memory and ran much faster. The 1620 didn't even have an adder: it did
  \r\n"
- "arithmetic by doing table lookup, and it did it very slowly. A multiplication \r\n"
- "took 200 milliseconds or so. Compared to the 803, the 1620 was an absolute dog.
  It had the most unbelievable \r\n"
- "paper tape reader. It was designed by someone who designed magnetic tape \r\n"
- "readers. Everybody knew that the way to sense timing on the paper tape reader \r\n"
- "was to sense the sprocket hole. But whoever designed this device knew that the
  \r\n"
- "way you drove paper tape was by a cog wheel through the sprocket hole to which
  \r\n"
- "you attached the spindle to which you attached a disc with holes in from which
  \r\n"
- "you then sensed the timing. This had the enormous advantage that you got the \r\n"
- "timing out of place and also, for a bonus, it screwed up the sprocket holes as
  \r\n"
- "well. So we weren't well placed in that sector of the market. But in the US we
  did \r\n"
- "sell the 1620. We sold it to universities because we were IBM and universities
  \r\n"
- "bought IBM machines. The 803 was much, much better and sold, almost uniquely \r\n"
- "among UK machines, in reasonable quantities, abroad as well as at home. The success
  of the 803 was one reason why John Fairclough got the job of \r\n"
- "developing a small scientific machine at Hursley. That raised a question: \r\n"
- "companies like Esso bought machines in any part of the world that they chose, \r\n"
- "but IBM maintained systems only in the countries where we sold them. Esso was \r\n"
- "very unhappy that we didn't always immediately announce things in the UK that we
  \r\n"
- "had announced in the States because the parent company wanted to have the same
  \r\n"
- "machines in all subsidiaries. The thought of someone in the UK announcing a \r\n"
- "better machine and the parent company not being able to have it was absolutely
  \r\n"
- "unthinkable. So John's chances - though he didn't know it at the time, and it is
  only in \r\n"
- "hindsight that I recognise this - were not that good because it raised the \r\n"
- "question of how, if we had something brilliant announced in World Trade, we were
  \r\n"
- "not going to announce it immediately in the States. (World Trade was the part of
  \r\n"
- "IBM that covered the whole of the rest of the world outside North America. World
  \r\n"
- "Trade then had about a third of the sales volume of the US.) That was one of the
  issues: should we have a separate UK product line, or at \r\n"
- "least a World Trade product line? Don't forget that in those days, the disparity
  \r\n"
- "in wealth between the States and Europe was much greater. An American cost about
  \r\n"
- "twice as much as an Englishman and as three times as much as an Italian. So when
  \r\n"
- "you came to do sums about displacing people and so on, you could bear much \r\n"
- "higher costs in the States. So there was a reason for thinking that the World \r\n"
- "Trade market was different. But the big decision was that it wasn't different.
  Anybody in our strong position would normally continue operating along the same
  \r\n"
- "lines. What was remarkable was that IBM decided to do something different. If we
  \r\n"
- "were doing so well, why change? Apart from market dominance, our other enormous
  strength was technology. People \r\n"
- "in the UK didn't understand the strength or depth of IBM technology. As I said
  earlier, when I finished doing memories at Leo I was put onto looking \r\n"
- "at tapes. The Decca tape had not been a great success on Leo II: EMI was trying
  \r\n"
- "to enter the tape drive market, but the main companies we investigated were \r\n"
- "Potter and Ampex. Leo III eventually used Ampex drives. But there was no \r\n"
- "possibility of making our own tape drive. IBM tape drives, I thought at the time,
  were terrible, because they used to do \r\n"
- "dreadful things to the tape. They had pinch roll capstans that used to grind it,
  \r\n"
- "the tape ran in contact with the head, and the drives needed quite a lot of \r\n"
- "maintenance. What I didn't realise, though it seems obvious in hindsight, was \r\n"
- "that if you wanted to get faster tape, as everybody did, you could either make
  \r\n"
- "the tape move faster or pack data more densely. To pack data more densely it was
  \r\n"
- "a huge advantage to have your head in contact. Only IBM did this at the time. Everybody
  else avoided contact because they felt \r\n"
- "they couldn't manage the wear on the tape. But IBM had the resources to apply to
  \r\n"
- "this problem and solve it. The solution proved to be the development of \r\n"
- "proprietary heavy duty tape. IBM had the technology right through, covering the
  \r\n"
- "materials technology, the tape technology, the drive technology, the \r\n"
- "controllers, everything. No other company could put that lot together to make a
  \r\n"
- "new solution. In printers, IBM also innovated with the 1401. Everybody else used
  Analex drum \r\n"
- "printers. On these, a big drum went round and round and you had to strike it at
  \r\n"
- "exactly the right time to produce good quality printing - if your timing was \r\n"
- "out, the letters went up and down a bit. The IBM answer was to have a chain that
  went sideways instead of a drum. You \r\n"
- "still had to bang it at the right time, but if the alignment was slightly out,
  \r\n"
- "the letters were displaced slightly left or right rather than up or down. That
  \r\n"
- "didn't look nearly so bad. Psychologically it looks quite different to have a \r\n"
- "letter slightly to the left rather than up or down. Furthermore, the mechanism
  was cheaper. You just had this one chain and that \r\n"
- "itself was replaceable, so you could have different fonts, and you could have \r\n"
- "upper and lower case and other capabilities which were impossible on the old \r\n"
- "Analex. I can remember the Powers Samas printer on the Leo II. Powers Samas really
  \r\n"
- "didn't believe in electricity. If it could run with a belt or a cable, it was \r\n"
- "done with a belt or a cable. Electricity was dangerously new fangled. The IBM \r\n"
- "1403 printer was a totally different machine in terms of its simplicity, \r\n"
- "reliability and all the other factors. IBM's disc technology was another plus.
  The first disc paper I can trace dates \r\n"
- "from about 1953 and was a theoretical study of floating a head on a disc - the
  \r\n"
- "air bearing disc. The first disc subsystem itself, 305 Ramac, was not a success.
  \r\n"
- "It had 5Mb capacity accessed by a single arm, which provided access times in the
  \r\n"
- "order of seconds. But it gave us valuable experience. By the time we got to the
  360, we had not only realised that discs were \r\n"
- "important - far better than tape as a subsidiary storage medium - but also \r\n"
- "what an enormous advantage it was to have your operating system on a disc. \r\n"
- "Operating systems on tape were continuously chuntering up and down. If you'd \r\n"
- "performed a compile, and then wanted to link something, you had to access \r\n"
- "another part of the tape or use another tape drive. There was lot of movement \r\n"
- "trying to get the flow of jobs through a tape machine. Discs obviated this \r\n"
- "problem. We had virtually a monopoly on disc technology. I can remember John Pinkerton
  of \r\n"
- "Leo Computers coming to Wigmore Street to explore buying discs from us because
  \r\n"
- "there was no alternative source for him. So Leo Computers would have had to \r\n"
- "resell our discs onto their customers, a tremendous disadvantage. A lot of our
  \r\n"
- "other competitors just didn't go into discs at all. But we had a disc technology
  \r\n"
- "that was good and reliable, and we understood disc operating systems. Another technological
  strength was memory. We had invested a lot of money: the \r\n"
- "reason we were ahead was not because we were big but because we had invested a
  \r\n"
- "lot. For example one major investment was in a plant which automated the process
  \r\n"
- "of making a memory stack. But having made the investment, we could sell memory
  for about five times its \r\n"
- "manufacturing cost, or more than that even. The manufacturing cost of memory was
  \r\n"
- "nothing. So we made enormous profits on memory. So why, with these immense strengths,
  did we embark on this very risky System \r\n"
- "360 venture? Why abandon our existing products and produce a new range of \r\n"
- "machines that was totally incompatible with them? I was conscious at the time that
  customers such as ICI were keen to have the \r\n"
- "same machines in all their offices and in all their computing centres. They were
  \r\n"
- "looking for standards. This was an issue for IBM, too: we were having to train
  \r\n"
- "customer engineers and support engineers in all sorts of different machines. \r\n"
- "When I joined I had go through programming courses on the 650, the 7070, the \r\n"
- "1620 and the 709. It was all rather expensive. To compound this problem, there
  was a huge explosion of programming languages \r\n"
- "and operating systems. For the 7090 alone we were on to Ibsys version 13 by the
  \r\n"
- "time we were talking about the 360. Then there was a Fortran monitor system, and
  \r\n"
- "another system called the Share Operating System (SOS), designed in conjunction
  The initial Fortran group was comprised entirely of IBM people, seven of them. \r\n"
- "Share played a part in its subsequent development, but the initial design - and
  \r\n"
- "Fortran I was a most remarkable system because its optimisation was better than
  \r\n"
- "anything that came after it - was really good. In the sixties everybody thought
  that if you had the right program language, you \r\n"
- "could do anything. All that you had to do was to find it. We had Fortran, \r\n"
- "Comtran (the commercial translator for the 7090), Cobol and Algol. People were
  starting to ask some quite basic questions about programming, such \r\n"
- "as \"What's it for?\" and \"Why are we - IBM - writing programs for free?\" All
  \r\n"
- "the customers did when you gave it to them was moan. When we announced Ibsys, \r\n"
- "people said \"Gosh it's complicated isn't it? Doesn't it take a lot of memory?
  Do \r\n"
- "we need it?\". Of course they needed it. But they weren't grateful for it in the
  \r\n"
- "least, so it was a real concern. Then there was the question of what we should
  spend our development money on. A \r\n"
- "lot of it was going on the 7090 because all the interesting activity was on the
  \r\n"
- "big scientific machines. Where the revenue was coming from was from the 1401, \r\n"
- "but we weren't spending nearly so much on it. No one knew why. So questions like
  these were being bounced around group staff in the \r\n"
- "corporation. As I recollect it, group staff, and a chap called Don Spaulding in
  \r\n"
- "particular, had decided that we had to do something about the proliferation of
  \r\n"
- "software. Therefore they set up a committee. But like all the best committees the
  people who set it up had a very good idea \r\n"
- "of what they wanted the committee to say beforehand. The terms of reference were
  \r\n"
- "something like this: \"to produce a complete plan for the total product range,
  \r\n"
- "suitable for all countries and for both scientific and commercial computing\".
  \r\n"
- "There was strong pressure to make a compatible family of machines. No one knew
  whether it could really be done, but Bob Evans in particular had \r\n"
- "strong feelings about compatibility and felt that it was possible. He was the \r\n"
- "president of DSD - the lab systems development division - and had been \r\n"
- "involved in the 7070 which was a mixed commercial-scientific machine. The committee
  came back with the required conclusion. They presented us with a \r\n"
- "report recommending what was known as the New Line Plan. This plan caused me personally
  a lot of worry for a long time. It envisaged a \r\n"
- "staggered announcement of machines, the first of which was to be a small binary
  \r\n"
- "version of the model 40 - the machine being developed in Hursley. Immediately \r\n"
- "there was a problem. What we were aiming at in the long term was a grand \r\n"
- "strategy. What we were allowing to poke out was one small binary machine which,
  \r\n"
- "though an interesting machine, was not enough on its own to get anybody excited.
  The other problem was compatibility with previous systems. The report \r\n"
- "acknowledged the problem, but expected IBM to be selling new applications that
  \r\n"
- "depended on users migrating from tape to disc, and further ahead some exciting
  \r\n"
- "teleprocessing applications. Accordingly it decided to ignore the compatibility
  \r\n"
- "issue. The difficulty was that even people doing new exciting things tend to \r\n"
- "have done some boring things first which they would like to continue doing on \r\n"
- "the same machine. So compatibility was a big worry. We discussed the plan for about
  18 months, exploring how we were going to \r\n"
- "achieve the ambitious targets laid down. But IBM does change it plans, though \r\n"
- "not easily. A lot of pressure has to build up to effect such a change. The \r\n"
- "catalyst in this case was the Honeywell 200 with its cheekily named Liberator \r\n"
- "program, which would take a 1401 program and run it faster and more cheaply - a
  \r\n"
- "beautiful thing to sell. Naturally it sold in large numbers, very quickly. This
  \r\n"
- "was around about the end of 1963.  Then a very typical IBM thing happened. Tom
  Watson became involved and ordered a \r\n"
- "solution to the Honeywell 200 to be found in 90 days. Suddenly we discovered \r\n"
- "something we knew already, that the way to solve the migration problem was \r\n"
- "through emulation. We had microprogramming, we had the technology to do it, we
  \r\n"
- "just had never somehow reached the conclusion that emulation was an important \r\n"
- "compatibility technique. But by this stage it was something marketing people \r\n"
- "knew they had to have. The other conclusion we reached was not to mess around announcing
  tiny bits at a \r\n"
- "time, but to launch the whole lot at once. That allowed us to emphasise the \r\n"
- "strategy rather than individual machines. Quite suddenly we had the big bang. It
  \r\n"
- "was the end of 1963 when the decision was taken that a complete range of \r\n"
- "machines would be announced on 7 April 1964. The range comprised six models of
  CPU and a complete set of new I/O devices. \r\n"
- "Remarkably, you could attach any I/O device to any CPU: they weren't handcrafted
  \r\n"
- "the way they were before. We developed emulators for every existing computer \r\n"
- "that was important. So suddenly we had a completely new exciting product line to
  \r\n"
- "sell. We sold it in the UK with an enormous full page text advert: we had a full
  \r\n"
- "newspaper page of detailed text about the 360 series on the day it was \r\n"
- "announced. Of course we took our customers to Hursley to show them round as \r\n"
- "well, but it was the media promotion that really made for an exciting launch. \r\n"
- "This was not at all the way the committee had planned it in the first place. Editor's
  note: this is an edited version of the talk given by the author to \r\n"
- "the Society at the Science Museum as part of the IBM System 360 seminar on 21 \r\n"
- "November 1995.Readers wishing to contact the Editor may do so by fax, \r\n"
- "on 0181-715 0484.Maurice GribbleThe first Argus grew out of a small computer that
  was built to study digital \r\n"
- "control systems. The circuits of that machine, which were designed about 1954-\r\n"
- "55, used Mullard OC71 low frequency germanium pnp transistors. They were \r\n"
- "originally developed for producing shift register sequences, or chain codes, for
  \r\n"
- "use in a rotating beacon missile guidance system. The circuits comprised NOR-gates
  and flip-flops which were clocked by narrow \r\n"
- "shift pulses to produce shift registers and counters. Positive logic was \r\n"
- "assumed, that is, the transistors were turned on - collector at earth potential
  \r\n"
- "- for \"1\" and off - collector negative - for \"0\". Diode OR-gates were \r\n"
- "followed by a transistor via a coupling network to produce a NOR-gate. The \r\n"
- "flipflops consisted of two transistors cross-coupled via RC networks with a \r\n"
- "pulse steering circuit for shift pulses, which enabled shift registers and \r\n"
- "synchronous counters to be made. The shift pulses were produced by a crystal \r\n"
- "controlled blocking oscillator, the clock frequency being 25KHz. The power \r\n"
- "supply provided +6 and -6 volts. In 1956 a small computer was proposed for studying
  sampled data systems and the \r\n"
- "feasibility of digital control of weapon systems. Experimental transistor \r\n"
- "computers were being built at Manchester University and at AWE Harwell. These \r\n"
- "machines used point-contact transistors, which at that time had the advantage of
  \r\n"
- "speed and the fact that only one was needed to make a latching circuit. However,
  \r\n"
- "they were difficult to manufacture and not very reliable, so it seemed sensible
  \r\n"
- "to design circuits around junction transistors, in the hope that faster devices
  \r\n"
- "would eventually become available. Due to the rapid progress in the \r\n"
- "semiconductor industry, this happened sooner than expected. There was a need for
  additional circuits, such as a 3-entry flipflop, so that \r\n"
- "registers could be loaded in parallel and shifted in both directions. This was
  \r\n"
- "achieved by replicating the pulse steering circuit and ORing them together. \r\n"
- "There was also need for a shift gate, so that various shift pulse sequences \r\n"
- "could be produced. This also used a pulse steering circuit to gate shift pulses
  \r\n"
- "with the logic levels. The circuits were built into plug-in units, which were hand
  wired. A printed \r\n"
- "circuit version, which was fairly novel in those days, was also produced, but \r\n"
- "these were not used in this experimental machine, which used serial arithmetic
  \r\n"
- "with a 10-bit word length and represented negative numbers in twos complement \r\n"
- "form. It incorporated a Booth short-cut multiplier, which could handle positive
  \r\n"
- "and negative numbers with equal facility. The Newton-Raphson method was used for
  \r\n"
- "division and calculating square roots, while Chebyshev polynomials were used for
  \r\n"
- "trigonometric functions. Only a small amount of data storage was supplied in the
  form of flip-flops, \r\n"
- "since data was read in from transducers as required, and was output as soon as
  \r\n"
- "the calculations were complete. Other inputs were a random number generator and
  \r\n"
- "a timer. Output was analogue, either as voltages or in the form of width-\r\n"
- "modulated current pulses, for operating servos. The single address order code contained
  only 19 instructions and the program was \r\n"
- "stored on a pluggable diode matrix. There were two program counters: one gave 64
  \r\n"
- "program steps for the main program, the other 25 steps for subroutines. Both \r\n"
- "were ring counters to simplify matrix decoding, and the final OR-diodes were \r\n"
- "glued into the plugs. This was a source of trouble, as there was differential \r\n"
- "expansion between the plastic plug and the glass diode, which shattered the \r\n"
- "glass. The solution was to use a silicone rubber cement instead of Araldite. A
  Gray or cyclic progressive (CP) code was used for measuring angular position. \r\n"
- "This has the merit that, as the shaft with the code disc is turned, only one \r\n"
- "digit changes at a time, whereas in binary code, several digits often change in
  \r\n"
- "going from one number to the next. These changes do not all occur at exactly the
  \r\n"
- "same time and can result in false readings. Conversion from CP code to binary was
  easily implemented. The data from a disc \r\n"
- "was selected by suitable logic and transferred in parallel into a register where
  \r\n"
- "it was shifted left cyclically via an Exclusive-OR circuit. This was carried out
  \r\n"
- "by separate hardware in the computer in order to speed up the process and avoid
  \r\n"
- "adding to the complexity of the arithmetic unit. The analogue voltage output converted
  the least significant five bits of the \r\n"
- "number by summing currents into an operational amplifier. The logic took account
  \r\n"
- "of the sign of the number and arranged that the amplifier saturated for numbers
  \r\n"
- "of larger magnitude. The width-modulated current pulses for driving hydraulic valves
  were produced as \r\n"
- "follows: the servo error was stored in a 5-bit accumulator and, according to the
  \r\n"
- "sign of the error, unity was either added to or subtracted from it every word \r\n"
- "time until it was zero. Until zero was reached, a large current of the \r\n"
- "appropriate sign was switched into the valve, resulting in a pulse of current \r\n"
- "whose length, and thus average value, was directly proportional to the error. By
  \r\n"
- "making the maximum current twice that needed to produce maximum output from the
  \r\n"
- "valve, two such valves could be operated on a time-shared basis. The computer was
  completed in October 1957, in time for HRH Prince Philip's \r\n"
- "visit to the Wythenshawe Labs in November, and used in a demonstration of \r\n"
- "parallax error correction and servo control. Two turntables, separated by a metre
  or so and carrying digitising discs, could \r\n"
- "be rotated rapidly through about 90 degrees by hydraulic jacks. Each turntable
  \r\n"
- "had a optical projector mounted on it, which projected a spot of light onto a \r\n"
- "screen, one being coloured red and the other green. Care was taken to ensure \r\n"
- "that the port side was red and the starboard side green! A third digitiser was
  \r\n"
- "fitted with a knob and, when it was turned, the angle measured by this digitiser
  \r\n"
- "was compared with that of the left-hand table and the error operated a digital
  \r\n"
- "servo so as to minimise it. To correct the parallax error, the right-hand table
  \r\n"
- "was, at the same time, turned by a similar servo to another angle, given by the
  \r\n"
- "trigonometric relationship below, so that the green spot of light fell on top of
  \r\n"
- "the red one. The formula used was:tan R = tan L / [s/d (tan L) -1] where s is the
  separation of the turntables, d is the distance of the screen, \r\n"
- "and L and R are the left and right digitiser angles respectively. Three term Chebyshev
  polynomials calculated tan and arctan to sufficient \r\n"
- "accuracy, but, due to the computation time, there was a noticeable lag in the \r\n"
- "position of the green spot if the knob was turned too quickly. The demonstration
  behaved well when Prince Philip turned the knob. He then \r\n"
- "looked at a printed circuit version of a flipflop; the name obviously amused \r\n"
- "him, for as he went out of the door he could be heard saying, \"Flipflop, \r\n"
- "flipflop ...\". High frequency transistors, developed for radio, soon became available.
  They \r\n"
- "were alloy junction transistors with thinner base regions, and it was necessary
  \r\n"
- "to design new circuits to get the fastest operation with them. Alloy transistors
  \r\n"
- "have a relatively large base region that can store charge carriers - holes in \r\n"
- "pnp transistors. In switching circuits, if excess base current is used, in order
  \r\n"
- "to turn the transistor on quickly, there is an excess of holes in the base \r\n"
- "region that has to be removed before the transistor ceases to conduct. Faster \r\n"
- "turn-off times can be achieved if this saturation is avoided, so the Argus \r\n"
- "circuits used a diode between the collector and the base coupling network in a
  \r\n"
- "negative feedback anti-saturation circuit. An extra power supply of $-24$ volts
  \r\n"
- "was also needed. There was also a requirement for a power NOR-gate that was capable
  of a much \r\n"
- "larger fan-out. It used an npn transistor to speed the removal of charge from \r\n"
- "the base of the output transistor, whose collector was returned to the 24 volt
  \r\n"
- "supply. This pull-down resistor was removed and replaced with a line-terminating
  \r\n"
- "resistor when outputs, which were inverse signals, were common-collector ORed \r\n"
- "onto a bus. The flipflop circuit was, in effect, two NOR-gates connected back to
  back plus a \r\n"
- "trigger circuit. Diode inputs were used everywhere to standardise the circuit \r\n"
- "loading and, in the case of the trigger circuit, to improve the flipflop \r\n"
- "recovery time. The shift gate for producing sequences of shift pulses used a pulse
  gating \r\n"
- "arrangement similar to that used in the flipflop trigger circuit. There were two
  \r\n"
- "designs of shift gate - one avoided a heavy standing current by using an npn \r\n"
- "transistor that was transformer coupled to the output transistor. These circuits
  were engineered in printed circuit form and used in large numbers \r\n"
- "in several Ferranti computers at Wythenshawe and Bracknell, and also in Canada
  \r\n"
- "for the Ferranti-Packard 6000, which became the basis of the ICL 1900 series. The
  improved version of the Bloodhound missile required a complex sequence of \r\n"
- "pre-launch operations involving calculations and decisions. It was realised that
  \r\n"
- "these were more suited to a digital rather than an analogue computer, if one \r\n"
- "could be built that that was sufficiently fast and reliable. A high degree of \r\n"
- "accuracy was not required for most of the calculations, so a short word length
  \r\n"
- "would suffice. Furthermore, the program was unlikely to be changed when the \r\n"
- "equipment was in service, so, for the sake of reliability, a fixed store was \r\n"
- "preferable. A design was undertaken based on these requirements. More storage was
  needed for \r\n"
- "both program and data. A core store was used for the latter, while the plug \r\n"
- "board used for the program was replaced by a patent magnetic store using ferrite
  \r\n"
- "rods, which will be described later. This also held constants, used in the \r\n"
- "calculations. The word length could be either 12 or 24 bits and the clock frequency
  was \r\n"
- "500KHz. The machine operated in a serial/parallel mode - two bits in parallel.
  \r\n"
- "For a 12-bit word, this was a reasonable compromise between speed and cost when
  \r\n"
- "store access times were taken into account, and resulted in a 20 microsecond \r\n"
- "addition time. The order code was based on that of Pegasus, because there was already
  a body of \r\n"
- "experience with that machine, and because the Ferranti London Computer Centre \r\n"
- "was concerned with promoting the machine for process control. For example, \r\n"
- "Babcock and Wilcox, a prospective Argus customer, was a keen Pegasus user. There
  were eight accumulators, one of which was zero. The instruction was 24 \r\n"
- "bits long and the instruction format was similar to that of Pegasus. The first
  \r\n"
- "12 bits (the N address), addressed the main store, the next three (the X \r\n"
- "address), an accumulator, the next six specified a function, the next three (the
  \r\n"
- "M address), a modifier, and the last bit (the C bit) indicated whether the \r\n"
- "number was an instruction or one of two 12-bit constants, selected by the least
  \r\n"
- "significant address bit. So only the first 2048 locations in the program store
  \r\n"
- "were available for constants. The main differences between the Pegasus and the
  Argus instruction set is that \r\n"
- "the latter had special \"30\" type orders for input and output and the \"40\" type
  \r\n"
- "orders involved literals, not counters. Also Argus had special jumps for \r\n"
- "interrupts - \"70\" type orders. As in Pegasus, the accumulators could be addressed
  either as registers, using \r\n"
- "the N address, or as accumulators, using the X address; there was, however, a \r\n"
- "difference. Registers 0 to 5 corresponded to accumulators with the same \r\n"
- "addresses, but accumulator 6 was 24 bits long and consisted of registers 6 and
  \r\n"
- "7. Likewise, accumulator 7 was a double length one, consisting of accumulators
  4 \r\n"
- "and 5. Double length arithmetic was automatically used when either of these long
  \r\n"
- "accumulators was addressed. Accumulator 6 was also called P, with accumulators
  4 \r\n"
- "and 5 being called P1 and P2 , respectively; while accumulator 7 was also called
  \r\n"
- "Q. Accumulators 0 to 3 could also be used as address modifiers. The serial/parallel
  arithmetic used two adder/subtractors with ripple-through \r\n"
- "carry, so the delay in the carry path was kept as short as possible. The flip-\r\n"
- "flops were triple-entry types with three different shift pulse inputs to allow
  \r\n"
- "left shift, right shift and double right shift for addition and subtraction. The
  multiplier was a modification of the Booth multiplier used in the \r\n"
- "experimental machine. The Booth method examines the least significant bit p$_n$
  \r\n"
- "of the multiplier together with an extra bit p$_{n+1}$, initially set to 0, and,
  \r\n"
- "according to the values of these two bits, performs the operations shown in \r\n"
- "Table 1. pnpn+1Operation00Shift R01Add multiplicand,shift R10Subtract .. .. ..
  ..11Shift RTable 1: Booth short-cut multiplierIn the Argus method, the bits p$_{n-1}$,
  p$_n$ and p$_{n+1}$ are examined with \r\n"
- "results given in Table 2. Use is made of both single and double right shift. pn-1pnpn+1Operation000Double
  shift001Add, Double Shift010Add, .. .. .. ..011Shift, Add, Shift100Shift, Subtract,
  Shift101Subtract, Double Shift110Subtract .. .. .. ..111Double ShiftTable 2: Argus
  Multiplier (Modified Short-cut)Like the Booth method, the Argus method worked with
  both positive and negative \r\n"
- "numbers and gave a useful increase in speed as well as a lower spread in \r\n"
- "multiplication time, which was important in control applications. MethodNumber
  of Add & Subtract OperationsAverageMaximumBoothn/2nArgusn/3n/2Table 3: Relative
  SpeedArgus used a non-restoring divider, which would operate with both positive
  and \r\n"
- "negative numbers. The dividend was held in the accumulator P, the divisor in \r\n"
- "register D and the quotient in register QR. The bits of divisor and dividend were
  compared, starting at the MS end. If they \r\n"
- "were the same, D was subtracted from P and a least significant 1 added to QR. If
  \r\n"
- "they were different, D was added to P and a least significant 1 subtracted from
  \r\n"
- "QR. After either operation, P and D were shifted one place left. Finally, if the
  \r\n"
- "signs of the divisor and dividend were different, 1 was added to the quotient in
  \r\n"
- "QR. Division could be rounded or unrounded and, as in Pegasus, the dividend could
  be \r\n"
- "either a double or a single length number. This held when either 12-bit or 24-\r\n"
- "bit arithmetic was used. Square root was programmed using either Newton-Raphson
  or the digit by digit \r\n"
- "method, while Chebyshev polynomials were used for trigonometric and other \r\n"
- "transcendental functions. As previously mentioned, data was held in a core store.
  This was in modules of \r\n"
- "1024 12-bit, plus parity, words and could be increased up to a maximum of 3072
  \r\n"
- "words. It was bit-organised, that is, it used 3-D selection - X, Y and Inhibit.
  \r\n"
- "The cycle time, using state-of-the-art cores and transistors, was six \r\n"
- "microseconds. It was one of the earliest transistor-driven core stores and many
  \r\n"
- "problems had to be overcome. The transistors had to be fast enough, they had to
  \r\n"
- "handle large currents and they had to stand the relatively large voltage \r\n"
- "produced by the back emf of the magnetic cores, which were conflicting \r\n"
- "requirements. Since there was some doubt about the long-term reliability of the
  core store \r\n"
- "under adverse conditions and the program was seldom altered in control \r\n"
- "applications, program and constants were held in a fixed store consisting of \r\n"
- "ferrite rods the size of pencil leads. These provided magnetic coupling between
  \r\n"
- "a set of drive tracks and an orthogonal set of read tracks, one for each bit in
  \r\n"
- "the word, etched on a double-sided printed circuit. Current pulses, selected by
  \r\n"
- "a diode matrix, were sent through the drive tracks in turn; and the read tracks
  \r\n"
- "only picked up a signal when a ferrite peg was placed in a hole at the \r\n"
- "intersection and disturbed the symmetry of the magnetic field. The store was engineered
  as a set of trays, each holding 64 25-bit words, \r\n"
- "including parity, together with the decoding diode matrix and transformers. The
  \r\n"
- "ferrite pegs had little rubber caps to make them easier to handle and were held
  \r\n"
- "in position by a perspex cover - another source of trouble, for it used to get
  \r\n"
- "electrified and pull the little pegs out when it was removed. The store \r\n"
- "consisted of a box of 16 such trays, together with their associated drive and \r\n"
- "read circuits, making 1024 words total. The 12-bit address could accommodate \r\n"
- "four such stores, if required. This store was rather bulky, so another magnetic
  fixed store was developed for a \r\n"
- "military application where size was important. It was not used in Argus, as its
  \r\n"
- "development came too late, but it is included here for historical interest. In
  this store the ferrite pegs were replaced by square coupling loops, which \r\n"
- "could be cut to prevent induced eddy-currents coupling to the read tracks. The
  \r\n"
- "loops were arranged on a thin fibre-glass printed circuit, which was identical
  \r\n"
- "in size and shape to a Hollerith punched card, so that the loops could be cut \r\n"
- "with a modified card punch. Each card contained a 12 by 25 array of 300 loops,
  \r\n"
- "representing 12 25-bit words. The store had 4096 words and 342 cards were required
  to store them, which \r\n"
- "somewhat complicated the decoding. The cards were arranged in four shelves of 86
  \r\n"
- "cards, the last one having only four usable words, and were held in close \r\n"
- "proximity to the drive and read tracks by pressure pads in such a way that that
  \r\n"
- "they could be easily replaced. There were 1024 drive tracks, each one driving \r\n"
- "four cards - one on each shelf. There were four long flexible printed circuit read
  tracks and four sets of read \r\n"
- "amplifiers, one for each shelf. These were selected with two bits of the \r\n"
- "address, the other 10 bits selecting the drivers. The read tracks were arranged
  \r\n"
- "in concertina fashion, and such was their length that the time delay \r\n"
- "necessitated four different strobe times. The store was only about a third of the
  size of an equivalent ferrite peg store \r\n"
- "and card punching was assisted by a Pegasus program. Only one production model
  \r\n"
- "was ever built. For process control applications requiring more data storage, there
  was also an \r\n"
- "optional magnetic drum with a capacity of 50,000 words. The Argus monitor panel
  displayed the contents of the accumulators and that of \r\n"
- "any store location, selected by the rotary switches; it also had hand switches
  \r\n"
- "for manual intervention and testing. Argus had two types of interrupt. Interrupt
  was a novel concept in 1957, and \r\n"
- "Argus was possibly the first machine to use it outside the US. In the previous
  experimental machine, the sampling time for the digital servos \r\n"
- "was not constant, as a result of the variable multiplication time of the Booth
  \r\n"
- "multiplier, among other things, and this made system analysis difficult. When a
  \r\n"
- "program contained conditional jumps, the situation was much worse and some \r\n"
- "method of getting a constant sampling time was called for. The method adopted in
  Argus was to use a timer, which consisted of a register \r\n"
- "that was decremented every other word time (40 microseconds), independently of
  \r\n"
- "other operations. When the timer register became zero, the program was \r\n"
- "interrupted, the number in the instruction counter stored in a link register and
  \r\n"
- "the instruction register set to address 0, which was the start of the interrupt
  \r\n"
- "routine. The latter stored the contents of all the registers in a reserved part
  \r\n"
- "of the core store and then jumped to a subroutine that performed the required \r\n"
- "operation. At the end of the subroutine, the interrupt routine restored all the
  \r\n"
- "registers, incremented the number in the link register and transferred it to the
  \r\n"
- "instruction counter so that the main program could continue where it left off.
  Thus it operated in a very similar way to interrupt routines in more modern \r\n"
- "machines. By using other registers as counters several different interrupt \r\n"
- "subroutines could be called at times that were multiples of the shortest time.
  \r\n"
- "This was a very useful facility for process control. Another type of interrupt
  was the core store interrupt (CSI), which is now known \r\n"
- "as DMA (direct memory access). It was used to transfer blocks of data directly
  \r\n"
- "to and from the core store independently of the arithmetic unit when the latter
  \r\n"
- "was involved with multiplication, division and other operations not requiring \r\n"
- "store access. Asynchronous data to and from peripheral equipment was usually \r\n"
- "handled in this way. A variety of peripheral equipment could be attached to Argus.
  Both the military \r\n"
- "and commercial applications involved input and output data in various forms: \r\n"
- "angular data from digitisers, analogue voltages, single bit on/off data and \r\n"
- "display information, to name a few. In process control applications, there was
  \r\n"
- "considerable input and output data as well as a requirement to handle paper or
  \r\n"
- "magnetic tape and to provide printed output, or output in analogue form for \r\n"
- "driving chart recorders. Solid state switching was used to select digital and analogue
  inputs and \r\n"
- "outputs, which were to 10-bit accuracy, but thermocouple and other low level \r\n"
- "inputs were selected by relays. Because of the delay in selecting and digitising
  \r\n"
- "inputs, selection and reading in the data were arranged to be separately \r\n"
- "programmable operations, so that the computer could carry on with other \r\n"
- "operations and not waste time waiting. Also a \"Jump on Busy\" order allowed the
  \r\n"
- "computer to handle asynchronous outputs, like the printer, without waiting. Once
  the transistor failures had been eliminated by switching from a soldered to \r\n"
- "a welded can, and the printed circuit connectors, whose contacts were brittle \r\n"
- "and prone to spreading, replaced, the machine achieved a high degree of \r\n"
- "reliability, as a result of the technology used. This was further improved by a
  \r\n"
- "checking program that was periodically run as an interrupt, which, if it \r\n"
- "detected a failure, could sound an alarm and isolate the computer from the \r\n"
- "plant. The first application of Argus was the military one for which it was designed
  - \r\n"
- "the Bloodhound missile pre-launch calculations. One of the problems in that \r\n"
- "application is a common radar one, that of smoothing and predicting an aircraft
  \r\n"
- "track. The radar information is in polar co-ordinates - range and bearing - \r\n"
- "and must first be converted to X-Y co-ordinates, or latitude and longitude. Radar
  data is usually noisy: it can be smoothed by fitting a straight line or a \r\n"
- "low order polynomial to it by the method of least squares. The easiest way to do
  \r\n"
- "this is by use of orthogonal polynomials, and the noise reduction of the \r\n"
- "smoothing formulae so obtained is given by the sum of the squares of the \r\n"
- "coefficients. Taking an odd number of points and estimating the midpoint by \r\n"
- "means of a smoothing formula will always result in the greatest noise reduction:
  \r\n"
- "the greater the number of points and the lower the order of the polynomial the
  \r\n"
- "better, in this respect. Unfortunately, such an estimate of position is out of
  date; if one wants to \r\n"
- "obtain an estimate of the latest point, or even one point ahead, to allow for \r\n"
- "the computation time, a large number of points must be used in the smoothing \r\n"
- "formula to obtain a useful reduction in noise. The first process control application
  of Argus was to control a soda ash plant \r\n"
- "for ICI at Fleetwood. Following discussions between Ferranti and ICI at \r\n"
- "Nantwich, Alan Thompson of ICI realised that the use of a computer could be an
  \r\n"
- "economical solution if it not only took a supervisory role - printing plant and
  \r\n"
- "alarm data and calculating set points - but was also able to replace all the \r\n"
- "pneumatic 3-term controllers, of which there were just over a hundred. The plant
  was a fairly docile one, so if the computer failed, as long as the \r\n"
- "control valves were isolated, it could coast along without danger or too much \r\n"
- "loss of efficiency. Three-term controllers take a weighted sum of terms which \r\n"
- "are proportional to the error and the differential and integral of it. The last
  \r\n"
- "two terms deal with stability and drift respectively. Experiments with sampling
  servos and programming transfer functions to stabilise \r\n"
- "them, using the z-transform, had already been conducted with the small computer
  \r\n"
- "that preceded Argus. It was a revolutionary way of using a digital computer, \r\n"
- "because time was a parameter - as it is in a digital filter. Incidentally, a \r\n"
- "smoothing formula is really a low-pass filter and its frequency response can be
  \r\n"
- "calculated by z-transform methods. The integral term could be obtained by summation
  instead of integration, \r\n"
- "although this needed to use double length arithmetic in order to obtain the \r\n"
- "necessary accuracy. The rate of change of error was found by taking the \r\n"
- "difference of two consecutive sample values, but noise due to quantisation and
  \r\n"
- "other sources necessitated smoothing the data. A smoothing formula like that \r\n"
- "used for the radar application would have used too much storage when many loops
  \r\n"
- "were to be controlled, so the solution was to use a recursive smoothing formula.
  \r\n"
- "Put simply, this involved taking a fraction K of the latest difference plus a \r\n"
- "fraction 1 - K of the previous value of the rate as the new value for the rate,
  \r\n"
- "giving the following smoothed rate term: yn = K(xn - xn-1) + (1 - K)yn-1 The degree
  of smoothing depended on the value of K - the noise was reduced by a \r\n"
- "factor K/(2 - K). For example, with K=1/8, the noise was reduced to 1/15, as \r\n"
- "with a 15-point moving average filter, yet required the storage of only one \r\n"
- "extra value. The filter inserted a first order lag in the system, with time \r\n"
- "constant T/[(-ln(1 - K)], T being the sampling time. For T=5 seconds and \r\n"
- "K=1/8, the time constant was about 37.5 seconds, which was small compared with
  \r\n"
- "that of the plant and did not affect loop stability. The settings of the valves
  that had to be controlled were calculated \r\n"
- "sequentially every second for the fast loops - half of them - and every five \r\n"
- "seconds for the remainder. The valves were operated pneumatically; air was \r\n"
- "either admitted or exhausted at a controlled rate using solenoid valves. This \r\n"
- "only required two bits of information, so that the control signals for six \r\n"
- "valves were packed into one 12-bit word. The positions of the main valves, which
  \r\n"
- "took about 10 seconds to stroke, were measured with a potentiometer to 1% \r\n"
- "accuracy and examined 20 times a second so that they did not overshoot the dead
  \r\n"
- "space. This operation used 70% of the computer time, but left sufficient time \r\n"
- "for the other calculations, which were carried out less frequently. Isolating the
  computer from the plant when the checking program found a fault \r\n"
- "was considered to be too drastic in certain cases, for example where the trouble
  \r\n"
- "was an instrumentation failure. An improvement was simply to indicate where the
  \r\n"
- "fault lay, so that the affected part of the plant could be controlled either \r\n"
- "manually or by conventional methods; the isolation procedure then being used \r\n"
- "only for computer faults, which happened rarely. The computer was installed at
  Fleetwood in 1962, but after two years, the plant \r\n"
- "was shut down and the computer was used to control another similar plant at \r\n"
- "Winnington in Cheshire. Then in 1980, after 18 years of service, and still in \r\n"
- "working order, it was removed to the Science Museum in London. Editor's Note: this
  article is based on the talk given by the author to the \r\n"
- "North West Group of the Society at the Manchester Museum of Science and Industry
  \r\n"
- "on 10 February 1998.Peter Hunt, a pioneer of large-scale software development,
  died in February aged \r\n"
- "70.Peter became one of the first UK computer users when he was employed, in the
  \r\n"
- "early fifties, in the Aerodynamics Department of the de Havilland Aircraft \r\n"
- "Company. During his three years there he learnt how to program Edsac, the Pilot
  \r\n"
- "Ace, Pegasus and the Elliott 401, and developed a variety of aircraft \r\n"
- "applications. In 1955 he was recruited by Ferranti, initially to work on aircraft
  applications \r\n"
- "for Pegasus. In the hope of stimulating sales of this computer, he developed \r\n"
- "some of the earliest standardised packages. He was later responsible for \r\n"
- "software and customer support on Perseus, the first Ferranti commercial \r\n"
- "computer. In the early 1960s, as Head of the Lily Hill Laboratories in \r\n"
- "Bracknell, he was responsible for the project management of two of the largest
  \r\n"
- "contracts undertaken at that time by the UK computer industry, the Orion 2 \r\n"
- "system at the Prudential and the Atlas 2 system at the UK Atomic Energy \r\n"
- "Authority. Following the takeover of the Ferranti computer division by ICT in 1964,
  he was \r\n"
- "made Head of Systems Development Organisation, responsible for developing a \r\n"
- "portfolio of systems and application software for the 1900 series. Under his \r\n"
- "inspirational leadership and sound project management more than 1000 programmers
  \r\n"
- "produced more than 100 software products, and as a result ICL won a Queen's \r\n"
- "Award for Industry in 1968 \"for technical innovation in the production of \r\n"
- "software\". Peter gave a talk to the Society on this subject at our 1900 seminar
  \r\n"
- "at the Science Museum in May 1996. In 1968 Peter left ICT (which had by then become
  ICL) to take up a position as \r\n"
- "managing director of the UK branch of Leasco Software. Over the next 12 years \r\n"
- "Peter built the company up to become one of the most influential of the early UK
  \r\n"
- "software houses. Leasco Software specialised in real time software projects, \r\n"
- "many of which involved pioneering communications developments. Peter was also \r\n"
- "chairman for four years of sister company Leasco Response, which operated a \r\n"
- "timesharing bureau service. In 1980 he left Leasco to operate as an independent
  consultant. During his later \r\n"
- "years he also developed a practice as an expert witness in legal cases \r\n"
- "concerning computer software in both the UK and the US.Small-Scale Experimental
  MachineChris BurtonAfter moving the machine from the University to the Museum of
  Science and \r\n"
- "Industry in Manchester at the end of February, we continued to improve \r\n"
- "reliability and added various authentic details, for example some special \r\n"
- "stabilised power units and the correct Monitor CRT EHT unit. Other cosmetic \r\n"
- "improvements such as signwriting took place. The Remote Monitor was improved so
  \r\n"
- "that it could be incorporated in the barrier separating the public from the \r\n"
- "machine. A special comparator unit was designed and wired in to help find \r\n"
- "transient faults in the three CRT units. Experience helped us to optimise the \r\n"
- "setting up of the stores so as to be reasonably reliable, giving program runs of
  \r\n"
- "half an hour or more between failures. There was intense activity around us in
  the museum during the week starting 15 \r\n"
- "June, as the galleries and supporting material for the SSEM were being prepared.
  \r\n"
- "The official \"switch-on\" took place on 17 June, using a satellite video link
  \r\n"
- "from the museum to the Bridgewater Hall, where 1800 people saw the mssage \"HELLO
  \r\n"
- "WORLD 1948\" stored in the CRT tube and displayed on the monitor. By 19 June, the
  main CRT store had suddenly badly deteriorated, and would not \r\n"
- "store correctly. Intensive work over the next two days could not identify what
  \r\n"
- "had changed, so that by Sunday 21 June - the actual 50th anniversary - we felt
  \r\n"
- "the store was not reliable enough to get through the day's events. I therefore
  \r\n"
- "had to declare that for the day we had bypassed the main store. The machine was
  \r\n"
- "formally handed over to the safekeeping of the museum, and then Tom Kilburn and
  \r\n"
- "Geoff Tootill re-ran the first program at 1115, as they had done half a century
  \r\n"
- "before. We thereby met our goal in spirit if not to the letter. In the afternoon
  \r\n"
- "of 21 June Sebastian de Ferranti made the awards to the winners of the \r\n"
- "programming competition. This was the last of the week's events. The substantial
  part of our project is now complete. There is a great deal of \r\n"
- "documentation still to finish, and we have to find out what has happened to the
  \r\n"
- "main store and fix it. We also have to work out a way of maintaining the machine
  \r\n"
- "and demonstrating it to the public, without the team feeling it has a job for \r\n"
- "life! To have got this far is a stunning tribute to project team members Charlie
  \r\n"
- "Portman, Ken Turner, Keith Wood, George Roylance, Bill Purvis, Adrian Cornforth
  \r\n"
- "and Suzanne Walker, who have collectively put in nearly 11,000 hours of \r\n"
- "voluntary effort, and who have brought tremendous credit to the CCS. In material
  \r\n"
- "and supportive terms, the project has been made possible by the £150,000-\r\n"
- "worth of sponsorship from ICL, by the University of Manchester and the Museum of
  \r\n"
- "Science and Industry, and by numerous individuals. Pegasus Working PartyLen HewittSince
  the last Pegasus Working Party report in Resurrection issue 18 in autumn \r\n"
- "1997, work has continued at fortnightly intervals. We have made remarkable \r\n"
- "progress, with some setbacks on the way. Pegasus has worked consistently well,
  \r\n"
- "and we have cleared a number of intermittent faults which had plagued us for a
  \r\n"
- "long time. In February we started to test the spare packages in their number order
  in the \r\n"
- "positions recommended in the maintenance manual. I had to go to the USA in the
  \r\n"
- "middle of the month, and at the last meeting I attended before I left we had a
  \r\n"
- "major disaster. We had got up to testing the Type 13 Clock/Reset package in position
  10C. All \r\n"
- "previous testing had been done with HT on when removing and replacing packages.
  \r\n"
- "Things had been going so well that I had forgotten the significance of the power
  \r\n"
- "valves in the Type 13 package, and the heavy currents dissipated. This problem
  \r\n"
- "took a few meetings to resolve, as it was a multiple fault which affected more
  \r\n"
- "than the package we were testing. The fact that the problem arose on Friday 13th
  \r\n"
- "was just a coincidence! We have now completed testing the spare packages, and moved
  on to testing the \r\n"
- "drum. We have had consistent failures on the drum tests for many years, and were
  \r\n"
- "concerned that it was a drum surface problem and that we would have to swap head
  \r\n"
- "connections under the drum covers to sort the problem out. In fact by swapping
  \r\n"
- "packages and then replacing some of the switching diodes in the read switch \r\n"
- "packages we were able to establish that the drum surface was not the problem. We
  have now run through the complete drum tests several times, experiencing just \r\n"
- "an occasional failure on track zero. I believe by doing some more work on the \r\n"
- "drum packages we should be able to get even better reliability. Our next major
  task is to get the machine working with the marginal voltages \r\n"
- "reduced. We were advised at the last CCS Committee Meeting that Pegasus could be
  \r\n"
- "in the \"Making of the Modern World\" gallery which the Science Museum is planning
  \r\n"
- "to open in the year 2000 - this was very heartening news. I would like to thank
  the members of the Working Party - Derek Milledge, Martin \r\n"
- "Wingstedt and Peter Holland - for their support, and also Chris Burton, who has
  \r\n"
- "always had time to discuss problems even though he has been fully occupied with
  \r\n"
- "the Baby rebuild project.Simulators for a variety of historic computers including
  Edsac, Elliott 903, \r\n"
- "Pegasus, the Manchester University Small-Scale Experimental Machine and Zebra\r\n"
- "can be found at our FTP site. Access details are on the next page.The Society has
  its own World Wide Web (WWW) site: it is located atFull access to the FTP archive
  is also available for downloading \r\n"
- "files, including the current and all past issues of  Resurrection \r\n"
- "and simulators for historic machines.\r\n"
- "Many readers will also be interested in WWW sites run by other bodies \r\n"
- "concerned with the history of information technology. \r\n"
- "The Universal Resource Locators for a few of these organisations \r\n"
- "are as follows:\r\n"
- "Readers of Resurrection who wish to contact committee members \r\n"
- "via electronic mail may do so using the following addresses.[The printed version
  contains the email addresses of Committee members]5-6 September 1998, and fortnightly
  thereafter Guided tours and\r\n"
- " exhibition at Bletchley Park, price £3.00, or £2.00 for \r\n"
- "concessionsExhibition of wartime code-breaking equipment and procedures, \r\n"
- "including the replica Colossus, plus 90 minute tours of the wartime buildings29
  September 1998 North West Group meeting \"The Early Days of the NCC\"20 October
  1998 North West Group meeting \"From Freelance Programmers to F1 Group plc\"24 November
  1998 North West Group meeting \"The Distributed Array Processor\"The North West
  Group meetings will take place in the Conference room at the \r\n"
- "Manchester Museum of Science and Industry, starting at 1730.For information on
  London meetings, readers should refer to the insert enclosed \r\n"
- "with this issue.Queries about London meetings should be addressed to George Davis
  on 0181 681 \r\n"
- "7784, and about Manchester meetings to William Gunn on 01663 764997.[The printed
  version carries contact details of committee members]Chairman  Brian Oakley CBE
  FBCSVice-Chairman  Tony Sale FBCSSecretary  Hamish Carmichael FBCSTreasurer  Dan
  HaytonScience Museum representative  Doron Swade CEng MBCSChairman, Elliott 803
  Working Party  John SinclairChairman, Elliott 401 Working Party  Chris Burton  CEng
  FIEE FBCSActing Chairman, Pegasus Working Party  Len Hewitt MBCSChairman, DEC Working
  Party  Dr Adrian Johnstone CEng MIEE MBCSChairman, S100 bus Working Party  Robin
  ShirleyChairman, Turing Bombe Working Party  John Harper CEng MIEE MBCSChairman,
  North West Group  Professor Frank Sumner FBCSMeetings Secretary  George Davis CEng
  FBCSEditor, Resurrection  Nicholas EnticknapArchivist  Harold Gearing FBCSDr Martin
  Campbell-KellyProfessor Sandy Douglas CBE FBCSDr Roger Johnson FBCSGraham Morris
  FBCSJohn Southall FBCSEwart Willey FBCSThe Computer Conservation Society (CCS) is
  a co-operative venture \r\n"
- "between the British Computer Society, the Science Museum of London \r\n"
- "and the Museum of Science and Industry in Manchester.\r\n"
- "The CCS was constituted in September 1989 as a Specialist Group of \r\n"
- "the British Computer Society (BCS). It thus is covered by the Royal \r\n"
- "Charter and charitable status of the BCS.The aims of the CCS are toMembership is
  open to anyone interested in computer conservation and \r\n"
- "the history of computing.The CCS is funded and supported by a grant from the BCS,
  fees from \r\n"
- "corporate membership, donations, and by the free use of Science Museum \r\n"
- "facilities. Membership is free but some charges may be made for \r\n"
- "publications and attendance at seminars and conferences.There are a number of active
  Working Parties on specific computer \r\n"
- "restorations and early computer technologies and software. Younger people \r\n"
- are especially encouraged to take part in order to achieve skills transfer.The corporate
  members who are supporting the Society are ICL and Vaughan Systems.
index:
  resurrection: !ruby/object:Word
    word: resurrection
    stem: resurrect
    docFrequency: 17.0
    docPositions:
    - 4
    - 11
    - 20
    - 38
    - 1336
    - 1388
    - 1390
    - 1413
    - 1441
    - 1466
    - 1472
    - 1486
    - 2325
    - 2354
    - 2360
    - 2367
  home: !ruby/object:Word
    word: home
    stem: home
    docFrequency: 5.0
    docPositions:
    - 4
    - 114
    - 568
    - 1815
  previous: !ruby/object:Word
    word: previous
    stem: previou
    docFrequency: 20.0
    docPositions:
    - 5
    - 56
    - 110
    - 126
    - 238
    - 399
    - 488
    - 740
    - 789
    - 1107
    - 1210
    - 1249
    - 1289
    - 1348
    - 1704
    - 1927
    - 2164
    - 2239
    - 2333
  issue: !ruby/object:Word
    word: issue
    stem: issu
    docFrequency: 21.0
    docPositions:
    - 5
    - 6
    - 20
    - 48
    - 53
    - 82
    - 186
    - 683
    - 744
    - 1336
    - 1434
    - 1472
    - 1494
    - 1497
    - 1511
    - 1569
    - 1892
    - 1931
    - 2325
    - 2366
  next: !ruby/object:Word
    word: next
    stem: next
    docFrequency: 34.0
    docPositions:
    - 6
    - 24
    - 56
    - 110
    - 126
    - 141
    - 238
    - 272
    - 283
    - 488
    - 789
    - 852
    - 974
    - 975
    - 1249
    - 1278
    - 1289
    - 1310
    - 1366
    - 1379
    - 1476
    - 1538
    - 1620
    - 1627
    - 2006
    - 2082
    - 2083
    - 2286
    - 2307
    - 2345
    - 2353
  view: !ruby/object:Word
    word: view
    stem: view
    docFrequency: 8.0
    docPositions:
    - 7
    - 428
    - 501
    - 505
    - 1723
    - 1770
    - 1772
  original: !ruby/object:Word
    word: original
    stem: origin
    docFrequency: 41.0
    docPositions:
    - 7
    - 18
    - 37
    - 43
    - 75
    - 129
    - 156
    - 238
    - 244
    - 255
    - 264
    - 292
    - 307
    - 310
    - 328
    - 337
    - 348
    - 349
    - 404
    - 481
    - 1485
    - 1491
    - 1506
    - 1530
    - 1549
    - 1602
    - 1609
    - 1616
    - 1634
    - 1643
    - 1644
    - 1658
    - 1663
    - 1672
    - 1705
    - 1757
  cover: !ruby/object:Word
    word: cover
    stem: cover
    docFrequency: 5.0
    docPositions:
    - 8
    - 1063
    - 1471
    - 2138
  writelink: !ruby/object:Word
    word: writelink
    stem: writelink
    docFrequency: 2.0
    docPositions:
    - 9
  pdf: !ruby/object:Word
    word: pdf
    stem: pdf
    docFrequency: 2.0
    docPositions:
    - 9
  computer: !ruby/object:Word
    word: computer
    stem: comput
    docFrequency: 110.0
    docPositions:
    - 10
    - 12
    - 18
    - 21
    - 46
    - 54
    - 103
    - 127
    - 134
    - 136
    - 139
    - 155
    - 168
    - 189
    - 193
    - 196
    - 235
    - 248
    - 374
    - 517
    - 523
    - 772
    - 789
    - 791
    - 807
    - 809
    - 858
    - 877
    - 946
    - 953
    - 968
    - 1148
    - 1150
    - 1157
    - 1184
    - 1189
    - 1196
    - 1197
    - 1231
    - 1234
    - 1239
    - 1241
    - 1242
    - 1252
    - 1259
    - 1262
    - 1264
    - 1268
    - 1287
    - 1410
    - 1444
    - 1445
    - 1448
    - 1455
    - 1461
    - 1462
    - 1466
    - 1471
    - 1472
    - 1473
    - 1492
    - 1498
    - 1523
    - 1528
    - 1533
    - 1535
    - 1538
    - 1548
    - 1557
    - 1570
    - 1574
    - 1575
    - 1598
    - 1606
    - 1687
    - 1780
    - 1784
    - 1951
    - 1960
    - 1973
    - 2010
    - 2021
    - 2064
    - 2078
    - 2195
    - 2197
    - 2202
    - 2219
    - 2222
    - 2227
    - 2228
    - 2254
    - 2255
    - 2260
    - 2261
    - 2266
    - 2271
    - 2274
    - 2276
    - 2278
    - 2293
    - 2367
    - 2368
    - 2371
    - 2372
    - 2376
    - 2377
  bulletin: !ruby/object:Word
    word: bulletin
    stem: bulletin
    docFrequency: 4.0
    docPositions:
    - 12
    - 1466
    - 1472
  conservation: !ruby/object:Word
    word: conservation
    stem: conserv
    docFrequency: 11.0
    docPositions:
    - 12
    - 114
    - 1444
    - 1451
    - 1455
    - 1467
    - 1472
    - 2367
    - 2372
  society: !ruby/object:Word
    word: society
    stem: societi
    docFrequency: 38.0
    docPositions:
    - 12
    - 18
    - 58
    - 61
    - 67
    - 106
    - 108
    - 111
    - 113
    - 120
    - 782
    - 1246
    - 1274
    - 1289
    - 1382
    - 1439
    - 1444
    - 1445
    - 1448
    - 1454
    - 1464
    - 1467
    - 1471
    - 1499
    - 1500
    - 1504
    - 1524
    - 1526
    - 1958
    - 2264
    - 2284
    - 2353
    - 2367
    - 2368
    - 2371
    - 2378
  issn: !ruby/object:Word
    word: issn
    stem: issn
    docFrequency: 2.0
    docPositions:
    - 13
  number: !ruby/object:Word
    word: number
    stem: number
    docFrequency: 56.0
    docPositions:
    - 14
    - 325
    - 412
    - 416
    - 421
    - 432
    - 436
    - 472
    - 474
    - 476
    - 785
    - 837
    - 852
    - 862
    - 863
    - 977
    - 1019
    - 1033
    - 1116
    - 1121
    - 1172
    - 1174
    - 1179
    - 1339
    - 1342
    - 1461
    - 1472
    - 1655
    - 1711
    - 1715
    - 1718
    - 1725
    - 1727
    - 1753
    - 1755
    - 1995
    - 2006
    - 2012
    - 2013
    - 2085
    - 2116
    - 2171
    - 2176
    - 2211
    - 2213
    - 2216
    - 2328
    - 2329
    - 2376
  summer: !ruby/object:Word
    word: summer
    stem: summer
    docFrequency: 3.0
    docPositions:
    - 16
    - 1472
  editorial: !ruby/object:Word
    word: editorial
    stem: editori
    docFrequency: 3.0
    docPositions:
    - 18
    - 785
  nicholas: !ruby/object:Word
    word: nicholas
    stem: nichola
    docFrequency: 8.0
    docPositions:
    - 18
    - 1441
    - 1469
    - 1470
    - 1528
    - 2367
  enticknap: !ruby/object:Word
    word: enticknap
    stem: enticknap
    docFrequency: 8.0
    docPositions:
    - 18
    - 19
    - 126
    - 1469
    - 1470
    - 1472
  editor: !ruby/object:Word
    word: editor
    stem: editor
    docFrequency: 10.0
    docPositions:
    - 18
    - 19
    - 781
    - 786
    - 1245
    - 1469
    - 1957
    - 1959
    - 2263
  news: !ruby/object:Word
    word: news
    stem: new
    docFrequency: 5.0
    docPositions:
    - 18
    - 56
    - 1369
    - 2348
  round: !ruby/object:Word
    word: round
    stem: round
    docFrequency: 9.0
    docPositions:
    - 18
    - 56
    - 625
    - 778
    - 1854
    - 1955
  up: !ruby/object:Word
    word: up
    stem: up
    docFrequency: 39.0
    docPositions:
    - 18
    - 34
    - 56
    - 128
    - 510
    - 562
    - 627
    - 631
    - 633
    - 655
    - 717
    - 719
    - 750
    - 858
    - 1041
    - 1057
    - 1277
    - 1279
    - 1300
    - 1347
    - 1484
    - 1529
    - 1775
    - 1811
    - 1856
    - 1858
    - 1860
    - 1874
    - 1914
    - 1935
    - 2010
    - 2120
    - 2134
    - 2285
    - 2287
    - 2301
    - 2332
  ccs: !ruby/object:Word
    word: ccs
    stem: cc
    docFrequency: 21.0
    docPositions:
    - 18
    - 61
    - 69
    - 110
    - 1329
    - 1367
    - 1383
    - 1385
    - 1444
    - 1447
    - 1450
    - 1457
    - 1500
    - 1504
    - 2322
    - 2346
    - 2367
    - 2370
    - 2372
    - 2373
  collection: !ruby/object:Word
    word: collection
    stem: collect
    docFrequency: 4.0
    docPositions:
    - 18
    - 110
    - 111
  policy: !ruby/object:Word
    word: policy
    stem: polici
    docFrequency: 5.0
    docPositions:
    - 18
    - 106
    - 110
    - 1524
  computing: !ruby/object:Word
    word: computing
    stem: comput
    docFrequency: 26.0
    docPositions:
    - 18
    - 29
    - 45
    - 48
    - 126
    - 132
    - 223
    - 241
    - 520
    - 682
    - 722
    - 1407
    - 1410
    - 1412
    - 1456
    - 1479
    - 1491
    - 1494
    - 1533
    - 1592
    - 1600
    - 1783
    - 1891
    - 1917
    - 2373
  s: !ruby/object:Word
    word: s
    stem: s
    docFrequency: 67.0
    docPositions:
    - 18
    - 40
    - 41
    - 46
    - 87
    - 108
    - 126
    - 138
    - 155
    - 191
    - 223
    - 235
    - 254
    - 257
    - 262
    - 281
    - 282
    - 353
    - 378
    - 465
    - 492
    - 501
    - 580
    - 646
    - 703
    - 705
    - 781
    - 877
    - 895
    - 897
    - 1245
    - 1272
    - 1312
    - 1318
    - 1488
    - 1489
    - 1492
    - 1514
    - 1526
    - 1537
    - 1548
    - 1572
    - 1592
    - 1598
    - 1608
    - 1611
    - 1614
    - 1625
    - 1626
    - 1674
    - 1689
    - 1748
    - 1764
    - 1770
    - 1823
    - 1867
    - 1904
    - 1906
    - 1957
    - 2021
    - 2033
    - 2263
    - 2282
    - 2309
    - 2315
  golden: !ruby/object:Word
    word: golden
    stem: golden
    docFrequency: 13.0
    docPositions:
    - 18
    - 21
    - 23
    - 33
    - 126
    - 127
    - 159
    - 1473
    - 1475
    - 1483
    - 1528
    - 1550
  jubilee: !ruby/object:Word
    word: jubilee
    stem: jubile
    docFrequency: 6.0
    docPositions:
    - 18
    - 21
    - 127
    - 1473
    - 1528
  program: !ruby/object:Word
    word: program
    stem: program
    docFrequency: 102.0
    docPositions:
    - 18
    - 21
    - 40
    - 42
    - 135
    - 146
    - 175
    - 176
    - 181
    - 234
    - 240
    - 242
    - 245
    - 247
    - 250
    - 285
    - 287
    - 309
    - 329
    - 333
    - 340
    - 378
    - 404
    - 415
    - 430
    - 481
    - 529
    - 698
    - 752
    - 841
    - 842
    - 843
    - 949
    - 956
    - 957
    - 978
    - 1051
    - 1052
    - 1094
    - 1110
    - 1115
    - 1122
    - 1156
    - 1234
    - 1254
    - 1300
    - 1315
    - 1473
    - 1488
    - 1490
    - 1534
    - 1541
    - 1560
    - 1561
    - 1564
    - 1597
    - 1599
    - 1601
    - 1603
    - 1605
    - 1606
    - 1629
    - 1631
    - 1643
    - 1659
    - 1661
    - 1666
    - 1689
    - 1705
    - 1714
    - 1723
    - 1757
    - 1788
    - 1901
    - 1937
    - 1997
    - 1998
    - 1999
    - 2067
    - 2070
    - 2071
    - 2086
    - 2128
    - 2129
    - 2159
    - 2167
    - 2170
    - 2177
    - 2201
    - 2255
    - 2268
    - 2301
    - 2312
  geoff: !ruby/object:Word
    word: geoff
    stem: geoff
    docFrequency: 15.0
    docPositions:
    - 18
    - 38
    - 41
    - 183
    - 214
    - 223
    - 1315
    - 1486
    - 1489
    - 1566
    - 1585
    - 1592
    - 1599
    - 2312
  tootill: !ruby/object:Word
    word: tootill
    stem: tootil
    docFrequency: 15.0
    docPositions:
    - 18
    - 38
    - 183
    - 186
    - 214
    - 223
    - 238
    - 1315
    - 1486
    - 1566
    - 1569
    - 1585
    - 1592
    - 2312
  thinking: !ruby/object:Word
    word: thinking
    stem: think
    docFrequency: 7.0
    docPositions:
    - 18
    - 48
    - 488
    - 592
    - 1494
    - 1833
  behind: !ruby/object:Word
    word: behind
    stem: behind
    docFrequency: 5.0
    docPositions:
    - 18
    - 49
    - 488
    - 1495
  ibm: !ruby/object:Word
    word: ibm
    stem: ibm
    docFrequency: 57.0
    docPositions:
    - 18
    - 46
    - 488
    - 490
    - 494
    - 509
    - 534
    - 548
    - 566
    - 567
    - 573
    - 584
    - 596
    - 600
    - 608
    - 616
    - 617
    - 619
    - 624
    - 629
    - 642
    - 646
    - 683
    - 693
    - 703
    - 741
    - 749
    - 756
    - 782
    - 1492
    - 1762
    - 1765
    - 1774
    - 1791
    - 1799
    - 1813
    - 1814
    - 1818
    - 1827
    - 1835
    - 1837
    - 1841
    - 1847
    - 1848
    - 1850
    - 1853
    - 1856
    - 1865
    - 1867
    - 1892
    - 1898
    - 1904
    - 1928
    - 1934
    - 1939
    - 1958
  peter: !ruby/object:Word
    word: peter
    stem: peter
    docFrequency: 23.0
    docPositions:
    - 18
    - 48
    - 96
    - 1249
    - 1250
    - 1252
    - 1274
    - 1277
    - 1279
    - 1281
    - 1372
    - 1494
    - 1519
    - 1762
    - 2265
    - 2266
    - 2284
    - 2285
    - 2287
    - 2289
    - 2349
  titman: !ruby/object:Word
    word: titman
    stem: titman
    docFrequency: 5.0
    docPositions:
    - 18
    - 48
    - 488
    - 1494
  argus: !ruby/object:Word
    word: argus
    stem: argu
    docFrequency: 40.0
    docPositions:
    - 18
    - 789
    - 791
    - 918
    - 953
    - 970
    - 981
    - 983
    - 1009
    - 1012
    - 1015
    - 1021
    - 1070
    - 1100
    - 1104
    - 1105
    - 1113
    - 1136
    - 1160
    - 1162
    - 1182
    - 1197
    - 1960
    - 2046
    - 2080
    - 2087
    - 2089
    - 2105
    - 2106
    - 2143
    - 2161
    - 2163
    - 2164
    - 2168
    - 2185
    - 2203
    - 2217
    - 2228
  and: !ruby/object:Word
    word: and
    stem: and
    docFrequency: 752.0
    docPositions:
    - 18
    - 24
    - 25
    - 29
    - 32
    - 33
    - 39
    - 43
    - 48
    - 59
    - 63
    - 67
    - 78
    - 84
    - 86
    - 91
    - 92
    - 96
    - 104
    - 111
    - 118
    - 123
    - 130
    - 137
    - 138
    - 143
    - 147
    - 154
    - 159
    - 163
    - 177
    - 183
    - 185
    - 188
    - 193
    - 203
    - 204
    - 205
    - 206
    - 214
    - 217
    - 222
    - 226
    - 228
    - 236
    - 244
    - 259
    - 260
    - 261
    - 267
    - 271
    - 272
    - 275
    - 276
    - 281
    - 282
    - 283
    - 284
    - 286
    - 287
    - 292
    - 294
    - 298
    - 299
    - 300
    - 319
    - 320
    - 326
    - 330
    - 339
    - 345
    - 347
    - 361
    - 365
    - 377
    - 379
    - 382
    - 385
    - 386
    - 391
    - 396
    - 397
    - 398
    - 403
    - 413
    - 414
    - 419
    - 433
    - 436
    - 437
    - 438
    - 442
    - 448
    - 460
    - 463
    - 464
    - 471
    - 483
    - 484
    - 495
    - 497
    - 501
    - 506
    - 509
    - 510
    - 514
    - 515
    - 518
    - 528
    - 529
    - 539
    - 542
    - 543
    - 546
    - 549
    - 550
    - 551
    - 552
    - 562
    - 566
    - 567
    - 577
    - 580
    - 589
    - 590
    - 591
    - 605
    - 610
    - 618
    - 625
    - 627
    - 635
    - 636
    - 637
    - 644
    - 647
    - 655
    - 656
    - 666
    - 678
    - 682
    - 684
    - 686
    - 689
    - 690
    - 694
    - 700
    - 703
    - 715
    - 722
    - 726
    - 727
    - 742
    - 752
    - 756
    - 770
    - 789
    - 796
    - 797
    - 799
    - 802
    - 805
    - 809
    - 811
    - 813
    - 814
    - 820
    - 821
    - 829
    - 831
    - 832
    - 836
    - 837
    - 841
    - 844
    - 846
    - 853
    - 856
    - 858
    - 863
    - 867
    - 871
    - 878
    - 879
    - 881
    - 884
    - 885
    - 886
    - 887
    - 898
    - 900
    - 912
    - 919
    - 926
    - 932
    - 940
    - 941
    - 945
    - 947
    - 956
    - 961
    - 963
    - 964
    - 968
    - 970
    - 973
    - 976
    - 981
    - 982
    - 989
    - 991
    - 993
    - 999
    - 1003
    - 1009
    - 1010
    - 1015
    - 1016
    - 1021
    - 1023
    - 1025
    - 1026
    - 1027
    - 1028
    - 1029
    - 1032
    - 1037
    - 1041
    - 1042
    - 1043
    - 1044
    - 1046
    - 1051
    - 1052
    - 1054
    - 1056
    - 1058
    - 1061
    - 1062
    - 1064
    - 1065
    - 1076
    - 1080
    - 1082
    - 1083
    - 1087
    - 1090
    - 1094
    - 1100
    - 1102
    - 1104
    - 1109
    - 1110
    - 1116
    - 1119
    - 1121
    - 1131
    - 1132
    - 1133
    - 1137
    - 1138
    - 1140
    - 1141
    - 1144
    - 1145
    - 1146
    - 1147
    - 1149
    - 1153
    - 1154
    - 1157
    - 1164
    - 1165
    - 1166
    - 1170
    - 1172
    - 1174
    - 1183
    - 1185
    - 1186
    - 1192
    - 1193
    - 1195
    - 1199
    - 1205
    - 1219
    - 1221
    - 1224
    - 1230
    - 1242
    - 1243
    - 1246
    - 1255
    - 1261
    - 1265
    - 1270
    - 1271
    - 1272
    - 1287
    - 1292
    - 1294
    - 1295
    - 1298
    - 1304
    - 1307
    - 1309
    - 1314
    - 1321
    - 1322
    - 1323
    - 1328
    - 1329
    - 1330
    - 1331
    - 1332
    - 1339
    - 1344
    - 1348
    - 1350
    - 1355
    - 1356
    - 1357
    - 1359
    - 1372
    - 1378
    - 1381
    - 1390
    - 1391
    - 1419
    - 1421
    - 1431
    - 1437
    - 1443
    - 1446
    - 1449
    - 1451
    - 1454
    - 1455
    - 1457
    - 1458
    - 1460
    - 1462
    - 1464
    - 1467
    - 1476
    - 1477
    - 1479
    - 1482
    - 1483
    - 1487
    - 1491
    - 1494
    - 1500
    - 1502
    - 1504
    - 1509
    - 1513
    - 1516
    - 1517
    - 1519
    - 1524
    - 1531
    - 1536
    - 1537
    - 1540
    - 1542
    - 1547
    - 1550
    - 1552
    - 1562
    - 1566
    - 1568
    - 1569
    - 1574
    - 1578
    - 1579
    - 1580
    - 1581
    - 1585
    - 1588
    - 1591
    - 1593
    - 1595
    - 1599
    - 1602
    - 1611
    - 1612
    - 1613
    - 1617
    - 1619
    - 1620
    - 1621
    - 1622
    - 1625
    - 1626
    - 1627
    - 1628
    - 1630
    - 1631
    - 1634
    - 1636
    - 1637
    - 1638
    - 1651
    - 1652
    - 1656
    - 1660
    - 1665
    - 1669
    - 1671
    - 1678
    - 1680
    - 1688
    - 1690
    - 1693
    - 1694
    - 1695
    - 1698
    - 1701
    - 1702
    - 1703
    - 1704
    - 1712
    - 1713
    - 1716
    - 1726
    - 1727
    - 1728
    - 1729
    - 1731
    - 1735
    - 1745
    - 1746
    - 1747
    - 1752
    - 1759
    - 1760
    - 1766
    - 1768
    - 1770
    - 1773
    - 1774
    - 1775
    - 1779
    - 1780
    - 1781
    - 1787
    - 1788
    - 1794
    - 1797
    - 1798
    - 1799
    - 1800
    - 1801
    - 1802
    - 1803
    - 1811
    - 1813
    - 1814
    - 1822
    - 1823
    - 1830
    - 1831
    - 1832
    - 1840
    - 1843
    - 1849
    - 1854
    - 1856
    - 1860
    - 1861
    - 1862
    - 1867
    - 1868
    - 1874
    - 1875
    - 1883
    - 1889
    - 1891
    - 1893
    - 1895
    - 1896
    - 1897
    - 1899
    - 1903
    - 1904
    - 1912
    - 1917
    - 1919
    - 1920
    - 1929
    - 1937
    - 1939
    - 1949
    - 1964
    - 1965
    - 1967
    - 1970
    - 1973
    - 1975
    - 1977
    - 1978
    - 1982
    - 1983
    - 1989
    - 1991
    - 1992
    - 1994
    - 1995
    - 1997
    - 2000
    - 2002
    - 2007
    - 2008
    - 2010
    - 2013
    - 2015
    - 2019
    - 2022
    - 2023
    - 2026
    - 2027
    - 2028
    - 2029
    - 2034
    - 2040
    - 2047
    - 2052
    - 2056
    - 2060
    - 2061
    - 2063
    - 2065
    - 2070
    - 2073
    - 2075
    - 2076
    - 2078
    - 2080
    - 2081
    - 2084
    - 2087
    - 2088
    - 2093
    - 2095
    - 2097
    - 2101
    - 2103
    - 2105
    - 2106
    - 2107
    - 2108
    - 2110
    - 2111
    - 2112
    - 2113
    - 2114
    - 2115
    - 2118
    - 2120
    - 2121
    - 2122
    - 2123
    - 2125
    - 2128
    - 2129
    - 2131
    - 2133
    - 2135
    - 2136
    - 2137
    - 2139
    - 2140
    - 2147
    - 2149
    - 2151
    - 2152
    - 2154
    - 2157
    - 2159
    - 2161
    - 2163
    - 2166
    - 2167
    - 2171
    - 2174
    - 2176
    - 2182
    - 2183
    - 2184
    - 2186
    - 2187
    - 2189
    - 2190
    - 2191
    - 2192
    - 2193
    - 2194
    - 2196
    - 2198
    - 2199
    - 2202
    - 2205
    - 2206
    - 2207
    - 2209
    - 2211
    - 2213
    - 2218
    - 2220
    - 2221
    - 2225
    - 2226
    - 2230
    - 2234
    - 2244
    - 2246
    - 2247
    - 2253
    - 2261
    - 2262
    - 2264
    - 2269
    - 2273
    - 2277
    - 2280
    - 2281
    - 2282
    - 2293
    - 2295
    - 2296
    - 2299
    - 2303
    - 2306
    - 2311
    - 2316
    - 2317
    - 2318
    - 2321
    - 2322
    - 2323
    - 2324
    - 2325
    - 2328
    - 2331
    - 2333
    - 2335
    - 2338
    - 2339
    - 2340
    - 2342
    - 2349
    - 2352
    - 2354
    - 2355
    - 2361
    - 2363
    - 2365
    - 2367
    - 2369
    - 2372
    - 2373
    - 2374
    - 2376
    - 2377
    - 2378
  process: !ruby/object:Word
    word: process
    stem: process
    docFrequency: 26.0
    docPositions:
    - 18
    - 54
    - 136
    - 152
    - 492
    - 670
    - 789
    - 858
    - 969
    - 1097
    - 1127
    - 1139
    - 1160
    - 1182
    - 1498
    - 1535
    - 1545
    - 1764
    - 1885
    - 2010
    - 2079
    - 2160
    - 2180
    - 2188
    - 2217
  control: !ruby/object:Word
    word: control
    stem: control
    docFrequency: 35.0
    docPositions:
    - 18
    - 54
    - 523
    - 792
    - 810
    - 879
    - 969
    - 1017
    - 1051
    - 1097
    - 1127
    - 1139
    - 1160
    - 1182
    - 1190
    - 1227
    - 1242
    - 1498
    - 1784
    - 1961
    - 1974
    - 2023
    - 2079
    - 2108
    - 2128
    - 2160
    - 2180
    - 2188
    - 2217
    - 2223
    - 2250
    - 2261
  maurice: !ruby/object:Word
    word: maurice
    stem: mauric
    docFrequency: 7.0
    docPositions:
    - 18
    - 53
    - 217
    - 1497
    - 1588
    - 1960
  gribble: !ruby/object:Word
    word: gribble
    stem: gribbl
    docFrequency: 5.0
    docPositions:
    - 18
    - 53
    - 789
    - 1497
  obituary: !ruby/object:Word
    word: obituary
    stem: obituari
    docFrequency: 3.0
    docPositions:
    - 18
    - 1249
  hunt: !ruby/object:Word
    word: hunt
    stem: hunt
    docFrequency: 5.0
    docPositions:
    - 18
    - 1249
    - 1250
    - 2265
  activity: !ruby/object:Word
    word: activity
    stem: activ
    docFrequency: 7.0
    docPositions:
    - 18
    - 710
    - 1289
    - 1303
    - 1909
    - 2302
  ftp: !ruby/object:Word
    word: ftp
    stem: ftp
    docFrequency: 8.0
    docPositions:
    - 18
    - 1379
    - 1384
    - 1385
    - 1389
    - 2353
  web: !ruby/object:Word
    word: web
    stem: web
    docFrequency: 6.0
    docPositions:
    - 18
    - 1381
    - 1382
    - 1386
    - 2353
  e: !ruby/object:Word
    word: e
    stem: e
    docFrequency: 3.0
    docPositions:
    - 18
    - 1381
  mail: !ruby/object:Word
    word: mail
    stem: mail
    docFrequency: 5.0
    docPositions:
    - 18
    - 1381
    - 1414
    - 2361
  addresses: !ruby/object:Word
    word: addresses
    stem: address
    docFrequency: 11.0
    docPositions:
    - 18
    - 158
    - 989
    - 1381
    - 1414
    - 1416
    - 1549
    - 2093
    - 2361
  forthcoming: !ruby/object:Word
    word: forthcoming
    stem: forthcom
    docFrequency: 4.0
    docPositions:
    - 18
    - 102
    - 1522
  events: !ruby/object:Word
    word: events
    stem: event
    docFrequency: 17.0
    docPositions:
    - 18
    - 22
    - 28
    - 36
    - 102
    - 158
    - 1312
    - 1318
    - 1418
    - 1474
    - 1478
    - 1484
    - 1522
    - 1549
    - 2309
    - 2315
  committee: !ruby/object:Word
    word: committee
    stem: committe
    docFrequency: 22.0
    docPositions:
    - 18
    - 67
    - 106
    - 717
    - 720
    - 730
    - 780
    - 1367
    - 1413
    - 1416
    - 1440
    - 1504
    - 1524
    - 1914
    - 1915
    - 1921
    - 1957
    - 2346
    - 2360
    - 2361
    - 2367
  aims: !ruby/object:Word
    word: aims
    stem: aim
    docFrequency: 4.0
    docPositions:
    - 18
    - 1450
    - 2372
  objectives: !ruby/object:Word
    word: objectives
    stem: object
    docFrequency: 3.0
    docPositions:
    - 18
    - 1443
  topprevious: !ruby/object:Word
    word: topprevious
    stem: topprevi
    docFrequency: 6.0
    docPositions:
    - 19
    - 1381
    - 1418
    - 1439
    - 1443
  nexteditorialnicholas: !ruby/object:Word
    word: nexteditorialnicholas
    stem: nexteditorialnichola
    docFrequency: 2.0
    docPositions:
    - 19
  major: !ruby/object:Word
    word: major
    stem: major
    docFrequency: 19.0
    docPositions:
    - 20
    - 22
    - 51
    - 115
    - 121
    - 195
    - 220
    - 670
    - 1345
    - 1366
    - 1472
    - 1474
    - 1495
    - 1574
    - 1589
    - 1885
    - 2332
    - 2345
  event: !ruby/object:Word
    word: event
    stem: event
    docFrequency: 7.0
    docPositions:
    - 20
    - 23
    - 75
    - 1472
    - 1475
    - 1506
  since: !ruby/object:Word
    word: since
    stem: sinc
    docFrequency: 14.0
    docPositions:
    - 20
    - 131
    - 382
    - 475
    - 836
    - 1050
    - 1336
    - 1472
    - 1532
    - 1693
    - 1754
    - 1994
    - 2127
  has: !ruby/object:Word
    word: has
    stem: ha
    docFrequency: 44.0
    docPositions:
    - 20
    - 72
    - 83
    - 86
    - 106
    - 111
    - 131
    - 137
    - 173
    - 242
    - 285
    - 750
    - 850
    - 917
    - 1321
    - 1323
    - 1330
    - 1337
    - 1338
    - 1372
    - 1373
    - 1382
    - 1472
    - 1505
    - 1512
    - 1513
    - 1524
    - 1532
    - 1536
    - 1558
    - 1601
    - 1629
    - 1935
    - 2004
    - 2045
    - 2316
    - 2318
    - 2323
    - 2326
    - 2327
    - 2349
    - 2350
    - 2353
  unquestionably: !ruby/object:Word
    word: unquestionably
    stem: unquestion
    docFrequency: 3.0
    docPositions:
    - 20
    - 1472
  been: !ruby/object:Word
    word: been
    stem: been
    docFrequency: 41.0
    docPositions:
    - 20
    - 131
    - 142
    - 173
    - 242
    - 244
    - 285
    - 306
    - 313
    - 382
    - 468
    - 470
    - 603
    - 727
    - 1152
    - 1196
    - 1330
    - 1348
    - 1349
    - 1373
    - 1472
    - 1532
    - 1539
    - 1558
    - 1601
    - 1602
    - 1629
    - 1642
    - 1647
    - 1693
    - 1749
    - 1751
    - 1838
    - 1920
    - 2197
    - 2227
    - 2323
    - 2333
    - 2334
    - 2350
  first: !ruby/object:Word
    word: first
    stem: first
    docFrequency: 78.0
    docPositions:
    - 21
    - 40
    - 43
    - 90
    - 135
    - 136
    - 185
    - 199
    - 234
    - 247
    - 272
    - 281
    - 285
    - 287
    - 309
    - 317
    - 320
    - 321
    - 333
    - 475
    - 492
    - 536
    - 548
    - 646
    - 648
    - 734
    - 745
    - 780
    - 791
    - 973
    - 978
    - 1105
    - 1162
    - 1166
    - 1182
    - 1218
    - 1252
    - 1261
    - 1315
    - 1473
    - 1488
    - 1491
    - 1515
    - 1534
    - 1535
    - 1568
    - 1576
    - 1597
    - 1605
    - 1620
    - 1625
    - 1629
    - 1631
    - 1649
    - 1652
    - 1653
    - 1661
    - 1754
    - 1764
    - 1791
    - 1799
    - 1867
    - 1869
    - 1923
    - 1932
    - 1957
    - 1960
    - 2081
    - 2086
    - 2164
    - 2203
    - 2207
    - 2217
    - 2243
    - 2266
    - 2273
    - 2312
  operational: !ruby/object:Word
    word: operational
    stem: oper
    docFrequency: 9.0
    docPositions:
    - 21
    - 40
    - 234
    - 862
    - 1473
    - 1488
    - 1597
    - 2012
  stored: !ruby/object:Word
    word: stored
    stem: store
    docFrequency: 19.0
    docPositions:
    - 21
    - 167
    - 234
    - 247
    - 842
    - 867
    - 1116
    - 1118
    - 1307
    - 1473
    - 1556
    - 1597
    - 1605
    - 1998
    - 2015
    - 2171
    - 2173
    - 2306
  which: !ruby/object:Word
    word: which
    stem: which
    docFrequency: 150.0
    docPositions:
    - 21
    - 24
    - 37
    - 40
    - 58
    - 70
    - 111
    - 113
    - 129
    - 139
    - 160
    - 208
    - 222
    - 251
    - 275
    - 277
    - 280
    - 288
    - 370
    - 433
    - 437
    - 469
    - 495
    - 511
    - 528
    - 550
    - 559
    - 560
    - 637
    - 649
    - 670
    - 728
    - 734
    - 737
    - 745
    - 752
    - 792
    - 796
    - 802
    - 812
    - 826
    - 827
    - 828
    - 830
    - 846
    - 883
    - 927
    - 942
    - 958
    - 972
    - 1017
    - 1021
    - 1047
    - 1073
    - 1075
    - 1080
    - 1113
    - 1117
    - 1129
    - 1145
    - 1156
    - 1162
    - 1187
    - 1191
    - 1220
    - 1228
    - 1232
    - 1239
    - 1277
    - 1281
    - 1282
    - 1339
    - 1351
    - 1368
    - 1452
    - 1473
    - 1476
    - 1485
    - 1488
    - 1499
    - 1505
    - 1530
    - 1538
    - 1551
    - 1581
    - 1591
    - 1607
    - 1621
    - 1623
    - 1624
    - 1632
    - 1683
    - 1726
    - 1728
    - 1750
    - 1766
    - 1776
    - 1787
    - 1801
    - 1808
    - 1809
    - 1862
    - 1870
    - 1885
    - 1921
    - 1923
    - 1926
    - 1932
    - 1937
    - 1961
    - 1964
    - 1970
    - 1976
    - 1986
    - 1987
    - 1988
    - 1990
    - 2002
    - 2025
    - 2053
    - 2062
    - 2072
    - 2080
    - 2108
    - 2126
    - 2144
    - 2146
    - 2149
    - 2168
    - 2172
    - 2180
    - 2192
    - 2201
    - 2203
    - 2222
    - 2224
    - 2245
    - 2251
    - 2255
    - 2260
    - 2285
    - 2289
    - 2290
    - 2328
    - 2336
    - 2347
  celebrated: !ruby/object:Word
    word: celebrated
    stem: celebr
    docFrequency: 3.0
    docPositions:
    - 22
    - 1474
  great: !ruby/object:Word
    word: great
    stem: great
    docFrequency: 7.0
    docPositions:
    - 22
    - 603
    - 1320
    - 1474
    - 1838
    - 2315
  enthusiasm: !ruby/object:Word
    word: enthusiasm
    stem: enthusiasm
    docFrequency: 5.0
    docPositions:
    - 22
    - 222
    - 1474
    - 1591
  manchester: !ruby/object:Word
    word: manchester
    stem: manchest
    docFrequency: 53.0
    docPositions:
    - 22
    - 28
    - 59
    - 62
    - 118
    - 128
    - 136
    - 163
    - 192
    - 199
    - 204
    - 209
    - 213
    - 217
    - 221
    - 225
    - 235
    - 246
    - 811
    - 1246
    - 1293
    - 1331
    - 1378
    - 1401
    - 1431
    - 1437
    - 1446
    - 1474
    - 1478
    - 1500
    - 1501
    - 1529
    - 1535
    - 1552
    - 1573
    - 1576
    - 1579
    - 1582
    - 1584
    - 1588
    - 1590
    - 1592
    - 1598
    - 1604
    - 1975
    - 2264
    - 2294
    - 2324
    - 2352
    - 2365
    - 2367
    - 2369
  june: !ruby/object:Word
    word: june
    stem: june
    docFrequency: 51.0
    docPositions:
    - 22
    - 23
    - 26
    - 34
    - 73
    - 129
    - 158
    - 160
    - 175
    - 183
    - 252
    - 304
    - 364
    - 370
    - 372
    - 383
    - 437
    - 443
    - 448
    - 469
    - 1304
    - 1305
    - 1309
    - 1311
    - 1317
    - 1474
    - 1475
    - 1478
    - 1484
    - 1506
    - 1530
    - 1549
    - 1551
    - 1560
    - 1566
    - 1608
    - 1640
    - 1679
    - 1683
    - 1685
    - 1694
    - 1728
    - 1732
    - 1735
    - 1750
    - 2303
    - 2304
    - 2306
    - 2308
    - 2314
  included: !ruby/object:Word
    word: included
    stem: includ
    docFrequency: 11.0
    docPositions:
    - 23
    - 216
    - 353
    - 477
    - 1071
    - 1475
    - 1587
    - 1674
    - 1756
    - 2144
  launch: !ruby/object:Word
    word: launch
    stem: launch
    docFrequency: 17.0
    docPositions:
    - 23
    - 46
    - 138
    - 159
    - 765
    - 779
    - 945
    - 1163
    - 1475
    - 1492
    - 1537
    - 1550
    - 1946
    - 1956
    - 2063
    - 2204
  bridgewater: !ruby/object:Word
    word: bridgewater
    stem: bridgewat
    docFrequency: 7.0
    docPositions:
    - 23
    - 31
    - 1306
    - 1475
    - 1481
    - 2305
  hall: !ruby/object:Word
    word: hall
    stem: hall
    docFrequency: 7.0
    docPositions:
    - 23
    - 31
    - 1306
    - 1475
    - 1481
    - 2305
  anniversary: !ruby/object:Word
    word: anniversary
    stem: anniversari
    docFrequency: 15.0
    docPositions:
    - 24
    - 25
    - 33
    - 38
    - 128
    - 159
    - 1311
    - 1476
    - 1477
    - 1483
    - 1486
    - 1529
    - 1550
    - 2308
  conference: !ruby/object:Word
    word: conference
    stem: confer
    docFrequency: 9.0
    docPositions:
    - 24
    - 33
    - 160
    - 1430
    - 1476
    - 1483
    - 1551
    - 2364
  spanned: !ruby/object:Word
    word: spanned
    stem: span
    docFrequency: 3.0
    docPositions:
    - 24
    - 1476
  two: !ruby/object:Word
    word: two
    stem: two
    docFrequency: 75.0
    docPositions:
    - 24
    - 149
    - 158
    - 199
    - 262
    - 263
    - 284
    - 289
    - 310
    - 350
    - 366
    - 379
    - 423
    - 440
    - 477
    - 501
    - 502
    - 503
    - 513
    - 801
    - 842
    - 873
    - 881
    - 930
    - 936
    - 962
    - 977
    - 996
    - 1004
    - 1088
    - 1104
    - 1193
    - 1205
    - 1227
    - 1241
    - 1263
    - 1310
    - 1476
    - 1544
    - 1549
    - 1576
    - 1614
    - 1615
    - 1628
    - 1633
    - 1644
    - 1673
    - 1681
    - 1690
    - 1720
    - 1731
    - 1756
    - 1770
    - 1771
    - 1772
    - 1778
    - 1969
    - 1998
    - 2021
    - 2023
    - 2054
    - 2058
    - 2074
    - 2085
    - 2098
    - 2104
    - 2155
    - 2163
    - 2226
    - 2234
    - 2250
    - 2260
    - 2275
    - 2307
  days: !ruby/object:Word
    word: days
    stem: dai
    docFrequency: 23.0
    docPositions:
    - 24
    - 34
    - 222
    - 469
    - 517
    - 539
    - 588
    - 757
    - 827
    - 1310
    - 1424
    - 1476
    - 1484
    - 1591
    - 1750
    - 1780
    - 1794
    - 1829
    - 1940
    - 1987
    - 2307
    - 2364
  handover: !ruby/object:Word
    word: handover
    stem: handov
    docFrequency: 3.0
    docPositions:
    - 24
    - 1476
  rebuilt: !ruby/object:Word
    word: rebuilt
    stem: rebuilt
    docFrequency: 3.0
    docPositions:
    - 25
    - 1477
  ssem: !ruby/object:Word
    word: ssem
    stem: ssem
    docFrequency: 23.0
    docPositions:
    - 25
    - 30
    - 135
    - 171
    - 173
    - 189
    - 203
    - 246
    - 271
    - 279
    - 1304
    - 1387
    - 1477
    - 1480
    - 1534
    - 1558
    - 1570
    - 1578
    - 1604
    - 1619
    - 2303
  museum: !ruby/object:Word
    word: museum
    stem: museum
    docFrequency: 46.0
    docPositions:
    - 25
    - 58
    - 64
    - 69
    - 116
    - 117
    - 118
    - 235
    - 782
    - 1244
    - 1246
    - 1275
    - 1292
    - 1303
    - 1306
    - 1314
    - 1331
    - 1368
    - 1404
    - 1410
    - 1431
    - 1441
    - 1445
    - 1446
    - 1458
    - 1477
    - 1499
    - 1503
    - 1504
    - 1598
    - 1958
    - 2263
    - 2264
    - 2285
    - 2293
    - 2302
    - 2305
    - 2311
    - 2324
    - 2347
    - 2365
    - 2367
    - 2368
    - 2369
    - 2374
  science: !ruby/object:Word
    word: science
    stem: scienc
    docFrequency: 40.0
    docPositions:
    - 25
    - 59
    - 64
    - 69
    - 117
    - 118
    - 236
    - 494
    - 500
    - 782
    - 1244
    - 1246
    - 1275
    - 1292
    - 1332
    - 1368
    - 1404
    - 1431
    - 1445
    - 1446
    - 1458
    - 1477
    - 1500
    - 1503
    - 1504
    - 1599
    - 1765
    - 1769
    - 1958
    - 2263
    - 2264
    - 2285
    - 2293
    - 2325
    - 2347
    - 2365
    - 2368
    - 2369
    - 2374
  industry: !ruby/object:Word
    word: industry
    stem: industri
    docFrequency: 28.0
    docPositions:
    - 25
    - 59
    - 118
    - 193
    - 236
    - 540
    - 817
    - 1246
    - 1264
    - 1273
    - 1293
    - 1332
    - 1431
    - 1446
    - 1477
    - 1500
    - 1574
    - 1599
    - 1795
    - 1981
    - 2264
    - 2276
    - 2283
    - 2294
    - 2325
    - 2365
    - 2369
  itself: !ruby/object:Word
    word: itself
    stem: itself
    docFrequency: 11.0
    docPositions:
    - 25
    - 175
    - 180
    - 636
    - 648
    - 1477
    - 1560
    - 1563
    - 1861
    - 1869
  these: !ruby/object:Word
    word: these
    stem: these
    docFrequency: 59.0
    docPositions:
    - 28
    - 36
    - 78
    - 148
    - 279
    - 337
    - 366
    - 373
    - 380
    - 423
    - 438
    - 440
    - 470
    - 477
    - 540
    - 625
    - 677
    - 714
    - 811
    - 828
    - 852
    - 940
    - 946
    - 955
    - 991
    - 1004
    - 1053
    - 1088
    - 1395
    - 1478
    - 1484
    - 1509
    - 1543
    - 1623
    - 1663
    - 1681
    - 1686
    - 1691
    - 1720
    - 1729
    - 1731
    - 1751
    - 1756
    - 1795
    - 1854
    - 1888
    - 1911
    - 1975
    - 1988
    - 2006
    - 2060
    - 2064
    - 2069
    - 2095
    - 2104
    - 2130
    - 2155
    - 2358
  were: !ruby/object:Word
    word: were
    stem: were
    docFrequency: 239.0
    docPositions:
    - 28
    - 52
    - 90
    - 129
    - 146
    - 191
    - 209
    - 231
    - 321
    - 356
    - 374
    - 505
    - 507
    - 509
    - 512
    - 517
    - 518
    - 519
    - 525
    - 534
    - 536
    - 537
    - 539
    - 540
    - 541
    - 545
    - 566
    - 581
    - 582
    - 597
    - 604
    - 608
    - 631
    - 637
    - 652
    - 655
    - 669
    - 681
    - 682
    - 683
    - 689
    - 690
    - 702
    - 714
    - 720
    - 736
    - 737
    - 748
    - 772
    - 792
    - 793
    - 796
    - 798
    - 799
    - 803
    - 811
    - 814
    - 826
    - 828
    - 832
    - 837
    - 842
    - 844
    - 866
    - 912
    - 927
    - 931
    - 936
    - 940
    - 946
    - 964
    - 972
    - 979
    - 998
    - 1025
    - 1026
    - 1027
    - 1028
    - 1029
    - 1037
    - 1047
    - 1052
    - 1056
    - 1062
    - 1073
    - 1075
    - 1080
    - 1081
    - 1082
    - 1084
    - 1087
    - 1088
    - 1089
    - 1126
    - 1145
    - 1146
    - 1147
    - 1153
    - 1187
    - 1190
    - 1208
    - 1223
    - 1225
    - 1228
    - 1229
    - 1232
    - 1304
    - 1352
    - 1356
    - 1360
    - 1367
    - 1478
    - 1496
    - 1515
    - 1530
    - 1541
    - 1572
    - 1582
    - 1596
    - 1653
    - 1675
    - 1687
    - 1772
    - 1774
    - 1777
    - 1780
    - 1781
    - 1782
    - 1786
    - 1791
    - 1792
    - 1794
    - 1795
    - 1796
    - 1798
    - 1813
    - 1824
    - 1825
    - 1836
    - 1839
    - 1841
    - 1858
    - 1862
    - 1871
    - 1874
    - 1884
    - 1890
    - 1891
    - 1892
    - 1896
    - 1897
    - 1903
    - 1911
    - 1915
    - 1925
    - 1926
    - 1933
    - 1951
    - 1961
    - 1962
    - 1964
    - 1966
    - 1967
    - 1971
    - 1975
    - 1978
    - 1986
    - 1988
    - 1992
    - 1995
    - 1998
    - 2000
    - 2014
    - 2040
    - 2053
    - 2055
    - 2058
    - 2060
    - 2064
    - 2076
    - 2080
    - 2087
    - 2100
    - 2110
    - 2111
    - 2112
    - 2113
    - 2114
    - 2118
    - 2126
    - 2129
    - 2133
    - 2137
    - 2144
    - 2146
    - 2149
    - 2150
    - 2151
    - 2153
    - 2154
    - 2155
    - 2156
    - 2179
    - 2192
    - 2193
    - 2194
    - 2198
    - 2222
    - 2223
    - 2237
    - 2246
    - 2248
    - 2251
    - 2252
    - 2255
    - 2303
    - 2337
    - 2339
    - 2343
    - 2346
  attended: !ruby/object:Word
    word: attended
    stem: attend
    docFrequency: 7.0
    docPositions:
    - 28
    - 33
    - 1344
    - 1478
    - 1483
    - 2331
  just: !ruby/object:Word
    word: just
    stem: just
    docFrequency: 29.0
    docPositions:
    - 28
    - 147
    - 191
    - 263
    - 320
    - 388
    - 450
    - 517
    - 635
    - 665
    - 760
    - 1187
    - 1353
    - 1362
    - 1478
    - 1542
    - 1572
    - 1615
    - 1652
    - 1697
    - 1737
    - 1780
    - 1860
    - 1882
    - 1943
    - 2222
    - 2338
    - 2343
  everybody: !ruby/object:Word
    word: everybody
    stem: everybodi
    docFrequency: 17.0
    docPositions:
    - 28
    - 82
    - 178
    - 557
    - 612
    - 616
    - 624
    - 698
    - 1478
    - 1511
    - 1563
    - 1806
    - 1845
    - 1847
    - 1853
    - 1901
  connected: !ruby/object:Word
    word: connected
    stem: connect
    docFrequency: 5.0
    docPositions:
    - 28
    - 930
    - 1478
    - 2054
  past: !ruby/object:Word
    word: past
    stem: past
    docFrequency: 5.0
    docPositions:
    - 29
    - 1390
    - 1479
    - 2354
  present: !ruby/object:Word
    word: present
    stem: present
    docFrequency: 5.0
    docPositions:
    - 29
    - 306
    - 1479
    - 1642
  sir: !ruby/object:Word
    word: sir
    stem: sir
    docFrequency: 3.0
    docPositions:
    - 29
    - 1479
  freddie: !ruby/object:Word
    word: freddie
    stem: freddi
    docFrequency: 5.0
    docPositions:
    - 29
    - 220
    - 1479
    - 1589
  williams: !ruby/object:Word
    word: williams
    stem: william
    docFrequency: 19.0
    docPositions:
    - 29
    - 30
    - 163
    - 196
    - 203
    - 220
    - 227
    - 267
    - 352
    - 1479
    - 1480
    - 1552
    - 1575
    - 1578
    - 1589
    - 1594
    - 1617
    - 1673
  represented: !ruby/object:Word
    word: represented
    stem: repres
    docFrequency: 5.0
    docPositions:
    - 29
    - 829
    - 1479
    - 1989
  his: !ruby/object:Word
    word: his
    stem: hi
    docFrequency: 21.0
    docPositions:
    - 29
    - 34
    - 62
    - 221
    - 284
    - 332
    - 466
    - 1254
    - 1270
    - 1285
    - 1479
    - 1484
    - 1501
    - 1590
    - 1628
    - 1660
    - 1749
    - 2268
    - 2280
    - 2291
  widow: !ruby/object:Word
    word: widow
    stem: widow
    docFrequency: 3.0
    docPositions:
    - 29
    - 1479
  lady: !ruby/object:Word
    word: lady
    stem: ladi
    docFrequency: 3.0
    docPositions:
    - 30
    - 1480
  operated: !ruby/object:Word
    word: operated
    stem: oper
    docFrequency: 15.0
    docPositions:
    - 30
    - 873
    - 887
    - 962
    - 1124
    - 1225
    - 1282
    - 1480
    - 2021
    - 2029
    - 2074
    - 2177
    - 2248
    - 2290
  switch: !ruby/object:Word
    word: switch
    stem: switch
    docFrequency: 7.0
    docPositions:
    - 30
    - 1305
    - 1359
    - 1480
    - 2304
    - 2342
  formally: !ruby/object:Word
    word: formally
    stem: formal
    docFrequency: 5.0
    docPositions:
    - 30
    - 1314
    - 1480
    - 2311
  brought: !ruby/object:Word
    word: brought
    stem: brought
    docFrequency: 5.0
    docPositions:
    - 30
    - 1329
    - 1480
    - 2322
  replica: !ruby/object:Word
    word: replica
    stem: replica
    docFrequency: 13.0
    docPositions:
    - 30
    - 141
    - 153
    - 155
    - 235
    - 1422
    - 1480
    - 1538
    - 1546
    - 1548
    - 1598
    - 2364
  life: !ruby/object:Word
    word: life
    stem: life
    docFrequency: 7.0
    docPositions:
    - 31
    - 193
    - 1324
    - 1481
    - 1574
    - 2319
  front: !ruby/object:Word
    word: front
    stem: front
    docFrequency: 7.0
    docPositions:
    - 31
    - 452
    - 459
    - 1481
    - 1739
    - 1744
  audience: !ruby/object:Word
    word: audience
    stem: audienc
    docFrequency: 9.0
    docPositions:
    - 31
    - 33
    - 92
    - 137
    - 1481
    - 1483
    - 1517
    - 1536
  people: !ruby/object:Word
    word: people
    stem: peopl
    docFrequency: 37.0
    docPositions:
    - 31
    - 213
    - 227
    - 231
    - 505
    - 519
    - 534
    - 538
    - 591
    - 599
    - 693
    - 702
    - 705
    - 719
    - 744
    - 761
    - 1306
    - 1462
    - 1481
    - 1584
    - 1594
    - 1596
    - 1772
    - 1782
    - 1791
    - 1793
    - 1832
    - 1836
    - 1898
    - 1903
    - 1906
    - 1914
    - 1931
    - 1944
    - 2305
    - 2377
  professor: !ruby/object:Word
    word: professor
    stem: professor
    docFrequency: 11.0
    docPositions:
    - 31
    - 39
    - 158
    - 227
    - 1441
    - 1481
    - 1487
    - 1549
    - 1594
    - 2367
  tom: !ruby/object:Word
    word: tom
    stem: tom
    docFrequency: 50.0
    docPositions:
    - 32
    - 152
    - 244
    - 245
    - 257
    - 262
    - 267
    - 273
    - 275
    - 281
    - 282
    - 283
    - 284
    - 287
    - 332
    - 340
    - 347
    - 360
    - 406
    - 465
    - 468
    - 474
    - 484
    - 756
    - 1314
    - 1482
    - 1545
    - 1602
    - 1603
    - 1611
    - 1614
    - 1617
    - 1621
    - 1625
    - 1626
    - 1627
    - 1631
    - 1660
    - 1666
    - 1671
    - 1677
    - 1707
    - 1748
    - 1749
    - 1753
    - 1760
    - 1939
    - 2311
  kilburn: !ruby/object:Word
    word: kilburn
    stem: kilburn
    docFrequency: 31.0
    docPositions:
    - 32
    - 39
    - 152
    - 155
    - 158
    - 163
    - 166
    - 173
    - 182
    - 204
    - 244
    - 267
    - 352
    - 1314
    - 1482
    - 1487
    - 1545
    - 1548
    - 1549
    - 1552
    - 1555
    - 1558
    - 1565
    - 1579
    - 1602
    - 1617
    - 1673
    - 2311
  happily: !ruby/object:Word
    word: happily
    stem: happili
    docFrequency: 3.0
    docPositions:
    - 32
    - 1482
  still: !ruby/object:Word
    word: still
    stem: still
    docFrequency: 17.0
    docPositions:
    - 32
    - 142
    - 243
    - 315
    - 387
    - 630
    - 1243
    - 1321
    - 1482
    - 1539
    - 1602
    - 1649
    - 1696
    - 1857
    - 2262
    - 2316
  us: !ruby/object:Word
    word: us
    stem: us
    docFrequency: 35.0
    docPositions:
    - 32
    - 381
    - 506
    - 509
    - 540
    - 542
    - 565
    - 585
    - 650
    - 662
    - 730
    - 765
    - 1105
    - 1287
    - 1299
    - 1303
    - 1339
    - 1482
    - 1692
    - 1773
    - 1774
    - 1795
    - 1797
    - 1812
    - 1828
    - 1871
    - 1879
    - 1921
    - 1946
    - 2164
    - 2293
    - 2300
    - 2302
    - 2328
  mere: !ruby/object:Word
    word: mere
    stem: mere
    docFrequency: 3.0
    docPositions:
    - 32
    - 1482
  stripling: !ruby/object:Word
    word: stripling
    stem: stripl
    docFrequency: 3.0
    docPositions:
    - 32
    - 1482
  he: !ruby/object:Word
    word: he
    stem: he
    docFrequency: 61.0
    docPositions:
    - 32
    - 79
    - 95
    - 137
    - 146
    - 189
    - 214
    - 227
    - 228
    - 285
    - 332
    - 360
    - 475
    - 580
    - 726
    - 904
    - 906
    - 1252
    - 1254
    - 1258
    - 1259
    - 1260
    - 1263
    - 1268
    - 1285
    - 1286
    - 1373
    - 1482
    - 1510
    - 1518
    - 1536
    - 1541
    - 1570
    - 1585
    - 1594
    - 1595
    - 1629
    - 1660
    - 1677
    - 1754
    - 1823
    - 1919
    - 2036
    - 2038
    - 2266
    - 2268
    - 2270
    - 2271
    - 2272
    - 2275
    - 2278
    - 2291
    - 2292
    - 2350
  gave: !ruby/object:Word
    word: gave
    stem: gave
    docFrequency: 17.0
    docPositions:
    - 32
    - 96
    - 228
    - 650
    - 704
    - 842
    - 1016
    - 1274
    - 1482
    - 1519
    - 1595
    - 1871
    - 1905
    - 1998
    - 2107
    - 2284
  both: !ruby/object:Word
    word: both
    stem: both
    docFrequency: 29.0
    docPositions:
    - 33
    - 42
    - 261
    - 419
    - 420
    - 722
    - 820
    - 843
    - 956
    - 1010
    - 1015
    - 1021
    - 1136
    - 1287
    - 1483
    - 1490
    - 1613
    - 1716
    - 1717
    - 1917
    - 1982
    - 1999
    - 2070
    - 2106
    - 2108
    - 2185
    - 2293
  one: !ruby/object:Word
    word: one
    stem: 'on'
    docFrequency: 117.0
    docPositions:
    - 33
    - 87
    - 112
    - 114
    - 159
    - 192
    - 200
    - 213
    - 243
    - 257
    - 282
    - 288
    - 311
    - 344
    - 404
    - 405
    - 406
    - 412
    - 413
    - 454
    - 532
    - 542
    - 570
    - 587
    - 635
    - 670
    - 712
    - 725
    - 737
    - 813
    - 842
    - 850
    - 852
    - 884
    - 891
    - 937
    - 946
    - 972
    - 977
    - 990
    - 1028
    - 1044
    - 1054
    - 1082
    - 1084
    - 1085
    - 1088
    - 1094
    - 1162
    - 1163
    - 1164
    - 1177
    - 1178
    - 1189
    - 1217
    - 1228
    - 1252
    - 1279
    - 1483
    - 1514
    - 1550
    - 1573
    - 1577
    - 1584
    - 1602
    - 1611
    - 1626
    - 1632
    - 1645
    - 1668
    - 1705
    - 1706
    - 1707
    - 1711
    - 1712
    - 1741
    - 1789
    - 1797
    - 1815
    - 1828
    - 1860
    - 1885
    - 1911
    - 1918
    - 1926
    - 1977
    - 1998
    - 2004
    - 2006
    - 2026
    - 2033
    - 2059
    - 2064
    - 2080
    - 2085
    - 2094
    - 2113
    - 2123
    - 2131
    - 2151
    - 2153
    - 2154
    - 2155
    - 2159
    - 2203
    - 2204
    - 2205
    - 2214
    - 2215
    - 2222
    - 2242
    - 2251
    - 2266
    - 2287
  reminiscences: !ruby/object:Word
    word: reminiscences
    stem: reminisc
    docFrequency: 3.0
    docPositions:
    - 34
    - 1484
  leading: !ruby/object:Word
    word: leading
    stem: lead
    docFrequency: 7.0
    docPositions:
    - 34
    - 46
    - 128
    - 1484
    - 1492
    - 1529
  all: !ruby/object:Word
    word: all
    stem: all
    docFrequency: 57.0
    docPositions:
    - 36
    - 67
    - 176
    - 250
    - 266
    - 306
    - 337
    - 344
    - 414
    - 576
    - 644
    - 665
    - 682
    - 684
    - 686
    - 699
    - 703
    - 710
    - 719
    - 722
    - 780
    - 852
    - 1118
    - 1120
    - 1186
    - 1347
    - 1390
    - 1484
    - 1504
    - 1561
    - 1606
    - 1616
    - 1642
    - 1663
    - 1668
    - 1713
    - 1821
    - 1867
    - 1882
    - 1891
    - 1893
    - 1895
    - 1902
    - 1904
    - 1909
    - 1914
    - 1917
    - 1957
    - 2006
    - 2173
    - 2175
    - 2221
    - 2332
    - 2354
  reviewed: !ruby/object:Word
    word: reviewed
    stem: review
    docFrequency: 3.0
    docPositions:
    - 36
    - 1484
  more: !ruby/object:Word
    word: more
    stem: more
    docFrequency: 55.0
    docPositions:
    - 36
    - 127
    - 149
    - 257
    - 444
    - 445
    - 453
    - 476
    - 482
    - 515
    - 519
    - 527
    - 534
    - 550
    - 613
    - 674
    - 752
    - 946
    - 955
    - 1097
    - 1124
    - 1271
    - 1272
    - 1301
    - 1351
    - 1363
    - 1484
    - 1528
    - 1544
    - 1611
    - 1733
    - 1734
    - 1740
    - 1755
    - 1758
    - 1780
    - 1782
    - 1786
    - 1791
    - 1801
    - 1846
    - 1887
    - 1937
    - 2064
    - 2069
    - 2160
    - 2177
    - 2281
    - 2282
    - 2302
    - 2336
    - 2344
  detail: !ruby/object:Word
    word: detail
    stem: detail
    docFrequency: 9.0
    docPositions:
    - 36
    - 186
    - 270
    - 476
    - 1484
    - 1569
    - 1618
    - 1755
  following: !ruby/object:Word
    word: following
    stem: follow
    docFrequency: 20.0
    docPositions:
    - 36
    - 99
    - 115
    - 329
    - 353
    - 371
    - 1183
    - 1211
    - 1268
    - 1414
    - 1484
    - 1520
    - 1659
    - 1674
    - 1684
    - 2218
    - 2240
    - 2278
    - 2361
  pages: !ruby/object:Word
    word: pages
    stem: page
    docFrequency: 4.0
    docPositions:
    - 36
    - 1386
    - 1484
  we: !ruby/object:Word
    word: we
    stem: we
    docFrequency: 269.0
    docPositions:
    - 36
    - 82
    - 166
    - 168
    - 176
    - 204
    - 205
    - 241
    - 267
    - 270
    - 271
    - 283
    - 304
    - 318
    - 320
    - 324
    - 326
    - 383
    - 393
    - 394
    - 396
    - 398
    - 411
    - 421
    - 423
    - 430
    - 433
    - 443
    - 445
    - 449
    - 450
    - 458
    - 459
    - 462
    - 463
    - 465
    - 468
    - 469
    - 470
    - 471
    - 472
    - 474
    - 475
    - 476
    - 496
    - 507
    - 510
    - 512
    - 523
    - 524
    - 525
    - 527
    - 532
    - 534
    - 536
    - 537
    - 542
    - 545
    - 565
    - 566
    - 573
    - 574
    - 582
    - 587
    - 596
    - 604
    - 652
    - 661
    - 665
    - 666
    - 668
    - 669
    - 673
    - 675
    - 677
    - 683
    - 689
    - 690
    - 699
    - 703
    - 704
    - 706
    - 709
    - 712
    - 716
    - 736
    - 737
    - 748
    - 757
    - 758
    - 759
    - 764
    - 766
    - 772
    - 773
    - 776
    - 778
    - 1293
    - 1311
    - 1313
    - 1316
    - 1321
    - 1322
    - 1337
    - 1339
    - 1342
    - 1344
    - 1347
    - 1352
    - 1355
    - 1356
    - 1357
    - 1360
    - 1362
    - 1364
    - 1367
    - 1484
    - 1511
    - 1555
    - 1557
    - 1561
    - 1579
    - 1580
    - 1600
    - 1617
    - 1618
    - 1619
    - 1627
    - 1640
    - 1650
    - 1652
    - 1654
    - 1656
    - 1694
    - 1700
    - 1701
    - 1703
    - 1710
    - 1718
    - 1720
    - 1723
    - 1726
    - 1732
    - 1734
    - 1736
    - 1737
    - 1743
    - 1744
    - 1745
    - 1746
    - 1748
    - 1749
    - 1750
    - 1751
    - 1752
    - 1753
    - 1754
    - 1755
    - 1767
    - 1774
    - 1775
    - 1777
    - 1784
    - 1785
    - 1786
    - 1789
    - 1791
    - 1792
    - 1797
    - 1798
    - 1812
    - 1813
    - 1818
    - 1819
    - 1825
    - 1828
    - 1835
    - 1839
    - 1871
    - 1878
    - 1882
    - 1883
    - 1884
    - 1886
    - 1888
    - 1892
    - 1896
    - 1897
    - 1902
    - 1904
    - 1905
    - 1907
    - 1908
    - 1911
    - 1913
    - 1925
    - 1926
    - 1933
    - 1940
    - 1941
    - 1942
    - 1945
    - 1947
    - 1951
    - 1952
    - 1953
    - 1955
    - 2294
    - 2308
    - 2310
    - 2313
    - 2316
    - 2317
    - 2326
    - 2328
    - 2329
    - 2331
    - 2332
    - 2337
    - 2338
    - 2339
    - 2340
    - 2343
    - 2345
    - 2346
  also: !ruby/object:Word
    word: also
    stem: also
    docFrequency: 72.0
    docPositions:
    - 37
    - 102
    - 120
    - 138
    - 177
    - 195
    - 209
    - 210
    - 256
    - 338
    - 372
    - 528
    - 562
    - 624
    - 653
    - 822
    - 823
    - 827
    - 921
    - 923
    - 941
    - 958
    - 983
    - 992
    - 993
    - 994
    - 1097
    - 1101
    - 1149
    - 1186
    - 1281
    - 1286
    - 1322
    - 1372
    - 1389
    - 1393
    - 1485
    - 1522
    - 1537
    - 1562
    - 1574
    - 1582
    - 1583
    - 1610
    - 1664
    - 1685
    - 1787
    - 1811
    - 1853
    - 1872
    - 1984
    - 1985
    - 1987
    - 2049
    - 2061
    - 2072
    - 2089
    - 2096
    - 2097
    - 2098
    - 2160
    - 2162
    - 2196
    - 2221
    - 2289
    - 2292
    - 2317
    - 2349
    - 2353
    - 2356
  particularly: !ruby/object:Word
    word: particularly
    stem: particularli
    docFrequency: 5.0
    docPositions:
    - 37
    - 546
    - 1485
    - 1799
  pleased: !ruby/object:Word
    word: pleased
    stem: pleas
    docFrequency: 3.0
    docPositions:
    - 37
    - 1485
  publish: !ruby/object:Word
    word: publish
    stem: publish
    docFrequency: 3.0
    docPositions:
    - 37
    - 1485
  article: !ruby/object:Word
    word: article
    stem: articl
    docFrequency: 9.0
    docPositions:
    - 37
    - 41
    - 241
    - 1245
    - 1485
    - 1489
    - 1600
    - 2263
  provides: !ruby/object:Word
    word: provides
    stem: provid
    docFrequency: 5.0
    docPositions:
    - 37
    - 58
    - 1485
    - 1499
  contribution: !ruby/object:Word
    word: contribution
    stem: contribut
    docFrequency: 3.0
    docPositions:
    - 38
    - 1486
  written: !ruby/object:Word
    word: written
    stem: written
    docFrequency: 7.0
    docPositions:
    - 38
    - 181
    - 408
    - 1486
    - 1564
    - 1709
  describes: !ruby/object:Word
    word: describes
    stem: describ
    docFrequency: 5.0
    docPositions:
    - 39
    - 491
    - 1487
    - 1763
  detective: !ruby/object:Word
    word: detective
    stem: detect
    docFrequency: 5.0
    docPositions:
    - 39
    - 184
    - 1487
    - 1567
  work: !ruby/object:Word
    word: work
    stem: work
    docFrequency: 39.0
    docPositions:
    - 39
    - 84
    - 130
    - 139
    - 184
    - 195
    - 259
    - 321
    - 374
    - 432
    - 459
    - 468
    - 485
    - 533
    - 1258
    - 1310
    - 1322
    - 1337
    - 1363
    - 1487
    - 1513
    - 1531
    - 1538
    - 1567
    - 1574
    - 1611
    - 1653
    - 1687
    - 1725
    - 1744
    - 1749
    - 1761
    - 1790
    - 2270
    - 2307
    - 2317
    - 2326
    - 2344
  put: !ruby/object:Word
    word: put
    stem: put
    docFrequency: 19.0
    docPositions:
    - 39
    - 188
    - 320
    - 398
    - 533
    - 602
    - 621
    - 1209
    - 1328
    - 1487
    - 1569
    - 1652
    - 1703
    - 1790
    - 1837
    - 1852
    - 2238
    - 2321
  himself: !ruby/object:Word
    word: himself
    stem: himself
    docFrequency: 5.0
    docPositions:
    - 39
    - 213
    - 1487
    - 1584
  re: !ruby/object:Word
    word: re
    stem: re
    docFrequency: 9.0
    docPositions:
    - 39
    - 67
    - 420
    - 1315
    - 1487
    - 1504
    - 1717
    - 2312
  creating: !ruby/object:Word
    word: creating
    stem: creat
    docFrequency: 3.0
    docPositions:
    - 40
    - 1488
  world: !ruby/object:Word
    word: world
    stem: world
    docFrequency: 27.0
    docPositions:
    - 40
    - 46
    - 492
    - 572
    - 582
    - 583
    - 584
    - 588
    - 592
    - 1307
    - 1368
    - 1382
    - 1488
    - 1492
    - 1764
    - 1817
    - 1825
    - 1826
    - 1827
    - 1829
    - 1833
    - 2306
    - 2347
    - 2353
  exact: !ruby/object:Word
    word: exact
    stem: exact
    docFrequency: 3.0
    docPositions:
    - 40
    - 1488
  form: !ruby/object:Word
    word: form
    stem: form
    docFrequency: 31.0
    docPositions:
    - 40
    - 42
    - 242
    - 299
    - 300
    - 312
    - 313
    - 315
    - 317
    - 319
    - 830
    - 835
    - 838
    - 940
    - 1141
    - 1488
    - 1490
    - 1601
    - 1637
    - 1638
    - 1646
    - 1647
    - 1649
    - 1651
    - 1990
    - 1993
    - 1996
    - 2060
    - 2190
  ran: !ruby/object:Word
    word: ran
    stem: ran
    docFrequency: 17.0
    docPositions:
    - 40
    - 135
    - 175
    - 252
    - 272
    - 551
    - 610
    - 1315
    - 1488
    - 1534
    - 1560
    - 1608
    - 1620
    - 1802
    - 1843
    - 2312
  epochal: !ruby/object:Word
    word: epochal
    stem: epoch
    docFrequency: 3.0
    docPositions:
    - 41
    - 1489
  day: !ruby/object:Word
    word: day
    stem: dai
    docFrequency: 13.0
    docPositions:
    - 41
    - 80
    - 444
    - 777
    - 1312
    - 1313
    - 1489
    - 1511
    - 1733
    - 1954
    - 2309
    - 2310
  years: !ruby/object:Word
    word: years
    stem: year
    docFrequency: 31.0
    docPositions:
    - 41
    - 45
    - 127
    - 142
    - 163
    - 501
    - 502
    - 503
    - 1241
    - 1243
    - 1254
    - 1278
    - 1282
    - 1286
    - 1356
    - 1489
    - 1491
    - 1528
    - 1539
    - 1552
    - 1770
    - 1771
    - 1772
    - 2260
    - 2262
    - 2268
    - 2286
    - 2290
    - 2292
    - 2339
  ago: !ruby/object:Word
    word: ago
    stem: ago
    docFrequency: 3.0
    docPositions:
    - 41
    - 1489
  includes: !ruby/object:Word
    word: includes
    stem: includ
    docFrequency: 3.0
    docPositions:
    - 41
    - 1489
  complete: !ruby/object:Word
    word: complete
    stem: complet
    docFrequency: 21.0
    docPositions:
    - 41
    - 46
    - 83
    - 328
    - 721
    - 767
    - 770
    - 837
    - 1320
    - 1362
    - 1489
    - 1492
    - 1512
    - 1658
    - 1916
    - 1948
    - 1949
    - 1995
    - 2315
    - 2343
  listings: !ruby/object:Word
    word: listings
    stem: list
    docFrequency: 3.0
    docPositions:
    - 41
    - 1489
  earliest: !ruby/object:Word
    word: earliest
    stem: earliest
    docFrequency: 7.0
    docPositions:
    - 42
    - 1044
    - 1260
    - 1490
    - 2123
    - 2272
  surviving: !ruby/object:Word
    word: surviving
    stem: surviv
    docFrequency: 5.0
    docPositions:
    - 42
    - 263
    - 1490
    - 1615
  dating: !ruby/object:Word
    word: dating
    stem: date
    docFrequency: 3.0
    docPositions:
    - 42
    - 1490
  month: !ruby/object:Word
    word: month
    stem: month
    docFrequency: 7.0
    docPositions:
    - 42
    - 184
    - 1344
    - 1490
    - 1567
    - 2331
  after: !ruby/object:Word
    word: after
    stem: after
    docFrequency: 24.0
    docPositions:
    - 42
    - 134
    - 304
    - 312
    - 327
    - 469
    - 696
    - 1028
    - 1241
    - 1243
    - 1292
    - 1490
    - 1533
    - 1640
    - 1646
    - 1657
    - 1750
    - 1901
    - 2113
    - 2260
    - 2262
  run: !ruby/object:Word
    word: run
    stem: run
    docFrequency: 27.0
    docPositions:
    - 43
    - 182
    - 185
    - 247
    - 358
    - 427
    - 436
    - 438
    - 641
    - 752
    - 1156
    - 1362
    - 1393
    - 1491
    - 1565
    - 1568
    - 1605
    - 1677
    - 1722
    - 1727
    - 1729
    - 1864
    - 1937
    - 2201
    - 2343
    - 2356
  version: !ruby/object:Word
    word: version
    stem: version
    docFrequency: 62.0
    docPositions:
    - 43
    - 185
    - 244
    - 250
    - 252
    - 255
    - 260
    - 263
    - 264
    - 291
    - 296
    - 307
    - 309
    - 310
    - 327
    - 328
    - 337
    - 343
    - 348
    - 361
    - 377
    - 404
    - 689
    - 735
    - 781
    - 827
    - 905
    - 944
    - 1416
    - 1440
    - 1491
    - 1568
    - 1602
    - 1606
    - 1608
    - 1609
    - 1612
    - 1615
    - 1616
    - 1633
    - 1634
    - 1643
    - 1644
    - 1657
    - 1658
    - 1663
    - 1667
    - 1672
    - 1678
    - 1688
    - 1705
    - 1896
    - 1924
    - 1957
    - 1987
    - 2037
    - 2062
    - 2361
    - 2367
  reconstructed: !ruby/object:Word
    word: reconstructed
    stem: reconstruct
    docFrequency: 11.0
    docPositions:
    - 43
    - 337
    - 361
    - 404
    - 415
    - 1491
    - 1663
    - 1678
    - 1705
    - 1714
  within: !ruby/object:Word
    word: within
    stem: within
    docFrequency: 3.0
    docPositions:
    - 45
    - 1491
  had: !ruby/object:Word
    word: had
    stem: had
    docFrequency: 197.0
    docPositions:
    - 45
    - 165
    - 166
    - 171
    - 203
    - 204
    - 205
    - 213
    - 251
    - 255
    - 256
    - 275
    - 283
    - 284
    - 287
    - 288
    - 319
    - 332
    - 378
    - 468
    - 469
    - 510
    - 513
    - 527
    - 532
    - 533
    - 534
    - 541
    - 542
    - 550
    - 555
    - 561
    - 575
    - 582
    - 585
    - 603
    - 609
    - 617
    - 619
    - 625
    - 630
    - 635
    - 649
    - 652
    - 656
    - 661
    - 663
    - 665
    - 668
    - 669
    - 685
    - 698
    - 699
    - 716
    - 719
    - 725
    - 727
    - 759
    - 760
    - 762
    - 766
    - 773
    - 776
    - 780
    - 812
    - 883
    - 982
    - 983
    - 1045
    - 1046
    - 1062
    - 1080
    - 1101
    - 1104
    - 1152
    - 1196
    - 1223
    - 1277
    - 1309
    - 1311
    - 1313
    - 1315
    - 1339
    - 1343
    - 1344
    - 1347
    - 1348
    - 1349
    - 1356
    - 1373
    - 1491
    - 1554
    - 1555
    - 1558
    - 1578
    - 1579
    - 1580
    - 1584
    - 1607
    - 1609
    - 1610
    - 1621
    - 1627
    - 1628
    - 1631
    - 1632
    - 1651
    - 1660
    - 1689
    - 1749
    - 1750
    - 1775
    - 1778
    - 1786
    - 1789
    - 1790
    - 1791
    - 1796
    - 1797
    - 1801
    - 1804
    - 1810
    - 1820
    - 1825
    - 1828
    - 1838
    - 1842
    - 1848
    - 1850
    - 1854
    - 1857
    - 1860
    - 1870
    - 1871
    - 1875
    - 1878
    - 1880
    - 1882
    - 1883
    - 1884
    - 1894
    - 1901
    - 1902
    - 1913
    - 1914
    - 1918
    - 1920
    - 1942
    - 1943
    - 1945
    - 1947
    - 1952
    - 1953
    - 1957
    - 1976
    - 2025
    - 2088
    - 2089
    - 2124
    - 2125
    - 2137
    - 2149
    - 2162
    - 2163
    - 2197
    - 2227
    - 2246
    - 2285
    - 2306
    - 2308
    - 2310
    - 2312
    - 2328
    - 2330
    - 2331
    - 2332
    - 2333
    - 2334
    - 2339
    - 2350
  advanced: !ruby/object:Word
    word: advanced
    stem: advanc
    docFrequency: 5.0
    docPositions:
    - 45
    - 102
    - 1491
    - 1522
  so: !ruby/object:Word
    word: so
    stem: so
    docFrequency: 145.0
    docPositions:
    - 45
    - 170
    - 174
    - 193
    - 222
    - 231
    - 283
    - 284
    - 304
    - 310
    - 311
    - 321
    - 339
    - 350
    - 392
    - 415
    - 421
    - 426
    - 454
    - 465
    - 502
    - 505
    - 520
    - 534
    - 536
    - 541
    - 545
    - 553
    - 565
    - 580
    - 590
    - 591
    - 592
    - 597
    - 632
    - 636
    - 663
    - 675
    - 677
    - 707
    - 712
    - 714
    - 746
    - 773
    - 786
    - 814
    - 819
    - 822
    - 881
    - 888
    - 890
    - 918
    - 948
    - 950
    - 978
    - 997
    - 1069
    - 1076
    - 1122
    - 1148
    - 1171
    - 1189
    - 1208
    - 1227
    - 1230
    - 1237
    - 1296
    - 1300
    - 1311
    - 1349
    - 1414
    - 1491
    - 1557
    - 1559
    - 1574
    - 1591
    - 1596
    - 1627
    - 1628
    - 1640
    - 1644
    - 1645
    - 1653
    - 1665
    - 1673
    - 1699
    - 1714
    - 1718
    - 1721
    - 1741
    - 1748
    - 1771
    - 1772
    - 1783
    - 1791
    - 1796
    - 1798
    - 1804
    - 1812
    - 1823
    - 1831
    - 1832
    - 1833
    - 1836
    - 1859
    - 1861
    - 1880
    - 1888
    - 1908
    - 1911
    - 1933
    - 1952
    - 1959
    - 1978
    - 1981
    - 1984
    - 2023
    - 2030
    - 2032
    - 2046
    - 2066
    - 2068
    - 2086
    - 2099
    - 2142
    - 2147
    - 2177
    - 2195
    - 2210
    - 2222
    - 2237
    - 2250
    - 2253
    - 2258
    - 2297
    - 2301
    - 2308
    - 2334
    - 2361
  fast: !ruby/object:Word
    word: fast
    stem: fast
    docFrequency: 9.0
    docPositions:
    - 45
    - 947
    - 1045
    - 1224
    - 1491
    - 2065
    - 2124
    - 2247
  possible: !ruby/object:Word
    word: possible
    stem: possibl
    docFrequency: 13.0
    docPositions:
    - 45
    - 397
    - 413
    - 726
    - 997
    - 1330
    - 1491
    - 1702
    - 1712
    - 1919
    - 2099
    - 2323
  manufacturer: !ruby/object:Word
    word: manufacturer
    stem: manufactur
    docFrequency: 3.0
    docPositions:
    - 46
    - 1492
  range: !ruby/object:Word
    word: range
    stem: rang
    docFrequency: 15.0
    docPositions:
    - 46
    - 492
    - 678
    - 721
    - 767
    - 770
    - 1165
    - 1492
    - 1764
    - 1889
    - 1916
    - 1948
    - 1949
    - 2206
  compatible: !ruby/object:Word
    word: compatible
    stem: compat
    docFrequency: 7.0
    docPositions:
    - 47
    - 492
    - 723
    - 1493
    - 1764
    - 1918
  machines: !ruby/object:Word
    word: machines
    stem: machin
    docFrequency: 43.0
    docPositions:
    - 47
    - 495
    - 513
    - 537
    - 538
    - 541
    - 567
    - 568
    - 572
    - 576
    - 679
    - 682
    - 684
    - 711
    - 723
    - 734
    - 766
    - 768
    - 812
    - 1125
    - 1391
    - 1493
    - 1766
    - 1778
    - 1792
    - 1793
    - 1796
    - 1814
    - 1815
    - 1817
    - 1821
    - 1890
    - 1891
    - 1893
    - 1910
    - 1918
    - 1923
    - 1947
    - 1949
    - 1976
    - 2178
    - 2355
  april: !ruby/object:Word
    word: april
    stem: april
    docFrequency: 9.0
    docPositions:
    - 47
    - 94
    - 391
    - 768
    - 1493
    - 1517
    - 1698
    - 1949
  another: !ruby/object:Word
    word: another
    stem: anoth
    docFrequency: 29.0
    docPositions:
    - 47
    - 94
    - 191
    - 388
    - 646
    - 657
    - 668
    - 691
    - 889
    - 1063
    - 1069
    - 1129
    - 1242
    - 1493
    - 1517
    - 1572
    - 1697
    - 1867
    - 1876
    - 1883
    - 1898
    - 2031
    - 2138
    - 2142
    - 2180
    - 2261
  key: !ruby/object:Word
    word: key
    stem: kei
    docFrequency: 5.0
    docPositions:
    - 47
    - 146
    - 1493
    - 1541
  date: !ruby/object:Word
    word: date
    stem: date
    docFrequency: 9.0
    docPositions:
    - 47
    - 373
    - 381
    - 1177
    - 1493
    - 1686
    - 1692
    - 2214
  history: !ruby/object:Word
    word: history
    stem: histori
    docFrequency: 13.0
    docPositions:
    - 47
    - 95
    - 96
    - 1394
    - 1407
    - 1410
    - 1456
    - 1493
    - 1518
    - 1519
    - 2357
    - 2373
  recalls: !ruby/object:Word
    word: recalls
    stem: recal
    docFrequency: 3.0
    docPositions:
    - 48
    - 1494
  decision: !ruby/object:Word
    word: decision
    stem: decis
    docFrequency: 11.0
    docPositions:
    - 48
    - 49
    - 491
    - 593
    - 767
    - 1494
    - 1495
    - 1763
    - 1834
    - 1948
  making: !ruby/object:Word
    word: making
    stem: make
    docFrequency: 19.0
    docPositions:
    - 48
    - 240
    - 263
    - 491
    - 606
    - 671
    - 872
    - 1066
    - 1368
    - 1494
    - 1599
    - 1615
    - 1763
    - 1841
    - 1886
    - 2020
    - 2141
    - 2347
  processes: !ruby/object:Word
    word: processes
    stem: process
    docFrequency: 3.0
    docPositions:
    - 49
    - 1495
  lay: !ruby/object:Word
    word: lay
    stem: lai
    docFrequency: 7.0
    docPositions:
    - 49
    - 51
    - 1237
    - 1495
    - 2258
  bet: !ruby/object:Word
    word: bet
    stem: bet
    docFrequency: 3.0
    docPositions:
    - 49
    - 1495
  your: !ruby/object:Word
    word: your
    stem: your
    docFrequency: 11.0
    docPositions:
    - 49
    - 232
    - 614
    - 626
    - 654
    - 1495
    - 1597
    - 1847
    - 1855
    - 1873
  company: !ruby/object:Word
    word: company
    stem: compani
    docFrequency: 19.0
    docPositions:
    - 49
    - 513
    - 524
    - 575
    - 577
    - 621
    - 1254
    - 1279
    - 1282
    - 1495
    - 1778
    - 1785
    - 1820
    - 1822
    - 1852
    - 2268
    - 2287
    - 2290
  then: !ruby/object:Word
    word: then
    stem: then
    docFrequency: 51.0
    docPositions:
    - 51
    - 78
    - 79
    - 251
    - 259
    - 262
    - 270
    - 345
    - 346
    - 448
    - 509
    - 561
    - 585
    - 656
    - 690
    - 709
    - 756
    - 904
    - 1119
    - 1238
    - 1243
    - 1277
    - 1314
    - 1359
    - 1495
    - 1509
    - 1510
    - 1607
    - 1611
    - 1614
    - 1618
    - 1669
    - 1670
    - 1735
    - 1774
    - 1810
    - 1828
    - 1875
    - 1897
    - 1908
    - 1939
    - 2036
    - 2174
    - 2259
    - 2262
    - 2285
    - 2311
    - 2342
  clear: !ruby/object:Word
    word: clear
    stem: clear
    docFrequency: 7.0
    docPositions:
    - 51
    - 350
    - 422
    - 1495
    - 1673
    - 1719
  market: !ruby/object:Word
    word: market
    stem: market
    docFrequency: 21.0
    docPositions:
    - 51
    - 491
    - 497
    - 498
    - 523
    - 536
    - 565
    - 593
    - 599
    - 604
    - 1495
    - 1763
    - 1768
    - 1769
    - 1784
    - 1791
    - 1812
    - 1834
    - 1836
    - 1839
  computers: !ruby/object:Word
    word: computers
    stem: comput
    docFrequency: 26.0
    docPositions:
    - 51
    - 103
    - 107
    - 493
    - 532
    - 662
    - 663
    - 811
    - 941
    - 1377
    - 1401
    - 1451
    - 1452
    - 1453
    - 1454
    - 1495
    - 1523
    - 1525
    - 1765
    - 1789
    - 1879
    - 1880
    - 1975
    - 2061
    - 2351
  data: !ruby/object:Word
    word: data
    stem: data
    docFrequency: 57.0
    docPositions:
    - 51
    - 266
    - 292
    - 301
    - 302
    - 339
    - 350
    - 401
    - 424
    - 431
    - 613
    - 809
    - 835
    - 836
    - 855
    - 956
    - 1040
    - 1097
    - 1130
    - 1133
    - 1137
    - 1138
    - 1140
    - 1147
    - 1168
    - 1186
    - 1206
    - 1495
    - 1616
    - 1634
    - 1639
    - 1640
    - 1665
    - 1721
    - 1724
    - 1846
    - 1973
    - 1993
    - 1994
    - 2007
    - 2070
    - 2119
    - 2160
    - 2181
    - 2184
    - 2186
    - 2187
    - 2189
    - 2194
    - 2207
    - 2221
    - 2235
  processing: !ruby/object:Word
    word: processing
    stem: process
    docFrequency: 3.0
    docPositions:
    - 51
    - 1495
  rather: !ruby/object:Word
    word: rather
    stem: rather
    docFrequency: 23.0
    docPositions:
    - 52
    - 270
    - 311
    - 347
    - 455
    - 631
    - 633
    - 686
    - 766
    - 946
    - 1069
    - 1496
    - 1618
    - 1645
    - 1671
    - 1742
    - 1858
    - 1860
    - 1895
    - 1947
    - 2064
    - 2142
  than: !ruby/object:Word
    word: than
    stem: than
    docFrequency: 47.0
    docPositions:
    - 52
    - 127
    - 149
    - 156
    - 175
    - 264
    - 311
    - 347
    - 454
    - 455
    - 527
    - 550
    - 631
    - 633
    - 653
    - 674
    - 695
    - 766
    - 817
    - 946
    - 1271
    - 1272
    - 1352
    - 1496
    - 1528
    - 1544
    - 1549
    - 1560
    - 1616
    - 1645
    - 1671
    - 1741
    - 1742
    - 1786
    - 1801
    - 1858
    - 1860
    - 1872
    - 1887
    - 1900
    - 1947
    - 1981
    - 2064
    - 2281
    - 2282
    - 2337
  computation: !ruby/object:Word
    word: computation
    stem: comput
    docFrequency: 9.0
    docPositions:
    - 52
    - 168
    - 901
    - 1179
    - 1496
    - 1557
    - 2035
    - 2216
  but: !ruby/object:Word
    word: but
    stem: but
    docFrequency: 113.0
    docPositions:
    - 52
    - 77
    - 153
    - 167
    - 178
    - 205
    - 209
    - 243
    - 306
    - 340
    - 344
    - 346
    - 350
    - 352
    - 380
    - 385
    - 394
    - 477
    - 483
    - 500
    - 520
    - 524
    - 550
    - 558
    - 565
    - 573
    - 593
    - 604
    - 605
    - 617
    - 630
    - 650
    - 653
    - 665
    - 669
    - 673
    - 694
    - 706
    - 712
    - 719
    - 725
    - 741
    - 749
    - 761
    - 765
    - 779
    - 827
    - 901
    - 989
    - 1071
    - 1145
    - 1186
    - 1205
    - 1231
    - 1241
    - 1459
    - 1496
    - 1508
    - 1546
    - 1556
    - 1563
    - 1580
    - 1582
    - 1602
    - 1642
    - 1666
    - 1668
    - 1670
    - 1673
    - 1691
    - 1694
    - 1701
    - 1756
    - 1759
    - 1769
    - 1783
    - 1785
    - 1801
    - 1807
    - 1812
    - 1818
    - 1834
    - 1839
    - 1840
    - 1848
    - 1857
    - 1871
    - 1872
    - 1882
    - 1884
    - 1886
    - 1899
    - 1907
    - 1911
    - 1914
    - 1918
    - 1928
    - 1934
    - 1944
    - 1946
    - 1956
    - 1987
    - 2035
    - 2093
    - 2144
    - 2192
    - 2221
    - 2234
    - 2254
    - 2260
    - 2375
  there: !ruby/object:Word
    word: there
    stem: there
    docFrequency: 90.0
    docPositions:
    - 52
    - 112
    - 142
    - 170
    - 180
    - 203
    - 231
    - 240
    - 243
    - 343
    - 385
    - 405
    - 436
    - 447
    - 519
    - 537
    - 592
    - 605
    - 657
    - 663
    - 688
    - 690
    - 709
    - 723
    - 736
    - 819
    - 822
    - 842
    - 845
    - 901
    - 916
    - 923
    - 936
    - 967
    - 972
    - 987
    - 1050
    - 1084
    - 1087
    - 1097
    - 1139
    - 1187
    - 1254
    - 1303
    - 1320
    - 1461
    - 1496
    - 1539
    - 1557
    - 1563
    - 1578
    - 1596
    - 1602
    - 1667
    - 1694
    - 1706
    - 1734
    - 1782
    - 1792
    - 1833
    - 1840
    - 1876
    - 1880
    - 1895
    - 1897
    - 1908
    - 1918
    - 1925
    - 1981
    - 1984
    - 1998
    - 2001
    - 2035
    - 2044
    - 2049
    - 2058
    - 2077
    - 2080
    - 2091
    - 2127
    - 2153
    - 2154
    - 2160
    - 2188
    - 2222
    - 2268
    - 2302
    - 2315
    - 2376
  other: !ruby/object:Word
    word: other
    stem: other
    docFrequency: 78.0
    docPositions:
    - 52
    - 120
    - 159
    - 220
    - 306
    - 343
    - 366
    - 405
    - 420
    - 436
    - 462
    - 524
    - 529
    - 542
    - 599
    - 621
    - 637
    - 644
    - 665
    - 740
    - 764
    - 837
    - 843
    - 884
    - 1037
    - 1089
    - 1109
    - 1114
    - 1115
    - 1125
    - 1132
    - 1145
    - 1148
    - 1206
    - 1232
    - 1295
    - 1393
    - 1410
    - 1412
    - 1496
    - 1550
    - 1589
    - 1642
    - 1667
    - 1681
    - 1706
    - 1717
    - 1727
    - 1745
    - 1785
    - 1788
    - 1797
    - 1836
    - 1852
    - 1862
    - 1867
    - 1882
    - 1927
    - 1945
    - 1995
    - 1999
    - 2026
    - 2118
    - 2156
    - 2166
    - 2169
    - 2170
    - 2178
    - 2183
    - 2192
    - 2195
    - 2235
    - 2255
    - 2296
    - 2356
  important: !ruby/object:Word
    word: important
    stem: import
    docFrequency: 13.0
    docPositions:
    - 52
    - 653
    - 760
    - 773
    - 1017
    - 1070
    - 1496
    - 1872
    - 1943
    - 1952
    - 2108
    - 2143
  application: !ruby/object:Word
    word: application
    stem: applic
    docFrequency: 15.0
    docPositions:
    - 52
    - 1070
    - 1162
    - 1164
    - 1182
    - 1207
    - 1270
    - 1496
    - 2143
    - 2203
    - 2205
    - 2217
    - 2236
    - 2280
  areas: !ruby/object:Word
    word: areas
    stem: area
    docFrequency: 3.0
    docPositions:
    - 52
    - 1496
  completes: !ruby/object:Word
    word: completes
    stem: complet
    docFrequency: 3.0
    docPositions:
    - 53
    - 1497
  feature: !ruby/object:Word
    word: feature
    stem: featur
    docFrequency: 5.0
    docPositions:
    - 53
    - 69
    - 1497
    - 1504
  articles: !ruby/object:Word
    word: articles
    stem: articl
    docFrequency: 3.0
    docPositions:
    - 53
    - 1497
  look: !ruby/object:Word
    word: look
    stem: look
    docFrequency: 7.0
    docPositions:
    - 53
    - 266
    - 632
    - 1497
    - 1616
    - 1859
  ferranti: !ruby/object:Word
    word: ferranti
    stem: ferranti
    docFrequency: 19.0
    docPositions:
    - 54
    - 941
    - 942
    - 968
    - 1183
    - 1258
    - 1261
    - 1268
    - 1317
    - 1498
    - 2061
    - 2062
    - 2078
    - 2218
    - 2270
    - 2273
    - 2278
    - 2314
  applied: !ruby/object:Word
    word: applied
    stem: appli
    docFrequency: 7.0
    docPositions:
    - 54
    - 494
    - 500
    - 1498
    - 1765
    - 1769
  technology: !ruby/object:Word
    word: technology
    stem: technolog
    docFrequency: 27.0
    docPositions:
    - 54
    - 599
    - 600
    - 619
    - 620
    - 646
    - 661
    - 665
    - 759
    - 1155
    - 1394
    - 1498
    - 1836
    - 1837
    - 1850
    - 1851
    - 1867
    - 1878
    - 1882
    - 1942
    - 2200
    - 2357
  industrial: !ruby/object:Word
    word: industrial
    stem: industri
    docFrequency: 3.0
    docPositions:
    - 54
    - 1498
  top: !ruby/object:Word
    word: top
    stem: top
    docFrequency: 11.0
    docPositions:
    - 56
    - 110
    - 126
    - 238
    - 488
    - 789
    - 890
    - 1249
    - 1289
    - 2032
  annual: !ruby/object:Word
    word: annual
    stem: annual
    docFrequency: 4.0
    docPositions:
    - 57
    - 1468
    - 1498
  general: !ruby/object:Word
    word: general
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 57
    - 1498
  meeting: !ruby/object:Word
    word: meeting
    stem: meet
    docFrequency: 13.0
    docPositions:
    - 57
    - 1344
    - 1367
    - 1424
    - 1426
    - 1428
    - 1498
    - 2331
    - 2346
    - 2364
  may: !ruby/object:Word
    word: may
    stem: mai
    docFrequency: 14.0
    docPositions:
    - 57
    - 343
    - 786
    - 1275
    - 1414
    - 1452
    - 1459
    - 1498
    - 1667
    - 1959
    - 2285
    - 2361
    - 2375
  approved: !ruby/object:Word
    word: approved
    stem: approv
    docFrequency: 3.0
    docPositions:
    - 57
    - 1498
  change: !ruby/object:Word
    word: change
    stem: chang
    docFrequency: 14.0
    docPositions:
    - 57
    - 112
    - 597
    - 749
    - 750
    - 851
    - 1204
    - 1498
    - 1836
    - 1934
    - 1935
    - 2005
    - 2233
  constitution: !ruby/object:Word
    word: constitution
    stem: constitut
    docFrequency: 3.0
    docPositions:
    - 57
    - 1498
  formal: !ruby/object:Word
    word: formal
    stem: formal
    docFrequency: 5.0
    docPositions:
    - 58
    - 73
    - 1499
    - 1506
  recognition: !ruby/object:Word
    word: recognition
    stem: recognit
    docFrequency: 3.0
    docPositions:
    - 58
    - 1499
  our: !ruby/object:Word
    word: our
    stem: our
    docFrequency: 36.0
    docPositions:
    - 58
    - 82
    - 383
    - 538
    - 595
    - 599
    - 606
    - 664
    - 678
    - 709
    - 778
    - 1274
    - 1316
    - 1320
    - 1366
    - 1379
    - 1386
    - 1499
    - 1511
    - 1694
    - 1793
    - 1834
    - 1836
    - 1841
    - 1881
    - 1889
    - 1908
    - 1955
    - 2284
    - 2313
    - 2315
    - 2345
    - 2353
  close: !ruby/object:Word
    word: close
    stem: close
    docFrequency: 7.0
    docPositions:
    - 58
    - 348
    - 1082
    - 1499
    - 1672
    - 2151
  links: !ruby/object:Word
    word: links
    stem: link
    docFrequency: 4.0
    docPositions:
    - 58
    - 1410
    - 1499
  '': !ruby/object:Word
    word: ''
    stem: ''
    docFrequency: 33.0
    docPositions:
    - 60
    - 66
    - 68
    - 71
    - 74
    - 81
    - 85
    - 89
    - 93
    - 98
    - 100
    - 105
    - 214
    - 218
    - 231
    - 260
    - 277
    - 285
    - 355
    - 466
    - 799
    - 1416
    - 1440
    - 1472
    - 1521
    - 1585
    - 1589
    - 1612
    - 1623
    - 1629
    - 1749
    - 1967
  chairman: !ruby/object:Word
    word: chairman
    stem: chairman
    docFrequency: 11.0
    docPositions:
    - 61
    - 1282
    - 1441
    - 1500
    - 2290
    - 2367
  brian: !ruby/object:Word
    word: brian
    stem: brian
    docFrequency: 7.0
    docPositions:
    - 61
    - 99
    - 1441
    - 1500
    - 1520
    - 2367
  oakley: !ruby/object:Word
    word: oakley
    stem: oaklei
    docFrequency: 5.0
    docPositions:
    - 61
    - 1441
    - 1500
    - 2367
  highlighted: !ruby/object:Word
    word: highlighted
    stem: highlight
    docFrequency: 3.0
    docPositions:
    - 61
    - 1500
  three: !ruby/object:Word
    word: three
    stem: three
    docFrequency: 29.0
    docPositions:
    - 61
    - 90
    - 102
    - 134
    - 281
    - 450
    - 590
    - 900
    - 974
    - 975
    - 998
    - 1191
    - 1254
    - 1299
    - 1500
    - 1515
    - 1522
    - 1533
    - 1625
    - 1737
    - 1831
    - 2034
    - 2082
    - 2083
    - 2100
    - 2224
    - 2268
    - 2300
  achievements: !ruby/object:Word
    word: achievements
    stem: achiev
    docFrequency: 3.0
    docPositions:
    - 61
    - 1500
  year: !ruby/object:Word
    word: year
    stem: year
    docFrequency: 7.0
    docPositions:
    - 61
    - 70
    - 1369
    - 1500
    - 1505
    - 2348
  address: !ruby/object:Word
    word: address
    stem: address
    docFrequency: 25.0
    docPositions:
    - 62
    - 841
    - 974
    - 975
    - 976
    - 978
    - 987
    - 994
    - 1066
    - 1089
    - 1117
    - 1501
    - 1997
    - 2082
    - 2083
    - 2084
    - 2086
    - 2091
    - 2098
    - 2141
    - 2156
    - 2172
  agm: !ruby/object:Word
    word: agm
    stem: agm
    docFrequency: 7.0
    docPositions:
    - 62
    - 67
    - 99
    - 1501
    - 1504
    - 1520
  reconstruction: !ruby/object:Word
    word: reconstruction
    stem: reconstruct
    docFrequency: 5.0
    docPositions:
    - 62
    - 152
    - 1501
    - 1545
  university: !ruby/object:Word
    word: university
    stem: univers
    docFrequency: 18.0
    docPositions:
    - 62
    - 163
    - 221
    - 246
    - 811
    - 1292
    - 1331
    - 1378
    - 1401
    - 1501
    - 1552
    - 1590
    - 1604
    - 1975
    - 2293
    - 2324
    - 2352
  small: !ruby/object:Word
    word: small
    stem: small
    docFrequency: 27.0
    docPositions:
    - 62
    - 246
    - 546
    - 571
    - 734
    - 737
    - 791
    - 809
    - 835
    - 1196
    - 1220
    - 1290
    - 1378
    - 1501
    - 1604
    - 1799
    - 1816
    - 1923
    - 1926
    - 1960
    - 1973
    - 1993
    - 2227
    - 2245
    - 2293
    - 2352
  scale: !ruby/object:Word
    word: scale
    stem: scale
    docFrequency: 13.0
    docPositions:
    - 63
    - 136
    - 246
    - 1250
    - 1290
    - 1378
    - 1502
    - 1535
    - 1604
    - 2265
    - 2293
    - 2352
  experimental: !ruby/object:Word
    word: experimental
    stem: experiment
    docFrequency: 18.0
    docPositions:
    - 63
    - 246
    - 807
    - 810
    - 828
    - 1002
    - 1107
    - 1290
    - 1378
    - 1502
    - 1604
    - 1974
    - 1988
    - 2102
    - 2164
    - 2293
    - 2352
  machine: !ruby/object:Word
    word: machine
    stem: machin
    docFrequency: 71.0
    docPositions:
    - 63
    - 180
    - 196
    - 246
    - 284
    - 358
    - 364
    - 459
    - 468
    - 519
    - 549
    - 571
    - 577
    - 643
    - 658
    - 728
    - 735
    - 737
    - 738
    - 746
    - 792
    - 828
    - 962
    - 968
    - 969
    - 1002
    - 1105
    - 1107
    - 1154
    - 1292
    - 1298
    - 1313
    - 1322
    - 1366
    - 1378
    - 1502
    - 1563
    - 1575
    - 1604
    - 1628
    - 1677
    - 1679
    - 1744
    - 1749
    - 1782
    - 1800
    - 1816
    - 1822
    - 1866
    - 1877
    - 1921
    - 1924
    - 1926
    - 1927
    - 1933
    - 1961
    - 1988
    - 2074
    - 2078
    - 2079
    - 2102
    - 2164
    - 2199
    - 2293
    - 2299
    - 2310
    - 2317
    - 2345
    - 2352
  progress: !ruby/object:Word
    word: progress
    stem: progress
    docFrequency: 9.0
    docPositions:
    - 63
    - 84
    - 816
    - 1338
    - 1502
    - 1513
    - 1980
    - 2327
  made: !ruby/object:Word
    word: made
    stem: made
    docFrequency: 37.0
    docPositions:
    - 63
    - 72
    - 266
    - 271
    - 272
    - 279
    - 528
    - 673
    - 675
    - 779
    - 803
    - 1010
    - 1109
    - 1269
    - 1317
    - 1330
    - 1337
    - 1459
    - 1502
    - 1505
    - 1616
    - 1619
    - 1620
    - 1623
    - 1787
    - 1886
    - 1888
    - 1956
    - 1971
    - 2106
    - 2166
    - 2279
    - 2314
    - 2323
    - 2326
    - 2375
  bombe: !ruby/object:Word
    word: bombe
    stem: bomb
    docFrequency: 11.0
    docPositions:
    - 63
    - 72
    - 78
    - 83
    - 1441
    - 1502
    - 1505
    - 1509
    - 1512
    - 2367
  project: !ruby/object:Word
    word: project
    stem: project
    docFrequency: 18.0
    docPositions:
    - 63
    - 83
    - 1263
    - 1271
    - 1320
    - 1326
    - 1330
    - 1374
    - 1387
    - 1502
    - 1512
    - 2275
    - 2281
    - 2315
    - 2319
    - 2323
    - 2351
  successful: !ruby/object:Word
    word: successful
    stem: success
    docFrequency: 9.0
    docPositions:
    - 64
    - 188
    - 242
    - 475
    - 1503
    - 1569
    - 1601
    - 1754
  move: !ruby/object:Word
    word: move
    stem: move
    docFrequency: 5.0
    docPositions:
    - 64
    - 613
    - 1503
    - 1846
  pegasus: !ruby/object:Word
    word: pegasus
    stem: pegasu
    docFrequency: 35.0
    docPositions:
    - 64
    - 69
    - 967
    - 970
    - 973
    - 981
    - 986
    - 1032
    - 1094
    - 1255
    - 1259
    - 1334
    - 1336
    - 1338
    - 1367
    - 1378
    - 1441
    - 1503
    - 1504
    - 2077
    - 2080
    - 2081
    - 2087
    - 2090
    - 2115
    - 2159
    - 2269
    - 2271
    - 2325
    - 2327
    - 2346
    - 2352
    - 2367
  old: !ruby/object:Word
    word: old
    stem: old
    docFrequency: 7.0
    docPositions:
    - 64
    - 127
    - 637
    - 1503
    - 1528
    - 1862
  canteen: !ruby/object:Word
    word: canteen
    stem: canteen
    docFrequency: 3.0
    docPositions:
    - 64
    - 1503
  blythe: !ruby/object:Word
    word: blythe
    stem: blyth
    docFrequency: 3.0
    docPositions:
    - 65
    - 1504
  house: !ruby/object:Word
    word: house
    stem: hous
    docFrequency: 7.0
    docPositions:
    - 65
    - 112
    - 121
    - 148
    - 1504
    - 1543
  elected: !ruby/object:Word
    word: elected
    stem: elect
    docFrequency: 3.0
    docPositions:
    - 67
    - 1504
  current: !ruby/object:Word
    word: current
    stem: current
    docFrequency: 23.0
    docPositions:
    - 67
    - 310
    - 350
    - 839
    - 866
    - 869
    - 870
    - 872
    - 915
    - 937
    - 1055
    - 1390
    - 1504
    - 1997
    - 2014
    - 2017
    - 2018
    - 2020
    - 2043
    - 2059
    - 2132
    - 2354
  officers: !ruby/object:Word
    word: officers
    stem: offic
    docFrequency: 3.0
    docPositions:
    - 67
    - 1504
  members: !ruby/object:Word
    word: members
    stem: member
    docFrequency: 19.0
    docPositions:
    - 67
    - 99
    - 122
    - 1326
    - 1371
    - 1413
    - 1416
    - 1440
    - 1464
    - 1467
    - 1504
    - 1520
    - 2319
    - 2348
    - 2360
    - 2361
    - 2367
    - 2378
  london: !ruby/object:Word
    word: london
    stem: london
    docFrequency: 15.0
    docPositions:
    - 69
    - 90
    - 968
    - 1244
    - 1433
    - 1436
    - 1445
    - 1504
    - 1515
    - 2078
    - 2263
    - 2365
    - 2366
    - 2368
  plans: !ruby/object:Word
    word: plans
    stem: plan
    docFrequency: 5.0
    docPositions:
    - 69
    - 749
    - 1504
    - 1934
  highlight: !ruby/object:Word
    word: highlight
    stem: highlight
    docFrequency: 5.0
    docPositions:
    - 69
    - 75
    - 1504
    - 1506
  new: !ruby/object:Word
    word: new
    stem: new
    docFrequency: 35.0
    docPositions:
    - 70
    - 173
    - 300
    - 312
    - 315
    - 317
    - 319
    - 622
    - 642
    - 678
    - 731
    - 741
    - 744
    - 770
    - 773
    - 913
    - 1210
    - 1505
    - 1558
    - 1638
    - 1646
    - 1649
    - 1651
    - 1853
    - 1865
    - 1889
    - 1922
    - 1928
    - 1931
    - 1949
    - 1952
    - 2041
    - 2239
  exhibition: !ruby/object:Word
    word: exhibition
    stem: exhibit
    docFrequency: 5.0
    docPositions:
    - 70
    - 1420
    - 1505
    - 2362
  scheduled: !ruby/object:Word
    word: scheduled
    stem: schedul
    docFrequency: 3.0
    docPositions:
    - 70
    - 1505
  open: !ruby/object:Word
    word: open
    stem: open
    docFrequency: 7.0
    docPositions:
    - 70
    - 1369
    - 1455
    - 1505
    - 2348
    - 2372
  nortel: !ruby/object:Word
    word: nortel
    stem: nortel
    docFrequency: 3.0
    docPositions:
    - 72
    - 1505
  generous: !ruby/object:Word
    word: generous
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 72
    - 1505
  sponsorship: !ruby/object:Word
    word: sponsorship
    stem: sponsorship
    docFrequency: 5.0
    docPositions:
    - 72
    - 1331
    - 1505
    - 2324
  donation: !ruby/object:Word
    word: donation
    stem: donat
    docFrequency: 3.0
    docPositions:
    - 72
    - 1505
  proj: !ruby/object:Word
    word: proj
    stem: proj
    docFrequency: 3.0
    docPositions:
    - 72
    - 1505
  ect: !ruby/object:Word
    word: ect
    stem: ect
    docFrequency: 3.0
    docPositions:
    - 72
    - 1505
  large: !ruby/object:Word
    word: large
    stem: larg
    docFrequency: 25.0
    docPositions:
    - 72
    - 520
    - 537
    - 538
    - 753
    - 869
    - 914
    - 940
    - 1046
    - 1179
    - 1250
    - 1505
    - 1783
    - 1792
    - 1793
    - 1938
    - 2017
    - 2042
    - 2060
    - 2125
    - 2216
    - 2265
  cheque: !ruby/object:Word
    word: cheque
    stem: chequ
    docFrequency: 3.0
    docPositions:
    - 73
    - 1506
  handed: !ruby/object:Word
    word: handed
    stem: hand
    docFrequency: 5.0
    docPositions:
    - 73
    - 1314
    - 1506
    - 2311
  over: !ruby/object:Word
    word: over
    stem: over
    docFrequency: 13.0
    docPositions:
    - 73
    - 523
    - 1187
    - 1278
    - 1310
    - 1314
    - 1506
    - 1784
    - 2222
    - 2286
    - 2307
    - 2311
  ceremony: !ruby/object:Word
    word: ceremony
    stem: ceremoni
    docFrequency: 7.0
    docPositions:
    - 73
    - 138
    - 159
    - 1506
    - 1537
    - 1550
  decryption: !ruby/object:Word
    word: decryption
    stem: decrypt
    docFrequency: 3.0
    docPositions:
    - 75
    - 1506
  wartime: !ruby/object:Word
    word: wartime
    stem: wartim
    docFrequency: 7.0
    docPositions:
    - 75
    - 1421
    - 1422
    - 1506
    - 2363
    - 2364
  german: !ruby/object:Word
    word: german
    stem: german
    docFrequency: 3.0
    docPositions:
    - 75
    - 1506
  coded: !ruby/object:Word
    word: coded
    stem: code
    docFrequency: 3.0
    docPositions:
    - 76
    - 1507
  message: !ruby/object:Word
    word: message
    stem: messag
    docFrequency: 11.0
    docPositions:
    - 76
    - 79
    - 80
    - 536
    - 1507
    - 1510
    - 1511
    - 1791
  sent: !ruby/object:Word
    word: sent
    stem: sent
    docFrequency: 13.0
    docPositions:
    - 76
    - 80
    - 273
    - 285
    - 289
    - 1056
    - 1507
    - 1511
    - 1621
    - 1629
    - 1633
    - 2133
  november: !ruby/object:Word
    word: november
    stem: novemb
    docFrequency: 9.0
    docPositions:
    - 76
    - 783
    - 878
    - 1428
    - 1507
    - 1959
    - 2022
    - 2364
  course: !ruby/object:Word
    word: course
    stem: cours
    docFrequency: 9.0
    docPositions:
    - 76
    - 170
    - 706
    - 778
    - 1507
    - 1557
    - 1907
    - 1955
  decoded: !ruby/object:Word
    word: decoded
    stem: decod
    docFrequency: 5.0
    docPositions:
    - 76
    - 80
    - 1507
    - 1511
  time: !ruby/object:Word
    word: time
    stem: time
    docFrequency: 117.0
    docPositions:
    - 77
    - 87
    - 130
    - 170
    - 181
    - 182
    - 279
    - 365
    - 372
    - 385
    - 389
    - 436
    - 503
    - 511
    - 532
    - 540
    - 580
    - 608
    - 616
    - 626
    - 630
    - 652
    - 681
    - 690
    - 733
    - 765
    - 812
    - 851
    - 853
    - 869
    - 873
    - 877
    - 889
    - 901
    - 933
    - 965
    - 1017
    - 1043
    - 1090
    - 1107
    - 1108
    - 1111
    - 1114
    - 1126
    - 1149
    - 1179
    - 1198
    - 1218
    - 1219
    - 1220
    - 1231
    - 1264
    - 1280
    - 1340
    - 1373
    - 1508
    - 1514
    - 1531
    - 1557
    - 1564
    - 1565
    - 1623
    - 1680
    - 1685
    - 1694
    - 1698
    - 1727
    - 1772
    - 1776
    - 1789
    - 1795
    - 1823
    - 1841
    - 1847
    - 1855
    - 1857
    - 1871
    - 1890
    - 1897
    - 1922
    - 1946
    - 1976
    - 2005
    - 2007
    - 2017
    - 2021
    - 2031
    - 2035
    - 2057
    - 2077
    - 2108
    - 2122
    - 2157
    - 2164
    - 2165
    - 2168
    - 2169
    - 2179
    - 2196
    - 2216
    - 2229
    - 2243
    - 2244
    - 2245
    - 2254
    - 2276
    - 2288
    - 2329
    - 2350
  'no': !ruby/object:Word
    word: 'no'
    stem: 'no'
    docFrequency: 28.0
    docPositions:
    - 77
    - 111
    - 112
    - 170
    - 177
    - 180
    - 240
    - 279
    - 405
    - 605
    - 621
    - 663
    - 712
    - 725
    - 1508
    - 1557
    - 1562
    - 1563
    - 1599
    - 1623
    - 1706
    - 1840
    - 1852
    - 1880
    - 1911
    - 1918
  record: !ruby/object:Word
    word: record
    stem: record
    docFrequency: 5.0
    docPositions:
    - 77
    - 240
    - 1508
    - 1599
  kept: !ruby/object:Word
    word: kept
    stem: kept
    docFrequency: 5.0
    docPositions:
    - 77
    - 997
    - 1508
    - 2099
  enigma: !ruby/object:Word
    word: enigma
    stem: enigma
    docFrequency: 5.0
    docPositions:
    - 77
    - 79
    - 1508
    - 1510
  settings: !ruby/object:Word
    word: settings
    stem: set
    docFrequency: 7.0
    docPositions:
    - 77
    - 78
    - 1223
    - 1508
    - 1509
    - 2246
  used: !ruby/object:Word
    word: used
    stem: us
    docFrequency: 121.0
    docPositions:
    - 77
    - 78
    - 87
    - 137
    - 138
    - 141
    - 146
    - 148
    - 176
    - 185
    - 280
    - 420
    - 460
    - 474
    - 541
    - 550
    - 605
    - 608
    - 609
    - 624
    - 793
    - 812
    - 823
    - 828
    - 831
    - 832
    - 849
    - 878
    - 893
    - 915
    - 919
    - 924
    - 931
    - 935
    - 936
    - 940
    - 956
    - 957
    - 958
    - 991
    - 994
    - 996
    - 1001
    - 1021
    - 1034
    - 1037
    - 1042
    - 1063
    - 1070
    - 1130
    - 1144
    - 1155
    - 1179
    - 1207
    - 1231
    - 1238
    - 1242
    - 1508
    - 1509
    - 1514
    - 1536
    - 1537
    - 1538
    - 1541
    - 1543
    - 1561
    - 1568
    - 1624
    - 1717
    - 1745
    - 1753
    - 1796
    - 1801
    - 1840
    - 1841
    - 1842
    - 1853
    - 1962
    - 1976
    - 1985
    - 1988
    - 1991
    - 1992
    - 2003
    - 2022
    - 2033
    - 2043
    - 2047
    - 2050
    - 2055
    - 2057
    - 2058
    - 2060
    - 2070
    - 2071
    - 2072
    - 2095
    - 2098
    - 2101
    - 2108
    - 2117
    - 2118
    - 2121
    - 2138
    - 2143
    - 2181
    - 2191
    - 2200
    - 2216
    - 2236
    - 2254
    - 2259
    - 2261
  do: !ruby/object:Word
    word: do
    stem: do
    docFrequency: 41.0
    docPositions:
    - 77
    - 168
    - 190
    - 352
    - 393
    - 507
    - 514
    - 515
    - 591
    - 596
    - 608
    - 699
    - 705
    - 716
    - 759
    - 786
    - 852
    - 1169
    - 1414
    - 1508
    - 1557
    - 1571
    - 1673
    - 1700
    - 1774
    - 1779
    - 1780
    - 1832
    - 1835
    - 1841
    - 1902
    - 1906
    - 1913
    - 1942
    - 1959
    - 2006
    - 2208
    - 2361
  tony: !ruby/object:Word
    word: tony
    stem: toni
    docFrequency: 6.0
    docPositions:
    - 77
    - 1441
    - 1471
    - 1508
    - 2367
  sale: !ruby/object:Word
    word: sale
    stem: sale
    docFrequency: 5.0
    docPositions:
    - 77
    - 1441
    - 1508
    - 2367
  simulator: !ruby/object:Word
    word: simulator
    stem: simul
    docFrequency: 3.0
    docPositions:
    - 78
    - 1509
  find: !ruby/object:Word
    word: find
    stem: find
    docFrequency: 16.0
    docPositions:
    - 78
    - 114
    - 175
    - 344
    - 371
    - 699
    - 1298
    - 1321
    - 1509
    - 1560
    - 1668
    - 1684
    - 1902
    - 2299
    - 2316
  configured: !ruby/object:Word
    word: configured
    stem: configur
    docFrequency: 3.0
    docPositions:
    - 78
    - 1509
  actual: !ruby/object:Word
    word: actual
    stem: actual
    docFrequency: 5.0
    docPositions:
    - 78
    - 1311
    - 1509
    - 2308
  decrypt: !ruby/object:Word
    word: decrypt
    stem: decrypt
    docFrequency: 3.0
    docPositions:
    - 79
    - 1510
  prove: !ruby/object:Word
    word: prove
    stem: prove
    docFrequency: 3.0
    docPositions:
    - 79
    - 1510
  concept: !ruby/object:Word
    word: concept
    stem: concept
    docFrequency: 7.0
    docPositions:
    - 79
    - 192
    - 1104
    - 1510
    - 1573
    - 2163
  successfully: !ruby/object:Word
    word: successfully
    stem: successfulli
    docFrequency: 3.0
    docPositions:
    - 79
    - 1510
  further: !ruby/object:Word
    word: further
    stem: further
    docFrequency: 28.0
    docPositions:
    - 80
    - 183
    - 275
    - 276
    - 284
    - 294
    - 329
    - 403
    - 424
    - 430
    - 485
    - 742
    - 1155
    - 1511
    - 1566
    - 1621
    - 1622
    - 1628
    - 1659
    - 1704
    - 1721
    - 1723
    - 1761
    - 1929
    - 2200
  later: !ruby/object:Word
    word: later
    stem: later
    docFrequency: 15.0
    docPositions:
    - 80
    - 184
    - 445
    - 484
    - 958
    - 1260
    - 1285
    - 1511
    - 1567
    - 1734
    - 1760
    - 2072
    - 2272
    - 2291
  same: !ruby/object:Word
    word: same
    stem: same
    docFrequency: 29.0
    docPositions:
    - 80
    - 288
    - 430
    - 440
    - 514
    - 541
    - 575
    - 595
    - 682
    - 746
    - 853
    - 889
    - 988
    - 1026
    - 1511
    - 1632
    - 1723
    - 1731
    - 1779
    - 1796
    - 1820
    - 1834
    - 1891
    - 1933
    - 2007
    - 2031
    - 2092
    - 2111
  grateful: !ruby/object:Word
    word: grateful
    stem: grate
    docFrequency: 5.0
    docPositions:
    - 82
    - 706
    - 1511
    - 1907
  responded: !ruby/object:Word
    word: responded
    stem: respond
    docFrequency: 3.0
    docPositions:
    - 82
    - 1511
  appeal: !ruby/object:Word
    word: appeal
    stem: appeal
    docFrequency: 3.0
    docPositions:
    - 82
    - 1511
  last: !ruby/object:Word
    word: last
    stem: last
    docFrequency: 17.0
    docPositions:
    - 82
    - 976
    - 1082
    - 1192
    - 1318
    - 1336
    - 1344
    - 1367
    - 1511
    - 2084
    - 2151
    - 2225
    - 2315
    - 2325
    - 2331
    - 2346
  volunteers: !ruby/object:Word
    word: volunteers
    stem: volunt
    docFrequency: 3.0
    docPositions:
    - 83
    - 1512
  help: !ruby/object:Word
    word: help
    stem: help
    docFrequency: 5.0
    docPositions:
    - 83
    - 1298
    - 1512
    - 2299
  allowed: !ruby/object:Word
    word: allowed
    stem: allow
    docFrequency: 9.0
    docPositions:
    - 83
    - 232
    - 765
    - 1149
    - 1512
    - 1597
    - 1946
    - 2196
  team: !ruby/object:Word
    word: team
    stem: team
    docFrequency: 19.0
    docPositions:
    - 83
    - 87
    - 134
    - 171
    - 192
    - 210
    - 225
    - 1323
    - 1326
    - 1512
    - 1514
    - 1533
    - 1558
    - 1573
    - 1583
    - 1592
    - 2318
    - 2319
  database: !ruby/object:Word
    word: database
    stem: databas
    docFrequency: 3.0
    docPositions:
    - 84
    - 1513
  construction: !ruby/object:Word
    word: construction
    stem: construct
    docFrequency: 5.0
    docPositions:
    - 84
    - 188
    - 1513
    - 1569
  make: !ruby/object:Word
    word: make
    stem: make
    docFrequency: 15.0
    docPositions:
    - 84
    - 468
    - 612
    - 621
    - 723
    - 813
    - 1062
    - 1513
    - 1749
    - 1845
    - 1852
    - 1918
    - 1977
    - 2137
  very: !ruby/object:Word
    word: very
    stem: veri
    docFrequency: 45.0
    docPositions:
    - 84
    - 131
    - 226
    - 231
    - 232
    - 234
    - 328
    - 348
    - 514
    - 540
    - 545
    - 552
    - 574
    - 677
    - 719
    - 753
    - 756
    - 814
    - 1124
    - 1127
    - 1369
    - 1513
    - 1532
    - 1593
    - 1596
    - 1597
    - 1658
    - 1672
    - 1779
    - 1795
    - 1798
    - 1803
    - 1819
    - 1888
    - 1914
    - 1938
    - 1939
    - 1978
    - 2177
    - 2180
    - 2348
  substantial: !ruby/object:Word
    word: substantial
    stem: substanti
    docFrequency: 5.0
    docPositions:
    - 84
    - 1320
    - 1513
    - 2315
  cad: !ruby/object:Word
    word: cad
    stem: cad
    docFrequency: 3.0
    docPositions:
    - 84
    - 1513
  adrian: !ruby/object:Word
    word: adrian
    stem: adrian
    docFrequency: 8.0
    docPositions:
    - 86
    - 1327
    - 1441
    - 1470
    - 1513
    - 2320
    - 2367
  johnstone: !ruby/object:Word
    word: johnstone
    stem: johnston
    docFrequency: 6.0
    docPositions:
    - 86
    - 1441
    - 1470
    - 1513
    - 2367
  reassumed: !ruby/object:Word
    word: reassumed
    stem: reassum
    docFrequency: 3.0
    docPositions:
    - 86
    - 1513
  chairmanship: !ruby/object:Word
    word: chairmanship
    stem: chairmanship
    docFrequency: 3.0
    docPositions:
    - 86
    - 1513
  dec: !ruby/object:Word
    word: dec
    stem: dec
    docFrequency: 5.0
    docPositions:
    - 86
    - 1441
    - 1513
    - 2367
  working: !ruby/object:Word
    word: working
    stem: work
    docFrequency: 29.0
    docPositions:
    - 86
    - 227
    - 1244
    - 1334
    - 1336
    - 1366
    - 1371
    - 1441
    - 1461
    - 1513
    - 1594
    - 2263
    - 2325
    - 2345
    - 2348
    - 2367
    - 2376
  party: !ruby/object:Word
    word: party
    stem: parti
    docFrequency: 19.0
    docPositions:
    - 86
    - 1336
    - 1371
    - 1441
    - 1513
    - 2325
    - 2348
    - 2367
  focussing: !ruby/object:Word
    word: focussing
    stem: focuss
    docFrequency: 3.0
    docPositions:
    - 87
    - 1514
  efforts: !ruby/object:Word
    word: efforts
    stem: effort
    docFrequency: 5.0
    docPositions:
    - 87
    - 470
    - 1514
    - 1751
  pdp: !ruby/object:Word
    word: pdp
    stem: pdp
    docFrequency: 3.0
    docPositions:
    - 87
    - 1514
  policing: !ruby/object:Word
    word: policing
    stem: polic
    docFrequency: 3.0
    docPositions:
    - 87
    - 1514
  nuclear: !ruby/object:Word
    word: nuclear
    stem: nuclear
    docFrequency: 5.0
    docPositions:
    - 88
    - 540
    - 1515
    - 1795
  test: !ruby/object:Word
    word: test
    stem: test
    docFrequency: 21.0
    docPositions:
    - 88
    - 246
    - 298
    - 299
    - 315
    - 322
    - 327
    - 444
    - 475
    - 1342
    - 1515
    - 1604
    - 1636
    - 1637
    - 1649
    - 1654
    - 1657
    - 1733
    - 1754
    - 2329
  ban: !ruby/object:Word
    word: ban
    stem: ban
    docFrequency: 3.0
    docPositions:
    - 88
    - 1515
  treaty: !ruby/object:Word
    word: treaty
    stem: treati
    docFrequency: 3.0
    docPositions:
    - 88
    - 1515
  meetings: !ruby/object:Word
    word: meetings
    stem: meet
    docFrequency: 17.0
    docPositions:
    - 90
    - 101
    - 103
    - 1351
    - 1430
    - 1433
    - 1436
    - 1437
    - 1515
    - 1521
    - 1523
    - 2336
    - 2364
    - 2365
    - 2366
    - 2367
  held: !ruby/object:Word
    word: held
    stem: held
    docFrequency: 19.0
    docPositions:
    - 90
    - 284
    - 958
    - 1022
    - 1033
    - 1040
    - 1052
    - 1062
    - 1082
    - 1515
    - 1628
    - 2072
    - 2109
    - 2116
    - 2119
    - 2129
    - 2137
    - 2151
  during: !ruby/object:Word
    word: during
    stem: dure
    docFrequency: 27.0
    docPositions:
    - 90
    - 159
    - 163
    - 215
    - 340
    - 445
    - 449
    - 463
    - 470
    - 1254
    - 1285
    - 1303
    - 1515
    - 1550
    - 1552
    - 1586
    - 1666
    - 1734
    - 1736
    - 1746
    - 1751
    - 2268
    - 2291
    - 2302
  spring: !ruby/object:Word
    word: spring
    stem: spring
    docFrequency: 3.0
    docPositions:
    - 90
    - 1515
  march: !ruby/object:Word
    word: march
    stem: march
    docFrequency: 23.0
    docPositions:
    - 90
    - 104
    - 270
    - 273
    - 275
    - 284
    - 287
    - 289
    - 350
    - 406
    - 466
    - 1515
    - 1524
    - 1618
    - 1621
    - 1628
    - 1631
    - 1633
    - 1673
    - 1707
    - 1749
  saw: !ruby/object:Word
    word: saw
    stem: saw
    docFrequency: 5.0
    docPositions:
    - 91
    - 1306
    - 1516
    - 2305
  donald: !ruby/object:Word
    word: donald
    stem: donald
    docFrequency: 3.0
    docPositions:
    - 91
    - 1516
  davies: !ruby/object:Word
    word: davies
    stem: davi
    docFrequency: 3.0
    docPositions:
    - 91
    - 1516
  roger: !ruby/object:Word
    word: roger
    stem: roger
    docFrequency: 5.0
    docPositions:
    - 91
    - 1441
    - 1516
    - 2367
  scantlebury: !ruby/object:Word
    word: scantlebury
    stem: scantleburi
    docFrequency: 3.0
    docPositions:
    - 91
    - 1516
  presenting: !ruby/object:Word
    word: presenting
    stem: present
    docFrequency: 3.0
    docPositions:
    - 91
    - 1516
  origins: !ruby/object:Word
    word: origins
    stem: origin
    docFrequency: 3.0
    docPositions:
    - 91
    - 1516
  packet: !ruby/object:Word
    word: packet
    stem: packet
    docFrequency: 3.0
    docPositions:
    - 91
    - 1516
  switching: !ruby/object:Word
    word: switching
    stem: switch
    docFrequency: 11.0
    docPositions:
    - 92
    - 915
    - 1144
    - 1152
    - 1359
    - 1517
    - 2043
    - 2191
    - 2197
    - 2342
  early: !ruby/object:Word
    word: early
    stem: earli
    docFrequency: 20.0
    docPositions:
    - 92
    - 96
    - 103
    - 222
    - 1253
    - 1262
    - 1279
    - 1401
    - 1424
    - 1462
    - 1517
    - 1519
    - 1523
    - 1591
    - 2267
    - 2274
    - 2287
    - 2364
    - 2377
  arpa: !ruby/object:Word
    word: arpa
    stem: arpa
    docFrequency: 3.0
    docPositions:
    - 92
    - 1517
  network: !ruby/object:Word
    word: network
    stem: network
    docFrequency: 7.0
    docPositions:
    - 92
    - 800
    - 919
    - 1517
    - 1968
    - 2047
  attracted: !ruby/object:Word
    word: attracted
    stem: attract
    docFrequency: 3.0
    docPositions:
    - 92
    - 1517
  followed: !ruby/object:Word
    word: followed
    stem: follow
    docFrequency: 11.0
    docPositions:
    - 94
    - 96
    - 160
    - 209
    - 800
    - 1517
    - 1519
    - 1551
    - 1582
    - 1968
  seminar: !ruby/object:Word
    word: seminar
    stem: seminar
    docFrequency: 7.0
    docPositions:
    - 94
    - 782
    - 1274
    - 1517
    - 1958
    - 2284
  networking: !ruby/object:Word
    word: networking
    stem: network
    docFrequency: 5.0
    docPositions:
    - 94
    - 95
    - 1517
    - 1518
  theme: !ruby/object:Word
    word: theme
    stem: theme
    docFrequency: 3.0
    docPositions:
    - 94
    - 1517
  bob: !ruby/object:Word
    word: bob
    stem: bob
    docFrequency: 5.0
    docPositions:
    - 95
    - 725
    - 1518
    - 1918
  cooper: !ruby/object:Word
    word: cooper
    stem: cooper
    docFrequency: 3.0
    docPositions:
    - 95
    - 1518
  spoke: !ruby/object:Word
    word: spoke
    stem: spoke
    docFrequency: 3.0
    docPositions:
    - 95
    - 1518
  academic: !ruby/object:Word
    word: academic
    stem: academ
    docFrequency: 3.0
    docPositions:
    - 95
    - 1518
  uk: !ruby/object:Word
    word: uk
    stem: uk
    docFrequency: 42.0
    docPositions:
    - 95
    - 97
    - 524
    - 537
    - 546
    - 568
    - 574
    - 576
    - 587
    - 600
    - 776
    - 1252
    - 1264
    - 1265
    - 1278
    - 1279
    - 1287
    - 1383
    - 1385
    - 1400
    - 1403
    - 1406
    - 1409
    - 1412
    - 1518
    - 1520
    - 1785
    - 1792
    - 1799
    - 1815
    - 1819
    - 1821
    - 1828
    - 1837
    - 1953
    - 2266
    - 2276
    - 2277
    - 2286
    - 2287
    - 2293
  kirstein: !ruby/object:Word
    word: kirstein
    stem: kirstein
    docFrequency: 3.0
    docPositions:
    - 96
    - 1519
  talk: !ruby/object:Word
    word: talk
    stem: talk
    docFrequency: 9.0
    docPositions:
    - 96
    - 781
    - 1245
    - 1274
    - 1519
    - 1957
    - 2263
    - 2284
  arpanet: !ruby/object:Word
    word: arpanet
    stem: arpanet
    docFrequency: 3.0
    docPositions:
    - 96
    - 1519
  internet: !ruby/object:Word
    word: internet
    stem: internet
    docFrequency: 3.0
    docPositions:
    - 97
    - 1520
  finally: !ruby/object:Word
    word: finally
    stem: final
    docFrequency: 5.0
    docPositions:
    - 99
    - 1028
    - 1520
    - 2113
  shackel: !ruby/object:Word
    word: shackel
    stem: shackel
    docFrequency: 3.0
    docPositions:
    - 99
    - 1520
  addressed: !ruby/object:Word
    word: addressed
    stem: address
    docFrequency: 11.0
    docPositions:
    - 99
    - 974
    - 986
    - 992
    - 1436
    - 1520
    - 2082
    - 2090
    - 2096
    - 2366
  human: !ruby/object:Word
    word: human
    stem: human
    docFrequency: 3.0
    docPositions:
    - 99
    - 1520
  factors: !ruby/object:Word
    word: factors
    stem: factor
    docFrequency: 5.0
    docPositions:
    - 99
    - 644
    - 1520
    - 1867
  details: !ruby/object:Word
    word: details
    stem: detail
    docFrequency: 9.0
    docPositions:
    - 101
    - 1294
    - 1379
    - 1440
    - 1521
    - 2295
    - 2353
    - 2367
  north: !ruby/object:Word
    word: north
    stem: north
    docFrequency: 17.0
    docPositions:
    - 101
    - 584
    - 1246
    - 1424
    - 1426
    - 1428
    - 1430
    - 1441
    - 1521
    - 1827
    - 2264
    - 2364
    - 2367
  west: !ruby/object:Word
    word: west
    stem: west
    docFrequency: 15.0
    docPositions:
    - 101
    - 1246
    - 1424
    - 1426
    - 1428
    - 1430
    - 1441
    - 1521
    - 2264
    - 2364
    - 2367
  group: !ruby/object:Word
    word: group
    stem: group
    docFrequency: 25.0
    docPositions:
    - 101
    - 693
    - 714
    - 715
    - 1246
    - 1424
    - 1426
    - 1428
    - 1430
    - 1441
    - 1447
    - 1521
    - 1898
    - 1911
    - 1912
    - 2264
    - 2364
    - 2367
    - 2370
  programme: !ruby/object:Word
    word: programme
    stem: programm
    docFrequency: 3.0
    docPositions:
    - 101
    - 1521
  autumn: !ruby/object:Word
    word: autumn
    stem: autumn
    docFrequency: 7.0
    docPositions:
    - 101
    - 164
    - 1336
    - 1521
    - 1553
    - 2325
  can: !ruby/object:Word
    word: can
    stem: can
    docFrequency: 37.0
    docPositions:
    - 101
    - 173
    - 235
    - 339
    - 380
    - 394
    - 406
    - 476
    - 640
    - 646
    - 661
    - 853
    - 914
    - 918
    - 1153
    - 1168
    - 1199
    - 1379
    - 1521
    - 1558
    - 1598
    - 1665
    - 1691
    - 1701
    - 1707
    - 1755
    - 1863
    - 1867
    - 1878
    - 2007
    - 2042
    - 2046
    - 2198
    - 2207
    - 2230
    - 2353
  found: !ruby/object:Word
    word: found
    stem: found
    docFrequency: 15.0
    docPositions:
    - 101
    - 142
    - 355
    - 757
    - 1204
    - 1234
    - 1379
    - 1521
    - 1539
    - 1674
    - 1940
    - 2233
    - 2255
    - 2353
  under: !ruby/object:Word
    word: under
    stem: under
    docFrequency: 13.0
    docPositions:
    - 102
    - 147
    - 285
    - 1051
    - 1270
    - 1358
    - 1522
    - 1542
    - 1629
    - 2128
    - 2280
    - 2341
  page: !ruby/object:Word
    word: page
    stem: page
    docFrequency: 15.0
    docPositions:
    - 102
    - 272
    - 280
    - 370
    - 776
    - 777
    - 1379
    - 1522
    - 1620
    - 1624
    - 1683
    - 1953
    - 1954
    - 2353
  planning: !ruby/object:Word
    word: planning
    stem: plan
    docFrequency: 5.0
    docPositions:
    - 102
    - 1368
    - 1522
    - 2347
  well: !ruby/object:Word
    word: well
    stem: well
    docFrequency: 28.0
    docPositions:
    - 102
    - 174
    - 421
    - 563
    - 565
    - 568
    - 597
    - 779
    - 904
    - 1016
    - 1140
    - 1338
    - 1349
    - 1387
    - 1522
    - 1559
    - 1718
    - 1812
    - 1815
    - 1836
    - 1956
    - 2036
    - 2107
    - 2189
    - 2327
    - 2334
  leo: !ruby/object:Word
    word: leo
    stem: leo
    docFrequency: 19.0
    docPositions:
    - 103
    - 218
    - 532
    - 602
    - 603
    - 605
    - 640
    - 662
    - 663
    - 1523
    - 1589
    - 1789
    - 1837
    - 1838
    - 1840
    - 1863
    - 1879
    - 1880
  january: !ruby/object:Word
    word: january
    stem: januari
    docFrequency: 3.0
    docPositions:
    - 103
    - 1523
  display: !ruby/object:Word
    word: display
    stem: displai
    docFrequency: 5.0
    docPositions:
    - 104
    - 1139
    - 1524
    - 2188
  february: !ruby/object:Word
    word: february
    stem: februari
    docFrequency: 11.0
    docPositions:
    - 104
    - 1247
    - 1250
    - 1293
    - 1342
    - 1524
    - 2265
    - 2294
    - 2329
  transputer: !ruby/object:Word
    word: transputer
    stem: transput
    docFrequency: 3.0
    docPositions:
    - 104
    - 1524
  formulated: !ruby/object:Word
    word: formulated
    stem: formul
    docFrequency: 3.0
    docPositions:
    - 106
    - 1524
  statement: !ruby/object:Word
    word: statement
    stem: statement
    docFrequency: 3.0
    docPositions:
    - 106
    - 1524
  concerning: !ruby/object:Word
    word: concerning
    stem: concern
    docFrequency: 5.0
    docPositions:
    - 106
    - 1287
    - 1524
    - 2293
  procedures: !ruby/object:Word
    word: procedures
    stem: procedur
    docFrequency: 5.0
    docPositions:
    - 107
    - 1421
    - 1525
    - 2363
  dealing: !ruby/object:Word
    word: dealing
    stem: deal
    docFrequency: 3.0
    docPositions:
    - 107
    - 1525
  historical: !ruby/object:Word
    word: historical
    stem: histor
    docFrequency: 5.0
    docPositions:
    - 107
    - 1071
    - 1525
    - 2144
  interest: !ruby/object:Word
    word: interest
    stem: interest
    docFrequency: 6.0
    docPositions:
    - 107
    - 122
    - 1071
    - 1525
    - 2144
  come: !ruby/object:Word
    word: come
    stem: come
    docFrequency: 5.0
    docPositions:
    - 107
    - 213
    - 1525
    - 1584
  attention: !ruby/object:Word
    word: attention
    stem: attent
    docFrequency: 3.0
    docPositions:
    - 108
    - 1526
  published: !ruby/object:Word
    word: published
    stem: publish
    docFrequency: 3.0
    docPositions:
    - 108
    - 1526
  full: !ruby/object:Word
    word: full
    stem: full
    docFrequency: 10.0
    docPositions:
    - 108
    - 136
    - 776
    - 1389
    - 1526
    - 1535
    - 1953
  below: !ruby/object:Word
    word: below
    stem: below
    docFrequency: 7.0
    docPositions:
    - 108
    - 434
    - 890
    - 1526
    - 1727
    - 2032
  its: !ruby/object:Word
    word: its
    stem: it
    docFrequency: 25.0
    docPositions:
    - 111
    - 171
    - 399
    - 643
    - 673
    - 694
    - 695
    - 738
    - 751
    - 1070
    - 1199
    - 1382
    - 1401
    - 1558
    - 1704
    - 1866
    - 1886
    - 1899
    - 1900
    - 1927
    - 1936
    - 2143
    - 2230
    - 2353
  own: !ruby/object:Word
    word: own
    stem: own
    docFrequency: 12.0
    docPositions:
    - 111
    - 171
    - 232
    - 606
    - 738
    - 1382
    - 1558
    - 1597
    - 1841
    - 1927
    - 2353
  premises: !ruby/object:Word
    word: premises
    stem: premis
    docFrequency: 2.0
    docPositions:
    - 111
  intention: !ruby/object:Word
    word: intention
    stem: intent
    docFrequency: 2.0
    docPositions:
    - 112
  hears: !ruby/object:Word
    word: hears
    stem: hear
    docFrequency: 2.0
    docPositions:
    - 113
  historic: !ruby/object:Word
    word: historic
    stem: histor
    docFrequency: 9.0
    docPositions:
    - 113
    - 1377
    - 1391
    - 1451
    - 1453
    - 1454
    - 2351
    - 2355
  equipment: !ruby/object:Word
    word: equipment
    stem: equip
    docFrequency: 11.0
    docPositions:
    - 113
    - 121
    - 950
    - 1133
    - 1136
    - 1421
    - 2068
    - 2184
    - 2185
    - 2363
  becoming: !ruby/object:Word
    word: becoming
    stem: becom
    docFrequency: 2.0
    docPositions:
    - 113
  available: !ruby/object:Word
    word: available
    stem: avail
    docFrequency: 18.0
    docPositions:
    - 113
    - 170
    - 292
    - 315
    - 420
    - 816
    - 911
    - 979
    - 1389
    - 1557
    - 1634
    - 1649
    - 1717
    - 1980
    - 2039
    - 2087
    - 2353
  attempt: !ruby/object:Word
    word: attempt
    stem: attempt
    docFrequency: 8.0
    docPositions:
    - 114
    - 241
    - 242
    - 291
    - 1600
    - 1601
    - 1633
  suitable: !ruby/object:Word
    word: suitable
    stem: suitabl
    docFrequency: 6.0
    docPositions:
    - 114
    - 722
    - 856
    - 1917
    - 2008
  collections: !ruby/object:Word
    word: collections
    stem: collect
    docFrequency: 5.0
    docPositions:
    - 115
    - 120
    - 121
    - 122
  bletchley: !ruby/object:Word
    word: bletchley
    stem: bletchlei
    docFrequency: 5.0
    docPositions:
    - 116
    - 1398
    - 1420
    - 2362
  park: !ruby/object:Word
    word: park
    stem: park
    docFrequency: 5.0
    docPositions:
    - 116
    - 1398
    - 1420
    - 2362
  trust: !ruby/object:Word
    word: trust
    stem: trust
    docFrequency: 2.0
    docPositions:
    - 116
  south: !ruby/object:Word
    word: south
    stem: south
    docFrequency: 2.0
    docPositions:
    - 117
  kensington: !ruby/object:Word
    word: kensington
    stem: kensington
    docFrequency: 2.0
    docPositions:
    - 117
  alert: !ruby/object:Word
    word: alert
    stem: alert
    docFrequency: 2.0
    docPositions:
    - 120
  availability: !ruby/object:Word
    word: availability
    stem: avail
    docFrequency: 2.0
    docPositions:
    - 120
  surplus: !ruby/object:Word
    word: surplus
    stem: surplu
    docFrequency: 2.0
    docPositions:
    - 120
  unable: !ruby/object:Word
    word: unable
    stem: unabl
    docFrequency: 2.0
    docPositions:
    - 121
  offer: !ruby/object:Word
    word: offer
    stem: offer
    docFrequency: 2.0
    docPositions:
    - 121
  if: !ruby/object:Word
    word: if
    stem: if
    docFrequency: 56.0
    docPositions:
    - 121
    - 283
    - 299
    - 319
    - 381
    - 418
    - 447
    - 582
    - 596
    - 612
    - 626
    - 630
    - 641
    - 655
    - 698
    - 902
    - 915
    - 918
    - 946
    - 1025
    - 1026
    - 1028
    - 1067
    - 1156
    - 1177
    - 1185
    - 1189
    - 1316
    - 1627
    - 1637
    - 1651
    - 1692
    - 1715
    - 1734
    - 1825
    - 1835
    - 1845
    - 1855
    - 1857
    - 1864
    - 1874
    - 1901
    - 2036
    - 2043
    - 2046
    - 2064
    - 2110
    - 2111
    - 2113
    - 2142
    - 2201
    - 2214
    - 2220
    - 2222
    - 2313
  fits: !ruby/object:Word
    word: fits
    stem: fit
    docFrequency: 2.0
    docPositions:
    - 122
  appropriate: !ruby/object:Word
    word: appropriate
    stem: appropri
    docFrequency: 4.0
    docPositions:
    - 122
    - 870
    - 2018
  area: !ruby/object:Word
    word: area
    stem: area
    docFrequency: 6.0
    docPositions:
    - 122
    - 546
    - 1799
  know: !ruby/object:Word
    word: know
    stem: know
    docFrequency: 18.0
    docPositions:
    - 122
    - 162
    - 241
    - 283
    - 324
    - 326
    - 389
    - 433
    - 580
    - 1551
    - 1600
    - 1627
    - 1654
    - 1656
    - 1698
    - 1726
    - 1823
  such: !ruby/object:Word
    word: such
    stem: such
    docFrequency: 32.0
    docPositions:
    - 122
    - 143
    - 170
    - 536
    - 539
    - 681
    - 702
    - 750
    - 819
    - 873
    - 1065
    - 1067
    - 1083
    - 1090
    - 1177
    - 1296
    - 1540
    - 1557
    - 1791
    - 1794
    - 1890
    - 1903
    - 1935
    - 1981
    - 2021
    - 2140
    - 2142
    - 2152
    - 2157
    - 2214
    - 2297
  asked: !ruby/object:Word
    word: asked
    stem: ask
    docFrequency: 2.0
    docPositions:
    - 123
  ensure: !ruby/object:Word
    word: ensure
    stem: ensur
    docFrequency: 4.0
    docPositions:
    - 123
    - 884
    - 2026
  secretary: !ruby/object:Word
    word: secretary
    stem: secretari
    docFrequency: 4.0
    docPositions:
    - 123
    - 1441
    - 2367
  aware: !ruby/object:Word
    word: aware
    stem: awar
    docFrequency: 2.0
    docPositions:
    - 123
  their: !ruby/object:Word
    word: their
    stem: their
    docFrequency: 19.0
    docPositions:
    - 123
    - 203
    - 664
    - 682
    - 1065
    - 1090
    - 1342
    - 1372
    - 1454
    - 1578
    - 1881
    - 1891
    - 2140
    - 2157
    - 2329
    - 2349
  location: !ruby/object:Word
    word: location
    stem: locat
    docFrequency: 4.0
    docPositions:
    - 123
    - 1101
    - 2162
  subject: !ruby/object:Word
    word: subject
    stem: subject
    docFrequency: 4.0
    docPositions:
    - 123
    - 1274
    - 2284
  matter: !ruby/object:Word
    word: matter
    stem: matter
    docFrequency: 4.0
    docPositions:
    - 124
    - 254
    - 1608
  jubileenicholas: !ruby/object:Word
    word: jubileenicholas
    stem: jubileenichola
    docFrequency: 2.0
    docPositions:
    - 126
  now: !ruby/object:Word
    word: now
    stem: now
    docFrequency: 17.0
    docPositions:
    - 127
    - 267
    - 285
    - 386
    - 1129
    - 1320
    - 1355
    - 1362
    - 1528
    - 1617
    - 1629
    - 1695
    - 2180
    - 2315
    - 2338
    - 2343
  marked: !ruby/object:Word
    word: marked
    stem: mark
    docFrequency: 3.0
    docPositions:
    - 127
    - 1528
  series: !ruby/object:Word
    word: series
    stem: seri
    docFrequency: 11.0
    docPositions:
    - 128
    - 490
    - 777
    - 942
    - 1270
    - 1529
    - 1762
    - 1954
    - 2062
    - 2280
  celebrations: !ruby/object:Word
    word: celebrations
    stem: celebr
    docFrequency: 3.0
    docPositions:
    - 128
    - 1529
  week: !ruby/object:Word
    word: week
    stem: week
    docFrequency: 9.0
    docPositions:
    - 128
    - 304
    - 1303
    - 1318
    - 1529
    - 1640
    - 2302
    - 2315
  fell: !ruby/object:Word
    word: fell
    stem: fell
    docFrequency: 5.0
    docPositions:
    - 129
    - 890
    - 1530
    - 2032
  sunday: !ruby/object:Word
    word: sunday
    stem: sundai
    docFrequency: 5.0
    docPositions:
    - 129
    - 1311
    - 1530
    - 2308
  achievement: !ruby/object:Word
    word: achievement
    stem: achiev
    docFrequency: 3.0
    docPositions:
    - 129
    - 1530
  certainly: !ruby/object:Word
    word: certainly
    stem: certainli
    docFrequency: 11.0
    docPositions:
    - 129
    - 242
    - 382
    - 426
    - 470
    - 1530
    - 1601
    - 1693
    - 1721
    - 1751
  designers: !ruby/object:Word
    word: designers
    stem: design
    docFrequency: 3.0
    docPositions:
    - 129
    - 1530
  too: !ruby/object:Word
    word: too
    stem: too
    docFrequency: 17.0
    docPositions:
    - 129
    - 432
    - 683
    - 902
    - 1071
    - 1190
    - 1207
    - 1235
    - 1530
    - 1725
    - 1892
    - 2036
    - 2144
    - 2223
    - 2236
    - 2256
  busy: !ruby/object:Word
    word: busy
    stem: busi
    docFrequency: 5.0
    docPositions:
    - 129
    - 1149
    - 1530
    - 2196
  building: !ruby/object:Word
    word: building
    stem: build
    docFrequency: 7.0
    docPositions:
    - 130
    - 141
    - 171
    - 1531
    - 1538
    - 1558
  getting: !ruby/object:Word
    word: getting
    stem: get
    docFrequency: 7.0
    docPositions:
    - 130
    - 518
    - 1111
    - 1531
    - 1781
    - 2168
  have: !ruby/object:Word
    word: have
    stem: have
    docFrequency: 97.0
    docPositions:
    - 130
    - 141
    - 244
    - 261
    - 306
    - 313
    - 317
    - 320
    - 346
    - 352
    - 408
    - 430
    - 433
    - 462
    - 464
    - 470
    - 471
    - 477
    - 483
    - 506
    - 523
    - 551
    - 575
    - 577
    - 587
    - 614
    - 629
    - 632
    - 636
    - 654
    - 663
    - 681
    - 745
    - 762
    - 914
    - 1207
    - 1321
    - 1322
    - 1326
    - 1328
    - 1329
    - 1337
    - 1339
    - 1355
    - 1356
    - 1357
    - 1362
    - 1531
    - 1538
    - 1602
    - 1613
    - 1642
    - 1647
    - 1649
    - 1652
    - 1670
    - 1673
    - 1709
    - 1723
    - 1726
    - 1745
    - 1747
    - 1751
    - 1752
    - 1756
    - 1759
    - 1773
    - 1784
    - 1802
    - 1820
    - 1822
    - 1828
    - 1847
    - 1856
    - 1859
    - 1861
    - 1873
    - 1880
    - 1890
    - 1932
    - 1945
    - 2042
    - 2236
    - 2316
    - 2317
    - 2319
    - 2321
    - 2322
    - 2326
    - 2328
    - 2338
    - 2339
    - 2340
    - 2343
  produce: !ruby/object:Word
    word: produce
    stem: produc
    docFrequency: 19.0
    docPositions:
    - 130
    - 135
    - 255
    - 626
    - 678
    - 721
    - 797
    - 800
    - 872
    - 1531
    - 1534
    - 1609
    - 1855
    - 1889
    - 1916
    - 1965
    - 1968
    - 2020
  drawings: !ruby/object:Word
    word: drawings
    stem: draw
    docFrequency: 5.0
    docPositions:
    - 130
    - 135
    - 1531
    - 1534
  circuit: !ruby/object:Word
    word: circuit
    stem: circuit
    docFrequency: 41.0
    docPositions:
    - 130
    - 154
    - 802
    - 813
    - 821
    - 823
    - 827
    - 857
    - 905
    - 920
    - 930
    - 931
    - 932
    - 936
    - 940
    - 1055
    - 1075
    - 1087
    - 1153
    - 1531
    - 1547
    - 1970
    - 1977
    - 1983
    - 1985
    - 1987
    - 2009
    - 2037
    - 2048
    - 2054
    - 2055
    - 2056
    - 2058
    - 2060
    - 2132
    - 2146
    - 2154
    - 2198
  diagrams: !ruby/object:Word
    word: diagrams
    stem: diagram
    docFrequency: 3.0
    docPositions:
    - 131
    - 1532
  lack: !ruby/object:Word
    word: lack
    stem: lack
    docFrequency: 3.0
    docPositions:
    - 131
    - 1532
  documentation: !ruby/object:Word
    word: documentation
    stem: document
    docFrequency: 7.0
    docPositions:
    - 131
    - 180
    - 1321
    - 1532
    - 1563
    - 2316
  problem: !ruby/object:Word
    word: problem
    stem: problem
    docFrequency: 41.0
    docPositions:
    - 131
    - 141
    - 175
    - 176
    - 210
    - 268
    - 279
    - 343
    - 618
    - 659
    - 688
    - 736
    - 740
    - 741
    - 758
    - 1350
    - 1352
    - 1357
    - 1358
    - 1360
    - 1532
    - 1538
    - 1560
    - 1561
    - 1583
    - 1618
    - 1623
    - 1667
    - 1849
    - 1878
    - 1895
    - 1925
    - 1927
    - 1928
    - 1941
    - 2335
    - 2337
    - 2340
    - 2341
    - 2343
  dawn: !ruby/object:Word
    word: dawn
    stem: dawn
    docFrequency: 3.0
    docPositions:
    - 131
    - 1532
  age: !ruby/object:Word
    word: age
    stem: ag
    docFrequency: 3.0
    docPositions:
    - 132
    - 1533
  fortunately: !ruby/object:Word
    word: fortunately
    stem: fortun
    docFrequency: 3.0
    docPositions:
    - 134
    - 1533
  dai: !ruby/object:Word
    word: dai
    stem: dai
    docFrequency: 3.0
    docPositions:
    - 134
    - 1533
  edwards: !ruby/object:Word
    word: edwards
    stem: edward
    docFrequency: 3.0
    docPositions:
    - 134
    - 1533
  joined: !ruby/object:Word
    word: joined
    stem: join
    docFrequency: 11.0
    docPositions:
    - 134
    - 225
    - 494
    - 548
    - 685
    - 1533
    - 1592
    - 1765
    - 1799
    - 1894
  months: !ruby/object:Word
    word: months
    stem: month
    docFrequency: 5.0
    docPositions:
    - 134
    - 748
    - 1533
    - 1933
  did: !ruby/object:Word
    word: did
    stem: did
    docFrequency: 37.0
    docPositions:
    - 135
    - 199
    - 214
    - 398
    - 443
    - 458
    - 490
    - 496
    - 523
    - 551
    - 552
    - 565
    - 612
    - 616
    - 677
    - 704
    - 1221
    - 1230
    - 1534
    - 1576
    - 1585
    - 1703
    - 1732
    - 1743
    - 1762
    - 1767
    - 1784
    - 1802
    - 1803
    - 1812
    - 1845
    - 1847
    - 1888
    - 1905
    - 2246
    - 2253
  some: !ruby/object:Word
    word: some
    stem: some
    docFrequency: 41.0
    docPositions:
    - 135
    - 181
    - 271
    - 272
    - 357
    - 447
    - 468
    - 519
    - 536
    - 702
    - 742
    - 745
    - 1050
    - 1110
    - 1260
    - 1294
    - 1338
    - 1359
    - 1363
    - 1459
    - 1534
    - 1564
    - 1619
    - 1620
    - 1676
    - 1734
    - 1749
    - 1782
    - 1791
    - 1903
    - 1929
    - 1932
    - 2127
    - 2167
    - 2272
    - 2295
    - 2327
    - 2342
    - 2344
    - 2375
  detailed: !ruby/object:Word
    word: detailed
    stem: detail
    docFrequency: 5.0
    docPositions:
    - 135
    - 777
    - 1534
    - 1954
  while: !ruby/object:Word
    word: while
    stem: while
    docFrequency: 11.0
    docPositions:
    - 135
    - 832
    - 956
    - 993
    - 1037
    - 1534
    - 1992
    - 2070
    - 2097
    - 2118
  evolving: !ruby/object:Word
    word: evolving
    stem: evolv
    docFrequency: 3.0
    docPositions:
    - 136
    - 1535
  into: !ruby/object:Word
    word: into
    stem: into
    docFrequency: 27.0
    docPositions:
    - 136
    - 139
    - 189
    - 192
    - 193
    - 665
    - 826
    - 845
    - 856
    - 862
    - 870
    - 964
    - 1228
    - 1535
    - 1538
    - 1570
    - 1573
    - 1574
    - 1882
    - 1986
    - 2001
    - 2008
    - 2012
    - 2018
    - 2076
    - 2251
  mark: !ruby/object:Word
    word: mark
    stem: mark
    docFrequency: 5.0
    docPositions:
    - 136
    - 451
    - 1535
    - 1738
  i: !ruby/object:Word
    word: i
    stem: i
    docFrequency: 176.0
    docPositions:
    - 136
    - 138
    - 139
    - 147
    - 244
    - 251
    - 254
    - 255
    - 256
    - 257
    - 259
    - 261
    - 262
    - 267
    - 270
    - 272
    - 275
    - 276
    - 283
    - 288
    - 289
    - 304
    - 309
    - 339
    - 344
    - 347
    - 350
    - 352
    - 364
    - 371
    - 377
    - 378
    - 380
    - 382
    - 389
    - 393
    - 394
    - 405
    - 407
    - 433
    - 434
    - 442
    - 457
    - 460
    - 476
    - 477
    - 483
    - 494
    - 502
    - 506
    - 532
    - 533
    - 548
    - 581
    - 602
    - 608
    - 611
    - 640
    - 646
    - 661
    - 681
    - 685
    - 695
    - 715
    - 770
    - 771
    - 1312
    - 1343
    - 1344
    - 1349
    - 1363
    - 1371
    - 1535
    - 1537
    - 1538
    - 1542
    - 1602
    - 1607
    - 1608
    - 1609
    - 1610
    - 1611
    - 1613
    - 1614
    - 1617
    - 1618
    - 1620
    - 1621
    - 1622
    - 1627
    - 1632
    - 1633
    - 1640
    - 1643
    - 1665
    - 1668
    - 1671
    - 1673
    - 1679
    - 1684
    - 1688
    - 1689
    - 1691
    - 1693
    - 1698
    - 1700
    - 1701
    - 1706
    - 1708
    - 1726
    - 1727
    - 1731
    - 1742
    - 1745
    - 1755
    - 1756
    - 1759
    - 1765
    - 1771
    - 1773
    - 1789
    - 1790
    - 1799
    - 1824
    - 1837
    - 1841
    - 1844
    - 1863
    - 1867
    - 1878
    - 1890
    - 1894
    - 1900
    - 1912
    - 1949
    - 1950
    - 2309
    - 2330
    - 2331
    - 2334
    - 2344
    - 2348
  notebook: !ruby/object:Word
    word: notebook
    stem: notebook
    docFrequency: 17.0
    docPositions:
    - 137
    - 251
    - 255
    - 271
    - 280
    - 296
    - 370
    - 377
    - 1536
    - 1607
    - 1609
    - 1619
    - 1624
    - 1634
    - 1683
    - 1688
  survived: !ruby/object:Word
    word: survived
    stem: surviv
    docFrequency: 3.0
    docPositions:
    - 137
    - 1536
  chris: !ruby/object:Word
    word: chris
    stem: chri
    docFrequency: 13.0
    docPositions:
    - 137
    - 142
    - 235
    - 286
    - 1372
    - 1441
    - 1536
    - 1539
    - 1598
    - 1630
    - 2349
    - 2367
  burton: !ruby/object:Word
    word: burton
    stem: burton
    docFrequency: 12.0
    docPositions:
    - 137
    - 235
    - 286
    - 1290
    - 1372
    - 1441
    - 1536
    - 1598
    - 1630
    - 2349
    - 2367
  told: !ruby/object:Word
    word: told
    stem: told
    docFrequency: 5.0
    docPositions:
    - 137
    - 173
    - 1536
    - 1558
  packed: !ruby/object:Word
    word: packed
    stem: pack
    docFrequency: 5.0
    docPositions:
    - 137
    - 1228
    - 1536
    - 2251
  mainly: !ruby/object:Word
    word: mainly
    stem: mainli
    docFrequency: 3.0
    docPositions:
    - 138
    - 1537
  alec: !ruby/object:Word
    word: alec
    stem: alec
    docFrequency: 7.0
    docPositions:
    - 138
    - 208
    - 225
    - 1537
    - 1581
    - 1592
  robinson: !ruby/object:Word
    word: robinson
    stem: robinson
    docFrequency: 9.0
    docPositions:
    - 138
    - 208
    - 213
    - 225
    - 1537
    - 1581
    - 1584
    - 1592
  photographs: !ruby/object:Word
    word: photographs
    stem: photograph
    docFrequency: 3.0
    docPositions:
    - 138
    - 1537
  scanned: !ruby/object:Word
    word: scanned
    stem: scan
    docFrequency: 3.0
    docPositions:
    - 139
    - 1538
  out: !ruby/object:Word
    word: out
    stem: out
    docFrequency: 53.0
    docPositions:
    - 139
    - 189
    - 259
    - 262
    - 270
    - 283
    - 288
    - 318
    - 321
    - 432
    - 468
    - 562
    - 627
    - 630
    - 737
    - 791
    - 857
    - 906
    - 924
    - 1064
    - 1177
    - 1232
    - 1321
    - 1322
    - 1358
    - 1538
    - 1570
    - 1611
    - 1614
    - 1618
    - 1627
    - 1632
    - 1650
    - 1653
    - 1725
    - 1749
    - 1811
    - 1856
    - 1857
    - 1926
    - 1960
    - 2009
    - 2038
    - 2050
    - 2139
    - 2214
    - 2255
    - 2316
    - 2317
    - 2341
  dimensions: !ruby/object:Word
    word: dimensions
    stem: dimens
    docFrequency: 3.0
    docPositions:
    - 139
    - 1538
  accurately: !ruby/object:Word
    word: accurately
    stem: accur
    docFrequency: 3.0
    docPositions:
    - 139
    - 1538
  components: !ruby/object:Word
    word: components
    stem: compon
    docFrequency: 5.0
    docPositions:
    - 141
    - 148
    - 1538
    - 1543
  obsolete: !ruby/object:Word
    word: obsolete
    stem: obsolet
    docFrequency: 3.0
    docPositions:
    - 142
    - 1539
  many: !ruby/object:Word
    word: many
    stem: mani
    docFrequency: 17.0
    docPositions:
    - 142
    - 173
    - 529
    - 1044
    - 1207
    - 1281
    - 1356
    - 1393
    - 1539
    - 1558
    - 1788
    - 2123
    - 2236
    - 2289
    - 2339
    - 2356
  despite: !ruby/object:Word
    word: despite
    stem: despit
    docFrequency: 3.0
    docPositions:
    - 142
    - 1539
  dealers: !ruby/object:Word
    word: dealers
    stem: dealer
    docFrequency: 3.0
    docPositions:
    - 143
    - 1540
  maintain: !ruby/object:Word
    word: maintain
    stem: maintain
    docFrequency: 3.0
    docPositions:
    - 143
    - 1540
  stocks: !ruby/object:Word
    word: stocks
    stem: stock
    docFrequency: 3.0
    docPositions:
    - 143
    - 1540
  things: !ruby/object:Word
    word: things
    stem: thing
    docFrequency: 19.0
    docPositions:
    - 143
    - 517
    - 521
    - 574
    - 609
    - 744
    - 745
    - 1109
    - 1349
    - 1540
    - 1780
    - 1784
    - 1819
    - 1842
    - 1931
    - 1932
    - 2166
    - 2334
  thermionic: !ruby/object:Word
    word: thermionic
    stem: thermion
    docFrequency: 3.0
    docPositions:
    - 143
    - 1540
  valves: !ruby/object:Word
    word: valves
    stem: valv
    docFrequency: 21.0
    docPositions:
    - 143
    - 866
    - 873
    - 1190
    - 1223
    - 1225
    - 1226
    - 1228
    - 1350
    - 1540
    - 2014
    - 2021
    - 2223
    - 2246
    - 2248
    - 2249
    - 2251
    - 2335
  vintage: !ruby/object:Word
    word: vintage
    stem: vintag
    docFrequency: 3.0
    docPositions:
    - 144
    - 1541
  cathode: !ruby/object:Word
    word: cathode
    stem: cathod
    docFrequency: 5.0
    docPositions:
    - 144
    - 164
    - 1541
    - 1553
  ray: !ruby/object:Word
    word: ray
    stem: rai
    docFrequency: 5.0
    docPositions:
    - 144
    - 164
    - 1541
    - 1553
  tubes: !ruby/object:Word
    word: tubes
    stem: tube
    docFrequency: 3.0
    docPositions:
    - 144
    - 1541
  added: !ruby/object:Word
    word: added
    stem: ad
    docFrequency: 15.0
    docPositions:
    - 146
    - 261
    - 868
    - 1026
    - 1027
    - 1029
    - 1294
    - 1541
    - 1613
    - 2016
    - 2111
    - 2112
    - 2114
    - 2295
  pushbuttons: !ruby/object:Word
    word: pushbuttons
    stem: pushbutton
    docFrequency: 3.0
    docPositions:
    - 146
    - 1541
  originally: !ruby/object:Word
    word: originally
    stem: origin
    docFrequency: 5.0
    docPositions:
    - 146
    - 794
    - 1541
    - 1963
  spitfires: !ruby/object:Word
    word: spitfires
    stem: spitfir
    docFrequency: 3.0
    docPositions:
    - 147
    - 1542
  they: !ruby/object:Word
    word: they
    stem: thei
    docFrequency: 77.0
    docPositions:
    - 147
    - 165
    - 206
    - 374
    - 381
    - 420
    - 477
    - 506
    - 514
    - 515
    - 518
    - 520
    - 572
    - 608
    - 609
    - 616
    - 617
    - 682
    - 706
    - 717
    - 720
    - 730
    - 745
    - 762
    - 771
    - 772
    - 793
    - 814
    - 911
    - 1025
    - 1027
    - 1045
    - 1046
    - 1084
    - 1230
    - 1315
    - 1542
    - 1554
    - 1581
    - 1687
    - 1692
    - 1717
    - 1756
    - 1773
    - 1779
    - 1780
    - 1781
    - 1783
    - 1817
    - 1841
    - 1842
    - 1847
    - 1848
    - 1891
    - 1907
    - 1914
    - 1915
    - 1921
    - 1932
    - 1945
    - 1950
    - 1951
    - 1962
    - 1978
    - 2039
    - 2110
    - 2112
    - 2124
    - 2125
    - 2153
    - 2253
    - 2312
  cost: !ruby/object:Word
    word: cost
    stem: cost
    docFrequency: 13.0
    docPositions:
    - 147
    - 550
    - 589
    - 674
    - 963
    - 1542
    - 1801
    - 1830
    - 1887
    - 2075
  got: !ruby/object:Word
    word: got
    stem: got
    docFrequency: 27.0
    docPositions:
    - 147
    - 165
    - 196
    - 204
    - 284
    - 475
    - 502
    - 506
    - 561
    - 570
    - 652
    - 1326
    - 1347
    - 1542
    - 1554
    - 1575
    - 1579
    - 1628
    - 1754
    - 1771
    - 1773
    - 1810
    - 1815
    - 1871
    - 2319
    - 2332
  them: !ruby/object:Word
    word: them
    stem: them
    docFrequency: 39.0
    docPositions:
    - 147
    - 149
    - 200
    - 272
    - 284
    - 319
    - 514
    - 573
    - 679
    - 693
    - 704
    - 778
    - 821
    - 913
    - 1062
    - 1080
    - 1196
    - 1224
    - 1542
    - 1544
    - 1577
    - 1620
    - 1628
    - 1651
    - 1779
    - 1818
    - 1890
    - 1898
    - 1905
    - 1955
    - 1983
    - 2041
    - 2137
    - 2149
    - 2227
    - 2247
  standard: !ruby/object:Word
    word: standard
    stem: standard
    docFrequency: 3.0
    docPositions:
    - 148
    - 1543
  post: !ruby/object:Word
    word: post
    stem: post
    docFrequency: 7.0
    docPositions:
    - 148
    - 199
    - 289
    - 1543
    - 1576
    - 1633
  office: !ruby/object:Word
    word: office
    stem: offic
    docFrequency: 3.0
    docPositions:
    - 148
    - 1543
  steel: !ruby/object:Word
    word: steel
    stem: steel
    docFrequency: 3.0
    docPositions:
    - 148
    - 1543
  racks: !ruby/object:Word
    word: racks
    stem: rack
    docFrequency: 3.0
    docPositions:
    - 148
    - 1543
  presented: !ruby/object:Word
    word: presented
    stem: present
    docFrequency: 5.0
    docPositions:
    - 149
    - 730
    - 1544
    - 1921
  difficulty: !ruby/object:Word
    word: difficulty
    stem: difficulti
    docFrequency: 5.0
    docPositions:
    - 149
    - 744
    - 1544
    - 1931
  anything: !ruby/object:Word
    word: anything
    stem: anyth
    docFrequency: 7.0
    docPositions:
    - 149
    - 696
    - 699
    - 1544
    - 1901
    - 1902
  eventually: !ruby/object:Word
    word: eventually
    stem: eventu
    docFrequency: 7.0
    docPositions:
    - 149
    - 605
    - 816
    - 1544
    - 1840
    - 1980
  came: !ruby/object:Word
    word: came
    stem: came
    docFrequency: 17.0
    docPositions:
    - 149
    - 208
    - 529
    - 532
    - 591
    - 696
    - 730
    - 1071
    - 1544
    - 1581
    - 1788
    - 1789
    - 1832
    - 1901
    - 1921
    - 2144
  bottom: !ruby/object:Word
    word: bottom
    stem: bottom
    docFrequency: 3.0
    docPositions:
    - 150
    - 1545
  shropshire: !ruby/object:Word
    word: shropshire
    stem: shropshir
    docFrequency: 3.0
    docPositions:
    - 150
    - 1545
  garden: !ruby/object:Word
    word: garden
    stem: garden
    docFrequency: 3.0
    docPositions:
    - 150
    - 1545
  result: !ruby/object:Word
    word: result
    stem: result
    docFrequency: 17.0
    docPositions:
    - 152
    - 167
    - 347
    - 853
    - 1108
    - 1155
    - 1173
    - 1272
    - 1545
    - 1556
    - 1671
    - 2007
    - 2165
    - 2200
    - 2212
    - 2282
  highly: !ruby/object:Word
    word: highly
    stem: highli
    docFrequency: 3.0
    docPositions:
    - 152
    - 1545
  praised: !ruby/object:Word
    word: praised
    stem: prais
    docFrequency: 3.0
    docPositions:
    - 152
    - 1545
  described: !ruby/object:Word
    word: described
    stem: describ
    docFrequency: 9.0
    docPositions:
    - 153
    - 185
    - 223
    - 958
    - 1546
    - 1568
    - 1592
    - 2072
  not: !ruby/object:Word
    word: not
    stem: not
    docFrequency: 97.0
    docPositions:
    - 153
    - 154
    - 167
    - 174
    - 208
    - 213
    - 315
    - 320
    - 326
    - 352
    - 398
    - 414
    - 422
    - 432
    - 470
    - 483
    - 497
    - 501
    - 509
    - 520
    - 577
    - 581
    - 583
    - 603
    - 648
    - 652
    - 669
    - 738
    - 750
    - 764
    - 780
    - 814
    - 828
    - 852
    - 948
    - 983
    - 1070
    - 1108
    - 1132
    - 1149
    - 1185
    - 1221
    - 1230
    - 1309
    - 1310
    - 1312
    - 1316
    - 1360
    - 1546
    - 1547
    - 1556
    - 1559
    - 1581
    - 1584
    - 1649
    - 1652
    - 1656
    - 1673
    - 1703
    - 1713
    - 1719
    - 1725
    - 1751
    - 1759
    - 1768
    - 1770
    - 1774
    - 1783
    - 1822
    - 1824
    - 1826
    - 1838
    - 1869
    - 1871
    - 1884
    - 1927
    - 1935
    - 1945
    - 1957
    - 1978
    - 1988
    - 2006
    - 2066
    - 2089
    - 2143
    - 2165
    - 2183
    - 2196
    - 2220
    - 2246
    - 2253
    - 2306
    - 2307
    - 2309
    - 2313
    - 2343
  only: !ruby/object:Word
    word: only
    stem: onli
    docFrequency: 43.0
    docPositions:
    - 153
    - 155
    - 208
    - 305
    - 573
    - 580
    - 616
    - 652
    - 813
    - 835
    - 841
    - 850
    - 978
    - 1057
    - 1082
    - 1093
    - 1094
    - 1185
    - 1217
    - 1227
    - 1239
    - 1546
    - 1548
    - 1581
    - 1641
    - 1818
    - 1823
    - 1847
    - 1871
    - 1977
    - 1993
    - 1997
    - 2004
    - 2086
    - 2134
    - 2151
    - 2158
    - 2159
    - 2220
    - 2242
    - 2250
    - 2260
  identical: !ruby/object:Word
    word: identical
    stem: ident
    docFrequency: 7.0
    docPositions:
    - 153
    - 1075
    - 1546
    - 2146
  appearance: !ruby/object:Word
    word: appearance
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 153
    - 1546
  every: !ruby/object:Word
    word: every
    stem: everi
    docFrequency: 21.0
    docPositions:
    - 154
    - 356
    - 524
    - 532
    - 772
    - 868
    - 1114
    - 1224
    - 1547
    - 1675
    - 1785
    - 1789
    - 1951
    - 2016
    - 2169
    - 2247
  wire: !ruby/object:Word
    word: wire
    stem: wire
    docFrequency: 3.0
    docPositions:
    - 154
    - 1547
  would: !ruby/object:Word
    word: would
    stem: would
    docFrequency: 47.0
    docPositions:
    - 154
    - 234
    - 261
    - 283
    - 305
    - 315
    - 381
    - 459
    - 470
    - 471
    - 485
    - 595
    - 663
    - 745
    - 752
    - 768
    - 816
    - 949
    - 1021
    - 1207
    - 1309
    - 1357
    - 1371
    - 1547
    - 1597
    - 1613
    - 1627
    - 1641
    - 1649
    - 1692
    - 1744
    - 1751
    - 1752
    - 1761
    - 1834
    - 1880
    - 1932
    - 1937
    - 1949
    - 1980
    - 2067
    - 2108
    - 2236
    - 2306
    - 2340
    - 2348
  able: !ruby/object:Word
    word: able
    stem: abl
    docFrequency: 13.0
    docPositions:
    - 154
    - 259
    - 577
    - 1186
    - 1360
    - 1364
    - 1547
    - 1611
    - 1822
    - 2221
    - 2343
    - 2345
  differentiated: !ruby/object:Word
    word: differentiated
    stem: differenti
    docFrequency: 3.0
    docPositions:
    - 154
    - 1547
  baby: !ruby/object:Word
    word: baby
    stem: babi
    docFrequency: 7.0
    docPositions:
    - 155
    - 174
    - 1374
    - 1548
    - 1559
    - 2351
  any: !ruby/object:Word
    word: any
    stem: ani
    docFrequency: 13.0
    docPositions:
    - 155
    - 476
    - 572
    - 771
    - 1101
    - 1548
    - 1755
    - 1817
    - 1950
    - 2162
  scientist: !ruby/object:Word
    word: scientist
    stem: scientist
    docFrequency: 3.0
    docPositions:
    - 155
    - 1548
  reservation: !ruby/object:Word
    word: reservation
    stem: reserv
    docFrequency: 3.0
    docPositions:
    - 155
    - 1548
  much: !ruby/object:Word
    word: much
    stem: much
    docFrequency: 33.0
    docPositions:
    - 156
    - 515
    - 529
    - 534
    - 551
    - 567
    - 589
    - 590
    - 591
    - 712
    - 923
    - 1110
    - 1190
    - 1207
    - 1549
    - 1780
    - 1788
    - 1791
    - 1802
    - 1814
    - 1830
    - 1831
    - 1832
    - 1911
    - 2049
    - 2167
    - 2223
    - 2236
  cleaner: !ruby/object:Word
    word: cleaner
    stem: cleaner
    docFrequency: 3.0
    docPositions:
    - 156
    - 1549
  recalled: !ruby/object:Word
    word: recalled
    stem: recal
    docFrequency: 7.0
    docPositions:
    - 158
    - 214
    - 225
    - 1549
    - 1585
    - 1592
  separate: !ruby/object:Word
    word: separate
    stem: separ
    docFrequency: 9.0
    docPositions:
    - 158
    - 497
    - 587
    - 858
    - 1549
    - 1768
    - 1828
    - 2010
  most: !ruby/object:Word
    word: most
    stem: most
    docFrequency: 17.0
    docPositions:
    - 162
    - 282
    - 287
    - 517
    - 555
    - 695
    - 948
    - 1279
    - 1551
    - 1626
    - 1631
    - 1780
    - 1804
    - 1900
    - 2066
    - 2287
  readers: !ruby/object:Word
    word: readers
    stem: reader
    docFrequency: 15.0
    docPositions:
    - 162
    - 234
    - 557
    - 786
    - 1393
    - 1413
    - 1433
    - 1551
    - 1597
    - 1806
    - 1959
    - 2356
    - 2360
    - 2365
  prime: !ruby/object:Word
    word: prime
    stem: prime
    docFrequency: 5.0
    docPositions:
    - 162
    - 476
    - 1551
    - 1755
  focus: !ruby/object:Word
    word: focus
    stem: focu
    docFrequency: 3.0
    docPositions:
    - 162
    - 1551
  research: !ruby/object:Word
    word: research
    stem: research
    docFrequency: 6.0
    docPositions:
    - 162
    - 201
    - 1454
    - 1551
    - 1578
  conducted: !ruby/object:Word
    word: conducted
    stem: conduct
    docFrequency: 5.0
    docPositions:
    - 162
    - 1196
    - 1551
    - 2227
  immediate: !ruby/object:Word
    word: immediate
    stem: immedi
    docFrequency: 3.0
    docPositions:
    - 163
    - 1552
  postwar: !ruby/object:Word
    word: postwar
    stem: postwar
    docFrequency: 5.0
    docPositions:
    - 163
    - 211
    - 1552
    - 1584
  development: !ruby/object:Word
    word: development
    stem: develop
    docFrequency: 23.0
    docPositions:
    - 164
    - 195
    - 341
    - 492
    - 618
    - 694
    - 709
    - 727
    - 1071
    - 1250
    - 1269
    - 1553
    - 1574
    - 1667
    - 1764
    - 1849
    - 1899
    - 1908
    - 1920
    - 2144
    - 2265
    - 2279
  tube: !ruby/object:Word
    word: tube
    stem: tube
    docFrequency: 9.0
    docPositions:
    - 164
    - 196
    - 397
    - 1307
    - 1553
    - 1575
    - 1702
    - 2306
  memory: !ruby/object:Word
    word: memory
    stem: memori
    docFrequency: 21.0
    docPositions:
    - 164
    - 549
    - 551
    - 668
    - 671
    - 673
    - 674
    - 675
    - 705
    - 1130
    - 1553
    - 1800
    - 1802
    - 1883
    - 1886
    - 1887
    - 1888
    - 1906
    - 2181
  device: !ruby/object:Word
    word: device
    stem: devic
    docFrequency: 7.0
    docPositions:
    - 164
    - 558
    - 771
    - 1553
    - 1807
    - 1950
  point: !ruby/object:Word
    word: point
    stem: point
    docFrequency: 21.0
    docPositions:
    - 165
    - 334
    - 454
    - 472
    - 486
    - 501
    - 812
    - 1178
    - 1217
    - 1554
    - 1662
    - 1741
    - 1753
    - 1762
    - 1770
    - 1976
    - 2215
    - 2242
  could: !ruby/object:Word
    word: could
    stem: could
    docFrequency: 105.0
    docPositions:
    - 165
    - 167
    - 206
    - 257
    - 320
    - 329
    - 346
    - 408
    - 449
    - 512
    - 514
    - 515
    - 529
    - 591
    - 612
    - 621
    - 636
    - 641
    - 673
    - 699
    - 725
    - 771
    - 820
    - 823
    - 830
    - 873
    - 881
    - 906
    - 947
    - 961
    - 986
    - 994
    - 1032
    - 1041
    - 1066
    - 1074
    - 1076
    - 1084
    - 1122
    - 1126
    - 1136
    - 1148
    - 1157
    - 1184
    - 1190
    - 1202
    - 1237
    - 1297
    - 1310
    - 1367
    - 1554
    - 1556
    - 1581
    - 1611
    - 1652
    - 1659
    - 1670
    - 1709
    - 1736
    - 1777
    - 1779
    - 1780
    - 1788
    - 1832
    - 1845
    - 1852
    - 1861
    - 1864
    - 1886
    - 1902
    - 1918
    - 1950
    - 1982
    - 1985
    - 1990
    - 2021
    - 2023
    - 2038
    - 2065
    - 2073
    - 2090
    - 2098
    - 2115
    - 2120
    - 2141
    - 2145
    - 2147
    - 2153
    - 2177
    - 2179
    - 2185
    - 2195
    - 2202
    - 2219
    - 2223
    - 2231
    - 2258
    - 2298
    - 2307
    - 2346
  store: !ruby/object:Word
    word: store
    stem: store
    docFrequency: 65.0
    docPositions:
    - 165
    - 360
    - 462
    - 914
    - 950
    - 956
    - 957
    - 964
    - 974
    - 978
    - 1040
    - 1050
    - 1052
    - 1060
    - 1064
    - 1069
    - 1073
    - 1080
    - 1093
    - 1101
    - 1119
    - 1129
    - 1131
    - 1133
    - 1309
    - 1310
    - 1312
    - 1313
    - 1322
    - 1554
    - 1677
    - 1745
    - 2042
    - 2068
    - 2070
    - 2071
    - 2076
    - 2082
    - 2086
    - 2119
    - 2127
    - 2129
    - 2135
    - 2139
    - 2142
    - 2144
    - 2149
    - 2158
    - 2162
    - 2174
    - 2180
    - 2182
    - 2184
    - 2306
    - 2307
    - 2309
    - 2310
    - 2317
  bits: !ruby/object:Word
    word: bits
    stem: bit
    docFrequency: 31.0
    docPositions:
    - 165
    - 391
    - 764
    - 861
    - 961
    - 962
    - 973
    - 974
    - 989
    - 1004
    - 1009
    - 1025
    - 1088
    - 1089
    - 1227
    - 1554
    - 1698
    - 1945
    - 2011
    - 2073
    - 2074
    - 2081
    - 2082
    - 2093
    - 2104
    - 2105
    - 2110
    - 2155
    - 2156
    - 2250
  period: !ruby/object:Word
    word: period
    stem: period
    docFrequency: 37.0
    docPositions:
    - 165
    - 364
    - 375
    - 381
    - 387
    - 389
    - 392
    - 393
    - 398
    - 427
    - 436
    - 439
    - 445
    - 449
    - 460
    - 482
    - 1554
    - 1679
    - 1688
    - 1692
    - 1696
    - 1698
    - 1699
    - 1700
    - 1703
    - 1722
    - 1727
    - 1730
    - 1734
    - 1736
    - 1745
    - 1758
  several: !ruby/object:Word
    word: several
    stem: sever
    docFrequency: 13.0
    docPositions:
    - 166
    - 191
    - 851
    - 941
    - 1125
    - 1362
    - 1555
    - 1572
    - 2005
    - 2061
    - 2178
    - 2343
  hours: !ruby/object:Word
    word: hours
    stem: hour
    docFrequency: 5.0
    docPositions:
    - 166
    - 1328
    - 1555
    - 2321
  stage: !ruby/object:Word
    word: stage
    stem: stage
    docFrequency: 7.0
    docPositions:
    - 166
    - 204
    - 761
    - 1555
    - 1579
    - 1944
  said: !ruby/object:Word
    word: said
    stem: said
    docFrequency: 13.0
    docPositions:
    - 166
    - 173
    - 174
    - 405
    - 602
    - 705
    - 1555
    - 1558
    - 1559
    - 1706
    - 1837
    - 1906
  demonstrated: !ruby/object:Word
    word: demonstrated
    stem: demonstr
    docFrequency: 3.0
    docPositions:
    - 166
    - 1555
  letters: !ruby/object:Word
    word: letters
    stem: letter
    docFrequency: 7.0
    docPositions:
    - 166
    - 627
    - 631
    - 1555
    - 1856
    - 1858
  typed: !ruby/object:Word
    word: typed
    stem: type
    docFrequency: 5.0
    docPositions:
    - 167
    - 319
    - 1556
    - 1651
  via: !ruby/object:Word
    word: via
    stem: via
    docFrequency: 11.0
    docPositions:
    - 167
    - 800
    - 801
    - 857
    - 1414
    - 1556
    - 1968
    - 1969
    - 2009
    - 2361
  keyboard: !ruby/object:Word
    word: keyboard
    stem: keyboard
    docFrequency: 3.0
    docPositions:
    - 167
    - 1556
  digits: !ruby/object:Word
    word: digits
    stem: digit
    docFrequency: 7.0
    docPositions:
    - 167
    - 549
    - 851
    - 1556
    - 1800
    - 2005
  arrived: !ruby/object:Word
    word: arrived
    stem: arriv
    docFrequency: 5.0
    docPositions:
    - 167
    - 348
    - 1556
    - 1672
  needed: !ruby/object:Word
    word: needed
    stem: need
    docFrequency: 25.0
    docPositions:
    - 168
    - 184
    - 315
    - 419
    - 432
    - 610
    - 706
    - 813
    - 872
    - 921
    - 955
    - 1203
    - 1557
    - 1567
    - 1649
    - 1716
    - 1725
    - 1843
    - 1907
    - 1977
    - 2020
    - 2049
    - 2069
    - 2232
  thing: !ruby/object:Word
    word: thing
    stem: thing
    docFrequency: 7.0
    docPositions:
    - 170
    - 753
    - 756
    - 1557
    - 1938
    - 1939
  shops: !ruby/object:Word
    word: shops
    stem: shop
    docFrequency: 3.0
    docPositions:
    - 170
    - 1557
  build: !ruby/object:Word
    word: build
    stem: build
    docFrequency: 5.0
    docPositions:
    - 171
    - 750
    - 1558
    - 1935
  reason: !ruby/object:Word
    word: reason
    stem: reason
    docFrequency: 13.0
    docPositions:
    - 171
    - 538
    - 542
    - 570
    - 592
    - 669
    - 1558
    - 1793
    - 1797
    - 1815
    - 1833
    - 1884
  story: !ruby/object:Word
    word: story
    stem: stori
    docFrequency: 5.0
    docPositions:
    - 173
    - 174
    - 1558
    - 1559
  times: !ruby/object:Word
    word: times
    stem: time
    docFrequency: 31.0
    docPositions:
    - 173
    - 373
    - 375
    - 380
    - 433
    - 436
    - 590
    - 649
    - 673
    - 918
    - 964
    - 1091
    - 1126
    - 1230
    - 1362
    - 1558
    - 1686
    - 1688
    - 1691
    - 1726
    - 1727
    - 1831
    - 1870
    - 1886
    - 2046
    - 2076
    - 2158
    - 2179
    - 2253
    - 2343
  perhaps: !ruby/object:Word
    word: perhaps
    stem: perhap
    docFrequency: 3.0
    docPositions:
    - 174
    - 1559
  known: !ruby/object:Word
    word: known
    stem: known
    docFrequency: 9.0
    docPositions:
    - 174
    - 263
    - 731
    - 1129
    - 1559
    - 1615
    - 1922
    - 2180
  highest: !ruby/object:Word
    word: highest
    stem: highest
    docFrequency: 9.0
    docPositions:
    - 175
    - 245
    - 282
    - 355
    - 1560
    - 1603
    - 1626
    - 1674
  factor: !ruby/object:Word
    word: factor
    stem: factor
    docFrequency: 19.0
    docPositions:
    - 176
    - 220
    - 245
    - 256
    - 260
    - 282
    - 355
    - 413
    - 1216
    - 1561
    - 1589
    - 1603
    - 1610
    - 1612
    - 1626
    - 1674
    - 1712
    - 2241
  integer: !ruby/object:Word
    word: integer
    stem: integ
    docFrequency: 5.0
    docPositions:
    - 176
    - 356
    - 1561
    - 1675
  selected: !ruby/object:Word
    word: selected
    stem: select
    docFrequency: 16.0
    docPositions:
    - 176
    - 856
    - 977
    - 1055
    - 1088
    - 1101
    - 1146
    - 1387
    - 1561
    - 2008
    - 2085
    - 2132
    - 2155
    - 2162
    - 2193
  because: !ruby/object:Word
    word: because
    stem: becaus
    docFrequency: 41.0
    docPositions:
    - 176
    - 314
    - 318
    - 373
    - 411
    - 420
    - 566
    - 575
    - 581
    - 608
    - 616
    - 662
    - 669
    - 695
    - 710
    - 967
    - 968
    - 1146
    - 1198
    - 1561
    - 1648
    - 1650
    - 1686
    - 1710
    - 1717
    - 1813
    - 1820
    - 1824
    - 1841
    - 1847
    - 1879
    - 1884
    - 1900
    - 1909
    - 2077
    - 2078
    - 2193
    - 2229
  seven: !ruby/object:Word
    word: seven
    stem: seven
    docFrequency: 5.0
    docPositions:
    - 177
    - 693
    - 1562
    - 1898
  instructions: !ruby/object:Word
    word: instructions
    stem: instruct
    docFrequency: 54.0
    docPositions:
    - 177
    - 245
    - 257
    - 262
    - 263
    - 292
    - 305
    - 318
    - 324
    - 329
    - 338
    - 346
    - 349
    - 406
    - 409
    - 412
    - 415
    - 418
    - 427
    - 428
    - 436
    - 841
    - 1562
    - 1603
    - 1611
    - 1614
    - 1615
    - 1634
    - 1641
    - 1650
    - 1654
    - 1659
    - 1664
    - 1670
    - 1672
    - 1707
    - 1710
    - 1711
    - 1714
    - 1715
    - 1722
    - 1723
    - 1727
    - 1997
  combinations: !ruby/object:Word
    word: combinations
    stem: combin
    docFrequency: 3.0
    docPositions:
    - 177
    - 1562
  mathematical: !ruby/object:Word
    word: mathematical
    stem: mathemat
    docFrequency: 3.0
    docPositions:
    - 178
    - 1563
  significance: !ruby/object:Word
    word: significance
    stem: signific
    docFrequency: 5.0
    docPositions:
    - 178
    - 1349
    - 1563
    - 2334
  understood: !ruby/object:Word
    word: understood
    stem: understood
    docFrequency: 7.0
    docPositions:
    - 178
    - 190
    - 666
    - 1563
    - 1571
    - 1883
  contemporary: !ruby/object:Word
    word: contemporary
    stem: contemporari
    docFrequency: 7.0
    docPositions:
    - 180
    - 240
    - 266
    - 1563
    - 1599
    - 1616
  extant: !ruby/object:Word
    word: extant
    stem: extant
    docFrequency: 5.0
    docPositions:
    - 180
    - 250
    - 1563
    - 1606
  actually: !ruby/object:Word
    word: actually
    stem: actual
    docFrequency: 7.0
    docPositions:
    - 181
    - 185
    - 190
    - 1564
    - 1568
    - 1571
  before: !ruby/object:Word
    word: before
    stem: befor
    docFrequency: 25.0
    docPositions:
    - 181
    - 182
    - 183
    - 203
    - 205
    - 373
    - 443
    - 469
    - 772
    - 917
    - 1316
    - 1344
    - 1564
    - 1565
    - 1566
    - 1578
    - 1580
    - 1686
    - 1732
    - 1750
    - 1951
    - 2045
    - 2313
    - 2331
  train: !ruby/object:Word
    word: train
    stem: train
    docFrequency: 5.0
    docPositions:
    - 181
    - 683
    - 1564
    - 1892
  going: !ruby/object:Word
    word: going
    stem: go
    docFrequency: 23.0
    docPositions:
    - 181
    - 197
    - 500
    - 501
    - 503
    - 507
    - 583
    - 710
    - 748
    - 852
    - 1349
    - 1564
    - 1576
    - 1769
    - 1770
    - 1772
    - 1774
    - 1826
    - 1909
    - 1933
    - 2006
    - 2334
  dewsbury: !ruby/object:Word
    word: dewsbury
    stem: dewsburi
    docFrequency: 3.0
    docPositions:
    - 182
    - 1565
  living: !ruby/object:Word
    word: living
    stem: live
    docFrequency: 3.0
    docPositions:
    - 182
    - 1565
  developed: !ruby/object:Word
    word: developed
    stem: develop
    docFrequency: 21.0
    docPositions:
    - 182
    - 183
    - 735
    - 772
    - 794
    - 911
    - 1069
    - 1255
    - 1259
    - 1286
    - 1565
    - 1566
    - 1924
    - 1951
    - 1963
    - 2039
    - 2142
    - 2269
    - 2271
    - 2292
  wrote: !ruby/object:Word
    word: wrote
    stem: wrote
    docFrequency: 9.0
    docPositions:
    - 183
    - 245
    - 309
    - 350
    - 1566
    - 1603
    - 1643
    - 1673
  down: !ruby/object:Word
    word: down
    stem: down
    docFrequency: 19.0
    docPositions:
    - 183
    - 550
    - 627
    - 631
    - 633
    - 655
    - 749
    - 926
    - 1242
    - 1566
    - 1801
    - 1856
    - 1858
    - 1860
    - 1874
    - 1934
    - 2052
    - 2261
  listing: !ruby/object:Word
    word: listing
    stem: list
    docFrequency: 3.0
    docPositions:
    - 184
    - 1567
  around: !ruby/object:Word
    word: around
    stem: around
    docFrequency: 15.0
    docPositions:
    - 184
    - 543
    - 714
    - 754
    - 764
    - 815
    - 1303
    - 1567
    - 1798
    - 1911
    - 1939
    - 1945
    - 1979
    - 2302
  considerable: !ruby/object:Word
    word: considerable
    stem: consider
    docFrequency: 5.0
    docPositions:
    - 184
    - 1140
    - 1567
    - 2189
  reconstruct: !ruby/object:Word
    word: reconstruct
    stem: reconstruct
    docFrequency: 5.0
    docPositions:
    - 185
    - 244
    - 1568
    - 1602
  elsewhere: !ruby/object:Word
    word: elsewhere
    stem: elsewher
    docFrequency: 3.0
    docPositions:
    - 186
    - 1569
  left: !ruby/object:Word
    word: left
    stem: left
    docFrequency: 29.0
    docPositions:
    - 188
    - 205
    - 631
    - 633
    - 857
    - 887
    - 898
    - 999
    - 1028
    - 1122
    - 1231
    - 1277
    - 1285
    - 1344
    - 1569
    - 1580
    - 1858
    - 1860
    - 2009
    - 2029
    - 2034
    - 2101
    - 2113
    - 2177
    - 2254
    - 2285
    - 2291
    - 2331
  gordon: !ruby/object:Word
    word: gordon
    stem: gordon
    docFrequency: 3.0
    docPositions:
    - 188
    - 1569
  bell: !ruby/object:Word
    word: bell
    stem: bell
    docFrequency: 5.0
    docPositions:
    - 188
    - 195
    - 1569
    - 1574
  operation: !ruby/object:Word
    word: operation
    stem: oper
    docFrequency: 13.0
    docPositions:
    - 188
    - 913
    - 1007
    - 1012
    - 1028
    - 1120
    - 1231
    - 1569
    - 2041
    - 2113
    - 2175
    - 2254
  perspective: !ruby/object:Word
    word: perspective
    stem: perspect
    docFrequency: 3.0
    docPositions:
    - 189
    - 1570
  pointed: !ruby/object:Word
    word: pointed
    stem: point
    docFrequency: 3.0
    docPositions:
    - 189
    - 1570
  although: !ruby/object:Word
    word: although
    stem: although
    docFrequency: 5.0
    docPositions:
    - 189
    - 1203
    - 1570
    - 2232
  today: !ruby/object:Word
    word: today
    stem: todai
    docFrequency: 5.0
    docPositions:
    - 190
    - 241
    - 1571
    - 1600
  conceived: !ruby/object:Word
    word: conceived
    stem: conceiv
    docFrequency: 3.0
    docPositions:
    - 190
    - 1571
  until: !ruby/object:Word
    word: until
    stem: until
    docFrequency: 13.0
    docPositions:
    - 190
    - 250
    - 304
    - 364
    - 869
    - 1571
    - 1606
    - 1640
    - 1679
    - 2017
  you: !ruby/object:Word
    word: you
    stem: you
    docFrequency: 57.0
    docPositions:
    - 190
    - 228
    - 231
    - 512
    - 529
    - 549
    - 559
    - 560
    - 561
    - 591
    - 612
    - 625
    - 629
    - 635
    - 636
    - 655
    - 656
    - 698
    - 699
    - 704
    - 771
    - 1571
    - 1595
    - 1596
    - 1777
    - 1788
    - 1800
    - 1808
    - 1809
    - 1810
    - 1832
    - 1845
    - 1854
    - 1856
    - 1860
    - 1861
    - 1874
    - 1875
    - 1901
    - 1902
    - 1905
    - 1950
  doesn: !ruby/object:Word
    word: doesn
    stem: doesn
    docFrequency: 7.0
    docPositions:
    - 190
    - 502
    - 705
    - 1571
    - 1771
    - 1906
  t: !ruby/object:Word
    word: t
    stem: t
    docFrequency: 71.0
    docPositions:
    - 190
    - 227
    - 259
    - 304
    - 380
    - 382
    - 389
    - 394
    - 476
    - 500
    - 502
    - 510
    - 520
    - 524
    - 551
    - 565
    - 574
    - 580
    - 588
    - 593
    - 600
    - 611
    - 617
    - 632
    - 641
    - 665
    - 705
    - 706
    - 712
    - 771
    - 1219
    - 1571
    - 1594
    - 1611
    - 1640
    - 1691
    - 1693
    - 1698
    - 1701
    - 1755
    - 1769
    - 1771
    - 1775
    - 1783
    - 1785
    - 1802
    - 1812
    - 1819
    - 1823
    - 1829
    - 1834
    - 1837
    - 1844
    - 1848
    - 1859
    - 1864
    - 1882
    - 1906
    - 1907
    - 1911
    - 1950
    - 2244
  exist: !ruby/object:Word
    word: exist
    stem: exist
    docFrequency: 5.0
    docPositions:
    - 191
    - 502
    - 1572
    - 1771
  idea: !ruby/object:Word
    word: idea
    stem: idea
    docFrequency: 7.0
    docPositions:
    - 191
    - 305
    - 719
    - 1572
    - 1641
    - 1914
  teams: !ruby/object:Word
    word: teams
    stem: team
    docFrequency: 3.0
    docPositions:
    - 191
    - 1572
  researchers: !ruby/object:Word
    word: researchers
    stem: research
    docFrequency: 3.0
    docPositions:
    - 191
    - 1572
  trying: !ruby/object:Word
    word: trying
    stem: try
    docFrequency: 11.0
    docPositions:
    - 191
    - 244
    - 355
    - 603
    - 658
    - 1572
    - 1602
    - 1674
    - 1838
    - 1877
  translate: !ruby/object:Word
    word: translate
    stem: translat
    docFrequency: 3.0
    docPositions:
    - 192
    - 1573
  reality: !ruby/object:Word
    word: reality
    stem: realiti
    docFrequency: 3.0
    docPositions:
    - 192
    - 1573
  succeeded: !ruby/object:Word
    word: succeeded
    stem: succeed
    docFrequency: 3.0
    docPositions:
    - 193
    - 1574
  kicked: !ruby/object:Word
    word: kicked
    stem: kick
    docFrequency: 3.0
    docPositions:
    - 193
    - 1574
  paid: !ruby/object:Word
    word: paid
    stem: paid
    docFrequency: 5.0
    docPositions:
    - 195
    - 208
    - 1574
    - 1581
  tribute: !ruby/object:Word
    word: tribute
    stem: tribut
    docFrequency: 9.0
    docPositions:
    - 195
    - 208
    - 221
    - 1326
    - 1574
    - 1581
    - 1590
    - 2319
  crt: !ruby/object:Word
    word: crt
    stem: crt
    docFrequency: 13.0
    docPositions:
    - 195
    - 203
    - 1295
    - 1299
    - 1307
    - 1309
    - 1574
    - 1578
    - 2296
    - 2300
    - 2306
  necessary: !ruby/object:Word
    word: necessary
    stem: necessari
    docFrequency: 7.0
    docPositions:
    - 195
    - 912
    - 1204
    - 1574
    - 2040
    - 2233
  precursor: !ruby/object:Word
    word: precursor
    stem: precursor
    docFrequency: 3.0
    docPositions:
    - 196
    - 1575
  really: !ruby/object:Word
    word: really
    stem: realli
    docFrequency: 23.0
    docPositions:
    - 196
    - 394
    - 411
    - 517
    - 521
    - 536
    - 640
    - 696
    - 725
    - 779
    - 1199
    - 1575
    - 1701
    - 1710
    - 1780
    - 1784
    - 1791
    - 1863
    - 1901
    - 1918
    - 1956
    - 2230
  why: !ruby/object:Word
    word: why
    stem: why
    docFrequency: 20.0
    docPositions:
    - 199
    - 205
    - 490
    - 542
    - 570
    - 597
    - 677
    - 678
    - 703
    - 712
    - 1576
    - 1580
    - 1797
    - 1815
    - 1836
    - 1888
    - 1889
    - 1904
    - 1911
  get: !ruby/object:Word
    word: get
    stem: get
    docFrequency: 21.0
    docPositions:
    - 199
    - 227
    - 612
    - 658
    - 738
    - 913
    - 1063
    - 1312
    - 1364
    - 1366
    - 1576
    - 1594
    - 1845
    - 1877
    - 1927
    - 2041
    - 2138
    - 2309
    - 2345
  winning: !ruby/object:Word
    word: winning
    stem: win
    docFrequency: 3.0
    docPositions:
    - 199
    - 1576
  principal: !ruby/object:Word
    word: principal
    stem: princip
    docFrequency: 3.0
    docPositions:
    - 199
    - 1576
  themes: !ruby/object:Word
    word: themes
    stem: theme
    docFrequency: 3.0
    docPositions:
    - 199
    - 1576
  emerged: !ruby/object:Word
    word: emerged
    stem: emerg
    docFrequency: 3.0
    docPositions:
    - 199
    - 1576
  talks: !ruby/object:Word
    word: talks
    stem: talk
    docFrequency: 5.0
    docPositions:
    - 200
    - 275
    - 1577
    - 1621
  given: !ruby/object:Word
    word: given
    stem: given
    docFrequency: 15.0
    docPositions:
    - 200
    - 366
    - 781
    - 889
    - 1010
    - 1171
    - 1245
    - 1577
    - 1681
    - 1957
    - 2031
    - 2106
    - 2210
    - 2263
  various: !ruby/object:Word
    word: various
    stem: variou
    docFrequency: 13.0
    docPositions:
    - 200
    - 275
    - 396
    - 822
    - 1137
    - 1294
    - 1577
    - 1621
    - 1701
    - 1984
    - 2186
    - 2295
  speakers: !ruby/object:Word
    word: speakers
    stem: speaker
    docFrequency: 3.0
    docPositions:
    - 200
    - 1577
  enormous: !ruby/object:Word
    word: enormous
    stem: enorm
    docFrequency: 13.0
    docPositions:
    - 200
    - 561
    - 599
    - 654
    - 675
    - 776
    - 1577
    - 1810
    - 1836
    - 1873
    - 1888
    - 1953
  influence: !ruby/object:Word
    word: influence
    stem: influenc
    docFrequency: 5.0
    docPositions:
    - 200
    - 210
    - 1577
    - 1583
  telecommunications: !ruby/object:Word
    word: telecommunications
    stem: telecommun
    docFrequency: 3.0
    docPositions:
    - 201
    - 1578
  establishment: !ruby/object:Word
    word: establishment
    stem: establish
    docFrequency: 5.0
    docPositions:
    - 201
    - 215
    - 1578
    - 1586
  tre: !ruby/object:Word
    word: tre
    stem: tre
    docFrequency: 11.0
    docPositions:
    - 201
    - 209
    - 213
    - 1578
    - 1582
    - 1584
  malvern: !ruby/object:Word
    word: malvern
    stem: malvern
    docFrequency: 5.0
    docPositions:
    - 201
    - 205
    - 1578
    - 1580
  subsequent: !ruby/object:Word
    word: subsequent
    stem: subsequ
    docFrequency: 5.0
    docPositions:
    - 203
    - 694
    - 1578
    - 1899
  projects: !ruby/object:Word
    word: projects
    stem: project
    docFrequency: 5.0
    docPositions:
    - 203
    - 1280
    - 1578
    - 2288
  genesis: !ruby/object:Word
    word: genesis
    stem: genesi
    docFrequency: 3.0
    docPositions:
    - 203
    - 1578
  moved: !ruby/object:Word
    word: moved
    stem: move
    docFrequency: 5.0
    docPositions:
    - 204
    - 1355
    - 1579
    - 2338
  revealed: !ruby/object:Word
    word: revealed
    stem: reveal
    docFrequency: 3.0
    docPositions:
    - 204
    - 1579
  decoding: !ruby/object:Word
    word: decoding
    stem: decod
    docFrequency: 9.0
    docPositions:
    - 205
    - 844
    - 1061
    - 1081
    - 1580
    - 2000
    - 2136
    - 2150
  decide: !ruby/object:Word
    word: decide
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 205
    - 1580
  worked: !ruby/object:Word
    word: worked
    stem: work
    docFrequency: 15.0
    docPositions:
    - 205
    - 283
    - 288
    - 318
    - 1015
    - 1338
    - 1580
    - 1627
    - 1632
    - 1650
    - 2106
    - 2327
  refined: !ruby/object:Word
    word: refined
    stem: refin
    docFrequency: 3.0
    docPositions:
    - 206
    - 1581
  backlog: !ruby/object:Word
    word: backlog
    stem: backlog
    docFrequency: 3.0
    docPositions:
    - 208
    - 1581
  ideas: !ruby/object:Word
    word: ideas
    stem: idea
    docFrequency: 7.0
    docPositions:
    - 208
    - 229
    - 232
    - 1581
    - 1596
    - 1597
  techniques: !ruby/object:Word
    word: techniques
    stem: techniqu
    docFrequency: 3.0
    docPositions:
    - 209
    - 1582
  valuable: !ruby/object:Word
    word: valuable
    stem: valuabl
    docFrequency: 5.0
    docPositions:
    - 210
    - 650
    - 1583
    - 1871
  insulating: !ruby/object:Word
    word: insulating
    stem: insul
    docFrequency: 3.0
    docPositions:
    - 210
    - 1583
  design: !ruby/object:Word
    word: design
    stem: design
    docFrequency: 15.0
    docPositions:
    - 210
    - 442
    - 694
    - 815
    - 913
    - 955
    - 1470
    - 1471
    - 1583
    - 1731
    - 1899
    - 1979
    - 2041
    - 2069
  shortages: !ruby/object:Word
    word: shortages
    stem: shortag
    docFrequency: 3.0
    docPositions:
    - 211
    - 1584
  few: !ruby/object:Word
    word: few
    stem: few
    docFrequency: 11.0
    docPositions:
    - 213
    - 231
    - 1139
    - 1351
    - 1395
    - 1584
    - 1596
    - 2188
    - 2336
    - 2358
  previously: !ruby/object:Word
    word: previously
    stem: previous
    docFrequency: 5.0
    docPositions:
    - 214
    - 1040
    - 1585
    - 2119
  english: !ruby/object:Word
    word: english
    stem: english
    docFrequency: 5.0
    docPositions:
    - 214
    - 226
    - 1585
    - 1593
  electric: !ruby/object:Word
    word: electric
    stem: electr
    docFrequency: 5.0
    docPositions:
    - 214
    - 226
    - 1585
    - 1593
  pre: !ruby/object:Word
    word: pre
    stem: pre
    docFrequency: 7.0
    docPositions:
    - 215
    - 945
    - 1163
    - 1586
    - 2063
    - 2204
  eminent: !ruby/object:Word
    word: eminent
    stem: emin
    docFrequency: 3.0
    docPositions:
    - 215
    - 1586
  electronics: !ruby/object:Word
    word: electronics
    stem: electron
    docFrequency: 3.0
    docPositions:
    - 215
    - 1586
  r: !ruby/object:Word
    word: r
    stem: r
    docFrequency: 28.0
    docPositions:
    - 215
    - 299
    - 310
    - 344
    - 345
    - 350
    - 895
    - 898
    - 1007
    - 1586
    - 1637
    - 1644
    - 1668
    - 1669
    - 1673
    - 2033
    - 2034
  d: !ruby/object:Word
    word: d
    stem: d
    docFrequency: 19.0
    docPositions:
    - 215
    - 655
    - 895
    - 897
    - 1023
    - 1026
    - 1027
    - 1028
    - 1042
    - 1586
    - 1874
    - 2033
    - 2110
    - 2111
    - 2112
    - 2113
    - 2121
  war: !ruby/object:Word
    word: war
    stem: war
    docFrequency: 3.0
    docPositions:
    - 215
    - 1586
  adding: !ruby/object:Word
    word: adding
    stem: ad
    docFrequency: 5.0
    docPositions:
    - 215
    - 859
    - 1586
    - 2011
  hothouse: !ruby/object:Word
    word: hothouse
    stem: hothous
    docFrequency: 3.0
    docPositions:
    - 216
    - 1587
  talent: !ruby/object:Word
    word: talent
    stem: talent
    docFrequency: 3.0
    docPositions:
    - 216
    - 1587
  alumni: !ruby/object:Word
    word: alumni
    stem: alumni
    docFrequency: 3.0
    docPositions:
    - 216
    - 1587
  apart: !ruby/object:Word
    word: apart
    stem: apart
    docFrequency: 5.0
    docPositions:
    - 216
    - 599
    - 1587
    - 1836
  those: !ruby/object:Word
    word: those
    stem: those
    docFrequency: 15.0
    docPositions:
    - 216
    - 438
    - 509
    - 517
    - 538
    - 588
    - 827
    - 1587
    - 1729
    - 1774
    - 1780
    - 1793
    - 1829
    - 1987
  went: !ruby/object:Word
    word: went
    stem: went
    docFrequency: 13.0
    docPositions:
    - 216
    - 217
    - 625
    - 627
    - 629
    - 906
    - 1587
    - 1588
    - 1854
    - 1856
    - 2038
  wilkes: !ruby/object:Word
    word: wilkes
    stem: wilk
    docFrequency: 3.0
    docPositions:
    - 217
    - 1588
  develop: !ruby/object:Word
    word: develop
    stem: develop
    docFrequency: 4.0
    docPositions:
    - 217
    - 1453
    - 1588
  edsac: !ruby/object:Word
    word: edsac
    stem: edsac
    docFrequency: 7.0
    docPositions:
    - 217
    - 1254
    - 1377
    - 1588
    - 2268
    - 2351
  john: !ruby/object:Word
    word: john
    stem: john
    docFrequency: 13.0
    docPositions:
    - 217
    - 570
    - 580
    - 661
    - 1441
    - 1588
    - 1815
    - 1823
    - 1878
    - 2367
  pinkerton: !ruby/object:Word
    word: pinkerton
    stem: pinkerton
    docFrequency: 5.0
    docPositions:
    - 217
    - 661
    - 1588
    - 1878
  chief: !ruby/object:Word
    word: chief
    stem: chief
    docFrequency: 3.0
    docPositions:
    - 218
    - 1589
  designer: !ruby/object:Word
    word: designer
    stem: design
    docFrequency: 3.0
    docPositions:
    - 218
    - 1589
  leadership: !ruby/object:Word
    word: leadership
    stem: leadership
    docFrequency: 5.0
    docPositions:
    - 220
    - 1271
    - 1589
    - 2281
  acknowledged: !ruby/object:Word
    word: acknowledged
    stem: acknowledg
    docFrequency: 5.0
    docPositions:
    - 220
    - 741
    - 1589
    - 1928
  chancellor: !ruby/object:Word
    word: chancellor
    stem: chancellor
    docFrequency: 3.0
    docPositions:
    - 221
    - 1590
  lord: !ruby/object:Word
    word: lord
    stem: lord
    docFrequency: 3.0
    docPositions:
    - 221
    - 1590
  flowers: !ruby/object:Word
    word: flowers
    stem: flower
    docFrequency: 3.0
    docPositions:
    - 221
    - 1590
  unique: !ruby/object:Word
    word: unique
    stem: uniqu
    docFrequency: 3.0
    docPositions:
    - 221
    - 1590
  inspiration: !ruby/object:Word
    word: inspiration
    stem: inspir
    docFrequency: 3.0
    docPositions:
    - 222
    - 1591
  skill: !ruby/object:Word
    word: skill
    stem: skill
    docFrequency: 3.0
    docPositions:
    - 222
    - 1591
  vital: !ruby/object:Word
    word: vital
    stem: vital
    docFrequency: 3.0
    docPositions:
    - 222
    - 1591
  him: !ruby/object:Word
    word: him
    stem: him
    docFrequency: 9.0
    docPositions:
    - 223
    - 289
    - 663
    - 906
    - 1592
    - 1633
    - 1880
    - 2038
  simply: !ruby/object:Word
    word: simply
    stem: simpli
    docFrequency: 11.0
    docPositions:
    - 223
    - 333
    - 515
    - 1209
    - 1236
    - 1592
    - 1661
    - 1780
    - 2238
    - 2257
  boffin: !ruby/object:Word
    word: boffin
    stem: boffin
    docFrequency: 5.0
    docPositions:
    - 223
    - 1592
  atmosphere: !ruby/object:Word
    word: atmosphere
    stem: atmospher
    docFrequency: 3.0
    docPositions:
    - 226
    - 1593
  pleasant: !ruby/object:Word
    word: pleasant
    stem: pleasant
    docFrequency: 3.0
    docPositions:
    - 226
    - 1593
  informal: !ruby/object:Word
    word: informal
    stem: inform
    docFrequency: 3.0
    docPositions:
    - 226
    - 1593
  compared: !ruby/object:Word
    word: compared
    stem: compar
    docFrequency: 11.0
    docPositions:
    - 226
    - 555
    - 887
    - 1025
    - 1220
    - 1593
    - 1804
    - 2029
    - 2110
    - 2245
  way: !ruby/object:Word
    word: way
    stem: wai
    docFrequency: 31.0
    docPositions:
    - 227
    - 232
    - 405
    - 557
    - 559
    - 758
    - 772
    - 780
    - 1083
    - 1124
    - 1134
    - 1169
    - 1197
    - 1322
    - 1338
    - 1594
    - 1597
    - 1706
    - 1806
    - 1808
    - 1941
    - 1951
    - 1957
    - 2152
    - 2177
    - 2185
    - 2208
    - 2228
    - 2317
    - 2327
  let: !ruby/object:Word
    word: let
    stem: let
    docFrequency: 3.0
    docPositions:
    - 227
    - 1594
  didn: !ruby/object:Word
    word: didn
    stem: didn
    docFrequency: 19.0
    docPositions:
    - 227
    - 551
    - 574
    - 580
    - 600
    - 611
    - 632
    - 641
    - 665
    - 1594
    - 1802
    - 1819
    - 1823
    - 1837
    - 1844
    - 1859
    - 1864
    - 1882
  leave: !ruby/object:Word
    word: leave
    stem: leav
    docFrequency: 3.0
    docPositions:
    - 228
    - 1595
  alone: !ruby/object:Word
    word: alone
    stem: alon
    docFrequency: 5.0
    docPositions:
    - 228
    - 689
    - 1595
    - 1896
  though: !ruby/object:Word
    word: though
    stem: though
    docFrequency: 15.0
    docPositions:
    - 228
    - 334
    - 580
    - 611
    - 738
    - 749
    - 1373
    - 1595
    - 1662
    - 1823
    - 1844
    - 1927
    - 1934
    - 2350
  provided: !ruby/object:Word
    word: provided
    stem: provid
    docFrequency: 9.0
    docPositions:
    - 228
    - 649
    - 805
    - 1053
    - 1595
    - 1870
    - 1973
    - 2130
  plenty: !ruby/object:Word
    word: plenty
    stem: plenti
    docFrequency: 3.0
    docPositions:
    - 228
    - 1595
  encouragement: !ruby/object:Word
    word: encouragement
    stem: encourag
    docFrequency: 3.0
    docPositions:
    - 228
    - 1595
  lot: !ruby/object:Word
    word: lot
    stem: lot
    docFrequency: 25.0
    docPositions:
    - 228
    - 610
    - 621
    - 657
    - 664
    - 668
    - 670
    - 705
    - 710
    - 733
    - 750
    - 765
    - 1595
    - 1843
    - 1852
    - 1876
    - 1881
    - 1883
    - 1885
    - 1906
    - 1909
    - 1922
    - 1935
    - 1946
  involved: !ruby/object:Word
    word: involved
    stem: involv
    docFrequency: 19.0
    docPositions:
    - 231
    - 505
    - 728
    - 756
    - 983
    - 1132
    - 1137
    - 1209
    - 1281
    - 1596
    - 1772
    - 1921
    - 1939
    - 2089
    - 2183
    - 2186
    - 2238
    - 2289
  communications: !ruby/object:Word
    word: communications
    stem: commun
    docFrequency: 5.0
    docPositions:
    - 231
    - 1281
    - 1596
    - 2289
  easy: !ruby/object:Word
    word: easy
    stem: easi
    docFrequency: 3.0
    docPositions:
    - 231
    - 1596
  pursue: !ruby/object:Word
    word: pursue
    stem: pursu
    docFrequency: 3.0
    docPositions:
    - 232
    - 1597
  exciting: !ruby/object:Word
    word: exciting
    stem: excit
    docFrequency: 11.0
    docPositions:
    - 232
    - 742
    - 744
    - 773
    - 779
    - 1597
    - 1929
    - 1931
    - 1952
    - 1956
  like: !ruby/object:Word
    word: like
    stem: like
    docFrequency: 27.0
    docPositions:
    - 234
    - 235
    - 506
    - 550
    - 572
    - 714
    - 719
    - 721
    - 745
    - 1015
    - 1150
    - 1206
    - 1371
    - 1597
    - 1598
    - 1773
    - 1801
    - 1817
    - 1911
    - 1914
    - 1916
    - 1932
    - 2106
    - 2197
    - 2235
    - 2348
  see: !ruby/object:Word
    word: see
    stem: see
    docFrequency: 7.0
    docPositions:
    - 234
    - 272
    - 350
    - 1597
    - 1620
    - 1673
  looked: !ruby/object:Word
    word: looked
    stem: look
    docFrequency: 7.0
    docPositions:
    - 235
    - 254
    - 905
    - 1598
    - 1608
    - 2037
  inspect: !ruby/object:Word
    word: inspect
    stem: inspect
    docFrequency: 3.0
    docPositions:
    - 235
    - 1598
  programgeoff: !ruby/object:Word
    word: programgeoff
    stem: programgeoff
    docFrequency: 2.0
    docPositions:
    - 238
  epoch: !ruby/object:Word
    word: epoch
    stem: epoch
    docFrequency: 3.0
    docPositions:
    - 240
    - 1599
  started: !ruby/object:Word
    word: started
    stem: start
    docFrequency: 9.0
    docPositions:
    - 240
    - 340
    - 374
    - 1342
    - 1599
    - 1666
    - 1687
    - 2329
  documents: !ruby/object:Word
    word: documents
    stem: document
    docFrequency: 5.0
    docPositions:
    - 241
    - 289
    - 1600
    - 1633
  discover: !ruby/object:Word
    word: discover
    stem: discov
    docFrequency: 3.0
    docPositions:
    - 241
    - 1600
  precise: !ruby/object:Word
    word: precise
    stem: precis
    docFrequency: 3.0
    docPositions:
    - 242
    - 1601
  almost: !ruby/object:Word
    word: almost
    stem: almost
    docFrequency: 7.0
    docPositions:
    - 242
    - 524
    - 567
    - 1601
    - 1785
    - 1814
  remaining: !ruby/object:Word
    word: remaining
    stem: remain
    docFrequency: 3.0
    docPositions:
    - 243
    - 1602
  unanswered: !ruby/object:Word
    word: unanswered
    stem: unansw
    docFrequency: 3.0
    docPositions:
    - 243
    - 1602
  question: !ruby/object:Word
    word: question
    stem: question
    docFrequency: 9.0
    docPositions:
    - 243
    - 571
    - 582
    - 709
    - 1602
    - 1816
    - 1825
    - 1908
  little: !ruby/object:Word
    word: little
    stem: littl
    docFrequency: 11.0
    docPositions:
    - 245
    - 443
    - 548
    - 1062
    - 1064
    - 1603
    - 1732
    - 1799
    - 2137
    - 2139
  table: !ruby/object:Word
    word: table
    stem: tabl
    docFrequency: 30.0
    docPositions:
    - 245
    - 292
    - 318
    - 324
    - 349
    - 358
    - 434
    - 436
    - 477
    - 552
    - 887
    - 888
    - 1005
    - 1007
    - 1010
    - 1012
    - 1603
    - 1634
    - 1650
    - 1654
    - 1672
    - 1677
    - 1727
    - 1756
    - 1803
    - 2029
    - 2030
    - 2105
    - 2106
  ever: !ruby/object:Word
    word: ever
    stem: ever
    docFrequency: 5.0
    docPositions:
    - 247
    - 1095
    - 1605
    - 2160
  wholly: !ruby/object:Word
    word: wholly
    stem: wholli
    docFrequency: 3.0
    docPositions:
    - 247
    - 1605
  electronic: !ruby/object:Word
    word: electronic
    stem: electron
    docFrequency: 5.0
    docPositions:
    - 247
    - 1414
    - 1605
    - 2361
  amended: !ruby/object:Word
    word: amended
    stem: amend
    docFrequency: 10.0
    docPositions:
    - 250
    - 296
    - 309
    - 327
    - 343
    - 1606
    - 1634
    - 1657
    - 1667
  recorded: !ruby/object:Word
    word: recorded
    stem: record
    docFrequency: 3.0
    docPositions:
    - 251
    - 1607
  my: !ruby/object:Word
    word: my
    stem: my
    docFrequency: 31.0
    docPositions:
    - 251
    - 255
    - 260
    - 271
    - 280
    - 281
    - 291
    - 296
    - 343
    - 370
    - 377
    - 406
    - 460
    - 500
    - 505
    - 1607
    - 1609
    - 1612
    - 1619
    - 1624
    - 1625
    - 1633
    - 1634
    - 1667
    - 1683
    - 1688
    - 1707
    - 1745
    - 1769
    - 1772
  lab: !ruby/object:Word
    word: lab
    stem: lab
    docFrequency: 5.0
    docPositions:
    - 251
    - 727
    - 1607
    - 1920
  dated: !ruby/object:Word
    word: dated
    stem: date
    docFrequency: 9.0
    docPositions:
    - 251
    - 286
    - 296
    - 370
    - 1607
    - 1630
    - 1634
    - 1683
  july: !ruby/object:Word
    word: july
    stem: juli
    docFrequency: 9.0
    docPositions:
    - 251
    - 296
    - 309
    - 377
    - 1607
    - 1634
    - 1643
    - 1688
  improved: !ruby/object:Word
    word: improved
    stem: improv
    docFrequency: 9.0
    docPositions:
    - 251
    - 944
    - 1155
    - 1296
    - 1607
    - 2062
    - 2200
    - 2297
  simon: !ruby/object:Word
    word: simon
    stem: simon
    docFrequency: 7.0
    docPositions:
    - 254
    - 353
    - 391
    - 1608
    - 1674
    - 1698
  lavington: !ruby/object:Word
    word: lavington
    stem: lavington
    docFrequency: 7.0
    docPositions:
    - 254
    - 353
    - 391
    - 1608
    - 1674
    - 1698
  request: !ruby/object:Word
    word: request
    stem: request
    docFrequency: 3.0
    docPositions:
    - 254
    - 1608
  remembered: !ruby/object:Word
    word: remembered
    stem: rememb
    docFrequency: 3.0
    docPositions:
    - 254
    - 1608
  altered: !ruby/object:Word
    word: altered
    stem: alter
    docFrequency: 13.0
    docPositions:
    - 255
    - 340
    - 393
    - 398
    - 445
    - 1051
    - 1609
    - 1666
    - 1700
    - 1703
    - 1734
    - 2128
  prevent: !ruby/object:Word
    word: prevent
    stem: prevent
    docFrequency: 5.0
    docPositions:
    - 256
    - 1074
    - 1610
    - 2145
  starting: !ruby/object:Word
    word: starting
    stem: start
    docFrequency: 15.0
    docPositions:
    - 256
    - 260
    - 287
    - 702
    - 1025
    - 1303
    - 1431
    - 1610
    - 1612
    - 1631
    - 1903
    - 2110
    - 2302
    - 2365
  value: !ruby/object:Word
    word: value
    stem: valu
    docFrequency: 23.0
    docPositions:
    - 256
    - 282
    - 314
    - 399
    - 452
    - 460
    - 871
    - 1210
    - 1215
    - 1218
    - 1610
    - 1626
    - 1648
    - 1704
    - 1739
    - 1745
    - 2019
    - 2239
    - 2240
    - 2243
  trial: !ruby/object:Word
    word: trial
    stem: trial
    docFrequency: 21.0
    docPositions:
    - 256
    - 260
    - 298
    - 312
    - 314
    - 317
    - 320
    - 322
    - 436
    - 471
    - 1610
    - 1612
    - 1636
    - 1646
    - 1648
    - 1649
    - 1652
    - 1654
    - 1727
    - 1752
  being: !ruby/object:Word
    word: being
    stem: be
    docFrequency: 29.0
    docPositions:
    - 256
    - 367
    - 453
    - 541
    - 577
    - 714
    - 735
    - 804
    - 811
    - 884
    - 993
    - 1219
    - 1238
    - 1304
    - 1610
    - 1682
    - 1740
    - 1796
    - 1822
    - 1911
    - 1924
    - 1972
    - 1975
    - 2026
    - 2097
    - 2244
    - 2259
    - 2303
  overwritten: !ruby/object:Word
    word: overwritten
    stem: overwritten
    docFrequency: 3.0
    docPositions:
    - 256
    - 1610
  determined: !ruby/object:Word
    word: determined
    stem: determin
    docFrequency: 5.0
    docPositions:
    - 257
    - 451
    - 1611
    - 1738
  save: !ruby/object:Word
    word: save
    stem: save
    docFrequency: 3.0
    docPositions:
    - 257
    - 1611
  improve: !ruby/object:Word
    word: improve
    stem: improv
    docFrequency: 7.0
    docPositions:
    - 257
    - 932
    - 1293
    - 1611
    - 2056
    - 2294
  code: !ruby/object:Word
    word: code
    stem: code
    docFrequency: 19.0
    docPositions:
    - 257
    - 408
    - 841
    - 849
    - 850
    - 851
    - 855
    - 967
    - 1421
    - 1611
    - 1709
    - 1997
    - 2003
    - 2004
    - 2005
    - 2007
    - 2077
    - 2363
  couldn: !ruby/object:Word
    word: couldn
    stem: couldn
    docFrequency: 5.0
    docPositions:
    - 259
    - 617
    - 1611
    - 1848
  remember: !ruby/object:Word
    word: remember
    stem: rememb
    docFrequency: 13.0
    docPositions:
    - 259
    - 380
    - 393
    - 394
    - 640
    - 661
    - 1611
    - 1691
    - 1700
    - 1701
    - 1863
    - 1878
  wasn: !ruby/object:Word
    word: wasn
    stem: wasn
    docFrequency: 7.0
    docPositions:
    - 259
    - 500
    - 593
    - 1611
    - 1769
    - 1834
  disimprove: !ruby/object:Word
    word: disimprove
    stem: disimprov
    docFrequency: 3.0
    docPositions:
    - 260
    - 1612
  preserve: !ruby/object:Word
    word: preserve
    stem: preserv
    docFrequency: 3.0
    docPositions:
    - 260
    - 1612
  avoid: !ruby/object:Word
    word: avoid
    stem: avoid
    docFrequency: 5.0
    docPositions:
    - 260
    - 858
    - 1612
    - 2010
  having: !ruby/object:Word
    word: having
    stem: have
    docFrequency: 13.0
    docPositions:
    - 261
    - 305
    - 442
    - 673
    - 683
    - 1082
    - 1613
    - 1641
    - 1731
    - 1886
    - 1892
    - 2151
  input: !ruby/object:Word
    word: input
    stem: input
    docFrequency: 9.0
    docPositions:
    - 261
    - 982
    - 1137
    - 1140
    - 1613
    - 2088
    - 2186
    - 2189
  positive: !ruby/object:Word
    word: positive
    stem: posit
    docFrequency: 15.0
    docPositions:
    - 261
    - 310
    - 350
    - 797
    - 830
    - 1015
    - 1021
    - 1613
    - 1644
    - 1673
    - 1965
    - 1990
    - 2106
    - 2108
  negative: !ruby/object:Word
    word: negative
    stem: neg
    docFrequency: 19.0
    docPositions:
    - 261
    - 310
    - 350
    - 799
    - 829
    - 831
    - 920
    - 1015
    - 1022
    - 1613
    - 1644
    - 1673
    - 1967
    - 1989
    - 1991
    - 2048
    - 2106
    - 2109
  versions: !ruby/object:Word
    word: versions
    stem: version
    docFrequency: 3.0
    docPositions:
    - 261
    - 1613
  probably: !ruby/object:Word
    word: probably
    stem: probabl
    docFrequency: 13.0
    docPositions:
    - 262
    - 370
    - 383
    - 444
    - 445
    - 474
    - 1614
    - 1683
    - 1694
    - 1733
    - 1734
    - 1753
  four: !ruby/object:Word
    word: four
    stem: four
    docFrequency: 24.0
    docPositions:
    - 262
    - 367
    - 450
    - 1067
    - 1081
    - 1082
    - 1085
    - 1087
    - 1091
    - 1282
    - 1469
    - 1614
    - 1682
    - 1737
    - 2142
    - 2150
    - 2151
    - 2154
    - 2158
    - 2290
  however: !ruby/object:Word
    word: however
    stem: howev
    docFrequency: 11.0
    docPositions:
    - 262
    - 370
    - 430
    - 813
    - 987
    - 1614
    - 1683
    - 1723
    - 1977
    - 2091
  cut: !ruby/object:Word
    word: cut
    stem: cut
    docFrequency: 13.0
    docPositions:
    - 262
    - 830
    - 1007
    - 1012
    - 1074
    - 1076
    - 1614
    - 1990
    - 2105
    - 2106
    - 2145
    - 2147
  documented: !ruby/object:Word
    word: documented
    stem: document
    docFrequency: 3.0
    docPositions:
    - 263
    - 1615
  nett: !ruby/object:Word
    word: nett
    stem: nett
    docFrequency: 3.0
    docPositions:
    - 263
    - 1615
  longer: !ruby/object:Word
    word: longer
    stem: longer
    docFrequency: 3.0
    docPositions:
    - 264
    - 1616
  fresh: !ruby/object:Word
    word: fresh
    stem: fresh
    docFrequency: 3.0
    docPositions:
    - 266
    - 1616
  including: !ruby/object:Word
    word: including
    stem: includ
    docFrequency: 15.0
    docPositions:
    - 266
    - 422
    - 1061
    - 1377
    - 1390
    - 1422
    - 1616
    - 1719
    - 2136
    - 2351
    - 2354
    - 2364
  statements: !ruby/object:Word
    word: statements
    stem: statement
    docFrequency: 3.0
    docPositions:
    - 266
    - 1616
  letter: !ruby/object:Word
    word: letter
    stem: letter
    docFrequency: 19.0
    docPositions:
    - 267
    - 324
    - 352
    - 406
    - 414
    - 438
    - 465
    - 633
    - 1316
    - 1617
    - 1654
    - 1673
    - 1707
    - 1713
    - 1729
    - 1748
    - 1860
    - 2313
  nature: !ruby/object:Word
    word: nature
    stem: natur
    docFrequency: 13.0
    docPositions:
    - 267
    - 324
    - 352
    - 414
    - 438
    - 465
    - 1617
    - 1654
    - 1673
    - 1713
    - 1729
    - 1748
  think: !ruby/object:Word
    word: think
    stem: think
    docFrequency: 7.0
    docPositions:
    - 267
    - 283
    - 304
    - 1617
    - 1627
    - 1640
  ve: !ruby/object:Word
    word: ve
    stem: ve
    docFrequency: 3.0
    docPositions:
    - 267
    - 1617
  largely: !ruby/object:Word
    word: largely
    stem: larg
    docFrequency: 3.0
    docPositions:
    - 268
    - 1618
  solved: !ruby/object:Word
    word: solved
    stem: solv
    docFrequency: 3.0
    docPositions:
    - 268
    - 1618
  discussed: !ruby/object:Word
    word: discussed
    stem: discuss
    docFrequency: 5.0
    docPositions:
    - 270
    - 748
    - 1618
    - 1933
  dug: !ruby/object:Word
    word: dug
    stem: dug
    docFrequency: 3.0
    docPositions:
    - 270
    - 1618
  poor: !ruby/object:Word
    word: poor
    stem: poor
    docFrequency: 3.0
    docPositions:
    - 270
    - 1618
  photocopy: !ruby/object:Word
    word: photocopy
    stem: photocopi
    docFrequency: 7.0
    docPositions:
    - 271
    - 280
    - 282
    - 1619
    - 1624
    - 1626
  rediscovered: !ruby/object:Word
    word: rediscovered
    stem: rediscov
    docFrequency: 3.0
    docPositions:
    - 271
    - 1619
  notes: !ruby/object:Word
    word: notes
    stem: note
    docFrequency: 16.0
    docPositions:
    - 271
    - 279
    - 310
    - 326
    - 362
    - 431
    - 1619
    - 1623
    - 1644
    - 1656
    - 1679
    - 1724
  copied: !ruby/object:Word
    word: copied
    stem: copi
    docFrequency: 3.0
    docPositions:
    - 272
    - 1620
  inferences: !ruby/object:Word
    word: inferences
    stem: infer
    docFrequency: 4.0
    docPositions:
    - 272
    - 401
    - 1620
  copy: !ruby/object:Word
    word: copy
    stem: copi
    docFrequency: 5.0
    docPositions:
    - 273
    - 352
    - 1621
    - 1673
  agreed: !ruby/object:Word
    word: agreed
    stem: agre
    docFrequency: 3.0
    docPositions:
    - 275
    - 1621
  points: !ruby/object:Word
    word: points
    stem: point
    docFrequency: 13.0
    docPositions:
    - 275
    - 468
    - 1172
    - 1174
    - 1179
    - 1186
    - 1621
    - 1749
    - 2211
    - 2213
    - 2216
    - 2221
  incorporated: !ruby/object:Word
    word: incorporated
    stem: incorpor
    docFrequency: 7.0
    docPositions:
    - 276
    - 830
    - 1297
    - 1622
    - 1990
    - 2298
  revised: !ruby/object:Word
    word: revised
    stem: revis
    docFrequency: 3.0
    docPositions:
    - 276
    - 1622
  document: !ruby/object:Word
    word: document
    stem: document
    docFrequency: 3.0
    docPositions:
    - 276
    - 1622
  called: !ruby/object:Word
    word: called
    stem: call
    docFrequency: 19.0
    docPositions:
    - 276
    - 494
    - 691
    - 715
    - 992
    - 993
    - 1111
    - 1126
    - 1622
    - 1765
    - 1898
    - 1912
    - 2096
    - 2097
    - 2168
    - 2179
  analysis: !ruby/object:Word
    word: analysis
    stem: analysi
    docFrequency: 12.0
    docPositions:
    - 276
    - 291
    - 294
    - 349
    - 403
    - 1109
    - 1622
    - 1633
    - 1672
    - 1704
    - 2166
  comments: !ruby/object:Word
    word: comments
    stem: comment
    docFrequency: 10.0
    docPositions:
    - 276
    - 294
    - 310
    - 350
    - 403
    - 1622
    - 1644
    - 1673
    - 1704
  follows: !ruby/object:Word
    word: follows
    stem: follow
    docFrequency: 13.0
    docPositions:
    - 277
    - 291
    - 309
    - 337
    - 867
    - 1396
    - 1623
    - 1633
    - 1643
    - 1663
    - 2015
    - 2359
  operating: !ruby/object:Word
    word: operating
    stem: oper
    docFrequency: 28.0
    docPositions:
    - 279
    - 310
    - 326
    - 362
    - 431
    - 447
    - 595
    - 654
    - 655
    - 666
    - 689
    - 691
    - 839
    - 1623
    - 1644
    - 1656
    - 1679
    - 1724
    - 1734
    - 1834
    - 1873
    - 1874
    - 1883
    - 1896
    - 1898
    - 1997
  c: !ruby/object:Word
    word: c
    stem: c
    docFrequency: 31.0
    docPositions:
    - 279
    - 282
    - 310
    - 350
    - 976
    - 1623
    - 1626
    - 1644
    - 1673
    - 2084
  note: !ruby/object:Word
    word: note
    stem: note
    docFrequency: 35.0
    docPositions:
    - 279
    - 282
    - 283
    - 284
    - 781
    - 1245
    - 1623
    - 1626
    - 1627
    - 1628
    - 1957
    - 2263
  b: !ruby/object:Word
    word: b
    stem: b
    docFrequency: 43.0
    docPositions:
    - 279
    - 283
    - 300
    - 310
    - 345
    - 346
    - 347
    - 350
    - 1623
    - 1627
    - 1638
    - 1644
    - 1669
    - 1670
    - 1671
    - 1673
  answer: !ruby/object:Word
    word: answer
    stem: answer
    docFrequency: 17.0
    docPositions:
    - 279
    - 283
    - 284
    - 311
    - 357
    - 629
    - 1623
    - 1627
    - 1628
    - 1645
    - 1676
    - 1856
  minutea: !ruby/object:Word
    word: minutea
    stem: minutea
    docFrequency: 3.0
    docPositions:
    - 279
    - 1623
  x: !ruby/object:Word
    word: x
    stem: x
    docFrequency: 11.0
    docPositions:
    - 279
    - 974
    - 987
    - 1042
    - 1166
    - 1623
    - 2082
    - 2091
    - 2121
    - 2207
  line: !ruby/object:Word
    word: line
    stem: line
    docFrequency: 76.0
    docPositions:
    - 279
    - 283
    - 284
    - 310
    - 326
    - 329
    - 333
    - 339
    - 347
    - 350
    - 407
    - 414
    - 418
    - 419
    - 420
    - 436
    - 455
    - 462
    - 463
    - 475
    - 481
    - 482
    - 484
    - 587
    - 588
    - 731
    - 773
    - 926
    - 1168
    - 1623
    - 1627
    - 1628
    - 1644
    - 1656
    - 1659
    - 1661
    - 1665
    - 1671
    - 1673
    - 1708
    - 1713
    - 1715
    - 1716
    - 1717
    - 1727
    - 1742
    - 1745
    - 1746
    - 1754
    - 1757
    - 1758
    - 1760
    - 1828
    - 1829
    - 1922
    - 1952
    - 2052
    - 2207
  should: !ruby/object:Word
    word: should
    stem: should
    docFrequency: 21.0
    docPositions:
    - 279
    - 465
    - 483
    - 587
    - 709
    - 1364
    - 1433
    - 1436
    - 1623
    - 1748
    - 1759
    - 1828
    - 1908
    - 2345
    - 2365
    - 2366
  blank: !ruby/object:Word
    word: blank
    stem: blank
    docFrequency: 3.0
    docPositions:
    - 279
    - 1623
  cr: !ruby/object:Word
    word: cr
    stem: cr
    docFrequency: 3.0
    docPositions:
    - 279
    - 1623
  mins: !ruby/object:Word
    word: mins
    stem: min
    docFrequency: 5.0
    docPositions:
    - 279
    - 386
    - 1623
    - 1695
  secs: !ruby/object:Word
    word: secs
    stem: sec
    docFrequency: 2.0
    docPositions:
    - 279
  additional: !ruby/object:Word
    word: additional
    stem: addit
    docFrequency: 5.0
    docPositions:
    - 279
    - 819
    - 1467
    - 1981
  taken: !ruby/object:Word
    word: taken
    stem: taken
    docFrequency: 9.0
    docPositions:
    - 279
    - 767
    - 884
    - 964
    - 1623
    - 1948
    - 2026
    - 2076
  headed: !ruby/object:Word
    word: headed
    stem: head
    docFrequency: 3.0
    docPositions:
    - 280
    - 1624
  numbers: !ruby/object:Word
    word: numbers
    stem: number
    docFrequency: 27.0
    docPositions:
    - 280
    - 356
    - 426
    - 477
    - 512
    - 520
    - 753
    - 829
    - 831
    - 863
    - 940
    - 1016
    - 1022
    - 1624
    - 1675
    - 1721
    - 1756
    - 1777
    - 1783
    - 1938
    - 1989
    - 1991
    - 2013
    - 2060
    - 2107
    - 2109
  routine: !ruby/object:Word
    word: routine
    stem: routin
    docFrequency: 9.0
    docPositions:
    - 281
    - 355
    - 1118
    - 1120
    - 1625
    - 1674
    - 2173
    - 2175
  lines: !ruby/object:Word
    word: lines
    stem: line
    docFrequency: 31.0
    docPositions:
    - 281
    - 297
    - 298
    - 299
    - 300
    - 301
    - 302
    - 310
    - 321
    - 338
    - 340
    - 350
    - 361
    - 414
    - 596
    - 1625
    - 1635
    - 1636
    - 1637
    - 1638
    - 1639
    - 1640
    - 1644
    - 1653
    - 1664
    - 1666
    - 1673
    - 1678
    - 1713
    - 1835
  handwriting: !ruby/object:Word
    word: handwriting
    stem: handwrit
    docFrequency: 3.0
    docPositions:
    - 281
    - 1625
  rest: !ruby/object:Word
    word: rest
    stem: rest
    docFrequency: 5.0
    docPositions:
    - 282
    - 584
    - 1626
    - 1827
  denotes: !ruby/object:Word
    word: denotes
    stem: denot
    docFrequency: 3.0
    docPositions:
    - 282
    - 1626
  illegible: !ruby/object:Word
    word: illegible
    stem: illeg
    docFrequency: 3.0
    docPositions:
    - 282
    - 1626
  means: !ruby/object:Word
    word: means
    stem: mean
    docFrequency: 5.0
    docPositions:
    - 282
    - 1173
    - 1626
    - 2212
  twos: !ruby/object:Word
    word: twos
    stem: two
    docFrequency: 5.0
    docPositions:
    - 282
    - 829
    - 1626
    - 1989
  complement: !ruby/object:Word
    word: complement
    stem: complement
    docFrequency: 5.0
    docPositions:
    - 282
    - 829
    - 1626
    - 1989
  ie: !ruby/object:Word
    word: ie
    stem: ie
    docFrequency: 7.0
    docPositions:
    - 282
    - 365
    - 386
    - 1626
    - 1680
    - 1695
  beforehand: !ruby/object:Word
    word: beforehand
    stem: beforehand
    docFrequency: 7.0
    docPositions:
    - 283
    - 394
    - 720
    - 1627
    - 1701
    - 1915
  right: !ruby/object:Word
    word: right
    stem: right
    docFrequency: 25.0
    docPositions:
    - 283
    - 284
    - 619
    - 626
    - 630
    - 631
    - 698
    - 888
    - 898
    - 999
    - 1010
    - 1627
    - 1628
    - 1850
    - 1855
    - 1857
    - 1858
    - 1901
    - 2030
    - 2034
    - 2101
    - 2106
  infer: !ruby/object:Word
    word: infer
    stem: infer
    docFrequency: 3.0
    docPositions:
    - 283
    - 1627
  load: !ruby/object:Word
    word: load
    stem: load
    docFrequency: 11.0
    docPositions:
    - 283
    - 300
    - 310
    - 321
    - 1627
    - 1638
    - 1644
    - 1653
  bracketed: !ruby/object:Word
    word: bracketed
    stem: bracket
    docFrequency: 3.0
    docPositions:
    - 283
    - 1627
  awarded: !ruby/object:Word
    word: awarded
    stem: award
    docFrequency: 3.0
    docPositions:
    - 284
    - 1628
  tick: !ruby/object:Word
    word: tick
    stem: tick
    docFrequency: 3.0
    docPositions:
    - 284
    - 1628
  indicate: !ruby/object:Word
    word: indicate
    stem: indic
    docFrequency: 5.0
    docPositions:
    - 284
    - 1236
    - 1628
    - 2257
  remainder: !ruby/object:Word
    word: remainder
    stem: remaind
    docFrequency: 15.0
    docPositions:
    - 284
    - 299
    - 310
    - 313
    - 315
    - 350
    - 1225
    - 1628
    - 1637
    - 1644
    - 1647
    - 1649
    - 1673
    - 2248
  stop: !ruby/object:Word
    word: stop
    stem: stop
    docFrequency: 13.0
    docPositions:
    - 284
    - 299
    - 310
    - 311
    - 326
    - 330
    - 1628
    - 1637
    - 1644
    - 1645
    - 1656
    - 1660
  instruction: !ruby/object:Word
    word: instruction
    stem: instruct
    docFrequency: 29.0
    docPositions:
    - 284
    - 326
    - 327
    - 358
    - 365
    - 405
    - 423
    - 972
    - 973
    - 977
    - 981
    - 1116
    - 1117
    - 1122
    - 1628
    - 1656
    - 1657
    - 1677
    - 1680
    - 1706
    - 1720
    - 2080
    - 2081
    - 2085
    - 2087
    - 2171
    - 2172
    - 2177
  meanwhile: !ruby/object:Word
    word: meanwhile
    stem: meanwhil
    docFrequency: 3.0
    docPositions:
    - 284
    - 1628
  dictated: !ruby/object:Word
    word: dictated
    stem: dictat
    docFrequency: 3.0
    docPositions:
    - 284
    - 1628
  thoughts: !ruby/object:Word
    word: thoughts
    stem: thought
    docFrequency: 3.0
    docPositions:
    - 284
    - 1628
  onto: !ruby/object:Word
    word: onto
    stem: onto
    docFrequency: 11.0
    docPositions:
    - 284
    - 602
    - 664
    - 883
    - 928
    - 1628
    - 1837
    - 1881
    - 2025
    - 2054
  cassette: !ruby/object:Word
    word: cassette
    stem: cassett
    docFrequency: 3.0
    docPositions:
    - 284
    - 1628
  tape: !ruby/object:Word
    word: tape
    stem: tape
    docFrequency: 55.0
    docPositions:
    - 284
    - 286
    - 332
    - 466
    - 534
    - 556
    - 557
    - 559
    - 603
    - 604
    - 606
    - 608
    - 609
    - 610
    - 612
    - 613
    - 617
    - 619
    - 620
    - 653
    - 655
    - 657
    - 658
    - 742
    - 1141
    - 1628
    - 1630
    - 1660
    - 1749
    - 1791
    - 1805
    - 1806
    - 1808
    - 1838
    - 1839
    - 1841
    - 1842
    - 1843
    - 1845
    - 1846
    - 1848
    - 1850
    - 1851
    - 1872
    - 1874
    - 1876
    - 1877
    - 1929
    - 2190
  transcribed: !ruby/object:Word
    word: transcribed
    stem: transcrib
    docFrequency: 3.0
    docPositions:
    - 285
    - 1629
  name: !ruby/object:Word
    word: name
    stem: name
    docFrequency: 7.0
    docPositions:
    - 285
    - 905
    - 1139
    - 1629
    - 2037
    - 2188
  copies: !ruby/object:Word
    word: copies
    stem: copi
    docFrequency: 4.0
    docPositions:
    - 286
    - 1468
    - 1630
  myself: !ruby/object:Word
    word: myself
    stem: myself
    docFrequency: 5.0
    docPositions:
    - 286
    - 476
    - 1630
    - 1755
  accompanied: !ruby/object:Word
    word: accompanied
    stem: accompani
    docFrequency: 3.0
    docPositions:
    - 286
    - 1630
  manuscript: !ruby/object:Word
    word: manuscript
    stem: manuscript
    docFrequency: 3.0
    docPositions:
    - 286
    - 1630
  likely: !ruby/object:Word
    word: likely
    stem: like
    docFrequency: 5.0
    docPositions:
    - 287
    - 328
    - 1631
    - 1658
  exactly: !ruby/object:Word
    word: exactly
    stem: exactli
    docFrequency: 7.0
    docPositions:
    - 288
    - 626
    - 852
    - 1632
    - 1855
    - 2006
  independently: !ruby/object:Word
    word: independently
    stem: independ
    docFrequency: 7.0
    docPositions:
    - 288
    - 1114
    - 1131
    - 1632
    - 2169
    - 2182
  crossed: !ruby/object:Word
    word: crossed
    stem: cross
    docFrequency: 3.0
    docPositions:
    - 289
    - 1633
  exhaustive: !ruby/object:Word
    word: exhaustive
    stem: exhaust
    docFrequency: 5.0
    docPositions:
    - 291
    - 444
    - 1633
    - 1733
  synthesis: !ruby/object:Word
    word: synthesis
    stem: synthesi
    docFrequency: 3.0
    docPositions:
    - 292
    - 1634
  consists: !ruby/object:Word
    word: consists
    stem: consist
    docFrequency: 3.0
    docPositions:
    - 296
    - 1634
  initialisation: !ruby/object:Word
    word: initialisation
    stem: initialis
    docFrequency: 5.0
    docPositions:
    - 297
    - 304
    - 1635
    - 1640
  subtraction: !ruby/object:Word
    word: subtraction
    stem: subtract
    docFrequency: 17.0
    docPositions:
    - 298
    - 310
    - 314
    - 317
    - 320
    - 322
    - 350
    - 999
    - 1636
    - 1644
    - 1648
    - 1649
    - 1652
    - 1654
    - 1673
    - 2101
  sign: !ruby/object:Word
    word: sign
    stem: sign
    docFrequency: 11.0
    docPositions:
    - 298
    - 322
    - 863
    - 868
    - 870
    - 1636
    - 1654
    - 2013
    - 2016
    - 2018
  difference: !ruby/object:Word
    word: difference
    stem: differ
    docFrequency: 17.0
    docPositions:
    - 298
    - 310
    - 322
    - 350
    - 528
    - 988
    - 1205
    - 1209
    - 1636
    - 1644
    - 1654
    - 1673
    - 1787
    - 2092
    - 2234
    - 2238
  jump: !ruby/object:Word
    word: jump
    stem: jump
    docFrequency: 28.0
    docPositions:
    - 298
    - 300
    - 310
    - 322
    - 350
    - 419
    - 436
    - 454
    - 481
    - 482
    - 1149
    - 1636
    - 1638
    - 1644
    - 1654
    - 1673
    - 1716
    - 1741
    - 1757
    - 1758
    - 2196
  back: !ruby/object:Word
    word: back
    stem: back
    docFrequency: 39.0
    docPositions:
    - 298
    - 300
    - 310
    - 322
    - 350
    - 398
    - 407
    - 436
    - 454
    - 481
    - 482
    - 518
    - 730
    - 930
    - 1047
    - 1636
    - 1638
    - 1644
    - 1654
    - 1673
    - 1703
    - 1708
    - 1727
    - 1741
    - 1757
    - 1758
    - 1781
    - 1921
    - 2054
    - 2126
  n: !ruby/object:Word
    word: n
    stem: n
    docFrequency: 56.0
    docPositions:
    - 299
    - 300
    - 310
    - 344
    - 345
    - 346
    - 347
    - 350
    - 974
    - 987
    - 1003
    - 1009
    - 1019
    - 1637
    - 1638
    - 1644
    - 1668
    - 1669
    - 1670
    - 1671
    - 1673
    - 2082
    - 2091
    - 2103
    - 2105
  zero: !ruby/object:Word
    word: zero
    stem: zero
    docFrequency: 19.0
    docPositions:
    - 299
    - 310
    - 350
    - 475
    - 869
    - 972
    - 1115
    - 1363
    - 1637
    - 1644
    - 1673
    - 1754
    - 2017
    - 2080
    - 2170
    - 2344
  divisor: !ruby/object:Word
    word: divisor
    stem: divisor
    docFrequency: 17.0
    docPositions:
    - 300
    - 312
    - 315
    - 317
    - 319
    - 1022
    - 1025
    - 1029
    - 1638
    - 1646
    - 1649
    - 1651
    - 2109
    - 2110
    - 2114
  fixed: !ruby/object:Word
    word: fixed
    stem: fix
    docFrequency: 11.0
    docPositions:
    - 301
    - 339
    - 950
    - 1052
    - 1069
    - 1639
    - 1665
    - 2068
    - 2129
    - 2142
  variable: !ruby/object:Word
    word: variable
    stem: variabl
    docFrequency: 9.0
    docPositions:
    - 302
    - 339
    - 450
    - 1108
    - 1640
    - 1665
    - 1737
    - 2165
  don: !ruby/object:Word
    word: don
    stem: don
    docFrequency: 9.0
    docPositions:
    - 304
    - 389
    - 588
    - 715
    - 1640
    - 1698
    - 1829
    - 1912
  invented: !ruby/object:Word
    word: invented
    stem: invent
    docFrequency: 3.0
    docPositions:
    - 304
    - 1640
  lavish: !ruby/object:Word
    word: lavish
    stem: lavish
    docFrequency: 3.0
    docPositions:
    - 305
    - 1641
  obeyed: !ruby/object:Word
    word: obeyed
    stem: obei
    docFrequency: 5.0
    docPositions:
    - 305
    - 412
    - 1641
    - 1711
  once: !ruby/object:Word
    word: once
    stem: onc
    docFrequency: 9.0
    docPositions:
    - 305
    - 533
    - 765
    - 1152
    - 1641
    - 1790
    - 1946
    - 2197
  seemed: !ruby/object:Word
    word: seemed
    stem: seem
    docFrequency: 5.0
    docPositions:
    - 305
    - 814
    - 1641
    - 1978
  inefficient: !ruby/object:Word
    word: inefficient
    stem: ineffici
    docFrequency: 3.0
    docPositions:
    - 306
    - 1642
  me: !ruby/object:Word
    word: me
    stem: me
    docFrequency: 5.0
    docPositions:
    - 306
    - 733
    - 1642
    - 1922
  elements: !ruby/object:Word
    word: elements
    stem: element
    docFrequency: 3.0
    docPositions:
    - 306
    - 1642
  must: !ruby/object:Word
    word: must
    stem: must
    docFrequency: 13.0
    docPositions:
    - 306
    - 313
    - 317
    - 361
    - 1166
    - 1179
    - 1642
    - 1647
    - 1649
    - 1678
    - 2207
    - 2216
  programthe: !ruby/object:Word
    word: programthe
    stem: programth
    docFrequency: 2.0
    docPositions:
    - 309
  explanatory: !ruby/object:Word
    word: explanatory
    stem: explanatori
    docFrequency: 3.0
    docPositions:
    - 309
    - 1643
  italics: !ruby/object:Word
    word: italics
    stem: ital
    docFrequency: 3.0
    docPositions:
    - 310
    - 1644
  cload: !ruby/object:Word
    word: cload
    stem: cload
    docFrequency: 17.0
    docPositions:
    - 310
    - 350
    - 1644
    - 1673
  sub: !ruby/object:Word
    word: sub
    stem: sub
    docFrequency: 13.0
    docPositions:
    - 310
    - 350
    - 1644
    - 1673
  testis: !ruby/object:Word
    word: testis
    stem: testi
    docFrequency: 9.0
    docPositions:
    - 310
    - 350
    - 1644
    - 1673
  add: !ruby/object:Word
    word: add
    stem: add
    docFrequency: 16.0
    docPositions:
    - 310
    - 350
    - 1007
    - 1012
    - 1019
    - 1644
    - 1673
    - 2106
    - 2108
  clstill: !ruby/object:Word
    word: clstill
    stem: clstill
    docFrequency: 5.0
    docPositions:
    - 310
    - 350
    - 1644
    - 1673
  cno: !ruby/object:Word
    word: cno
    stem: cno
    docFrequency: 3.0
    docPositions:
    - 310
    - 1644
  bn: !ruby/object:Word
    word: bn
    stem: bn
    docFrequency: 22.0
    docPositions:
    - 310
    - 314
    - 344
    - 346
    - 350
    - 436
    - 1644
    - 1648
    - 1668
    - 1670
    - 1673
  cl: !ruby/object:Word
    word: cl
    stem: cl
    docFrequency: 8.0
    docPositions:
    - 310
    - 418
    - 483
    - 1715
    - 1759
  init: !ruby/object:Word
    word: init
    stem: init
    docFrequency: 3.0
    docPositions:
    - 310
    - 350
  bnthe: !ruby/object:Word
    word: bnthe
    stem: bnthe
    docFrequency: 2.0
    docPositions:
    - 310
  show: !ruby/object:Word
    word: show
    stem: show
    docFrequency: 9.0
    docPositions:
    - 310
    - 328
    - 477
    - 778
    - 1644
    - 1658
    - 1756
    - 1955
  contained: !ruby/object:Word
    word: contained
    stem: contain
    docFrequency: 11.0
    docPositions:
    - 311
    - 358
    - 841
    - 1077
    - 1110
    - 1645
    - 1677
    - 1997
    - 2148
    - 2167
  less: !ruby/object:Word
    word: less
    stem: less
    docFrequency: 5.0
    docPositions:
    - 311
    - 1232
    - 1645
    - 2255
  strangely: !ruby/object:Word
    word: strangely
    stem: strang
    docFrequency: 3.0
    docPositions:
    - 311
    - 1645
  occurred: !ruby/object:Word
    word: occurred
    stem: occur
    docFrequency: 3.0
    docPositions:
    - 311
    - 1645
  therefore: !ruby/object:Word
    word: therefore
    stem: therefor
    docFrequency: 15.0
    docPositions:
    - 312
    - 436
    - 439
    - 460
    - 471
    - 717
    - 1312
    - 1646
    - 1730
    - 1745
    - 1752
    - 1914
    - 2309
  end: !ruby/object:Word
    word: end
    stem: end
    docFrequency: 17.0
    docPositions:
    - 312
    - 511
    - 527
    - 754
    - 767
    - 1025
    - 1120
    - 1293
    - 1646
    - 1776
    - 1786
    - 1939
    - 1948
    - 2110
    - 2175
    - 2294
  subtractions: !ruby/object:Word
    word: subtractions
    stem: subtract
    docFrequency: 4.0
    docPositions:
    - 312
    - 436
    - 1646
  sequence: !ruby/object:Word
    word: sequence
    stem: sequenc
    docFrequency: 7.0
    docPositions:
    - 313
    - 340
    - 944
    - 1647
    - 1666
    - 2062
  correction: !ruby/object:Word
    word: correction
    stem: correct
    docFrequency: 5.0
    docPositions:
    - 313
    - 879
    - 1647
    - 2023
  overshoot: !ruby/object:Word
    word: overshoot
    stem: overshoot
    docFrequency: 5.0
    docPositions:
    - 313
    - 1230
    - 1647
    - 2253
  cannot: !ruby/object:Word
    word: cannot
    stem: cannot
    docFrequency: 11.0
    docPositions:
    - 314
    - 344
    - 373
    - 382
    - 421
    - 1648
    - 1668
    - 1686
    - 1693
    - 1718
  postponed: !ruby/object:Word
    word: postponed
    stem: postpon
    docFrequency: 3.0
    docPositions:
    - 314
    - 1648
  etc: !ruby/object:Word
    word: etc
    stem: etc
    docFrequency: 3.0
    docPositions:
    - 315
    - 1649
  furthermore: !ruby/object:Word
    word: furthermore
    stem: furthermor
    docFrequency: 9.0
    docPositions:
    - 317
    - 360
    - 635
    - 949
    - 1649
    - 1677
    - 1860
    - 2067
  preceded: !ruby/object:Word
    word: preceded
    stem: preced
    docFrequency: 7.0
    docPositions:
    - 317
    - 319
    - 1197
    - 1649
    - 1651
    - 2228
  seems: !ruby/object:Word
    word: seems
    stem: seem
    docFrequency: 13.0
    docPositions:
    - 318
    - 403
    - 439
    - 465
    - 484
    - 611
    - 1650
    - 1704
    - 1730
    - 1748
    - 1760
    - 1844
  hand: !ruby/object:Word
    word: hand
    stem: hand
    docFrequency: 13.0
    docPositions:
    - 319
    - 462
    - 826
    - 887
    - 888
    - 1101
    - 1651
    - 1745
    - 1986
    - 2029
    - 2030
    - 2162
  bothered: !ruby/object:Word
    word: bothered
    stem: bother
    docFrequency: 3.0
    docPositions:
    - 321
    - 1653
  main: !ruby/object:Word
    word: main
    stem: main
    docFrequency: 33.0
    docPositions:
    - 321
    - 397
    - 407
    - 408
    - 412
    - 462
    - 520
    - 604
    - 843
    - 974
    - 981
    - 1122
    - 1228
    - 1309
    - 1313
    - 1322
    - 1653
    - 1702
    - 1708
    - 1709
    - 1711
    - 1745
    - 1783
    - 1839
    - 1999
    - 2082
    - 2087
    - 2177
    - 2251
    - 2306
    - 2310
    - 2317
  loop: !ruby/object:Word
    word: loop
    stem: loop
    docFrequency: 23.0
    docPositions:
    - 321
    - 325
    - 407
    - 408
    - 412
    - 432
    - 436
    - 462
    - 1221
    - 1653
    - 1655
    - 1708
    - 1709
    - 1711
    - 1725
    - 1727
    - 1745
    - 2246
  ignoring: !ruby/object:Word
    word: ignoring
    stem: ignor
    docFrequency: 3.0
    docPositions:
    - 325
    - 1655
  repetitions: !ruby/object:Word
    word: repetitions
    stem: repetit
    docFrequency: 3.0
    docPositions:
    - 325
    - 1655
  inner: !ruby/object:Word
    word: inner
    stem: inner
    docFrequency: 11.0
    docPositions:
    - 325
    - 431
    - 436
    - 1655
    - 1724
    - 1727
  immediately: !ruby/object:Word
    word: immediately
    stem: immedi
    docFrequency: 9.0
    docPositions:
    - 327
    - 574
    - 583
    - 735
    - 1657
    - 1819
    - 1826
    - 1924
  intended: !ruby/object:Word
    word: intended
    stem: intend
    docFrequency: 3.0
    docPositions:
    - 328
    - 1658
  clarity: !ruby/object:Word
    word: clarity
    stem: clariti
    docFrequency: 3.0
    docPositions:
    - 328
    - 1658
  part: !ruby/object:Word
    word: part
    stem: part
    docFrequency: 21.0
    docPositions:
    - 329
    - 572
    - 583
    - 657
    - 694
    - 782
    - 1118
    - 1237
    - 1320
    - 1463
    - 1659
    - 1817
    - 1826
    - 1876
    - 1899
    - 1958
    - 2173
    - 2258
    - 2315
    - 2378
  larger: !ruby/object:Word
    word: larger
    stem: larger
    docFrequency: 7.0
    docPositions:
    - 329
    - 864
    - 924
    - 1659
    - 2014
    - 2050
  replacing: !ruby/object:Word
    word: replacing
    stem: replac
    docFrequency: 7.0
    docPositions:
    - 330
    - 1348
    - 1359
    - 1660
    - 2333
    - 2342
  concurs: !ruby/object:Word
    word: concurs
    stem: concur
    docFrequency: 3.0
    docPositions:
    - 332
    - 1660
  audio: !ruby/object:Word
    word: audio
    stem: audio
    docFrequency: 3.0
    docPositions:
    - 332
    - 1660
  mind: !ruby/object:Word
    word: mind
    stem: mind
    docFrequency: 3.0
    docPositions:
    - 332
    - 1660
  similarly: !ruby/object:Word
    word: similarly
    stem: similarli
    docFrequency: 3.0
    docPositions:
    - 332
    - 1660
  agrees: !ruby/object:Word
    word: agrees
    stem: agre
    docFrequency: 7.0
    docPositions:
    - 333
    - 360
    - 464
    - 1661
    - 1677
    - 1747
  cleared: !ruby/object:Word
    word: cleared
    stem: clear
    docFrequency: 5.0
    docPositions:
    - 333
    - 1339
    - 1661
    - 2328
  accumulator: !ruby/object:Word
    word: accumulator
    stem: accumul
    docFrequency: 21.0
    docPositions:
    - 333
    - 350
    - 422
    - 867
    - 975
    - 989
    - 990
    - 992
    - 993
    - 1022
    - 1661
    - 1673
    - 1719
    - 2015
    - 2083
    - 2093
    - 2094
    - 2096
    - 2097
    - 2109
  illustrate: !ruby/object:Word
    word: illustrate
    stem: illustr
    docFrequency: 3.0
    docPositions:
    - 334
    - 1662
  sound: !ruby/object:Word
    word: sound
    stem: sound
    docFrequency: 7.0
    docPositions:
    - 334
    - 1157
    - 1271
    - 1662
    - 2202
    - 2281
  practice: !ruby/object:Word
    word: practice
    stem: practic
    docFrequency: 5.0
    docPositions:
    - 334
    - 1286
    - 1662
    - 2292
  even: !ruby/object:Word
    word: even
    stem: even
    docFrequency: 17.0
    docPositions:
    - 334
    - 537
    - 551
    - 674
    - 744
    - 1178
    - 1364
    - 1373
    - 1662
    - 1792
    - 1802
    - 1887
    - 1931
    - 2215
    - 2345
    - 2350
  quite: !ruby/object:Word
    word: quite
    stem: quit
    docFrequency: 19.0
    docPositions:
    - 334
    - 397
    - 445
    - 477
    - 505
    - 610
    - 632
    - 702
    - 766
    - 1662
    - 1702
    - 1734
    - 1756
    - 1772
    - 1843
    - 1859
    - 1903
    - 1947
  unnecessary: !ruby/object:Word
    word: unnecessary
    stem: unnecessari
    docFrequency: 3.0
    docPositions:
    - 334
    - 1662
  case: !ruby/object:Word
    word: case
    stem: case
    docFrequency: 9.0
    docPositions:
    - 335
    - 637
    - 751
    - 932
    - 1663
    - 1862
    - 1936
    - 2056
  respects: !ruby/object:Word
    word: respects
    stem: respect
    docFrequency: 3.0
    docPositions:
    - 337
    - 1663
  constraints: !ruby/object:Word
    word: constraints
    stem: constraint
    docFrequency: 3.0
    docPositions:
    - 337
    - 1663
  uses: !ruby/object:Word
    word: uses
    stem: us
    docFrequency: 5.0
    docPositions:
    - 338
    - 372
    - 1664
    - 1685
  follow: !ruby/object:Word
    word: follow
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 338
    - 1664
  consecutively: !ruby/object:Word
    word: consecutively
    stem: consecut
    docFrequency: 3.0
    docPositions:
    - 338
    - 1664
  except: !ruby/object:Word
    word: except
    stem: except
    docFrequency: 3.0
    docPositions:
    - 338
    - 1664
  indiscriminately: !ruby/object:Word
    word: indiscriminately
    stem: indiscrimin
    docFrequency: 3.0
    docPositions:
    - 339
    - 1665
  believe: !ruby/object:Word
    word: believe
    stem: believ
    docFrequency: 7.0
    docPositions:
    - 339
    - 641
    - 1363
    - 1665
    - 1864
    - 2344
  consecutive: !ruby/object:Word
    word: consecutive
    stem: consecut
    docFrequency: 5.0
    docPositions:
    - 340
    - 1205
    - 1666
    - 2234
  bit: !ruby/object:Word
    word: bit
    stem: bit
    docFrequency: 49.0
    docPositions:
    - 340
    - 474
    - 482
    - 627
    - 829
    - 867
    - 963
    - 976
    - 977
    - 978
    - 1002
    - 1003
    - 1033
    - 1034
    - 1041
    - 1042
    - 1054
    - 1060
    - 1066
    - 1078
    - 1138
    - 1145
    - 1228
    - 1666
    - 1753
    - 1758
    - 1856
    - 1989
    - 2015
    - 2075
    - 2084
    - 2085
    - 2086
    - 2102
    - 2103
    - 2116
    - 2117
    - 2120
    - 2121
    - 2131
    - 2135
    - 2141
    - 2149
    - 2187
    - 2192
    - 2251
  solutions: !ruby/object:Word
    word: solutions
    stem: solut
    docFrequency: 3.0
    docPositions:
    - 343
    - 1667
  disimproving: !ruby/object:Word
    word: disimproving
    stem: disimprov
    docFrequency: 3.0
    docPositions:
    - 343
    - 1667
  meets: !ruby/object:Word
    word: meets
    stem: meet
    docFrequency: 3.0
    docPositions:
    - 344
    - 1668
  conditions: !ruby/object:Word
    word: conditions
    stem: condit
    docFrequency: 5.0
    docPositions:
    - 344
    - 1051
    - 1668
    - 2128
  example: !ruby/object:Word
    word: example
    stem: exampl
    docFrequency: 13.0
    docPositions:
    - 344
    - 670
    - 969
    - 1216
    - 1235
    - 1294
    - 1668
    - 1885
    - 2079
    - 2241
    - 2256
    - 2295
  storing: !ruby/object:Word
    word: storing
    stem: store
    docFrequency: 3.0
    docPositions:
    - 344
    - 1668
  forming: !ruby/object:Word
    word: forming
    stem: form
    docFrequency: 7.0
    docPositions:
    - 345
    - 346
    - 1669
    - 1670
  testing: !ruby/object:Word
    word: testing
    stem: test
    docFrequency: 17.0
    docPositions:
    - 345
    - 413
    - 1102
    - 1347
    - 1348
    - 1352
    - 1355
    - 1669
    - 1712
    - 2163
    - 2332
    - 2333
    - 2337
    - 2338
  leaves: !ruby/object:Word
    word: leaves
    stem: leav
    docFrequency: 3.0
    docPositions:
    - 346
    - 1670
  conclude: !ruby/object:Word
    word: conclude
    stem: conclud
    docFrequency: 3.0
    docPositions:
    - 347
    - 1671
  least: !ruby/object:Word
    word: least
    stem: least
    docFrequency: 21.0
    docPositions:
    - 348
    - 439
    - 588
    - 707
    - 861
    - 977
    - 1002
    - 1026
    - 1027
    - 1169
    - 1672
    - 1730
    - 1829
    - 1908
    - 2011
    - 2085
    - 2102
    - 2111
    - 2112
    - 2208
  approximation: !ruby/object:Word
    word: approximation
    stem: approxim
    docFrequency: 3.0
    docPositions:
    - 348
    - 1672
  versionhere: !ruby/object:Word
    word: versionhere
    stem: versionher
    docFrequency: 2.0
    docPositions:
    - 349
  synthesised: !ruby/object:Word
    word: synthesised
    stem: synthesis
    docFrequency: 3.0
    docPositions:
    - 349
    - 1672
  italicised: !ruby/object:Word
    word: italicised
    stem: italicis
    docFrequency: 3.0
    docPositions:
    - 350
    - 1673
  clyes: !ruby/object:Word
    word: clyes
    stem: clye
    docFrequency: 3.0
    docPositions:
    - 350
    - 1673
  clno: !ruby/object:Word
    word: clno
    stem: clno
    docFrequency: 3.0
    docPositions:
    - 350
    - 1673
  text: !ruby/object:Word
    word: text
    stem: text
    docFrequency: 7.0
    docPositions:
    - 350
    - 776
    - 777
    - 1673
    - 1953
    - 1954
  stopload: !ruby/object:Word
    word: stopload
    stem: stopload
    docFrequency: 3.0
    docPositions:
    - 350
    - 1673
  background: !ruby/object:Word
    word: background
    stem: background
    docFrequency: 3.0
    docPositions:
    - 350
    - 401
  according: !ruby/object:Word
    word: according
    stem: accord
    docFrequency: 9.0
    docPositions:
    - 353
    - 377
    - 867
    - 1004
    - 1674
    - 1688
    - 2015
    - 2104
  book: !ruby/object:Word
    word: book
    stem: book
    docFrequency: 3.0
    docPositions:
    - 353
    - 1674
  passage: !ruby/object:Word
    word: passage
    stem: passag
    docFrequency: 3.0
    docPositions:
    - 353
    - 1674
  proper: !ruby/object:Word
    word: proper
    stem: proper
    docFrequency: 3.0
    docPositions:
    - 355
    - 1674
  single: !ruby/object:Word
    word: single
    stem: singl
    docFrequency: 13.0
    docPositions:
    - 355
    - 649
    - 841
    - 1010
    - 1033
    - 1138
    - 1674
    - 1870
    - 1997
    - 2106
    - 2116
    - 2187
  downwards: !ruby/object:Word
    word: downwards
    stem: downward
    docFrequency: 3.0
    docPositions:
    - 356
    - 1675
  thus: !ruby/object:Word
    word: thus
    stem: thu
    docFrequency: 9.0
    docPositions:
    - 356
    - 871
    - 1124
    - 1448
    - 1675
    - 2019
    - 2177
    - 2371
  tested: !ruby/object:Word
    word: tested
    stem: test
    docFrequency: 11.0
    docPositions:
    - 357
    - 377
    - 416
    - 422
    - 476
    - 1676
    - 1688
    - 1715
    - 1719
    - 1755
  involving: !ruby/object:Word
    word: involving
    stem: involv
    docFrequency: 5.0
    docPositions:
    - 357
    - 945
    - 1676
    - 2063
  million: !ruby/object:Word
    word: million
    stem: million
    docFrequency: 11.0
    docPositions:
    - 357
    - 371
    - 463
    - 464
    - 466
    - 1676
    - 1684
    - 1746
    - 1747
    - 1749
  operations: !ruby/object:Word
    word: operations
    stem: oper
    docFrequency: 20.0
    docPositions:
    - 357
    - 360
    - 371
    - 945
    - 1004
    - 1019
    - 1115
    - 1132
    - 1148
    - 1149
    - 1676
    - 1677
    - 1684
    - 2063
    - 2104
    - 2170
    - 2183
    - 2195
    - 2196
  correct: !ruby/object:Word
    word: correct
    stem: correct
    docFrequency: 13.0
    docPositions:
    - 357
    - 361
    - 458
    - 484
    - 888
    - 1295
    - 1676
    - 1678
    - 1743
    - 1760
    - 2030
    - 2296
  obtained: !ruby/object:Word
    word: obtained
    stem: obtain
    docFrequency: 7.0
    docPositions:
    - 357
    - 1171
    - 1202
    - 1676
    - 2210
    - 2231
  minute: !ruby/object:Word
    word: minute
    stem: minut
    docFrequency: 9.0
    docPositions:
    - 358
    - 426
    - 438
    - 1422
    - 1677
    - 1721
    - 1729
    - 2364
  entries: !ruby/object:Word
    word: entries
    stem: entri
    docFrequency: 3.0
    docPositions:
    - 358
    - 1677
  says: !ruby/object:Word
    word: says
    stem: sai
    docFrequency: 3.0
    docPositions:
    - 360
    - 1677
  meant: !ruby/object:Word
    word: meant
    stem: meant
    docFrequency: 7.0
    docPositions:
    - 360
    - 407
    - 495
    - 1677
    - 1708
    - 1766
  accesses: !ruby/object:Word
    word: accesses
    stem: access
    docFrequency: 7.0
    docPositions:
    - 360
    - 462
    - 464
    - 1677
    - 1745
    - 1747
  conform: !ruby/object:Word
    word: conform
    stem: conform
    docFrequency: 3.0
    docPositions:
    - 362
    - 1679
  recently: !ruby/object:Word
    word: recently
    stem: recent
    docFrequency: 3.0
    docPositions:
    - 364
    - 1679
  thought: !ruby/object:Word
    word: thought
    stem: thought
    docFrequency: 9.0
    docPositions:
    - 364
    - 576
    - 608
    - 698
    - 1679
    - 1821
    - 1841
    - 1901
  digit: !ruby/object:Word
    word: digit
    stem: digit
    docFrequency: 51.0
    docPositions:
    - 364
    - 367
    - 368
    - 375
    - 381
    - 385
    - 386
    - 387
    - 389
    - 392
    - 393
    - 398
    - 427
    - 436
    - 439
    - 445
    - 459
    - 482
    - 851
    - 1036
    - 1679
    - 1682
    - 1683
    - 1688
    - 1692
    - 1694
    - 1695
    - 1696
    - 1698
    - 1699
    - 1700
    - 1703
    - 1722
    - 1727
    - 1730
    - 1734
    - 1744
    - 1758
    - 2005
    - 2117
  microseconds: !ruby/object:Word
    word: microseconds
    stem: microsecond
    docFrequency: 33.0
    docPositions:
    - 365
    - 375
    - 387
    - 393
    - 427
    - 436
    - 448
    - 453
    - 454
    - 457
    - 1044
    - 1114
    - 1680
    - 1688
    - 1696
    - 1700
    - 1722
    - 1727
    - 1735
    - 1740
    - 1741
    - 1742
    - 2123
    - 2169
  bar: !ruby/object:Word
    word: bar
    stem: bar
    docFrequency: 19.0
    docPositions:
    - 365
    - 366
    - 374
    - 386
    - 387
    - 392
    - 436
    - 1680
    - 1681
    - 1687
    - 1695
    - 1696
    - 1699
    - 1727
  milliseconds: !ruby/object:Word
    word: milliseconds
    stem: millisecond
    docFrequency: 15.0
    docPositions:
    - 366
    - 372
    - 386
    - 392
    - 436
    - 553
    - 1681
    - 1685
    - 1695
    - 1699
    - 1727
    - 1804
  figures: !ruby/object:Word
    word: figures
    stem: figur
    docFrequency: 5.0
    docPositions:
    - 366
    - 434
    - 1681
    - 1727
  consistent: !ruby/object:Word
    word: consistent
    stem: consist
    docFrequency: 5.0
    docPositions:
    - 366
    - 1356
    - 1681
    - 2339
  each: !ruby/object:Word
    word: each
    stem: each
    docFrequency: 26.0
    docPositions:
    - 366
    - 367
    - 371
    - 423
    - 471
    - 882
    - 1054
    - 1060
    - 1077
    - 1084
    - 1085
    - 1088
    - 1468
    - 1681
    - 1682
    - 1684
    - 1720
    - 1752
    - 2024
    - 2131
    - 2135
    - 2148
    - 2153
    - 2154
    - 2155
  beats: !ruby/object:Word
    word: beats
    stem: beat
    docFrequency: 3.0
    docPositions:
    - 367
    - 1682
  beat: !ruby/object:Word
    word: beat
    stem: beat
    docFrequency: 3.0
    docPositions:
    - 367
    - 1682
  periods: !ruby/object:Word
    word: periods
    stem: period
    docFrequency: 10.0
    docPositions:
    - 368
    - 387
    - 436
    - 1683
    - 1696
    - 1727
  plus: !ruby/object:Word
    word: plus
    stem: plu
    docFrequency: 13.0
    docPositions:
    - 368
    - 646
    - 930
    - 1041
    - 1209
    - 1422
    - 1683
    - 1867
    - 2054
    - 2120
    - 2238
    - 2364
  timebase: !ruby/object:Word
    word: timebase
    stem: timebas
    docFrequency: 3.0
    docPositions:
    - 368
    - 1683
  flyback: !ruby/object:Word
    word: flyback
    stem: flyback
    docFrequency: 5.0
    docPositions:
    - 368
    - 392
    - 1683
    - 1699
  approx: !ruby/object:Word
    word: approx
    stem: approx
    docFrequency: 3.0
    docPositions:
    - 371
    - 1684
  takes: !ruby/object:Word
    word: takes
    stem: take
    docFrequency: 3.0
    docPositions:
    - 371
    - 1684
  ms: !ruby/object:Word
    word: ms
    stem: ms
    docFrequency: 5.0
    docPositions:
    - 371
    - 1025
    - 1684
    - 2110
  similar: !ruby/object:Word
    word: similar
    stem: similar
    docFrequency: 15.0
    docPositions:
    - 372
    - 543
    - 889
    - 936
    - 973
    - 1124
    - 1242
    - 1685
    - 1798
    - 2031
    - 2058
    - 2081
    - 2177
    - 2261
  estimate: !ruby/object:Word
    word: estimate
    stem: estim
    docFrequency: 13.0
    docPositions:
    - 372
    - 381
    - 388
    - 460
    - 1177
    - 1178
    - 1685
    - 1692
    - 1697
    - 1745
    - 2214
    - 2215
  figure: !ruby/object:Word
    word: figure
    stem: figur
    docFrequency: 13.0
    docPositions:
    - 372
    - 447
    - 449
    - 457
    - 464
    - 466
    - 1685
    - 1734
    - 1736
    - 1742
    - 1747
    - 1749
  measured: !ruby/object:Word
    word: measured
    stem: measur
    docFrequency: 16.0
    docPositions:
    - 373
    - 374
    - 380
    - 389
    - 433
    - 436
    - 886
    - 1229
    - 1686
    - 1687
    - 1691
    - 1698
    - 1726
    - 2028
    - 2252
  calculation: !ruby/object:Word
    word: calculation
    stem: calcul
    docFrequency: 3.0
    docPositions:
    - 373
    - 1686
  presumption: !ruby/object:Word
    word: presumption
    stem: presumpt
    docFrequency: 3.0
    docPositions:
    - 374
    - 1687
  implies: !ruby/object:Word
    word: implies
    stem: impli
    docFrequency: 7.0
    docPositions:
    - 375
    - 427
    - 452
    - 1688
    - 1722
    - 1739
  between: !ruby/object:Word
    word: between
    stem: between
    docFrequency: 27.0
    docPositions:
    - 377
    - 423
    - 436
    - 437
    - 589
    - 846
    - 919
    - 963
    - 981
    - 1053
    - 1183
    - 1301
    - 1445
    - 1688
    - 1720
    - 1727
    - 1728
    - 1830
    - 2002
    - 2047
    - 2075
    - 2087
    - 2130
    - 2218
    - 2302
    - 2368
  turing: !ruby/object:Word
    word: turing
    stem: ture
    docFrequency: 5.0
    docPositions:
    - 378
    - 1441
    - 1689
    - 2367
  long: !ruby/object:Word
    word: long
    stem: long
    docFrequency: 23.0
    docPositions:
    - 378
    - 470
    - 733
    - 736
    - 973
    - 989
    - 991
    - 1050
    - 1087
    - 1189
    - 1340
    - 1689
    - 1751
    - 1922
    - 1925
    - 2081
    - 2093
    - 2095
    - 2127
    - 2154
    - 2222
    - 2329
  division: !ruby/object:Word
    word: division
    stem: divis
    docFrequency: 13.0
    docPositions:
    - 378
    - 727
    - 832
    - 1032
    - 1132
    - 1268
    - 1689
    - 1920
    - 1992
    - 2115
    - 2183
    - 2278
  corrected: !ruby/object:Word
    word: corrected
    stem: correct
    docFrequency: 3.0
    docPositions:
    - 378
    - 1689
  noted: !ruby/object:Word
    word: noted
    stem: note
    docFrequency: 5.0
    docPositions:
    - 378
    - 448
    - 1689
    - 1735
  divided: !ruby/object:Word
    word: divided
    stem: divid
    docFrequency: 5.0
    docPositions:
    - 378
    - 379
    - 1689
    - 1690
  took: !ruby/object:Word
    word: took
    stem: took
    docFrequency: 23.0
    docPositions:
    - 379
    - 437
    - 553
    - 778
    - 862
    - 1185
    - 1229
    - 1296
    - 1305
    - 1351
    - 1690
    - 1728
    - 1804
    - 1955
    - 2012
    - 2220
    - 2252
    - 2297
    - 2304
    - 2336
  seconds: !ruby/object:Word
    word: seconds
    stem: second
    docFrequency: 19.0
    docPositions:
    - 379
    - 380
    - 436
    - 471
    - 650
    - 1219
    - 1220
    - 1225
    - 1229
    - 1690
    - 1691
    - 1727
    - 1752
    - 1871
    - 2244
    - 2245
    - 2248
    - 2252
  doubt: !ruby/object:Word
    word: doubt
    stem: doubt
    docFrequency: 5.0
    docPositions:
    - 381
    - 1050
    - 1692
    - 2127
  give: !ruby/object:Word
    word: give
    stem: give
    docFrequency: 5.0
    docPositions:
    - 381
    - 519
    - 1692
    - 1782
  useful: !ruby/object:Word
    word: useful
    stem: us
    docFrequency: 9.0
    docPositions:
    - 382
    - 1016
    - 1127
    - 1180
    - 1693
    - 2107
    - 2180
    - 2217
  accuracy: !ruby/object:Word
    word: accuracy
    stem: accuraci
    docFrequency: 13.0
    docPositions:
    - 382
    - 901
    - 948
    - 1145
    - 1204
    - 1230
    - 1693
    - 2035
    - 2066
    - 2192
    - 2233
    - 2253
  assume: !ruby/object:Word
    word: assume
    stem: assum
    docFrequency: 3.0
    docPositions:
    - 382
    - 1693
  hadn: !ruby/object:Word
    word: hadn
    stem: hadn
    docFrequency: 3.0
    docPositions:
    - 382
    - 1693
  changed: !ruby/object:Word
    word: changed
    stem: chang
    docFrequency: 11.0
    docPositions:
    - 382
    - 383
    - 949
    - 1311
    - 1693
    - 1694
    - 2067
    - 2308
  often: !ruby/object:Word
    word: often
    stem: often
    docFrequency: 5.0
    docPositions:
    - 383
    - 851
    - 1694
    - 2005
  socks: !ruby/object:Word
    word: socks
    stem: sock
    docFrequency: 3.0
    docPositions:
    - 383
    - 1694
  august: !ruby/object:Word
    word: august
    stem: august
    docFrequency: 5.0
    docPositions:
    - 385
    - 457
    - 1694
    - 1742
  place: !ruby/object:Word
    word: place
    stem: place
    docFrequency: 19.0
    docPositions:
    - 385
    - 437
    - 545
    - 562
    - 780
    - 1028
    - 1296
    - 1305
    - 1430
    - 1694
    - 1728
    - 1798
    - 1811
    - 1957
    - 2113
    - 2297
    - 2304
    - 2364
  total: !ruby/object:Word
    word: total
    stem: total
    docFrequency: 11.0
    docPositions:
    - 385
    - 463
    - 464
    - 721
    - 1066
    - 1694
    - 1746
    - 1747
    - 1916
    - 2141
  bars: !ruby/object:Word
    word: bars
    stem: bar
    docFrequency: 7.0
    docPositions:
    - 386
    - 421
    - 432
    - 1695
    - 1718
    - 1725
  per: !ruby/object:Word
    word: per
    stem: per
    docFrequency: 13.0
    docPositions:
    - 386
    - 387
    - 415
    - 421
    - 462
    - 464
    - 1695
    - 1696
    - 1714
    - 1718
    - 1745
    - 1747
  implied: !ruby/object:Word
    word: implied
    stem: impli
    docFrequency: 3.0
    docPositions:
    - 387
    - 1696
  paper: !ruby/object:Word
    word: paper
    stem: paper
    docFrequency: 13.0
    docPositions:
    - 388
    - 556
    - 557
    - 559
    - 646
    - 1140
    - 1697
    - 1805
    - 1806
    - 1808
    - 1867
    - 2189
  tolerance: !ruby/object:Word
    word: tolerance
    stem: toler
    docFrequency: 5.0
    docPositions:
    - 388
    - 436
    - 1697
    - 1727
  arising: !ruby/object:Word
    word: arising
    stem: aris
    docFrequency: 3.0
    docPositions:
    - 388
    - 1697
  probable: !ruby/object:Word
    word: probable
    stem: probabl
    docFrequency: 3.0
    docPositions:
    - 388
    - 1697
  error: !ruby/object:Word
    word: error
    stem: error
    docFrequency: 19.0
    docPositions:
    - 388
    - 867
    - 868
    - 871
    - 879
    - 887
    - 888
    - 1192
    - 1204
    - 1697
    - 2015
    - 2016
    - 2019
    - 2023
    - 2029
    - 2030
    - 2225
    - 2233
  assumed: !ruby/object:Word
    word: assumed
    stem: assum
    docFrequency: 5.0
    docPositions:
    - 389
    - 798
    - 1698
    - 1966
  states: !ruby/object:Word
    word: states
    stem: state
    docFrequency: 11.0
    docPositions:
    - 391
    - 575
    - 583
    - 589
    - 592
    - 1698
    - 1820
    - 1826
    - 1830
    - 1833
  word: !ruby/object:Word
    word: word
    stem: word
    docFrequency: 19.0
    docPositions:
    - 391
    - 829
    - 868
    - 948
    - 961
    - 963
    - 1055
    - 1114
    - 1228
    - 1698
    - 1989
    - 2016
    - 2066
    - 2073
    - 2075
    - 2132
    - 2169
    - 2251
  length: !ruby/object:Word
    word: length
    stem: length
    docFrequency: 21.0
    docPositions:
    - 391
    - 829
    - 871
    - 948
    - 961
    - 990
    - 991
    - 1033
    - 1090
    - 1203
    - 1698
    - 1989
    - 2019
    - 2066
    - 2073
    - 2094
    - 2095
    - 2116
    - 2157
    - 2232
  whether: !ruby/object:Word
    word: whether
    stem: whether
    docFrequency: 9.0
    docPositions:
    - 394
    - 421
    - 725
    - 976
    - 1701
    - 1718
    - 1918
    - 2084
  noticed: !ruby/object:Word
    word: noticed
    stem: notic
    docFrequency: 3.0
    docPositions:
    - 394
    - 1701
  dates: !ruby/object:Word
    word: dates
    stem: date
    docFrequency: 5.0
    docPositions:
    - 396
    - 646
    - 1701
    - 1867
  experimented: !ruby/object:Word
    word: experimented
    stem: experi
    docFrequency: 3.0
    docPositions:
    - 396
    - 1701
  different: !ruby/object:Word
    word: different
    stem: differ
    docFrequency: 31.0
    docPositions:
    - 396
    - 431
    - 505
    - 593
    - 596
    - 632
    - 636
    - 643
    - 684
    - 998
    - 1027
    - 1029
    - 1091
    - 1125
    - 1701
    - 1724
    - 1772
    - 1834
    - 1835
    - 1859
    - 1861
    - 1866
    - 1893
    - 2100
    - 2112
    - 2114
    - 2158
    - 2178
  ways: !ruby/object:Word
    word: ways
    stem: wai
    docFrequency: 5.0
    docPositions:
    - 396
    - 530
    - 1701
    - 1789
  digging: !ruby/object:Word
    word: digging
    stem: dig
    docFrequency: 3.0
    docPositions:
    - 396
    - 1701
  filling: !ruby/object:Word
    word: filling
    stem: fill
    docFrequency: 3.0
    docPositions:
    - 397
    - 1702
  wells: !ruby/object:Word
    word: wells
    stem: well
    docFrequency: 3.0
    docPositions:
    - 397
    - 1702
  face: !ruby/object:Word
    word: face
    stem: face
    docFrequency: 3.0
    docPositions:
    - 397
    - 1702
  storage: !ruby/object:Word
    word: storage
    stem: storag
    docFrequency: 15.0
    docPositions:
    - 397
    - 653
    - 835
    - 955
    - 1097
    - 1207
    - 1217
    - 1702
    - 1872
    - 1993
    - 2069
    - 2160
    - 2236
    - 2242
  particular: !ruby/object:Word
    word: particular
    stem: particular
    docFrequency: 9.0
    docPositions:
    - 398
    - 451
    - 716
    - 725
    - 1703
    - 1738
    - 1913
    - 1918
  tests: !ruby/object:Word
    word: tests
    stem: test
    docFrequency: 7.0
    docPositions:
    - 398
    - 1356
    - 1362
    - 1703
    - 2339
    - 2343
  afterwards: !ruby/object:Word
    word: afterwards
    stem: afterward
    docFrequency: 3.0
    docPositions:
    - 399
    - 1704
  section: !ruby/object:Word
    word: section
    stem: section
    docFrequency: 3.0
    docPositions:
    - 403
    - 1704
  above: !ruby/object:Word
    word: above
    stem: abov
    docFrequency: 5.0
    docPositions:
    - 403
    - 415
    - 1704
    - 1714
  provide: !ruby/object:Word
    word: provide
    stem: provid
    docFrequency: 7.0
    docPositions:
    - 403
    - 529
    - 1141
    - 1704
    - 1788
    - 2190
  valid: !ruby/object:Word
    word: valid
    stem: valid
    docFrequency: 3.0
    docPositions:
    - 403
    - 1704
  reasoning: !ruby/object:Word
    word: reasoning
    stem: reason
    docFrequency: 3.0
    docPositions:
    - 404
    - 1705
  shown: !ruby/object:Word
    word: shown
    stem: shown
    docFrequency: 9.0
    docPositions:
    - 404
    - 415
    - 484
    - 1004
    - 1705
    - 1714
    - 1760
    - 2104
  proviso: !ruby/object:Word
    word: proviso
    stem: proviso
    docFrequency: 3.0
    docPositions:
    - 405
    - 1706
  evidence: !ruby/object:Word
    word: evidence
    stem: evid
    docFrequency: 5.0
    docPositions:
    - 405
    - 428
    - 1706
    - 1723
  choose: !ruby/object:Word
    word: choose
    stem: choos
    docFrequency: 5.0
    docPositions:
    - 406
    - 423
    - 1707
    - 1720
  either: !ruby/object:Word
    word: either
    stem: either
    docFrequency: 35.0
    docPositions:
    - 406
    - 408
    - 419
    - 428
    - 458
    - 612
    - 838
    - 868
    - 961
    - 986
    - 991
    - 1028
    - 1033
    - 1036
    - 1226
    - 1237
    - 1707
    - 1709
    - 1716
    - 1723
    - 1743
    - 1845
    - 1996
    - 2016
    - 2073
    - 2090
    - 2095
    - 2113
    - 2116
    - 2117
    - 2249
    - 2258
  jumping: !ruby/object:Word
    word: jumping
    stem: jump
    docFrequency: 3.0
    docPositions:
    - 407
    - 1708
  consisted: !ruby/object:Word
    word: consisted
    stem: consist
    docFrequency: 11.0
    docPositions:
    - 408
    - 801
    - 989
    - 1065
    - 1113
    - 1709
    - 1969
    - 2093
    - 2140
    - 2168
  misleading: !ruby/object:Word
    word: misleading
    stem: mislead
    docFrequency: 3.0
    docPositions:
    - 411
    - 1710
  context: !ruby/object:Word
    word: context
    stem: context
    docFrequency: 3.0
    docPositions:
    - 411
    - 1710
  interested: !ruby/object:Word
    word: interested
    stem: interest
    docFrequency: 7.0
    docPositions:
    - 411
    - 1393
    - 1455
    - 1710
    - 2356
    - 2372
  iteration: !ruby/object:Word
    word: iteration
    stem: iter
    docFrequency: 9.0
    docPositions:
    - 412
    - 423
    - 463
    - 464
    - 1711
    - 1720
    - 1746
    - 1747
  values: !ruby/object:Word
    word: values
    stem: valu
    docFrequency: 9.0
    docPositions:
    - 413
    - 433
    - 1004
    - 1205
    - 1712
    - 1726
    - 2104
    - 2234
  executed: !ruby/object:Word
    word: executed
    stem: execut
    docFrequency: 9.0
    docPositions:
    - 414
    - 415
    - 418
    - 436
    - 1713
    - 1714
    - 1715
  twice: !ruby/object:Word
    word: twice
    stem: twice
    docFrequency: 7.0
    docPositions:
    - 414
    - 590
    - 872
    - 1713
    - 1831
    - 2020
  alternatively: !ruby/object:Word
    word: alternatively
    stem: altern
    docFrequency: 3.0
    docPositions:
    - 418
    - 1715
  reads: !ruby/object:Word
    word: reads
    stem: read
    docFrequency: 3.0
    docPositions:
    - 418
    - 1715
  happens: !ruby/object:Word
    word: happens
    stem: happen
    docFrequency: 3.0
    docPositions:
    - 419
    - 1716
  constants: !ruby/object:Word
    word: constants
    stem: constant
    docFrequency: 11.0
    docPositions:
    - 419
    - 958
    - 977
    - 979
    - 1052
    - 1716
    - 2072
    - 2085
    - 2087
    - 2129
  already: !ruby/object:Word
    word: already
    stem: alreadi
    docFrequency: 11.0
    docPositions:
    - 420
    - 491
    - 758
    - 967
    - 1196
    - 1717
    - 1763
    - 1941
    - 2077
    - 2227
  purposes: !ruby/object:Word
    word: purposes
    stem: purpos
    docFrequency: 3.0
    docPositions:
    - 420
    - 1717
  deduce: !ruby/object:Word
    word: deduce
    stem: deduc
    docFrequency: 3.0
    docPositions:
    - 421
    - 1718
  superfluous: !ruby/object:Word
    word: superfluous
    stem: superflu
    docFrequency: 3.0
    docPositions:
    - 422
    - 1719
  alternatives: !ruby/object:Word
    word: alternatives
    stem: altern
    docFrequency: 3.0
    docPositions:
    - 423
    - 1720
  need: !ruby/object:Word
    word: need
    stem: need
    docFrequency: 12.0
    docPositions:
    - 423
    - 497
    - 706
    - 819
    - 822
    - 1452
    - 1720
    - 1768
    - 1907
    - 1981
    - 1984
  implausible: !ruby/object:Word
    word: implausible
    stem: implaus
    docFrequency: 3.0
    docPositions:
    - 428
    - 1723
  timing: !ruby/object:Word
    word: timing
    stem: time
    docFrequency: 11.0
    docPositions:
    - 430
    - 557
    - 561
    - 562
    - 626
    - 1723
    - 1806
    - 1810
    - 1811
    - 1855
  information: !ruby/object:Word
    word: information
    stem: inform
    docFrequency: 16.0
    docPositions:
    - 430
    - 1139
    - 1165
    - 1227
    - 1386
    - 1394
    - 1398
    - 1433
    - 1723
    - 2188
    - 2206
    - 2250
    - 2357
    - 2365
  results: !ruby/object:Word
    word: results
    stem: result
    docFrequency: 5.0
    docPositions:
    - 431
    - 1010
    - 1724
    - 2106
  ratio: !ruby/object:Word
    word: ratio
    stem: ratio
    docFrequency: 5.0
    docPositions:
    - 431
    - 436
    - 1724
  outer: !ruby/object:Word
    word: outer
    stem: outer
    docFrequency: 3.0
    docPositions:
    - 431
    - 1724
  executions: !ruby/object:Word
    word: executions
    stem: execut
    docFrequency: 3.0
    docPositions:
    - 432
    - 1725
  laborious: !ruby/object:Word
    word: laborious
    stem: labori
    docFrequency: 3.0
    docPositions:
    - 432
    - 1725
  indeed: !ruby/object:Word
    word: indeed
    stem: inde
    docFrequency: 5.0
    docPositions:
    - 433
    - 477
    - 1726
    - 1756
  verified: !ruby/object:Word
    word: verified
    stem: verifi
    docFrequency: 3.0
    docPositions:
    - 434
    - 1727
  quote: !ruby/object:Word
    word: quote
    stem: quot
    docFrequency: 3.0
    docPositions:
    - 434
    - 1727
  emulation: !ruby/object:Word
    word: emulation
    stem: emul
    docFrequency: 7.0
    docPositions:
    - 434
    - 759
    - 760
    - 1727
    - 1942
    - 1943
  minutes: !ruby/object:Word
    word: minutes
    stem: minut
    docFrequency: 5.0
    docPositions:
    - 436
    - 463
    - 1727
    - 1746
  estimated: !ruby/object:Word
    word: estimated
    stem: estim
    docFrequency: 2.0
    docPositions:
    - 436
  measure: !ruby/object:Word
    word: measure
    stem: measur
    docFrequency: 3.0
    docPositions:
    - 436
    - 1727
  good: !ruby/object:Word
    word: good
    stem: good
    docFrequency: 15.0
    docPositions:
    - 436
    - 537
    - 581
    - 626
    - 666
    - 696
    - 719
    - 1727
    - 1792
    - 1824
    - 1855
    - 1883
    - 1901
    - 1914
  agreement: !ruby/object:Word
    word: agreement
    stem: agreement
    docFrequency: 3.0
    docPositions:
    - 436
    - 1727
  calculated: !ruby/object:Word
    word: calculated
    stem: calcul
    docFrequency: 9.0
    docPositions:
    - 436
    - 900
    - 1200
    - 1223
    - 1727
    - 2034
    - 2231
    - 2246
  runs: !ruby/object:Word
    word: runs
    stem: run
    docFrequency: 5.0
    docPositions:
    - 436
    - 1300
    - 1727
    - 2301
  discrepancy: !ruby/object:Word
    word: discrepancy
    stem: discrep
    docFrequency: 3.0
    docPositions:
    - 437
    - 1728
  quoted: !ruby/object:Word
    word: quoted
    stem: quot
    docFrequency: 3.0
    docPositions:
    - 438
    - 1729
  unlikely: !ruby/object:Word
    word: unlikely
    stem: unlik
    docFrequency: 7.0
    docPositions:
    - 439
    - 485
    - 949
    - 1730
    - 1761
    - 2067
  fact: !ruby/object:Word
    word: fact
    stem: fact
    docFrequency: 17.0
    docPositions:
    - 439
    - 450
    - 458
    - 474
    - 510
    - 813
    - 1352
    - 1358
    - 1730
    - 1737
    - 1743
    - 1753
    - 1775
    - 1977
    - 2337
    - 2341
  occasions: !ruby/object:Word
    word: occasions
    stem: occas
    docFrequency: 3.0
    docPositions:
    - 440
    - 1731
  conjecture: !ruby/object:Word
    word: conjecture
    stem: conjectur
    docFrequency: 3.0
    docPositions:
    - 442
    - 1731
  seen: !ruby/object:Word
    word: seen
    stem: seen
    docFrequency: 3.0
    docPositions:
    - 442
    - 1731
  logic: !ruby/object:Word
    word: logic
    stem: logic
    docFrequency: 11.0
    docPositions:
    - 442
    - 797
    - 824
    - 856
    - 862
    - 1731
    - 1965
    - 1986
    - 2008
    - 2012
  hardware: !ruby/object:Word
    word: hardware
    stem: hardwar
    docFrequency: 7.0
    docPositions:
    - 442
    - 444
    - 858
    - 1731
    - 1733
    - 2010
  software: !ruby/object:Word
    word: software
    stem: softwar
    docFrequency: 27.0
    docPositions:
    - 442
    - 717
    - 1250
    - 1261
    - 1270
    - 1272
    - 1274
    - 1278
    - 1280
    - 1287
    - 1462
    - 1731
    - 1914
    - 2265
    - 2273
    - 2280
    - 2282
    - 2284
    - 2286
    - 2288
    - 2293
    - 2377
  vindicated: !ruby/object:Word
    word: vindicated
    stem: vindic
    docFrequency: 3.0
    docPositions:
    - 443
    - 1732
  preventative: !ruby/object:Word
    word: preventative
    stem: prevent
    docFrequency: 3.0
    docPositions:
    - 443
    - 1732
  maintenance: !ruby/object:Word
    word: maintenance
    stem: mainten
    docFrequency: 11.0
    docPositions:
    - 443
    - 445
    - 449
    - 611
    - 1343
    - 1732
    - 1734
    - 1736
    - 1844
    - 2330
  embarking: !ruby/object:Word
    word: embarking
    stem: embark
    docFrequency: 3.0
    docPositions:
    - 443
    - 1732
  robustness: !ruby/object:Word
    word: robustness
    stem: robust
    docFrequency: 3.0
    docPositions:
    - 444
    - 1733
  indeeed: !ruby/object:Word
    word: indeeed
    stem: indee
    docFrequency: 3.0
    docPositions:
    - 447
    - 1734
  justification: !ruby/object:Word
    word: justification
    stem: justif
    docFrequency: 3.0
    docPositions:
    - 447
    - 1734
  instead: !ruby/object:Word
    word: instead
    stem: instead
    docFrequency: 9.0
    docPositions:
    - 448
    - 629
    - 847
    - 1202
    - 1735
    - 1856
    - 2003
    - 2231
  conceivably: !ruby/object:Word
    word: conceivably
    stem: conceiv
    docFrequency: 3.0
    docPositions:
    - 449
    - 1736
  set: !ruby/object:Word
    word: set
    stem: set
    docFrequency: 23.0
    docPositions:
    - 449
    - 717
    - 719
    - 770
    - 981
    - 1003
    - 1054
    - 1060
    - 1117
    - 1186
    - 1736
    - 1914
    - 1949
    - 2087
    - 2103
    - 2131
    - 2135
    - 2172
    - 2221
  reset: !ruby/object:Word
    word: reset
    stem: reset
    docFrequency: 5.0
    docPositions:
    - 450
    - 1347
    - 1737
    - 2332
  gang: !ruby/object:Word
    word: gang
    stem: gang
    docFrequency: 3.0
    docPositions:
    - 450
    - 1737
  mfd: !ruby/object:Word
    word: mfd
    stem: mfd
    docFrequency: 3.0
    docPositions:
    - 450
    - 1737
  condenser: !ruby/object:Word
    word: condenser
    stem: condens
    docFrequency: 3.0
    docPositions:
    - 450
    - 1737
  basic: !ruby/object:Word
    word: basic
    stem: basic
    docFrequency: 7.0
    docPositions:
    - 451
    - 521
    - 702
    - 1738
    - 1784
    - 1903
  oscillator: !ruby/object:Word
    word: oscillator
    stem: oscil
    docFrequency: 5.0
    docPositions:
    - 451
    - 804
    - 1738
    - 1972
  frequency: !ruby/object:Word
    word: frequency
    stem: frequenc
    docFrequency: 13.0
    docPositions:
    - 451
    - 793
    - 804
    - 911
    - 961
    - 1199
    - 1738
    - 1962
    - 1972
    - 2039
    - 2073
    - 2230
  pencil: !ruby/object:Word
    word: pencil
    stem: pencil
    docFrequency: 7.0
    docPositions:
    - 451
    - 458
    - 1053
    - 1738
    - 1743
    - 2130
  panel: !ruby/object:Word
    word: panel
    stem: panel
    docFrequency: 7.0
    docPositions:
    - 452
    - 459
    - 1100
    - 1739
    - 1744
    - 2161
  hypothesis: !ruby/object:Word
    word: hypothesis
    stem: hypothesi
    docFrequency: 3.0
    docPositions:
    - 452
    - 1739
  accurate: !ruby/object:Word
    word: accurate
    stem: accur
    docFrequency: 5.0
    docPositions:
    - 452
    - 454
    - 1739
    - 1741
  observed: !ruby/object:Word
    word: observed
    stem: observ
    docFrequency: 3.0
    docPositions:
    - 452
    - 1739
  nearer: !ruby/object:Word
    word: nearer
    stem: nearer
    docFrequency: 3.0
    docPositions:
    - 453
    - 1740
  approximate: !ruby/object:Word
    word: approximate
    stem: approxim
    docFrequency: 3.0
    docPositions:
    - 453
    - 1740
  plausible: !ruby/object:Word
    word: plausible
    stem: plausibl
    docFrequency: 7.0
    docPositions:
    - 453
    - 478
    - 482
    - 1740
    - 1757
    - 1758
  argues: !ruby/object:Word
    word: argues
    stem: argu
    docFrequency: 3.0
    docPositions:
    - 454
    - 1741
  explain: !ruby/object:Word
    word: explain
    stem: explain
    docFrequency: 3.0
    docPositions:
    - 457
    - 1742
  reversion: !ruby/object:Word
    word: reversion
    stem: revers
    docFrequency: 3.0
    docPositions:
    - 457
    - 1742
  assuming: !ruby/object:Word
    word: assuming
    stem: assum
    docFrequency: 3.0
    docPositions:
    - 458
    - 1743
  reviewing: !ruby/object:Word
    word: reviewing
    stem: review
    docFrequency: 3.0
    docPositions:
    - 458
    - 1743
  marks: !ruby/object:Word
    word: marks
    stem: mark
    docFrequency: 3.0
    docPositions:
    - 458
    - 1743
  knew: !ruby/object:Word
    word: knew
    stem: knew
    docFrequency: 15.0
    docPositions:
    - 459
    - 557
    - 558
    - 712
    - 725
    - 758
    - 762
    - 1744
    - 1806
    - 1807
    - 1911
    - 1918
    - 1941
    - 1945
  shorter: !ruby/object:Word
    word: shorter
    stem: shorter
    docFrequency: 3.0
    docPositions:
    - 459
    - 1744
  without: !ruby/object:Word
    word: without
    stem: without
    docFrequency: 9.0
    docPositions:
    - 463
    - 1150
    - 1190
    - 1323
    - 1746
    - 2197
    - 2223
    - 2318
  neither: !ruby/object:Word
    word: neither
    stem: neither
    docFrequency: 3.0
    docPositions:
    - 464
    - 1747
  accept: !ruby/object:Word
    word: accept
    stem: accept
    docFrequency: 3.0
    docPositions:
    - 465
    - 1748
  suggestion: !ruby/object:Word
    word: suggestion
    stem: suggest
    docFrequency: 3.0
    docPositions:
    - 465
    - 1748
  wrong: !ruby/object:Word
    word: wrong
    stem: wrong
    docFrequency: 3.0
    docPositions:
    - 466
    - 1749
  struggling: !ruby/object:Word
    word: struggling
    stem: struggl
    docFrequency: 3.0
    docPositions:
    - 468
    - 1749
  monday: !ruby/object:Word
    word: monday
    stem: mondai
    docFrequency: 3.0
    docPositions:
    - 469
    - 1750
  weekend: !ruby/object:Word
    word: weekend
    stem: weekend
    docFrequency: 3.0
    docPositions:
    - 469
    - 1750
  'off': !ruby/object:Word
    word: 'off'
    stem: 'off'
    docFrequency: 11.0
    docPositions:
    - 469
    - 799
    - 918
    - 1122
    - 1138
    - 1750
    - 1967
    - 2046
    - 2177
    - 2187
  prepared: !ruby/object:Word
    word: prepared
    stem: prepar
    docFrequency: 5.0
    docPositions:
    - 470
    - 1304
    - 1751
    - 2303
  wait: !ruby/object:Word
    word: wait
    stem: wait
    docFrequency: 3.0
    docPositions:
    - 470
    - 1751
  say: !ruby/object:Word
    word: say
    stem: sai
    docFrequency: 9.0
    docPositions:
    - 471
    - 510
    - 513
    - 720
    - 1752
    - 1775
    - 1778
    - 1915
  tried: !ruby/object:Word
    word: tried
    stem: tri
    docFrequency: 3.0
    docPositions:
    - 471
    - 1752
  smaller: !ruby/object:Word
    word: smaller
    stem: smaller
    docFrequency: 5.0
    docPositions:
    - 471
    - 474
    - 1752
    - 1753
  agree: !ruby/object:Word
    word: agree
    stem: agre
    docFrequency: 3.0
    docPositions:
    - 472
    - 1753
  varied: !ruby/object:Word
    word: varied
    stem: vari
    docFrequency: 3.0
    docPositions:
    - 474
    - 1753
  suggests: !ruby/object:Word
    word: suggests
    stem: suggest
    docFrequency: 3.0
    docPositions:
    - 474
    - 1753
  thinks: !ruby/object:Word
    word: thinks
    stem: think
    docFrequency: 3.0
    docPositions:
    - 475
    - 1754
  recall: !ruby/object:Word
    word: recall
    stem: recal
    docFrequency: 3.0
    docPositions:
    - 476
    - 1755
  m: !ruby/object:Word
    word: m
    stem: m
    docFrequency: 5.0
    docPositions:
    - 476
    - 976
    - 1755
    - 2084
  afraid: !ruby/object:Word
    word: afraid
    stem: afraid
    docFrequency: 3.0
    docPositions:
    - 476
    - 1755
  conclusion: !ruby/object:Word
    word: conclusion
    stem: conclus
    docFrequency: 8.0
    docPositions:
    - 480
    - 730
    - 760
    - 764
    - 1921
    - 1943
    - 1945
  gives: !ruby/object:Word
    word: gives
    stem: give
    docFrequency: 3.0
    docPositions:
    - 481
    - 1757
  read: !ruby/object:Word
    word: read
    stem: read
    docFrequency: 23.0
    docPositions:
    - 483
    - 836
    - 1054
    - 1056
    - 1066
    - 1074
    - 1083
    - 1087
    - 1089
    - 1359
    - 1759
    - 1994
    - 2131
    - 2133
    - 2141
    - 2145
    - 2152
    - 2154
    - 2156
    - 2342
  hair: !ruby/object:Word
    word: hair
    stem: hair
    docFrequency: 3.0
    docPositions:
    - 483
    - 1759
  splitting: !ruby/object:Word
    word: splitting
    stem: split
    docFrequency: 3.0
    docPositions:
    - 484
    - 1760
  concluded: !ruby/object:Word
    word: concluded
    stem: conclud
    docFrequency: 3.0
    docPositions:
    - 484
    - 1760
  palaeographical: !ruby/object:Word
    word: palaeographical
    stem: palaeograph
    docFrequency: 3.0
    docPositions:
    - 485
    - 1761
  shed: !ruby/object:Word
    word: shed
    stem: shed
    docFrequency: 3.0
    docPositions:
    - 485
    - 1761
  light: !ruby/object:Word
    word: light
    stem: light
    docFrequency: 7.0
    docPositions:
    - 485
    - 883
    - 890
    - 1761
    - 2025
    - 2032
  embark: !ruby/object:Word
    word: embark
    stem: embark
    docFrequency: 5.0
    docPositions:
    - 490
    - 677
    - 1762
    - 1888
  risky: !ruby/object:Word
    word: risky
    stem: riski
    docFrequency: 5.0
    docPositions:
    - 490
    - 677
    - 1762
    - 1888
  venture: !ruby/object:Word
    word: venture
    stem: ventur
    docFrequency: 7.0
    docPositions:
    - 490
    - 678
    - 1444
    - 1762
    - 1889
    - 2367
  producing: !ruby/object:Word
    word: producing
    stem: produc
    docFrequency: 9.0
    docPositions:
    - 490
    - 518
    - 794
    - 935
    - 1762
    - 1781
    - 1963
    - 2057
  system: !ruby/object:Word
    word: system
    stem: system
    docFrequency: 27.0
    docPositions:
    - 490
    - 654
    - 677
    - 690
    - 691
    - 695
    - 782
    - 795
    - 1109
    - 1218
    - 1265
    - 1762
    - 1873
    - 1888
    - 1897
    - 1898
    - 1900
    - 1958
    - 1964
    - 2166
    - 2243
    - 2277
  dominant: !ruby/object:Word
    word: dominant
    stem: domin
    docFrequency: 5.0
    docPositions:
    - 491
    - 537
    - 1763
    - 1792
  author: !ruby/object:Word
    word: author
    stem: author
    docFrequency: 7.0
    docPositions:
    - 491
    - 781
    - 1245
    - 1763
    - 1957
    - 2263
  led: !ruby/object:Word
    word: led
    stem: led
    docFrequency: 3.0
    docPositions:
    - 492
    - 1764
  united: !ruby/object:Word
    word: united
    stem: unit
    docFrequency: 3.0
    docPositions:
    - 494
    - 1765
  kingdom: !ruby/object:Word
    word: kingdom
    stem: kingdom
    docFrequency: 3.0
    docPositions:
    - 494
    - 1765
  representative: !ruby/object:Word
    word: representative
    stem: repres
    docFrequency: 5.0
    docPositions:
    - 495
    - 1441
    - 1766
    - 2367
  selling: !ruby/object:Word
    word: selling
    stem: sell
    docFrequency: 7.0
    docPositions:
    - 495
    - 512
    - 741
    - 1766
    - 1777
    - 1928
  scientific: !ruby/object:Word
    word: scientific
    stem: scientif
    docFrequency: 17.0
    docPositions:
    - 495
    - 497
    - 546
    - 571
    - 711
    - 722
    - 728
    - 1766
    - 1768
    - 1799
    - 1816
    - 1910
    - 1917
    - 1921
  universities: !ruby/object:Word
    word: universities
    stem: univers
    docFrequency: 7.0
    docPositions:
    - 495
    - 566
    - 1766
    - 1813
  engineering: !ruby/object:Word
    word: engineering
    stem: engin
    docFrequency: 3.0
    docPositions:
    - 496
    - 1767
  installations: !ruby/object:Word
    word: installations
    stem: instal
    docFrequency: 3.0
    docPositions:
    - 496
    - 1767
  job: !ruby/object:Word
    word: job
    stem: job
    docFrequency: 9.0
    docPositions:
    - 496
    - 500
    - 570
    - 1323
    - 1767
    - 1769
    - 1815
    - 2318
  disappeared: !ruby/object:Word
    word: disappeared
    stem: disappear
    docFrequency: 3.0
    docPositions:
    - 496
    - 1767
  decided: !ruby/object:Word
    word: decided
    stem: decid
    docFrequency: 9.0
    docPositions:
    - 496
    - 596
    - 716
    - 743
    - 1767
    - 1835
    - 1913
    - 1930
  marketing: !ruby/object:Word
    word: marketing
    stem: market
    docFrequency: 7.0
    docPositions:
    - 497
    - 511
    - 761
    - 1768
    - 1776
    - 1944
  organisations: !ruby/object:Word
    word: organisations
    stem: organis
    docFrequency: 7.0
    docPositions:
    - 497
    - 539
    - 1395
    - 1768
    - 1794
    - 2358
  commercial: !ruby/object:Word
    word: commercial
    stem: commerci
    docFrequency: 13.0
    docPositions:
    - 498
    - 700
    - 722
    - 728
    - 1137
    - 1261
    - 1769
    - 1903
    - 1917
    - 1921
    - 2186
    - 2273
  ended: !ruby/object:Word
    word: ended
    stem: end
    docFrequency: 3.0
    docPositions:
    - 500
    - 1769
  announced: !ruby/object:Word
    word: announced
    stem: announc
    docFrequency: 15.0
    docPositions:
    - 500
    - 502
    - 575
    - 582
    - 704
    - 768
    - 778
    - 1769
    - 1771
    - 1820
    - 1825
    - 1905
    - 1949
    - 1955
  salesman: !ruby/object:Word
    word: salesman
    stem: salesman
    docFrequency: 3.0
    docPositions:
    - 501
    - 1770
  something: !ruby/object:Word
    word: something
    stem: someth
    docFrequency: 17.0
    docPositions:
    - 501
    - 582
    - 596
    - 656
    - 716
    - 721
    - 758
    - 761
    - 1770
    - 1825
    - 1835
    - 1875
    - 1913
    - 1916
    - 1941
    - 1944
  spare: !ruby/object:Word
    word: spare
    stem: spare
    docFrequency: 7.0
    docPositions:
    - 502
    - 1342
    - 1355
    - 1771
    - 2329
    - 2338
  assigned: !ruby/object:Word
    word: assigned
    stem: assign
    docFrequency: 3.0
    docPositions:
    - 502
    - 1771
  worrying: !ruby/object:Word
    word: worrying
    stem: worri
    docFrequency: 3.0
    docPositions:
    - 503
    - 1772
  happen: !ruby/object:Word
    word: happen
    stem: happen
    docFrequency: 3.0
    docPositions:
    - 503
    - 1772
  delivering: !ruby/object:Word
    word: delivering
    stem: deliv
    docFrequency: 3.0
    docPositions:
    - 505
    - 1772
  concerned: !ruby/object:Word
    word: concerned
    stem: concern
    docFrequency: 9.0
    docPositions:
    - 506
    - 969
    - 1357
    - 1394
    - 1773
    - 2079
    - 2340
    - 2357
  questions: !ruby/object:Word
    word: questions
    stem: question
    docFrequency: 7.0
    docPositions:
    - 506
    - 702
    - 714
    - 1773
    - 1903
    - 1911
  hard: !ruby/object:Word
    word: hard
    stem: hard
    docFrequency: 3.0
    docPositions:
    - 509
    - 1774
  appear: !ruby/object:Word
    word: appear
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 509
    - 1774
  boastful: !ruby/object:Word
    word: boastful
    stem: boast
    docFrequency: 3.0
    docPositions:
    - 509
    - 1774
  stand: !ruby/object:Word
    word: stand
    stem: stand
    docFrequency: 5.0
    docPositions:
    - 510
    - 1046
    - 1775
    - 2125
  gosh: !ruby/object:Word
    word: gosh
    stem: gosh
    docFrequency: 5.0
    docPositions:
    - 510
    - 705
    - 1775
    - 1906
  weren: !ruby/object:Word
    word: weren
    stem: weren
    docFrequency: 15.0
    docPositions:
    - 510
    - 520
    - 524
    - 565
    - 706
    - 712
    - 771
    - 1775
    - 1783
    - 1785
    - 1812
    - 1907
    - 1911
    - 1950
  marvellous: !ruby/object:Word
    word: marvellous
    stem: marvel
    docFrequency: 3.0
    docPositions:
    - 510
    - 1775
  enormously: !ruby/object:Word
    word: enormously
    stem: enorm
    docFrequency: 3.0
    docPositions:
    - 511
    - 1776
  powerful: !ruby/object:Word
    word: powerful
    stem: power
    docFrequency: 3.0
    docPositions:
    - 511
    - 1776
  position: !ruby/object:Word
    word: position
    stem: posit
    docFrequency: 17.0
    docPositions:
    - 511
    - 595
    - 849
    - 902
    - 1063
    - 1177
    - 1277
    - 1347
    - 1776
    - 1834
    - 2003
    - 2036
    - 2138
    - 2214
    - 2285
    - 2332
  beginning: !ruby/object:Word
    word: beginning
    stem: begin
    docFrequency: 3.0
    docPositions:
    - 512
    - 1777
  incredible: !ruby/object:Word
    word: incredible
    stem: incred
    docFrequency: 5.0
    docPositions:
    - 512
    - 523
    - 1777
    - 1784
  go: !ruby/object:Word
    word: go
    stem: go
    docFrequency: 9.0
    docPositions:
    - 512
    - 665
    - 685
    - 1343
    - 1777
    - 1882
    - 1894
    - 2330
  punched: !ruby/object:Word
    word: punched
    stem: punch
    docFrequency: 5.0
    docPositions:
    - 513
    - 1076
    - 1778
    - 2147
  card: !ruby/object:Word
    word: card
    stem: card
    docFrequency: 11.0
    docPositions:
    - 513
    - 1076
    - 1077
    - 1094
    - 1778
    - 2147
    - 2148
    - 2159
  installation: !ruby/object:Word
    word: installation
    stem: instal
    docFrequency: 3.0
    docPositions:
    - 513
    - 1778
  accounting: !ruby/object:Word
    word: accounting
    stem: account
    docFrequency: 3.0
    docPositions:
    - 513
    - 1778
  calculator: !ruby/object:Word
    word: calculator
    stem: calcul
    docFrequency: 3.0
    docPositions:
    - 514
    - 1779
  sell: !ruby/object:Word
    word: sell
    stem: sell
    docFrequency: 11.0
    docPositions:
    - 514
    - 566
    - 673
    - 753
    - 774
    - 1779
    - 1813
    - 1886
    - 1938
    - 1953
  price: !ruby/object:Word
    word: price
    stem: price
    docFrequency: 5.0
    docPositions:
    - 514
    - 1420
    - 1779
    - 2362
  users: !ruby/object:Word
    word: users
    stem: user
    docFrequency: 7.0
    docPositions:
    - 517
    - 742
    - 1252
    - 1780
    - 1929
    - 2266
  doing: !ruby/object:Word
    word: doing
    stem: do
    docFrequency: 17.0
    docPositions:
    - 517
    - 519
    - 552
    - 597
    - 602
    - 744
    - 745
    - 1363
    - 1780
    - 1782
    - 1803
    - 1836
    - 1837
    - 1931
    - 1932
    - 2344
  simple: !ruby/object:Word
    word: simple
    stem: simpl
    docFrequency: 3.0
    docPositions:
    - 517
    - 1780
  invoices: !ruby/object:Word
    word: invoices
    stem: invoic
    docFrequency: 3.0
    docPositions:
    - 518
    - 1781
  money: !ruby/object:Word
    word: money
    stem: monei
    docFrequency: 7.0
    docPositions:
    - 518
    - 668
    - 709
    - 1781
    - 1883
    - 1908
  chore: !ruby/object:Word
    word: chore
    stem: chore
    docFrequency: 3.0
    docPositions:
    - 518
    - 1781
  delighted: !ruby/object:Word
    word: delighted
    stem: delight
    docFrequency: 3.0
    docPositions:
    - 519
    - 1782
  complicated: !ruby/object:Word
    word: complicated
    stem: complic
    docFrequency: 7.0
    docPositions:
    - 519
    - 705
    - 1081
    - 1782
    - 1906
    - 2150
  source: !ruby/object:Word
    word: source
    stem: sourc
    docFrequency: 10.0
    docPositions:
    - 520
    - 663
    - 845
    - 1063
    - 1410
    - 1783
    - 1880
    - 2001
    - 2138
  revenue: !ruby/object:Word
    word: revenue
    stem: revenu
    docFrequency: 7.0
    docPositions:
    - 520
    - 521
    - 711
    - 1783
    - 1784
    - 1910
  coming: !ruby/object:Word
    word: coming
    stem: come
    docFrequency: 7.0
    docPositions:
    - 521
    - 662
    - 711
    - 1784
    - 1879
    - 1910
  worldwide: !ruby/object:Word
    word: worldwide
    stem: worldwid
    docFrequency: 3.0
    docPositions:
    - 523
    - 1784
  terms: !ruby/object:Word
    word: terms
    stem: term
    docFrequency: 13.0
    docPositions:
    - 524
    - 643
    - 720
    - 1191
    - 1193
    - 1330
    - 1785
    - 1866
    - 1915
    - 2224
    - 2226
    - 2323
  largest: !ruby/object:Word
    word: largest
    stem: largest
    docFrequency: 5.0
    docPositions:
    - 524
    - 1263
    - 1785
    - 2275
  country: !ruby/object:Word
    word: country
    stem: countri
    docFrequency: 3.0
    docPositions:
    - 525
    - 1786
  sold: !ruby/object:Word
    word: sold
    stem: sold
    docFrequency: 17.0
    docPositions:
    - 527
    - 528
    - 548
    - 566
    - 567
    - 573
    - 753
    - 776
    - 1786
    - 1787
    - 1799
    - 1813
    - 1814
    - 1818
    - 1938
    - 1953
  orders: !ruby/object:Word
    word: orders
    stem: order
    docFrequency: 9.0
    docPositions:
    - 527
    - 982
    - 983
    - 984
    - 1786
    - 2088
    - 2089
    - 2090
  magnitude: !ruby/object:Word
    word: magnitude
    stem: magnitud
    docFrequency: 5.0
    docPositions:
    - 527
    - 864
    - 1786
    - 2014
  ict: !ruby/object:Word
    word: ict
    stem: ict
    docFrequency: 9.0
    docPositions:
    - 528
    - 1268
    - 1277
    - 1787
    - 2278
    - 2285
  rca: !ruby/object:Word
    word: rca
    stem: rca
    docFrequency: 3.0
    docPositions:
    - 528
    - 1787
  big: !ruby/object:Word
    word: big
    stem: big
    docFrequency: 15.0
    docPositions:
    - 528
    - 593
    - 625
    - 669
    - 711
    - 746
    - 766
    - 1787
    - 1834
    - 1854
    - 1884
    - 1910
    - 1933
    - 1947
  support: !ruby/object:Word
    word: support
    stem: support
    docFrequency: 9.0
    docPositions:
    - 529
    - 684
    - 1261
    - 1372
    - 1788
    - 1893
    - 2273
    - 2349
  beg: !ruby/object:Word
    word: beg
    stem: beg
    docFrequency: 3.0
    docPositions:
    - 532
    - 1789
  transistor: !ruby/object:Word
    word: transistor
    stem: transistor
    docFrequency: 23.0
    docPositions:
    - 532
    - 800
    - 810
    - 916
    - 917
    - 924
    - 925
    - 938
    - 1044
    - 1152
    - 1789
    - 1968
    - 1974
    - 2044
    - 2045
    - 2050
    - 2051
    - 2060
    - 2123
    - 2197
  designed: !ruby/object:Word
    word: designed
    stem: design
    docFrequency: 17.0
    docPositions:
    - 533
    - 556
    - 558
    - 691
    - 792
    - 1162
    - 1298
    - 1790
    - 1805
    - 1807
    - 1898
    - 1961
    - 2203
    - 2299
  memories: !ruby/object:Word
    word: memories
    stem: memori
    docFrequency: 5.0
    docPositions:
    - 533
    - 602
    - 1790
    - 1837
  finished: !ruby/object:Word
    word: finished
    stem: finish
    docFrequency: 5.0
    docPositions:
    - 533
    - 602
    - 1790
    - 1837
  channels: !ruby/object:Word
    word: channels
    stem: channel
    docFrequency: 3.0
    docPositions:
    - 534
    - 1791
  short: !ruby/object:Word
    word: short
    stem: short
    docFrequency: 13.0
    docPositions:
    - 534
    - 830
    - 948
    - 997
    - 1007
    - 1012
    - 1791
    - 1990
    - 2066
    - 2099
    - 2105
    - 2106
  resource: !ruby/object:Word
    word: resource
    stem: resourc
    docFrequency: 5.0
    docPositions:
    - 534
    - 1395
    - 1791
    - 2358
  strong: !ruby/object:Word
    word: strong
    stem: strong
    docFrequency: 13.0
    docPositions:
    - 536
    - 541
    - 545
    - 595
    - 723
    - 726
    - 1791
    - 1796
    - 1798
    - 1834
    - 1918
    - 1919
  segments: !ruby/object:Word
    word: segments
    stem: segment
    docFrequency: 3.0
    docPositions:
    - 536
    - 1791
  political: !ruby/object:Word
    word: political
    stem: polit
    docFrequency: 3.0
    docPositions:
    - 537
    - 1792
  dominance: !ruby/object:Word
    word: dominance
    stem: domin
    docFrequency: 5.0
    docPositions:
    - 538
    - 599
    - 1793
    - 1836
  here: !ruby/object:Word
    word: here
    stem: here
    docFrequency: 6.0
    docPositions:
    - 538
    - 1071
    - 1672
    - 1793
    - 2144
  bought: !ruby/object:Word
    word: bought
    stem: bought
    docFrequency: 7.0
    docPositions:
    - 538
    - 567
    - 572
    - 1793
    - 1814
    - 1817
  atomic: !ruby/object:Word
    word: atomic
    stem: atom
    docFrequency: 5.0
    docPositions:
    - 539
    - 1265
    - 1794
    - 2277
  energy: !ruby/object:Word
    word: energy
    stem: energi
    docFrequency: 5.0
    docPositions:
    - 539
    - 1265
    - 1794
    - 2277
  authority: !ruby/object:Word
    word: authority
    stem: author
    docFrequency: 5.0
    docPositions:
    - 539
    - 1266
    - 1794
    - 2278
  cegb: !ruby/object:Word
    word: cegb
    stem: cegb
    docFrequency: 5.0
    docPositions:
    - 539
    - 542
    - 1794
    - 1797
  companies: !ruby/object:Word
    word: companies
    stem: compani
    docFrequency: 7.0
    docPositions:
    - 540
    - 572
    - 604
    - 1795
    - 1817
    - 1839
  closely: !ruby/object:Word
    word: closely
    stem: close
    docFrequency: 3.0
    docPositions:
    - 540
    - 1795
  tied: !ruby/object:Word
    word: tied
    stem: ti
    docFrequency: 3.0
    docPositions:
    - 540
    - 1795
  incentive: !ruby/object:Word
    word: incentive
    stem: incent
    docFrequency: 3.0
    docPositions:
    - 541
    - 1796
  buy: !ruby/object:Word
    word: buy
    stem: bui
    docFrequency: 3.0
    docPositions:
    - 541
    - 1796
  aldermaston: !ruby/object:Word
    word: aldermaston
    stem: aldermaston
    docFrequency: 3.0
    docPositions:
    - 542
    - 1797
  dotted: !ruby/object:Word
    word: dotted
    stem: dot
    docFrequency: 3.0
    docPositions:
    - 543
    - 1798
  risely: !ruby/object:Word
    word: risely
    stem: rise
    docFrequency: 3.0
    docPositions:
    - 543
    - 1798
  sites: !ruby/object:Word
    word: sites
    stem: site
    docFrequency: 5.0
    docPositions:
    - 543
    - 1393
    - 1798
    - 2356
  sector: !ruby/object:Word
    word: sector
    stem: sector
    docFrequency: 5.0
    docPositions:
    - 545
    - 565
    - 1798
    - 1812
  weakest: !ruby/object:Word
    word: weakest
    stem: weakest
    docFrequency: 3.0
    docPositions:
    - 545
    - 1798
  lovely: !ruby/object:Word
    word: lovely
    stem: love
    docFrequency: 3.0
    docPositions:
    - 548
    - 1799
  desktop: !ruby/object:Word
    word: desktop
    stem: desktop
    docFrequency: 3.0
    docPositions:
    - 548
    - 1799
  decimal: !ruby/object:Word
    word: decimal
    stem: decim
    docFrequency: 3.0
    docPositions:
    - 549
    - 1800
  typewriter: !ruby/object:Word
    word: typewriter
    stem: typewrit
    docFrequency: 3.0
    docPositions:
    - 549
    - 1800
  sat: !ruby/object:Word
    word: sat
    stem: sat
    docFrequency: 3.0
    docPositions:
    - 549
    - 1800
  pc: !ruby/object:Word
    word: pc
    stem: pc
    docFrequency: 3.0
    docPositions:
    - 550
    - 1801
  elliott: !ruby/object:Word
    word: elliott
    stem: elliott
    docFrequency: 11.0
    docPositions:
    - 550
    - 1255
    - 1377
    - 1441
    - 1801
    - 2269
    - 2351
    - 2367
  words: !ruby/object:Word
    word: words
    stem: word
    docFrequency: 19.0
    docPositions:
    - 551
    - 1041
    - 1042
    - 1060
    - 1066
    - 1078
    - 1080
    - 1082
    - 1098
    - 1802
    - 2120
    - 2121
    - 2135
    - 2141
    - 2149
    - 2151
    - 2161
  faster: !ruby/object:Word
    word: faster
    stem: faster
    docFrequency: 14.0
    docPositions:
    - 551
    - 612
    - 613
    - 752
    - 815
    - 909
    - 917
    - 1802
    - 1845
    - 1846
    - 1937
    - 1979
    - 2045
  adder: !ruby/object:Word
    word: adder
    stem: adder
    docFrequency: 5.0
    docPositions:
    - 551
    - 996
    - 1802
    - 2098
  arithmetic: !ruby/object:Word
    word: arithmetic
    stem: arithmet
    docFrequency: 17.0
    docPositions:
    - 552
    - 828
    - 859
    - 991
    - 996
    - 1034
    - 1131
    - 1203
    - 1803
    - 1988
    - 2011
    - 2095
    - 2098
    - 2117
    - 2182
    - 2232
  lookup: !ruby/object:Word
    word: lookup
    stem: lookup
    docFrequency: 3.0
    docPositions:
    - 552
    - 1803
  slowly: !ruby/object:Word
    word: slowly
    stem: slowli
    docFrequency: 3.0
    docPositions:
    - 552
    - 1803
  multiplication: !ruby/object:Word
    word: multiplication
    stem: multipl
    docFrequency: 9.0
    docPositions:
    - 552
    - 1017
    - 1108
    - 1132
    - 1803
    - 2108
    - 2165
    - 2183
  absolute: !ruby/object:Word
    word: absolute
    stem: absolut
    docFrequency: 3.0
    docPositions:
    - 555
    - 1804
  dog: !ruby/object:Word
    word: dog
    stem: dog
    docFrequency: 3.0
    docPositions:
    - 555
    - 1804
  unbelievable: !ruby/object:Word
    word: unbelievable
    stem: unbeliev
    docFrequency: 3.0
    docPositions:
    - 555
    - 1804
  reader: !ruby/object:Word
    word: reader
    stem: reader
    docFrequency: 5.0
    docPositions:
    - 556
    - 557
    - 1805
    - 1806
  someone: !ruby/object:Word
    word: someone
    stem: someon
    docFrequency: 5.0
    docPositions:
    - 556
    - 576
    - 1805
    - 1821
  magnetic: !ruby/object:Word
    word: magnetic
    stem: magnet
    docFrequency: 17.0
    docPositions:
    - 556
    - 957
    - 1047
    - 1053
    - 1058
    - 1069
    - 1098
    - 1141
    - 1805
    - 2071
    - 2126
    - 2130
    - 2135
    - 2142
    - 2161
    - 2190
  sense: !ruby/object:Word
    word: sense
    stem: sens
    docFrequency: 5.0
    docPositions:
    - 557
    - 558
    - 1806
    - 1807
  sprocket: !ruby/object:Word
    word: sprocket
    stem: sprocket
    docFrequency: 7.0
    docPositions:
    - 558
    - 559
    - 562
    - 1807
    - 1808
    - 1811
  hole: !ruby/object:Word
    word: hole
    stem: hole
    docFrequency: 7.0
    docPositions:
    - 558
    - 559
    - 1057
    - 1807
    - 1808
    - 2134
  whoever: !ruby/object:Word
    word: whoever
    stem: whoever
    docFrequency: 3.0
    docPositions:
    - 558
    - 1807
  drove: !ruby/object:Word
    word: drove
    stem: drove
    docFrequency: 3.0
    docPositions:
    - 559
    - 1808
  cog: !ruby/object:Word
    word: cog
    stem: cog
    docFrequency: 3.0
    docPositions:
    - 559
    - 1808
  wheel: !ruby/object:Word
    word: wheel
    stem: wheel
    docFrequency: 3.0
    docPositions:
    - 559
    - 1808
  through: !ruby/object:Word
    word: through
    stem: through
    docFrequency: 21.0
    docPositions:
    - 559
    - 619
    - 658
    - 685
    - 759
    - 882
    - 996
    - 1056
    - 1312
    - 1362
    - 1808
    - 1850
    - 1877
    - 1894
    - 1942
    - 2024
    - 2098
    - 2133
    - 2309
    - 2343
  attached: !ruby/object:Word
    word: attached
    stem: attach
    docFrequency: 7.0
    docPositions:
    - 560
    - 1136
    - 1809
    - 2185
  spindle: !ruby/object:Word
    word: spindle
    stem: spindl
    docFrequency: 3.0
    docPositions:
    - 560
    - 1809
  disc: !ruby/object:Word
    word: disc
    stem: disc
    docFrequency: 27.0
    docPositions:
    - 560
    - 646
    - 647
    - 648
    - 654
    - 661
    - 665
    - 666
    - 742
    - 850
    - 855
    - 1809
    - 1867
    - 1868
    - 1869
    - 1873
    - 1878
    - 1882
    - 1883
    - 1929
    - 2004
    - 2007
  holes: !ruby/object:Word
    word: holes
    stem: hole
    docFrequency: 9.0
    docPositions:
    - 560
    - 562
    - 914
    - 916
    - 1809
    - 1811
    - 2042
    - 2044
  sensed: !ruby/object:Word
    word: sensed
    stem: sens
    docFrequency: 3.0
    docPositions:
    - 561
    - 1810
  advantage: !ruby/object:Word
    word: advantage
    stem: advantag
    docFrequency: 9.0
    docPositions:
    - 561
    - 614
    - 654
    - 812
    - 1810
    - 1847
    - 1873
    - 1976
  bonus: !ruby/object:Word
    word: bonus
    stem: bonu
    docFrequency: 3.0
    docPositions:
    - 562
    - 1811
  screwed: !ruby/object:Word
    word: screwed
    stem: screw
    docFrequency: 3.0
    docPositions:
    - 562
    - 1811
  placed: !ruby/object:Word
    word: placed
    stem: place
    docFrequency: 5.0
    docPositions:
    - 565
    - 1057
    - 1812
    - 2134
  better: !ruby/object:Word
    word: better
    stem: better
    docFrequency: 13.0
    docPositions:
    - 567
    - 577
    - 653
    - 695
    - 1175
    - 1364
    - 1814
    - 1822
    - 1872
    - 1900
    - 2214
    - 2345
  uniquely: !ruby/object:Word
    word: uniquely
    stem: uniqu
    docFrequency: 3.0
    docPositions:
    - 567
    - 1814
  among: !ruby/object:Word
    word: among
    stem: among
    docFrequency: 5.0
    docPositions:
    - 568
    - 1109
    - 1815
    - 2166
  reasonable: !ruby/object:Word
    word: reasonable
    stem: reason
    docFrequency: 5.0
    docPositions:
    - 568
    - 963
    - 1815
    - 2075
  quantities: !ruby/object:Word
    word: quantities
    stem: quantiti
    docFrequency: 3.0
    docPositions:
    - 568
    - 1815
  abroad: !ruby/object:Word
    word: abroad
    stem: abroad
    docFrequency: 3.0
    docPositions:
    - 568
    - 1815
  success: !ruby/object:Word
    word: success
    stem: success
    docFrequency: 7.0
    docPositions:
    - 570
    - 603
    - 648
    - 1815
    - 1838
    - 1869
  fairclough: !ruby/object:Word
    word: fairclough
    stem: fairclough
    docFrequency: 3.0
    docPositions:
    - 570
    - 1815
  developing: !ruby/object:Word
    word: developing
    stem: develop
    docFrequency: 5.0
    docPositions:
    - 571
    - 1269
    - 1816
    - 2279
  hursley: !ruby/object:Word
    word: hursley
    stem: hurslei
    docFrequency: 7.0
    docPositions:
    - 571
    - 735
    - 778
    - 1816
    - 1924
    - 1955
  raised: !ruby/object:Word
    word: raised
    stem: rais
    docFrequency: 5.0
    docPositions:
    - 571
    - 581
    - 1816
    - 1824
  esso: !ruby/object:Word
    word: esso
    stem: esso
    docFrequency: 5.0
    docPositions:
    - 572
    - 573
    - 1817
    - 1818
  chose: !ruby/object:Word
    word: chose
    stem: chose
    docFrequency: 3.0
    docPositions:
    - 572
    - 1817
  maintained: !ruby/object:Word
    word: maintained
    stem: maintain
    docFrequency: 3.0
    docPositions:
    - 573
    - 1818
  systems: !ruby/object:Word
    word: systems
    stem: system
    docFrequency: 25.0
    docPositions:
    - 573
    - 655
    - 666
    - 689
    - 727
    - 740
    - 792
    - 809
    - 810
    - 1269
    - 1270
    - 1464
    - 1818
    - 1874
    - 1883
    - 1896
    - 1920
    - 1927
    - 1961
    - 1973
    - 1974
    - 2279
    - 2280
    - 2378
  countries: !ruby/object:Word
    word: countries
    stem: countri
    docFrequency: 5.0
    docPositions:
    - 573
    - 722
    - 1818
    - 1917
  unhappy: !ruby/object:Word
    word: unhappy
    stem: unhappi
    docFrequency: 3.0
    docPositions:
    - 574
    - 1819
  always: !ruby/object:Word
    word: always
    stem: alwai
    docFrequency: 7.0
    docPositions:
    - 574
    - 1173
    - 1373
    - 1819
    - 2212
    - 2350
  announce: !ruby/object:Word
    word: announce
    stem: announc
    docFrequency: 5.0
    docPositions:
    - 574
    - 583
    - 1819
    - 1826
  parent: !ruby/object:Word
    word: parent
    stem: parent
    docFrequency: 5.0
    docPositions:
    - 575
    - 577
    - 1820
    - 1822
  wanted: !ruby/object:Word
    word: wanted
    stem: want
    docFrequency: 9.0
    docPositions:
    - 575
    - 612
    - 656
    - 720
    - 1820
    - 1845
    - 1875
    - 1915
  subsidiaries: !ruby/object:Word
    word: subsidiaries
    stem: subsidiari
    docFrequency: 3.0
    docPositions:
    - 576
    - 1821
  announcing: !ruby/object:Word
    word: announcing
    stem: announc
    docFrequency: 5.0
    docPositions:
    - 576
    - 764
    - 1821
    - 1945
  absolutely: !ruby/object:Word
    word: absolutely
    stem: absolut
    docFrequency: 3.0
    docPositions:
    - 577
    - 1822
  unthinkable: !ruby/object:Word
    word: unthinkable
    stem: unthink
    docFrequency: 3.0
    docPositions:
    - 578
    - 1823
  chances: !ruby/object:Word
    word: chances
    stem: chanc
    docFrequency: 3.0
    docPositions:
    - 580
    - 1823
  hindsight: !ruby/object:Word
    word: hindsight
    stem: hindsight
    docFrequency: 5.0
    docPositions:
    - 581
    - 611
    - 1824
    - 1844
  recognise: !ruby/object:Word
    word: recognise
    stem: recognis
    docFrequency: 3.0
    docPositions:
    - 581
    - 1824
  brilliant: !ruby/object:Word
    word: brilliant
    stem: brilliant
    docFrequency: 3.0
    docPositions:
    - 582
    - 1825
  trade: !ruby/object:Word
    word: trade
    stem: trade
    docFrequency: 11.0
    docPositions:
    - 582
    - 583
    - 585
    - 588
    - 593
    - 1825
    - 1826
    - 1828
    - 1829
    - 1834
  covered: !ruby/object:Word
    word: covered
    stem: cover
    docFrequency: 5.0
    docPositions:
    - 584
    - 1448
    - 1827
    - 2371
  whole: !ruby/object:Word
    word: whole
    stem: whole
    docFrequency: 5.0
    docPositions:
    - 584
    - 765
    - 1827
    - 1946
  outside: !ruby/object:Word
    word: outside
    stem: outsid
    docFrequency: 5.0
    docPositions:
    - 584
    - 1105
    - 1827
    - 2164
  america: !ruby/object:Word
    word: america
    stem: america
    docFrequency: 3.0
    docPositions:
    - 584
    - 1827
  third: !ruby/object:Word
    word: third
    stem: third
    docFrequency: 7.0
    docPositions:
    - 585
    - 885
    - 1093
    - 1828
    - 2027
    - 2158
  sales: !ruby/object:Word
    word: sales
    stem: sale
    docFrequency: 5.0
    docPositions:
    - 585
    - 1259
    - 1828
    - 2271
  volume: !ruby/object:Word
    word: volume
    stem: volum
    docFrequency: 3.0
    docPositions:
    - 585
    - 1828
  issues: !ruby/object:Word
    word: issues
    stem: issu
    docFrequency: 6.0
    docPositions:
    - 587
    - 1390
    - 1469
    - 1828
    - 2354
  product: !ruby/object:Word
    word: product
    stem: product
    docFrequency: 9.0
    docPositions:
    - 587
    - 588
    - 721
    - 773
    - 1828
    - 1829
    - 1916
    - 1952
  forget: !ruby/object:Word
    word: forget
    stem: forget
    docFrequency: 3.0
    docPositions:
    - 588
    - 1829
  disparity: !ruby/object:Word
    word: disparity
    stem: dispar
    docFrequency: 3.0
    docPositions:
    - 588
    - 1829
  wealth: !ruby/object:Word
    word: wealth
    stem: wealth
    docFrequency: 3.0
    docPositions:
    - 589
    - 1830
  europe: !ruby/object:Word
    word: europe
    stem: europ
    docFrequency: 3.0
    docPositions:
    - 589
    - 1830
  greater: !ruby/object:Word
    word: greater
    stem: greater
    docFrequency: 5.0
    docPositions:
    - 589
    - 1174
    - 1830
    - 2213
  american: !ruby/object:Word
    word: american
    stem: american
    docFrequency: 3.0
    docPositions:
    - 589
    - 1830
  englishman: !ruby/object:Word
    word: englishman
    stem: englishman
    docFrequency: 3.0
    docPositions:
    - 590
    - 1831
  italian: !ruby/object:Word
    word: italian
    stem: italian
    docFrequency: 3.0
    docPositions:
    - 590
    - 1831
  sums: !ruby/object:Word
    word: sums
    stem: sum
    docFrequency: 3.0
    docPositions:
    - 591
    - 1832
  displacing: !ruby/object:Word
    word: displacing
    stem: displac
    docFrequency: 3.0
    docPositions:
    - 591
    - 1832
  bear: !ruby/object:Word
    word: bear
    stem: bear
    docFrequency: 3.0
    docPositions:
    - 591
    - 1832
  higher: !ruby/object:Word
    word: higher
    stem: higher
    docFrequency: 3.0
    docPositions:
    - 592
    - 1833
  costs: !ruby/object:Word
    word: costs
    stem: cost
    docFrequency: 3.0
    docPositions:
    - 592
    - 1833
  anybody: !ruby/object:Word
    word: anybody
    stem: anybodi
    docFrequency: 5.0
    docPositions:
    - 595
    - 738
    - 1834
    - 1927
  normally: !ruby/object:Word
    word: normally
    stem: normal
    docFrequency: 3.0
    docPositions:
    - 595
    - 1834
  continue: !ruby/object:Word
    word: continue
    stem: continu
    docFrequency: 7.0
    docPositions:
    - 595
    - 745
    - 1122
    - 1834
    - 1932
    - 2177
  along: !ruby/object:Word
    word: along
    stem: along
    docFrequency: 5.0
    docPositions:
    - 595
    - 1190
    - 1834
    - 2223
  remarkable: !ruby/object:Word
    word: remarkable
    stem: remark
    docFrequency: 7.0
    docPositions:
    - 596
    - 695
    - 1337
    - 1835
    - 1900
    - 2326
  strength: !ruby/object:Word
    word: strength
    stem: strength
    docFrequency: 7.0
    docPositions:
    - 599
    - 600
    - 668
    - 1836
    - 1837
    - 1883
  understand: !ruby/object:Word
    word: understand
    stem: understand
    docFrequency: 3.0
    docPositions:
    - 600
    - 1837
  depth: !ruby/object:Word
    word: depth
    stem: depth
    docFrequency: 3.0
    docPositions:
    - 600
    - 1837
  earlier: !ruby/object:Word
    word: earlier
    stem: earlier
    docFrequency: 3.0
    docPositions:
    - 602
    - 1837
  looking: !ruby/object:Word
    word: looking
    stem: look
    docFrequency: 5.0
    docPositions:
    - 602
    - 683
    - 1837
    - 1892
  tapes: !ruby/object:Word
    word: tapes
    stem: tape
    docFrequency: 3.0
    docPositions:
    - 603
    - 1838
  decca: !ruby/object:Word
    word: decca
    stem: decca
    docFrequency: 3.0
    docPositions:
    - 603
    - 1838
  ii: !ruby/object:Word
    word: ii
    stem: ii
    docFrequency: 5.0
    docPositions:
    - 603
    - 640
    - 1838
    - 1863
  emi: !ruby/object:Word
    word: emi
    stem: emi
    docFrequency: 3.0
    docPositions:
    - 603
    - 1838
  enter: !ruby/object:Word
    word: enter
    stem: enter
    docFrequency: 3.0
    docPositions:
    - 604
    - 1839
  drive: !ruby/object:Word
    word: drive
    stem: drive
    docFrequency: 19.0
    docPositions:
    - 604
    - 606
    - 620
    - 657
    - 1054
    - 1056
    - 1065
    - 1083
    - 1084
    - 1839
    - 1841
    - 1851
    - 1876
    - 2131
    - 2133
    - 2140
    - 2152
    - 2153
  investigated: !ruby/object:Word
    word: investigated
    stem: investig
    docFrequency: 3.0
    docPositions:
    - 604
    - 1839
  potter: !ruby/object:Word
    word: potter
    stem: potter
    docFrequency: 3.0
    docPositions:
    - 605
    - 1840
  ampex: !ruby/object:Word
    word: ampex
    stem: ampex
    docFrequency: 5.0
    docPositions:
    - 605
    - 1840
  iii: !ruby/object:Word
    word: iii
    stem: iii
    docFrequency: 3.0
    docPositions:
    - 605
    - 1840
  drives: !ruby/object:Word
    word: drives
    stem: drive
    docFrequency: 7.0
    docPositions:
    - 605
    - 608
    - 610
    - 1840
    - 1841
    - 1843
  possibility: !ruby/object:Word
    word: possibility
    stem: possibl
    docFrequency: 3.0
    docPositions:
    - 606
    - 1841
  terrible: !ruby/object:Word
    word: terrible
    stem: terribl
    docFrequency: 3.0
    docPositions:
    - 608
    - 1841
  dreadful: !ruby/object:Word
    word: dreadful
    stem: dread
    docFrequency: 3.0
    docPositions:
    - 609
    - 1842
  pinch: !ruby/object:Word
    word: pinch
    stem: pinch
    docFrequency: 3.0
    docPositions:
    - 609
    - 1842
  roll: !ruby/object:Word
    word: roll
    stem: roll
    docFrequency: 3.0
    docPositions:
    - 609
    - 1842
  capstans: !ruby/object:Word
    word: capstans
    stem: capstan
    docFrequency: 3.0
    docPositions:
    - 609
    - 1842
  grind: !ruby/object:Word
    word: grind
    stem: grind
    docFrequency: 3.0
    docPositions:
    - 609
    - 1842
  contact: !ruby/object:Word
    word: contact
    stem: contact
    docFrequency: 15.0
    docPositions:
    - 610
    - 614
    - 616
    - 786
    - 812
    - 1413
    - 1440
    - 1843
    - 1847
    - 1959
    - 1976
    - 2360
    - 2367
  head: !ruby/object:Word
    word: head
    stem: head
    docFrequency: 13.0
    docPositions:
    - 610
    - 614
    - 647
    - 1262
    - 1269
    - 1357
    - 1843
    - 1847
    - 1868
    - 2274
    - 2279
    - 2340
  realise: !ruby/object:Word
    word: realise
    stem: realis
    docFrequency: 3.0
    docPositions:
    - 611
    - 1844
  obvious: !ruby/object:Word
    word: obvious
    stem: obviou
    docFrequency: 3.0
    docPositions:
    - 611
    - 1844
  pack: !ruby/object:Word
    word: pack
    stem: pack
    docFrequency: 5.0
    docPositions:
    - 613
    - 1846
  densely: !ruby/object:Word
    word: densely
    stem: dens
    docFrequency: 5.0
    docPositions:
    - 613
    - 1846
  huge: !ruby/object:Word
    word: huge
    stem: huge
    docFrequency: 5.0
    docPositions:
    - 614
    - 688
    - 1847
    - 1895
  else: !ruby/object:Word
    word: else
    stem: els
    docFrequency: 5.0
    docPositions:
    - 616
    - 624
    - 1847
    - 1853
  avoided: !ruby/object:Word
    word: avoided
    stem: avoid
    docFrequency: 7.0
    docPositions:
    - 616
    - 918
    - 937
    - 1847
    - 2046
    - 2059
  felt: !ruby/object:Word
    word: felt
    stem: felt
    docFrequency: 7.0
    docPositions:
    - 616
    - 726
    - 1311
    - 1847
    - 1919
    - 2308
  manage: !ruby/object:Word
    word: manage
    stem: manag
    docFrequency: 3.0
    docPositions:
    - 617
    - 1848
  wear: !ruby/object:Word
    word: wear
    stem: wear
    docFrequency: 3.0
    docPositions:
    - 617
    - 1848
  resources: !ruby/object:Word
    word: resources
    stem: resourc
    docFrequency: 4.0
    docPositions:
    - 617
    - 1410
    - 1848
  apply: !ruby/object:Word
    word: apply
    stem: appli
    docFrequency: 3.0
    docPositions:
    - 617
    - 1848
  solve: !ruby/object:Word
    word: solve
    stem: solv
    docFrequency: 5.0
    docPositions:
    - 618
    - 758
    - 1849
    - 1941
  solution: !ruby/object:Word
    word: solution
    stem: solut
    docFrequency: 13.0
    docPositions:
    - 618
    - 622
    - 757
    - 847
    - 1185
    - 1208
    - 1849
    - 1853
    - 1940
    - 2003
    - 2220
    - 2237
  proved: !ruby/object:Word
    word: proved
    stem: prove
    docFrequency: 3.0
    docPositions:
    - 618
    - 1849
  proprietary: !ruby/object:Word
    word: proprietary
    stem: proprietari
    docFrequency: 3.0
    docPositions:
    - 619
    - 1850
  heavy: !ruby/object:Word
    word: heavy
    stem: heavi
    docFrequency: 7.0
    docPositions:
    - 619
    - 937
    - 1350
    - 1850
    - 2059
    - 2335
  duty: !ruby/object:Word
    word: duty
    stem: duti
    docFrequency: 3.0
    docPositions:
    - 619
    - 1850
  covering: !ruby/object:Word
    word: covering
    stem: cover
    docFrequency: 4.0
    docPositions:
    - 619
    - 1469
    - 1850
  materials: !ruby/object:Word
    word: materials
    stem: materi
    docFrequency: 3.0
    docPositions:
    - 620
    - 1851
  controllers: !ruby/object:Word
    word: controllers
    stem: control
    docFrequency: 7.0
    docPositions:
    - 621
    - 1187
    - 1191
    - 1852
    - 2222
    - 2224
  everything: !ruby/object:Word
    word: everything
    stem: everyth
    docFrequency: 3.0
    docPositions:
    - 621
    - 1852
  together: !ruby/object:Word
    word: together
    stem: togeth
    docFrequency: 11.0
    docPositions:
    - 621
    - 821
    - 1003
    - 1061
    - 1065
    - 1852
    - 1983
    - 2103
    - 2136
    - 2140
  printers: !ruby/object:Word
    word: printers
    stem: printer
    docFrequency: 5.0
    docPositions:
    - 624
    - 625
    - 1853
    - 1854
  innovated: !ruby/object:Word
    word: innovated
    stem: innov
    docFrequency: 3.0
    docPositions:
    - 624
    - 1853
  analex: !ruby/object:Word
    word: analex
    stem: analex
    docFrequency: 5.0
    docPositions:
    - 624
    - 638
    - 1853
    - 1863
  drum: !ruby/object:Word
    word: drum
    stem: drum
    docFrequency: 23.0
    docPositions:
    - 624
    - 625
    - 629
    - 1098
    - 1356
    - 1357
    - 1358
    - 1360
    - 1362
    - 1364
    - 1853
    - 1854
    - 1856
    - 2161
    - 2339
    - 2340
    - 2341
    - 2343
    - 2345
  strike: !ruby/object:Word
    word: strike
    stem: strike
    docFrequency: 3.0
    docPositions:
    - 625
    - 1854
  quality: !ruby/object:Word
    word: quality
    stem: qualiti
    docFrequency: 3.0
    docPositions:
    - 626
    - 1855
  printing: !ruby/object:Word
    word: printing
    stem: print
    docFrequency: 5.0
    docPositions:
    - 626
    - 1185
    - 1855
    - 2220
  chain: !ruby/object:Word
    word: chain
    stem: chain
    docFrequency: 7.0
    docPositions:
    - 629
    - 635
    - 794
    - 1856
    - 1860
    - 1963
  sideways: !ruby/object:Word
    word: sideways
    stem: sidewai
    docFrequency: 3.0
    docPositions:
    - 629
    - 1856
  bang: !ruby/object:Word
    word: bang
    stem: bang
    docFrequency: 5.0
    docPositions:
    - 630
    - 766
    - 1857
    - 1947
  alignment: !ruby/object:Word
    word: alignment
    stem: align
    docFrequency: 3.0
    docPositions:
    - 630
    - 1857
  slightly: !ruby/object:Word
    word: slightly
    stem: slightli
    docFrequency: 7.0
    docPositions:
    - 630
    - 631
    - 633
    - 1857
    - 1858
    - 1860
  displaced: !ruby/object:Word
    word: displaced
    stem: displac
    docFrequency: 3.0
    docPositions:
    - 631
    - 1858
  nearly: !ruby/object:Word
    word: nearly
    stem: nearli
    docFrequency: 7.0
    docPositions:
    - 632
    - 712
    - 1328
    - 1859
    - 1911
    - 2321
  bad: !ruby/object:Word
    word: bad
    stem: bad
    docFrequency: 3.0
    docPositions:
    - 632
    - 1859
  psychologically: !ruby/object:Word
    word: psychologically
    stem: psycholog
    docFrequency: 3.0
    docPositions:
    - 632
    - 1859
  looks: !ruby/object:Word
    word: looks
    stem: look
    docFrequency: 3.0
    docPositions:
    - 632
    - 1859
  mechanism: !ruby/object:Word
    word: mechanism
    stem: mechan
    docFrequency: 3.0
    docPositions:
    - 635
    - 1860
  cheaper: !ruby/object:Word
    word: cheaper
    stem: cheaper
    docFrequency: 3.0
    docPositions:
    - 635
    - 1860
  replaceable: !ruby/object:Word
    word: replaceable
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 636
    - 1861
  fonts: !ruby/object:Word
    word: fonts
    stem: font
    docFrequency: 3.0
    docPositions:
    - 636
    - 1861
  upper: !ruby/object:Word
    word: upper
    stem: upper
    docFrequency: 3.0
    docPositions:
    - 637
    - 1862
  lower: !ruby/object:Word
    word: lower
    stem: lower
    docFrequency: 7.0
    docPositions:
    - 637
    - 1016
    - 1174
    - 1862
    - 2107
    - 2213
  capabilities: !ruby/object:Word
    word: capabilities
    stem: capabl
    docFrequency: 3.0
    docPositions:
    - 637
    - 1862
  impossible: !ruby/object:Word
    word: impossible
    stem: imposs
    docFrequency: 3.0
    docPositions:
    - 637
    - 1862
  powers: !ruby/object:Word
    word: powers
    stem: power
    docFrequency: 5.0
    docPositions:
    - 640
    - 1863
  samas: !ruby/object:Word
    word: samas
    stem: sama
    docFrequency: 5.0
    docPositions:
    - 640
    - 1863
  printer: !ruby/object:Word
    word: printer
    stem: printer
    docFrequency: 7.0
    docPositions:
    - 640
    - 643
    - 1150
    - 1863
    - 1866
    - 2197
  electricity: !ruby/object:Word
    word: electricity
    stem: electr
    docFrequency: 5.0
    docPositions:
    - 641
    - 642
    - 1864
    - 1865
  belt: !ruby/object:Word
    word: belt
    stem: belt
    docFrequency: 5.0
    docPositions:
    - 641
    - 642
    - 1864
    - 1865
  cable: !ruby/object:Word
    word: cable
    stem: cabl
    docFrequency: 5.0
    docPositions:
    - 641
    - 642
    - 1864
    - 1865
  done: !ruby/object:Word
    word: done
    stem: done
    docFrequency: 11.0
    docPositions:
    - 642
    - 725
    - 745
    - 1315
    - 1348
    - 1865
    - 1918
    - 1932
    - 2312
    - 2333
  dangerously: !ruby/object:Word
    word: dangerously
    stem: danger
    docFrequency: 3.0
    docPositions:
    - 642
    - 1865
  fangled: !ruby/object:Word
    word: fangled
    stem: fangl
    docFrequency: 3.0
    docPositions:
    - 642
    - 1865
  totally: !ruby/object:Word
    word: totally
    stem: total
    docFrequency: 5.0
    docPositions:
    - 643
    - 679
    - 1866
    - 1890
  simplicity: !ruby/object:Word
    word: simplicity
    stem: simplic
    docFrequency: 3.0
    docPositions:
    - 643
    - 1866
  reliability: !ruby/object:Word
    word: reliability
    stem: reliabl
    docFrequency: 13.0
    docPositions:
    - 644
    - 950
    - 1050
    - 1155
    - 1294
    - 1364
    - 1867
    - 2068
    - 2127
    - 2200
    - 2295
    - 2345
  trace: !ruby/object:Word
    word: trace
    stem: trace
    docFrequency: 3.0
    docPositions:
    - 646
    - 1867
  theoretical: !ruby/object:Word
    word: theoretical
    stem: theoret
    docFrequency: 3.0
    docPositions:
    - 647
    - 1868
  study: !ruby/object:Word
    word: study
    stem: studi
    docFrequency: 5.0
    docPositions:
    - 647
    - 791
    - 1868
    - 1960
  floating: !ruby/object:Word
    word: floating
    stem: float
    docFrequency: 3.0
    docPositions:
    - 647
    - 1868
  air: !ruby/object:Word
    word: air
    stem: air
    docFrequency: 5.0
    docPositions:
    - 648
    - 1225
    - 1869
    - 2248
  bearing: !ruby/object:Word
    word: bearing
    stem: bear
    docFrequency: 5.0
    docPositions:
    - 648
    - 1165
    - 1869
    - 2206
  subsystem: !ruby/object:Word
    word: subsystem
    stem: subsystem
    docFrequency: 3.0
    docPositions:
    - 648
    - 1869
  ramac: !ruby/object:Word
    word: ramac
    stem: ramac
    docFrequency: 3.0
    docPositions:
    - 648
    - 1869
  capacity: !ruby/object:Word
    word: capacity
    stem: capac
    docFrequency: 5.0
    docPositions:
    - 649
    - 1098
    - 1870
    - 2161
  accessed: !ruby/object:Word
    word: accessed
    stem: access
    docFrequency: 3.0
    docPositions:
    - 649
    - 1870
  arm: !ruby/object:Word
    word: arm
    stem: arm
    docFrequency: 3.0
    docPositions:
    - 649
    - 1870
  access: !ruby/object:Word
    word: access
    stem: access
    docFrequency: 15.0
    docPositions:
    - 649
    - 656
    - 964
    - 1130
    - 1133
    - 1379
    - 1389
    - 1870
    - 1875
    - 2076
    - 2181
    - 2184
    - 2353
  order: !ruby/object:Word
    word: order
    stem: order
    docFrequency: 27.0
    docPositions:
    - 650
    - 841
    - 858
    - 915
    - 967
    - 1149
    - 1169
    - 1174
    - 1203
    - 1218
    - 1244
    - 1342
    - 1463
    - 1871
    - 1997
    - 2010
    - 2043
    - 2077
    - 2196
    - 2208
    - 2213
    - 2232
    - 2243
    - 2263
    - 2329
    - 2378
  experience: !ruby/object:Word
    word: experience
    stem: experi
    docFrequency: 7.0
    docPositions:
    - 650
    - 968
    - 1299
    - 1871
    - 2078
    - 2300
  realised: !ruby/object:Word
    word: realised
    stem: realis
    docFrequency: 7.0
    docPositions:
    - 652
    - 945
    - 1184
    - 1871
    - 2063
    - 2219
  discs: !ruby/object:Word
    word: discs
    stem: disc
    docFrequency: 13.0
    docPositions:
    - 652
    - 658
    - 662
    - 664
    - 665
    - 881
    - 1871
    - 1877
    - 1879
    - 1881
    - 1882
    - 2023
  far: !ruby/object:Word
    word: far
    stem: far
    docFrequency: 5.0
    docPositions:
    - 653
    - 1326
    - 1872
    - 2319
  subsidiary: !ruby/object:Word
    word: subsidiary
    stem: subsidiari
    docFrequency: 3.0
    docPositions:
    - 653
    - 1872
  medium: !ruby/object:Word
    word: medium
    stem: medium
    docFrequency: 3.0
    docPositions:
    - 653
    - 1872
  continuously: !ruby/object:Word
    word: continuously
    stem: continu
    docFrequency: 3.0
    docPositions:
    - 655
    - 1874
  chuntering: !ruby/object:Word
    word: chuntering
    stem: chunter
    docFrequency: 3.0
    docPositions:
    - 655
    - 1874
  performed: !ruby/object:Word
    word: performed
    stem: perform
    docFrequency: 5.0
    docPositions:
    - 656
    - 1119
    - 1875
    - 2174
  compile: !ruby/object:Word
    word: compile
    stem: compil
    docFrequency: 3.0
    docPositions:
    - 656
    - 1875
  link: !ruby/object:Word
    word: link
    stem: link
    docFrequency: 9.0
    docPositions:
    - 656
    - 1116
    - 1121
    - 1305
    - 1875
    - 2171
    - 2176
    - 2304
  use: !ruby/object:Word
    word: use
    stem: us
    docFrequency: 23.0
    docPositions:
    - 657
    - 795
    - 847
    - 1010
    - 1105
    - 1113
    - 1170
    - 1184
    - 1203
    - 1208
    - 1458
    - 1876
    - 1964
    - 2003
    - 2106
    - 2164
    - 2168
    - 2209
    - 2219
    - 2232
    - 2237
    - 2374
  movement: !ruby/object:Word
    word: movement
    stem: movement
    docFrequency: 3.0
    docPositions:
    - 657
    - 1876
  flow: !ruby/object:Word
    word: flow
    stem: flow
    docFrequency: 3.0
    docPositions:
    - 658
    - 1877
  jobs: !ruby/object:Word
    word: jobs
    stem: job
    docFrequency: 3.0
    docPositions:
    - 658
    - 1877
  obviated: !ruby/object:Word
    word: obviated
    stem: obviat
    docFrequency: 3.0
    docPositions:
    - 658
    - 1877
  virtually: !ruby/object:Word
    word: virtually
    stem: virtual
    docFrequency: 3.0
    docPositions:
    - 661
    - 1878
  monopoly: !ruby/object:Word
    word: monopoly
    stem: monopoli
    docFrequency: 3.0
    docPositions:
    - 661
    - 1878
  wigmore: !ruby/object:Word
    word: wigmore
    stem: wigmor
    docFrequency: 3.0
    docPositions:
    - 662
    - 1879
  street: !ruby/object:Word
    word: street
    stem: street
    docFrequency: 3.0
    docPositions:
    - 662
    - 1879
  explore: !ruby/object:Word
    word: explore
    stem: explor
    docFrequency: 3.0
    docPositions:
    - 662
    - 1879
  buying: !ruby/object:Word
    word: buying
    stem: bui
    docFrequency: 3.0
    docPositions:
    - 662
    - 1879
  alternative: !ruby/object:Word
    word: alternative
    stem: altern
    docFrequency: 3.0
    docPositions:
    - 663
    - 1880
  resell: !ruby/object:Word
    word: resell
    stem: resel
    docFrequency: 3.0
    docPositions:
    - 664
    - 1881
  customers: !ruby/object:Word
    word: customers
    stem: custom
    docFrequency: 9.0
    docPositions:
    - 664
    - 681
    - 704
    - 778
    - 1881
    - 1890
    - 1905
    - 1955
  tremendous: !ruby/object:Word
    word: tremendous
    stem: tremend
    docFrequency: 5.0
    docPositions:
    - 664
    - 1329
    - 1881
    - 2322
  disadvantage: !ruby/object:Word
    word: disadvantage
    stem: disadvantag
    docFrequency: 3.0
    docPositions:
    - 664
    - 1881
  competitors: !ruby/object:Word
    word: competitors
    stem: competitor
    docFrequency: 3.0
    docPositions:
    - 665
    - 1882
  reliable: !ruby/object:Word
    word: reliable
    stem: reliabl
    docFrequency: 11.0
    docPositions:
    - 666
    - 814
    - 947
    - 1300
    - 1312
    - 1883
    - 1978
    - 2065
    - 2301
    - 2309
  technological: !ruby/object:Word
    word: technological
    stem: technolog
    docFrequency: 3.0
    docPositions:
    - 668
    - 1883
  invested: !ruby/object:Word
    word: invested
    stem: invest
    docFrequency: 5.0
    docPositions:
    - 668
    - 669
    - 1883
    - 1884
  ahead: !ruby/object:Word
    word: ahead
    stem: ahead
    docFrequency: 7.0
    docPositions:
    - 669
    - 742
    - 1178
    - 1884
    - 1929
    - 2215
  investment: !ruby/object:Word
    word: investment
    stem: invest
    docFrequency: 5.0
    docPositions:
    - 670
    - 673
    - 1885
    - 1886
  plant: !ruby/object:Word
    word: plant
    stem: plant
    docFrequency: 21.0
    docPositions:
    - 670
    - 1158
    - 1182
    - 1185
    - 1189
    - 1221
    - 1234
    - 1237
    - 1241
    - 1242
    - 1885
    - 2203
    - 2217
    - 2220
    - 2222
    - 2246
    - 2255
    - 2258
    - 2260
    - 2261
  automated: !ruby/object:Word
    word: automated
    stem: autom
    docFrequency: 3.0
    docPositions:
    - 670
    - 1885
  stack: !ruby/object:Word
    word: stack
    stem: stack
    docFrequency: 3.0
    docPositions:
    - 671
    - 1886
  five: !ruby/object:Word
    word: five
    stem: five
    docFrequency: 7.0
    docPositions:
    - 673
    - 861
    - 1224
    - 1886
    - 2011
    - 2247
  manufacturing: !ruby/object:Word
    word: manufacturing
    stem: manufactur
    docFrequency: 5.0
    docPositions:
    - 674
    - 1887
  nothing: !ruby/object:Word
    word: nothing
    stem: noth
    docFrequency: 3.0
    docPositions:
    - 675
    - 1888
  profits: !ruby/object:Word
    word: profits
    stem: profit
    docFrequency: 3.0
    docPositions:
    - 675
    - 1888
  immense: !ruby/object:Word
    word: immense
    stem: immens
    docFrequency: 3.0
    docPositions:
    - 677
    - 1888
  strengths: !ruby/object:Word
    word: strengths
    stem: strength
    docFrequency: 3.0
    docPositions:
    - 677
    - 1888
  abandon: !ruby/object:Word
    word: abandon
    stem: abandon
    docFrequency: 3.0
    docPositions:
    - 678
    - 1889
  existing: !ruby/object:Word
    word: existing
    stem: exist
    docFrequency: 6.0
    docPositions:
    - 678
    - 772
    - 1451
    - 1889
    - 1951
  products: !ruby/object:Word
    word: products
    stem: product
    docFrequency: 5.0
    docPositions:
    - 678
    - 1272
    - 1889
    - 2282
  incompatible: !ruby/object:Word
    word: incompatible
    stem: incompat
    docFrequency: 3.0
    docPositions:
    - 679
    - 1890
  conscious: !ruby/object:Word
    word: conscious
    stem: consciou
    docFrequency: 3.0
    docPositions:
    - 681
    - 1890
  ici: !ruby/object:Word
    word: ici
    stem: ici
    docFrequency: 9.0
    docPositions:
    - 681
    - 1183
    - 1184
    - 1890
    - 2218
    - 2219
  keen: !ruby/object:Word
    word: keen
    stem: keen
    docFrequency: 5.0
    docPositions:
    - 681
    - 970
    - 1890
    - 2080
  offices: !ruby/object:Word
    word: offices
    stem: offic
    docFrequency: 3.0
    docPositions:
    - 682
    - 1891
  centres: !ruby/object:Word
    word: centres
    stem: centr
    docFrequency: 3.0
    docPositions:
    - 682
    - 1891
  standards: !ruby/object:Word
    word: standards
    stem: standard
    docFrequency: 3.0
    docPositions:
    - 683
    - 1892
  customer: !ruby/object:Word
    word: customer
    stem: custom
    docFrequency: 7.0
    docPositions:
    - 684
    - 970
    - 1261
    - 1893
    - 2080
    - 2273
  engineers: !ruby/object:Word
    word: engineers
    stem: engin
    docFrequency: 5.0
    docPositions:
    - 684
    - 1893
  sorts: !ruby/object:Word
    word: sorts
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 684
    - 1893
  programming: !ruby/object:Word
    word: programming
    stem: program
    docFrequency: 11.0
    docPositions:
    - 685
    - 688
    - 702
    - 1195
    - 1318
    - 1894
    - 1895
    - 1903
    - 2226
    - 2315
  courses: !ruby/object:Word
    word: courses
    stem: cours
    docFrequency: 3.0
    docPositions:
    - 685
    - 1894
  expensive: !ruby/object:Word
    word: expensive
    stem: expens
    docFrequency: 3.0
    docPositions:
    - 686
    - 1895
  compound: !ruby/object:Word
    word: compound
    stem: compound
    docFrequency: 3.0
    docPositions:
    - 688
    - 1895
  explosion: !ruby/object:Word
    word: explosion
    stem: explos
    docFrequency: 3.0
    docPositions:
    - 688
    - 1895
  languages: !ruby/object:Word
    word: languages
    stem: languag
    docFrequency: 3.0
    docPositions:
    - 688
    - 1895
  ibsys: !ruby/object:Word
    word: ibsys
    stem: ibsi
    docFrequency: 5.0
    docPositions:
    - 689
    - 704
    - 1896
    - 1905
  talking: !ruby/object:Word
    word: talking
    stem: talk
    docFrequency: 3.0
    docPositions:
    - 690
    - 1897
  fortran: !ruby/object:Word
    word: fortran
    stem: fortran
    docFrequency: 9.0
    docPositions:
    - 690
    - 693
    - 695
    - 699
    - 1897
    - 1898
    - 1900
    - 1902
  monitor: !ruby/object:Word
    word: monitor
    stem: monitor
    docFrequency: 11.0
    docPositions:
    - 690
    - 1100
    - 1295
    - 1296
    - 1307
    - 1897
    - 2161
    - 2296
    - 2297
    - 2306
  share: !ruby/object:Word
    word: share
    stem: share
    docFrequency: 5.0
    docPositions:
    - 691
    - 694
    - 1898
    - 1899
  sos: !ruby/object:Word
    word: sos
    stem: so
    docFrequency: 3.0
    docPositions:
    - 691
    - 1898
  conjunction: !ruby/object:Word
    word: conjunction
    stem: conjunct
    docFrequency: 3.0
    docPositions:
    - 691
    - 1898
  initial: !ruby/object:Word
    word: initial
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 693
    - 694
    - 1898
    - 1899
  comprised: !ruby/object:Word
    word: comprised
    stem: compris
    docFrequency: 7.0
    docPositions:
    - 693
    - 770
    - 796
    - 1898
    - 1949
    - 1964
  entirely: !ruby/object:Word
    word: entirely
    stem: entir
    docFrequency: 3.0
    docPositions:
    - 693
    - 1898
  played: !ruby/object:Word
    word: played
    stem: plai
    docFrequency: 3.0
    docPositions:
    - 694
    - 1899
  optimisation: !ruby/object:Word
    word: optimisation
    stem: optimis
    docFrequency: 3.0
    docPositions:
    - 695
    - 1900
  sixties: !ruby/object:Word
    word: sixties
    stem: sixti
    docFrequency: 3.0
    docPositions:
    - 698
    - 1901
  language: !ruby/object:Word
    word: language
    stem: languag
    docFrequency: 3.0
    docPositions:
    - 698
    - 1901
  comtran: !ruby/object:Word
    word: comtran
    stem: comtran
    docFrequency: 3.0
    docPositions:
    - 700
    - 1903
  translator: !ruby/object:Word
    word: translator
    stem: translat
    docFrequency: 3.0
    docPositions:
    - 700
    - 1903
  cobol: !ruby/object:Word
    word: cobol
    stem: cobol
    docFrequency: 3.0
    docPositions:
    - 700
    - 1903
  algol: !ruby/object:Word
    word: algol
    stem: algol
    docFrequency: 3.0
    docPositions:
    - 700
    - 1903
  ask: !ruby/object:Word
    word: ask
    stem: ask
    docFrequency: 3.0
    docPositions:
    - 702
    - 1903
  writing: !ruby/object:Word
    word: writing
    stem: write
    docFrequency: 3.0
    docPositions:
    - 703
    - 1904
  programs: !ruby/object:Word
    word: programs
    stem: program
    docFrequency: 3.0
    docPositions:
    - 703
    - 1904
  free: !ruby/object:Word
    word: free
    stem: free
    docFrequency: 8.0
    docPositions:
    - 703
    - 1458
    - 1459
    - 1467
    - 1904
    - 2374
    - 2375
  moan: !ruby/object:Word
    word: moan
    stem: moan
    docFrequency: 3.0
    docPositions:
    - 704
    - 1905
  isn: !ruby/object:Word
    word: isn
    stem: isn
    docFrequency: 3.0
    docPositions:
    - 705
    - 1906
  take: !ruby/object:Word
    word: take
    stem: take
    docFrequency: 13.0
    docPositions:
    - 705
    - 752
    - 1191
    - 1277
    - 1430
    - 1463
    - 1906
    - 1937
    - 2224
    - 2285
    - 2364
    - 2378
  real: !ruby/object:Word
    word: real
    stem: real
    docFrequency: 5.0
    docPositions:
    - 707
    - 1280
    - 1908
    - 2288
  concern: !ruby/object:Word
    word: concern
    stem: concern
    docFrequency: 3.0
    docPositions:
    - 707
    - 1908
  spend: !ruby/object:Word
    word: spend
    stem: spend
    docFrequency: 3.0
    docPositions:
    - 709
    - 1908
  interesting: !ruby/object:Word
    word: interesting
    stem: interest
    docFrequency: 5.0
    docPositions:
    - 710
    - 738
    - 1909
    - 1927
  spending: !ruby/object:Word
    word: spending
    stem: spend
    docFrequency: 3.0
    docPositions:
    - 712
    - 1911
  bounced: !ruby/object:Word
    word: bounced
    stem: bounc
    docFrequency: 3.0
    docPositions:
    - 714
    - 1911
  staff: !ruby/object:Word
    word: staff
    stem: staff
    docFrequency: 5.0
    docPositions:
    - 714
    - 715
    - 1911
    - 1912
  corporation: !ruby/object:Word
    word: corporation
    stem: corpor
    docFrequency: 3.0
    docPositions:
    - 715
    - 1912
  recollect: !ruby/object:Word
    word: recollect
    stem: recollect
    docFrequency: 3.0
    docPositions:
    - 715
    - 1912
  chap: !ruby/object:Word
    word: chap
    stem: chap
    docFrequency: 3.0
    docPositions:
    - 715
    - 1912
  spaulding: !ruby/object:Word
    word: spaulding
    stem: spauld
    docFrequency: 3.0
    docPositions:
    - 715
    - 1912
  proliferation: !ruby/object:Word
    word: proliferation
    stem: prolifer
    docFrequency: 3.0
    docPositions:
    - 716
    - 1913
  best: !ruby/object:Word
    word: best
    stem: best
    docFrequency: 3.0
    docPositions:
    - 719
    - 1914
  committees: !ruby/object:Word
    word: committees
    stem: committe
    docFrequency: 3.0
    docPositions:
    - 719
    - 1914
  reference: !ruby/object:Word
    word: reference
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 720
    - 1915
  plan: !ruby/object:Word
    word: plan
    stem: plan
    docFrequency: 9.0
    docPositions:
    - 721
    - 731
    - 733
    - 748
    - 1916
    - 1922
    - 1933
  pressure: !ruby/object:Word
    word: pressure
    stem: pressur
    docFrequency: 7.0
    docPositions:
    - 723
    - 750
    - 1083
    - 1918
    - 1935
    - 2152
  family: !ruby/object:Word
    word: family
    stem: famili
    docFrequency: 3.0
    docPositions:
    - 723
    - 1918
  evans: !ruby/object:Word
    word: evans
    stem: evan
    docFrequency: 3.0
    docPositions:
    - 725
    - 1918
  feelings: !ruby/object:Word
    word: feelings
    stem: feel
    docFrequency: 3.0
    docPositions:
    - 726
    - 1919
  compatibility: !ruby/object:Word
    word: compatibility
    stem: compat
    docFrequency: 11.0
    docPositions:
    - 726
    - 740
    - 743
    - 746
    - 761
    - 1919
    - 1927
    - 1930
    - 1933
    - 1944
  president: !ruby/object:Word
    word: president
    stem: presid
    docFrequency: 3.0
    docPositions:
    - 727
    - 1920
  dsd: !ruby/object:Word
    word: dsd
    stem: dsd
    docFrequency: 3.0
    docPositions:
    - 727
    - 1920
  mixed: !ruby/object:Word
    word: mixed
    stem: mix
    docFrequency: 3.0
    docPositions:
    - 728
    - 1921
  required: !ruby/object:Word
    word: required
    stem: requir
    docFrequency: 19.0
    docPositions:
    - 730
    - 836
    - 944
    - 948
    - 1067
    - 1080
    - 1119
    - 1217
    - 1227
    - 1921
    - 1994
    - 2062
    - 2066
    - 2142
    - 2149
    - 2174
    - 2242
    - 2250
  report: !ruby/object:Word
    word: report
    stem: report
    docFrequency: 7.0
    docPositions:
    - 731
    - 740
    - 1336
    - 1922
    - 1927
    - 2325
  recommending: !ruby/object:Word
    word: recommending
    stem: recommend
    docFrequency: 3.0
    docPositions:
    - 731
    - 1922
  caused: !ruby/object:Word
    word: caused
    stem: caus
    docFrequency: 3.0
    docPositions:
    - 733
    - 1922
  personally: !ruby/object:Word
    word: personally
    stem: person
    docFrequency: 3.0
    docPositions:
    - 733
    - 1922
  worry: !ruby/object:Word
    word: worry
    stem: worri
    docFrequency: 5.0
    docPositions:
    - 733
    - 746
    - 1922
    - 1933
  envisaged: !ruby/object:Word
    word: envisaged
    stem: envisag
    docFrequency: 3.0
    docPositions:
    - 733
    - 1922
  staggered: !ruby/object:Word
    word: staggered
    stem: stagger
    docFrequency: 3.0
    docPositions:
    - 734
    - 1923
  announcement: !ruby/object:Word
    word: announcement
    stem: announc
    docFrequency: 3.0
    docPositions:
    - 734
    - 1923
  binary: !ruby/object:Word
    word: binary
    stem: binari
    docFrequency: 9.0
    docPositions:
    - 734
    - 737
    - 851
    - 855
    - 1923
    - 1926
    - 2005
    - 2007
  model: !ruby/object:Word
    word: model
    stem: model
    docFrequency: 5.0
    docPositions:
    - 735
    - 1094
    - 1924
    - 2159
  aiming: !ruby/object:Word
    word: aiming
    stem: aim
    docFrequency: 3.0
    docPositions:
    - 736
    - 1925
  term: !ruby/object:Word
    word: term
    stem: term
    docFrequency: 15.0
    docPositions:
    - 736
    - 900
    - 1050
    - 1187
    - 1191
    - 1202
    - 1211
    - 1925
    - 2034
    - 2127
    - 2222
    - 2224
    - 2231
    - 2240
  grand: !ruby/object:Word
    word: grand
    stem: grand
    docFrequency: 3.0
    docPositions:
    - 736
    - 1925
  strategy: !ruby/object:Word
    word: strategy
    stem: strategi
    docFrequency: 5.0
    docPositions:
    - 737
    - 766
    - 1926
    - 1947
  allowing: !ruby/object:Word
    word: allowing
    stem: allow
    docFrequency: 3.0
    docPositions:
    - 737
    - 1926
  poke: !ruby/object:Word
    word: poke
    stem: poke
    docFrequency: 3.0
    docPositions:
    - 737
    - 1926
  enough: !ruby/object:Word
    word: enough
    stem: enough
    docFrequency: 7.0
    docPositions:
    - 738
    - 1045
    - 1312
    - 1927
    - 2124
    - 2309
  excited: !ruby/object:Word
    word: excited
    stem: excit
    docFrequency: 3.0
    docPositions:
    - 738
    - 1927
  expected: !ruby/object:Word
    word: expected
    stem: expect
    docFrequency: 5.0
    docPositions:
    - 741
    - 817
    - 1928
    - 1981
  applications: !ruby/object:Word
    word: applications
    stem: applic
    docFrequency: 20.0
    docPositions:
    - 741
    - 743
    - 1017
    - 1052
    - 1097
    - 1137
    - 1139
    - 1160
    - 1256
    - 1258
    - 1928
    - 1930
    - 2108
    - 2129
    - 2160
    - 2186
    - 2188
    - 2270
  depended: !ruby/object:Word
    word: depended
    stem: depend
    docFrequency: 5.0
    docPositions:
    - 742
    - 1215
    - 1929
    - 2240
  migrating: !ruby/object:Word
    word: migrating
    stem: migrat
    docFrequency: 3.0
    docPositions:
    - 742
    - 1929
  teleprocessing: !ruby/object:Word
    word: teleprocessing
    stem: teleprocess
    docFrequency: 3.0
    docPositions:
    - 743
    - 1930
  accordingly: !ruby/object:Word
    word: accordingly
    stem: accordingli
    docFrequency: 3.0
    docPositions:
    - 743
    - 1930
  ignore: !ruby/object:Word
    word: ignore
    stem: ignor
    docFrequency: 3.0
    docPositions:
    - 743
    - 1930
  tend: !ruby/object:Word
    word: tend
    stem: tend
    docFrequency: 3.0
    docPositions:
    - 744
    - 1931
  boring: !ruby/object:Word
    word: boring
    stem: bore
    docFrequency: 3.0
    docPositions:
    - 745
    - 1932
  exploring: !ruby/object:Word
    word: exploring
    stem: explor
    docFrequency: 3.0
    docPositions:
    - 748
    - 1933
  achieve: !ruby/object:Word
    word: achieve
    stem: achiev
    docFrequency: 5.0
    docPositions:
    - 749
    - 1463
    - 1934
    - 2378
  ambitious: !ruby/object:Word
    word: ambitious
    stem: ambiti
    docFrequency: 3.0
    docPositions:
    - 749
    - 1934
  targets: !ruby/object:Word
    word: targets
    stem: target
    docFrequency: 3.0
    docPositions:
    - 749
    - 1934
  laid: !ruby/object:Word
    word: laid
    stem: laid
    docFrequency: 3.0
    docPositions:
    - 749
    - 1934
  does: !ruby/object:Word
    word: does
    stem: doe
    docFrequency: 3.0
    docPositions:
    - 749
    - 1934
  easily: !ruby/object:Word
    word: easily
    stem: easili
    docFrequency: 7.0
    docPositions:
    - 750
    - 855
    - 1084
    - 1935
    - 2007
    - 2153
  effect: !ruby/object:Word
    word: effect
    stem: effect
    docFrequency: 5.0
    docPositions:
    - 750
    - 930
    - 1935
    - 2054
  catalyst: !ruby/object:Word
    word: catalyst
    stem: catalyst
    docFrequency: 3.0
    docPositions:
    - 751
    - 1936
  honeywell: !ruby/object:Word
    word: honeywell
    stem: honeywel
    docFrequency: 5.0
    docPositions:
    - 751
    - 757
    - 1936
    - 1940
  cheekily: !ruby/object:Word
    word: cheekily
    stem: cheekili
    docFrequency: 3.0
    docPositions:
    - 751
    - 1936
  named: !ruby/object:Word
    word: named
    stem: name
    docFrequency: 3.0
    docPositions:
    - 751
    - 1936
  liberator: !ruby/object:Word
    word: liberator
    stem: liber
    docFrequency: 3.0
    docPositions:
    - 751
    - 1936
  cheaply: !ruby/object:Word
    word: cheaply
    stem: cheapli
    docFrequency: 3.0
    docPositions:
    - 752
    - 1937
  beautiful: !ruby/object:Word
    word: beautiful
    stem: beauti
    docFrequency: 3.0
    docPositions:
    - 753
    - 1938
  naturally: !ruby/object:Word
    word: naturally
    stem: natur
    docFrequency: 3.0
    docPositions:
    - 753
    - 1938
  quickly: !ruby/object:Word
    word: quickly
    stem: quickli
    docFrequency: 7.0
    docPositions:
    - 753
    - 902
    - 916
    - 1938
    - 2036
    - 2044
  typical: !ruby/object:Word
    word: typical
    stem: typic
    docFrequency: 3.0
    docPositions:
    - 756
    - 1939
  happened: !ruby/object:Word
    word: happened
    stem: happen
    docFrequency: 9.0
    docPositions:
    - 756
    - 817
    - 1239
    - 1321
    - 1939
    - 1981
    - 2260
    - 2316
  watson: !ruby/object:Word
    word: watson
    stem: watson
    docFrequency: 3.0
    docPositions:
    - 756
    - 1939
  became: !ruby/object:Word
    word: became
    stem: becam
    docFrequency: 11.0
    docPositions:
    - 756
    - 911
    - 942
    - 1115
    - 1252
    - 1939
    - 2039
    - 2062
    - 2170
    - 2266
  ordered: !ruby/object:Word
    word: ordered
    stem: order
    docFrequency: 3.0
    docPositions:
    - 756
    - 1939
  suddenly: !ruby/object:Word
    word: suddenly
    stem: suddenli
    docFrequency: 9.0
    docPositions:
    - 757
    - 766
    - 773
    - 1309
    - 1940
    - 1947
    - 1952
    - 2306
  discovered: !ruby/object:Word
    word: discovered
    stem: discov
    docFrequency: 3.0
    docPositions:
    - 757
    - 1940
  migration: !ruby/object:Word
    word: migration
    stem: migrat
    docFrequency: 3.0
    docPositions:
    - 758
    - 1941
  microprogramming: !ruby/object:Word
    word: microprogramming
    stem: microprogram
    docFrequency: 3.0
    docPositions:
    - 759
    - 1942
  never: !ruby/object:Word
    word: never
    stem: never
    docFrequency: 3.0
    docPositions:
    - 760
    - 1943
  somehow: !ruby/object:Word
    word: somehow
    stem: somehow
    docFrequency: 3.0
    docPositions:
    - 760
    - 1943
  reached: !ruby/object:Word
    word: reached
    stem: reach
    docFrequency: 7.0
    docPositions:
    - 760
    - 764
    - 869
    - 1943
    - 1945
    - 2017
  technique: !ruby/object:Word
    word: technique
    stem: techniqu
    docFrequency: 3.0
    docPositions:
    - 761
    - 1944
  mess: !ruby/object:Word
    word: mess
    stem: mess
    docFrequency: 3.0
    docPositions:
    - 764
    - 1945
  tiny: !ruby/object:Word
    word: tiny
    stem: tini
    docFrequency: 3.0
    docPositions:
    - 764
    - 1945
  emphasise: !ruby/object:Word
    word: emphasise
    stem: emphasis
    docFrequency: 3.0
    docPositions:
    - 765
    - 1946
  individual: !ruby/object:Word
    word: individual
    stem: individu
    docFrequency: 3.0
    docPositions:
    - 766
    - 1947
  six: !ruby/object:Word
    word: six
    stem: six
    docFrequency: 9.0
    docPositions:
    - 770
    - 975
    - 1043
    - 1227
    - 1949
    - 2083
    - 2122
    - 2250
  models: !ruby/object:Word
    word: models
    stem: model
    docFrequency: 3.0
    docPositions:
    - 770
    - 1949
  cpu: !ruby/object:Word
    word: cpu
    stem: cpu
    docFrequency: 5.0
    docPositions:
    - 770
    - 771
    - 1949
    - 1950
  o: !ruby/object:Word
    word: o
    stem: o
    docFrequency: 5.0
    docPositions:
    - 770
    - 771
    - 1949
    - 1950
  devices: !ruby/object:Word
    word: devices
    stem: devic
    docFrequency: 5.0
    docPositions:
    - 770
    - 815
    - 1949
    - 1979
  remarkably: !ruby/object:Word
    word: remarkably
    stem: remark
    docFrequency: 3.0
    docPositions:
    - 771
    - 1950
  attach: !ruby/object:Word
    word: attach
    stem: attach
    docFrequency: 3.0
    docPositions:
    - 771
    - 1950
  handcrafted: !ruby/object:Word
    word: handcrafted
    stem: handcraft
    docFrequency: 3.0
    docPositions:
    - 771
    - 1950
  emulators: !ruby/object:Word
    word: emulators
    stem: emul
    docFrequency: 3.0
    docPositions:
    - 772
    - 1951
  completely: !ruby/object:Word
    word: completely
    stem: complet
    docFrequency: 3.0
    docPositions:
    - 773
    - 1952
  advert: !ruby/object:Word
    word: advert
    stem: advert
    docFrequency: 3.0
    docPositions:
    - 776
    - 1953
  newspaper: !ruby/object:Word
    word: newspaper
    stem: newspap
    docFrequency: 3.0
    docPositions:
    - 777
    - 1954
  media: !ruby/object:Word
    word: media
    stem: media
    docFrequency: 3.0
    docPositions:
    - 779
    - 1956
  promotion: !ruby/object:Word
    word: promotion
    stem: promot
    docFrequency: 3.0
    docPositions:
    - 779
    - 1956
  planned: !ruby/object:Word
    word: planned
    stem: plan
    docFrequency: 3.0
    docPositions:
    - 780
    - 1957
  edited: !ruby/object:Word
    word: edited
    stem: edit
    docFrequency: 3.0
    docPositions:
    - 781
    - 1957
  fax: !ruby/object:Word
    word: fax
    stem: fax
    docFrequency: 4.0
    docPositions:
    - 785
    - 786
    - 1959
  wishing: !ruby/object:Word
    word: wishing
    stem: wish
    docFrequency: 3.0
    docPositions:
    - 786
    - 1959
  controlmaurice: !ruby/object:Word
    word: controlmaurice
    stem: controlmauric
    docFrequency: 2.0
    docPositions:
    - 789
  grew: !ruby/object:Word
    word: grew
    stem: grew
    docFrequency: 3.0
    docPositions:
    - 791
    - 1960
  built: !ruby/object:Word
    word: built
    stem: built
    docFrequency: 13.0
    docPositions:
    - 791
    - 811
    - 826
    - 947
    - 1095
    - 1279
    - 1960
    - 1975
    - 1986
    - 2065
    - 2160
    - 2287
  digital: !ruby/object:Word
    word: digital
    stem: digit
    docFrequency: 17.0
    docPositions:
    - 791
    - 810
    - 887
    - 946
    - 1107
    - 1144
    - 1197
    - 1198
    - 1960
    - 1974
    - 2029
    - 2064
    - 2164
    - 2191
    - 2228
    - 2229
  circuits: !ruby/object:Word
    word: circuits
    stem: circuit
    docFrequency: 21.0
    docPositions:
    - 792
    - 796
    - 815
    - 819
    - 826
    - 913
    - 915
    - 919
    - 940
    - 1066
    - 1961
    - 1964
    - 1979
    - 1981
    - 1986
    - 2041
    - 2043
    - 2047
    - 2060
    - 2141
  mullard: !ruby/object:Word
    word: mullard
    stem: mullard
    docFrequency: 3.0
    docPositions:
    - 793
    - 1962
  low: !ruby/object:Word
    word: low
    stem: low
    docFrequency: 9.0
    docPositions:
    - 793
    - 1145
    - 1169
    - 1199
    - 1962
    - 2192
    - 2208
    - 2230
  germanium: !ruby/object:Word
    word: germanium
    stem: germanium
    docFrequency: 3.0
    docPositions:
    - 793
    - 1962
  pnp: !ruby/object:Word
    word: pnp
    stem: pnp
    docFrequency: 5.0
    docPositions:
    - 793
    - 915
    - 1962
    - 2043
  transistors: !ruby/object:Word
    word: transistors
    stem: transistor
    docFrequency: 24.0
    docPositions:
    - 793
    - 798
    - 801
    - 812
    - 815
    - 909
    - 911
    - 912
    - 913
    - 915
    - 1043
    - 1045
    - 1962
    - 1966
    - 1969
    - 1976
    - 1979
    - 2039
    - 2040
    - 2041
    - 2043
    - 2122
    - 2124
  shift: !ruby/object:Word
    word: shift
    stem: shift
    docFrequency: 47.0
    docPositions:
    - 794
    - 797
    - 802
    - 803
    - 822
    - 823
    - 935
    - 937
    - 998
    - 999
    - 1007
    - 1010
    - 1012
    - 1963
    - 1965
    - 1970
    - 1971
    - 1984
    - 1985
    - 2057
    - 2059
    - 2100
    - 2101
    - 2105
    - 2106
  register: !ruby/object:Word
    word: register
    stem: regist
    docFrequency: 19.0
    docPositions:
    - 794
    - 856
    - 1023
    - 1113
    - 1115
    - 1116
    - 1117
    - 1121
    - 1963
    - 2008
    - 2110
    - 2168
    - 2170
    - 2171
    - 2172
    - 2176
  sequences: !ruby/object:Word
    word: sequences
    stem: sequenc
    docFrequency: 7.0
    docPositions:
    - 794
    - 822
    - 935
    - 1963
    - 1984
    - 2057
  codes: !ruby/object:Word
    word: codes
    stem: code
    docFrequency: 3.0
    docPositions:
    - 794
    - 1963
  rotating: !ruby/object:Word
    word: rotating
    stem: rotat
    docFrequency: 3.0
    docPositions:
    - 795
    - 1964
  beacon: !ruby/object:Word
    word: beacon
    stem: beacon
    docFrequency: 3.0
    docPositions:
    - 795
    - 1964
  missile: !ruby/object:Word
    word: missile
    stem: missil
    docFrequency: 7.0
    docPositions:
    - 795
    - 944
    - 1163
    - 1964
    - 2062
    - 2204
  guidance: !ruby/object:Word
    word: guidance
    stem: guidanc
    docFrequency: 3.0
    docPositions:
    - 795
    - 1964
  nor: !ruby/object:Word
    word: nor
    stem: nor
    docFrequency: 9.0
    docPositions:
    - 796
    - 800
    - 923
    - 930
    - 1964
    - 1968
    - 2049
    - 2054
  gates: !ruby/object:Word
    word: gates
    stem: gate
    docFrequency: 7.0
    docPositions:
    - 796
    - 799
    - 930
    - 1964
    - 1967
    - 2054
  flip: !ruby/object:Word
    word: flip
    stem: flip
    docFrequency: 7.0
    docPositions:
    - 796
    - 835
    - 997
    - 1964
    - 1993
    - 2099
  flops: !ruby/object:Word
    word: flops
    stem: flop
    docFrequency: 7.0
    docPositions:
    - 796
    - 835
    - 998
    - 1964
    - 1993
    - 2100
  clocked: !ruby/object:Word
    word: clocked
    stem: clock
    docFrequency: 3.0
    docPositions:
    - 796
    - 1964
  narrow: !ruby/object:Word
    word: narrow
    stem: narrow
    docFrequency: 3.0
    docPositions:
    - 796
    - 1964
  pulses: !ruby/object:Word
    word: pulses
    stem: puls
    docFrequency: 17.0
    docPositions:
    - 797
    - 802
    - 803
    - 823
    - 839
    - 866
    - 935
    - 1055
    - 1965
    - 1970
    - 1971
    - 1985
    - 1997
    - 2014
    - 2057
    - 2132
  registers: !ruby/object:Word
    word: registers
    stem: regist
    docFrequency: 19.0
    docPositions:
    - 797
    - 802
    - 820
    - 986
    - 988
    - 989
    - 1118
    - 1121
    - 1125
    - 1965
    - 1970
    - 1982
    - 2090
    - 2092
    - 2093
    - 2173
    - 2176
    - 2178
  counters: !ruby/object:Word
    word: counters
    stem: counter
    docFrequency: 13.0
    docPositions:
    - 797
    - 803
    - 842
    - 844
    - 983
    - 1125
    - 1965
    - 1971
    - 1998
    - 2000
    - 2089
    - 2178
  turned: !ruby/object:Word
    word: turned
    stem: turn
    docFrequency: 13.0
    docPositions:
    - 798
    - 850
    - 886
    - 889
    - 902
    - 904
    - 1966
    - 2004
    - 2028
    - 2031
    - 2036
  collector: !ruby/object:Word
    word: collector
    stem: collector
    docFrequency: 11.0
    docPositions:
    - 798
    - 799
    - 919
    - 925
    - 927
    - 1966
    - 1967
    - 2047
    - 2051
    - 2053
  earth: !ruby/object:Word
    word: earth
    stem: earth
    docFrequency: 3.0
    docPositions:
    - 798
    - 1966
  potential: !ruby/object:Word
    word: potential
    stem: potenti
    docFrequency: 3.0
    docPositions:
    - 798
    - 1966
  diode: !ruby/object:Word
    word: diode
    stem: diod
    docFrequency: 15.0
    docPositions:
    - 799
    - 842
    - 846
    - 919
    - 931
    - 1056
    - 1061
    - 1967
    - 1998
    - 2002
    - 2047
    - 2055
    - 2133
    - 2136
  coupling: !ruby/object:Word
    word: coupling
    stem: coupl
    docFrequency: 11.0
    docPositions:
    - 800
    - 919
    - 1053
    - 1073
    - 1074
    - 1968
    - 2047
    - 2130
    - 2144
    - 2145
  gate: !ruby/object:Word
    word: gate
    stem: gate
    docFrequency: 13.0
    docPositions:
    - 800
    - 822
    - 823
    - 923
    - 935
    - 937
    - 1968
    - 1984
    - 1985
    - 2049
    - 2057
    - 2059
  flipflops: !ruby/object:Word
    word: flipflops
    stem: flipflop
    docFrequency: 3.0
    docPositions:
    - 801
    - 1969
  cross: !ruby/object:Word
    word: cross
    stem: cross
    docFrequency: 3.0
    docPositions:
    - 801
    - 1969
  coupled: !ruby/object:Word
    word: coupled
    stem: coupl
    docFrequency: 5.0
    docPositions:
    - 801
    - 938
    - 1969
    - 2060
  rc: !ruby/object:Word
    word: rc
    stem: rc
    docFrequency: 3.0
    docPositions:
    - 801
    - 1969
  networks: !ruby/object:Word
    word: networks
    stem: network
    docFrequency: 3.0
    docPositions:
    - 801
    - 1969
  pulse: !ruby/object:Word
    word: pulse
    stem: puls
    docFrequency: 15.0
    docPositions:
    - 802
    - 821
    - 822
    - 823
    - 870
    - 935
    - 998
    - 1970
    - 1983
    - 1984
    - 1985
    - 2018
    - 2057
    - 2100
  steering: !ruby/object:Word
    word: steering
    stem: steer
    docFrequency: 7.0
    docPositions:
    - 802
    - 821
    - 823
    - 1970
    - 1983
    - 1985
  enabled: !ruby/object:Word
    word: enabled
    stem: enabl
    docFrequency: 3.0
    docPositions:
    - 802
    - 1970
  synchronous: !ruby/object:Word
    word: synchronous
    stem: synchron
    docFrequency: 3.0
    docPositions:
    - 803
    - 1971
  produced: !ruby/object:Word
    word: produced
    stem: produc
    docFrequency: 13.0
    docPositions:
    - 803
    - 823
    - 827
    - 866
    - 1047
    - 1272
    - 1971
    - 1985
    - 1987
    - 2014
    - 2126
    - 2282
  crystal: !ruby/object:Word
    word: crystal
    stem: crystal
    docFrequency: 3.0
    docPositions:
    - 803
    - 1971
  controlled: !ruby/object:Word
    word: controlled
    stem: control
    docFrequency: 11.0
    docPositions:
    - 804
    - 1208
    - 1223
    - 1226
    - 1237
    - 1972
    - 2237
    - 2246
    - 2249
    - 2258
  blocking: !ruby/object:Word
    word: blocking
    stem: block
    docFrequency: 3.0
    docPositions:
    - 804
    - 1972
  clock: !ruby/object:Word
    word: clock
    stem: clock
    docFrequency: 7.0
    docPositions:
    - 804
    - 961
    - 1347
    - 1972
    - 2073
    - 2332
  power: !ruby/object:Word
    word: power
    stem: power
    docFrequency: 11.0
    docPositions:
    - 804
    - 920
    - 923
    - 1295
    - 1349
    - 1972
    - 2048
    - 2049
    - 2296
    - 2334
  supply: !ruby/object:Word
    word: supply
    stem: suppli
    docFrequency: 7.0
    docPositions:
    - 805
    - 920
    - 926
    - 1973
    - 2048
    - 2052
  volts: !ruby/object:Word
    word: volts
    stem: volt
    docFrequency: 5.0
    docPositions:
    - 805
    - 920
    - 1973
    - 2048
  proposed: !ruby/object:Word
    word: proposed
    stem: propos
    docFrequency: 3.0
    docPositions:
    - 809
    - 1973
  studying: !ruby/object:Word
    word: studying
    stem: studi
    docFrequency: 3.0
    docPositions:
    - 809
    - 1973
  sampled: !ruby/object:Word
    word: sampled
    stem: sampl
    docFrequency: 3.0
    docPositions:
    - 809
    - 1973
  feasibility: !ruby/object:Word
    word: feasibility
    stem: feasibl
    docFrequency: 3.0
    docPositions:
    - 810
    - 1974
  weapon: !ruby/object:Word
    word: weapon
    stem: weapon
    docFrequency: 3.0
    docPositions:
    - 810
    - 1974
  awe: !ruby/object:Word
    word: awe
    stem: aw
    docFrequency: 3.0
    docPositions:
    - 811
    - 1975
  harwell: !ruby/object:Word
    word: harwell
    stem: harwel
    docFrequency: 3.0
    docPositions:
    - 811
    - 1975
  speed: !ruby/object:Word
    word: speed
    stem: speed
    docFrequency: 12.0
    docPositions:
    - 813
    - 858
    - 924
    - 963
    - 1016
    - 1019
    - 1977
    - 2010
    - 2050
    - 2075
    - 2107
  latching: !ruby/object:Word
    word: latching
    stem: latch
    docFrequency: 3.0
    docPositions:
    - 813
    - 1977
  difficult: !ruby/object:Word
    word: difficult
    stem: difficult
    docFrequency: 5.0
    docPositions:
    - 814
    - 1109
    - 1978
    - 2166
  manufacture: !ruby/object:Word
    word: manufacture
    stem: manufactur
    docFrequency: 3.0
    docPositions:
    - 814
    - 1978
  sensible: !ruby/object:Word
    word: sensible
    stem: sensibl
    docFrequency: 3.0
    docPositions:
    - 814
    - 1978
  junction: !ruby/object:Word
    word: junction
    stem: junction
    docFrequency: 5.0
    docPositions:
    - 815
    - 912
    - 1979
    - 2040
  hope: !ruby/object:Word
    word: hope
    stem: hope
    docFrequency: 5.0
    docPositions:
    - 815
    - 1259
    - 1979
    - 2271
  become: !ruby/object:Word
    word: become
    stem: becom
    docFrequency: 7.0
    docPositions:
    - 816
    - 1277
    - 1279
    - 1980
    - 2285
    - 2287
  due: !ruby/object:Word
    word: due
    stem: due
    docFrequency: 7.0
    docPositions:
    - 816
    - 901
    - 1205
    - 1980
    - 2035
    - 2234
  rapid: !ruby/object:Word
    word: rapid
    stem: rapid
    docFrequency: 3.0
    docPositions:
    - 816
    - 1980
  semiconductor: !ruby/object:Word
    word: semiconductor
    stem: semiconductor
    docFrequency: 3.0
    docPositions:
    - 817
    - 1981
  sooner: !ruby/object:Word
    word: sooner
    stem: sooner
    docFrequency: 3.0
    docPositions:
    - 817
    - 1981
  entry: !ruby/object:Word
    word: entry
    stem: entri
    docFrequency: 5.0
    docPositions:
    - 819
    - 998
    - 1981
    - 2100
  flipflop: !ruby/object:Word
    word: flipflop
    stem: flipflop
    docFrequency: 15.0
    docPositions:
    - 819
    - 905
    - 906
    - 907
    - 930
    - 932
    - 936
    - 1981
    - 2037
    - 2038
    - 2039
    - 2054
    - 2056
    - 2058
  loaded: !ruby/object:Word
    word: loaded
    stem: load
    docFrequency: 3.0
    docPositions:
    - 820
    - 1982
  parallel: !ruby/object:Word
    word: parallel
    stem: parallel
    docFrequency: 11.0
    docPositions:
    - 820
    - 856
    - 962
    - 996
    - 1982
    - 2008
    - 2074
    - 2098
  shifted: !ruby/object:Word
    word: shifted
    stem: shift
    docFrequency: 7.0
    docPositions:
    - 820
    - 857
    - 1028
    - 1982
    - 2009
    - 2113
  directions: !ruby/object:Word
    word: directions
    stem: direct
    docFrequency: 3.0
    docPositions:
    - 820
    - 1982
  achieved: !ruby/object:Word
    word: achieved
    stem: achiev
    docFrequency: 7.0
    docPositions:
    - 821
    - 918
    - 1154
    - 1983
    - 2046
    - 2199
  replicating: !ruby/object:Word
    word: replicating
    stem: replic
    docFrequency: 3.0
    docPositions:
    - 821
    - 1983
  oring: !ruby/object:Word
    word: oring
    stem: or
    docFrequency: 3.0
    docPositions:
    - 821
    - 1983
  levels: !ruby/object:Word
    word: levels
    stem: level
    docFrequency: 3.0
    docPositions:
    - 824
    - 1986
  plug: !ruby/object:Word
    word: plug
    stem: plug
    docFrequency: 7.0
    docPositions:
    - 826
    - 846
    - 956
    - 1986
    - 2002
    - 2070
  units: !ruby/object:Word
    word: units
    stem: unit
    docFrequency: 7.0
    docPositions:
    - 826
    - 1295
    - 1299
    - 1986
    - 2296
    - 2300
  wired: !ruby/object:Word
    word: wired
    stem: wire
    docFrequency: 5.0
    docPositions:
    - 826
    - 1298
    - 1986
    - 2299
  printed: !ruby/object:Word
    word: printed
    stem: print
    docFrequency: 21.0
    docPositions:
    - 826
    - 905
    - 940
    - 1055
    - 1075
    - 1087
    - 1141
    - 1153
    - 1416
    - 1440
    - 1986
    - 2037
    - 2060
    - 2132
    - 2146
    - 2154
    - 2190
    - 2198
    - 2361
    - 2367
  fairly: !ruby/object:Word
    word: fairly
    stem: fairli
    docFrequency: 5.0
    docPositions:
    - 827
    - 1189
    - 1987
    - 2222
  novel: !ruby/object:Word
    word: novel
    stem: novel
    docFrequency: 5.0
    docPositions:
    - 827
    - 1104
    - 1987
    - 2163
  serial: !ruby/object:Word
    word: serial
    stem: serial
    docFrequency: 7.0
    docPositions:
    - 828
    - 962
    - 996
    - 1988
    - 2074
    - 2098
  booth: !ruby/object:Word
    word: booth
    stem: booth
    docFrequency: 13.0
    docPositions:
    - 830
    - 1001
    - 1002
    - 1007
    - 1015
    - 1108
    - 1990
    - 2101
    - 2102
    - 2105
    - 2106
    - 2165
  multiplier: !ruby/object:Word
    word: multiplier
    stem: multipli
    docFrequency: 14.0
    docPositions:
    - 830
    - 1001
    - 1003
    - 1007
    - 1012
    - 1109
    - 1990
    - 2101
    - 2103
    - 2106
    - 2166
  handle: !ruby/object:Word
    word: handle
    stem: handl
    docFrequency: 11.0
    docPositions:
    - 830
    - 1046
    - 1062
    - 1140
    - 1150
    - 1990
    - 2125
    - 2137
    - 2189
    - 2197
  equal: !ruby/object:Word
    word: equal
    stem: equal
    docFrequency: 3.0
    docPositions:
    - 831
    - 1991
  facility: !ruby/object:Word
    word: facility
    stem: facil
    docFrequency: 5.0
    docPositions:
    - 831
    - 1127
    - 1991
    - 2180
  newton: !ruby/object:Word
    word: newton
    stem: newton
    docFrequency: 5.0
    docPositions:
    - 831
    - 1036
    - 1991
    - 2117
  raphson: !ruby/object:Word
    word: raphson
    stem: raphson
    docFrequency: 5.0
    docPositions:
    - 831
    - 1036
    - 1991
    - 2117
  method: !ruby/object:Word
    word: method
    stem: method
    docFrequency: 20.0
    docPositions:
    - 831
    - 1002
    - 1009
    - 1015
    - 1019
    - 1037
    - 1111
    - 1113
    - 1169
    - 1991
    - 2102
    - 2105
    - 2106
    - 2118
    - 2168
    - 2208
  calculating: !ruby/object:Word
    word: calculating
    stem: calcul
    docFrequency: 5.0
    docPositions:
    - 832
    - 1186
    - 1992
    - 2221
  square: !ruby/object:Word
    word: square
    stem: squar
    docFrequency: 7.0
    docPositions:
    - 832
    - 1036
    - 1073
    - 1992
    - 2117
    - 2144
  roots: !ruby/object:Word
    word: roots
    stem: root
    docFrequency: 3.0
    docPositions:
    - 832
    - 1992
  chebyshev: !ruby/object:Word
    word: chebyshev
    stem: chebyshev
    docFrequency: 7.0
    docPositions:
    - 832
    - 900
    - 1037
    - 1992
    - 2034
    - 2118
  polynomials: !ruby/object:Word
    word: polynomials
    stem: polynomi
    docFrequency: 9.0
    docPositions:
    - 832
    - 900
    - 1037
    - 1170
    - 1992
    - 2034
    - 2118
    - 2209
  trigonometric: !ruby/object:Word
    word: trigonometric
    stem: trigonometr
    docFrequency: 7.0
    docPositions:
    - 833
    - 890
    - 1037
    - 1993
    - 2032
    - 2118
  functions: !ruby/object:Word
    word: functions
    stem: function
    docFrequency: 7.0
    docPositions:
    - 833
    - 1038
    - 1195
    - 1993
    - 2119
    - 2226
  amount: !ruby/object:Word
    word: amount
    stem: amount
    docFrequency: 3.0
    docPositions:
    - 835
    - 1993
  supplied: !ruby/object:Word
    word: supplied
    stem: suppli
    docFrequency: 3.0
    docPositions:
    - 835
    - 1993
  transducers: !ruby/object:Word
    word: transducers
    stem: transduc
    docFrequency: 3.0
    docPositions:
    - 836
    - 1994
  output: !ruby/object:Word
    word: output
    stem: output
    docFrequency: 23.0
    docPositions:
    - 836
    - 838
    - 861
    - 872
    - 925
    - 938
    - 982
    - 1137
    - 1140
    - 1141
    - 1994
    - 1996
    - 2011
    - 2020
    - 2051
    - 2060
    - 2088
    - 2186
    - 2189
    - 2190
  soon: !ruby/object:Word
    word: soon
    stem: soon
    docFrequency: 5.0
    docPositions:
    - 836
    - 911
    - 1994
    - 2039
  calculations: !ruby/object:Word
    word: calculations
    stem: calcul
    docFrequency: 13.0
    docPositions:
    - 837
    - 945
    - 948
    - 959
    - 1163
    - 1232
    - 1995
    - 2063
    - 2066
    - 2073
    - 2204
    - 2255
  inputs: !ruby/object:Word
    word: inputs
    stem: input
    docFrequency: 13.0
    docPositions:
    - 837
    - 931
    - 998
    - 1144
    - 1146
    - 1147
    - 1995
    - 2055
    - 2100
    - 2191
    - 2193
    - 2194
  random: !ruby/object:Word
    word: random
    stem: random
    docFrequency: 3.0
    docPositions:
    - 837
    - 1995
  generator: !ruby/object:Word
    word: generator
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 837
    - 1995
  timer: !ruby/object:Word
    word: timer
    stem: timer
    docFrequency: 7.0
    docPositions:
    - 838
    - 1113
    - 1115
    - 1996
    - 2168
    - 2170
  analogue: !ruby/object:Word
    word: analogue
    stem: analogu
    docFrequency: 13.0
    docPositions:
    - 838
    - 861
    - 946
    - 1138
    - 1141
    - 1144
    - 1996
    - 2011
    - 2064
    - 2187
    - 2190
    - 2191
  voltages: !ruby/object:Word
    word: voltages
    stem: voltag
    docFrequency: 7.0
    docPositions:
    - 838
    - 1138
    - 1366
    - 1996
    - 2187
    - 2345
  width: !ruby/object:Word
    word: width
    stem: width
    docFrequency: 5.0
    docPositions:
    - 838
    - 866
    - 1996
    - 2014
  modulated: !ruby/object:Word
    word: modulated
    stem: modul
    docFrequency: 5.0
    docPositions:
    - 839
    - 866
    - 1997
    - 2014
  servos: !ruby/object:Word
    word: servos
    stem: servo
    docFrequency: 7.0
    docPositions:
    - 839
    - 1107
    - 1195
    - 1997
    - 2164
    - 2226
  pluggable: !ruby/object:Word
    word: pluggable
    stem: pluggabl
    docFrequency: 3.0
    docPositions:
    - 842
    - 1998
  matrix: !ruby/object:Word
    word: matrix
    stem: matrix
    docFrequency: 9.0
    docPositions:
    - 842
    - 844
    - 1056
    - 1061
    - 1998
    - 2000
    - 2133
    - 2136
  steps: !ruby/object:Word
    word: steps
    stem: step
    docFrequency: 5.0
    docPositions:
    - 843
    - 1999
  subroutines: !ruby/object:Word
    word: subroutines
    stem: subroutin
    docFrequency: 5.0
    docPositions:
    - 843
    - 1126
    - 1999
    - 2179
  ring: !ruby/object:Word
    word: ring
    stem: ring
    docFrequency: 3.0
    docPositions:
    - 844
    - 2000
  simplify: !ruby/object:Word
    word: simplify
    stem: simplifi
    docFrequency: 3.0
    docPositions:
    - 844
    - 2000
  final: !ruby/object:Word
    word: final
    stem: final
    docFrequency: 3.0
    docPositions:
    - 844
    - 2000
  diodes: !ruby/object:Word
    word: diodes
    stem: diod
    docFrequency: 5.0
    docPositions:
    - 844
    - 1359
    - 2000
    - 2342
  glued: !ruby/object:Word
    word: glued
    stem: glu
    docFrequency: 3.0
    docPositions:
    - 845
    - 2001
  plugs: !ruby/object:Word
    word: plugs
    stem: plug
    docFrequency: 3.0
    docPositions:
    - 845
    - 2001
  trouble: !ruby/object:Word
    word: trouble
    stem: troubl
    docFrequency: 7.0
    docPositions:
    - 845
    - 1063
    - 1235
    - 2001
    - 2138
    - 2256
  differential: !ruby/object:Word
    word: differential
    stem: differenti
    docFrequency: 5.0
    docPositions:
    - 845
    - 1192
    - 2001
    - 2225
  expansion: !ruby/object:Word
    word: expansion
    stem: expans
    docFrequency: 3.0
    docPositions:
    - 846
    - 2002
  plastic: !ruby/object:Word
    word: plastic
    stem: plastic
    docFrequency: 3.0
    docPositions:
    - 846
    - 2002
  glass: !ruby/object:Word
    word: glass
    stem: glass
    docFrequency: 7.0
    docPositions:
    - 846
    - 847
    - 1075
    - 2002
    - 2003
    - 2146
  shattered: !ruby/object:Word
    word: shattered
    stem: shatter
    docFrequency: 3.0
    docPositions:
    - 846
    - 2002
  silicone: !ruby/object:Word
    word: silicone
    stem: silicon
    docFrequency: 3.0
    docPositions:
    - 847
    - 2003
  rubber: !ruby/object:Word
    word: rubber
    stem: rubber
    docFrequency: 5.0
    docPositions:
    - 847
    - 1062
    - 2003
    - 2137
  cement: !ruby/object:Word
    word: cement
    stem: cement
    docFrequency: 3.0
    docPositions:
    - 847
    - 2003
  araldite: !ruby/object:Word
    word: araldite
    stem: araldit
    docFrequency: 3.0
    docPositions:
    - 847
    - 2003
  gray: !ruby/object:Word
    word: gray
    stem: grai
    docFrequency: 3.0
    docPositions:
    - 849
    - 2003
  cyclic: !ruby/object:Word
    word: cyclic
    stem: cyclic
    docFrequency: 3.0
    docPositions:
    - 849
    - 2003
  progressive: !ruby/object:Word
    word: progressive
    stem: progress
    docFrequency: 3.0
    docPositions:
    - 849
    - 2003
  cp: !ruby/object:Word
    word: cp
    stem: cp
    docFrequency: 5.0
    docPositions:
    - 849
    - 855
    - 2003
    - 2007
  measuring: !ruby/object:Word
    word: measuring
    stem: measur
    docFrequency: 3.0
    docPositions:
    - 849
    - 2003
  angular: !ruby/object:Word
    word: angular
    stem: angular
    docFrequency: 5.0
    docPositions:
    - 849
    - 1138
    - 2003
    - 2187
  merit: !ruby/object:Word
    word: merit
    stem: merit
    docFrequency: 3.0
    docPositions:
    - 850
    - 2004
  shaft: !ruby/object:Word
    word: shaft
    stem: shaft
    docFrequency: 3.0
    docPositions:
    - 850
    - 2004
  changes: !ruby/object:Word
    word: changes
    stem: chang
    docFrequency: 5.0
    docPositions:
    - 851
    - 852
    - 2005
    - 2006
  whereas: !ruby/object:Word
    word: whereas
    stem: wherea
    docFrequency: 3.0
    docPositions:
    - 851
    - 2005
  occur: !ruby/object:Word
    word: occur
    stem: occur
    docFrequency: 3.0
    docPositions:
    - 852
    - 2006
  'false': !ruby/object:Word
    word: 'false'
    stem: fals
    docFrequency: 3.0
    docPositions:
    - 853
    - 2007
  readings: !ruby/object:Word
    word: readings
    stem: read
    docFrequency: 3.0
    docPositions:
    - 853
    - 2007
  conversion: !ruby/object:Word
    word: conversion
    stem: convers
    docFrequency: 3.0
    docPositions:
    - 855
    - 2007
  implemented: !ruby/object:Word
    word: implemented
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 855
    - 2007
  transferred: !ruby/object:Word
    word: transferred
    stem: transfer
    docFrequency: 5.0
    docPositions:
    - 856
    - 1121
    - 2008
    - 2176
  cyclically: !ruby/object:Word
    word: cyclically
    stem: cyclic
    docFrequency: 3.0
    docPositions:
    - 857
    - 2009
  exclusive: !ruby/object:Word
    word: exclusive
    stem: exclus
    docFrequency: 3.0
    docPositions:
    - 857
    - 2009
  carried: !ruby/object:Word
    word: carried
    stem: carri
    docFrequency: 5.0
    docPositions:
    - 857
    - 1232
    - 2009
    - 2255
  complexity: !ruby/object:Word
    word: complexity
    stem: complex
    docFrequency: 3.0
    docPositions:
    - 859
    - 2011
  unit: !ruby/object:Word
    word: unit
    stem: unit
    docFrequency: 9.0
    docPositions:
    - 859
    - 1131
    - 1295
    - 1298
    - 2011
    - 2182
    - 2296
    - 2299
  voltage: !ruby/object:Word
    word: voltage
    stem: voltag
    docFrequency: 5.0
    docPositions:
    - 861
    - 1046
    - 2011
    - 2125
  converted: !ruby/object:Word
    word: converted
    stem: convert
    docFrequency: 5.0
    docPositions:
    - 861
    - 1166
    - 2011
    - 2207
  significant: !ruby/object:Word
    word: significant
    stem: signific
    docFrequency: 11.0
    docPositions:
    - 861
    - 978
    - 1002
    - 1026
    - 1027
    - 2011
    - 2086
    - 2102
    - 2111
    - 2112
  summing: !ruby/object:Word
    word: summing
    stem: sum
    docFrequency: 3.0
    docPositions:
    - 862
    - 2012
  currents: !ruby/object:Word
    word: currents
    stem: current
    docFrequency: 9.0
    docPositions:
    - 862
    - 1046
    - 1074
    - 1350
    - 2012
    - 2125
    - 2145
    - 2335
  amplifier: !ruby/object:Word
    word: amplifier
    stem: amplifi
    docFrequency: 5.0
    docPositions:
    - 862
    - 863
    - 2012
    - 2013
  account: !ruby/object:Word
    word: account
    stem: account
    docFrequency: 5.0
    docPositions:
    - 862
    - 964
    - 2012
    - 2076
  arranged: !ruby/object:Word
    word: arranged
    stem: arrang
    docFrequency: 11.0
    docPositions:
    - 863
    - 1075
    - 1081
    - 1089
    - 1147
    - 2013
    - 2146
    - 2150
    - 2156
    - 2194
  saturated: !ruby/object:Word
    word: saturated
    stem: satur
    docFrequency: 3.0
    docPositions:
    - 863
    - 2013
  driving: !ruby/object:Word
    word: driving
    stem: drive
    docFrequency: 7.0
    docPositions:
    - 866
    - 1084
    - 1142
    - 2014
    - 2153
    - 2191
  hydraulic: !ruby/object:Word
    word: hydraulic
    stem: hydraul
    docFrequency: 5.0
    docPositions:
    - 866
    - 882
    - 2014
    - 2024
  servo: !ruby/object:Word
    word: servo
    stem: servo
    docFrequency: 9.0
    docPositions:
    - 867
    - 879
    - 888
    - 889
    - 2015
    - 2023
    - 2030
    - 2031
  unity: !ruby/object:Word
    word: unity
    stem: uniti
    docFrequency: 3.0
    docPositions:
    - 868
    - 2016
  subtracted: !ruby/object:Word
    word: subtracted
    stem: subtract
    docFrequency: 7.0
    docPositions:
    - 868
    - 1026
    - 1027
    - 2016
    - 2111
    - 2112
  switched: !ruby/object:Word
    word: switched
    stem: switch
    docFrequency: 3.0
    docPositions:
    - 870
    - 2018
  valve: !ruby/object:Word
    word: valve
    stem: valv
    docFrequency: 5.0
    docPositions:
    - 870
    - 873
    - 2018
    - 2021
  resulting: !ruby/object:Word
    word: resulting
    stem: result
    docFrequency: 3.0
    docPositions:
    - 870
    - 2018
  whose: !ruby/object:Word
    word: whose
    stem: whose
    docFrequency: 7.0
    docPositions:
    - 871
    - 925
    - 1153
    - 2019
    - 2051
    - 2198
  average: !ruby/object:Word
    word: average
    stem: averag
    docFrequency: 6.0
    docPositions:
    - 871
    - 1019
    - 1217
    - 2019
    - 2242
  directly: !ruby/object:Word
    word: directly
    stem: directli
    docFrequency: 5.0
    docPositions:
    - 871
    - 1130
    - 2019
    - 2181
  proportional: !ruby/object:Word
    word: proportional
    stem: proport
    docFrequency: 5.0
    docPositions:
    - 871
    - 1192
    - 2019
    - 2225
  maximum: !ruby/object:Word
    word: maximum
    stem: maximum
    docFrequency: 7.0
    docPositions:
    - 872
    - 1041
    - 2020
    - 2120
  shared: !ruby/object:Word
    word: shared
    stem: share
    docFrequency: 3.0
    docPositions:
    - 873
    - 2021
  basis: !ruby/object:Word
    word: basis
    stem: basi
    docFrequency: 5.0
    docPositions:
    - 873
    - 942
    - 2021
    - 2062
  royal: !ruby/object:Word
    word: royal
    stem: royal
    docFrequency: 4.0
    docPositions:
    - 875
    - 1448
    - 2371
  demonstration: !ruby/object:Word
    word: demonstration
    stem: demonstr
    docFrequency: 6.0
    docPositions:
    - 875
    - 878
    - 904
    - 2022
    - 2036
  completed: !ruby/object:Word
    word: completed
    stem: complet
    docFrequency: 5.0
    docPositions:
    - 877
    - 1355
    - 2021
    - 2338
  october: !ruby/object:Word
    word: october
    stem: octob
    docFrequency: 5.0
    docPositions:
    - 877
    - 1426
    - 2021
    - 2364
  hrh: !ruby/object:Word
    word: hrh
    stem: hrh
    docFrequency: 3.0
    docPositions:
    - 877
    - 2021
  prince: !ruby/object:Word
    word: prince
    stem: princ
    docFrequency: 5.0
    docPositions:
    - 877
    - 904
    - 2021
    - 2036
  philip: !ruby/object:Word
    word: philip
    stem: philip
    docFrequency: 5.0
    docPositions:
    - 877
    - 904
    - 2021
    - 2036
  visit: !ruby/object:Word
    word: visit
    stem: visit
    docFrequency: 3.0
    docPositions:
    - 878
    - 2022
  wythenshawe: !ruby/object:Word
    word: wythenshawe
    stem: wythenshaw
    docFrequency: 5.0
    docPositions:
    - 878
    - 941
    - 2022
    - 2061
  labs: !ruby/object:Word
    word: labs
    stem: lab
    docFrequency: 3.0
    docPositions:
    - 878
    - 2022
  parallax: !ruby/object:Word
    word: parallax
    stem: parallax
    docFrequency: 5.0
    docPositions:
    - 879
    - 888
    - 2023
    - 2030
  turntables: !ruby/object:Word
    word: turntables
    stem: turntabl
    docFrequency: 5.0
    docPositions:
    - 881
    - 897
    - 2023
    - 2033
  separated: !ruby/object:Word
    word: separated
    stem: separ
    docFrequency: 3.0
    docPositions:
    - 881
    - 2023
  metre: !ruby/object:Word
    word: metre
    stem: metr
    docFrequency: 3.0
    docPositions:
    - 881
    - 2023
  carrying: !ruby/object:Word
    word: carrying
    stem: carri
    docFrequency: 3.0
    docPositions:
    - 881
    - 2023
  digitising: !ruby/object:Word
    word: digitising
    stem: digitis
    docFrequency: 5.0
    docPositions:
    - 881
    - 1146
    - 2023
    - 2193
  rotated: !ruby/object:Word
    word: rotated
    stem: rotat
    docFrequency: 3.0
    docPositions:
    - 882
    - 2024
  rapidly: !ruby/object:Word
    word: rapidly
    stem: rapidli
    docFrequency: 3.0
    docPositions:
    - 882
    - 2024
  degrees: !ruby/object:Word
    word: degrees
    stem: degre
    docFrequency: 3.0
    docPositions:
    - 882
    - 2024
  jacks: !ruby/object:Word
    word: jacks
    stem: jack
    docFrequency: 3.0
    docPositions:
    - 882
    - 2024
  turntable: !ruby/object:Word
    word: turntable
    stem: turntabl
    docFrequency: 3.0
    docPositions:
    - 882
    - 2024
  optical: !ruby/object:Word
    word: optical
    stem: optic
    docFrequency: 3.0
    docPositions:
    - 883
    - 2025
  projector: !ruby/object:Word
    word: projector
    stem: projector
    docFrequency: 3.0
    docPositions:
    - 883
    - 2025
  mounted: !ruby/object:Word
    word: mounted
    stem: mount
    docFrequency: 3.0
    docPositions:
    - 883
    - 2025
  projected: !ruby/object:Word
    word: projected
    stem: project
    docFrequency: 3.0
    docPositions:
    - 883
    - 2025
  spot: !ruby/object:Word
    word: spot
    stem: spot
    docFrequency: 7.0
    docPositions:
    - 883
    - 890
    - 902
    - 2025
    - 2032
    - 2036
  screen: !ruby/object:Word
    word: screen
    stem: screen
    docFrequency: 5.0
    docPositions:
    - 884
    - 897
    - 2026
    - 2033
  coloured: !ruby/object:Word
    word: coloured
    stem: colour
    docFrequency: 3.0
    docPositions:
    - 884
    - 2026
  red: !ruby/object:Word
    word: red
    stem: red
    docFrequency: 7.0
    docPositions:
    - 884
    - 885
    - 891
    - 2026
    - 2027
    - 2033
  green: !ruby/object:Word
    word: green
    stem: green
    docFrequency: 9.0
    docPositions:
    - 884
    - 885
    - 890
    - 902
    - 2026
    - 2027
    - 2032
    - 2036
  care: !ruby/object:Word
    word: care
    stem: care
    docFrequency: 3.0
    docPositions:
    - 884
    - 2026
  port: !ruby/object:Word
    word: port
    stem: port
    docFrequency: 3.0
    docPositions:
    - 885
    - 2027
  side: !ruby/object:Word
    word: side
    stem: side
    docFrequency: 5.0
    docPositions:
    - 885
    - 2027
  starboard: !ruby/object:Word
    word: starboard
    stem: starboard
    docFrequency: 3.0
    docPositions:
    - 885
    - 2027
  digitiser: !ruby/object:Word
    word: digitiser
    stem: digitis
    docFrequency: 7.0
    docPositions:
    - 885
    - 886
    - 898
    - 2027
    - 2028
    - 2034
  fitted: !ruby/object:Word
    word: fitted
    stem: fit
    docFrequency: 3.0
    docPositions:
    - 886
    - 2028
  knob: !ruby/object:Word
    word: knob
    stem: knob
    docFrequency: 7.0
    docPositions:
    - 886
    - 902
    - 904
    - 2028
    - 2036
  angle: !ruby/object:Word
    word: angle
    stem: angl
    docFrequency: 5.0
    docPositions:
    - 886
    - 889
    - 2028
    - 2031
  minimise: !ruby/object:Word
    word: minimise
    stem: minimis
    docFrequency: 3.0
    docPositions:
    - 888
    - 2030
  relationship: !ruby/object:Word
    word: relationship
    stem: relationship
    docFrequency: 3.0
    docPositions:
    - 890
    - 2032
  formula: !ruby/object:Word
    word: formula
    stem: formula
    docFrequency: 13.0
    docPositions:
    - 893
    - 1173
    - 1180
    - 1199
    - 1206
    - 1208
    - 2033
    - 2212
    - 2217
    - 2230
    - 2235
    - 2237
  tan: !ruby/object:Word
    word: tan
    stem: tan
    docFrequency: 9.0
    docPositions:
    - 895
    - 900
    - 2033
    - 2034
  l: !ruby/object:Word
    word: l
    stem: l
    docFrequency: 7.0
    docPositions:
    - 895
    - 898
    - 2033
    - 2034
  separation: !ruby/object:Word
    word: separation
    stem: separ
    docFrequency: 3.0
    docPositions:
    - 897
    - 2033
  distance: !ruby/object:Word
    word: distance
    stem: distanc
    docFrequency: 3.0
    docPositions:
    - 897
    - 2033
  angles: !ruby/object:Word
    word: angles
    stem: angl
    docFrequency: 3.0
    docPositions:
    - 898
    - 2034
  respectively: !ruby/object:Word
    word: respectively
    stem: respect
    docFrequency: 7.0
    docPositions:
    - 898
    - 993
    - 1193
    - 2034
    - 2097
    - 2226
  arctan: !ruby/object:Word
    word: arctan
    stem: arctan
    docFrequency: 3.0
    docPositions:
    - 900
    - 2034
  sufficient: !ruby/object:Word
    word: sufficient
    stem: suffici
    docFrequency: 5.0
    docPositions:
    - 900
    - 1231
    - 2034
    - 2254
  noticeable: !ruby/object:Word
    word: noticeable
    stem: notic
    docFrequency: 3.0
    docPositions:
    - 901
    - 2035
  lag: !ruby/object:Word
    word: lag
    stem: lag
    docFrequency: 5.0
    docPositions:
    - 901
    - 1218
    - 2035
    - 2243
  behaved: !ruby/object:Word
    word: behaved
    stem: behav
    docFrequency: 3.0
    docPositions:
    - 904
    - 2036
  obviously: !ruby/object:Word
    word: obviously
    stem: obvious
    docFrequency: 3.0
    docPositions:
    - 905
    - 2037
  amused: !ruby/object:Word
    word: amused
    stem: amus
    docFrequency: 3.0
    docPositions:
    - 905
    - 2037
  door: !ruby/object:Word
    word: door
    stem: door
    docFrequency: 3.0
    docPositions:
    - 906
    - 2038
  heard: !ruby/object:Word
    word: heard
    stem: heard
    docFrequency: 3.0
    docPositions:
    - 906
    - 2038
  saying: !ruby/object:Word
    word: saying
    stem: sai
    docFrequency: 3.0
    docPositions:
    - 906
    - 2038
  high: !ruby/object:Word
    word: high
    stem: high
    docFrequency: 7.0
    docPositions:
    - 911
    - 947
    - 1154
    - 2039
    - 2065
    - 2199
  radio: !ruby/object:Word
    word: radio
    stem: radio
    docFrequency: 3.0
    docPositions:
    - 911
    - 2039
  alloy: !ruby/object:Word
    word: alloy
    stem: alloi
    docFrequency: 5.0
    docPositions:
    - 912
    - 913
    - 2040
    - 2041
  thinner: !ruby/object:Word
    word: thinner
    stem: thinner
    docFrequency: 3.0
    docPositions:
    - 912
    - 2040
  base: !ruby/object:Word
    word: base
    stem: base
    docFrequency: 13.0
    docPositions:
    - 912
    - 914
    - 915
    - 916
    - 919
    - 925
    - 2040
    - 2042
    - 2043
    - 2044
    - 2047
    - 2051
  regions: !ruby/object:Word
    word: regions
    stem: region
    docFrequency: 3.0
    docPositions:
    - 912
    - 2040
  fastest: !ruby/object:Word
    word: fastest
    stem: fastest
    docFrequency: 3.0
    docPositions:
    - 913
    - 2041
  relatively: !ruby/object:Word
    word: relatively
    stem: rel
    docFrequency: 5.0
    docPositions:
    - 914
    - 1046
    - 2042
    - 2125
  region: !ruby/object:Word
    word: region
    stem: region
    docFrequency: 5.0
    docPositions:
    - 914
    - 917
    - 2042
    - 2045
  charge: !ruby/object:Word
    word: charge
    stem: charg
    docFrequency: 5.0
    docPositions:
    - 914
    - 924
    - 2042
    - 2050
  carriers: !ruby/object:Word
    word: carriers
    stem: carrier
    docFrequency: 3.0
    docPositions:
    - 914
    - 2042
  excess: !ruby/object:Word
    word: excess
    stem: excess
    docFrequency: 5.0
    docPositions:
    - 915
    - 916
    - 2043
    - 2044
  turn: !ruby/object:Word
    word: turn
    stem: turn
    docFrequency: 7.0
    docPositions:
    - 916
    - 918
    - 1056
    - 2044
    - 2046
    - 2133
  removed: !ruby/object:Word
    word: removed
    stem: remov
    docFrequency: 9.0
    docPositions:
    - 917
    - 926
    - 1064
    - 1244
    - 2045
    - 2052
    - 2139
    - 2263
  ceases: !ruby/object:Word
    word: ceases
    stem: ceas
    docFrequency: 3.0
    docPositions:
    - 917
    - 2045
  conduct: !ruby/object:Word
    word: conduct
    stem: conduct
    docFrequency: 3.0
    docPositions:
    - 917
    - 2045
  saturation: !ruby/object:Word
    word: saturation
    stem: satur
    docFrequency: 5.0
    docPositions:
    - 918
    - 920
    - 2046
    - 2048
  feedback: !ruby/object:Word
    word: feedback
    stem: feedback
    docFrequency: 3.0
    docPositions:
    - 920
    - 2048
  anti: !ruby/object:Word
    word: anti
    stem: anti
    docFrequency: 3.0
    docPositions:
    - 920
    - 2048
  extra: !ruby/object:Word
    word: extra
    stem: extra
    docFrequency: 7.0
    docPositions:
    - 920
    - 1003
    - 1218
    - 2048
    - 2103
    - 2243
  requirement: !ruby/object:Word
    word: requirement
    stem: requir
    docFrequency: 5.0
    docPositions:
    - 923
    - 1140
    - 2049
    - 2189
  capable: !ruby/object:Word
    word: capable
    stem: capabl
    docFrequency: 3.0
    docPositions:
    - 923
    - 2049
  fan: !ruby/object:Word
    word: fan
    stem: fan
    docFrequency: 3.0
    docPositions:
    - 924
    - 2050
  npn: !ruby/object:Word
    word: npn
    stem: npn
    docFrequency: 5.0
    docPositions:
    - 924
    - 937
    - 2050
    - 2059
  removal: !ruby/object:Word
    word: removal
    stem: remov
    docFrequency: 3.0
    docPositions:
    - 924
    - 2050
  returned: !ruby/object:Word
    word: returned
    stem: return
    docFrequency: 3.0
    docPositions:
    - 925
    - 2051
  volt: !ruby/object:Word
    word: volt
    stem: volt
    docFrequency: 3.0
    docPositions:
    - 925
    - 2051
  pull: !ruby/object:Word
    word: pull
    stem: pull
    docFrequency: 5.0
    docPositions:
    - 926
    - 1064
    - 2052
    - 2139
  resistor: !ruby/object:Word
    word: resistor
    stem: resistor
    docFrequency: 5.0
    docPositions:
    - 926
    - 927
    - 2052
    - 2053
  replaced: !ruby/object:Word
    word: replaced
    stem: replac
    docFrequency: 11.0
    docPositions:
    - 926
    - 957
    - 1073
    - 1084
    - 1154
    - 2052
    - 2071
    - 2144
    - 2153
    - 2199
  terminating: !ruby/object:Word
    word: terminating
    stem: termin
    docFrequency: 3.0
    docPositions:
    - 926
    - 2052
  outputs: !ruby/object:Word
    word: outputs
    stem: output
    docFrequency: 7.0
    docPositions:
    - 927
    - 1145
    - 1150
    - 2053
    - 2192
    - 2197
  inverse: !ruby/object:Word
    word: inverse
    stem: invers
    docFrequency: 3.0
    docPositions:
    - 927
    - 2053
  signals: !ruby/object:Word
    word: signals
    stem: signal
    docFrequency: 5.0
    docPositions:
    - 927
    - 1227
    - 2053
    - 2250
  common: !ruby/object:Word
    word: common
    stem: common
    docFrequency: 5.0
    docPositions:
    - 927
    - 1164
    - 2053
    - 2205
  ored: !ruby/object:Word
    word: ored
    stem: or
    docFrequency: 3.0
    docPositions:
    - 927
    - 2053
  bus: !ruby/object:Word
    word: bus
    stem: bu
    docFrequency: 5.0
    docPositions:
    - 928
    - 1441
    - 2054
    - 2367
  trigger: !ruby/object:Word
    word: trigger
    stem: trigger
    docFrequency: 7.0
    docPositions:
    - 931
    - 932
    - 936
    - 2055
    - 2056
    - 2058
  everywhere: !ruby/object:Word
    word: everywhere
    stem: everywher
    docFrequency: 3.0
    docPositions:
    - 931
    - 2055
  standardise: !ruby/object:Word
    word: standardise
    stem: standardis
    docFrequency: 3.0
    docPositions:
    - 931
    - 2055
  loading: !ruby/object:Word
    word: loading
    stem: load
    docFrequency: 3.0
    docPositions:
    - 932
    - 2056
  recovery: !ruby/object:Word
    word: recovery
    stem: recoveri
    docFrequency: 3.0
    docPositions:
    - 933
    - 2057
  gating: !ruby/object:Word
    word: gating
    stem: gate
    docFrequency: 3.0
    docPositions:
    - 935
    - 2057
  arrangement: !ruby/object:Word
    word: arrangement
    stem: arrang
    docFrequency: 3.0
    docPositions:
    - 936
    - 2058
  designs: !ruby/object:Word
    word: designs
    stem: design
    docFrequency: 3.0
    docPositions:
    - 937
    - 2059
  standing: !ruby/object:Word
    word: standing
    stem: stand
    docFrequency: 3.0
    docPositions:
    - 937
    - 2059
  using: !ruby/object:Word
    word: using
    stem: us
    docFrequency: 25.0
    docPositions:
    - 937
    - 957
    - 986
    - 987
    - 1036
    - 1043
    - 1125
    - 1196
    - 1197
    - 1226
    - 1305
    - 1414
    - 2059
    - 2071
    - 2090
    - 2091
    - 2117
    - 2122
    - 2178
    - 2227
    - 2228
    - 2249
    - 2304
    - 2361
  transformer: !ruby/object:Word
    word: transformer
    stem: transform
    docFrequency: 3.0
    docPositions:
    - 938
    - 2060
  engineered: !ruby/object:Word
    word: engineered
    stem: engin
    docFrequency: 5.0
    docPositions:
    - 940
    - 1060
    - 2060
    - 2135
  bracknell: !ruby/object:Word
    word: bracknell
    stem: bracknel
    docFrequency: 5.0
    docPositions:
    - 941
    - 1263
    - 2061
    - 2275
  canada: !ruby/object:Word
    word: canada
    stem: canada
    docFrequency: 3.0
    docPositions:
    - 941
    - 2061
  packard: !ruby/object:Word
    word: packard
    stem: packard
    docFrequency: 3.0
    docPositions:
    - 942
    - 2062
  icl: !ruby/object:Word
    word: icl
    stem: icl
    docFrequency: 11.0
    docPositions:
    - 942
    - 1272
    - 1277
    - 1331
    - 1464
    - 2062
    - 2282
    - 2285
    - 2324
    - 2378
  bloodhound: !ruby/object:Word
    word: bloodhound
    stem: bloodhound
    docFrequency: 5.0
    docPositions:
    - 944
    - 1163
    - 2062
    - 2204
  complex: !ruby/object:Word
    word: complex
    stem: complex
    docFrequency: 3.0
    docPositions:
    - 944
    - 2062
  decisions: !ruby/object:Word
    word: decisions
    stem: decis
    docFrequency: 3.0
    docPositions:
    - 945
    - 2063
  suited: !ruby/object:Word
    word: suited
    stem: suit
    docFrequency: 3.0
    docPositions:
    - 946
    - 2064
  sufficiently: !ruby/object:Word
    word: sufficiently
    stem: suffici
    docFrequency: 3.0
    docPositions:
    - 947
    - 2065
  degree: !ruby/object:Word
    word: degree
    stem: degre
    docFrequency: 7.0
    docPositions:
    - 947
    - 1154
    - 1215
    - 2065
    - 2199
    - 2240
  suffice: !ruby/object:Word
    word: suffice
    stem: suffic
    docFrequency: 3.0
    docPositions:
    - 949
    - 2067
  service: !ruby/object:Word
    word: service
    stem: servic
    docFrequency: 7.0
    docPositions:
    - 950
    - 1243
    - 1283
    - 2068
    - 2262
    - 2291
  sake: !ruby/object:Word
    word: sake
    stem: sake
    docFrequency: 3.0
    docPositions:
    - 950
    - 2068
  preferable: !ruby/object:Word
    word: preferable
    stem: prefer
    docFrequency: 3.0
    docPositions:
    - 951
    - 2069
  undertaken: !ruby/object:Word
    word: undertaken
    stem: undertaken
    docFrequency: 5.0
    docPositions:
    - 955
    - 1264
    - 2069
    - 2276
  based: !ruby/object:Word
    word: based
    stem: base
    docFrequency: 7.0
    docPositions:
    - 955
    - 967
    - 1245
    - 2069
    - 2077
    - 2263
  requirements: !ruby/object:Word
    word: requirements
    stem: requir
    docFrequency: 5.0
    docPositions:
    - 955
    - 1048
    - 2069
    - 2127
  core: !ruby/object:Word
    word: core
    stem: core
    docFrequency: 15.0
    docPositions:
    - 956
    - 1040
    - 1044
    - 1050
    - 1119
    - 1129
    - 1131
    - 2070
    - 2119
    - 2123
    - 2127
    - 2174
    - 2180
    - 2182
  latter: !ruby/object:Word
    word: latter
    stem: latter
    docFrequency: 9.0
    docPositions:
    - 956
    - 982
    - 1118
    - 1131
    - 2070
    - 2088
    - 2173
    - 2182
  board: !ruby/object:Word
    word: board
    stem: board
    docFrequency: 3.0
    docPositions:
    - 957
    - 2071
  patent: !ruby/object:Word
    word: patent
    stem: patent
    docFrequency: 3.0
    docPositions:
    - 957
    - 2071
  ferrite: !ruby/object:Word
    word: ferrite
    stem: ferrit
    docFrequency: 13.0
    docPositions:
    - 957
    - 1053
    - 1057
    - 1062
    - 1073
    - 1093
    - 2071
    - 2130
    - 2134
    - 2137
    - 2144
    - 2158
  rods: !ruby/object:Word
    word: rods
    stem: rod
    docFrequency: 5.0
    docPositions:
    - 958
    - 1053
    - 2072
    - 2130
  mode: !ruby/object:Word
    word: mode
    stem: mode
    docFrequency: 3.0
    docPositions:
    - 962
    - 2074
  compromise: !ruby/object:Word
    word: compromise
    stem: compromis
    docFrequency: 3.0
    docPositions:
    - 963
    - 2075
  resulted: !ruby/object:Word
    word: resulted
    stem: result
    docFrequency: 3.0
    docPositions:
    - 964
    - 2076
  microsecond: !ruby/object:Word
    word: microsecond
    stem: microsecond
    docFrequency: 3.0
    docPositions:
    - 964
    - 2076
  addition: !ruby/object:Word
    word: addition
    stem: addit
    docFrequency: 6.0
    docPositions:
    - 965
    - 999
    - 1384
    - 2077
    - 2101
  body: !ruby/object:Word
    word: body
    stem: bodi
    docFrequency: 3.0
    docPositions:
    - 967
    - 2077
  centre: !ruby/object:Word
    word: centre
    stem: centr
    docFrequency: 3.0
    docPositions:
    - 968
    - 2078
  promoting: !ruby/object:Word
    word: promoting
    stem: promot
    docFrequency: 3.0
    docPositions:
    - 969
    - 2079
  babcock: !ruby/object:Word
    word: babcock
    stem: babcock
    docFrequency: 3.0
    docPositions:
    - 970
    - 2080
  wilcox: !ruby/object:Word
    word: wilcox
    stem: wilcox
    docFrequency: 3.0
    docPositions:
    - 970
    - 2080
  prospective: !ruby/object:Word
    word: prospective
    stem: prospect
    docFrequency: 3.0
    docPositions:
    - 970
    - 2080
  user: !ruby/object:Word
    word: user
    stem: user
    docFrequency: 3.0
    docPositions:
    - 970
    - 2080
  eight: !ruby/object:Word
    word: eight
    stem: eight
    docFrequency: 3.0
    docPositions:
    - 972
    - 2080
  accumulators: !ruby/object:Word
    word: accumulators
    stem: accumul
    docFrequency: 19.0
    docPositions:
    - 972
    - 986
    - 987
    - 988
    - 990
    - 992
    - 994
    - 1100
    - 2080
    - 2090
    - 2091
    - 2092
    - 2094
    - 2096
    - 2098
    - 2161
  format: !ruby/object:Word
    word: format
    stem: format
    docFrequency: 3.0
    docPositions:
    - 973
    - 2081
  specified: !ruby/object:Word
    word: specified
    stem: specifi
    docFrequency: 3.0
    docPositions:
    - 975
    - 2083
  function: !ruby/object:Word
    word: function
    stem: function
    docFrequency: 3.0
    docPositions:
    - 975
    - 2083
  modifier: !ruby/object:Word
    word: modifier
    stem: modifi
    docFrequency: 3.0
    docPositions:
    - 976
    - 2084
  indicated: !ruby/object:Word
    word: indicated
    stem: indic
    docFrequency: 3.0
    docPositions:
    - 976
    - 2084
  locations: !ruby/object:Word
    word: locations
    stem: locat
    docFrequency: 3.0
    docPositions:
    - 978
    - 2086
  differences: !ruby/object:Word
    word: differences
    stem: differ
    docFrequency: 3.0
    docPositions:
    - 981
    - 2087
  special: !ruby/object:Word
    word: special
    stem: special
    docFrequency: 9.0
    docPositions:
    - 982
    - 983
    - 1294
    - 1298
    - 2088
    - 2089
    - 2295
    - 2299
  type: !ruby/object:Word
    word: type
    stem: type
    docFrequency: 13.0
    docPositions:
    - 982
    - 984
    - 1129
    - 1347
    - 1350
    - 2088
    - 2090
    - 2180
    - 2332
    - 2335
  literals: !ruby/object:Word
    word: literals
    stem: liter
    docFrequency: 3.0
    docPositions:
    - 983
    - 2089
  jumps: !ruby/object:Word
    word: jumps
    stem: jump
    docFrequency: 5.0
    docPositions:
    - 983
    - 1110
    - 2089
    - 2167
  interrupts: !ruby/object:Word
    word: interrupts
    stem: interrupt
    docFrequency: 3.0
    docPositions:
    - 984
    - 2090
  corresponded: !ruby/object:Word
    word: corresponded
    stem: correspond
    docFrequency: 3.0
    docPositions:
    - 988
    - 2092
  likewise: !ruby/object:Word
    word: likewise
    stem: likewis
    docFrequency: 3.0
    docPositions:
    - 990
    - 2094
  double: !ruby/object:Word
    word: double
    stem: doubl
    docFrequency: 21.0
    docPositions:
    - 990
    - 991
    - 999
    - 1010
    - 1012
    - 1033
    - 1055
    - 1203
    - 2094
    - 2095
    - 2101
    - 2106
    - 2116
    - 2132
    - 2232
  consisting: !ruby/object:Word
    word: consisting
    stem: consist
    docFrequency: 5.0
    docPositions:
    - 990
    - 1052
    - 2094
    - 2129
  automatically: !ruby/object:Word
    word: automatically
    stem: automat
    docFrequency: 3.0
    docPositions:
    - 991
    - 2095
  p: !ruby/object:Word
    word: p
    stem: p
    docFrequency: 21.0
    docPositions:
    - 992
    - 1002
    - 1003
    - 1009
    - 1022
    - 1026
    - 1027
    - 1028
    - 2096
    - 2102
    - 2103
    - 2105
    - 2109
    - 2111
    - 2112
    - 2113
  q: !ruby/object:Word
    word: q
    stem: q
    docFrequency: 3.0
    docPositions:
    - 994
    - 2098
  modifiers: !ruby/object:Word
    word: modifiers
    stem: modifi
    docFrequency: 3.0
    docPositions:
    - 994
    - 2098
  subtractors: !ruby/object:Word
    word: subtractors
    stem: subtractor
    docFrequency: 3.0
    docPositions:
    - 996
    - 2098
  ripple: !ruby/object:Word
    word: ripple
    stem: rippl
    docFrequency: 3.0
    docPositions:
    - 996
    - 2098
  carry: !ruby/object:Word
    word: carry
    stem: carri
    docFrequency: 7.0
    docPositions:
    - 997
    - 1148
    - 2099
    - 2195
  delay: !ruby/object:Word
    word: delay
    stem: delai
    docFrequency: 7.0
    docPositions:
    - 997
    - 1090
    - 1146
    - 2099
    - 2157
    - 2193
  path: !ruby/object:Word
    word: path
    stem: path
    docFrequency: 3.0
    docPositions:
    - 997
    - 2099
  triple: !ruby/object:Word
    word: triple
    stem: tripl
    docFrequency: 3.0
    docPositions:
    - 998
    - 2100
  types: !ruby/object:Word
    word: types
    stem: type
    docFrequency: 5.0
    docPositions:
    - 998
    - 1104
    - 2100
    - 2163
  allow: !ruby/object:Word
    word: allow
    stem: allow
    docFrequency: 5.0
    docPositions:
    - 998
    - 1178
    - 2100
    - 2215
  modification: !ruby/object:Word
    word: modification
    stem: modif
    docFrequency: 3.0
    docPositions:
    - 1001
    - 2101
  examines: !ruby/object:Word
    word: examines
    stem: examin
    docFrequency: 3.0
    docPositions:
    - 1002
    - 2102
  _n: !ruby/object:Word
    word: _n
    stem: _n
    docFrequency: 5.0
    docPositions:
    - 1002
    - 1009
    - 2102
    - 2105
  _: !ruby/object:Word
    word: _
    stem: _
    docFrequency: 7.0
    docPositions:
    - 1003
    - 1009
    - 2103
    - 2105
  initially: !ruby/object:Word
    word: initially
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 1003
    - 1258
    - 2103
    - 2270
  performs: !ruby/object:Word
    word: performs
    stem: perform
    docFrequency: 3.0
    docPositions:
    - 1004
    - 2104
  pn: !ruby/object:Word
    word: pn
    stem: pn
    docFrequency: 7.0
    docPositions:
    - 1007
    - 1012
    - 2106
  multiplicand: !ruby/object:Word
    word: multiplicand
    stem: multiplicand
    docFrequency: 3.0
    docPositions:
    - 1007
    - 2105
  subtract: !ruby/object:Word
    word: subtract
    stem: subtract
    docFrequency: 8.0
    docPositions:
    - 1007
    - 1012
    - 1019
    - 2106
    - 2108
  examined: !ruby/object:Word
    word: examined
    stem: examin
    docFrequency: 5.0
    docPositions:
    - 1009
    - 1230
    - 2105
    - 2253
  modified: !ruby/object:Word
    word: modified
    stem: modifi
    docFrequency: 5.0
    docPositions:
    - 1012
    - 1077
    - 2106
    - 2148
  increase: !ruby/object:Word
    word: increase
    stem: increas
    docFrequency: 3.0
    docPositions:
    - 1016
    - 2107
  spread: !ruby/object:Word
    word: spread
    stem: spread
    docFrequency: 3.0
    docPositions:
    - 1016
    - 2107
  maximumbooth: !ruby/object:Word
    word: maximumbooth
    stem: maximumbooth
    docFrequency: 2.0
    docPositions:
    - 1019
  nargus: !ruby/object:Word
    word: nargus
    stem: nargu
    docFrequency: 2.0
    docPositions:
    - 1019
  relative: !ruby/object:Word
    word: relative
    stem: rel
    docFrequency: 3.0
    docPositions:
    - 1019
    - 2108
  non: !ruby/object:Word
    word: non
    stem: non
    docFrequency: 3.0
    docPositions:
    - 1021
    - 2108
  restoring: !ruby/object:Word
    word: restoring
    stem: restor
    docFrequency: 3.0
    docPositions:
    - 1021
    - 2108
  divider: !ruby/object:Word
    word: divider
    stem: divid
    docFrequency: 3.0
    docPositions:
    - 1021
    - 2108
  operate: !ruby/object:Word
    word: operate
    stem: oper
    docFrequency: 5.0
    docPositions:
    - 1021
    - 1285
    - 2108
    - 2291
  dividend: !ruby/object:Word
    word: dividend
    stem: dividend
    docFrequency: 9.0
    docPositions:
    - 1022
    - 1025
    - 1029
    - 1032
    - 2109
    - 2110
    - 2114
    - 2115
  quotient: !ruby/object:Word
    word: quotient
    stem: quotient
    docFrequency: 5.0
    docPositions:
    - 1023
    - 1029
    - 2110
    - 2114
  qr: !ruby/object:Word
    word: qr
    stem: qr
    docFrequency: 9.0
    docPositions:
    - 1023
    - 1026
    - 1028
    - 1030
    - 2110
    - 2111
    - 2113
    - 2115
  signs: !ruby/object:Word
    word: signs
    stem: sign
    docFrequency: 3.0
    docPositions:
    - 1029
    - 2114
  rounded: !ruby/object:Word
    word: rounded
    stem: round
    docFrequency: 3.0
    docPositions:
    - 1032
    - 2115
  unrounded: !ruby/object:Word
    word: unrounded
    stem: unround
    docFrequency: 3.0
    docPositions:
    - 1032
    - 2115
  root: !ruby/object:Word
    word: root
    stem: root
    docFrequency: 3.0
    docPositions:
    - 1036
    - 2117
  programmed: !ruby/object:Word
    word: programmed
    stem: program
    docFrequency: 3.0
    docPositions:
    - 1036
    - 2117
  transcendental: !ruby/object:Word
    word: transcendental
    stem: transcendent
    docFrequency: 3.0
    docPositions:
    - 1038
    - 2119
  mentioned: !ruby/object:Word
    word: mentioned
    stem: mention
    docFrequency: 3.0
    docPositions:
    - 1040
    - 2119
  modules: !ruby/object:Word
    word: modules
    stem: modul
    docFrequency: 3.0
    docPositions:
    - 1040
    - 2119
  parity: !ruby/object:Word
    word: parity
    stem: pariti
    docFrequency: 5.0
    docPositions:
    - 1041
    - 1061
    - 2120
    - 2136
  increased: !ruby/object:Word
    word: increased
    stem: increas
    docFrequency: 3.0
    docPositions:
    - 1041
    - 2120
  organised: !ruby/object:Word
    word: organised
    stem: organis
    docFrequency: 3.0
    docPositions:
    - 1042
    - 2121
  selection: !ruby/object:Word
    word: selection
    stem: select
    docFrequency: 5.0
    docPositions:
    - 1042
    - 1147
    - 2121
    - 2194
  y: !ruby/object:Word
    word: y
    stem: y
    docFrequency: 5.0
    docPositions:
    - 1042
    - 1166
    - 2121
    - 2207
  inhibit: !ruby/object:Word
    word: inhibit
    stem: inhibit
    docFrequency: 3.0
    docPositions:
    - 1042
    - 2121
  cycle: !ruby/object:Word
    word: cycle
    stem: cycl
    docFrequency: 3.0
    docPositions:
    - 1043
    - 2122
  state: !ruby/object:Word
    word: state
    stem: state
    docFrequency: 5.0
    docPositions:
    - 1043
    - 1144
    - 2122
    - 2191
  art: !ruby/object:Word
    word: art
    stem: art
    docFrequency: 3.0
    docPositions:
    - 1043
    - 2122
  cores: !ruby/object:Word
    word: cores
    stem: core
    docFrequency: 5.0
    docPositions:
    - 1043
    - 1047
    - 2122
    - 2126
  driven: !ruby/object:Word
    word: driven
    stem: driven
    docFrequency: 3.0
    docPositions:
    - 1044
    - 2123
  stores: !ruby/object:Word
    word: stores
    stem: store
    docFrequency: 7.0
    docPositions:
    - 1044
    - 1067
    - 1300
    - 2123
    - 2142
    - 2301
  problems: !ruby/object:Word
    word: problems
    stem: problem
    docFrequency: 7.0
    docPositions:
    - 1045
    - 1163
    - 1373
    - 2124
    - 2204
    - 2350
  overcome: !ruby/object:Word
    word: overcome
    stem: overcom
    docFrequency: 3.0
    docPositions:
    - 1045
    - 2124
  emf: !ruby/object:Word
    word: emf
    stem: emf
    docFrequency: 3.0
    docPositions:
    - 1047
    - 2126
  conflicting: !ruby/object:Word
    word: conflicting
    stem: conflict
    docFrequency: 3.0
    docPositions:
    - 1047
    - 2126
  adverse: !ruby/object:Word
    word: adverse
    stem: advers
    docFrequency: 3.0
    docPositions:
    - 1051
    - 2128
  seldom: !ruby/object:Word
    word: seldom
    stem: seldom
    docFrequency: 3.0
    docPositions:
    - 1051
    - 2128
  size: !ruby/object:Word
    word: size
    stem: size
    docFrequency: 9.0
    docPositions:
    - 1053
    - 1070
    - 1076
    - 1093
    - 2130
    - 2143
    - 2147
    - 2158
  leads: !ruby/object:Word
    word: leads
    stem: lead
    docFrequency: 3.0
    docPositions:
    - 1053
    - 2130
  tracks: !ruby/object:Word
    word: tracks
    stem: track
    docFrequency: 19.0
    docPositions:
    - 1054
    - 1056
    - 1074
    - 1083
    - 1084
    - 1087
    - 1089
    - 2131
    - 2133
    - 2145
    - 2152
    - 2153
    - 2154
    - 2156
  orthogonal: !ruby/object:Word
    word: orthogonal
    stem: orthogon
    docFrequency: 5.0
    docPositions:
    - 1054
    - 1170
    - 2131
    - 2209
  etched: !ruby/object:Word
    word: etched
    stem: etch
    docFrequency: 3.0
    docPositions:
    - 1055
    - 2132
  sided: !ruby/object:Word
    word: sided
    stem: side
    docFrequency: 3.0
    docPositions:
    - 1055
    - 2132
  picked: !ruby/object:Word
    word: picked
    stem: pick
    docFrequency: 3.0
    docPositions:
    - 1057
    - 2134
  signal: !ruby/object:Word
    word: signal
    stem: signal
    docFrequency: 3.0
    docPositions:
    - 1057
    - 2134
  peg: !ruby/object:Word
    word: peg
    stem: peg
    docFrequency: 5.0
    docPositions:
    - 1057
    - 1093
    - 2134
    - 2158
  intersection: !ruby/object:Word
    word: intersection
    stem: intersect
    docFrequency: 3.0
    docPositions:
    - 1058
    - 2135
  disturbed: !ruby/object:Word
    word: disturbed
    stem: disturb
    docFrequency: 3.0
    docPositions:
    - 1058
    - 2135
  symmetry: !ruby/object:Word
    word: symmetry
    stem: symmetri
    docFrequency: 3.0
    docPositions:
    - 1058
    - 2135
  field: !ruby/object:Word
    word: field
    stem: field
    docFrequency: 3.0
    docPositions:
    - 1058
    - 2135
  trays: !ruby/object:Word
    word: trays
    stem: trai
    docFrequency: 5.0
    docPositions:
    - 1060
    - 1065
    - 2135
    - 2140
  holding: !ruby/object:Word
    word: holding
    stem: hold
    docFrequency: 3.0
    docPositions:
    - 1060
    - 2135
  transformers: !ruby/object:Word
    word: transformers
    stem: transform
    docFrequency: 3.0
    docPositions:
    - 1061
    - 2136
  pegs: !ruby/object:Word
    word: pegs
    stem: peg
    docFrequency: 7.0
    docPositions:
    - 1062
    - 1064
    - 1073
    - 2137
    - 2139
    - 2144
  caps: !ruby/object:Word
    word: caps
    stem: cap
    docFrequency: 3.0
    docPositions:
    - 1062
    - 2137
  easier: !ruby/object:Word
    word: easier
    stem: easier
    docFrequency: 3.0
    docPositions:
    - 1062
    - 2137
  perspex: !ruby/object:Word
    word: perspex
    stem: perspex
    docFrequency: 3.0
    docPositions:
    - 1063
    - 2138
  electrified: !ruby/object:Word
    word: electrified
    stem: electrifi
    docFrequency: 3.0
    docPositions:
    - 1064
    - 2139
  box: !ruby/object:Word
    word: box
    stem: box
    docFrequency: 3.0
    docPositions:
    - 1065
    - 2140
  associated: !ruby/object:Word
    word: associated
    stem: associ
    docFrequency: 3.0
    docPositions:
    - 1065
    - 2140
  accommodate: !ruby/object:Word
    word: accommodate
    stem: accommod
    docFrequency: 3.0
    docPositions:
    - 1066
    - 2141
  bulky: !ruby/object:Word
    word: bulky
    stem: bulki
    docFrequency: 3.0
    docPositions:
    - 1069
    - 2142
  military: !ruby/object:Word
    word: military
    stem: militari
    docFrequency: 7.0
    docPositions:
    - 1070
    - 1136
    - 1162
    - 2143
    - 2185
    - 2203
  late: !ruby/object:Word
    word: late
    stem: late
    docFrequency: 3.0
    docPositions:
    - 1071
    - 2144
  loops: !ruby/object:Word
    word: loops
    stem: loop
    docFrequency: 13.0
    docPositions:
    - 1073
    - 1075
    - 1076
    - 1077
    - 1207
    - 1224
    - 2144
    - 2146
    - 2147
    - 2148
    - 2236
    - 2247
  induced: !ruby/object:Word
    word: induced
    stem: induc
    docFrequency: 3.0
    docPositions:
    - 1074
    - 2145
  eddy: !ruby/object:Word
    word: eddy
    stem: eddi
    docFrequency: 3.0
    docPositions:
    - 1074
    - 2145
  thin: !ruby/object:Word
    word: thin
    stem: thin
    docFrequency: 3.0
    docPositions:
    - 1075
    - 2146
  fibre: !ruby/object:Word
    word: fibre
    stem: fibr
    docFrequency: 3.0
    docPositions:
    - 1075
    - 2146
  shape: !ruby/object:Word
    word: shape
    stem: shape
    docFrequency: 3.0
    docPositions:
    - 1076
    - 2147
  hollerith: !ruby/object:Word
    word: hollerith
    stem: hollerith
    docFrequency: 3.0
    docPositions:
    - 1076
    - 2147
  punch: !ruby/object:Word
    word: punch
    stem: punch
    docFrequency: 3.0
    docPositions:
    - 1077
    - 2148
  array: !ruby/object:Word
    word: array
    stem: arrai
    docFrequency: 5.0
    docPositions:
    - 1077
    - 1428
    - 2148
    - 2364
  representing: !ruby/object:Word
    word: representing
    stem: repres
    docFrequency: 3.0
    docPositions:
    - 1078
    - 2149
  cards: !ruby/object:Word
    word: cards
    stem: card
    docFrequency: 9.0
    docPositions:
    - 1080
    - 1081
    - 1082
    - 1085
    - 2149
    - 2150
    - 2151
    - 2154
  somewhat: !ruby/object:Word
    word: somewhat
    stem: somewhat
    docFrequency: 3.0
    docPositions:
    - 1081
    - 2150
  shelves: !ruby/object:Word
    word: shelves
    stem: shelv
    docFrequency: 3.0
    docPositions:
    - 1081
    - 2150
  usable: !ruby/object:Word
    word: usable
    stem: usabl
    docFrequency: 3.0
    docPositions:
    - 1082
    - 2151
  proximity: !ruby/object:Word
    word: proximity
    stem: proxim
    docFrequency: 3.0
    docPositions:
    - 1083
    - 2152
  pads: !ruby/object:Word
    word: pads
    stem: pad
    docFrequency: 3.0
    docPositions:
    - 1083
    - 2152
  shelf: !ruby/object:Word
    word: shelf
    stem: shelf
    docFrequency: 5.0
    docPositions:
    - 1085
    - 1088
    - 2154
    - 2155
  flexible: !ruby/object:Word
    word: flexible
    stem: flexibl
    docFrequency: 3.0
    docPositions:
    - 1087
    - 2154
  sets: !ruby/object:Word
    word: sets
    stem: set
    docFrequency: 3.0
    docPositions:
    - 1087
    - 2154
  amplifiers: !ruby/object:Word
    word: amplifiers
    stem: amplifi
    docFrequency: 3.0
    docPositions:
    - 1088
    - 2155
  selecting: !ruby/object:Word
    word: selecting
    stem: select
    docFrequency: 5.0
    docPositions:
    - 1089
    - 1146
    - 2156
    - 2193
  drivers: !ruby/object:Word
    word: drivers
    stem: driver
    docFrequency: 3.0
    docPositions:
    - 1089
    - 2156
  concertina: !ruby/object:Word
    word: concertina
    stem: concertina
    docFrequency: 3.0
    docPositions:
    - 1090
    - 2157
  fashion: !ruby/object:Word
    word: fashion
    stem: fashion
    docFrequency: 3.0
    docPositions:
    - 1090
    - 2157
  necessitated: !ruby/object:Word
    word: necessitated
    stem: necessit
    docFrequency: 5.0
    docPositions:
    - 1091
    - 1206
    - 2158
    - 2235
  strobe: !ruby/object:Word
    word: strobe
    stem: strobe
    docFrequency: 3.0
    docPositions:
    - 1091
    - 2158
  equivalent: !ruby/object:Word
    word: equivalent
    stem: equival
    docFrequency: 3.0
    docPositions:
    - 1093
    - 2158
  punching: !ruby/object:Word
    word: punching
    stem: punch
    docFrequency: 3.0
    docPositions:
    - 1094
    - 2159
  assisted: !ruby/object:Word
    word: assisted
    stem: assist
    docFrequency: 3.0
    docPositions:
    - 1094
    - 2159
  production: !ruby/object:Word
    word: production
    stem: product
    docFrequency: 5.0
    docPositions:
    - 1094
    - 1273
    - 2159
    - 2283
  requiring: !ruby/object:Word
    word: requiring
    stem: requir
    docFrequency: 5.0
    docPositions:
    - 1097
    - 1132
    - 2160
    - 2183
  optional: !ruby/object:Word
    word: optional
    stem: option
    docFrequency: 3.0
    docPositions:
    - 1098
    - 2161
  displayed: !ruby/object:Word
    word: displayed
    stem: displai
    docFrequency: 5.0
    docPositions:
    - 1100
    - 1307
    - 2161
    - 2306
  contents: !ruby/object:Word
    word: contents
    stem: content
    docFrequency: 5.0
    docPositions:
    - 1100
    - 1118
    - 2161
    - 2173
  rotary: !ruby/object:Word
    word: rotary
    stem: rotari
    docFrequency: 3.0
    docPositions:
    - 1101
    - 2162
  switches: !ruby/object:Word
    word: switches
    stem: switch
    docFrequency: 5.0
    docPositions:
    - 1101
    - 2162
  manual: !ruby/object:Word
    word: manual
    stem: manual
    docFrequency: 5.0
    docPositions:
    - 1102
    - 1343
    - 2163
    - 2330
  intervention: !ruby/object:Word
    word: intervention
    stem: intervent
    docFrequency: 3.0
    docPositions:
    - 1102
    - 2163
  interrupt: !ruby/object:Word
    word: interrupt
    stem: interrupt
    docFrequency: 19.0
    docPositions:
    - 1104
    - 1117
    - 1120
    - 1124
    - 1125
    - 1129
    - 1156
    - 2163
    - 2172
    - 2175
    - 2177
    - 2178
    - 2180
    - 2201
  possibly: !ruby/object:Word
    word: possibly
    stem: possibl
    docFrequency: 3.0
    docPositions:
    - 1105
    - 2164
  sampling: !ruby/object:Word
    word: sampling
    stem: sampl
    docFrequency: 9.0
    docPositions:
    - 1107
    - 1111
    - 1195
    - 1219
    - 2164
    - 2168
    - 2226
    - 2244
  constant: !ruby/object:Word
    word: constant
    stem: constant
    docFrequency: 9.0
    docPositions:
    - 1108
    - 1111
    - 1219
    - 1220
    - 2165
    - 2168
    - 2244
    - 2245
  conditional: !ruby/object:Word
    word: conditional
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 1110
    - 2167
  situation: !ruby/object:Word
    word: situation
    stem: situat
    docFrequency: 3.0
    docPositions:
    - 1110
    - 2167
  worse: !ruby/object:Word
    word: worse
    stem: wors
    docFrequency: 3.0
    docPositions:
    - 1110
    - 2167
  adopted: !ruby/object:Word
    word: adopted
    stem: adopt
    docFrequency: 3.0
    docPositions:
    - 1113
    - 2168
  decremented: !ruby/object:Word
    word: decremented
    stem: decrement
    docFrequency: 3.0
    docPositions:
    - 1114
    - 2169
  interrupted: !ruby/object:Word
    word: interrupted
    stem: interrupt
    docFrequency: 3.0
    docPositions:
    - 1116
    - 2171
  counter: !ruby/object:Word
    word: counter
    stem: counter
    docFrequency: 5.0
    docPositions:
    - 1116
    - 1122
    - 2171
    - 2177
  start: !ruby/object:Word
    word: start
    stem: start
    docFrequency: 3.0
    docPositions:
    - 1117
    - 2172
  reserved: !ruby/object:Word
    word: reserved
    stem: reserv
    docFrequency: 3.0
    docPositions:
    - 1118
    - 2173
  jumped: !ruby/object:Word
    word: jumped
    stem: jump
    docFrequency: 3.0
    docPositions:
    - 1119
    - 2174
  subroutine: !ruby/object:Word
    word: subroutine
    stem: subroutin
    docFrequency: 5.0
    docPositions:
    - 1119
    - 1120
    - 2174
    - 2175
  restored: !ruby/object:Word
    word: restored
    stem: restor
    docFrequency: 3.0
    docPositions:
    - 1120
    - 2175
  incremented: !ruby/object:Word
    word: incremented
    stem: increment
    docFrequency: 3.0
    docPositions:
    - 1121
    - 2176
  routines: !ruby/object:Word
    word: routines
    stem: routin
    docFrequency: 3.0
    docPositions:
    - 1124
    - 2177
  modern: !ruby/object:Word
    word: modern
    stem: modern
    docFrequency: 5.0
    docPositions:
    - 1124
    - 1368
    - 2177
    - 2347
  multiples: !ruby/object:Word
    word: multiples
    stem: multipl
    docFrequency: 3.0
    docPositions:
    - 1126
    - 2179
  shortest: !ruby/object:Word
    word: shortest
    stem: shortest
    docFrequency: 3.0
    docPositions:
    - 1126
    - 2179
  csi: !ruby/object:Word
    word: csi
    stem: csi
    docFrequency: 3.0
    docPositions:
    - 1129
    - 2180
  dma: !ruby/object:Word
    word: dma
    stem: dma
    docFrequency: 3.0
    docPositions:
    - 1130
    - 2181
  direct: !ruby/object:Word
    word: direct
    stem: direct
    docFrequency: 3.0
    docPositions:
    - 1130
    - 2181
  transfer: !ruby/object:Word
    word: transfer
    stem: transfer
    docFrequency: 7.0
    docPositions:
    - 1130
    - 1195
    - 1463
    - 2181
    - 2226
    - 2378
  blocks: !ruby/object:Word
    word: blocks
    stem: block
    docFrequency: 3.0
    docPositions:
    - 1130
    - 2181
  asynchronous: !ruby/object:Word
    word: asynchronous
    stem: asynchron
    docFrequency: 5.0
    docPositions:
    - 1133
    - 1150
    - 2184
    - 2197
  peripheral: !ruby/object:Word
    word: peripheral
    stem: peripher
    docFrequency: 5.0
    docPositions:
    - 1133
    - 1136
    - 2184
    - 2185
  usually: !ruby/object:Word
    word: usually
    stem: usual
    docFrequency: 5.0
    docPositions:
    - 1133
    - 1168
    - 2184
    - 2207
  handled: !ruby/object:Word
    word: handled
    stem: handl
    docFrequency: 3.0
    docPositions:
    - 1134
    - 2185
  variety: !ruby/object:Word
    word: variety
    stem: varieti
    docFrequency: 7.0
    docPositions:
    - 1136
    - 1255
    - 1377
    - 2185
    - 2269
    - 2351
  forms: !ruby/object:Word
    word: forms
    stem: form
    docFrequency: 3.0
    docPositions:
    - 1137
    - 2186
  digitisers: !ruby/object:Word
    word: digitisers
    stem: digitis
    docFrequency: 3.0
    docPositions:
    - 1138
    - 2187
  chart: !ruby/object:Word
    word: chart
    stem: chart
    docFrequency: 3.0
    docPositions:
    - 1142
    - 2191
  recorders: !ruby/object:Word
    word: recorders
    stem: record
    docFrequency: 3.0
    docPositions:
    - 1142
    - 2191
  solid: !ruby/object:Word
    word: solid
    stem: solid
    docFrequency: 3.0
    docPositions:
    - 1144
    - 2191
  select: !ruby/object:Word
    word: select
    stem: select
    docFrequency: 3.0
    docPositions:
    - 1144
    - 2191
  thermocouple: !ruby/object:Word
    word: thermocouple
    stem: thermocoupl
    docFrequency: 3.0
    docPositions:
    - 1145
    - 2192
  level: !ruby/object:Word
    word: level
    stem: level
    docFrequency: 3.0
    docPositions:
    - 1145
    - 2192
  relays: !ruby/object:Word
    word: relays
    stem: relai
    docFrequency: 3.0
    docPositions:
    - 1146
    - 2193
  reading: !ruby/object:Word
    word: reading
    stem: read
    docFrequency: 3.0
    docPositions:
    - 1147
    - 2194
  separately: !ruby/object:Word
    word: separately
    stem: separ
    docFrequency: 3.0
    docPositions:
    - 1147
    - 2194
  programmable: !ruby/object:Word
    word: programmable
    stem: programm
    docFrequency: 3.0
    docPositions:
    - 1148
    - 2195
  waste: !ruby/object:Word
    word: waste
    stem: wast
    docFrequency: 3.0
    docPositions:
    - 1149
    - 2196
  waiting: !ruby/object:Word
    word: waiting
    stem: wait
    docFrequency: 5.0
    docPositions:
    - 1149
    - 1150
    - 2196
    - 2197
  failures: !ruby/object:Word
    word: failures
    stem: failur
    docFrequency: 7.0
    docPositions:
    - 1152
    - 1301
    - 1356
    - 2197
    - 2302
    - 2339
  eliminated: !ruby/object:Word
    word: eliminated
    stem: elimin
    docFrequency: 3.0
    docPositions:
    - 1152
    - 2197
  soldered: !ruby/object:Word
    word: soldered
    stem: solder
    docFrequency: 3.0
    docPositions:
    - 1152
    - 2197
  welded: !ruby/object:Word
    word: welded
    stem: weld
    docFrequency: 3.0
    docPositions:
    - 1153
    - 2198
  connectors: !ruby/object:Word
    word: connectors
    stem: connector
    docFrequency: 3.0
    docPositions:
    - 1153
    - 2198
  contacts: !ruby/object:Word
    word: contacts
    stem: contact
    docFrequency: 3.0
    docPositions:
    - 1153
    - 2198
  brittle: !ruby/object:Word
    word: brittle
    stem: brittl
    docFrequency: 3.0
    docPositions:
    - 1153
    - 2198
  prone: !ruby/object:Word
    word: prone
    stem: prone
    docFrequency: 3.0
    docPositions:
    - 1154
    - 2199
  spreading: !ruby/object:Word
    word: spreading
    stem: spread
    docFrequency: 3.0
    docPositions:
    - 1154
    - 2199
  checking: !ruby/object:Word
    word: checking
    stem: check
    docFrequency: 5.0
    docPositions:
    - 1156
    - 1234
    - 2201
    - 2255
  periodically: !ruby/object:Word
    word: periodically
    stem: period
    docFrequency: 3.0
    docPositions:
    - 1156
    - 2201
  detected: !ruby/object:Word
    word: detected
    stem: detect
    docFrequency: 3.0
    docPositions:
    - 1157
    - 2202
  failure: !ruby/object:Word
    word: failure
    stem: failur
    docFrequency: 7.0
    docPositions:
    - 1157
    - 1236
    - 1363
    - 2202
    - 2257
    - 2344
  alarm: !ruby/object:Word
    word: alarm
    stem: alarm
    docFrequency: 5.0
    docPositions:
    - 1157
    - 1186
    - 2202
    - 2221
  isolate: !ruby/object:Word
    word: isolate
    stem: isol
    docFrequency: 3.0
    docPositions:
    - 1157
    - 2202
  radar: !ruby/object:Word
    word: radar
    stem: radar
    docFrequency: 9.0
    docPositions:
    - 1164
    - 1165
    - 1168
    - 1207
    - 2205
    - 2206
    - 2207
    - 2236
  smoothing: !ruby/object:Word
    word: smoothing
    stem: smooth
    docFrequency: 19.0
    docPositions:
    - 1164
    - 1171
    - 1173
    - 1179
    - 1199
    - 1206
    - 1208
    - 1215
    - 2205
    - 2210
    - 2212
    - 2216
    - 2230
    - 2235
    - 2237
    - 2240
  predicting: !ruby/object:Word
    word: predicting
    stem: predict
    docFrequency: 3.0
    docPositions:
    - 1164
    - 2205
  aircraft: !ruby/object:Word
    word: aircraft
    stem: aircraft
    docFrequency: 9.0
    docPositions:
    - 1164
    - 1253
    - 1255
    - 1258
    - 2205
    - 2267
    - 2269
    - 2270
  track: !ruby/object:Word
    word: track
    stem: track
    docFrequency: 5.0
    docPositions:
    - 1165
    - 1363
    - 2206
    - 2344
  polar: !ruby/object:Word
    word: polar
    stem: polar
    docFrequency: 3.0
    docPositions:
    - 1165
    - 2206
  co: !ruby/object:Word
    word: co
    stem: co
    docFrequency: 7.0
    docPositions:
    - 1165
    - 1166
    - 1444
    - 2206
    - 2207
    - 2367
  ordinates: !ruby/object:Word
    word: ordinates
    stem: ordin
    docFrequency: 5.0
    docPositions:
    - 1165
    - 1166
    - 2206
    - 2207
  latitude: !ruby/object:Word
    word: latitude
    stem: latitud
    docFrequency: 3.0
    docPositions:
    - 1166
    - 2207
  longitude: !ruby/object:Word
    word: longitude
    stem: longitud
    docFrequency: 3.0
    docPositions:
    - 1166
    - 2207
  noisy: !ruby/object:Word
    word: noisy
    stem: noisi
    docFrequency: 3.0
    docPositions:
    - 1168
    - 2207
  smoothed: !ruby/object:Word
    word: smoothed
    stem: smooth
    docFrequency: 5.0
    docPositions:
    - 1168
    - 1211
    - 2207
    - 2240
  fitting: !ruby/object:Word
    word: fitting
    stem: fit
    docFrequency: 3.0
    docPositions:
    - 1168
    - 2207
  straight: !ruby/object:Word
    word: straight
    stem: straight
    docFrequency: 3.0
    docPositions:
    - 1168
    - 2207
  polynomial: !ruby/object:Word
    word: polynomial
    stem: polynomi
    docFrequency: 5.0
    docPositions:
    - 1169
    - 1174
    - 2208
    - 2213
  squares: !ruby/object:Word
    word: squares
    stem: squar
    docFrequency: 5.0
    docPositions:
    - 1169
    - 1171
    - 2208
    - 2210
  easiest: !ruby/object:Word
    word: easiest
    stem: easiest
    docFrequency: 3.0
    docPositions:
    - 1169
    - 2208
  noise: !ruby/object:Word
    word: noise
    stem: nois
    docFrequency: 13.0
    docPositions:
    - 1170
    - 1173
    - 1180
    - 1205
    - 1215
    - 1216
    - 2209
    - 2212
    - 2217
    - 2234
    - 2240
    - 2241
  reduction: !ruby/object:Word
    word: reduction
    stem: reduct
    docFrequency: 7.0
    docPositions:
    - 1170
    - 1173
    - 1180
    - 2209
    - 2212
    - 2217
  formulae: !ruby/object:Word
    word: formulae
    stem: formula
    docFrequency: 3.0
    docPositions:
    - 1171
    - 2210
  sum: !ruby/object:Word
    word: sum
    stem: sum
    docFrequency: 5.0
    docPositions:
    - 1171
    - 1191
    - 2210
    - 2224
  coefficients: !ruby/object:Word
    word: coefficients
    stem: coeffici
    docFrequency: 3.0
    docPositions:
    - 1172
    - 2211
  taking: !ruby/object:Word
    word: taking
    stem: take
    docFrequency: 7.0
    docPositions:
    - 1172
    - 1204
    - 1209
    - 2211
    - 2233
    - 2238
  odd: !ruby/object:Word
    word: odd
    stem: odd
    docFrequency: 3.0
    docPositions:
    - 1172
    - 2211
  estimating: !ruby/object:Word
    word: estimating
    stem: estim
    docFrequency: 3.0
    docPositions:
    - 1172
    - 2211
  midpoint: !ruby/object:Word
    word: midpoint
    stem: midpoint
    docFrequency: 3.0
    docPositions:
    - 1172
    - 2211
  greatest: !ruby/object:Word
    word: greatest
    stem: greatest
    docFrequency: 3.0
    docPositions:
    - 1173
    - 2212
  respect: !ruby/object:Word
    word: respect
    stem: respect
    docFrequency: 3.0
    docPositions:
    - 1175
    - 2214
  unfortunately: !ruby/object:Word
    word: unfortunately
    stem: unfortun
    docFrequency: 3.0
    docPositions:
    - 1177
    - 2214
  wants: !ruby/object:Word
    word: wants
    stem: want
    docFrequency: 3.0
    docPositions:
    - 1177
    - 2214
  obtain: !ruby/object:Word
    word: obtain
    stem: obtain
    docFrequency: 7.0
    docPositions:
    - 1178
    - 1180
    - 1203
    - 2215
    - 2217
    - 2232
  latest: !ruby/object:Word
    word: latest
    stem: latest
    docFrequency: 5.0
    docPositions:
    - 1178
    - 1209
    - 2215
    - 2238
  soda: !ruby/object:Word
    word: soda
    stem: soda
    docFrequency: 3.0
    docPositions:
    - 1182
    - 2217
  ash: !ruby/object:Word
    word: ash
    stem: ash
    docFrequency: 3.0
    docPositions:
    - 1182
    - 2217
  fleetwood: !ruby/object:Word
    word: fleetwood
    stem: fleetwood
    docFrequency: 5.0
    docPositions:
    - 1183
    - 1241
    - 2218
    - 2260
  discussions: !ruby/object:Word
    word: discussions
    stem: discuss
    docFrequency: 3.0
    docPositions:
    - 1183
    - 2218
  nantwich: !ruby/object:Word
    word: nantwich
    stem: nantwich
    docFrequency: 3.0
    docPositions:
    - 1184
    - 2219
  alan: !ruby/object:Word
    word: alan
    stem: alan
    docFrequency: 3.0
    docPositions:
    - 1184
    - 2219
  thompson: !ruby/object:Word
    word: thompson
    stem: thompson
    docFrequency: 3.0
    docPositions:
    - 1184
    - 2219
  economical: !ruby/object:Word
    word: economical
    stem: econom
    docFrequency: 3.0
    docPositions:
    - 1185
    - 2220
  supervisory: !ruby/object:Word
    word: supervisory
    stem: supervisori
    docFrequency: 3.0
    docPositions:
    - 1185
    - 2220
  role: !ruby/object:Word
    word: role
    stem: role
    docFrequency: 3.0
    docPositions:
    - 1185
    - 2220
  replace: !ruby/object:Word
    word: replace
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 1186
    - 2221
  pneumatic: !ruby/object:Word
    word: pneumatic
    stem: pneumat
    docFrequency: 3.0
    docPositions:
    - 1187
    - 2222
  hundred: !ruby/object:Word
    word: hundred
    stem: hundr
    docFrequency: 3.0
    docPositions:
    - 1187
    - 2222
  docile: !ruby/object:Word
    word: docile
    stem: docil
    docFrequency: 3.0
    docPositions:
    - 1189
    - 2222
  failed: !ruby/object:Word
    word: failed
    stem: fail
    docFrequency: 3.0
    docPositions:
    - 1189
    - 2222
  isolated: !ruby/object:Word
    word: isolated
    stem: isol
    docFrequency: 3.0
    docPositions:
    - 1190
    - 2223
  coast: !ruby/object:Word
    word: coast
    stem: coast
    docFrequency: 3.0
    docPositions:
    - 1190
    - 2223
  danger: !ruby/object:Word
    word: danger
    stem: danger
    docFrequency: 3.0
    docPositions:
    - 1190
    - 2223
  loss: !ruby/object:Word
    word: loss
    stem: loss
    docFrequency: 3.0
    docPositions:
    - 1191
    - 2224
  efficiency: !ruby/object:Word
    word: efficiency
    stem: effici
    docFrequency: 3.0
    docPositions:
    - 1191
    - 2224
  weighted: !ruby/object:Word
    word: weighted
    stem: weight
    docFrequency: 3.0
    docPositions:
    - 1191
    - 2224
  integral: !ruby/object:Word
    word: integral
    stem: integr
    docFrequency: 5.0
    docPositions:
    - 1192
    - 1202
    - 2225
    - 2231
  deal: !ruby/object:Word
    word: deal
    stem: deal
    docFrequency: 5.0
    docPositions:
    - 1193
    - 1320
    - 2226
    - 2315
  stability: !ruby/object:Word
    word: stability
    stem: stabil
    docFrequency: 5.0
    docPositions:
    - 1193
    - 1221
    - 2226
    - 2246
  drift: !ruby/object:Word
    word: drift
    stem: drift
    docFrequency: 3.0
    docPositions:
    - 1193
    - 2226
  experiments: !ruby/object:Word
    word: experiments
    stem: experi
    docFrequency: 3.0
    docPositions:
    - 1195
    - 2226
  stabilise: !ruby/object:Word
    word: stabilise
    stem: stabilis
    docFrequency: 3.0
    docPositions:
    - 1195
    - 2226
  z: !ruby/object:Word
    word: z
    stem: z
    docFrequency: 5.0
    docPositions:
    - 1196
    - 1200
    - 2227
    - 2231
  transform: !ruby/object:Word
    word: transform
    stem: transform
    docFrequency: 5.0
    docPositions:
    - 1196
    - 1200
    - 2227
    - 2231
  revolutionary: !ruby/object:Word
    word: revolutionary
    stem: revolutionari
    docFrequency: 3.0
    docPositions:
    - 1197
    - 2228
  parameter: !ruby/object:Word
    word: parameter
    stem: paramet
    docFrequency: 3.0
    docPositions:
    - 1198
    - 2229
  filter: !ruby/object:Word
    word: filter
    stem: filter
    docFrequency: 9.0
    docPositions:
    - 1198
    - 1199
    - 1217
    - 1218
    - 2229
    - 2230
    - 2242
    - 2243
  incidentally: !ruby/object:Word
    word: incidentally
    stem: incident
    docFrequency: 3.0
    docPositions:
    - 1198
    - 2229
  pass: !ruby/object:Word
    word: pass
    stem: pass
    docFrequency: 3.0
    docPositions:
    - 1199
    - 2230
  response: !ruby/object:Word
    word: response
    stem: respons
    docFrequency: 5.0
    docPositions:
    - 1199
    - 1282
    - 2230
    - 2290
  methods: !ruby/object:Word
    word: methods
    stem: method
    docFrequency: 5.0
    docPositions:
    - 1200
    - 1238
    - 2231
    - 2259
  summation: !ruby/object:Word
    word: summation
    stem: summat
    docFrequency: 3.0
    docPositions:
    - 1202
    - 2231
  integration: !ruby/object:Word
    word: integration
    stem: integr
    docFrequency: 3.0
    docPositions:
    - 1202
    - 2231
  rate: !ruby/object:Word
    word: rate
    stem: rate
    docFrequency: 11.0
    docPositions:
    - 1204
    - 1210
    - 1211
    - 1226
    - 2233
    - 2239
    - 2240
    - 2249
  sample: !ruby/object:Word
    word: sample
    stem: sampl
    docFrequency: 3.0
    docPositions:
    - 1205
    - 2234
  quantisation: !ruby/object:Word
    word: quantisation
    stem: quantis
    docFrequency: 3.0
    docPositions:
    - 1205
    - 2234
  sources: !ruby/object:Word
    word: sources
    stem: sourc
    docFrequency: 3.0
    docPositions:
    - 1206
    - 2235
  recursive: !ruby/object:Word
    word: recursive
    stem: recurs
    docFrequency: 3.0
    docPositions:
    - 1208
    - 2237
  fraction: !ruby/object:Word
    word: fraction
    stem: fraction
    docFrequency: 5.0
    docPositions:
    - 1209
    - 1210
    - 2238
    - 2239
  k: !ruby/object:Word
    word: k
    stem: k
    docFrequency: 21.0
    docPositions:
    - 1209
    - 1210
    - 1213
    - 1215
    - 1216
    - 1219
    - 1220
    - 2238
    - 2239
    - 2240
    - 2241
    - 2244
    - 2245
  giving: !ruby/object:Word
    word: giving
    stem: give
    docFrequency: 5.0
    docPositions:
    - 1211
    - 1300
    - 2240
    - 2301
  yn: !ruby/object:Word
    word: yn
    stem: yn
    docFrequency: 5.0
    docPositions:
    - 1213
    - 2240
  xn: !ruby/object:Word
    word: xn
    stem: xn
    docFrequency: 5.0
    docPositions:
    - 1213
    - 2240
  reduced: !ruby/object:Word
    word: reduced
    stem: reduc
    docFrequency: 7.0
    docPositions:
    - 1215
    - 1216
    - 1367
    - 2240
    - 2241
    - 2346
  moving: !ruby/object:Word
    word: moving
    stem: move
    docFrequency: 5.0
    docPositions:
    - 1217
    - 1292
    - 2242
    - 2293
  yet: !ruby/object:Word
    word: yet
    stem: yet
    docFrequency: 3.0
    docPositions:
    - 1217
    - 2242
  inserted: !ruby/object:Word
    word: inserted
    stem: insert
    docFrequency: 3.0
    docPositions:
    - 1218
    - 2243
  ln: !ruby/object:Word
    word: ln
    stem: ln
    docFrequency: 3.0
    docPositions:
    - 1219
    - 2244
  affect: !ruby/object:Word
    word: affect
    stem: affect
    docFrequency: 3.0
    docPositions:
    - 1221
    - 2246
  sequentially: !ruby/object:Word
    word: sequentially
    stem: sequenti
    docFrequency: 3.0
    docPositions:
    - 1224
    - 2247
  second: !ruby/object:Word
    word: second
    stem: second
    docFrequency: 5.0
    docPositions:
    - 1224
    - 1230
    - 2247
    - 2253
  half: !ruby/object:Word
    word: half
    stem: half
    docFrequency: 7.0
    docPositions:
    - 1224
    - 1301
    - 1315
    - 2247
    - 2302
    - 2312
  pneumatically: !ruby/object:Word
    word: pneumatically
    stem: pneumat
    docFrequency: 3.0
    docPositions:
    - 1225
    - 2248
  admitted: !ruby/object:Word
    word: admitted
    stem: admit
    docFrequency: 3.0
    docPositions:
    - 1226
    - 2249
  exhausted: !ruby/object:Word
    word: exhausted
    stem: exhaust
    docFrequency: 3.0
    docPositions:
    - 1226
    - 2249
  solenoid: !ruby/object:Word
    word: solenoid
    stem: solenoid
    docFrequency: 3.0
    docPositions:
    - 1226
    - 2249
  positions: !ruby/object:Word
    word: positions
    stem: posit
    docFrequency: 5.0
    docPositions:
    - 1228
    - 1343
    - 2251
    - 2330
  stroke: !ruby/object:Word
    word: stroke
    stem: stroke
    docFrequency: 3.0
    docPositions:
    - 1229
    - 2252
  potentiometer: !ruby/object:Word
    word: potentiometer
    stem: potentiomet
    docFrequency: 3.0
    docPositions:
    - 1229
    - 2252
  dead: !ruby/object:Word
    word: dead
    stem: dead
    docFrequency: 3.0
    docPositions:
    - 1230
    - 2253
  space: !ruby/object:Word
    word: space
    stem: space
    docFrequency: 3.0
    docPositions:
    - 1231
    - 2254
  frequently: !ruby/object:Word
    word: frequently
    stem: frequent
    docFrequency: 3.0
    docPositions:
    - 1232
    - 2255
  isolating: !ruby/object:Word
    word: isolating
    stem: isol
    docFrequency: 3.0
    docPositions:
    - 1234
    - 2255
  fault: !ruby/object:Word
    word: fault
    stem: fault
    docFrequency: 7.0
    docPositions:
    - 1234
    - 1237
    - 1351
    - 2255
    - 2258
    - 2336
  considered: !ruby/object:Word
    word: considered
    stem: consid
    docFrequency: 3.0
    docPositions:
    - 1235
    - 2256
  drastic: !ruby/object:Word
    word: drastic
    stem: drastic
    docFrequency: 3.0
    docPositions:
    - 1235
    - 2256
  certain: !ruby/object:Word
    word: certain
    stem: certain
    docFrequency: 3.0
    docPositions:
    - 1235
    - 2256
  cases: !ruby/object:Word
    word: cases
    stem: case
    docFrequency: 5.0
    docPositions:
    - 1235
    - 1286
    - 2256
    - 2292
  instrumentation: !ruby/object:Word
    word: instrumentation
    stem: instrument
    docFrequency: 3.0
    docPositions:
    - 1236
    - 2257
  improvement: !ruby/object:Word
    word: improvement
    stem: improv
    docFrequency: 3.0
    docPositions:
    - 1236
    - 2257
  affected: !ruby/object:Word
    word: affected
    stem: affect
    docFrequency: 5.0
    docPositions:
    - 1237
    - 1351
    - 2258
    - 2336
  manually: !ruby/object:Word
    word: manually
    stem: manual
    docFrequency: 3.0
    docPositions:
    - 1238
    - 2259
  conventional: !ruby/object:Word
    word: conventional
    stem: convent
    docFrequency: 3.0
    docPositions:
    - 1238
    - 2259
  isolation: !ruby/object:Word
    word: isolation
    stem: isol
    docFrequency: 3.0
    docPositions:
    - 1238
    - 2259
  procedure: !ruby/object:Word
    word: procedure
    stem: procedur
    docFrequency: 3.0
    docPositions:
    - 1238
    - 2259
  faults: !ruby/object:Word
    word: faults
    stem: fault
    docFrequency: 7.0
    docPositions:
    - 1239
    - 1299
    - 1339
    - 2260
    - 2300
    - 2328
  rarely: !ruby/object:Word
    word: rarely
    stem: rare
    docFrequency: 3.0
    docPositions:
    - 1239
    - 2260
  installed: !ruby/object:Word
    word: installed
    stem: instal
    docFrequency: 3.0
    docPositions:
    - 1241
    - 2260
  shut: !ruby/object:Word
    word: shut
    stem: shut
    docFrequency: 3.0
    docPositions:
    - 1242
    - 2261
  winnington: !ruby/object:Word
    word: winnington
    stem: winnington
    docFrequency: 3.0
    docPositions:
    - 1243
    - 2262
  cheshire: !ruby/object:Word
    word: cheshire
    stem: cheshir
    docFrequency: 3.0
    docPositions:
    - 1243
    - 2262
  pioneer: !ruby/object:Word
    word: pioneer
    stem: pioneer
    docFrequency: 3.0
    docPositions:
    - 1250
    - 2265
  died: !ruby/object:Word
    word: died
    stem: di
    docFrequency: 3.0
    docPositions:
    - 1250
    - 2265
  aged: !ruby/object:Word
    word: aged
    stem: ag
    docFrequency: 3.0
    docPositions:
    - 1250
    - 2265
  employed: !ruby/object:Word
    word: employed
    stem: emploi
    docFrequency: 3.0
    docPositions:
    - 1252
    - 2266
  fifties: !ruby/object:Word
    word: fifties
    stem: fifti
    docFrequency: 3.0
    docPositions:
    - 1253
    - 2267
  aerodynamics: !ruby/object:Word
    word: aerodynamics
    stem: aerodynam
    docFrequency: 3.0
    docPositions:
    - 1253
    - 2267
  department: !ruby/object:Word
    word: department
    stem: depart
    docFrequency: 3.0
    docPositions:
    - 1253
    - 2267
  de: !ruby/object:Word
    word: de
    stem: de
    docFrequency: 5.0
    docPositions:
    - 1253
    - 1317
    - 2267
    - 2314
  havilland: !ruby/object:Word
    word: havilland
    stem: havilland
    docFrequency: 3.0
    docPositions:
    - 1253
    - 2267
  learnt: !ruby/object:Word
    word: learnt
    stem: learnt
    docFrequency: 3.0
    docPositions:
    - 1254
    - 2268
  pilot: !ruby/object:Word
    word: pilot
    stem: pilot
    docFrequency: 3.0
    docPositions:
    - 1254
    - 2268
  ace: !ruby/object:Word
    word: ace
    stem: ac
    docFrequency: 3.0
    docPositions:
    - 1255
    - 2269
  recruited: !ruby/object:Word
    word: recruited
    stem: recruit
    docFrequency: 3.0
    docPositions:
    - 1258
    - 2270
  stimulating: !ruby/object:Word
    word: stimulating
    stem: stimul
    docFrequency: 3.0
    docPositions:
    - 1259
    - 2271
  standardised: !ruby/object:Word
    word: standardised
    stem: standardis
    docFrequency: 3.0
    docPositions:
    - 1260
    - 2272
  packages: !ruby/object:Word
    word: packages
    stem: packag
    docFrequency: 15.0
    docPositions:
    - 1260
    - 1342
    - 1348
    - 1355
    - 1359
    - 1360
    - 1364
    - 2272
    - 2329
    - 2333
    - 2338
    - 2342
    - 2343
    - 2345
  responsible: !ruby/object:Word
    word: responsible
    stem: respons
    docFrequency: 7.0
    docPositions:
    - 1260
    - 1263
    - 1269
    - 2272
    - 2275
    - 2279
  perseus: !ruby/object:Word
    word: perseus
    stem: perseu
    docFrequency: 3.0
    docPositions:
    - 1261
    - 2273
  lily: !ruby/object:Word
    word: lily
    stem: lili
    docFrequency: 3.0
    docPositions:
    - 1262
    - 2274
  hill: !ruby/object:Word
    word: hill
    stem: hill
    docFrequency: 3.0
    docPositions:
    - 1262
    - 2274
  laboratories: !ruby/object:Word
    word: laboratories
    stem: laboratori
    docFrequency: 3.0
    docPositions:
    - 1262
    - 2274
  management: !ruby/object:Word
    word: management
    stem: manag
    docFrequency: 5.0
    docPositions:
    - 1263
    - 1271
    - 2275
    - 2281
  contracts: !ruby/object:Word
    word: contracts
    stem: contract
    docFrequency: 3.0
    docPositions:
    - 1264
    - 2276
  orion: !ruby/object:Word
    word: orion
    stem: orion
    docFrequency: 3.0
    docPositions:
    - 1264
    - 2276
  prudential: !ruby/object:Word
    word: prudential
    stem: prudenti
    docFrequency: 3.0
    docPositions:
    - 1265
    - 2277
  atlas: !ruby/object:Word
    word: atlas
    stem: atla
    docFrequency: 3.0
    docPositions:
    - 1265
    - 2277
  takeover: !ruby/object:Word
    word: takeover
    stem: takeov
    docFrequency: 3.0
    docPositions:
    - 1268
    - 2278
  organisation: !ruby/object:Word
    word: organisation
    stem: organis
    docFrequency: 3.0
    docPositions:
    - 1269
    - 2279
  portfolio: !ruby/object:Word
    word: portfolio
    stem: portfolio
    docFrequency: 3.0
    docPositions:
    - 1270
    - 2280
  inspirational: !ruby/object:Word
    word: inspirational
    stem: inspir
    docFrequency: 3.0
    docPositions:
    - 1271
    - 2281
  programmers: !ruby/object:Word
    word: programmers
    stem: programm
    docFrequency: 5.0
    docPositions:
    - 1271
    - 1426
    - 2281
    - 2364
  won: !ruby/object:Word
    word: won
    stem: won
    docFrequency: 3.0
    docPositions:
    - 1272
    - 2282
  queen: !ruby/object:Word
    word: queen
    stem: queen
    docFrequency: 3.0
    docPositions:
    - 1272
    - 2282
  award: !ruby/object:Word
    word: award
    stem: award
    docFrequency: 3.0
    docPositions:
    - 1273
    - 2283
  technical: !ruby/object:Word
    word: technical
    stem: technic
    docFrequency: 3.0
    docPositions:
    - 1273
    - 2283
  innovation: !ruby/object:Word
    word: innovation
    stem: innov
    docFrequency: 3.0
    docPositions:
    - 1273
    - 2283
  managing: !ruby/object:Word
    word: managing
    stem: manag
    docFrequency: 3.0
    docPositions:
    - 1278
    - 2286
  director: !ruby/object:Word
    word: director
    stem: director
    docFrequency: 3.0
    docPositions:
    - 1278
    - 2286
  branch: !ruby/object:Word
    word: branch
    stem: branch
    docFrequency: 3.0
    docPositions:
    - 1278
    - 2286
  leasco: !ruby/object:Word
    word: leasco
    stem: leasco
    docFrequency: 9.0
    docPositions:
    - 1278
    - 1280
    - 1282
    - 1285
    - 2286
    - 2288
    - 2290
    - 2291
  influential: !ruby/object:Word
    word: influential
    stem: influenti
    docFrequency: 3.0
    docPositions:
    - 1279
    - 2287
  houses: !ruby/object:Word
    word: houses
    stem: hous
    docFrequency: 3.0
    docPositions:
    - 1280
    - 2288
  specialised: !ruby/object:Word
    word: specialised
    stem: specialis
    docFrequency: 3.0
    docPositions:
    - 1280
    - 2288
  pioneering: !ruby/object:Word
    word: pioneering
    stem: pioneer
    docFrequency: 3.0
    docPositions:
    - 1281
    - 2289
  developments: !ruby/object:Word
    word: developments
    stem: develop
    docFrequency: 3.0
    docPositions:
    - 1281
    - 2289
  sister: !ruby/object:Word
    word: sister
    stem: sister
    docFrequency: 3.0
    docPositions:
    - 1282
    - 2290
  timesharing: !ruby/object:Word
    word: timesharing
    stem: timeshar
    docFrequency: 3.0
    docPositions:
    - 1283
    - 2291
  bureau: !ruby/object:Word
    word: bureau
    stem: bureau
    docFrequency: 3.0
    docPositions:
    - 1283
    - 2291
  independent: !ruby/object:Word
    word: independent
    stem: independ
    docFrequency: 3.0
    docPositions:
    - 1285
    - 2291
  consultant: !ruby/object:Word
    word: consultant
    stem: consult
    docFrequency: 3.0
    docPositions:
    - 1285
    - 2291
  expert: !ruby/object:Word
    word: expert
    stem: expert
    docFrequency: 3.0
    docPositions:
    - 1286
    - 2292
  witness: !ruby/object:Word
    word: witness
    stem: wit
    docFrequency: 3.0
    docPositions:
    - 1286
    - 2292
  legal: !ruby/object:Word
    word: legal
    stem: legal
    docFrequency: 3.0
    docPositions:
    - 1286
    - 2292
  machinechris: !ruby/object:Word
    word: machinechris
    stem: machinechri
    docFrequency: 3.0
    docPositions:
    - 1290
    - 2293
  continued: !ruby/object:Word
    word: continued
    stem: continu
    docFrequency: 5.0
    docPositions:
    - 1293
    - 1337
    - 2294
    - 2326
  authentic: !ruby/object:Word
    word: authentic
    stem: authent
    docFrequency: 3.0
    docPositions:
    - 1294
    - 2295
  stabilised: !ruby/object:Word
    word: stabilised
    stem: stabilis
    docFrequency: 3.0
    docPositions:
    - 1295
    - 2296
  eht: !ruby/object:Word
    word: eht
    stem: eht
    docFrequency: 3.0
    docPositions:
    - 1295
    - 2296
  cosmetic: !ruby/object:Word
    word: cosmetic
    stem: cosmet
    docFrequency: 3.0
    docPositions:
    - 1295
    - 2296
  improvements: !ruby/object:Word
    word: improvements
    stem: improv
    docFrequency: 3.0
    docPositions:
    - 1296
    - 2297
  signwriting: !ruby/object:Word
    word: signwriting
    stem: signwrit
    docFrequency: 3.0
    docPositions:
    - 1296
    - 2297
  remote: !ruby/object:Word
    word: remote
    stem: remot
    docFrequency: 3.0
    docPositions:
    - 1296
    - 2297
  barrier: !ruby/object:Word
    word: barrier
    stem: barrier
    docFrequency: 3.0
    docPositions:
    - 1297
    - 2298
  separating: !ruby/object:Word
    word: separating
    stem: separ
    docFrequency: 3.0
    docPositions:
    - 1297
    - 2298
  public: !ruby/object:Word
    word: public
    stem: public
    docFrequency: 5.0
    docPositions:
    - 1297
    - 1323
    - 2298
    - 2318
  comparator: !ruby/object:Word
    word: comparator
    stem: compar
    docFrequency: 3.0
    docPositions:
    - 1298
    - 2299
  transient: !ruby/object:Word
    word: transient
    stem: transient
    docFrequency: 3.0
    docPositions:
    - 1299
    - 2300
  helped: !ruby/object:Word
    word: helped
    stem: help
    docFrequency: 3.0
    docPositions:
    - 1299
    - 2300
  optimise: !ruby/object:Word
    word: optimise
    stem: optimis
    docFrequency: 3.0
    docPositions:
    - 1299
    - 2300
  setting: !ruby/object:Word
    word: setting
    stem: set
    docFrequency: 3.0
    docPositions:
    - 1300
    - 2301
  reasonably: !ruby/object:Word
    word: reasonably
    stem: reason
    docFrequency: 3.0
    docPositions:
    - 1300
    - 2301
  hour: !ruby/object:Word
    word: hour
    stem: hour
    docFrequency: 3.0
    docPositions:
    - 1301
    - 2302
  intense: !ruby/object:Word
    word: intense
    stem: intens
    docFrequency: 3.0
    docPositions:
    - 1303
    - 2302
  galleries: !ruby/object:Word
    word: galleries
    stem: galleri
    docFrequency: 3.0
    docPositions:
    - 1304
    - 2303
  supporting: !ruby/object:Word
    word: supporting
    stem: support
    docFrequency: 5.0
    docPositions:
    - 1304
    - 1464
    - 2303
    - 2378
  material: !ruby/object:Word
    word: material
    stem: materi
    docFrequency: 5.0
    docPositions:
    - 1304
    - 1329
    - 2303
    - 2322
  official: !ruby/object:Word
    word: official
    stem: offici
    docFrequency: 3.0
    docPositions:
    - 1305
    - 2304
  satellite: !ruby/object:Word
    word: satellite
    stem: satellit
    docFrequency: 3.0
    docPositions:
    - 1305
    - 2304
  video: !ruby/object:Word
    word: video
    stem: video
    docFrequency: 3.0
    docPositions:
    - 1305
    - 2304
  mssage: !ruby/object:Word
    word: mssage
    stem: mssage
    docFrequency: 3.0
    docPositions:
    - 1306
    - 2305
  hello: !ruby/object:Word
    word: hello
    stem: hello
    docFrequency: 3.0
    docPositions:
    - 1306
    - 2305
  badly: !ruby/object:Word
    word: badly
    stem: badli
    docFrequency: 3.0
    docPositions:
    - 1309
    - 2306
  deteriorated: !ruby/object:Word
    word: deteriorated
    stem: deterior
    docFrequency: 3.0
    docPositions:
    - 1309
    - 2306
  correctly: !ruby/object:Word
    word: correctly
    stem: correctli
    docFrequency: 3.0
    docPositions:
    - 1310
    - 2307
  intensive: !ruby/object:Word
    word: intensive
    stem: intens
    docFrequency: 3.0
    docPositions:
    - 1310
    - 2307
  identify: !ruby/object:Word
    word: identify
    stem: identifi
    docFrequency: 4.0
    docPositions:
    - 1310
    - 1451
    - 2307
  declare: !ruby/object:Word
    word: declare
    stem: declar
    docFrequency: 3.0
    docPositions:
    - 1313
    - 2310
  bypassed: !ruby/object:Word
    word: bypassed
    stem: bypass
    docFrequency: 3.0
    docPositions:
    - 1313
    - 2310
  safekeeping: !ruby/object:Word
    word: safekeeping
    stem: safekeep
    docFrequency: 3.0
    docPositions:
    - 1314
    - 2311
  century: !ruby/object:Word
    word: century
    stem: centuri
    docFrequency: 3.0
    docPositions:
    - 1315
    - 2312
  thereby: !ruby/object:Word
    word: thereby
    stem: therebi
    docFrequency: 3.0
    docPositions:
    - 1316
    - 2313
  met: !ruby/object:Word
    word: met
    stem: met
    docFrequency: 3.0
    docPositions:
    - 1316
    - 2313
  goal: !ruby/object:Word
    word: goal
    stem: goal
    docFrequency: 3.0
    docPositions:
    - 1316
    - 2313
  spirit: !ruby/object:Word
    word: spirit
    stem: spirit
    docFrequency: 3.0
    docPositions:
    - 1316
    - 2313
  afternoon: !ruby/object:Word
    word: afternoon
    stem: afternoon
    docFrequency: 3.0
    docPositions:
    - 1316
    - 2313
  sebastian: !ruby/object:Word
    word: sebastian
    stem: sebastian
    docFrequency: 3.0
    docPositions:
    - 1317
    - 2314
  awards: !ruby/object:Word
    word: awards
    stem: award
    docFrequency: 3.0
    docPositions:
    - 1317
    - 2314
  winners: !ruby/object:Word
    word: winners
    stem: winner
    docFrequency: 3.0
    docPositions:
    - 1317
    - 2314
  competition: !ruby/object:Word
    word: competition
    stem: competit
    docFrequency: 3.0
    docPositions:
    - 1318
    - 2315
  finish: !ruby/object:Word
    word: finish
    stem: finish
    docFrequency: 3.0
    docPositions:
    - 1321
    - 2316
  fix: !ruby/object:Word
    word: fix
    stem: fix
    docFrequency: 3.0
    docPositions:
    - 1322
    - 2317
  maintaining: !ruby/object:Word
    word: maintaining
    stem: maintain
    docFrequency: 3.0
    docPositions:
    - 1322
    - 2317
  demonstrating: !ruby/object:Word
    word: demonstrating
    stem: demonstr
    docFrequency: 3.0
    docPositions:
    - 1323
    - 2318
  feeling: !ruby/object:Word
    word: feeling
    stem: feel
    docFrequency: 3.0
    docPositions:
    - 1323
    - 2318
  stunning: !ruby/object:Word
    word: stunning
    stem: stun
    docFrequency: 3.0
    docPositions:
    - 1326
    - 2319
  charlie: !ruby/object:Word
    word: charlie
    stem: charli
    docFrequency: 3.0
    docPositions:
    - 1326
    - 2319
  portman: !ruby/object:Word
    word: portman
    stem: portman
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  ken: !ruby/object:Word
    word: ken
    stem: ken
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  turner: !ruby/object:Word
    word: turner
    stem: turner
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  keith: !ruby/object:Word
    word: keith
    stem: keith
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  wood: !ruby/object:Word
    word: wood
    stem: wood
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  george: !ruby/object:Word
    word: george
    stem: georg
    docFrequency: 7.0
    docPositions:
    - 1327
    - 1436
    - 1441
    - 2320
    - 2366
    - 2367
  roylance: !ruby/object:Word
    word: roylance
    stem: roylanc
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  bill: !ruby/object:Word
    word: bill
    stem: bill
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  purvis: !ruby/object:Word
    word: purvis
    stem: purvi
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  cornforth: !ruby/object:Word
    word: cornforth
    stem: cornforth
    docFrequency: 3.0
    docPositions:
    - 1327
    - 2320
  suzanne: !ruby/object:Word
    word: suzanne
    stem: suzann
    docFrequency: 3.0
    docPositions:
    - 1328
    - 2321
  walker: !ruby/object:Word
    word: walker
    stem: walker
    docFrequency: 3.0
    docPositions:
    - 1328
    - 2321
  collectively: !ruby/object:Word
    word: collectively
    stem: collect
    docFrequency: 3.0
    docPositions:
    - 1328
    - 2321
  voluntary: !ruby/object:Word
    word: voluntary
    stem: voluntari
    docFrequency: 3.0
    docPositions:
    - 1329
    - 2322
  effort: !ruby/object:Word
    word: effort
    stem: effort
    docFrequency: 3.0
    docPositions:
    - 1329
    - 2322
  credit: !ruby/object:Word
    word: credit
    stem: credit
    docFrequency: 3.0
    docPositions:
    - 1329
    - 2322
  supportive: !ruby/object:Word
    word: supportive
    stem: support
    docFrequency: 3.0
    docPositions:
    - 1330
    - 2323
  worth: !ruby/object:Word
    word: worth
    stem: worth
    docFrequency: 3.0
    docPositions:
    - 1331
    - 2324
  numerous: !ruby/object:Word
    word: numerous
    stem: numer
    docFrequency: 3.0
    docPositions:
    - 1332
    - 2325
  individuals: !ruby/object:Word
    word: individuals
    stem: individu
    docFrequency: 3.0
    docPositions:
    - 1332
    - 2325
  partylen: !ruby/object:Word
    word: partylen
    stem: partylen
    docFrequency: 3.0
    docPositions:
    - 1334
    - 2325
  hewitt: !ruby/object:Word
    word: hewitt
    stem: hewitt
    docFrequency: 4.0
    docPositions:
    - 1334
    - 1441
    - 2367
  fortnightly: !ruby/object:Word
    word: fortnightly
    stem: fortnightli
    docFrequency: 5.0
    docPositions:
    - 1337
    - 1419
    - 2326
    - 2361
  intervals: !ruby/object:Word
    word: intervals
    stem: interv
    docFrequency: 3.0
    docPositions:
    - 1337
    - 2326
  setbacks: !ruby/object:Word
    word: setbacks
    stem: setback
    docFrequency: 3.0
    docPositions:
    - 1338
    - 2327
  consistently: !ruby/object:Word
    word: consistently
    stem: consist
    docFrequency: 3.0
    docPositions:
    - 1338
    - 2327
  intermittent: !ruby/object:Word
    word: intermittent
    stem: intermitt
    docFrequency: 3.0
    docPositions:
    - 1339
    - 2328
  plagued: !ruby/object:Word
    word: plagued
    stem: plagu
    docFrequency: 3.0
    docPositions:
    - 1339
    - 2328
  recommended: !ruby/object:Word
    word: recommended
    stem: recommend
    docFrequency: 3.0
    docPositions:
    - 1343
    - 2330
  usa: !ruby/object:Word
    word: usa
    stem: usa
    docFrequency: 3.0
    docPositions:
    - 1343
    - 2330
  middle: !ruby/object:Word
    word: middle
    stem: middl
    docFrequency: 3.0
    docPositions:
    - 1344
    - 2331
  disaster: !ruby/object:Word
    word: disaster
    stem: disast
    docFrequency: 3.0
    docPositions:
    - 1345
    - 2332
  package: !ruby/object:Word
    word: package
    stem: packag
    docFrequency: 7.0
    docPositions:
    - 1347
    - 1350
    - 1352
    - 2332
    - 2335
    - 2337
  ht: !ruby/object:Word
    word: ht
    stem: ht
    docFrequency: 3.0
    docPositions:
    - 1348
    - 2333
  removing: !ruby/object:Word
    word: removing
    stem: remov
    docFrequency: 3.0
    docPositions:
    - 1348
    - 2333
  forgotten: !ruby/object:Word
    word: forgotten
    stem: forgotten
    docFrequency: 3.0
    docPositions:
    - 1349
    - 2334
  dissipated: !ruby/object:Word
    word: dissipated
    stem: dissip
    docFrequency: 3.0
    docPositions:
    - 1350
    - 2335
  resolve: !ruby/object:Word
    word: resolve
    stem: resolv
    docFrequency: 3.0
    docPositions:
    - 1351
    - 2336
  multiple: !ruby/object:Word
    word: multiple
    stem: multipl
    docFrequency: 3.0
    docPositions:
    - 1351
    - 2336
  arose: !ruby/object:Word
    word: arose
    stem: aros
    docFrequency: 3.0
    docPositions:
    - 1352
    - 2337
  friday: !ruby/object:Word
    word: friday
    stem: fridai
    docFrequency: 3.0
    docPositions:
    - 1352
    - 2337
  coincidence: !ruby/object:Word
    word: coincidence
    stem: coincid
    docFrequency: 3.0
    docPositions:
    - 1353
    - 2338
  surface: !ruby/object:Word
    word: surface
    stem: surfac
    docFrequency: 5.0
    docPositions:
    - 1357
    - 1360
    - 2340
    - 2343
  swap: !ruby/object:Word
    word: swap
    stem: swap
    docFrequency: 3.0
    docPositions:
    - 1357
    - 2340
  connections: !ruby/object:Word
    word: connections
    stem: connect
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2341
  covers: !ruby/object:Word
    word: covers
    stem: cover
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2341
  sort: !ruby/object:Word
    word: sort
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2341
  swapping: !ruby/object:Word
    word: swapping
    stem: swap
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2341
  establish: !ruby/object:Word
    word: establish
    stem: establish
    docFrequency: 3.0
    docPositions:
    - 1360
    - 2343
  experiencing: !ruby/object:Word
    word: experiencing
    stem: experienc
    docFrequency: 3.0
    docPositions:
    - 1362
    - 2343
  occasional: !ruby/object:Word
    word: occasional
    stem: occasion
    docFrequency: 3.0
    docPositions:
    - 1363
    - 2344
  task: !ruby/object:Word
    word: task
    stem: task
    docFrequency: 3.0
    docPositions:
    - 1366
    - 2345
  marginal: !ruby/object:Word
    word: marginal
    stem: margin
    docFrequency: 3.0
    docPositions:
    - 1366
    - 2345
  advised: !ruby/object:Word
    word: advised
    stem: advis
    docFrequency: 3.0
    docPositions:
    - 1367
    - 2346
  gallery: !ruby/object:Word
    word: gallery
    stem: galleri
    docFrequency: 3.0
    docPositions:
    - 1368
    - 2347
  heartening: !ruby/object:Word
    word: heartening
    stem: hearten
    docFrequency: 3.0
    docPositions:
    - 1369
    - 2348
  thank: !ruby/object:Word
    word: thank
    stem: thank
    docFrequency: 3.0
    docPositions:
    - 1371
    - 2348
  derek: !ruby/object:Word
    word: derek
    stem: derek
    docFrequency: 3.0
    docPositions:
    - 1371
    - 2348
  milledge: !ruby/object:Word
    word: milledge
    stem: milledg
    docFrequency: 3.0
    docPositions:
    - 1371
    - 2348
  martin: !ruby/object:Word
    word: martin
    stem: martin
    docFrequency: 5.0
    docPositions:
    - 1371
    - 1441
    - 2348
    - 2367
  wingstedt: !ruby/object:Word
    word: wingstedt
    stem: wingstedt
    docFrequency: 3.0
    docPositions:
    - 1372
    - 2349
  holland: !ruby/object:Word
    word: holland
    stem: holland
    docFrequency: 3.0
    docPositions:
    - 1372
    - 2349
  discuss: !ruby/object:Word
    word: discuss
    stem: discuss
    docFrequency: 3.0
    docPositions:
    - 1373
    - 2350
  fully: !ruby/object:Word
    word: fully
    stem: fulli
    docFrequency: 3.0
    docPositions:
    - 1373
    - 2350
  occupied: !ruby/object:Word
    word: occupied
    stem: occupi
    docFrequency: 3.0
    docPositions:
    - 1373
    - 2350
  rebuild: !ruby/object:Word
    word: rebuild
    stem: rebuild
    docFrequency: 4.0
    docPositions:
    - 1374
    - 1387
    - 2351
  simulators: !ruby/object:Word
    word: simulators
    stem: simul
    docFrequency: 6.0
    docPositions:
    - 1376
    - 1377
    - 1391
    - 2351
    - 2355
  zebra: !ruby/object:Word
    word: zebra
    stem: zebra
    docFrequency: 3.0
    docPositions:
    - 1378
    - 2352
  site: !ruby/object:Word
    word: site
    stem: site
    docFrequency: 7.0
    docPositions:
    - 1379
    - 1382
    - 1384
    - 1386
    - 2353
  nextftp: !ruby/object:Word
    word: nextftp
    stem: nextftp
    docFrequency: 2.0
    docPositions:
    - 1381
  wide: !ruby/object:Word
    word: wide
    stem: wide
    docFrequency: 3.0
    docPositions:
    - 1382
    - 2353
  located: !ruby/object:Word
    word: located
    stem: locat
    docFrequency: 3.0
    docPositions:
    - 1382
    - 2353
  cs: !ruby/object:Word
    word: cs
    stem: cs
    docFrequency: 4.0
    docPositions:
    - 1383
    - 1385
    - 1403
  man: !ruby/object:Word
    word: man
    stem: man
    docFrequency: 5.0
    docPositions:
    - 1383
    - 1385
    - 1403
    - 1409
  ac: !ruby/object:Word
    word: ac
    stem: ac
    docFrequency: 8.0
    docPositions:
    - 1383
    - 1385
    - 1400
    - 1403
    - 1406
    - 1409
    - 1412
  pub: !ruby/object:Word
    word: pub
    stem: pub
    docFrequency: 2.0
    docPositions:
    - 1385
  archive: !ruby/object:Word
    word: archive
    stem: archiv
    docFrequency: 6.0
    docPositions:
    - 1385
    - 1389
    - 1407
    - 1412
    - 2353
  include: !ruby/object:Word
    word: include
    stem: includ
    docFrequency: 2.0
    docPositions:
    - 1386
  papers: !ruby/object:Word
    word: papers
    stem: paper
    docFrequency: 2.0
    docPositions:
    - 1387
  downloading: !ruby/object:Word
    word: downloading
    stem: download
    docFrequency: 3.0
    docPositions:
    - 1389
    - 2353
  files: !ruby/object:Word
    word: files
    stem: file
    docFrequency: 3.0
    docPositions:
    - 1390
    - 2354
  bodies: !ruby/object:Word
    word: bodies
    stem: bodi
    docFrequency: 3.0
    docPositions:
    - 1393
    - 2356
  universal: !ruby/object:Word
    word: universal
    stem: univers
    docFrequency: 3.0
    docPositions:
    - 1395
    - 2358
  locators: !ruby/object:Word
    word: locators
    stem: locat
    docFrequency: 3.0
    docPositions:
    - 1395
    - 2358
  contains: !ruby/object:Word
    word: contains
    stem: contain
    docFrequency: 4.0
    docPositions:
    - 1398
    - 1416
    - 2361
  colossus: !ruby/object:Word
    word: colossus
    stem: colossu
    docFrequency: 4.0
    docPositions:
    - 1398
    - 1422
    - 2364
  cranfield: !ruby/object:Word
    word: cranfield
    stem: cranfield
    docFrequency: 2.0
    docPositions:
    - 1400
  ccc: !ruby/object:Word
    word: ccc
    stem: ccc
    docFrequency: 2.0
    docPositions:
    - 1400
  bpark: !ruby/object:Word
    word: bpark
    stem: bpark
    docFrequency: 2.0
    docPositions:
    - 1400
  nmsi: !ruby/object:Word
    word: nmsi
    stem: nmsi
    docFrequency: 2.0
    docPositions:
    - 1406
  national: !ruby/object:Word
    word: national
    stem: nation
    docFrequency: 2.0
    docPositions:
    - 1407
  science_engineering: !ruby/object:Word
    word: science_engineering
    stem: science_engin
    docFrequency: 2.0
    docPositions:
    - 1409
  chstm: !ruby/object:Word
    word: chstm
    stem: chstm
    docFrequency: 2.0
    docPositions:
    - 1409
  nahc: !ruby/object:Word
    word: nahc
    stem: nahc
    docFrequency: 2.0
    docPositions:
    - 1409
  htm: !ruby/object:Word
    word: htm
    stem: htm
    docFrequency: 2.0
    docPositions:
    - 1409
  virtual: !ruby/object:Word
    word: virtual
    stem: virtual
    docFrequency: 2.0
    docPositions:
    - 1410
  rich: !ruby/object:Word
    word: rich
    stem: rich
    docFrequency: 2.0
    docPositions:
    - 1410
  comlab: !ruby/object:Word
    word: comlab
    stem: comlab
    docFrequency: 2.0
    docPositions:
    - 1412
  ox: !ruby/object:Word
    word: ox
    stem: ox
    docFrequency: 2.0
    docPositions:
    - 1412
  museums: !ruby/object:Word
    word: museums
    stem: museum
    docFrequency: 2.0
    docPositions:
    - 1412
  html: !ruby/object:Word
    word: html
    stem: html
    docFrequency: 2.0
    docPositions:
    - 1412
  wish: !ruby/object:Word
    word: wish
    stem: wish
    docFrequency: 3.0
    docPositions:
    - 1413
    - 2360
  email: !ruby/object:Word
    word: email
    stem: email
    docFrequency: 3.0
    docPositions:
    - 1416
    - 2361
  nextforthcoming: !ruby/object:Word
    word: nextforthcoming
    stem: nextforthcom
    docFrequency: 2.0
    docPositions:
    - 1418
  september: !ruby/object:Word
    word: september
    stem: septemb
    docFrequency: 7.0
    docPositions:
    - 1419
    - 1424
    - 1447
    - 2361
    - 2364
    - 2370
  thereafter: !ruby/object:Word
    word: thereafter
    stem: thereaft
    docFrequency: 3.0
    docPositions:
    - 1419
    - 2361
  guided: !ruby/object:Word
    word: guided
    stem: guid
    docFrequency: 3.0
    docPositions:
    - 1419
    - 2361
  tours: !ruby/object:Word
    word: tours
    stem: tour
    docFrequency: 5.0
    docPositions:
    - 1419
    - 1422
    - 2361
    - 2364
  concessionsexhibition: !ruby/object:Word
    word: concessionsexhibition
    stem: concessionsexhibit
    docFrequency: 3.0
    docPositions:
    - 1421
    - 2363
  breaking: !ruby/object:Word
    word: breaking
    stem: break
    docFrequency: 3.0
    docPositions:
    - 1421
    - 2363
  buildings: !ruby/object:Word
    word: buildings
    stem: build
    docFrequency: 2.0
    docPositions:
    - 1422
  ncc: !ruby/object:Word
    word: ncc
    stem: ncc
    docFrequency: 3.0
    docPositions:
    - 1424
    - 2364
  freelance: !ruby/object:Word
    word: freelance
    stem: freelanc
    docFrequency: 3.0
    docPositions:
    - 1426
    - 2364
  plc: !ruby/object:Word
    word: plc
    stem: plc
    docFrequency: 3.0
    docPositions:
    - 1426
    - 2364
  distributed: !ruby/object:Word
    word: distributed
    stem: distribut
    docFrequency: 4.0
    docPositions:
    - 1428
    - 1467
    - 2364
  processor: !ruby/object:Word
    word: processor
    stem: processor
    docFrequency: 3.0
    docPositions:
    - 1428
    - 2364
  room: !ruby/object:Word
    word: room
    stem: room
    docFrequency: 3.0
    docPositions:
    - 1430
    - 2364
  refer: !ruby/object:Word
    word: refer
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 1433
    - 2365
  insert: !ruby/object:Word
    word: insert
    stem: insert
    docFrequency: 3.0
    docPositions:
    - 1433
    - 2365
  enclosed: !ruby/object:Word
    word: enclosed
    stem: enclos
    docFrequency: 3.0
    docPositions:
    - 1433
    - 2365
  queries: !ruby/object:Word
    word: queries
    stem: queri
    docFrequency: 3.0
    docPositions:
    - 1436
    - 2366
  davis: !ruby/object:Word
    word: davis
    stem: davi
    docFrequency: 5.0
    docPositions:
    - 1436
    - 1441
    - 2366
    - 2367
  william: !ruby/object:Word
    word: william
    stem: william
    docFrequency: 3.0
    docPositions:
    - 1437
    - 2367
  gunn: !ruby/object:Word
    word: gunn
    stem: gunn
    docFrequency: 3.0
    docPositions:
    - 1437
    - 2367
  nextcommittee: !ruby/object:Word
    word: nextcommittee
    stem: nextcommitte
    docFrequency: 2.0
    docPositions:
    - 1439
  carries: !ruby/object:Word
    word: carries
    stem: carri
    docFrequency: 3.0
    docPositions:
    - 1440
    - 2367
  cbe: !ruby/object:Word
    word: cbe
    stem: cbe
    docFrequency: 5.0
    docPositions:
    - 1441
    - 2367
  fbcsvice: !ruby/object:Word
    word: fbcsvice
    stem: fbcsvice
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcssecretary: !ruby/object:Word
    word: fbcssecretary
    stem: fbcssecretari
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  hamish: !ruby/object:Word
    word: hamish
    stem: hamish
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  carmichael: !ruby/object:Word
    word: carmichael
    stem: carmichael
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcstreasurer: !ruby/object:Word
    word: fbcstreasurer
    stem: fbcstreasur
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  dan: !ruby/object:Word
    word: dan
    stem: dan
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  haytonscience: !ruby/object:Word
    word: haytonscience
    stem: haytonsci
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  doron: !ruby/object:Word
    word: doron
    stem: doron
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  swade: !ruby/object:Word
    word: swade
    stem: swade
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  ceng: !ruby/object:Word
    word: ceng
    stem: ceng
    docFrequency: 11.0
    docPositions:
    - 1441
    - 2367
  mbcschairman: !ruby/object:Word
    word: mbcschairman
    stem: mbcschairman
    docFrequency: 9.0
    docPositions:
    - 1441
    - 2367
  sinclairchairman: !ruby/object:Word
    word: sinclairchairman
    stem: sinclairchairman
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fiee: !ruby/object:Word
    word: fiee
    stem: fiee
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcsacting: !ruby/object:Word
    word: fbcsacting
    stem: fbcsact
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  len: !ruby/object:Word
    word: len
    stem: len
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  dr: !ruby/object:Word
    word: dr
    stem: dr
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  miee: !ruby/object:Word
    word: miee
    stem: miee
    docFrequency: 5.0
    docPositions:
    - 1441
    - 2367
  robin: !ruby/object:Word
    word: robin
    stem: robin
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  shirleychairman: !ruby/object:Word
    word: shirleychairman
    stem: shirleychairman
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  harper: !ruby/object:Word
    word: harper
    stem: harper
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  frank: !ruby/object:Word
    word: frank
    stem: frank
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  sumner: !ruby/object:Word
    word: sumner
    stem: sumner
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcsmeetings: !ruby/object:Word
    word: fbcsmeetings
    stem: fbcsmeet
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcseditor: !ruby/object:Word
    word: fbcseditor
    stem: fbcseditor
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  enticknaparchivist: !ruby/object:Word
    word: enticknaparchivist
    stem: enticknaparchivist
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  harold: !ruby/object:Word
    word: harold
    stem: harold
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  gearing: !ruby/object:Word
    word: gearing
    stem: gear
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcsdr: !ruby/object:Word
    word: fbcsdr
    stem: fbcsdr
    docFrequency: 5.0
    docPositions:
    - 1441
    - 2367
  campbell: !ruby/object:Word
    word: campbell
    stem: campbel
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  kellyprofessor: !ruby/object:Word
    word: kellyprofessor
    stem: kellyprofessor
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  sandy: !ruby/object:Word
    word: sandy
    stem: sandi
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  douglas: !ruby/object:Word
    word: douglas
    stem: dougla
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  johnson: !ruby/object:Word
    word: johnson
    stem: johnson
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcsgraham: !ruby/object:Word
    word: fbcsgraham
    stem: fbcsgraham
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  morris: !ruby/object:Word
    word: morris
    stem: morri
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcsjohn: !ruby/object:Word
    word: fbcsjohn
    stem: fbcsjohn
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  southall: !ruby/object:Word
    word: southall
    stem: southal
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcsewart: !ruby/object:Word
    word: fbcsewart
    stem: fbcsewart
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  willey: !ruby/object:Word
    word: willey
    stem: willei
    docFrequency: 3.0
    docPositions:
    - 1441
    - 2367
  fbcs: !ruby/object:Word
    word: fbcs
    stem: fbc
    docFrequency: 2.0
    docPositions:
    - 1441
  articleaims: !ruby/object:Word
    word: articleaims
    stem: articleaim
    docFrequency: 2.0
    docPositions:
    - 1443
  operative: !ruby/object:Word
    word: operative
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 1444
    - 2367
  british: !ruby/object:Word
    word: british
    stem: british
    docFrequency: 6.0
    docPositions:
    - 1445
    - 1448
    - 1471
    - 2368
    - 2371
  constituted: !ruby/object:Word
    word: constituted
    stem: constitut
    docFrequency: 3.0
    docPositions:
    - 1447
    - 2370
  specialist: !ruby/object:Word
    word: specialist
    stem: specialist
    docFrequency: 3.0
    docPositions:
    - 1447
    - 2370
  bcs: !ruby/object:Word
    word: bcs
    stem: bc
    docFrequency: 7.0
    docPositions:
    - 1448
    - 1449
    - 1457
    - 2371
    - 2372
    - 2373
  charter: !ruby/object:Word
    word: charter
    stem: charter
    docFrequency: 3.0
    docPositions:
    - 1449
    - 2372
  charitable: !ruby/object:Word
    word: charitable
    stem: charit
    docFrequency: 3.0
    docPositions:
    - 1449
    - 2372
  status: !ruby/object:Word
    word: status
    stem: statu
    docFrequency: 3.0
    docPositions:
    - 1449
    - 2372
  promote: !ruby/object:Word
    word: promote
    stem: promot
    docFrequency: 2.0
    docPositions:
    - 1451
  archived: !ruby/object:Word
    word: archived
    stem: archiv
    docFrequency: 2.0
    docPositions:
    - 1452
  future: !ruby/object:Word
    word: future
    stem: futur
    docFrequency: 2.0
    docPositions:
    - 1452
  awareness: !ruby/object:Word
    word: awareness
    stem: awar
    docFrequency: 2.0
    docPositions:
    - 1453
  importance: !ruby/object:Word
    word: importance
    stem: import
    docFrequency: 2.0
    docPositions:
    - 1453
  encourage: !ruby/object:Word
    word: encourage
    stem: encourag
    docFrequency: 2.0
    docPositions:
    - 1454
  impact: !ruby/object:Word
    word: impact
    stem: impact
    docFrequency: 2.0
    docPositions:
    - 1454
  membership: !ruby/object:Word
    word: membership
    stem: membership
    docFrequency: 6.0
    docPositions:
    - 1455
    - 1458
    - 1459
    - 2374
    - 2375
  anyone: !ruby/object:Word
    word: anyone
    stem: anyon
    docFrequency: 3.0
    docPositions:
    - 1455
    - 2372
  funded: !ruby/object:Word
    word: funded
    stem: fund
    docFrequency: 3.0
    docPositions:
    - 1457
    - 2373
  supported: !ruby/object:Word
    word: supported
    stem: support
    docFrequency: 3.0
    docPositions:
    - 1457
    - 2373
  grant: !ruby/object:Word
    word: grant
    stem: grant
    docFrequency: 3.0
    docPositions:
    - 1457
    - 2373
  fees: !ruby/object:Word
    word: fees
    stem: fee
    docFrequency: 3.0
    docPositions:
    - 1457
    - 2373
  corporate: !ruby/object:Word
    word: corporate
    stem: corpor
    docFrequency: 5.0
    docPositions:
    - 1458
    - 1464
    - 2374
    - 2378
  donations: !ruby/object:Word
    word: donations
    stem: donat
    docFrequency: 3.0
    docPositions:
    - 1458
    - 2374
  facilities: !ruby/object:Word
    word: facilities
    stem: facil
    docFrequency: 3.0
    docPositions:
    - 1459
    - 2375
  charges: !ruby/object:Word
    word: charges
    stem: charg
    docFrequency: 3.0
    docPositions:
    - 1459
    - 2375
  publications: !ruby/object:Word
    word: publications
    stem: public
    docFrequency: 3.0
    docPositions:
    - 1460
    - 2376
  attendance: !ruby/object:Word
    word: attendance
    stem: attend
    docFrequency: 3.0
    docPositions:
    - 1460
    - 2376
  seminars: !ruby/object:Word
    word: seminars
    stem: seminar
    docFrequency: 3.0
    docPositions:
    - 1460
    - 2376
  conferences: !ruby/object:Word
    word: conferences
    stem: confer
    docFrequency: 3.0
    docPositions:
    - 1460
    - 2376
  active: !ruby/object:Word
    word: active
    stem: activ
    docFrequency: 3.0
    docPositions:
    - 1461
    - 2376
  parties: !ruby/object:Word
    word: parties
    stem: parti
    docFrequency: 3.0
    docPositions:
    - 1461
    - 2376
  specific: !ruby/object:Word
    word: specific
    stem: specif
    docFrequency: 3.0
    docPositions:
    - 1461
    - 2376
  restorations: !ruby/object:Word
    word: restorations
    stem: restor
    docFrequency: 3.0
    docPositions:
    - 1462
    - 2377
  technologies: !ruby/object:Word
    word: technologies
    stem: technolog
    docFrequency: 3.0
    docPositions:
    - 1462
    - 2377
  younger: !ruby/object:Word
    word: younger
    stem: younger
    docFrequency: 3.0
    docPositions:
    - 1462
    - 2377
  especially: !ruby/object:Word
    word: especially
    stem: especi
    docFrequency: 3.0
    docPositions:
    - 1463
    - 2378
  encouraged: !ruby/object:Word
    word: encouraged
    stem: encourag
    docFrequency: 3.0
    docPositions:
    - 1463
    - 2378
  skills: !ruby/object:Word
    word: skills
    stem: skill
    docFrequency: 3.0
    docPositions:
    - 1463
    - 2378
  vaughan: !ruby/object:Word
    word: vaughan
    stem: vaughan
    docFrequency: 3.0
    docPositions:
    - 1464
    - 2378
  subscription: !ruby/object:Word
    word: subscription
    stem: subscript
    docFrequency: 2.0
    docPositions:
    - 1469
  typesetting: !ruby/object:Word
    word: typesetting
    stem: typeset
    docFrequency: 3.0
    docPositions:
    - 1470
  saleprinted: !ruby/object:Word
    word: saleprinted
    stem: saleprint
    docFrequency: 2.0
    docPositions:
    - 1471
  copyright: !ruby/object:Word
    word: copyright
    stem: copyright
    docFrequency: 2.0
    docPositions:
    - 1472
  societycomputerresurrection: !ruby/object:Word
    word: societycomputerresurrection
    stem: societycomputerresurrect
    docFrequency: 2.0
    docPositions:
    - 1472
  societyissn: !ruby/object:Word
    word: societyissn
    stem: societyissn
    docFrequency: 2.0
    docPositions:
    - 1472
  editorthe: !ruby/object:Word
    word: editorthe
    stem: editorth
    docFrequency: 2.0
    docPositions:
    - 1472
  enticknapthe: !ruby/object:Word
    word: enticknapthe
    stem: enticknapth
    docFrequency: 2.0
    docPositions:
    - 1528
  tootillthere: !ruby/object:Word
    word: tootillthere
    stem: tootillther
    docFrequency: 2.0
    docPositions:
    - 1599
  secsadditional: !ruby/object:Word
    word: secsadditional
    stem: secsaddit
    docFrequency: 2.0
    docPositions:
    - 1623
  cljump: !ruby/object:Word
    word: cljump
    stem: cljump
    docFrequency: 2.0
    docPositions:
    - 1644
  nr: !ruby/object:Word
    word: nr
    stem: nr
    docFrequency: 3.0
    docPositions:
    - 1644
    - 1673
  bnbnthe: !ruby/object:Word
    word: bnbnthe
    stem: bnbnthe
    docFrequency: 2.0
    docPositions:
    - 1644
  periodsthere: !ruby/object:Word
    word: periodsthere
    stem: periodsther
    docFrequency: 2.0
    docPositions:
    - 1727
  titmanwhy: !ruby/object:Word
    word: titmanwhy
    stem: titmanwhi
    docFrequency: 2.0
    docPositions:
    - 1762
  gribblethe: !ruby/object:Word
    word: gribblethe
    stem: gribbleth
    docFrequency: 2.0
    docPositions:
    - 1960
  pnpn: !ruby/object:Word
    word: pnpn
    stem: pnpn
    docFrequency: 2.0
    docPositions:
    - 2105
  rtable: !ruby/object:Word
    word: rtable
    stem: rtabl
    docFrequency: 2.0
    docPositions:
    - 2105
  multiplierin: !ruby/object:Word
    word: multiplierin
    stem: multiplierin
    docFrequency: 2.0
    docPositions:
    - 2105
  shifttable: !ruby/object:Word
    word: shifttable
    stem: shifttabl
    docFrequency: 2.0
    docPositions:
    - 2106
  methodnumber: !ruby/object:Word
    word: methodnumber
    stem: methodnumb
    docFrequency: 2.0
    docPositions:
    - 2108
  operationsaveragemaximumboothn: !ruby/object:Word
    word: operationsaveragemaximumboothn
    stem: operationsaveragemaximumboothn
    docFrequency: 2.0
    docPositions:
    - 2108
  speedargus: !ruby/object:Word
    word: speedargus
    stem: speedargu
    docFrequency: 2.0
    docPositions:
    - 2108
  burtonafter: !ruby/object:Word
    word: burtonafter
    stem: burtonaft
    docFrequency: 2.0
    docPositions:
    - 2293
  hewittsince: !ruby/object:Word
    word: hewittsince
    stem: hewittsinc
    docFrequency: 2.0
    docPositions:
    - 2325
  atfull: !ruby/object:Word
    word: atfull
    stem: atful
    docFrequency: 2.0
    docPositions:
    - 2353
  fbcsthe: !ruby/object:Word
    word: fbcsthe
    stem: fbcsthe
    docFrequency: 2.0
    docPositions:
    - 2367
  tomembership: !ruby/object:Word
    word: tomembership
    stem: tomembership
    docFrequency: 2.0
    docPositions:
    - 2372
lineCount: 2379
wordCount: 30069
rank: 0.2540983606557377
title: Computer Resurrection Issue 20
links: []
rawText: "\r\n\r\n\r\n\r\nResurrection Home  \r\n  Previous issue  \r\n  Next issue
  \r\n  View Original\r\n                Cover \r\n  writeLink('res20.pdf')\r\n  Computer\r\nRESURRECTION
  \r\nThe Bulletin of the Computer Conservation Society\r\nISSN 0958 - 7403 \r\nNumber
  20 \r\n \r\nSummer 1998Contents\r\n\r\nEditorial Nicholas Enticknap, Editor    News
  Round-up     CCS Collection Policy     Computing's Golden Jubilee Nicholas Enticknap
     The Original Original Program Geoff Tootill    The Thinking Behind the IBM 360
  Peter Titman    The Argus Computer and Process Control Maurice Gribble    Obituary:
  Peter Hunt     Society Activity     FTP, Web and E-mail Addresses     Forthcoming
  Events     Committee of the Society Aims and Objectives  \r\nTopPrevious  NextEditorialNicholas
  Enticknap, Editor\r\nThe major event since issue 19 of Resurrection has unquestionably
  been the \r\ngolden jubilee of the first operational stored program computer, which
  was \r\ncelebrated with great enthusiasm in Manchester in June. The major events
  \r\nincluded the \"Launch Event\" at the Bridgewater Hall on 17 June, the Golden
  \r\nAnniversary Conference which spanned the next two days, and the handover of
  the \r\nrebuilt SSEM to the Museum of Science and Industry on the anniversary itself,
  21 \r\nJune. \r\n\r\nThese events were attended by just about everybody connected
  with Manchester \r\ncomputing past and present. Sir Freddie Williams was represented
  by his widow, \r\nLady Williams, who operated the switch that formally brought the
  replica SSEM to \r\nlife, in front of an audience of 1800 people in the Bridgewater
  Hall. Professor \r\nTom Kilburn is happily still with us - a mere stripling of 76
  - and he gave \r\nboth this audience and the one that attended the Golden Anniversary
  conference \r\nhis reminiscences of the days leading up to 21 June 1948. \r\n\r\nAll
  of these events are reviewed in more detail in the following pages. We are \r\nalso
  particularly pleased to publish an article which provides an original \r\nResurrection
  contribution to the anniversary. It was written by Geoff Tootill, \r\nand describes
  the detective work put in by himself and Professor Kilburn in re-\r\ncreating the
  world's first operational program in the exact form in which it ran \r\non that
  epochal day 50 years ago. Geoff's article includes complete listings of \r\nboth
  the earliest surviving form of this program (dating from a month after the \r\nfirst
  run) and of the original version as reconstructed. \r\n\r\nWithin 15 years computing
  had advanced so fast that it was possible for the \r\nworld's leading computer manufacturer,
  IBM, to launch a complete range of \r\ncompatible machines on 7 April 1964 - another
  key date in the history of \r\ncomputing. In this issue, Peter Titman recalls the
  thinking and decision-making \r\nprocesses that lay behind this \"bet your company\"
  decision. \r\n\r\nBy then it was clear that the major market for computers lay in
  data processing \r\nrather than computation. But there were other important application
  areas. \r\nMaurice Gribble completes the feature articles in this issue with a look
  at how \r\nFerranti applied computer technology to industrial process control. \r\n\r\nTop
  Previous  Next News Round-Up\r\nThe Annual General Meeting on 29 May approved a
  change to the constitution of \r\nthe Society which provides formal recognition
  of our close links with the Museum \r\nof Science and Industry in Manchester. \r\n-101010101-\r\nSociety
  Chairman Brian Oakley highlighted three achievements of the CCS year in \r\nhis
  address to the AGM: the reconstruction of the Manchester University Small-\r\nScale
  Experimental Machine; the progress made on the Bombe project; and the \r\nsuccessful
  move of the Pegasus from the old canteen of the Science Museum to \r\nBlythe House.
  \r\n-101010101-\r\nThe AGM re-elected all current officers and committee members
  of the Society. \r\n-101010101-\r\nThe London Science Museum plans to feature the
  CCS Pegasus as the highlight of a \r\nnew exhibition which is scheduled to open
  in the year 2000. \r\n-101010101-\r\nNortel has made a generous sponsorship donation
  to the Bombe Proj\\-ect. A large \r\ncheque was handed over at a formal ceremony
  on 12 June. \r\n-101010101-\r\nThe highlight of this event was the decryption of
  an original wartime German \r\ncoded message, sent on 1 November 1944. The message
  was of course decoded at the \r\ntime, but no record was kept of the Enigma settings
  used to do it. Tony Sale \r\nused the Bombe simulator to find these settings, and
  then configured an actual \r\nEnigma to decrypt the message. Then, to prove the
  concept, he successfully \r\ndecoded a further message sent later the same day.
  \r\n-101010101-\r\nWe are grateful to everybody who responded to our appeal in the
  last issue for \r\nvolunteers to help with the Bombe Project. This has allowed the
  team to complete \r\nthe database construction and to make very substantial progress
  on the CAD work. \r\n-101010101-\r\nAdrian Johnstone has reassumed the chairmanship
  of the DEC Working Party, and is \r\nfocussing the team's efforts on a PDP-11/34
  used at one time in the policing of \r\nthe nuclear test ban treaty. \r\n-101010101-\r\nThree
  meetings were held in London during the spring. The first, on 12 March, \r\nsaw
  Donald Davies and Roger Scantlebury presenting on \"The Origins of Packet \r\nSwitching
  and the Early Arpa network\", and attracted an audience of 37. \r\n-101010101-\r\nThis
  was followed by another seminar on a networking theme on 30 April, where \r\nBob
  Cooper spoke on \"The History of Academic Networking in the UK\". He was \r\nfollowed
  by Peter Kirstein, who gave a talk on \"The History of Arpanet and early \r\nInternet
  in the UK\". \r\n-101010101-\r\nFinally, following the AGM Brian Shackel addressed
  members on \"Human Factors - \r\n-101010101-\r\nDetails of the North West Group
  meetings programme for the autumn can be found \r\nunder Forthcoming Events on page
  44. Planning is also well advanced for three \r\nmeetings in early 1999: on \"The
  Leo Computer\" on 26 January; on \"Computers on \r\nDisplay\" on 23 February; and
  on \"The Transputer\" on 23 March. \r\n-101010101-\r\nThe Committee of the Society
  has formulated a policy statement concerning \r\nprocedures for dealing with computers
  of historical interest that come to the \r\nSociety's attention. This is published
  in full below. \r\n\r\nTop Previous  Next CCS Collection Policy\r\nThe Society has
  no Collection of its own, and no premises in which to \r\n   house one. There is
  no intention to change this.\r\n   When the Society hears of historic equipment
  which is becoming available \r\n   for conservation, it will attempt to find a suitable
  home for it in one of the \r\n   following major collections:\r\n   The Bletchley
  Park Museum Trust\r\n      The Science Museum, South Kensington\r\n      The Museum
  of Science and Industry, Manchester\r\n   \r\n   The Society will also alert other
  collections to the availability of surplus \r\n   equipment, where the major collections
  are unable to offer to house it, if it \r\n   fits the appropriate area of interest.
  Members who know of such collections \r\n   are asked to ensure that the Secretary
  is aware of their location and subject \r\n   matter.\r\n\r\nTop  Previous  Next
  Computing's Golden JubileeNicholas Enticknap\r\nThe computer is now more than 50
  years old. The golden jubilee was marked by a \r\nseries of celebrations in Manchester
  in the week leading up to the anniversary \r\non 21 June, which fell on a Sunday.
  Achievement it certainly was. The designers of the original were too busy \r\nbuilding
  it and getting it to work to have time to produce drawings or circuit \r\ndiagrams
  (lack of documentation has been a problem since the very dawn of the \r\ncomputing
  age!). \r\n\r\nFortunately, Dai Edwards, who joined the computer team three months
  after the \r\nfirst program ran, did produce some detailed drawings while the SSEM
  was in the \r\nprocess of evolving into the first full-scale Manchester computer,
  the Mark I, \r\nand the notebook he used has survived. Chris Burton told the packed
  audience at \r\nthe launch ceremony, \"I mainly used that, and also Alec Robinson's
  photographs, \r\nwhich I scanned into a computer to work out the dimensions accurately\".
  \r\n\r\nBuilding the replica was the next problem, as the components used in it
  have \r\nbeen obsolete for many years. Despite that, Chris found that there are
  still \r\ndealers who maintain stocks of things such as thermionic valves and 1940s-\r\nvintage
  cathode ray tubes. \r\n\r\nHe added, \"The pushbuttons used to key in a program
  were originally used on \r\nSpitfires. They cost 3/11 [just under 20p] in 1953,
  and I got them for £30 \r\nin 1995\". The standard Post Office steel racks used
  to house these components \r\npresented more difficulty than anything: two of them
  eventually came \"from the \r\nbottom of a Shropshire garden\". \r\n\r\nThe result
  of this reconstruction process was highly praised by Tom Kilburn, who \r\ndescribed
  the replica as \"not only identical in appearance, but identical in \r\nevery wire
  and every circuit. It would not be able to be differentiated from the \r\nBaby by
  any computer scientist\". Kilburn's only reservation was that the replica \r\nwas
  much cleaner than the original! \r\n\r\nProfessor Kilburn recalled the events of
  21 June 1948 in two separate addresses, \r\none during the launch ceremony and the
  other during the Golden Anniversary \r\nconference which followed on 18-19 June.
  \r\n\r\nMost readers will know that the prime focus of the research conducted by
  \r\nWilliams and Kilburn at Manchester University during the immediate postwar years
  \r\nwas the development of the cathode ray tube as a memory device. By the autumn
  of \r\n1947 they had got to the point where they could store 1024 bits for a period
  of \r\nseveral hours. \"At this stage\", said Kilburn, \"we had demonstrated that
  letters \r\ntyped in via a keyboard could be stored, but not digits arrived at as
  a result \r\nof computation. We needed a computer to do this.\" \r\n\r\nThere was,
  of course, no such thing available in the shops at the time, so the \r\nteam had
  to build its own. That was the reason for building the SSEM. \r\n\r\nThe story of
  the SSEM has been told many times: as Kilburn said, \"What new can \r\nbe said about
  the Baby?\". What is perhaps not so well known is the story of the \r\nprogram than
  ran on 21 June 1948 itself. \"The problem was to find the highest \r\nfactor of
  an integer. We selected this problem to program because it used all \r\nseven instructions,
  and also combinations of instructions. It was of no \r\nmathematical significance,
  but everybody understood it.\" \r\n\r\nAs with the machine itself, there is no contemporary
  extant documentation of the \r\nprogram. It \"was actually written some time before,
  on the train going to \r\nDewsbury\", where Kilburn was living at the time. It was
  developed before the run \r\non 21 June 1948, and developed further before Geoff
  Tootill wrote down the \r\nlisting around a month later. Considerable detective
  work was needed to \r\nreconstruct the version actually used for the first run,
  and this is described \r\nin detail by Tootill elsewhere in this issue. \r\n\r\nIt
  was left to Gordon Bell to put the successful construction and operation of \r\nthe
  SSEM into perspective. He pointed out that although the computer as \r\nunderstood
  today was conceived in 1946, \"until you actually do it it doesn't \r\nexist, it's
  just another idea\". Several teams of researchers were trying to \r\ntranslate the
  concept into reality: the Manchester team was the one that \r\nsucceeded and so
  kicked the computer industry into life. \r\n\r\nBell also paid tribute to the CRT
  development work as a major necessary \r\nprecursor to the computer. \"It was really
  the Williams tube that got the machine \r\ngoing\". \r\n\r\nWhy did Manchester get
  to the winning post first? Two principal themes emerged \r\nfrom talks given by
  various speakers. One of them was the enormous influence of \r\nthe Telecommunications
  Research Establishment (TRE) at Malvern. \r\n\r\nThe CRT and subsequent SSEM projects
  had their genesis there, before Williams \r\nand Kilburn moved to Manchester. Kilburn
  revealed that \"we had got to the stage \r\nof decoding 0 and 1 before we left Malvern,
  but we had to decide why it worked, \r\nand how they could be refined\". \r\n\r\nAlec
  Robinson paid tribute not only to \"the backlog of ideas\" which came from \r\nTRE,
  but also to the \"TRE techniques\" that were followed at Manchester. TRE \r\ninfluence
  was also valuable in insulating the design team from the problem of \r\npostwar
  shortages. \r\n\r\nRobinson was one of the few Manchester people who had not himself
  come from TRE \r\n(he was previously with English Electric). Geoff Tootill did,
  and he recalled it \r\nas \"the pre-eminent electronics R&D establishment during
  the war\", adding that \r\nit was \"a hothouse of talent\". Alumni included, apart
  from those that went to \r\nManchester, Maurice Wilkes (who went on to develop Edsac)
  and John Pinkerton \r\n(the chief designer of Leo). \r\n\r\nThe other major factor
  was the leadership of Freddie Williams, acknowledged by \r\nManchester University
  Chancellor Lord Flowers in a tribute to his \"unique \r\ninspiration, skill and
  enthusiasm\" which \"was so vital in the early days of \r\ncomputing\". Geoff Tootill
  described him simply as \"the boffin's boffin\". \r\n\r\nAlec Robinson, who joined
  the Manchester team in 1947, recalled that \"The \r\natmosphere was very pleasant,
  and very informal compared to English Electric. \r\nProfessor Williams' way of working
  was to let people get on with it. He didn't \r\nleave you alone, though: he provided
  plenty of encouragement, and gave you a lot \r\nof ideas. \r\n\r\n\"There were very
  few people involved, so communications were easy. You were \r\nallowed to pursue
  your own ideas in a way that was very exciting.\" \r\n\r\nReaders who would like
  to see what the very first operational stored program \r\ncomputer looked like can
  inspect Chris Burton's replica at the Manchester Museum \r\nof Science and Industry.
  \r\n\r\nTop  Previous  Next The Original Original ProgramGeoff Tootill\r\n\r\nThere
  is no contemporary record of the epoch-making program that started \r\ncomputing
  as we know it today. This article documents an attempt to discover the \r\nprecise
  form of that program. The attempt has almost certainly been successful, \r\nbut
  there is still one remaining unanswered question. \r\nTom Kilburn and I have been
  trying to reconstruct the original version of the \r\nlittle Highest Factor program
  (or \"Table of Instructions\") Tom wrote in 1948, to \r\ntest the Small-Scale Experimental
  Machine (SSEM) at Manchester University. This \r\nwas the first program ever to
  run on a wholly electronic stored program \r\ncomputer. \r\n\r\nUntil 1996, all
  that was extant of this program was the \"Amended Version\" \r\nrecorded in my lab
  notebook, which is dated 18 July 1948. By then I had improved \r\nthe version that
  ran on 21 June 1948. \r\n\r\nWhen I looked at this matter in 1975, at Simon Lavington's
  request, I remembered \r\nthat to produce the version in my notebook, I had altered
  the original to \r\nprevent the starting value for the trial factor being overwritten.
  I had also \r\ndetermined that I could save one or more instructions to improve
  Tom's code. \r\n\r\nIn 1975, I couldn't remember how, and I wasn't able then to
  work out how to \r\n\"disimprove\" my version. To preserve the starting trial factor,
  and to avoid \r\nhaving to input both positive and negative versions of it, I would
  have added \r\nprobably four instructions: however, I then cut out two of Tom's
  instructions, \r\nmaking the surviving documented version just the known nett two
  instructions \r\nlonger than the original version. \r\n\r\nWith a fresh look at
  all the data, including statements made in the contemporary \r\nletter by Williams
  and Kilburn to Nature, Tom and I now think we've \r\nlargely solved the problem.
  \r\n\r\nWe discussed it in detail on 22 March 1996. I then dug out a (rather poor)
  \r\nphotocopy of my 1948 notebook, and rediscovered some notes we made when the
  SSEM \r\nfirst ran (see next page). I copied them, made some inferences from them,
  and \r\nsent a copy to Tom on 25 March. \r\n\r\nTom and I had further talks on 27
  and 29 March, and agreed various points, which \r\nI incorporated in a revised document
  called \"Further Analysis and Comments\" \r\n(which follows). \r\n\r\n SSEM Operating
  Notes      c(?) 11011 10111 00111(Note 1)2???(b)  00100 01000 11(Note 2)22 ~?(b)
  00111 10111 01111 1-(Note 3)20 Answer 11101000001(Note 4)Answer 1046   +1   in 1
  minutea = 4537 (= 13 x 349) Problem          a= 10011, 10110, 001 4537  line 19
  c(a) 11100,01001,11011,11...         20 b     00011,10110,00100 4536        22 c(b)
  00010,01001,11011,11...   (Note 5)line 20 Answer -1 should be 348 101110101  (Note
  6)line 24 should be blank   (Note 7)CR no. should be 17   (Note 8)Time 2 mins 25
  secs   Additional notes made in 1996: these Operating Notes are taken from a \r\nphotocopy
  of the 29th page of my 1948 notebook, which was headed \"Numbers used \r\nin Tom's
  Routine, 21/6/48\". The first three lines are in my handwriting, and \r\nmost of
  the rest in Tom's. \"?\" denotes illegible in the photocopy. Note 1: c( ) means
  twos complement; this one is -a = 3141 Note 2: This one is b1, of value a-1 = 3140
  Note 3: and this is -b1. Note 4: This is 1047, ie the highest factor of 3141;\r\n
  I think we worked this out beforehand, so we would know if the answer was right.
  Note 5: I infer we had to load b in 20, and -b in 22. Note 6: Tom bracketed this
  line with the next \r\ntwo and awarded them a tick to indicate that the machine
  had got the right answer. Note 7: So line 24 held the remainder. Note 8: So the
  \"Stop\" instruction was in line 17 Tom, meanwhile, dictated his further thoughts
  onto a cassette tape on 29 March \r\n(this has now been transcribed under the name
  \"The First Program\"). He sent \r\ncopies of the tape to Chris Burton and myself,
  accompanied by a manuscript dated \r\n29 March and starting \"The most likely first
  program is...\". The program Tom had \r\nworked out is exactly the same as the one
  I had worked out independently, which \r\nI sent to him on 31 March. The two documents
  crossed in the post. \r\n\r\nWhat follows is my attempt at an exhaustive version
  of the analysis of the \r\navailable data and synthesis of the original \"Table
  of Instructions\". \r\n\r\nFurther Analysis and Comments \r\n\r\nThe \"Amended Version\"
  dated 18 July 1948 in my notebook consists of: \r\nInitialisation (lines 1-4)\r\nTrial
  subtraction, Test sign of difference and Jump back (lines 6-8)\r\nForm remainder
  r n, Test it and Stop if Zero (lines 9-13)\r\nForm new divisor b(n+1), Jump back,
  Load a (lines 14-19 and 5)\r\nFixed data (lines 20-24)\r\nVariable data (lines 25-27)\r\n\r\nI
  don't think we invented initialisation until a week or so after 21 June - the \r\nlavish
  idea of having instructions that would only be obeyed once seemed \r\ninefficient
  to me - but all the other elements must have been present in the \r\nOriginal Version.
  \r\n\r\n Amended Version of First ProgramThe 18 July 1948 version of the program
  is as follows (I wrote the explanatory \r\ncomments in italics in 1998): 1 -24,  C
  load -b1 2    c,  26store -b1 3 -26,  Cload +b1 4   c,  27store +b1 5 -23,  Cload
  a 6 Sub 27Trial subtraction 7 Testis difference negative? 8 Add 20, Clstill positive,
  Jump back two lines 9 Sub 26overshot, so add back bn10   c, 25store +r n11 -25,  Cload
  -rn12 Testis remainder zero?13 Stopyes14 -26,  Cno; load +bn15 Sub 21form b(n+1)
  = bn - 116   c,  27store b(n+1)17 -27,  Cload -b(n+1)18   c,  26store it19  22,  Cl
  Jump to line 5   init current final20 -3  21 1  22 4  23 -a  24 b1  25 - r n r N(=0)26
  - -bn -bN27 - bn bNThe Operating Notes show that, in the Original Version, at the
  \"Stop\", line 20 \r\ncontained one less than the \"Answer\", so, rather strangely,
  the \"Stop\" occurred \r\nafter \"Form new divisor\". Therefore after the end of
  the \"Trial subtractions\" \r\nthe sequence must have been: \"Form remainder\" (correction
  of the overshoot of \r\nthe \"Trial subtraction\" cannot be postponed, because the
  value of bn \r\nneeded would not still be available), \"Form new divisor\", \"Test
  remainder\", etc. \r\n\r\nFurthermore, the first \"Trial subtraction\" must have
  preceded \"Form new divisor\" \r\nin the Table of Instructions, because it seems
  we worked out b1 = a-1, \r\nand -b1 by hand and typed them in. If \"Form new divisor\"
  had preceded \r\nthe first \"Trial subtraction\", we could just have put b1 = a,
  and not \r\nbothered to work out -b1. So the first lines of the main loop were \"Load
  \r\na\", \"Trial subtraction\", \"Test sign of difference\", \"Jump back\". \r\n\r\nFrom
  the letter to Nature, we know that the Table of Instructions \r\nwas 17 in number,
  ignoring repetitions of the inner loop. From the \r\nOperating notes, we know that
  the \"Stop\" instruction was in line 17, and not \r\nimmediately after the \"Test\"
  instruction as in the Amended Version. This was \r\nvery likely intended to show
  with complete clarity that the original version \r\ncould be part of a larger program,
  with further instructions following line 16 \r\nand replacing the \"Stop\". \r\n\r\nTom
  concurs in his audio tape that this is what he had in mind. Similarly, he \r\nagrees
  that the first line of the program cleared the accumulator simply to \r\nillustrate
  a point of sound practice, even though it was quite unnecessary in \r\nthis case.
  \r\n\r\nThe reconstructed original version that follows respects all these constraints.
  \r\nIt also uses the lines that follow the instructions consecutively (except for
  \r\nline 24) for the fixed and variable data indiscriminately, so I can believe
  that \r\nTom started with consecutive lines but altered the sequence a bit during
  program \r\ndevelopment. \r\n\r\nThere may be other solutions to the problem of
  disimproving my Amended Version, \r\nbut I cannot find one that meets all the conditions.
  For example, storing (r n $-$ bn),\r\n then forming -b(n+1), then forming and testing
  r n, \r\nthen forming b(n + 1) could have 17 instructions, but leaves bN \r\nrather
  than b(N + 1) in line 20. I conclude that the result Tom and I \r\narrived at is
  at the very least a close approximation to the Original Version. \r\n The Original
  VersionHere is the original \"Table of Instructions\" as synthesised from this analysis
  \r\non 31 March 1996 (I wrote the italicised comments in 1998): 1 -18,  C clear
  accumulator 2 -19,  Cload +a 3 Sub 20Trial subtraction 4 Testis difference negative? 5
  Add 21,  Clstill positive, Jump back two lines 6 Sub 22overshot, so add back bn 7
     c, 24store +r n 8 -22, Cload bn 9 Sub 23form b(n+1) = bn - 110   c, 20store b(n+1)11
  -20, Cload -b(n+1)12   c,  22store it13 -24,  Cload -r n14 Testis remainder zero?15
  25,  Clyes, Jump to line 1716 23,  Clno, Jump to line 2 (but see text)17 Stopload
  -b(n+1)  init current final18 0  19 -a  -a20 b1 bn or b(n+1) b(N+1)21 -3  22 -b1
  -bn or -b(n+1) -b(N+1)23 1  24 - r n r N25 16  Background Data \r\n\r\nI do not
  have a copy of the Williams/Kilburn letter to Nature, but \r\naccording to Simon
  Lavington's book it included the following passage: \r\n\r\n\"The highest proper
  factor of 218 was found by trying in a single routine \r\nevery integer from (218-1)
  downwards... Thus about 130,000 numbers were \r\ntested, involving some 3.5 million
  operations. The correct answer was obtained \r\nin a 52 minute run. The instruction
  table in the machine contained 17 entries.\" \r\n\r\nTom says that \"operations\"
  meant store accesses. Furthermore, he agrees that \r\nlines 17, 19, 20, 22 and 24
  in the reconstructed version must be correct, to \r\nconform to the Operating Notes.
  \r\n\r\nUntil recently I thought that on 21 June 1948 the digit period of the machine
  \r\nwas 8.5 microseconds, and the \"bar\" (ie the instruction time) was 1.2 \r\nmilliseconds.
  These two figures are consistent with each other, given that the bar\r\n was four
  \"beats\", with each beat being 32 digit \r\nperiods plus 4 digit periods for the
  timebase flyback. \r\n\r\nHowever, on the 23rd page of my notebook (which was probably
  dated 9 June 1948), \r\nI find the following: \"13.4 [million] operations, approx.
  Each takes 1.35 mS.\" \r\nOn 13 June a similar estimate of time also uses a figure
  of 1.35 milliseconds. \r\nThese cannot be measured times for the calculation, because
  the date is before \r\nthe computer started to work: the presumption is that they
  were measured bar \r\ntimes. This implies a digit period of 9.4 microseconds. \r\n\r\nBetween
  10 and 13 July 1948, according to my notebook, I tested the version of \r\nTuring's
  long division program that I had corrected. I noted that 333 divided by \r\n3 took
  two seconds, and that 1,073,741,823 divided by 34,636,833 took \"about \r\n1½ seconds\".
  I can't remember how I measured these times, but I \r\ndoubt if they would give
  us an estimate of the digit period at that date with \r\nuseful accuracy, and I
  certainly cannot assume that it hadn't been changed since \r\n21 June. We probably
  changed it as often as we changed our socks. \r\n\r\nBut on 3 August 1948 there
  is \"...digit place 39...\" and \"Total time [1,103,872] \r\nbars = 27.5 mins ±5%\",
  ie 1.49 milliseconds per bar, and now with 45 digit \r\nperiods per bar, the implied
  digit period is still 8.5 microseconds. Was this \r\njust another paper estimate,
  the 5% tolerance arising from the probable error \r\nin the assumed digit period,
  or was it a measured time? I don't know. \r\n\r\nSimon Lavington states that by
  April 1949 the word length was 40 bits and the \r\nbar 1.8 milliseconds. So, with
  a 5-digit period flyback, the digit period was 10 \r\nmicroseconds. I do remember
  that we altered the digit period to 10 microseconds, \r\nbut I can't remember whether
  we noticed what it really was beforehand. \r\n\r\nOn various dates in 1948 and 1949
  we experimented with different ways of digging \r\nand filling wells on the face
  of the main storage tube. It is quite possible \r\nthat we altered the digit period
  for particular tests, and did not put it back \r\nto its previous value afterwards.
  \r\n\r\nInferences from the Background Data\r\n\r\nThe \"Further Analysis and Comments\"
  section above seems to provide valid \r\nreasoning for the reconstructed version
  of the original program shown, with one \r\nproviso: there is no evidence one way
  or the other for instruction 16. I said in \r\nmy letter to Tom of 31 March that
  one can choose either 15 or 16 instructions in \r\nthe main loop, by jumping back
  to line 2 or line 1. What I meant by this was \r\nthat the main loop written code
  could have consisted of either 15 or 16 \r\ninstructions. \r\n\r\nThis is misleading
  in the context, because what we are really interested in is \r\nthe number of instructions
  obeyed for one iteration of the main loop - that is, \r\nin testing one possible
  factor. For the values of a and b1 in the \r\nletter to Nature, lines 3 and 4 are
  executed twice and line 15 not at all. \r\nSo in the reconstructed program as shown
  above, 16 instructions are executed per \r\nnumber tested. \r\n\r\nIf, alternatively,
  line 16 reads \"18, Cl\", 17 instructions are executed. \r\nAs it happens, both
  the constants (0 and 1) needed to jump to either line 1 or \r\nline 2 are already
  available, because they're both used for other purposes as \r\nwell. So we cannot
  deduce from that whether it was 16 or 17 bars per number \r\ntested, by including
  or not including the superfluous \"Clear accumulator\" \r\ninstruction in each iteration.
  To choose between these two alternatives we need \r\nfurther data. \r\n\r\nFrom
  (218-1) to 217 is certainly 131,072 numbers, so in a 52 minute \r\nrun a digit period
  of 8.5 microseconds implies 19.45 instructions. This is \r\nimplausible in view
  of the evidence for either 16 or 17 instructions. \r\n\r\nHowever, we have further
  timing information on the same program from the \r\nOperating Notes, with data that
  results in a different ratio of outer to inner \r\nloop executions. It is not too
  laborious to work out the number of bars needed \r\nfor values of a for which we
  know the measured times, and indeed I have \r\nverified the figures I quote in Table
  1 below by emulation. \r\n\r\n a 218 4537\t3141 31 19 b1 218-1 4536 3140 30 18 bN
  217 349 1047 1 1 Measured run time (minutes/seconds) 52m 2m 25s\t1m   Estimated
  tolerance on measure ±0.3% ±2% ±5%   Number of trial subtractions 262,145 14,088
  4713 142 77 Number of inner loop instructions 786,435 42,264\t14,139 426 231 Jump
  back to line 1Total number of instructions executed 2,228,22888,333 37,174 757 430
  Ratio inner loop/other instructions 0.5455 0.9174 0.6138 1.2870 1.1608 Therefore
  bar time (milliseconds) 1.400 1.64 1.61   and digit period (microseconds) 9.72 11.4
  11.2   Jump back to line 1Total number of instructions executed 2,097,147 84,146
  35,081 728 413 Ratio inner loop/other instructions 0.6000 1.0091 0.6752 1.4106 1.2692
  Therefore bar time (milliseconds) 1.487 1.72 1.71   and digit period (microseconds)
  10.33 12.0 11.0   \tTable 1: Bar Times and Digit Periods\tThere is good agreement
  between the digit periods calculated for the runs for \r\n4537 and 3141, which took
  place on 21 June 1948, and the discrepancy between \r\nthese and those for the 52
  minute run quoted in the letter to Nature is at \r\nleast 16\\%. It therefore seems
  unlikely that the digit period was in fact the \r\nsame on these two occasions.
  \r\n\r\nI conjecture that, having seen the logic design of the hardware and software
  \r\nvindicated on 21 June, we did a little preventative maintenance before embarking
  \r\non a more exhaustive test of the robustness of the hardware, probably a day
  or \r\nmore later. During this maintenance, we quite probably altered the digit
  period. \r\n\r\nIf indeeed there was some justification for operating at the figure
  of 9.4 \r\nmicroseconds noted on 7 and 13 June 1948, instead of 8.5 microseconds,
  then \r\nconceivably during the maintenance period we set to that figure. It could
  be, in \r\nfact, that we just reset the three- or four-gang .0005 mfd variable condenser
  \r\nthat determined the basic oscillator frequency to a particular pencil mark on
  \r\nthe front panel. This hypothesis implies that an accurate observed value of
  9.7 \r\nmicroseconds, being nearer to an approximate 9.4 microseconds, is more plausible
  \r\nthan an accurate one of 10.3 microseconds. So this point argues for a jump back
  \r\nto line 1 rather than to line 2. \r\n\r\nI explain the reversion on 3 August
  1948 to the figure of 8.5 microseconds by \r\nassuming either that we did in fact
  correct it, by reviewing the pencil marks on \r\nthe front panel, or that we knew
  the machine would work with the shorter digit \r\nperiod, and I therefore used this
  value for my estimate. \r\n\r\nOn the other hand, with line 1 in the loop we have
  31 main store accesses per \r\niteration, and a total of 4.06 million during the
  52 minutes. Without line 1, we \r\nhave 29 accesses per iteration and 3.80 million
  in total. Neither figure agrees \r\nwith the letter to Nature, so it seems we should
  accept Tom's suggestion \r\n(on his tape of 29 March) that the figure of 3.5 million
  was wrong. \r\n\r\nTom points out that we had been struggling to make the machine
  work for some \r\ndays before 21 June, which was a Monday, after we had had the
  weekend off. \r\nDuring these efforts we would certainly not have been prepared
  to wait as long \r\nas say 60 seconds for each trial, and we would therefore have
  tried a smaller \r\nnumber. We agree on this point. \r\n\r\nIn fact, we probably
  varied the smaller number a bit. Tom suggests we used 19 or \r\n31 for the first
  successful test, since he thinks we got a zero in line 20. That \r\nis, we tested
  a prime number. I can't recall any more detail myself, I'm afraid, \r\nbut I have
  included these two numbers in Table 1, to show they are indeed quite \r\nplausible.
  \r\n\r\nConclusion\r\nIn the Original Program, the jump back to line 1 gives \r\na
  digit period a bit more plausible that a jump back to line 2. That is, line 16 \r\nshould
  read 18, Cl and not 23, Cl as I have it. But this is hair \r\nsplitting, and Tom
  later concluded that line 2 as shown is correct. It seems \r\nunlikely that further
  palaeographical work would shed further light on this \r\npoint. \r\n\r\nTop  Previous
  \ Next The Thinking Behind the IBM 360Peter Titman\r\n\r\nWhy did IBM embark on
  the risky venture of producing the System 360 series when \r\nit was already dominant
  in the market? The author describes the decision-making \r\nprocess that led to
  the development of the world's first range of compatible \r\ncomputers. \r\nI joined
  IBM United Kingdom as what was called an applied science \r\nrepresentative, which
  meant selling scientific machines to universities and \r\nengineering installations.
  That job disappeared when it was decided that we did \r\nnot need separate marketing
  organisations for the scientific market and the \r\ncommercial market. \r\n\r\nBut
  when my applied science job ended the 360 wasn't going to be announced for \r\ntwo
  years, and from a salesman's point of view, something that is not going to \r\nbe
  announced for two years doesn't exist. I was spare, so I got assigned to \r\nworrying
  about what was going to happen in two years time. \r\n\r\nSo my view is quite different
  from the people who were involved in delivering \r\nthe 360. I was concerned with
  questions like: what have they got us in to? And \r\nwhat were we going to do about
  it? \r\n\r\nIt is hard for those of us who were with IBM then not to appear boastful
  and \r\nstand up and say, \"Gosh, weren't we marvellous\". The fact is that we had
  an \r\nenormously powerful marketing position at this time, which was the end of
  1961, \r\nbeginning of 1962. We were selling the 1401 in incredible numbers. You
  could go \r\nto a company that had a punched card installation, say two accounting
  machines \r\nand a calculator, and sell them a 1401 for the same price. They could
  do very \r\nmuch more with it, and they could do it simply. \r\n\r\nMost computer
  users in those days were doing really simple things - just \r\nproducing the invoices
  and getting the money back was a chore they were \r\ndelighted to give to a machine.
  There were some people doing more complicated \r\ncomputing, but not in large numbers,
  so they weren't the main source of revenue. \r\nRevenue was coming from really basic
  things. \r\n\r\nWe did have incredible control over the computer market. That is
  in worldwide \r\nterms: in the UK, we weren't the largest company, but in almost
  every other \r\ncountry we were. \r\n\r\nBy the end of 1964, we had sold 13,000
  1401s - orders of magnitude more than \r\nthe ICT 1301 and the RCA 301 (which ICT
  also sold). This made a big difference \r\nwhen it came to how much program support
  you could provide, and in many other \r\nways. \r\n\r\nI came from Leo Computers
  where we had to beg for every transistor. At one time \r\nI designed memories: when
  I had finished that I was at once put to work on the \r\ntape channels. We were
  that short of people. IBM had so much more resource. \r\n\r\nSo the first message
  is that we were really strong. In some market segments such \r\nas large machines,
  we were dominant even in the UK. There was a good political \r\nreason for our dominance
  here - the people who bought large machines in those \r\ndays were from organisations
  such as the Atomic Energy Authority and the CEGB. \r\nThese companies were at that
  time very closely tied to the US nuclear industry, \r\nso had a strong incentive
  to buy the same machines that were being used in the \r\nUS. That was one reason
  why we had 7090s in Aldermaston and in CEGB and other \r\n704s dotted around in
  Risely and similar sites. \r\n\r\nSo we were very strong in that sector. The place
  where we were weakest was the \r\nscientific area, and particularly in the UK the
  small scientific area. \r\n\r\nI sold 1620s when I first joined IBM. The 1620 was
  a lovely little desktop \r\nmachine with a memory of 20,000 decimal digits and a
  typewriter, and you sat \r\ndown and used it like a PC. But it cost more than the
  Elliott 803 which had 8000 \r\nwords of memory and ran much faster. The 1620 didn't
  even have an adder: it did \r\narithmetic by doing table lookup, and it did it very
  slowly. A multiplication \r\ntook 200 milliseconds or so. \r\n\r\nCompared to the
  803, the 1620 was an absolute dog. It had the most unbelievable \r\npaper tape reader.
  It was designed by someone who designed magnetic tape \r\nreaders. Everybody knew
  that the way to sense timing on the paper tape reader \r\nwas to sense the sprocket
  hole. But whoever designed this device knew that the \r\nway you drove paper tape
  was by a cog wheel through the sprocket hole to which \r\nyou attached the spindle
  to which you attached a disc with holes in from which \r\nyou then sensed the timing.
  This had the enormous advantage that you got the \r\ntiming out of place and also,
  for a bonus, it screwed up the sprocket holes as \r\nwell. \r\n\r\nSo we weren't
  well placed in that sector of the market. But in the US we did \r\nsell the 1620.
  We sold it to universities because we were IBM and universities \r\nbought IBM machines.
  The 803 was much, much better and sold, almost uniquely \r\namong UK machines, in
  reasonable quantities, abroad as well as at home. \r\n\r\nThe success of the 803
  was one reason why John Fairclough got the job of \r\ndeveloping a small scientific
  machine at Hursley. That raised a question: \r\ncompanies like Esso bought machines
  in any part of the world that they chose, \r\nbut IBM maintained systems only in
  the countries where we sold them. Esso was \r\nvery unhappy that we didn't always
  immediately announce things in the UK that we \r\nhad announced in the States because
  the parent company wanted to have the same \r\nmachines in all subsidiaries. The
  thought of someone in the UK announcing a \r\nbetter machine and the parent company
  not being able to have it was absolutely \r\nunthinkable. \r\n\r\nSo John's chances
  - though he didn't know it at the time, and it is only in \r\nhindsight that I recognise
  this - were not that good because it raised the \r\nquestion of how, if we had something
  brilliant announced in World Trade, we were \r\nnot going to announce it immediately
  in the States. (World Trade was the part of \r\nIBM that covered the whole of the
  rest of the world outside North America. World \r\nTrade then had about a third
  of the sales volume of the US.) \r\n\r\nThat was one of the issues: should we have
  a separate UK product line, or at \r\nleast a World Trade product line? Don't forget
  that in those days, the disparity \r\nin wealth between the States and Europe was
  much greater. An American cost about \r\ntwice as much as an Englishman and as three
  times as much as an Italian. So when \r\nyou came to do sums about displacing people
  and so on, you could bear much \r\nhigher costs in the States. So there was a reason
  for thinking that the World \r\nTrade market was different. But the big decision
  was that it wasn't different. \r\n\r\nAnybody in our strong position would normally
  continue operating along the same \r\nlines. What was remarkable was that IBM decided
  to do something different. If we \r\nwere doing so well, why change? \r\n\r\nApart
  from market dominance, our other enormous strength was technology. People \r\nin
  the UK didn't understand the strength or depth of IBM technology. \r\n\r\nAs I said
  earlier, when I finished doing memories at Leo I was put onto looking \r\nat tapes.
  The Decca tape had not been a great success on Leo II: EMI was trying \r\nto enter
  the tape drive market, but the main companies we investigated were \r\nPotter and
  Ampex. Leo III eventually used Ampex drives. But there was no \r\npossibility of
  making our own tape drive. \r\n\r\nIBM tape drives, I thought at the time, were
  terrible, because they used to do \r\ndreadful things to the tape. They had pinch
  roll capstans that used to grind it, \r\nthe tape ran in contact with the head,
  and the drives needed quite a lot of \r\nmaintenance. What I didn't realise, though
  it seems obvious in hindsight, was \r\nthat if you wanted to get faster tape, as
  everybody did, you could either make \r\nthe tape move faster or pack data more
  densely. To pack data more densely it was \r\na huge advantage to have your head
  in contact. \r\n\r\nOnly IBM did this at the time. Everybody else avoided contact
  because they felt \r\nthey couldn't manage the wear on the tape. But IBM had the
  resources to apply to \r\nthis problem and solve it. The solution proved to be the
  development of \r\nproprietary heavy duty tape. IBM had the technology right through,
  covering the \r\nmaterials technology, the tape technology, the drive technology,
  the \r\ncontrollers, everything. No other company could put that lot together to
  make a \r\nnew solution. \r\n\r\nIn printers, IBM also innovated with the 1401.
  Everybody else used Analex drum \r\nprinters. On these, a big drum went round and
  round and you had to strike it at \r\nexactly the right time to produce good quality
  printing - if your timing was \r\nout, the letters went up and down a bit. \r\n\r\nThe
  IBM answer was to have a chain that went sideways instead of a drum. You \r\nstill
  had to bang it at the right time, but if the alignment was slightly out, \r\nthe
  letters were displaced slightly left or right rather than up or down. That \r\ndidn't
  look nearly so bad. Psychologically it looks quite different to have a \r\nletter
  slightly to the left rather than up or down. \r\n\r\nFurthermore, the mechanism
  was cheaper. You just had this one chain and that \r\nitself was replaceable, so
  you could have different fonts, and you could have \r\nupper and lower case and
  other capabilities which were impossible on the old \r\nAnalex. \r\n\r\nI can remember
  the Powers Samas printer on the Leo II. Powers Samas really \r\ndidn't believe in
  electricity. If it could run with a belt or a cable, it was \r\ndone with a belt
  or a cable. Electricity was dangerously new fangled. The IBM \r\n1403 printer was
  a totally different machine in terms of its simplicity, \r\nreliability and all
  the other factors. \r\n\r\nIBM's disc technology was another plus. The first disc
  paper I can trace dates \r\nfrom about 1953 and was a theoretical study of floating
  a head on a disc - the \r\nair bearing disc. The first disc subsystem itself, 305
  Ramac, was not a success. \r\nIt had 5Mb capacity accessed by a single arm, which
  provided access times in the \r\norder of seconds. But it gave us valuable experience.
  \r\n\r\nBy the time we got to the 360, we had not only realised that discs were
  \r\nimportant - far better than tape as a subsidiary storage medium - but also \r\nwhat
  an enormous advantage it was to have your operating system on a disc. \r\nOperating
  systems on tape were continuously chuntering up and down. If you'd \r\nperformed
  a compile, and then wanted to link something, you had to access \r\nanother part
  of the tape or use another tape drive. There was lot of movement \r\ntrying to get
  the flow of jobs through a tape machine. Discs obviated this \r\nproblem. \r\n\r\nWe
  had virtually a monopoly on disc technology. I can remember John Pinkerton of \r\nLeo
  Computers coming to Wigmore Street to explore buying discs from us because \r\nthere
  was no alternative source for him. So Leo Computers would have had to \r\nresell
  our discs onto their customers, a tremendous disadvantage. A lot of our \r\nother
  competitors just didn't go into discs at all. But we had a disc technology \r\nthat
  was good and reliable, and we understood disc operating systems. \r\n\r\nAnother
  technological strength was memory. We had invested a lot of money: the \r\nreason
  we were ahead was not because we were big but because we had invested a \r\nlot.
  For example one major investment was in a plant which automated the process \r\nof
  making a memory stack. \r\n\r\nBut having made the investment, we could sell memory
  for about five times its \r\nmanufacturing cost, or more than that even. The manufacturing
  cost of memory was \r\nnothing. So we made enormous profits on memory. \r\n\r\nSo
  why, with these immense strengths, did we embark on this very risky System \r\n360
  venture? Why abandon our existing products and produce a new range of \r\nmachines
  that was totally incompatible with them? \r\n\r\nI was conscious at the time that
  customers such as ICI were keen to have the \r\nsame machines in all their offices
  and in all their computing centres. They were \r\nlooking for standards. This was
  an issue for IBM, too: we were having to train \r\ncustomer engineers and support
  engineers in all sorts of different machines. \r\nWhen I joined I had go through
  programming courses on the 650, the 7070, the \r\n1620 and the 709. It was all rather
  expensive. \r\n\r\nTo compound this problem, there was a huge explosion of programming
  languages \r\nand operating systems. For the 7090 alone we were on to Ibsys version
  13 by the \r\ntime we were talking about the 360. Then there was a Fortran monitor
  system, and \r\nanother system called the Share Operating System (SOS), designed
  in conjunction \r\n\r\nThe initial Fortran group was comprised entirely of IBM people,
  seven of them. \r\nShare played a part in its subsequent development, but the initial
  design - and \r\nFortran I was a most remarkable system because its optimisation
  was better than \r\nanything that came after it - was really good. \r\n\r\nIn the
  sixties everybody thought that if you had the right program language, you \r\ncould
  do anything. All that you had to do was to find it. We had Fortran, \r\nComtran
  (the commercial translator for the 7090), Cobol and Algol. \r\n\r\nPeople were starting
  to ask some quite basic questions about programming, such \r\nas \"What's it for?\"
  and \"Why are we - IBM - writing programs for free?\" All \r\nthe customers did
  when you gave it to them was moan. When we announced Ibsys, \r\npeople said \"Gosh
  it's complicated isn't it? Doesn't it take a lot of memory? Do \r\nwe need it?\".
  Of course they needed it. But they weren't grateful for it in the \r\nleast, so
  it was a real concern. \r\n\r\nThen there was the question of what we should spend
  our development money on. A \r\nlot of it was going on the 7090 because all the
  interesting activity was on the \r\nbig scientific machines. Where the revenue was
  coming from was from the 1401, \r\nbut we weren't spending nearly so much on it.
  No one knew why. \r\n\r\nSo questions like these were being bounced around group
  staff in the \r\ncorporation. As I recollect it, group staff, and a chap called
  Don Spaulding in \r\nparticular, had decided that we had to do something about the
  proliferation of \r\nsoftware. Therefore they set up a committee. \r\n\r\nBut like
  all the best committees the people who set it up had a very good idea \r\nof what
  they wanted the committee to say beforehand. The terms of reference were \r\nsomething
  like this: \"to produce a complete plan for the total product range, \r\nsuitable
  for all countries and for both scientific and commercial computing\". \r\nThere
  was strong pressure to make a compatible family of machines. \r\n\r\nNo one knew
  whether it could really be done, but Bob Evans in particular had \r\nstrong feelings
  about compatibility and felt that it was possible. He was the \r\npresident of DSD
  - the lab systems development division - and had been \r\ninvolved in the 7070 which
  was a mixed commercial-scientific machine. \r\n\r\nThe committee came back with
  the required conclusion. They presented us with a \r\nreport recommending what was
  known as the New Line Plan. \r\n\r\nThis plan caused me personally a lot of worry
  for a long time. It envisaged a \r\nstaggered announcement of machines, the first
  of which was to be a small binary \r\nversion of the model 40 - the machine being
  developed in Hursley. Immediately \r\nthere was a problem. What we were aiming at
  in the long term was a grand \r\nstrategy. What we were allowing to poke out was
  one small binary machine which, \r\nthough an interesting machine, was not enough
  on its own to get anybody excited. \r\n\r\nThe other problem was compatibility with
  previous systems. The report \r\nacknowledged the problem, but expected IBM to be
  selling new applications that \r\ndepended on users migrating from tape to disc,
  and further ahead some exciting \r\nteleprocessing applications. Accordingly it
  decided to ignore the compatibility \r\nissue. The difficulty was that even people
  doing new exciting things tend to \r\nhave done some boring things first which they
  would like to continue doing on \r\nthe same machine. So compatibility was a big
  worry. \r\n\r\nWe discussed the plan for about 18 months, exploring how we were
  going to \r\nachieve the ambitious targets laid down. But IBM does change it plans,
  though \r\nnot easily. A lot of pressure has to build up to effect such a change.
  The \r\ncatalyst in this case was the Honeywell 200 with its cheekily named Liberator
  \r\nprogram, which would take a 1401 program and run it faster and more cheaply
  - a \r\nbeautiful thing to sell. Naturally it sold in large numbers, very quickly.
  This \r\nwas around about the end of 1963.  \r\n\r\nThen a very typical IBM thing
  happened. Tom Watson became involved and ordered a \r\nsolution to the Honeywell
  200 to be found in 90 days. Suddenly we discovered \r\nsomething we knew already,
  that the way to solve the migration problem was \r\nthrough emulation. We had microprogramming,
  we had the technology to do it, we \r\njust had never somehow reached the conclusion
  that emulation was an important \r\ncompatibility technique. But by this stage it
  was something marketing people \r\nknew they had to have. \r\n\r\nThe other conclusion
  we reached was not to mess around announcing tiny bits at a \r\ntime, but to launch
  the whole lot at once. That allowed us to emphasise the \r\nstrategy rather than
  individual machines. Quite suddenly we had the big bang. It \r\nwas the end of 1963
  when the decision was taken that a complete range of \r\nmachines would be announced
  on 7 April 1964. \r\n\r\nThe range comprised six models of CPU and a complete set
  of new I/O devices. \r\nRemarkably, you could attach any I/O device to any CPU:
  they weren't handcrafted \r\nthe way they were before. We developed emulators for
  every existing computer \r\nthat was important. So suddenly we had a completely
  new exciting product line to \r\nsell. \r\n\r\nWe sold it in the UK with an enormous
  full page text advert: we had a full \r\nnewspaper page of detailed text about the
  360 series on the day it was \r\nannounced. Of course we took our customers to Hursley
  to show them round as \r\nwell, but it was the media promotion that really made
  for an exciting launch. \r\nThis was not at all the way the committee had planned
  it in the first place. \r\nEditor's note: this is an edited version of the talk
  given by the author to \r\nthe Society at the Science Museum as part of the IBM
  System 360 seminar on 21 \r\nNovember 1995. \r\n\r\nEditorial fax number\r\nReaders
  wishing to contact the Editor may do so by fax, \r\non 0181-715 0484.\r\n\r\nTop
  \ Previous  Next The Argus Computer and Process ControlMaurice Gribble\r\n\r\nThe
  first Argus grew out of a small computer that was built to study digital \r\ncontrol
  systems. The circuits of that machine, which were designed about 1954-\r\n55, used
  Mullard OC71 low frequency germanium pnp transistors. They were \r\noriginally developed
  for producing shift register sequences, or chain codes, for \r\nuse in a rotating
  beacon missile guidance system. \r\nThe circuits comprised NOR-gates and flip-flops
  which were clocked by narrow \r\nshift pulses to produce shift registers and counters.
  Positive logic was \r\nassumed, that is, the transistors were turned on - collector
  at earth potential \r\n- for \"1\" and off - collector negative - for \"0\". Diode
  OR-gates were \r\nfollowed by a transistor via a coupling network to produce a NOR-gate.
  The \r\nflipflops consisted of two transistors cross-coupled via RC networks with
  a \r\npulse steering circuit for shift pulses, which enabled shift registers and
  \r\nsynchronous counters to be made. The shift pulses were produced by a crystal
  \r\ncontrolled blocking oscillator, the clock frequency being 25KHz. The power \r\nsupply
  provided +6 and -6 volts. \r\n\r\nExperimental Computer\r\n\r\nIn 1956 a small computer
  was proposed for studying sampled data systems and the \r\nfeasibility of digital
  control of weapon systems. Experimental transistor \r\ncomputers were being built
  at Manchester University and at AWE Harwell. These \r\nmachines used point-contact
  transistors, which at that time had the advantage of \r\nspeed and the fact that
  only one was needed to make a latching circuit. However, \r\nthey were difficult
  to manufacture and not very reliable, so it seemed sensible \r\nto design circuits
  around junction transistors, in the hope that faster devices \r\nwould eventually
  become available. Due to the rapid progress in the \r\nsemiconductor industry, this
  happened sooner than expected. \r\n\r\nThere was a need for additional circuits,
  such as a 3-entry flipflop, so that \r\nregisters could be loaded in parallel and
  shifted in both directions. This was \r\nachieved by replicating the pulse steering
  circuit and ORing them together. \r\nThere was also need for a shift gate, so that
  various shift pulse sequences \r\ncould be produced. This also used a pulse steering
  circuit to gate shift pulses \r\nwith the logic levels. \r\n\r\nThe circuits were
  built into plug-in units, which were hand wired. A printed \r\ncircuit version,
  which was fairly novel in those days, was also produced, but \r\nthese were not
  used in this experimental machine, which used serial arithmetic \r\nwith a 10-bit
  word length and represented negative numbers in twos complement \r\nform. It incorporated
  a Booth short-cut multiplier, which could handle positive \r\nand negative numbers
  with equal facility. The Newton-Raphson method was used for \r\ndivision and calculating
  square roots, while Chebyshev polynomials were used for \r\ntrigonometric functions.
  \r\n\r\nOnly a small amount of data storage was supplied in the form of flip-flops,
  \r\nsince data was read in from transducers as required, and was output as soon
  as \r\nthe calculations were complete. Other inputs were a random number generator
  and \r\na timer. Output was analogue, either as voltages or in the form of width-\r\nmodulated
  current pulses, for operating servos. \r\n\r\nThe single address order code contained
  only 19 instructions and the program was \r\nstored on a pluggable diode matrix.
  There were two program counters: one gave 64 \r\nprogram steps for the main program,
  the other 25 steps for subroutines. Both \r\nwere ring counters to simplify matrix
  decoding, and the final OR-diodes were \r\nglued into the plugs. This was a source
  of trouble, as there was differential \r\nexpansion between the plastic plug and
  the glass diode, which shattered the \r\nglass. The solution was to use a silicone
  rubber cement instead of Araldite. \r\n\r\nA Gray or cyclic progressive (CP) code
  was used for measuring angular position. \r\nThis has the merit that, as the shaft
  with the code disc is turned, only one \r\ndigit changes at a time, whereas in binary
  code, several digits often change in \r\ngoing from one number to the next. These
  changes do not all occur at exactly the \r\nsame time and can result in false readings.
  \r\n\r\nConversion from CP code to binary was easily implemented. The data from
  a disc \r\nwas selected by suitable logic and transferred in parallel into a register
  where \r\nit was shifted left cyclically via an Exclusive-OR circuit. This was carried
  out \r\nby separate hardware in the computer in order to speed up the process and
  avoid \r\nadding to the complexity of the arithmetic unit. \r\n\r\nThe analogue
  voltage output converted the least significant five bits of the \r\nnumber by summing
  currents into an operational amplifier. The logic took account \r\nof the sign of
  the number and arranged that the amplifier saturated for numbers \r\nof larger magnitude.
  \r\n\r\nThe width-modulated current pulses for driving hydraulic valves were produced
  as \r\nfollows: the servo error was stored in a 5-bit accumulator and, according
  to the \r\nsign of the error, unity was either added to or subtracted from it every
  word \r\ntime until it was zero. Until zero was reached, a large current of the
  \r\nappropriate sign was switched into the valve, resulting in a pulse of current
  \r\nwhose length, and thus average value, was directly proportional to the error.
  By \r\nmaking the maximum current twice that needed to produce maximum output from
  the \r\nvalve, two such valves could be operated on a time-shared basis. \r\n\r\nRoyal
  Demonstration\r\n\r\nThe computer was completed in October 1957, in time for HRH
  Prince Philip's \r\nvisit to the Wythenshawe Labs in November, and used in a demonstration
  of \r\nparallax error correction and servo control. \r\n\r\nTwo turntables, separated
  by a metre or so and carrying digitising discs, could \r\nbe rotated rapidly through
  about 90 degrees by hydraulic jacks. Each turntable \r\nhad a optical projector
  mounted on it, which projected a spot of light onto a \r\nscreen, one being coloured
  red and the other green. Care was taken to ensure \r\nthat the port side was red
  and the starboard side green! A third digitiser was \r\nfitted with a knob and,
  when it was turned, the angle measured by this digitiser \r\nwas compared with that
  of the left-hand table and the error operated a digital \r\nservo so as to minimise
  it. To correct the parallax error, the right-hand table \r\nwas, at the same time,
  turned by a similar servo to another angle, given by the \r\ntrigonometric relationship
  below, so that the green spot of light fell on top of \r\nthe red one. \r\n\r\nThe
  formula used was:\r\n\r\ntan R = tan L / [s/d (tan L) -1] \r\n\r\nwhere s is the
  separation of the turntables, d is the distance of the screen, \r\nand L and R are
  the left and right digitiser angles respectively. \r\n\r\nThree term Chebyshev polynomials
  calculated tan and arctan to sufficient \r\naccuracy, but, due to the computation
  time, there was a noticeable lag in the \r\nposition of the green spot if the knob
  was turned too quickly. \r\n\r\nThe demonstration behaved well when Prince Philip
  turned the knob. He then \r\nlooked at a printed circuit version of a flipflop;
  the name obviously amused \r\nhim, for as he went out of the door he could be heard
  saying, \"Flipflop, \r\nflipflop ...\". \r\n\r\nFaster Transistors\r\n\r\nHigh frequency
  transistors, developed for radio, soon became available. They \r\nwere alloy junction
  transistors with thinner base regions, and it was necessary \r\nto design new circuits
  to get the fastest operation with them. Alloy transistors \r\nhave a relatively
  large base region that can store charge carriers - holes in \r\npnp transistors.
  In switching circuits, if excess base current is used, in order \r\nto turn the
  transistor on quickly, there is an excess of holes in the base \r\nregion that has
  to be removed before the transistor ceases to conduct. Faster \r\nturn-off times
  can be achieved if this saturation is avoided, so the Argus \r\ncircuits used a
  diode between the collector and the base coupling network in a \r\nnegative feedback
  anti-saturation circuit. An extra power supply of $-24$ volts \r\nwas also needed.
  \r\n\r\nThere was also a requirement for a power NOR-gate that was capable of a
  much \r\nlarger fan-out. It used an npn transistor to speed the removal of charge
  from \r\nthe base of the output transistor, whose collector was returned to the
  24 volt \r\nsupply. This pull-down resistor was removed and replaced with a line-terminating
  \r\nresistor when outputs, which were inverse signals, were common-collector ORed
  \r\nonto a bus. \r\n\r\nThe flipflop circuit was, in effect, two NOR-gates connected
  back to back plus a \r\ntrigger circuit. Diode inputs were used everywhere to standardise
  the circuit \r\nloading and, in the case of the trigger circuit, to improve the
  flipflop \r\nrecovery time. \r\n\r\nThe shift gate for producing sequences of shift
  pulses used a pulse gating \r\narrangement similar to that used in the flipflop
  trigger circuit. There were two \r\ndesigns of shift gate - one avoided a heavy
  standing current by using an npn \r\ntransistor that was transformer coupled to
  the output transistor. \r\n\r\nThese circuits were engineered in printed circuit
  form and used in large numbers \r\nin several Ferranti computers at Wythenshawe
  and Bracknell, and also in Canada \r\nfor the Ferranti-Packard 6000, which became
  the basis of the ICL 1900 series. \r\n\r\nThe improved version of the Bloodhound
  missile required a complex sequence of \r\npre-launch operations involving calculations
  and decisions. It was realised that \r\nthese were more suited to a digital rather
  than an analogue computer, if one \r\ncould be built that that was sufficiently
  fast and reliable. A high degree of \r\naccuracy was not required for most of the
  calculations, so a short word length \r\nwould suffice. Furthermore, the program
  was unlikely to be changed when the \r\nequipment was in service, so, for the sake
  of reliability, a fixed store was \r\npreferable. \r\n\r\nThe Argus Computer\r\n\r\nA
  design was undertaken based on these requirements. More storage was needed for \r\nboth
  program and data. A core store was used for the latter, while the plug \r\nboard
  used for the program was replaced by a patent magnetic store using ferrite \r\nrods,
  which will be described later. This also held constants, used in the \r\ncalculations.
  \r\n\r\nThe word length could be either 12 or 24 bits and the clock frequency was
  \r\n500KHz. The machine operated in a serial/parallel mode - two bits in parallel.
  \r\nFor a 12-bit word, this was a reasonable compromise between speed and cost when
  \r\nstore access times were taken into account, and resulted in a 20 microsecond
  \r\naddition time. \r\n\r\nThe order code was based on that of Pegasus, because
  there was already a body of \r\nexperience with that machine, and because the Ferranti
  London Computer Centre \r\nwas concerned with promoting the machine for process
  control. For example, \r\nBabcock and Wilcox, a prospective Argus customer, was
  a keen Pegasus user. \r\n\r\nThere were eight accumulators, one of which was zero.
  The instruction was 24 \r\nbits long and the instruction format was similar to that
  of Pegasus. The first \r\n12 bits (the N address), addressed the main store, the
  next three (the X \r\naddress), an accumulator, the next six specified a function,
  the next three (the \r\nM address), a modifier, and the last bit (the C bit) indicated
  whether the \r\nnumber was an instruction or one of two 12-bit constants, selected
  by the least \r\nsignificant address bit. So only the first 2048 locations in the
  program store \r\nwere available for constants. \r\n\r\nThe main differences between
  the Pegasus and the Argus instruction set is that \r\nthe latter had special \"30\"
  type orders for input and output and the \"40\" type \r\norders involved literals,
  not counters. Also Argus had special jumps for \r\ninterrupts - \"70\" type orders.
  \r\n\r\nAs in Pegasus, the accumulators could be addressed either as registers,
  using \r\nthe N address, or as accumulators, using the X address; there was, however,
  a \r\ndifference. Registers 0 to 5 corresponded to accumulators with the same \r\naddresses,
  but accumulator 6 was 24 bits long and consisted of registers 6 and \r\n7. Likewise,
  accumulator 7 was a double length one, consisting of accumulators 4 \r\nand 5. Double
  length arithmetic was automatically used when either of these long \r\naccumulators
  was addressed. Accumulator 6 was also called P, with accumulators 4 \r\nand 5 being
  called P1 and P2 , respectively; while accumulator 7 was also called \r\nQ. Accumulators
  0 to 3 could also be used as address modifiers. \r\n\r\nThe serial/parallel arithmetic
  used two adder/subtractors with ripple-through \r\ncarry, so the delay in the carry
  path was kept as short as possible. The flip-\r\nflops were triple-entry types with
  three different shift pulse inputs to allow \r\nleft shift, right shift and double
  right shift for addition and subtraction. \r\n\r\nThe multiplier was a modification
  of the Booth multiplier used in the \r\nexperimental machine. The Booth method examines
  the least significant bit p$_n$ \r\nof the multiplier together with an extra bit
  p$_{n+1}$, initially set to 0, and, \r\naccording to the values of these two bits,
  performs the operations shown in \r\nTable 1. \r\n\r\npn pn+1 Operation\t0 0 Shift
  R 0 1 Add multiplicand,shift R 1 0 Subtract .. .. .. .. 1 1 Shift R Table 1: Booth
  short-cut multiplier\r\n\r\nIn the Argus method, the bits p$_{n-1}$, p$_n$ and p$_{n+1}$
  are examined with \r\nresults given in Table 2. Use is made of both single and double
  right shift. \r\n\r\npn-1 pn pn+1 Operation\t0 0 0 Double shift 0 0 1 Add, Double
  Shift 0 1 0 Add, .. .. .. .. 0 1 1 Shift, Add, Shift 1 0 0 Shift, Subtract, Shift
  1 0 1 Subtract, Double Shift 1 1 0 Subtract .. .. .. .. 1 1 1 Double Shift Table
  2: Argus Multiplier (Modified Short-cut)\r\n\r\n\r\nLike the Booth method, the Argus
  method worked with both positive and negative \r\nnumbers and gave a useful increase
  in speed as well as a lower spread in \r\nmultiplication time, which was important
  in control applications. \r\n\r\nMethod\tNumber of Add & Subtract Operations Average
  MaximumBooth n/2 nArgus n/3 n/2Table 3: Relative Speed\r\n\r\nArgus used a non-restoring
  divider, which would operate with both positive and \r\nnegative numbers. The dividend
  was held in the accumulator P, the divisor in \r\nregister D and the quotient in
  register QR. \r\n\r\nThe bits of divisor and dividend were compared, starting at
  the MS end. If they \r\nwere the same, D was subtracted from P and a least significant
  1 added to QR. If \r\nthey were different, D was added to P and a least significant
  1 subtracted from \r\nQR. After either operation, P and D were shifted one place
  left. Finally, if the \r\nsigns of the divisor and dividend were different, 1 was
  added to the quotient in \r\nQR. \r\n\r\nDivision could be rounded or unrounded
  and, as in Pegasus, the dividend could be \r\neither a double or a single length
  number. This held when either 12-bit or 24-\r\nbit arithmetic was used. \r\n\r\nSquare
  root was programmed using either Newton-Raphson or the digit by digit \r\nmethod,
  while Chebyshev polynomials were used for trigonometric and other \r\ntranscendental
  functions. \r\n\r\nAs previously mentioned, data was held in a core store. This
  was in modules of \r\n1024 12-bit, plus parity, words and could be increased up
  to a maximum of 3072 \r\nwords. It was bit-organised, that is, it used 3-D selection
  - X, Y and Inhibit. \r\nThe cycle time, using state-of-the-art cores and transistors,
  was six \r\nmicroseconds. It was one of the earliest transistor-driven core stores
  and many \r\nproblems had to be overcome. The transistors had to be fast enough,
  they had to \r\nhandle large currents and they had to stand the relatively large
  voltage \r\nproduced by the back emf of the magnetic cores, which were conflicting
  \r\nrequirements. \r\n\r\nSince there was some doubt about the long-term reliability
  of the core store \r\nunder adverse conditions and the program was seldom altered
  in control \r\napplications, program and constants were held in a fixed store consisting
  of \r\nferrite rods the size of pencil leads. These provided magnetic coupling between
  \r\na set of drive tracks and an orthogonal set of read tracks, one for each bit
  in \r\nthe word, etched on a double-sided printed circuit. Current pulses, selected
  by \r\na diode matrix, were sent through the drive tracks in turn; and the read
  tracks \r\nonly picked up a signal when a ferrite peg was placed in a hole at the
  \r\nintersection and disturbed the symmetry of the magnetic field. \r\n\r\nThe store
  was engineered as a set of trays, each holding 64 25-bit words, \r\nincluding parity,
  together with the decoding diode matrix and transformers. The \r\nferrite pegs had
  little rubber caps to make them easier to handle and were held \r\nin position by
  a perspex cover - another source of trouble, for it used to get \r\nelectrified
  and pull the little pegs out when it was removed. The store \r\nconsisted of a box
  of 16 such trays, together with their associated drive and \r\nread circuits, making
  1024 words total. The 12-bit address could accommodate \r\nfour such stores, if
  required. \r\n\r\nThis store was rather bulky, so another magnetic fixed store was
  developed for a \r\nmilitary application where size was important. It was not used
  in Argus, as its \r\ndevelopment came too late, but it is included here for historical
  interest. \r\n\r\nIn this store the ferrite pegs were replaced by square coupling
  loops, which \r\ncould be cut to prevent induced eddy-currents coupling to the read
  tracks. The \r\nloops were arranged on a thin fibre-glass printed circuit, which
  was identical \r\nin size and shape to a Hollerith punched card, so that the loops
  could be cut \r\nwith a modified card punch. Each card contained a 12 by 25 array
  of 300 loops, \r\nrepresenting 12 25-bit words. \r\n\r\nThe store had 4096 words
  and 342 cards were required to store them, which \r\nsomewhat complicated the decoding.
  The cards were arranged in four shelves of 86 \r\ncards, the last one having only
  four usable words, and were held in close \r\nproximity to the drive and read tracks
  by pressure pads in such a way that that \r\nthey could be easily replaced. There
  were 1024 drive tracks, each one driving \r\nfour cards - one on each shelf. \r\n\r\nThere
  were four long flexible printed circuit read tracks and four sets of read \r\namplifiers,
  one for each shelf. These were selected with two bits of the \r\naddress, the other
  10 bits selecting the drivers. The read tracks were arranged \r\nin concertina fashion,
  and such was their length that the time delay \r\nnecessitated four different strobe
  times. \r\n\r\nThe store was only about a third of the size of an equivalent ferrite
  peg store \r\nand card punching was assisted by a Pegasus program. Only one production
  model \r\nwas ever built. \r\n\r\nFor process control applications requiring more
  data storage, there was also an \r\noptional magnetic drum with a capacity of 50,000
  words. \r\n\r\nThe Argus monitor panel displayed the contents of the accumulators
  and that of \r\nany store location, selected by the rotary switches; it also had
  hand switches \r\nfor manual intervention and testing. \r\n\r\nArgus had two types
  of interrupt. Interrupt was a novel concept in 1957, and \r\nArgus was possibly
  the first machine to use it outside the US. \r\n\r\nIn the previous experimental
  machine, the sampling time for the digital servos \r\nwas not constant, as a result
  of the variable multiplication time of the Booth \r\nmultiplier, among other things,
  and this made system analysis difficult. When a \r\nprogram contained conditional
  jumps, the situation was much worse and some \r\nmethod of getting a constant sampling
  time was called for. \r\n\r\nThe method adopted in Argus was to use a timer, which
  consisted of a register \r\nthat was decremented every other word time (40 microseconds),
  independently of \r\nother operations. When the timer register became zero, the
  program was \r\ninterrupted, the number in the instruction counter stored in a link
  register and \r\nthe instruction register set to address 0, which was the start
  of the interrupt \r\nroutine. The latter stored the contents of all the registers
  in a reserved part \r\nof the core store and then jumped to a subroutine that performed
  the required \r\noperation. At the end of the subroutine, the interrupt routine
  restored all the \r\nregisters, incremented the number in the link register and
  transferred it to the \r\ninstruction counter so that the main program could continue
  where it left off. \r\n\r\nThus it operated in a very similar way to interrupt routines
  in more modern \r\nmachines. By using other registers as counters several different
  interrupt \r\nsubroutines could be called at times that were multiples of the shortest
  time. \r\nThis was a very useful facility for process control. \r\n\r\nAnother type
  of interrupt was the core store interrupt (CSI), which is now known \r\nas DMA (direct
  memory access). It was used to transfer blocks of data directly \r\nto and from
  the core store independently of the arithmetic unit when the latter \r\nwas involved
  with multiplication, division and other operations not requiring \r\nstore access.
  Asynchronous data to and from peripheral equipment was usually \r\nhandled in this
  way. \r\n\r\nA variety of peripheral equipment could be attached to Argus. Both
  the military \r\nand commercial applications involved input and output data in various
  forms: \r\nangular data from digitisers, analogue voltages, single bit on/off data
  and \r\ndisplay information, to name a few. In process control applications, there
  was \r\nconsiderable input and output data as well as a requirement to handle paper
  or \r\nmagnetic tape and to provide printed output, or output in analogue form for
  \r\ndriving chart recorders. \r\n\r\nSolid state switching was used to select digital
  and analogue inputs and \r\noutputs, which were to 10-bit accuracy, but thermocouple
  and other low level \r\ninputs were selected by relays. Because of the delay in
  selecting and digitising \r\ninputs, selection and reading in the data were arranged
  to be separately \r\nprogrammable operations, so that the computer could carry on
  with other \r\noperations and not waste time waiting. Also a \"Jump on Busy\" order
  allowed the \r\ncomputer to handle asynchronous outputs, like the printer, without
  waiting. \r\n\r\nOnce the transistor failures had been eliminated by switching from
  a soldered to \r\na welded can, and the printed circuit connectors, whose contacts
  were brittle \r\nand prone to spreading, replaced, the machine achieved a high degree
  of \r\nreliability, as a result of the technology used. This was further improved
  by a \r\nchecking program that was periodically run as an interrupt, which, if it
  \r\ndetected a failure, could sound an alarm and isolate the computer from the \r\nplant.
  \r\n\r\nArgus Process Control Applications\r\n\r\nThe first application of Argus
  was the military one for which it was designed - \r\nthe Bloodhound missile pre-launch
  calculations. One of the problems in that \r\napplication is a common radar one,
  that of smoothing and predicting an aircraft \r\ntrack. The radar information is
  in polar co-ordinates - range and bearing - \r\nand must first be converted to X-Y
  co-ordinates, or latitude and longitude. \r\n\r\nRadar data is usually noisy: it
  can be smoothed by fitting a straight line or a \r\nlow order polynomial to it by
  the method of least squares. The easiest way to do \r\nthis is by use of orthogonal
  polynomials, and the noise reduction of the \r\nsmoothing formulae so obtained is
  given by the sum of the squares of the \r\ncoefficients. Taking an odd number of
  points and estimating the midpoint by \r\nmeans of a smoothing formula will always
  result in the greatest noise reduction: \r\nthe greater the number of points and
  the lower the order of the polynomial the \r\nbetter, in this respect. \r\n\r\nUnfortunately,
  such an estimate of position is out of date; if one wants to \r\nobtain an estimate
  of the latest point, or even one point ahead, to allow for \r\nthe computation time,
  a large number of points must be used in the smoothing \r\nformula to obtain a useful
  reduction in noise. \r\n\r\nThe first process control application of Argus was to
  control a soda ash plant \r\nfor ICI at Fleetwood. Following discussions between
  Ferranti and ICI at \r\nNantwich, Alan Thompson of ICI realised that the use of
  a computer could be an \r\neconomical solution if it not only took a supervisory
  role - printing plant and \r\nalarm data and calculating set points - but was also
  able to replace all the \r\npneumatic 3-term controllers, of which there were just
  over a hundred. \r\n\r\nThe plant was a fairly docile one, so if the computer failed,
  as long as the \r\ncontrol valves were isolated, it could coast along without danger
  or too much \r\nloss of efficiency. Three-term controllers take a weighted sum of
  terms which \r\nare proportional to the error and the differential and integral
  of it. The last \r\ntwo terms deal with stability and drift respectively. \r\n\r\nExperiments
  with sampling servos and programming transfer functions to stabilise \r\nthem, using
  the z-transform, had already been conducted with the small computer \r\nthat preceded
  Argus. It was a revolutionary way of using a digital computer, \r\nbecause time
  was a parameter - as it is in a digital filter. Incidentally, a \r\nsmoothing formula
  is really a low-pass filter and its frequency response can be \r\ncalculated by
  z-transform methods. \r\n\r\nThe integral term could be obtained by summation instead
  of integration, \r\nalthough this needed to use double length arithmetic in order
  to obtain the \r\nnecessary accuracy. The rate of change of error was found by taking
  the \r\ndifference of two consecutive sample values, but noise due to quantisation
  and \r\nother sources necessitated smoothing the data. A smoothing formula like
  that \r\nused for the radar application would have used too much storage when many
  loops \r\nwere to be controlled, so the solution was to use a recursive smoothing
  formula. \r\nPut simply, this involved taking a fraction K of the latest difference
  plus a \r\nfraction 1 - K of the previous value of the rate as the new value for
  the rate, \r\ngiving the following smoothed rate term: \r\n\r\nyn = K(xn - xn-1)
  + (1 - K)yn-1 \r\n\r\nThe degree of smoothing depended on the value of K - the noise
  was reduced by a \r\nfactor K/(2 - K). For example, with K=1/8, the noise was reduced
  to 1/15, as \r\nwith a 15-point moving average filter, yet required the storage
  of only one \r\nextra value. The filter inserted a first order lag in the system,
  with time \r\nconstant T/[(-ln(1 - K)], T being the sampling time. For T=5 seconds
  and \r\nK=1/8, the time constant was about 37.5 seconds, which was small compared
  with \r\nthat of the plant and did not affect loop stability. \r\n\r\nThe settings
  of the valves that had to be controlled were calculated \r\nsequentially every second
  for the fast loops - half of them - and every five \r\nseconds for the remainder.
  The valves were operated pneumatically; air was \r\neither admitted or exhausted
  at a controlled rate using solenoid valves. This \r\nonly required two bits of information,
  so that the control signals for six \r\nvalves were packed into one 12-bit word.
  The positions of the main valves, which \r\ntook about 10 seconds to stroke, were
  measured with a potentiometer to 1% \r\naccuracy and examined 20 times a second
  so that they did not overshoot the dead \r\nspace. This operation used 70% of the
  computer time, but left sufficient time \r\nfor the other calculations, which were
  carried out less frequently. \r\n\r\nIsolating the computer from the plant when
  the checking program found a fault \r\nwas considered to be too drastic in certain
  cases, for example where the trouble \r\nwas an instrumentation failure. An improvement
  was simply to indicate where the \r\nfault lay, so that the affected part of the
  plant could be controlled either \r\nmanually or by conventional methods; the isolation
  procedure then being used \r\nonly for computer faults, which happened rarely. \r\n\r\nThe
  computer was installed at Fleetwood in 1962, but after two years, the plant \r\nwas
  shut down and the computer was used to control another similar plant at \r\nWinnington
  in Cheshire. Then in 1980, after 18 years of service, and still in \r\nworking order,
  it was removed to the Science Museum in London. \r\nEditor's Note: this article
  is based on the talk given by the author to the \r\nNorth West Group of the Society
  at the Manchester Museum of Science and Industry \r\non 10 February 1998.\r\n\r\nTop
  \ Previous  Next Obituary: Peter Hunt\r\nPeter Hunt, a pioneer of large-scale software
  development, died in February aged \r\n70. \r\nPeter became one of the first UK
  computer users when he was employed, in the \r\nearly fifties, in the Aerodynamics
  Department of the de Havilland Aircraft \r\nCompany. During his three years there
  he learnt how to program Edsac, the Pilot \r\nAce, Pegasus and the Elliott 401,
  and developed a variety of aircraft \r\napplications. \r\n\r\nIn 1955 he was recruited
  by Ferranti, initially to work on aircraft applications \r\nfor Pegasus. In the
  hope of stimulating sales of this computer, he developed \r\nsome of the earliest
  standardised packages. He was later responsible for \r\nsoftware and customer support
  on Perseus, the first Ferranti commercial \r\ncomputer. In the early 1960s, as Head
  of the Lily Hill Laboratories in \r\nBracknell, he was responsible for the project
  management of two of the largest \r\ncontracts undertaken at that time by the UK
  computer industry, the Orion 2 \r\nsystem at the Prudential and the Atlas 2 system
  at the UK Atomic Energy \r\nAuthority. \r\n\r\nFollowing the takeover of the Ferranti
  computer division by ICT in 1964, he was \r\nmade Head of Systems Development Organisation,
  responsible for developing a \r\nportfolio of systems and application software for
  the 1900 series. Under his \r\ninspirational leadership and sound project management
  more than 1000 programmers \r\nproduced more than 100 software products, and as
  a result ICL won a Queen's \r\nAward for Industry in 1968 \"for technical innovation
  in the production of \r\nsoftware\". Peter gave a talk to the Society on this subject
  at our 1900 seminar \r\nat the Science Museum in May 1996. \r\n\r\nIn 1968 Peter
  left ICT (which had by then become ICL) to take up a position as \r\nmanaging director
  of the UK branch of Leasco Software. Over the next 12 years \r\nPeter built the
  company up to become one of the most influential of the early UK \r\nsoftware houses.
  Leasco Software specialised in real time software projects, \r\nmany of which involved
  pioneering communications developments. Peter was also \r\nchairman for four years
  of sister company Leasco Response, which operated a \r\ntimesharing bureau service.
  \r\n\r\nIn 1980 he left Leasco to operate as an independent consultant. During his
  later \r\nyears he also developed a practice as an expert witness in legal cases
  \r\nconcerning computer software in both the UK and the US.\r\n\r\nTop  Previous
  \ Next Society Activity\r\nSmall-Scale Experimental MachineChris Burton \r\n\r\nAfter
  moving the machine from the University to the Museum of Science and \r\nIndustry
  in Manchester at the end of February, we continued to improve \r\nreliability and
  added various authentic details, for example some special \r\nstabilised power units
  and the correct Monitor CRT EHT unit. Other cosmetic \r\nimprovements such as signwriting
  took place. The Remote Monitor was improved so \r\nthat it could be incorporated
  in the barrier separating the public from the \r\nmachine. A special comparator
  unit was designed and wired in to help find \r\ntransient faults in the three CRT
  units. Experience helped us to optimise the \r\nsetting up of the stores so as to
  be reasonably reliable, giving program runs of \r\nhalf an hour or more between
  failures. \r\n\r\nThere was intense activity around us in the museum during the
  week starting 15 \r\nJune, as the galleries and supporting material for the SSEM
  were being prepared. \r\nThe official \"switch-on\" took place on 17 June, using
  a satellite video link \r\nfrom the museum to the Bridgewater Hall, where 1800 people
  saw the mssage \"HELLO \r\nWORLD 1948\" stored in the CRT tube and displayed on
  the monitor. \r\n\r\nBy 19 June, the main CRT store had suddenly badly deteriorated,
  and would not \r\nstore correctly. Intensive work over the next two days could not
  identify what \r\nhad changed, so that by Sunday 21 June - the actual 50th anniversary
  - we felt \r\nthe store was not reliable enough to get through the day's events.
  I therefore \r\nhad to declare that for the day we had bypassed the main store.
  The machine was \r\nformally handed over to the safekeeping of the museum, and then
  Tom Kilburn and \r\nGeoff Tootill re-ran the first program at 1115, as they had
  done half a century \r\nbefore. We thereby met our goal in spirit if not to the
  letter. In the afternoon \r\nof 21 June Sebastian de Ferranti made the awards to
  the winners of the \r\nprogramming competition. This was the last of the week's
  events. \r\n\r\nThe substantial part of our project is now complete. There is a
  great deal of \r\ndocumentation still to finish, and we have to find out what has
  happened to the \r\nmain store and fix it. We also have to work out a way of maintaining
  the machine \r\nand demonstrating it to the public, without the team feeling it
  has a job for \r\nlife! \r\n\r\nTo have got this far is a stunning tribute to project
  team members Charlie \r\nPortman, Ken Turner, Keith Wood, George Roylance, Bill
  Purvis, Adrian Cornforth \r\nand Suzanne Walker, who have collectively put in nearly
  11,000 hours of \r\nvoluntary effort, and who have brought tremendous credit to
  the CCS. In material \r\nand supportive terms, the project has been made possible
  by the £150,000-\r\nworth of sponsorship from ICL, by the University of Manchester
  and the Museum of \r\nScience and Industry, and by numerous individuals. \r\n\r\nPegasus
  Working PartyLen Hewitt\r\n\r\nSince the last Pegasus Working Party report in Resurrection
  issue 18 in autumn \r\n1997, work has continued at fortnightly intervals. We have
  made remarkable \r\nprogress, with some setbacks on the way. Pegasus has worked
  consistently well, \r\nand we have cleared a number of intermittent faults which
  had plagued us for a \r\nlong time. \r\n\r\nIn February we started to test the spare
  packages in their number order in the \r\npositions recommended in the maintenance
  manual. I had to go to the USA in the \r\nmiddle of the month, and at the last meeting
  I attended before I left we had a \r\nmajor disaster. \r\n\r\nWe had got up to testing
  the Type 13 Clock/Reset package in position 10C. All \r\nprevious testing had been
  done with HT on when removing and replacing packages. \r\nThings had been going
  so well that I had forgotten the significance of the power \r\nvalves in the Type
  13 package, and the heavy currents dissipated. This problem \r\ntook a few meetings
  to resolve, as it was a multiple fault which affected more \r\nthan the package
  we were testing. The fact that the problem arose on Friday 13th \r\nwas just a coincidence!
  \r\n\r\nWe have now completed testing the spare packages, and moved on to testing
  the \r\ndrum. We have had consistent failures on the drum tests for many years,
  and were \r\nconcerned that it was a drum surface problem and that we would have
  to swap head \r\nconnections under the drum covers to sort the problem out. In fact
  by swapping \r\npackages and then replacing some of the switching diodes in the
  read switch \r\npackages we were able to establish that the drum surface was not
  the problem. \r\n\r\nWe have now run through the complete drum tests several times,
  experiencing just \r\nan occasional failure on track zero. I believe by doing some
  more work on the \r\ndrum packages we should be able to get even better reliability.
  \r\n\r\nOur next major task is to get the machine working with the marginal voltages
  \r\nreduced. We were advised at the last CCS Committee Meeting that Pegasus could
  be \r\nin the \"Making of the Modern World\" gallery which the Science Museum is
  planning \r\nto open in the year 2000 - this was very heartening news. \r\n\r\nI
  would like to thank the members of the Working Party - Derek Milledge, Martin \r\nWingstedt
  and Peter Holland - for their support, and also Chris Burton, who has \r\nalways
  had time to discuss problems even though he has been fully occupied with \r\nthe
  Baby rebuild project. \r\n\r\nSimulators\r\nSimulators for a variety of historic
  computers including Edsac, Elliott 903, \r\nPegasus, the Manchester University Small-Scale
  Experimental Machine and Zebra\r\ncan be found at our FTP site. Access details are
  on the next page.\r\n\r\nTopPrevious NextFTP, Web and E-mail Addresses\r\nThe Society
  has its own World Wide Web (WWW) site: it is located at\r\nhttp://www.cs.man.ac.uk/CCS/.
  \r\nThis is in addition to the FTP site at \r\nftp.cs.man.ac.uk/pub/CCS-Archive.
  \r\nThe pages of information at our Web site include information about \r\nthe SSEM
  rebuild project as well as selected papers from \r\nResurrection. \r\nFull access
  to the FTP archive is also available for downloading \r\nfiles, including the current
  and all past issues of  Resurrection \r\nand simulators for historic machines.\r\n\r\nMany
  readers will also be interested in WWW sites run by other bodies \r\nconcerned with
  the history of information technology. \r\nThe Universal Resource Locators for a
  few of these organisations \r\nare as follows:\r\n\r\nBletchley Park (contains information
  on Colossus) \r\n \r\nhttp://www.cranfield.ac.uk/CCC/BPark/ \r\nManchester University
  (for its early computers) \r\n\r\nhttp://www.cs.man.ac.uk/mark1/ \r\nScience Museum
  \r\n\r\nhttp://www.nmsi.ac.uk/ \r\nNational Archive for the History of Computing
  \r\n\r\nhttp://www.man.ac.uk/Science_Engineering/CHSTM/nahc.htm \r\nThe Virtual
  Museum of Computing (a rich source of links to other computer history resources)
  \r\n\r\nhttp://www.comlab.ox.ac.uk/archive/other/museums/computing.html \r\nReaders
  of Resurrection who wish to contact committee members \r\nvia electronic mail may
  do so using the following addresses.\r\n\r\n[The printed version contains the email
  addresses of Committee members]\r\n\r\nTopPrevious NextForthcoming Events\r\n5-6
  September 1998, and fortnightly thereafter Guided tours and\r\n exhibition at Bletchley
  Park, price £3.00, or £2.00 for \r\nconcessionsExhibition of wartime code-breaking
  equipment and procedures, \r\nincluding the replica Colossus, plus 90 minute tours
  of the wartime buildings\r\n\r\n29 September 1998 North West Group meeting \"The
  Early Days of the NCC\"\r\n\r\n20 October 1998 North West Group meeting \"From Freelance
  Programmers to F1 Group plc\"\r\n\r\n24 November 1998 North West Group meeting \"The
  Distributed Array Processor\" \r\n\r\nThe North West Group meetings will take place
  in the Conference room at the \r\nManchester Museum of Science and Industry, starting
  at 1730. \r\n\r\nFor information on London meetings, readers should refer to the
  insert enclosed \r\nwith this issue. \r\n\r\nQueries about London meetings should
  be addressed to George Davis on 0181 681 \r\n7784, and about Manchester meetings
  to William Gunn on 01663 764997. \r\n\r\nTopPrevious NextCommittee of the Society\r\n[The
  printed version carries contact details of committee members]\r\nChairman  Brian
  Oakley CBE FBCSVice-Chairman  Tony Sale FBCSSecretary  Hamish Carmichael FBCSTreasurer  Dan
  HaytonScience Museum representative  Doron Swade CEng MBCSChairman, Elliott 803
  Working Party  John SinclairChairman, Elliott 401 Working Party  Chris Burton  CEng
  FIEE FBCSActing Chairman, Pegasus Working Party  Len Hewitt MBCSChairman, DEC Working
  Party  Dr Adrian Johnstone CEng MIEE MBCSChairman, S100 bus Working Party  Robin
  ShirleyChairman, Turing Bombe Working Party  John Harper CEng MIEE MBCSChairman,
  North West Group  Professor Frank Sumner FBCSMeetings Secretary  George Davis CEng
  FBCSEditor, Resurrection  Nicholas EnticknapArchivist  Harold Gearing FBCSDr Martin
  Campbell-KellyProfessor Sandy Douglas CBE FBCSDr Roger Johnson FBCSGraham Morris
  FBCSJohn Southall FBCSEwart Willey FBCS\r\n\r\nTopPrevious articleAims and objectives\r\nThe
  Computer Conservation Society (CCS) is a co-operative venture \r\nbetween the British
  Computer Society, the Science Museum of London \r\nand the Museum of Science and
  Industry in Manchester.\r\nThe CCS was constituted in September 1989 as a Specialist
  Group of \r\nthe British Computer Society (BCS). It thus is covered by the Royal
  \r\nCharter and charitable status of the BCS.\r\nThe aims of the CCS are to\r\nPromote
  the conservation of historic computers and to identify existing \r\ncomputers which
  may need to be archived in the future\r\nDevelop awareness of the importance of
  historic computers\r\nEncourage research on historic computers and their impact
  on society\r\nMembership is open to anyone interested in computer conservation and
  \r\nthe history of computing.\r\nThe CCS is funded and supported by a grant from
  the BCS, fees from \r\ncorporate membership, donations, and by the free use of Science
  Museum \r\nfacilities. Membership is free but some charges may be made for \r\npublications
  and attendance at seminars and conferences.\r\nThere are a number of active Working
  Parties on specific computer \r\nrestorations and early computer technologies and
  software. Younger people \r\nare especially encouraged to take part in order to
  achieve skills transfer.\r\nThe corporate members who are supporting the Society
  are ICL and Vaughan Systems.\r\n\r\nResurrection is the bulletin of the Computer
  \r\nConservation Society and is distributed free to members. Additional \r\ncopies
  are £3.00 each, or £10.00 for an annual \r\nsubscription covering four issues. Editor
  - Nicholas Enticknap\r\n    Typesetting - Nicholas Enticknap Typesetting design
  - Adrian Johnstone\r\n    Cover design - Tony SalePrinted by the British Computer
  Society\r\n      © Copyright Computer Conservation SocietyComputerRESURRECTION The
  Bulletin of the Computer Conservation SocietyISSN 0958 - 7403 Number 20 Summer 1998Nicholas
  Enticknap, EditorThe major event since issue 19 of Resurrection has unquestionably
  been the \r\ngolden jubilee of the first operational stored program computer, which
  was \r\ncelebrated with great enthusiasm in Manchester in June. The major events
  \r\nincluded the \"Launch Event\" at the Bridgewater Hall on 17 June, the Golden
  \r\nAnniversary Conference which spanned the next two days, and the handover of
  the \r\nrebuilt SSEM to the Museum of Science and Industry on the anniversary itself,
  21 \r\nJune. These events were attended by just about everybody connected with Manchester
  \r\ncomputing past and present. Sir Freddie Williams was represented by his widow,
  \r\nLady Williams, who operated the switch that formally brought the replica SSEM
  to \r\nlife, in front of an audience of 1800 people in the Bridgewater Hall. Professor
  \r\nTom Kilburn is happily still with us - a mere stripling of 76 - and he gave
  \r\nboth this audience and the one that attended the Golden Anniversary conference
  \r\nhis reminiscences of the days leading up to 21 June 1948. All of these events
  are reviewed in more detail in the following pages. We are \r\nalso particularly
  pleased to publish an article which provides an original \r\nResurrection contribution
  to the anniversary. It was written by Geoff Tootill, \r\nand describes the detective
  work put in by himself and Professor Kilburn in re-\r\ncreating the world's first
  operational program in the exact form in which it ran \r\non that epochal day 50
  years ago. Geoff's article includes complete listings of \r\nboth the earliest surviving
  form of this program (dating from a month after the \r\nfirst run) and of the original
  version as reconstructed. Within 15 years computing had advanced so fast that it
  was possible for the \r\nworld's leading computer manufacturer, IBM, to launch a
  complete range of \r\ncompatible machines on 7 April 1964 - another key date in
  the history of \r\ncomputing. In this issue, Peter Titman recalls the thinking and
  decision-making \r\nprocesses that lay behind this \"bet your company\" decision.
  By then it was clear that the major market for computers lay in data processing
  \r\nrather than computation. But there were other important application areas. \r\nMaurice
  Gribble completes the feature articles in this issue with a look at how \r\nFerranti
  applied computer technology to industrial process control.The Annual General Meeting
  on 29 May approved a change to the constitution of \r\nthe Society which provides
  formal recognition of our close links with the Museum \r\nof Science and Industry
  in Manchester. -101010101-Society Chairman Brian Oakley highlighted three achievements
  of the CCS year in \r\nhis address to the AGM: the reconstruction of the Manchester
  University Small-\r\nScale Experimental Machine; the progress made on the Bombe
  project; and the \r\nsuccessful move of the Pegasus from the old canteen of the
  Science Museum to \r\nBlythe House. -101010101-The AGM re-elected all current officers
  and committee members of the Society. -101010101-The London Science Museum plans
  to feature the CCS Pegasus as the highlight of a \r\nnew exhibition which is scheduled
  to open in the year 2000. -101010101-Nortel has made a generous sponsorship donation
  to the Bombe Proj\\-ect. A large \r\ncheque was handed over at a formal ceremony
  on 12 June. -101010101-The highlight of this event was the decryption of an original
  wartime German \r\ncoded message, sent on 1 November 1944. The message was of course
  decoded at the \r\ntime, but no record was kept of the Enigma settings used to do
  it. Tony Sale \r\nused the Bombe simulator to find these settings, and then configured
  an actual \r\nEnigma to decrypt the message. Then, to prove the concept, he successfully
  \r\ndecoded a further message sent later the same day. -101010101-We are grateful
  to everybody who responded to our appeal in the last issue for \r\nvolunteers to
  help with the Bombe Project. This has allowed the team to complete \r\nthe database
  construction and to make very substantial progress on the CAD work. -101010101-Adrian
  Johnstone has reassumed the chairmanship of the DEC Working Party, and is \r\nfocussing
  the team's efforts on a PDP-11/34 used at one time in the policing of \r\nthe nuclear
  test ban treaty. -101010101-Three meetings were held in London during the spring.
  The first, on 12 March, \r\nsaw Donald Davies and Roger Scantlebury presenting on
  \"The Origins of Packet \r\nSwitching and the Early Arpa network\", and attracted
  an audience of 37. -101010101-This was followed by another seminar on a networking
  theme on 30 April, where \r\nBob Cooper spoke on \"The History of Academic Networking
  in the UK\". He was \r\nfollowed by Peter Kirstein, who gave a talk on \"The History
  of Arpanet and early \r\nInternet in the UK\". -101010101-Finally, following the
  AGM Brian Shackel addressed members on \"Human Factors - \r\n-101010101-Details
  of the North West Group meetings programme for the autumn can be found \r\nunder
  Forthcoming Events on page 44. Planning is also well advanced for three \r\nmeetings
  in early 1999: on \"The Leo Computer\" on 26 January; on \"Computers on \r\nDisplay\"
  on 23 February; and on \"The Transputer\" on 23 March. -101010101-The Committee
  of the Society has formulated a policy statement concerning \r\nprocedures for dealing
  with computers of historical interest that come to the \r\nSociety's attention.
  This is published in full below. \r\n\r\nNicholas EnticknapThe computer is now more
  than 50 years old. The golden jubilee was marked by a \r\nseries of celebrations
  in Manchester in the week leading up to the anniversary \r\non 21 June, which fell
  on a Sunday. Achievement it certainly was. The designers of the original were too
  busy \r\nbuilding it and getting it to work to have time to produce drawings or
  circuit \r\ndiagrams (lack of documentation has been a problem since the very dawn
  of the \r\ncomputing age!). Fortunately, Dai Edwards, who joined the computer team
  three months after the \r\nfirst program ran, did produce some detailed drawings
  while the SSEM was in the \r\nprocess of evolving into the first full-scale Manchester
  computer, the Mark I, \r\nand the notebook he used has survived. Chris Burton told
  the packed audience at \r\nthe launch ceremony, \"I mainly used that, and also Alec
  Robinson's photographs, \r\nwhich I scanned into a computer to work out the dimensions
  accurately\". Building the replica was the next problem, as the components used
  in it have \r\nbeen obsolete for many years. Despite that, Chris found that there
  are still \r\ndealers who maintain stocks of things such as thermionic valves and
  1940s-\r\nvintage cathode ray tubes. He added, \"The pushbuttons used to key in
  a program were originally used on \r\nSpitfires. They cost 3/11 [just under 20p]
  in 1953, and I got them for £30 \r\nin 1995\". The standard Post Office steel racks
  used to house these components \r\npresented more difficulty than anything: two
  of them eventually came \"from the \r\nbottom of a Shropshire garden\". The result
  of this reconstruction process was highly praised by Tom Kilburn, who \r\ndescribed
  the replica as \"not only identical in appearance, but identical in \r\nevery wire
  and every circuit. It would not be able to be differentiated from the \r\nBaby by
  any computer scientist\". Kilburn's only reservation was that the replica \r\nwas
  much cleaner than the original! Professor Kilburn recalled the events of 21 June
  1948 in two separate addresses, \r\none during the launch ceremony and the other
  during the Golden Anniversary \r\nconference which followed on 18-19 June. Most
  readers will know that the prime focus of the research conducted by \r\nWilliams
  and Kilburn at Manchester University during the immediate postwar years \r\nwas
  the development of the cathode ray tube as a memory device. By the autumn of \r\n1947
  they had got to the point where they could store 1024 bits for a period of \r\nseveral
  hours. \"At this stage\", said Kilburn, \"we had demonstrated that letters \r\ntyped
  in via a keyboard could be stored, but not digits arrived at as a result \r\nof
  computation. We needed a computer to do this.\" There was, of course, no such thing
  available in the shops at the time, so the \r\nteam had to build its own. That was
  the reason for building the SSEM. The story of the SSEM has been told many times:
  as Kilburn said, \"What new can \r\nbe said about the Baby?\". What is perhaps not
  so well known is the story of the \r\nprogram than ran on 21 June 1948 itself. \"The
  problem was to find the highest \r\nfactor of an integer. We selected this problem
  to program because it used all \r\nseven instructions, and also combinations of
  instructions. It was of no \r\nmathematical significance, but everybody understood
  it.\" As with the machine itself, there is no contemporary extant documentation
  of the \r\nprogram. It \"was actually written some time before, on the train going
  to \r\nDewsbury\", where Kilburn was living at the time. It was developed before
  the run \r\non 21 June 1948, and developed further before Geoff Tootill wrote down
  the \r\nlisting around a month later. Considerable detective work was needed to
  \r\nreconstruct the version actually used for the first run, and this is described
  \r\nin detail by Tootill elsewhere in this issue. It was left to Gordon Bell to
  put the successful construction and operation of \r\nthe SSEM into perspective.
  He pointed out that although the computer as \r\nunderstood today was conceived
  in 1946, \"until you actually do it it doesn't \r\nexist, it's just another idea\".
  Several teams of researchers were trying to \r\ntranslate the concept into reality:
  the Manchester team was the one that \r\nsucceeded and so kicked the computer industry
  into life. Bell also paid tribute to the CRT development work as a major necessary
  \r\nprecursor to the computer. \"It was really the Williams tube that got the machine
  \r\ngoing\". Why did Manchester get to the winning post first? Two principal themes
  emerged \r\nfrom talks given by various speakers. One of them was the enormous influence
  of \r\nthe Telecommunications Research Establishment (TRE) at Malvern. The CRT and
  subsequent SSEM projects had their genesis there, before Williams \r\nand Kilburn
  moved to Manchester. Kilburn revealed that \"we had got to the stage \r\nof decoding
  0 and 1 before we left Malvern, but we had to decide why it worked, \r\nand how
  they could be refined\". Alec Robinson paid tribute not only to \"the backlog of
  ideas\" which came from \r\nTRE, but also to the \"TRE techniques\" that were followed
  at Manchester. TRE \r\ninfluence was also valuable in insulating the design team
  from the problem of \r\npostwar shortages. Robinson was one of the few Manchester
  people who had not himself come from TRE \r\n(he was previously with English Electric).
  Geoff Tootill did, and he recalled it \r\nas \"the pre-eminent electronics R&D establishment
  during the war\", adding that \r\nit was \"a hothouse of talent\". Alumni included,
  apart from those that went to \r\nManchester, Maurice Wilkes (who went on to develop
  Edsac) and John Pinkerton \r\n(the chief designer of Leo). The other major factor
  was the leadership of Freddie Williams, acknowledged by \r\nManchester University
  Chancellor Lord Flowers in a tribute to his \"unique \r\ninspiration, skill and
  enthusiasm\" which \"was so vital in the early days of \r\ncomputing\". Geoff Tootill
  described him simply as \"the boffin's boffin\". Alec Robinson, who joined the Manchester
  team in 1947, recalled that \"The \r\natmosphere was very pleasant, and very informal
  compared to English Electric. \r\nProfessor Williams' way of working was to let
  people get on with it. He didn't \r\nleave you alone, though: he provided plenty
  of encouragement, and gave you a lot \r\nof ideas. \"There were very few people
  involved, so communications were easy. You were \r\nallowed to pursue your own ideas
  in a way that was very exciting.\" Readers who would like to see what the very first
  operational stored program \r\ncomputer looked like can inspect Chris Burton's replica
  at the Manchester Museum \r\nof Science and Industry.Geoff TootillThere is no contemporary
  record of the epoch-making program that started \r\ncomputing as we know it today.
  This article documents an attempt to discover the \r\nprecise form of that program.
  The attempt has almost certainly been successful, \r\nbut there is still one remaining
  unanswered question. Tom Kilburn and I have been trying to reconstruct the original
  version of the \r\nlittle Highest Factor program (or \"Table of Instructions\")
  Tom wrote in 1948, to \r\ntest the Small-Scale Experimental Machine (SSEM) at Manchester
  University. This \r\nwas the first program ever to run on a wholly electronic stored
  program \r\ncomputer. Until 1996, all that was extant of this program was the \"Amended
  Version\" \r\nrecorded in my lab notebook, which is dated 18 July 1948. By then
  I had improved \r\nthe version that ran on 21 June 1948. When I looked at this matter
  in 1975, at Simon Lavington's request, I remembered \r\nthat to produce the version
  in my notebook, I had altered the original to \r\nprevent the starting value for
  the trial factor being overwritten. I had also \r\ndetermined that I could save
  one or more instructions to improve Tom's code. In 1975, I couldn't remember how,
  and I wasn't able then to work out how to \r\n\"disimprove\" my version. To preserve
  the starting trial factor, and to avoid \r\nhaving to input both positive and negative
  versions of it, I would have added \r\nprobably four instructions: however, I then
  cut out two of Tom's instructions, \r\nmaking the surviving documented version just
  the known nett two instructions \r\nlonger than the original version. With a fresh
  look at all the data, including statements made in the contemporary \r\nletter by
  Williams and Kilburn to Nature, Tom and I now think we've \r\nlargely solved the
  problem. We discussed it in detail on 22 March 1996. I then dug out a (rather poor)
  \r\nphotocopy of my 1948 notebook, and rediscovered some notes we made when the
  SSEM \r\nfirst ran (see next page). I copied them, made some inferences from them,
  and \r\nsent a copy to Tom on 25 March. Tom and I had further talks on 27 and 29
  March, and agreed various points, which \r\nI incorporated in a revised document
  called \"Further Analysis and Comments\" \r\n(which follows).       c(?) 11011 10111
  00111(Note 1)2???(b)  00100 01000 11(Note 2)22 ~?(b) 00111 10111 01111 1-(Note 3)20
  Answer 11101000001(Note 4)Answer 1046   +1   in 1 minutea = 4537 (= 13 x 349)Problem        a=
  10011, 10110, 0014537line 19 c(a) 11100,01001,11011,11...      20 b     00011,10110,001004536      22
  c(b) 00010,01001,11011,11...(Note 5)line 20 Answer -1 should be 348101110101(Note
  6)line 24 should be blank(Note 7)CR no. should be 17(Note 8)Time 2 mins 25 secsAdditional
  notes made in 1996: these Operating Notes are taken from a \r\nphotocopy of the
  29th page of my 1948 notebook, which was headed \"Numbers used \r\nin Tom's Routine,
  21/6/48\". The first three lines are in my handwriting, and \r\nmost of the rest
  in Tom's. \"?\" denotes illegible in the photocopy.Note 1: c( ) means twos complement;
  this one is -a = 3141Note 2: This one is b1, of value a-1 = 3140Note 3: and this
  is -b1.Note 4: This is 1047, ie the highest factor of 3141;\r\n I think we worked
  this out beforehand, so we would know if the answer was right.Note 5: I infer we
  had to load b in 20, and -b in 22.Note 6: Tom bracketed this line with the next
  \r\ntwo and awarded them a tick to indicate that the machine had got the right answer.Note
  7: So line 24 held the remainder.Note 8: So the \"Stop\" instruction was in line
  17Tom, meanwhile, dictated his further thoughts onto a cassette tape on 29 March
  \r\n(this has now been transcribed under the name \"The First Program\"). He sent
  \r\ncopies of the tape to Chris Burton and myself, accompanied by a manuscript dated
  \r\n29 March and starting \"The most likely first program is...\". The program Tom
  had \r\nworked out is exactly the same as the one I had worked out independently,
  which \r\nI sent to him on 31 March. The two documents crossed in the post. What
  follows is my attempt at an exhaustive version of the analysis of the \r\navailable
  data and synthesis of the original \"Table of Instructions\".The \"Amended Version\"
  dated 18 July 1948 in my notebook consists of: \r\nInitialisation (lines 1-4)\r\nTrial
  subtraction, Test sign of difference and Jump back (lines 6-8)\r\nForm remainder
  r n, Test it and Stop if Zero (lines 9-13)\r\nForm new divisor b(n+1), Jump back,
  Load a (lines 14-19 and 5)\r\nFixed data (lines 20-24)\r\nVariable data (lines 25-27)I
  don't think we invented initialisation until a week or so after 21 June - the \r\nlavish
  idea of having instructions that would only be obeyed once seemed \r\ninefficient
  to me - but all the other elements must have been present in the \r\nOriginal Version.
  The 18 July 1948 version of the program is as follows (I wrote the explanatory \r\ncomments
  in italics in 1998): 1 -24,  C load -b1 2    c,  26store -b1 3 -26,  Cload +b1 4   c,  27store
  +b1 5 -23,  Cload a 6 Sub 27Trial subtraction 7 Testis difference negative? 8 Add
  20, Clstill positive, Jump back two lines 9 Sub 26overshot, so add back bn10   c,
  25store +r n11 -25,  Cload -rn12 Testis remainder zero?13 Stopyes14 -26,  Cno; load
  +bn15 Sub 21form b(n+1) = bn - 116   c,  27store b(n+1)17 -27,  Cload -b(n+1)18   c,  26store
  it19  22,  ClJump to line 5 initcurrentfinal20-321122423-a24b125-r nr N(=0)26--bn-bN27-bnbNThe
  Operating Notes show that, in the Original Version, at the \"Stop\", line 20 \r\ncontained
  one less than the \"Answer\", so, rather strangely, the \"Stop\" occurred \r\nafter
  \"Form new divisor\". Therefore after the end of the \"Trial subtractions\" \r\nthe
  sequence must have been: \"Form remainder\" (correction of the overshoot of \r\nthe
  \"Trial subtraction\" cannot be postponed, because the value of bn \r\nneeded would
  not still be available), \"Form new divisor\", \"Test remainder\", etc. Furthermore,
  the first \"Trial subtraction\" must have preceded \"Form new divisor\" \r\nin the
  Table of Instructions, because it seems we worked out b1 = a-1, \r\nand -b1 by hand
  and typed them in. If \"Form new divisor\" had preceded \r\nthe first \"Trial subtraction\",
  we could just have put b1 = a, and not \r\nbothered to work out -b1. So the first
  lines of the main loop were \"Load \r\na\", \"Trial subtraction\", \"Test sign of
  difference\", \"Jump back\". From the letter to Nature, we know that the Table of
  Instructions \r\nwas 17 in number, ignoring repetitions of the inner loop. From
  the \r\nOperating notes, we know that the \"Stop\" instruction was in line 17, and
  not \r\nimmediately after the \"Test\" instruction as in the Amended Version. This
  was \r\nvery likely intended to show with complete clarity that the original version
  \r\ncould be part of a larger program, with further instructions following line
  16 \r\nand replacing the \"Stop\". Tom concurs in his audio tape that this is what
  he had in mind. Similarly, he \r\nagrees that the first line of the program cleared
  the accumulator simply to \r\nillustrate a point of sound practice, even though
  it was quite unnecessary in \r\nthis case. The reconstructed original version that
  follows respects all these constraints. \r\nIt also uses the lines that follow the
  instructions consecutively (except for \r\nline 24) for the fixed and variable data
  indiscriminately, so I can believe that \r\nTom started with consecutive lines but
  altered the sequence a bit during program \r\ndevelopment. There may be other solutions
  to the problem of disimproving my Amended Version, \r\nbut I cannot find one that
  meets all the conditions. For example, storing (r n $-$ bn),\r\n then forming -b(n+1),
  then forming and testing r n, \r\nthen forming b(n + 1) could have 17 instructions,
  but leaves bN \r\nrather than b(N + 1) in line 20. I conclude that the result Tom
  and I \r\narrived at is at the very least a close approximation to the Original
  Version. Here is the original \"Table of Instructions\" as synthesised from this
  analysis \r\non 31 March 1996 (I wrote the italicised comments in 1998): 1 -18,  C
  clear accumulator 2 -19,  Cload +a 3 Sub 20Trial subtraction 4 Testis difference
  negative? 5 Add 21,  Clstill positive, Jump back two lines 6 Sub 22overshot, so
  add back bn 7    c, 24store +r n 8 -22, Cload bn 9 Sub 23form b(n+1) = bn - 110   c,
  20store b(n+1)11 -20, Cload -b(n+1)12   c,  22store it13 -24,  Cload -r n14 Testis
  remainder zero?15 25,  Clyes, Jump to line 1716 23,  Clno, Jump to line 2 (but see
  text)17 Stopload -b(n+1) initcurrentfinal18019-a-a20b1bn or b(n+1)b(N+1)21-322-b1-bn
  or -b(n+1)-b(N+1)23124-r nr N2516I do not have a copy of the Williams/Kilburn letter
  to Nature, but \r\naccording to Simon Lavington's book it included the following
  passage: \"The highest proper factor of 218 was found by trying in a single routine
  \r\nevery integer from (218-1) downwards... Thus about 130,000 numbers were \r\ntested,
  involving some 3.5 million operations. The correct answer was obtained \r\nin a
  52 minute run. The instruction table in the machine contained 17 entries.\" Tom
  says that \"operations\" meant store accesses. Furthermore, he agrees that \r\nlines
  17, 19, 20, 22 and 24 in the reconstructed version must be correct, to \r\nconform
  to the Operating Notes. Until recently I thought that on 21 June 1948 the digit
  period of the machine \r\nwas 8.5 microseconds, and the \"bar\" (ie the instruction
  time) was 1.2 \r\nmilliseconds. These two figures are consistent with each other,
  given that the bar\r\n was four \"beats\", with each beat being 32 digit \r\nperiods
  plus 4 digit periods for the timebase flyback. However, on the 23rd page of my notebook
  (which was probably dated 9 June 1948), \r\nI find the following: \"13.4 [million]
  operations, approx. Each takes 1.35 mS.\" \r\nOn 13 June a similar estimate of time
  also uses a figure of 1.35 milliseconds. \r\nThese cannot be measured times for
  the calculation, because the date is before \r\nthe computer started to work: the
  presumption is that they were measured bar \r\ntimes. This implies a digit period
  of 9.4 microseconds. Between 10 and 13 July 1948, according to my notebook, I tested
  the version of \r\nTuring's long division program that I had corrected. I noted
  that 333 divided by \r\n3 took two seconds, and that 1,073,741,823 divided by 34,636,833
  took \"about \r\n1½ seconds\". I can't remember how I measured these times, but
  I \r\ndoubt if they would give us an estimate of the digit period at that date with
  \r\nuseful accuracy, and I certainly cannot assume that it hadn't been changed since
  \r\n21 June. We probably changed it as often as we changed our socks. But on 3 August
  1948 there is \"...digit place 39...\" and \"Total time [1,103,872] \r\nbars = 27.5
  mins ±5%\", ie 1.49 milliseconds per bar, and now with 45 digit \r\nperiods per
  bar, the implied digit period is still 8.5 microseconds. Was this \r\njust another
  paper estimate, the 5% tolerance arising from the probable error \r\nin the assumed
  digit period, or was it a measured time? I don't know. Simon Lavington states that
  by April 1949 the word length was 40 bits and the \r\nbar 1.8 milliseconds. So,
  with a 5-digit period flyback, the digit period was 10 \r\nmicroseconds. I do remember
  that we altered the digit period to 10 microseconds, \r\nbut I can't remember whether
  we noticed what it really was beforehand. On various dates in 1948 and 1949 we experimented
  with different ways of digging \r\nand filling wells on the face of the main storage
  tube. It is quite possible \r\nthat we altered the digit period for particular tests,
  and did not put it back \r\nto its previous value afterwards. The \"Further Analysis
  and Comments\" section above seems to provide valid \r\nreasoning for the reconstructed
  version of the original program shown, with one \r\nproviso: there is no evidence
  one way or the other for instruction 16. I said in \r\nmy letter to Tom of 31 March
  that one can choose either 15 or 16 instructions in \r\nthe main loop, by jumping
  back to line 2 or line 1. What I meant by this was \r\nthat the main loop written
  code could have consisted of either 15 or 16 \r\ninstructions. This is misleading
  in the context, because what we are really interested in is \r\nthe number of instructions
  obeyed for one iteration of the main loop - that is, \r\nin testing one possible
  factor. For the values of a and b1 in the \r\nletter to Nature, lines 3 and 4 are
  executed twice and line 15 not at all. \r\nSo in the reconstructed program as shown
  above, 16 instructions are executed per \r\nnumber tested. If, alternatively, line
  16 reads \"18, Cl\", 17 instructions are executed. \r\nAs it happens, both the constants
  (0 and 1) needed to jump to either line 1 or \r\nline 2 are already available, because
  they're both used for other purposes as \r\nwell. So we cannot deduce from that
  whether it was 16 or 17 bars per number \r\ntested, by including or not including
  the superfluous \"Clear accumulator\" \r\ninstruction in each iteration. To choose
  between these two alternatives we need \r\nfurther data. From (218-1) to 217 is
  certainly 131,072 numbers, so in a 52 minute \r\nrun a digit period of 8.5 microseconds
  implies 19.45 instructions. This is \r\nimplausible in view of the evidence for
  either 16 or 17 instructions. However, we have further timing information on the
  same program from the \r\nOperating Notes, with data that results in a different
  ratio of outer to inner \r\nloop executions. It is not too laborious to work out
  the number of bars needed \r\nfor values of a for which we know the measured times,
  and indeed I have \r\nverified the figures I quote in Table 1 below by emulation.
  a218453731413119b1218-1453631403018bN217349104711Measured run time (minutes/seconds)52m2m
  25s1mEstimated tolerance on measure±0.3%±2%±5%Number of trial subtractions262,14514,088471314277Number
  of inner loop instructions786,43542,26414,139426231Jump back to line 1Total number
  of instructions executed2,228,22888,33337,174757430Ratio inner loop/other instructions0.54550.91740.61381.28701.1608Therefore
  bar time (milliseconds)1.4001.641.61and digit period (microseconds)9.7211.411.2Jump
  back to line 1Total number of instructions executed2,097,14784,14635,081728413Ratio
  inner loop/other instructions0.60001.00910.67521.41061.2692Therefore bar time (milliseconds)1.4871.721.71and
  digit period (microseconds)10.3312.011.0Table 1: Bar Times and Digit PeriodsThere
  is good agreement between the digit periods calculated for the runs for \r\n4537
  and 3141, which took place on 21 June 1948, and the discrepancy between \r\nthese
  and those for the 52 minute run quoted in the letter to Nature is at \r\nleast 16\\%.
  It therefore seems unlikely that the digit period was in fact the \r\nsame on these
  two occasions. I conjecture that, having seen the logic design of the hardware and
  software \r\nvindicated on 21 June, we did a little preventative maintenance before
  embarking \r\non a more exhaustive test of the robustness of the hardware, probably
  a day or \r\nmore later. During this maintenance, we quite probably altered the
  digit period. If indeeed there was some justification for operating at the figure
  of 9.4 \r\nmicroseconds noted on 7 and 13 June 1948, instead of 8.5 microseconds,
  then \r\nconceivably during the maintenance period we set to that figure. It could
  be, in \r\nfact, that we just reset the three- or four-gang .0005 mfd variable condenser
  \r\nthat determined the basic oscillator frequency to a particular pencil mark on
  \r\nthe front panel. This hypothesis implies that an accurate observed value of
  9.7 \r\nmicroseconds, being nearer to an approximate 9.4 microseconds, is more plausible
  \r\nthan an accurate one of 10.3 microseconds. So this point argues for a jump back
  \r\nto line 1 rather than to line 2. I explain the reversion on 3 August 1948 to
  the figure of 8.5 microseconds by \r\nassuming either that we did in fact correct
  it, by reviewing the pencil marks on \r\nthe front panel, or that we knew the machine
  would work with the shorter digit \r\nperiod, and I therefore used this value for
  my estimate. On the other hand, with line 1 in the loop we have 31 main store accesses
  per \r\niteration, and a total of 4.06 million during the 52 minutes. Without line
  1, we \r\nhave 29 accesses per iteration and 3.80 million in total. Neither figure
  agrees \r\nwith the letter to Nature, so it seems we should accept Tom's suggestion
  \r\n(on his tape of 29 March) that the figure of 3.5 million was wrong. Tom points
  out that we had been struggling to make the machine work for some \r\ndays before
  21 June, which was a Monday, after we had had the weekend off. \r\nDuring these
  efforts we would certainly not have been prepared to wait as long \r\nas say 60
  seconds for each trial, and we would therefore have tried a smaller \r\nnumber.
  We agree on this point. In fact, we probably varied the smaller number a bit. Tom
  suggests we used 19 or \r\n31 for the first successful test, since he thinks we
  got a zero in line 20. That \r\nis, we tested a prime number. I can't recall any
  more detail myself, I'm afraid, \r\nbut I have included these two numbers in Table
  1, to show they are indeed quite \r\nplausible. In the Original Program, the jump
  back to line 1 gives \r\na digit period a bit more plausible that a jump back to
  line 2. That is, line 16 \r\nshould read 18, Cl and not 23, Cl as I have it. But
  this is hair \r\nsplitting, and Tom later concluded that line 2 as shown is correct.
  It seems \r\nunlikely that further palaeographical work would shed further light
  on this \r\npoint. Peter TitmanWhy did IBM embark on the risky venture of producing
  the System 360 series when \r\nit was already dominant in the market? The author
  describes the decision-making \r\nprocess that led to the development of the world's
  first range of compatible \r\ncomputers. I joined IBM United Kingdom as what was
  called an applied science \r\nrepresentative, which meant selling scientific machines
  to universities and \r\nengineering installations. That job disappeared when it
  was decided that we did \r\nnot need separate marketing organisations for the scientific
  market and the \r\ncommercial market. But when my applied science job ended the
  360 wasn't going to be announced for \r\ntwo years, and from a salesman's point
  of view, something that is not going to \r\nbe announced for two years doesn't exist.
  I was spare, so I got assigned to \r\nworrying about what was going to happen in
  two years time. So my view is quite different from the people who were involved
  in delivering \r\nthe 360. I was concerned with questions like: what have they got
  us in to? And \r\nwhat were we going to do about it? It is hard for those of us
  who were with IBM then not to appear boastful and \r\nstand up and say, \"Gosh,
  weren't we marvellous\". The fact is that we had an \r\nenormously powerful marketing
  position at this time, which was the end of 1961, \r\nbeginning of 1962. We were
  selling the 1401 in incredible numbers. You could go \r\nto a company that had a
  punched card installation, say two accounting machines \r\nand a calculator, and
  sell them a 1401 for the same price. They could do very \r\nmuch more with it, and
  they could do it simply. Most computer users in those days were doing really simple
  things - just \r\nproducing the invoices and getting the money back was a chore
  they were \r\ndelighted to give to a machine. There were some people doing more
  complicated \r\ncomputing, but not in large numbers, so they weren't the main source
  of revenue. \r\nRevenue was coming from really basic things. We did have incredible
  control over the computer market. That is in worldwide \r\nterms: in the UK, we
  weren't the largest company, but in almost every other \r\ncountry we were. By the
  end of 1964, we had sold 13,000 1401s - orders of magnitude more than \r\nthe ICT
  1301 and the RCA 301 (which ICT also sold). This made a big difference \r\nwhen
  it came to how much program support you could provide, and in many other \r\nways.
  I came from Leo Computers where we had to beg for every transistor. At one time
  \r\nI designed memories: when I had finished that I was at once put to work on the
  \r\ntape channels. We were that short of people. IBM had so much more resource.
  So the first message is that we were really strong. In some market segments such
  \r\nas large machines, we were dominant even in the UK. There was a good political
  \r\nreason for our dominance here - the people who bought large machines in those
  \r\ndays were from organisations such as the Atomic Energy Authority and the CEGB.
  \r\nThese companies were at that time very closely tied to the US nuclear industry,
  \r\nso had a strong incentive to buy the same machines that were being used in the
  \r\nUS. That was one reason why we had 7090s in Aldermaston and in CEGB and other
  \r\n704s dotted around in Risely and similar sites. So we were very strong in that
  sector. The place where we were weakest was the \r\nscientific area, and particularly
  in the UK the small scientific area. I sold 1620s when I first joined IBM. The 1620
  was a lovely little desktop \r\nmachine with a memory of 20,000 decimal digits and
  a typewriter, and you sat \r\ndown and used it like a PC. But it cost more than
  the Elliott 803 which had 8000 \r\nwords of memory and ran much faster. The 1620
  didn't even have an adder: it did \r\narithmetic by doing table lookup, and it did
  it very slowly. A multiplication \r\ntook 200 milliseconds or so. Compared to the
  803, the 1620 was an absolute dog. It had the most unbelievable \r\npaper tape reader.
  It was designed by someone who designed magnetic tape \r\nreaders. Everybody knew
  that the way to sense timing on the paper tape reader \r\nwas to sense the sprocket
  hole. But whoever designed this device knew that the \r\nway you drove paper tape
  was by a cog wheel through the sprocket hole to which \r\nyou attached the spindle
  to which you attached a disc with holes in from which \r\nyou then sensed the timing.
  This had the enormous advantage that you got the \r\ntiming out of place and also,
  for a bonus, it screwed up the sprocket holes as \r\nwell. So we weren't well placed
  in that sector of the market. But in the US we did \r\nsell the 1620. We sold it
  to universities because we were IBM and universities \r\nbought IBM machines. The
  803 was much, much better and sold, almost uniquely \r\namong UK machines, in reasonable
  quantities, abroad as well as at home. The success of the 803 was one reason why
  John Fairclough got the job of \r\ndeveloping a small scientific machine at Hursley.
  That raised a question: \r\ncompanies like Esso bought machines in any part of the
  world that they chose, \r\nbut IBM maintained systems only in the countries where
  we sold them. Esso was \r\nvery unhappy that we didn't always immediately announce
  things in the UK that we \r\nhad announced in the States because the parent company
  wanted to have the same \r\nmachines in all subsidiaries. The thought of someone
  in the UK announcing a \r\nbetter machine and the parent company not being able
  to have it was absolutely \r\nunthinkable. So John's chances - though he didn't
  know it at the time, and it is only in \r\nhindsight that I recognise this - were
  not that good because it raised the \r\nquestion of how, if we had something brilliant
  announced in World Trade, we were \r\nnot going to announce it immediately in the
  States. (World Trade was the part of \r\nIBM that covered the whole of the rest
  of the world outside North America. World \r\nTrade then had about a third of the
  sales volume of the US.) That was one of the issues: should we have a separate UK
  product line, or at \r\nleast a World Trade product line? Don't forget that in those
  days, the disparity \r\nin wealth between the States and Europe was much greater.
  An American cost about \r\ntwice as much as an Englishman and as three times as
  much as an Italian. So when \r\nyou came to do sums about displacing people and
  so on, you could bear much \r\nhigher costs in the States. So there was a reason
  for thinking that the World \r\nTrade market was different. But the big decision
  was that it wasn't different. Anybody in our strong position would normally continue
  operating along the same \r\nlines. What was remarkable was that IBM decided to
  do something different. If we \r\nwere doing so well, why change? Apart from market
  dominance, our other enormous strength was technology. People \r\nin the UK didn't
  understand the strength or depth of IBM technology. As I said earlier, when I finished
  doing memories at Leo I was put onto looking \r\nat tapes. The Decca tape had not
  been a great success on Leo II: EMI was trying \r\nto enter the tape drive market,
  but the main companies we investigated were \r\nPotter and Ampex. Leo III eventually
  used Ampex drives. But there was no \r\npossibility of making our own tape drive.
  IBM tape drives, I thought at the time, were terrible, because they used to do \r\ndreadful
  things to the tape. They had pinch roll capstans that used to grind it, \r\nthe
  tape ran in contact with the head, and the drives needed quite a lot of \r\nmaintenance.
  What I didn't realise, though it seems obvious in hindsight, was \r\nthat if you
  wanted to get faster tape, as everybody did, you could either make \r\nthe tape
  move faster or pack data more densely. To pack data more densely it was \r\na huge
  advantage to have your head in contact. Only IBM did this at the time. Everybody
  else avoided contact because they felt \r\nthey couldn't manage the wear on the
  tape. But IBM had the resources to apply to \r\nthis problem and solve it. The solution
  proved to be the development of \r\nproprietary heavy duty tape. IBM had the technology
  right through, covering the \r\nmaterials technology, the tape technology, the drive
  technology, the \r\ncontrollers, everything. No other company could put that lot
  together to make a \r\nnew solution. In printers, IBM also innovated with the 1401.
  Everybody else used Analex drum \r\nprinters. On these, a big drum went round and
  round and you had to strike it at \r\nexactly the right time to produce good quality
  printing - if your timing was \r\nout, the letters went up and down a bit. The IBM
  answer was to have a chain that went sideways instead of a drum. You \r\nstill had
  to bang it at the right time, but if the alignment was slightly out, \r\nthe letters
  were displaced slightly left or right rather than up or down. That \r\ndidn't look
  nearly so bad. Psychologically it looks quite different to have a \r\nletter slightly
  to the left rather than up or down. Furthermore, the mechanism was cheaper. You
  just had this one chain and that \r\nitself was replaceable, so you could have different
  fonts, and you could have \r\nupper and lower case and other capabilities which
  were impossible on the old \r\nAnalex. I can remember the Powers Samas printer on
  the Leo II. Powers Samas really \r\ndidn't believe in electricity. If it could run
  with a belt or a cable, it was \r\ndone with a belt or a cable. Electricity was
  dangerously new fangled. The IBM \r\n1403 printer was a totally different machine
  in terms of its simplicity, \r\nreliability and all the other factors. IBM's disc
  technology was another plus. The first disc paper I can trace dates \r\nfrom about
  1953 and was a theoretical study of floating a head on a disc - the \r\nair bearing
  disc. The first disc subsystem itself, 305 Ramac, was not a success. \r\nIt had
  5Mb capacity accessed by a single arm, which provided access times in the \r\norder
  of seconds. But it gave us valuable experience. By the time we got to the 360, we
  had not only realised that discs were \r\nimportant - far better than tape as a
  subsidiary storage medium - but also \r\nwhat an enormous advantage it was to have
  your operating system on a disc. \r\nOperating systems on tape were continuously
  chuntering up and down. If you'd \r\nperformed a compile, and then wanted to link
  something, you had to access \r\nanother part of the tape or use another tape drive.
  There was lot of movement \r\ntrying to get the flow of jobs through a tape machine.
  Discs obviated this \r\nproblem. We had virtually a monopoly on disc technology.
  I can remember John Pinkerton of \r\nLeo Computers coming to Wigmore Street to explore
  buying discs from us because \r\nthere was no alternative source for him. So Leo
  Computers would have had to \r\nresell our discs onto their customers, a tremendous
  disadvantage. A lot of our \r\nother competitors just didn't go into discs at all.
  But we had a disc technology \r\nthat was good and reliable, and we understood disc
  operating systems. Another technological strength was memory. We had invested a
  lot of money: the \r\nreason we were ahead was not because we were big but because
  we had invested a \r\nlot. For example one major investment was in a plant which
  automated the process \r\nof making a memory stack. But having made the investment,
  we could sell memory for about five times its \r\nmanufacturing cost, or more than
  that even. The manufacturing cost of memory was \r\nnothing. So we made enormous
  profits on memory. So why, with these immense strengths, did we embark on this very
  risky System \r\n360 venture? Why abandon our existing products and produce a new
  range of \r\nmachines that was totally incompatible with them? I was conscious at
  the time that customers such as ICI were keen to have the \r\nsame machines in all
  their offices and in all their computing centres. They were \r\nlooking for standards.
  This was an issue for IBM, too: we were having to train \r\ncustomer engineers and
  support engineers in all sorts of different machines. \r\nWhen I joined I had go
  through programming courses on the 650, the 7070, the \r\n1620 and the 709. It was
  all rather expensive. To compound this problem, there was a huge explosion of programming
  languages \r\nand operating systems. For the 7090 alone we were on to Ibsys version
  13 by the \r\ntime we were talking about the 360. Then there was a Fortran monitor
  system, and \r\nanother system called the Share Operating System (SOS), designed
  in conjunction The initial Fortran group was comprised entirely of IBM people, seven
  of them. \r\nShare played a part in its subsequent development, but the initial
  design - and \r\nFortran I was a most remarkable system because its optimisation
  was better than \r\nanything that came after it - was really good. In the sixties
  everybody thought that if you had the right program language, you \r\ncould do anything.
  All that you had to do was to find it. We had Fortran, \r\nComtran (the commercial
  translator for the 7090), Cobol and Algol. People were starting to ask some quite
  basic questions about programming, such \r\nas \"What's it for?\" and \"Why are
  we - IBM - writing programs for free?\" All \r\nthe customers did when you gave
  it to them was moan. When we announced Ibsys, \r\npeople said \"Gosh it's complicated
  isn't it? Doesn't it take a lot of memory? Do \r\nwe need it?\". Of course they
  needed it. But they weren't grateful for it in the \r\nleast, so it was a real concern.
  Then there was the question of what we should spend our development money on. A
  \r\nlot of it was going on the 7090 because all the interesting activity was on
  the \r\nbig scientific machines. Where the revenue was coming from was from the
  1401, \r\nbut we weren't spending nearly so much on it. No one knew why. So questions
  like these were being bounced around group staff in the \r\ncorporation. As I recollect
  it, group staff, and a chap called Don Spaulding in \r\nparticular, had decided
  that we had to do something about the proliferation of \r\nsoftware. Therefore they
  set up a committee. But like all the best committees the people who set it up had
  a very good idea \r\nof what they wanted the committee to say beforehand. The terms
  of reference were \r\nsomething like this: \"to produce a complete plan for the
  total product range, \r\nsuitable for all countries and for both scientific and
  commercial computing\". \r\nThere was strong pressure to make a compatible family
  of machines. No one knew whether it could really be done, but Bob Evans in particular
  had \r\nstrong feelings about compatibility and felt that it was possible. He was
  the \r\npresident of DSD - the lab systems development division - and had been \r\ninvolved
  in the 7070 which was a mixed commercial-scientific machine. The committee came
  back with the required conclusion. They presented us with a \r\nreport recommending
  what was known as the New Line Plan. This plan caused me personally a lot of worry
  for a long time. It envisaged a \r\nstaggered announcement of machines, the first
  of which was to be a small binary \r\nversion of the model 40 - the machine being
  developed in Hursley. Immediately \r\nthere was a problem. What we were aiming at
  in the long term was a grand \r\nstrategy. What we were allowing to poke out was
  one small binary machine which, \r\nthough an interesting machine, was not enough
  on its own to get anybody excited. The other problem was compatibility with previous
  systems. The report \r\nacknowledged the problem, but expected IBM to be selling
  new applications that \r\ndepended on users migrating from tape to disc, and further
  ahead some exciting \r\nteleprocessing applications. Accordingly it decided to ignore
  the compatibility \r\nissue. The difficulty was that even people doing new exciting
  things tend to \r\nhave done some boring things first which they would like to continue
  doing on \r\nthe same machine. So compatibility was a big worry. We discussed the
  plan for about 18 months, exploring how we were going to \r\nachieve the ambitious
  targets laid down. But IBM does change it plans, though \r\nnot easily. A lot of
  pressure has to build up to effect such a change. The \r\ncatalyst in this case
  was the Honeywell 200 with its cheekily named Liberator \r\nprogram, which would
  take a 1401 program and run it faster and more cheaply - a \r\nbeautiful thing to
  sell. Naturally it sold in large numbers, very quickly. This \r\nwas around about
  the end of 1963.  Then a very typical IBM thing happened. Tom Watson became involved
  and ordered a \r\nsolution to the Honeywell 200 to be found in 90 days. Suddenly
  we discovered \r\nsomething we knew already, that the way to solve the migration
  problem was \r\nthrough emulation. We had microprogramming, we had the technology
  to do it, we \r\njust had never somehow reached the conclusion that emulation was
  an important \r\ncompatibility technique. But by this stage it was something marketing
  people \r\nknew they had to have. The other conclusion we reached was not to mess
  around announcing tiny bits at a \r\ntime, but to launch the whole lot at once.
  That allowed us to emphasise the \r\nstrategy rather than individual machines. Quite
  suddenly we had the big bang. It \r\nwas the end of 1963 when the decision was taken
  that a complete range of \r\nmachines would be announced on 7 April 1964. The range
  comprised six models of CPU and a complete set of new I/O devices. \r\nRemarkably,
  you could attach any I/O device to any CPU: they weren't handcrafted \r\nthe way
  they were before. We developed emulators for every existing computer \r\nthat was
  important. So suddenly we had a completely new exciting product line to \r\nsell.
  We sold it in the UK with an enormous full page text advert: we had a full \r\nnewspaper
  page of detailed text about the 360 series on the day it was \r\nannounced. Of course
  we took our customers to Hursley to show them round as \r\nwell, but it was the
  media promotion that really made for an exciting launch. \r\nThis was not at all
  the way the committee had planned it in the first place. Editor's note: this is
  an edited version of the talk given by the author to \r\nthe Society at the Science
  Museum as part of the IBM System 360 seminar on 21 \r\nNovember 1995.Readers wishing
  to contact the Editor may do so by fax, \r\non 0181-715 0484.Maurice GribbleThe
  first Argus grew out of a small computer that was built to study digital \r\ncontrol
  systems. The circuits of that machine, which were designed about 1954-\r\n55, used
  Mullard OC71 low frequency germanium pnp transistors. They were \r\noriginally developed
  for producing shift register sequences, or chain codes, for \r\nuse in a rotating
  beacon missile guidance system. The circuits comprised NOR-gates and flip-flops
  which were clocked by narrow \r\nshift pulses to produce shift registers and counters.
  Positive logic was \r\nassumed, that is, the transistors were turned on - collector
  at earth potential \r\n- for \"1\" and off - collector negative - for \"0\". Diode
  OR-gates were \r\nfollowed by a transistor via a coupling network to produce a NOR-gate.
  The \r\nflipflops consisted of two transistors cross-coupled via RC networks with
  a \r\npulse steering circuit for shift pulses, which enabled shift registers and
  \r\nsynchronous counters to be made. The shift pulses were produced by a crystal
  \r\ncontrolled blocking oscillator, the clock frequency being 25KHz. The power \r\nsupply
  provided +6 and -6 volts. In 1956 a small computer was proposed for studying sampled
  data systems and the \r\nfeasibility of digital control of weapon systems. Experimental
  transistor \r\ncomputers were being built at Manchester University and at AWE Harwell.
  These \r\nmachines used point-contact transistors, which at that time had the advantage
  of \r\nspeed and the fact that only one was needed to make a latching circuit. However,
  \r\nthey were difficult to manufacture and not very reliable, so it seemed sensible
  \r\nto design circuits around junction transistors, in the hope that faster devices
  \r\nwould eventually become available. Due to the rapid progress in the \r\nsemiconductor
  industry, this happened sooner than expected. There was a need for additional circuits,
  such as a 3-entry flipflop, so that \r\nregisters could be loaded in parallel and
  shifted in both directions. This was \r\nachieved by replicating the pulse steering
  circuit and ORing them together. \r\nThere was also need for a shift gate, so that
  various shift pulse sequences \r\ncould be produced. This also used a pulse steering
  circuit to gate shift pulses \r\nwith the logic levels. The circuits were built
  into plug-in units, which were hand wired. A printed \r\ncircuit version, which
  was fairly novel in those days, was also produced, but \r\nthese were not used in
  this experimental machine, which used serial arithmetic \r\nwith a 10-bit word length
  and represented negative numbers in twos complement \r\nform. It incorporated a
  Booth short-cut multiplier, which could handle positive \r\nand negative numbers
  with equal facility. The Newton-Raphson method was used for \r\ndivision and calculating
  square roots, while Chebyshev polynomials were used for \r\ntrigonometric functions.
  Only a small amount of data storage was supplied in the form of flip-flops, \r\nsince
  data was read in from transducers as required, and was output as soon as \r\nthe
  calculations were complete. Other inputs were a random number generator and \r\na
  timer. Output was analogue, either as voltages or in the form of width-\r\nmodulated
  current pulses, for operating servos. The single address order code contained only
  19 instructions and the program was \r\nstored on a pluggable diode matrix. There
  were two program counters: one gave 64 \r\nprogram steps for the main program, the
  other 25 steps for subroutines. Both \r\nwere ring counters to simplify matrix decoding,
  and the final OR-diodes were \r\nglued into the plugs. This was a source of trouble,
  as there was differential \r\nexpansion between the plastic plug and the glass diode,
  which shattered the \r\nglass. The solution was to use a silicone rubber cement
  instead of Araldite. A Gray or cyclic progressive (CP) code was used for measuring
  angular position. \r\nThis has the merit that, as the shaft with the code disc is
  turned, only one \r\ndigit changes at a time, whereas in binary code, several digits
  often change in \r\ngoing from one number to the next. These changes do not all
  occur at exactly the \r\nsame time and can result in false readings. Conversion
  from CP code to binary was easily implemented. The data from a disc \r\nwas selected
  by suitable logic and transferred in parallel into a register where \r\nit was shifted
  left cyclically via an Exclusive-OR circuit. This was carried out \r\nby separate
  hardware in the computer in order to speed up the process and avoid \r\nadding to
  the complexity of the arithmetic unit. The analogue voltage output converted the
  least significant five bits of the \r\nnumber by summing currents into an operational
  amplifier. The logic took account \r\nof the sign of the number and arranged that
  the amplifier saturated for numbers \r\nof larger magnitude. The width-modulated
  current pulses for driving hydraulic valves were produced as \r\nfollows: the servo
  error was stored in a 5-bit accumulator and, according to the \r\nsign of the error,
  unity was either added to or subtracted from it every word \r\ntime until it was
  zero. Until zero was reached, a large current of the \r\nappropriate sign was switched
  into the valve, resulting in a pulse of current \r\nwhose length, and thus average
  value, was directly proportional to the error. By \r\nmaking the maximum current
  twice that needed to produce maximum output from the \r\nvalve, two such valves
  could be operated on a time-shared basis. The computer was completed in October
  1957, in time for HRH Prince Philip's \r\nvisit to the Wythenshawe Labs in November,
  and used in a demonstration of \r\nparallax error correction and servo control.
  Two turntables, separated by a metre or so and carrying digitising discs, could
  \r\nbe rotated rapidly through about 90 degrees by hydraulic jacks. Each turntable
  \r\nhad a optical projector mounted on it, which projected a spot of light onto
  a \r\nscreen, one being coloured red and the other green. Care was taken to ensure
  \r\nthat the port side was red and the starboard side green! A third digitiser was
  \r\nfitted with a knob and, when it was turned, the angle measured by this digitiser
  \r\nwas compared with that of the left-hand table and the error operated a digital
  \r\nservo so as to minimise it. To correct the parallax error, the right-hand table
  \r\nwas, at the same time, turned by a similar servo to another angle, given by
  the \r\ntrigonometric relationship below, so that the green spot of light fell on
  top of \r\nthe red one. The formula used was:tan R = tan L / [s/d (tan L) -1] where
  s is the separation of the turntables, d is the distance of the screen, \r\nand
  L and R are the left and right digitiser angles respectively. Three term Chebyshev
  polynomials calculated tan and arctan to sufficient \r\naccuracy, but, due to the
  computation time, there was a noticeable lag in the \r\nposition of the green spot
  if the knob was turned too quickly. The demonstration behaved well when Prince Philip
  turned the knob. He then \r\nlooked at a printed circuit version of a flipflop;
  the name obviously amused \r\nhim, for as he went out of the door he could be heard
  saying, \"Flipflop, \r\nflipflop ...\". High frequency transistors, developed for
  radio, soon became available. They \r\nwere alloy junction transistors with thinner
  base regions, and it was necessary \r\nto design new circuits to get the fastest
  operation with them. Alloy transistors \r\nhave a relatively large base region that
  can store charge carriers - holes in \r\npnp transistors. In switching circuits,
  if excess base current is used, in order \r\nto turn the transistor on quickly,
  there is an excess of holes in the base \r\nregion that has to be removed before
  the transistor ceases to conduct. Faster \r\nturn-off times can be achieved if this
  saturation is avoided, so the Argus \r\ncircuits used a diode between the collector
  and the base coupling network in a \r\nnegative feedback anti-saturation circuit.
  An extra power supply of $-24$ volts \r\nwas also needed. There was also a requirement
  for a power NOR-gate that was capable of a much \r\nlarger fan-out. It used an npn
  transistor to speed the removal of charge from \r\nthe base of the output transistor,
  whose collector was returned to the 24 volt \r\nsupply. This pull-down resistor
  was removed and replaced with a line-terminating \r\nresistor when outputs, which
  were inverse signals, were common-collector ORed \r\nonto a bus. The flipflop circuit
  was, in effect, two NOR-gates connected back to back plus a \r\ntrigger circuit.
  Diode inputs were used everywhere to standardise the circuit \r\nloading and, in
  the case of the trigger circuit, to improve the flipflop \r\nrecovery time. The
  shift gate for producing sequences of shift pulses used a pulse gating \r\narrangement
  similar to that used in the flipflop trigger circuit. There were two \r\ndesigns
  of shift gate - one avoided a heavy standing current by using an npn \r\ntransistor
  that was transformer coupled to the output transistor. These circuits were engineered
  in printed circuit form and used in large numbers \r\nin several Ferranti computers
  at Wythenshawe and Bracknell, and also in Canada \r\nfor the Ferranti-Packard 6000,
  which became the basis of the ICL 1900 series. The improved version of the Bloodhound
  missile required a complex sequence of \r\npre-launch operations involving calculations
  and decisions. It was realised that \r\nthese were more suited to a digital rather
  than an analogue computer, if one \r\ncould be built that that was sufficiently
  fast and reliable. A high degree of \r\naccuracy was not required for most of the
  calculations, so a short word length \r\nwould suffice. Furthermore, the program
  was unlikely to be changed when the \r\nequipment was in service, so, for the sake
  of reliability, a fixed store was \r\npreferable. A design was undertaken based
  on these requirements. More storage was needed for \r\nboth program and data. A
  core store was used for the latter, while the plug \r\nboard used for the program
  was replaced by a patent magnetic store using ferrite \r\nrods, which will be described
  later. This also held constants, used in the \r\ncalculations. The word length could
  be either 12 or 24 bits and the clock frequency was \r\n500KHz. The machine operated
  in a serial/parallel mode - two bits in parallel. \r\nFor a 12-bit word, this was
  a reasonable compromise between speed and cost when \r\nstore access times were
  taken into account, and resulted in a 20 microsecond \r\naddition time. The order
  code was based on that of Pegasus, because there was already a body of \r\nexperience
  with that machine, and because the Ferranti London Computer Centre \r\nwas concerned
  with promoting the machine for process control. For example, \r\nBabcock and Wilcox,
  a prospective Argus customer, was a keen Pegasus user. There were eight accumulators,
  one of which was zero. The instruction was 24 \r\nbits long and the instruction
  format was similar to that of Pegasus. The first \r\n12 bits (the N address), addressed
  the main store, the next three (the X \r\naddress), an accumulator, the next six
  specified a function, the next three (the \r\nM address), a modifier, and the last
  bit (the C bit) indicated whether the \r\nnumber was an instruction or one of two
  12-bit constants, selected by the least \r\nsignificant address bit. So only the
  first 2048 locations in the program store \r\nwere available for constants. The
  main differences between the Pegasus and the Argus instruction set is that \r\nthe
  latter had special \"30\" type orders for input and output and the \"40\" type \r\norders
  involved literals, not counters. Also Argus had special jumps for \r\ninterrupts
  - \"70\" type orders. As in Pegasus, the accumulators could be addressed either
  as registers, using \r\nthe N address, or as accumulators, using the X address;
  there was, however, a \r\ndifference. Registers 0 to 5 corresponded to accumulators
  with the same \r\naddresses, but accumulator 6 was 24 bits long and consisted of
  registers 6 and \r\n7. Likewise, accumulator 7 was a double length one, consisting
  of accumulators 4 \r\nand 5. Double length arithmetic was automatically used when
  either of these long \r\naccumulators was addressed. Accumulator 6 was also called
  P, with accumulators 4 \r\nand 5 being called P1 and P2 , respectively; while accumulator
  7 was also called \r\nQ. Accumulators 0 to 3 could also be used as address modifiers.
  The serial/parallel arithmetic used two adder/subtractors with ripple-through \r\ncarry,
  so the delay in the carry path was kept as short as possible. The flip-\r\nflops
  were triple-entry types with three different shift pulse inputs to allow \r\nleft
  shift, right shift and double right shift for addition and subtraction. The multiplier
  was a modification of the Booth multiplier used in the \r\nexperimental machine.
  The Booth method examines the least significant bit p$_n$ \r\nof the multiplier
  together with an extra bit p$_{n+1}$, initially set to 0, and, \r\naccording to
  the values of these two bits, performs the operations shown in \r\nTable 1. pnpn+1Operation00Shift
  R01Add multiplicand,shift R10Subtract .. .. .. ..11Shift RTable 1: Booth short-cut
  multiplierIn the Argus method, the bits p$_{n-1}$, p$_n$ and p$_{n+1}$ are examined
  with \r\nresults given in Table 2. Use is made of both single and double right shift.
  pn-1pnpn+1Operation000Double shift001Add, Double Shift010Add, .. .. .. ..011Shift,
  Add, Shift100Shift, Subtract, Shift101Subtract, Double Shift110Subtract .. .. ..
  ..111Double ShiftTable 2: Argus Multiplier (Modified Short-cut)Like the Booth method,
  the Argus method worked with both positive and negative \r\nnumbers and gave a useful
  increase in speed as well as a lower spread in \r\nmultiplication time, which was
  important in control applications. MethodNumber of Add & Subtract OperationsAverageMaximumBoothn/2nArgusn/3n/2Table
  3: Relative SpeedArgus used a non-restoring divider, which would operate with both
  positive and \r\nnegative numbers. The dividend was held in the accumulator P, the
  divisor in \r\nregister D and the quotient in register QR. The bits of divisor and
  dividend were compared, starting at the MS end. If they \r\nwere the same, D was
  subtracted from P and a least significant 1 added to QR. If \r\nthey were different,
  D was added to P and a least significant 1 subtracted from \r\nQR. After either
  operation, P and D were shifted one place left. Finally, if the \r\nsigns of the
  divisor and dividend were different, 1 was added to the quotient in \r\nQR. Division
  could be rounded or unrounded and, as in Pegasus, the dividend could be \r\neither
  a double or a single length number. This held when either 12-bit or 24-\r\nbit arithmetic
  was used. Square root was programmed using either Newton-Raphson or the digit by
  digit \r\nmethod, while Chebyshev polynomials were used for trigonometric and other
  \r\ntranscendental functions. As previously mentioned, data was held in a core store.
  This was in modules of \r\n1024 12-bit, plus parity, words and could be increased
  up to a maximum of 3072 \r\nwords. It was bit-organised, that is, it used 3-D selection
  - X, Y and Inhibit. \r\nThe cycle time, using state-of-the-art cores and transistors,
  was six \r\nmicroseconds. It was one of the earliest transistor-driven core stores
  and many \r\nproblems had to be overcome. The transistors had to be fast enough,
  they had to \r\nhandle large currents and they had to stand the relatively large
  voltage \r\nproduced by the back emf of the magnetic cores, which were conflicting
  \r\nrequirements. Since there was some doubt about the long-term reliability of
  the core store \r\nunder adverse conditions and the program was seldom altered in
  control \r\napplications, program and constants were held in a fixed store consisting
  of \r\nferrite rods the size of pencil leads. These provided magnetic coupling between
  \r\na set of drive tracks and an orthogonal set of read tracks, one for each bit
  in \r\nthe word, etched on a double-sided printed circuit. Current pulses, selected
  by \r\na diode matrix, were sent through the drive tracks in turn; and the read
  tracks \r\nonly picked up a signal when a ferrite peg was placed in a hole at the
  \r\nintersection and disturbed the symmetry of the magnetic field. The store was
  engineered as a set of trays, each holding 64 25-bit words, \r\nincluding parity,
  together with the decoding diode matrix and transformers. The \r\nferrite pegs had
  little rubber caps to make them easier to handle and were held \r\nin position by
  a perspex cover - another source of trouble, for it used to get \r\nelectrified
  and pull the little pegs out when it was removed. The store \r\nconsisted of a box
  of 16 such trays, together with their associated drive and \r\nread circuits, making
  1024 words total. The 12-bit address could accommodate \r\nfour such stores, if
  required. This store was rather bulky, so another magnetic fixed store was developed
  for a \r\nmilitary application where size was important. It was not used in Argus,
  as its \r\ndevelopment came too late, but it is included here for historical interest.
  In this store the ferrite pegs were replaced by square coupling loops, which \r\ncould
  be cut to prevent induced eddy-currents coupling to the read tracks. The \r\nloops
  were arranged on a thin fibre-glass printed circuit, which was identical \r\nin
  size and shape to a Hollerith punched card, so that the loops could be cut \r\nwith
  a modified card punch. Each card contained a 12 by 25 array of 300 loops, \r\nrepresenting
  12 25-bit words. The store had 4096 words and 342 cards were required to store them,
  which \r\nsomewhat complicated the decoding. The cards were arranged in four shelves
  of 86 \r\ncards, the last one having only four usable words, and were held in close
  \r\nproximity to the drive and read tracks by pressure pads in such a way that that
  \r\nthey could be easily replaced. There were 1024 drive tracks, each one driving
  \r\nfour cards - one on each shelf. There were four long flexible printed circuit
  read tracks and four sets of read \r\namplifiers, one for each shelf. These were
  selected with two bits of the \r\naddress, the other 10 bits selecting the drivers.
  The read tracks were arranged \r\nin concertina fashion, and such was their length
  that the time delay \r\nnecessitated four different strobe times. The store was
  only about a third of the size of an equivalent ferrite peg store \r\nand card punching
  was assisted by a Pegasus program. Only one production model \r\nwas ever built.
  For process control applications requiring more data storage, there was also an
  \r\noptional magnetic drum with a capacity of 50,000 words. The Argus monitor panel
  displayed the contents of the accumulators and that of \r\nany store location, selected
  by the rotary switches; it also had hand switches \r\nfor manual intervention and
  testing. Argus had two types of interrupt. Interrupt was a novel concept in 1957,
  and \r\nArgus was possibly the first machine to use it outside the US. In the previous
  experimental machine, the sampling time for the digital servos \r\nwas not constant,
  as a result of the variable multiplication time of the Booth \r\nmultiplier, among
  other things, and this made system analysis difficult. When a \r\nprogram contained
  conditional jumps, the situation was much worse and some \r\nmethod of getting a
  constant sampling time was called for. The method adopted in Argus was to use a
  timer, which consisted of a register \r\nthat was decremented every other word time
  (40 microseconds), independently of \r\nother operations. When the timer register
  became zero, the program was \r\ninterrupted, the number in the instruction counter
  stored in a link register and \r\nthe instruction register set to address 0, which
  was the start of the interrupt \r\nroutine. The latter stored the contents of all
  the registers in a reserved part \r\nof the core store and then jumped to a subroutine
  that performed the required \r\noperation. At the end of the subroutine, the interrupt
  routine restored all the \r\nregisters, incremented the number in the link register
  and transferred it to the \r\ninstruction counter so that the main program could
  continue where it left off. Thus it operated in a very similar way to interrupt
  routines in more modern \r\nmachines. By using other registers as counters several
  different interrupt \r\nsubroutines could be called at times that were multiples
  of the shortest time. \r\nThis was a very useful facility for process control. Another
  type of interrupt was the core store interrupt (CSI), which is now known \r\nas
  DMA (direct memory access). It was used to transfer blocks of data directly \r\nto
  and from the core store independently of the arithmetic unit when the latter \r\nwas
  involved with multiplication, division and other operations not requiring \r\nstore
  access. Asynchronous data to and from peripheral equipment was usually \r\nhandled
  in this way. A variety of peripheral equipment could be attached to Argus. Both
  the military \r\nand commercial applications involved input and output data in various
  forms: \r\nangular data from digitisers, analogue voltages, single bit on/off data
  and \r\ndisplay information, to name a few. In process control applications, there
  was \r\nconsiderable input and output data as well as a requirement to handle paper
  or \r\nmagnetic tape and to provide printed output, or output in analogue form for
  \r\ndriving chart recorders. Solid state switching was used to select digital and
  analogue inputs and \r\noutputs, which were to 10-bit accuracy, but thermocouple
  and other low level \r\ninputs were selected by relays. Because of the delay in
  selecting and digitising \r\ninputs, selection and reading in the data were arranged
  to be separately \r\nprogrammable operations, so that the computer could carry on
  with other \r\noperations and not waste time waiting. Also a \"Jump on Busy\" order
  allowed the \r\ncomputer to handle asynchronous outputs, like the printer, without
  waiting. Once the transistor failures had been eliminated by switching from a soldered
  to \r\na welded can, and the printed circuit connectors, whose contacts were brittle
  \r\nand prone to spreading, replaced, the machine achieved a high degree of \r\nreliability,
  as a result of the technology used. This was further improved by a \r\nchecking
  program that was periodically run as an interrupt, which, if it \r\ndetected a failure,
  could sound an alarm and isolate the computer from the \r\nplant. The first application
  of Argus was the military one for which it was designed - \r\nthe Bloodhound missile
  pre-launch calculations. One of the problems in that \r\napplication is a common
  radar one, that of smoothing and predicting an aircraft \r\ntrack. The radar information
  is in polar co-ordinates - range and bearing - \r\nand must first be converted to
  X-Y co-ordinates, or latitude and longitude. Radar data is usually noisy: it can
  be smoothed by fitting a straight line or a \r\nlow order polynomial to it by the
  method of least squares. The easiest way to do \r\nthis is by use of orthogonal
  polynomials, and the noise reduction of the \r\nsmoothing formulae so obtained is
  given by the sum of the squares of the \r\ncoefficients. Taking an odd number of
  points and estimating the midpoint by \r\nmeans of a smoothing formula will always
  result in the greatest noise reduction: \r\nthe greater the number of points and
  the lower the order of the polynomial the \r\nbetter, in this respect. Unfortunately,
  such an estimate of position is out of date; if one wants to \r\nobtain an estimate
  of the latest point, or even one point ahead, to allow for \r\nthe computation time,
  a large number of points must be used in the smoothing \r\nformula to obtain a useful
  reduction in noise. The first process control application of Argus was to control
  a soda ash plant \r\nfor ICI at Fleetwood. Following discussions between Ferranti
  and ICI at \r\nNantwich, Alan Thompson of ICI realised that the use of a computer
  could be an \r\neconomical solution if it not only took a supervisory role - printing
  plant and \r\nalarm data and calculating set points - but was also able to replace
  all the \r\npneumatic 3-term controllers, of which there were just over a hundred.
  The plant was a fairly docile one, so if the computer failed, as long as the \r\ncontrol
  valves were isolated, it could coast along without danger or too much \r\nloss of
  efficiency. Three-term controllers take a weighted sum of terms which \r\nare proportional
  to the error and the differential and integral of it. The last \r\ntwo terms deal
  with stability and drift respectively. Experiments with sampling servos and programming
  transfer functions to stabilise \r\nthem, using the z-transform, had already been
  conducted with the small computer \r\nthat preceded Argus. It was a revolutionary
  way of using a digital computer, \r\nbecause time was a parameter - as it is in
  a digital filter. Incidentally, a \r\nsmoothing formula is really a low-pass filter
  and its frequency response can be \r\ncalculated by z-transform methods. The integral
  term could be obtained by summation instead of integration, \r\nalthough this needed
  to use double length arithmetic in order to obtain the \r\nnecessary accuracy. The
  rate of change of error was found by taking the \r\ndifference of two consecutive
  sample values, but noise due to quantisation and \r\nother sources necessitated
  smoothing the data. A smoothing formula like that \r\nused for the radar application
  would have used too much storage when many loops \r\nwere to be controlled, so the
  solution was to use a recursive smoothing formula. \r\nPut simply, this involved
  taking a fraction K of the latest difference plus a \r\nfraction 1 - K of the previous
  value of the rate as the new value for the rate, \r\ngiving the following smoothed
  rate term: yn = K(xn - xn-1) + (1 - K)yn-1 The degree of smoothing depended on the
  value of K - the noise was reduced by a \r\nfactor K/(2 - K). For example, with
  K=1/8, the noise was reduced to 1/15, as \r\nwith a 15-point moving average filter,
  yet required the storage of only one \r\nextra value. The filter inserted a first
  order lag in the system, with time \r\nconstant T/[(-ln(1 - K)], T being the sampling
  time. For T=5 seconds and \r\nK=1/8, the time constant was about 37.5 seconds, which
  was small compared with \r\nthat of the plant and did not affect loop stability.
  The settings of the valves that had to be controlled were calculated \r\nsequentially
  every second for the fast loops - half of them - and every five \r\nseconds for
  the remainder. The valves were operated pneumatically; air was \r\neither admitted
  or exhausted at a controlled rate using solenoid valves. This \r\nonly required
  two bits of information, so that the control signals for six \r\nvalves were packed
  into one 12-bit word. The positions of the main valves, which \r\ntook about 10
  seconds to stroke, were measured with a potentiometer to 1% \r\naccuracy and examined
  20 times a second so that they did not overshoot the dead \r\nspace. This operation
  used 70% of the computer time, but left sufficient time \r\nfor the other calculations,
  which were carried out less frequently. Isolating the computer from the plant when
  the checking program found a fault \r\nwas considered to be too drastic in certain
  cases, for example where the trouble \r\nwas an instrumentation failure. An improvement
  was simply to indicate where the \r\nfault lay, so that the affected part of the
  plant could be controlled either \r\nmanually or by conventional methods; the isolation
  procedure then being used \r\nonly for computer faults, which happened rarely. The
  computer was installed at Fleetwood in 1962, but after two years, the plant \r\nwas
  shut down and the computer was used to control another similar plant at \r\nWinnington
  in Cheshire. Then in 1980, after 18 years of service, and still in \r\nworking order,
  it was removed to the Science Museum in London. Editor's Note: this article is based
  on the talk given by the author to the \r\nNorth West Group of the Society at the
  Manchester Museum of Science and Industry \r\non 10 February 1998.Peter Hunt, a
  pioneer of large-scale software development, died in February aged \r\n70.Peter
  became one of the first UK computer users when he was employed, in the \r\nearly
  fifties, in the Aerodynamics Department of the de Havilland Aircraft \r\nCompany.
  During his three years there he learnt how to program Edsac, the Pilot \r\nAce,
  Pegasus and the Elliott 401, and developed a variety of aircraft \r\napplications.
  In 1955 he was recruited by Ferranti, initially to work on aircraft applications
  \r\nfor Pegasus. In the hope of stimulating sales of this computer, he developed
  \r\nsome of the earliest standardised packages. He was later responsible for \r\nsoftware
  and customer support on Perseus, the first Ferranti commercial \r\ncomputer. In
  the early 1960s, as Head of the Lily Hill Laboratories in \r\nBracknell, he was
  responsible for the project management of two of the largest \r\ncontracts undertaken
  at that time by the UK computer industry, the Orion 2 \r\nsystem at the Prudential
  and the Atlas 2 system at the UK Atomic Energy \r\nAuthority. Following the takeover
  of the Ferranti computer division by ICT in 1964, he was \r\nmade Head of Systems
  Development Organisation, responsible for developing a \r\nportfolio of systems
  and application software for the 1900 series. Under his \r\ninspirational leadership
  and sound project management more than 1000 programmers \r\nproduced more than 100
  software products, and as a result ICL won a Queen's \r\nAward for Industry in 1968
  \"for technical innovation in the production of \r\nsoftware\". Peter gave a talk
  to the Society on this subject at our 1900 seminar \r\nat the Science Museum in
  May 1996. In 1968 Peter left ICT (which had by then become ICL) to take up a position
  as \r\nmanaging director of the UK branch of Leasco Software. Over the next 12 years
  \r\nPeter built the company up to become one of the most influential of the early
  UK \r\nsoftware houses. Leasco Software specialised in real time software projects,
  \r\nmany of which involved pioneering communications developments. Peter was also
  \r\nchairman for four years of sister company Leasco Response, which operated a
  \r\ntimesharing bureau service. In 1980 he left Leasco to operate as an independent
  consultant. During his later \r\nyears he also developed a practice as an expert
  witness in legal cases \r\nconcerning computer software in both the UK and the US.Small-Scale
  Experimental MachineChris BurtonAfter moving the machine from the University to
  the Museum of Science and \r\nIndustry in Manchester at the end of February, we
  continued to improve \r\nreliability and added various authentic details, for example
  some special \r\nstabilised power units and the correct Monitor CRT EHT unit. Other
  cosmetic \r\nimprovements such as signwriting took place. The Remote Monitor was
  improved so \r\nthat it could be incorporated in the barrier separating the public
  from the \r\nmachine. A special comparator unit was designed and wired in to help
  find \r\ntransient faults in the three CRT units. Experience helped us to optimise
  the \r\nsetting up of the stores so as to be reasonably reliable, giving program
  runs of \r\nhalf an hour or more between failures. There was intense activity around
  us in the museum during the week starting 15 \r\nJune, as the galleries and supporting
  material for the SSEM were being prepared. \r\nThe official \"switch-on\" took place
  on 17 June, using a satellite video link \r\nfrom the museum to the Bridgewater
  Hall, where 1800 people saw the mssage \"HELLO \r\nWORLD 1948\" stored in the CRT
  tube and displayed on the monitor. By 19 June, the main CRT store had suddenly badly
  deteriorated, and would not \r\nstore correctly. Intensive work over the next two
  days could not identify what \r\nhad changed, so that by Sunday 21 June - the actual
  50th anniversary - we felt \r\nthe store was not reliable enough to get through
  the day's events. I therefore \r\nhad to declare that for the day we had bypassed
  the main store. The machine was \r\nformally handed over to the safekeeping of the
  museum, and then Tom Kilburn and \r\nGeoff Tootill re-ran the first program at 1115,
  as they had done half a century \r\nbefore. We thereby met our goal in spirit if
  not to the letter. In the afternoon \r\nof 21 June Sebastian de Ferranti made the
  awards to the winners of the \r\nprogramming competition. This was the last of the
  week's events. The substantial part of our project is now complete. There is a great
  deal of \r\ndocumentation still to finish, and we have to find out what has happened
  to the \r\nmain store and fix it. We also have to work out a way of maintaining
  the machine \r\nand demonstrating it to the public, without the team feeling it
  has a job for \r\nlife! To have got this far is a stunning tribute to project team
  members Charlie \r\nPortman, Ken Turner, Keith Wood, George Roylance, Bill Purvis,
  Adrian Cornforth \r\nand Suzanne Walker, who have collectively put in nearly 11,000
  hours of \r\nvoluntary effort, and who have brought tremendous credit to the CCS.
  In material \r\nand supportive terms, the project has been made possible by the
  £150,000-\r\nworth of sponsorship from ICL, by the University of Manchester and
  the Museum of \r\nScience and Industry, and by numerous individuals. Pegasus Working
  PartyLen HewittSince the last Pegasus Working Party report in Resurrection issue
  18 in autumn \r\n1997, work has continued at fortnightly intervals. We have made
  remarkable \r\nprogress, with some setbacks on the way. Pegasus has worked consistently
  well, \r\nand we have cleared a number of intermittent faults which had plagued
  us for a \r\nlong time. In February we started to test the spare packages in their
  number order in the \r\npositions recommended in the maintenance manual. I had to
  go to the USA in the \r\nmiddle of the month, and at the last meeting I attended
  before I left we had a \r\nmajor disaster. We had got up to testing the Type 13
  Clock/Reset package in position 10C. All \r\nprevious testing had been done with
  HT on when removing and replacing packages. \r\nThings had been going so well that
  I had forgotten the significance of the power \r\nvalves in the Type 13 package,
  and the heavy currents dissipated. This problem \r\ntook a few meetings to resolve,
  as it was a multiple fault which affected more \r\nthan the package we were testing.
  The fact that the problem arose on Friday 13th \r\nwas just a coincidence! We have
  now completed testing the spare packages, and moved on to testing the \r\ndrum.
  We have had consistent failures on the drum tests for many years, and were \r\nconcerned
  that it was a drum surface problem and that we would have to swap head \r\nconnections
  under the drum covers to sort the problem out. In fact by swapping \r\npackages
  and then replacing some of the switching diodes in the read switch \r\npackages
  we were able to establish that the drum surface was not the problem. We have now
  run through the complete drum tests several times, experiencing just \r\nan occasional
  failure on track zero. I believe by doing some more work on the \r\ndrum packages
  we should be able to get even better reliability. Our next major task is to get
  the machine working with the marginal voltages \r\nreduced. We were advised at the
  last CCS Committee Meeting that Pegasus could be \r\nin the \"Making of the Modern
  World\" gallery which the Science Museum is planning \r\nto open in the year 2000
  - this was very heartening news. I would like to thank the members of the Working
  Party - Derek Milledge, Martin \r\nWingstedt and Peter Holland - for their support,
  and also Chris Burton, who has \r\nalways had time to discuss problems even though
  he has been fully occupied with \r\nthe Baby rebuild project.Simulators for a variety
  of historic computers including Edsac, Elliott 903, \r\nPegasus, the Manchester
  University Small-Scale Experimental Machine and Zebra\r\ncan be found at our FTP
  site. Access details are on the next page.The Society has its own World Wide Web
  (WWW) site: it is located atFull access to the FTP archive is also available for
  downloading \r\nfiles, including the current and all past issues of  Resurrection
  \r\nand simulators for historic machines.\r\nMany readers will also be interested
  in WWW sites run by other bodies \r\nconcerned with the history of information technology.
  \r\nThe Universal Resource Locators for a few of these organisations \r\nare as
  follows:\r\nReaders of Resurrection who wish to contact committee members \r\nvia
  electronic mail may do so using the following addresses.[The printed version contains
  the email addresses of Committee members]5-6 September 1998, and fortnightly thereafter
  Guided tours and\r\n exhibition at Bletchley Park, price £3.00, or £2.00 for \r\nconcessionsExhibition
  of wartime code-breaking equipment and procedures, \r\nincluding the replica Colossus,
  plus 90 minute tours of the wartime buildings29 September 1998 North West Group
  meeting \"The Early Days of the NCC\"20 October 1998 North West Group meeting \"From
  Freelance Programmers to F1 Group plc\"24 November 1998 North West Group meeting
  \"The Distributed Array Processor\"The North West Group meetings will take place
  in the Conference room at the \r\nManchester Museum of Science and Industry, starting
  at 1730.For information on London meetings, readers should refer to the insert enclosed
  \r\nwith this issue.Queries about London meetings should be addressed to George
  Davis on 0181 681 \r\n7784, and about Manchester meetings to William Gunn on 01663
  764997.[The printed version carries contact details of committee members]Chairman  Brian
  Oakley CBE FBCSVice-Chairman  Tony Sale FBCSSecretary  Hamish Carmichael FBCSTreasurer  Dan
  HaytonScience Museum representative  Doron Swade CEng MBCSChairman, Elliott 803
  Working Party  John SinclairChairman, Elliott 401 Working Party  Chris Burton  CEng
  FIEE FBCSActing Chairman, Pegasus Working Party  Len Hewitt MBCSChairman, DEC Working
  Party  Dr Adrian Johnstone CEng MIEE MBCSChairman, S100 bus Working Party  Robin
  ShirleyChairman, Turing Bombe Working Party  John Harper CEng MIEE MBCSChairman,
  North West Group  Professor Frank Sumner FBCSMeetings Secretary  George Davis CEng
  FBCSEditor, Resurrection  Nicholas EnticknapArchivist  Harold Gearing FBCSDr Martin
  Campbell-KellyProfessor Sandy Douglas CBE FBCSDr Roger Johnson FBCSGraham Morris
  FBCSJohn Southall FBCSEwart Willey FBCSThe Computer Conservation Society (CCS) is
  a co-operative venture \r\nbetween the British Computer Society, the Science Museum
  of London \r\nand the Museum of Science and Industry in Manchester.\r\nThe CCS was
  constituted in September 1989 as a Specialist Group of \r\nthe British Computer
  Society (BCS). It thus is covered by the Royal \r\nCharter and charitable status
  of the BCS.The aims of the CCS are toMembership is open to anyone interested in
  computer conservation and \r\nthe history of computing.The CCS is funded and supported
  by a grant from the BCS, fees from \r\ncorporate membership, donations, and by the
  free use of Science Museum \r\nfacilities. Membership is free but some charges may
  be made for \r\npublications and attendance at seminars and conferences.There are
  a number of active Working Parties on specific computer \r\nrestorations and early
  computer technologies and software. Younger people \r\nare especially encouraged
  to take part in order to achieve skills transfer.The corporate members who are supporting
  the Society are ICL and Vaughan Systems."
