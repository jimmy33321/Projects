--- !ruby/object:WebPage
page: !ruby/object:Nokogiri::HTML::Document
  decorators: 
  node_cache:
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  - !ruby/object:Nokogiri::XML::Element {}
  errors:
  - !ruby/exception:Nokogiri::XML::SyntaxError
    message: |
      Char 0x0 out of allowed range
    domain: 5
    code: 9
    level: 2
    file: "/tmp/open-uri20151214-21537-4sqtri"
    line: 64
    str1: 
    str2: 
    str3: 
    int1: 0
    column: 39
  - !ruby/exception:Nokogiri::XML::SyntaxError
    message: |
      Invalid char in CDATA 0x1
    domain: 5
    code: 9
    level: 2
    file: "/tmp/open-uri20151214-21537-4sqtri"
    line: 64
    str1: 
    str2: 
    str3: 
    int1: 1
    column: 40
  - !ruby/exception:Nokogiri::XML::SyntaxError
    message: |
      Char 0x0 out of allowed range
    domain: 5
    code: 9
    level: 2
    file: "/tmp/open-uri20151214-21537-4sqtri"
    line: 1413
    str1: 
    str2: 
    str3: 
    int1: 0
    column: 64
address: http://www.cs.man.ac.uk/CCS/res/res04.htm#g
inboundLinks: []
lines:
- "\r\n"
- "\r\n"
- "\r\n"
- "\r\n"
- "Resurrection Home  \r\n"
- "  Previous issue  \r\n"
- "  Next issue \r\n"
- "  View Original\r\n"
- "                Cover \r\n"
- "  writeLink('res04.pdf')\r\n"
- "  Computer\r\n"
- "RESURRECTION \r\n"
- "The Bulletin of the Computer Conservation Society\r\n"
- "ISSN 0958 - 7403 \r\n"
- "Volume 1 Number 4\r\n"
- " \r\n"
- "Summer 1992Contents\r\n"
- "\r\n"
- " Editorial   Nicholas Enticknap, Editor    Guest Opinion   Director, The National
  Museumof Science and Industry    Society News   Tony Sale, Secretary  The early
  days of Algol    Nicholas Enticknap and Pat Woodroffe   The influence of Alan Blumlein
  on early computers   Ted Newman    The pre-history of the Digital Equipment Corporation
  \  Adrian Johnstone    Early computers at Manchester University      Miscellany
  \    Working Party Reports      Forthcoming Events      Committee of the Society
  \     Aims and Objectives     \r\n"
- "\r\n"
- "TopPrevious  Next Editorial \r\n"
- "Nicholas Enticknap, Editor\r\n"
- "It has been a long time since the last issue, and much has \r\n"
- "happened. The most significant develop ment has been Tony \r\n"
- "Sale's initiative in setting in motion plans for a Museum of \r\n"
- "Cryptology and Computing in Bletchley Park, on the very site \r\n"
- "where the Colossus code-breaking computers played such a vital \r\n"
- "role in World War Two. Tony summarises the current situation \r\n"
- "in his Society News piece.\r\n"
- "\r\n"
- "We hope this enterprise will eventually result in both a \r\n"
- "permanent  home for the Society and its machines and other \r\n"
- "artefacts as well as a  focal point for our various \r\n"
- "activities. These have expanded with the  arrival of our \r\n"
- "Archivist, Harold Gearing, who has started work on the  \r\n"
- "massive undertaking of documenting and classifying our growing  \r\n"
- "collection of historical documents.\r\n"
- "\r\n"
- "Meanwhile the Society's existing activities have continued \r\n"
- "unabated.  As far as work on our two oldest computers is \r\n"
- "concerned, the emphasis  has changed -- both Pegasus and \r\n"
- "Elliott have been working for over a  year now, and the new \r\n"
- "objective is to get them back to the state of  reliability \r\n"
- "they enjoyed when new.\r\n"
- "\r\n"
- "The two working parties concerned with more modern computers \r\n"
- "have both  been expanding their portfolios of equipment, while \r\n"
- "the Software group  has taken on a new lease of life with a \r\n"
- "redefinition of its role.  Further details of all this \r\n"
- "activity can be found in the Working Party  reports.\r\n"
- "\r\n"
- "The meetings programme has continued toughout the past year \r\n"
- "along  the lines successfully established in our first year. \r\n"
- "This issue  carries reports on a wide variety of historical \r\n"
- "subjects, ranging from  the evolution of Algol to the \r\n"
- "influence on early circuitry of Alan  Blumlein via the \r\n"
- "development of the DEC PDP-8. We also carry a report based on \r\n"
- "the all-day seminar on the pioneering computers from  \r\n"
- "Manchester University.\r\n"
- "\r\n"
- "Top Previous  Next  Guest Opinion \r\n"
- "Director, The National Museum of Science and Industry\r\n"
- "The activities of the Computer Conservation Society have \r\n"
- "agitated a host of issues that are both exciting and \r\n"
- "disturbing. Several established traditions have been \r\n"
- "challenged. There is an unspoken assumption in the museum \r\n"
- "world that interpretation of the past is necessarily based on \r\n"
- "partial, if not fragmentary, evidence. However, the Society's \r\n"
- "programme, far from being damned to shards and chipped \r\n"
- "fragments from an inaccessibly distant past, provides an \r\n"
- "embarrassment of riches -- machines, documentation, orally \r\n"
- "transmitted expertise and experiences, recorded seminars and \r\n"
- "colloquia by the living practitioners and witnesses to the \r\n"
- "great pioneering age of computing. Unlike the archaeologist we \r\n"
- "have the opportunity to select from an almost unlimited wealth \r\n"
- "of evidence. \r\n"
- "\r\n"
- "There is another respect in which the activities of the \r\n"
- "Society up-end otherwise comfortable perceptions. The \r\n"
- "established ethos of preservation is essentially passive -- \r\n"
- "physical relics placed in an inert environment to retard \r\n"
- "degradation. However, the efforts to restore historic machines \r\n"
- "to working order by those who originally designed and \r\n"
- "maintained them are highly interventionist and this raises \r\n"
- "dilemmas about historical integrity and authenticity.\r\n"
- "\r\n"
- "These are not the only stirrings in the museological soup. It \r\n"
- "is painful to accept the ultimately inevitable demise of \r\n"
- "machines lovingly and ingeniously restored to working order. \r\n"
- "The Society's programme to emulate past performance on present \r\n"
- "day machines using the restored original as a benchmark of \r\n"
- "authenticity, is a bold and visionary move, but it has \r\n"
- "disturbing implications. The museum culture is founded on the \r\n"
- "notion that the original object is an ultimate historical \r\n"
- "source. However, with emulation, we are faced with the \r\n"
- "prospect of the operational spirit of a machine being \r\n"
- "preserved, as it were, independently of its body. The \r\n"
- "`ultimate source' is now a computer program not an object. Can \r\n"
- "museums extend to embrace the abstract as object?\r\n"
- "\r\n"
- "These are a few of the many rewarding speculations stimulated \r\n"
- "by the activities of the Society which has broken new ground \r\n"
- "in conservation and museological terms. Its accomplishments \r\n"
- "are to be saluted and we are indebted to its many members for \r\n"
- "the generosity of their efforts and time, The Science Museum \r\n"
- "cherishes its relationship with this vigorous and \r\n"
- "unconventional organisation and looks forward to building on \r\n"
- "its successes and progressing its pioneering programme in the \r\n"
- "coming years\r\n"
- "\r\n"
- "Top Previous  Next  Society News \r\n"
- "Tony Sale, Secretary\r\n"
- "We spent a lot of time last year working on the long term \r\n"
- "future of the  Society. We have been concerned that our future \r\n"
- "is anything but secure.  Our premises at the Science Museum \r\n"
- "are already too small for our growing  collection of \r\n"
- "computers, and in any event the building is under threat  of \r\n"
- "re-development.\r\n"
- "\r\n"
- "Last summer a unique opportunity arose to secure a permanent \r\n"
- "home for the Society. This is in the most appropriate site of \r\n"
- "Bletchley Park,  where the Colossus code-breaking computers \r\n"
- "were developed and used  during World War II.\r\n"
- "\r\n"
- "Bletchley Park is currently still largely owned by the \r\n"
- "Government,  represented by Property Holdings, with the \r\n"
- "remaining small part  belonging to British Telecom. The two \r\n"
- "organisations were planning to  sell the Park for re-\r\n"
- "development, including the huts used by the  code-breakers and \r\n"
- "a number of other buildings used to house teleprinters and  \r\n"
- "other equipment.\r\n"
- "\r\n"
- "The Society joined forces with the Bletchley Archaeological \r\n"
- "Society to  lobby the appropriate local authority, the Milton \r\n"
- "Keynes Development  Corporation, for support in preserving the \r\n"
- "historic huts. On our own  initiative we further proposed that \r\n"
- "the part of the Park which includes  the huts should be used \r\n"
- "to house a Museum of Cryptology and Computing.  The proposed \r\n"
- "Museum site covers four acres, and contains 9,000 square  feet \r\n"
- "of space in the huts and a further 60,000 square feet in the \r\n"
- "other  buildings, which are currently leased by the Civil \r\n"
- "Aviation Authority.\r\n"
- "\r\n"
- "I am glad to say that our efforts have been successful. The \r\n"
- "Milton  Keynes Development Corporation has set up a Bletchley \r\n"
- "Park Trust with a  seedcorn start-up fund of £20,000. The \r\n"
- "Trust is currently raising  further funds from industry.\r\n"
- "\r\n"
- "The Trust has a steering committee, and has produced an \r\n"
- "outline business  plan. This involves turning the whole of \r\n"
- "Bletchley Park into a 1940s  theme park, of which the museum \r\n"
- "campus will form a part. Income from the  theme park will \r\n"
- "provide the funding for the Museum.\r\n"
- "\r\n"
- "There is a long way to go yet. The Trust needs to raise £10 \r\n"
- "million to  purchase the Park. Nonetheless, I am very hopeful \r\n"
- "that the project will  succeed, and remove the uncertainty \r\n"
- "hanging over the Society's future.\r\n"
- "\r\n"
- "Top  Previous  Next  The early days of Algol \r\n"
- "Nicholas Enticknap and Pat Woodroffe\r\n"
- "The first public implementation of Algol was created in \r\n"
- "January 1960. The thirtieth anniversary of the language, \r\n"
- "therefore, took place in 1990. To commemorate the occasion, \r\n"
- "the Society held an afternoon meeting  at the Science Museum.\r\n"
- "\r\n"
- "The meeting concentrated on the early days -- how Algol came \r\n"
- "into being,  and how the early compilers were developed. It \r\n"
- "was chaired by Mike  Woodger, a member of committees \r\n"
- "responsible for defining the language as  far back as 1958. \r\n"
- "Woodger gave a scene-setting talk describing the  creation of \r\n"
- "the language.\r\n"
- "\r\n"
- "Broadly speaking, Algol emerged from the activities of two \r\n"
- "independent groups: the GAMM subcommittee in Europe, and the \r\n"
- "ACM in America. The major steps in the process are listed in \r\n"
- "the following table:\r\n"
- "\r\n"
- "Date        Event\t1955 Oct    GAMM subcommittee for Programming \r\n"
- "Languages formed\t1957 Oct    ACM committee appointed to specify a universal programming
  language\t1957 Oct    GAMM Subcommittee's language design finished: letter sent
  to ACM suggesting a joint conference\t1958 Apr    GAMM proposal presented to ACM
  group\t1958 May    Joint ACM/GAMM proposals made (the language \r\n"
- "was later called IAL or Algol 58)\t1958 Oct    The name \"Algol\" is proposed for
  the new language\t1958 Nov    First Algol 58 compilers reported working\t1960 Jan
  \   Algol 60 created in Paris\t1960        Dijkstra and Zonnefeld produce first
  Algol \r\n"
- "60 translator.\tWoodger also ran over the genesis of the various ideas and \r\n"
- "concepts that found expression in the early implementations of \r\n"
- "Algol, starting as far  back as 1948.\r\n"
- "\r\n"
- "Woodger was followed to the rostrum by David Hill of the \r\n"
- "Medical  Research Council, who took the story forward into the \r\n"
- "seventies with an  account of subsequent standardising work by \r\n"
- "IFIP and ISO.\r\n"
- "\r\n"
- "ISO and IFIP both entered the picture in 1962, when IFIP \r\n"
- "Working Group  2.1 took over running Algol as ISO was turning \r\n"
- "its attention to the standardisation of programming languages. \r\n"
- "So the Working Group submitted  its 1962 Algol report to ISO.\r\n"
- "\r\n"
- "ISO, said Hill, decided the report wasn't suitable as it \r\n"
- "stood. It  wanted a subset, some I/O to go with it, and a \r\n"
- "standardised hardware  representation of the language.\r\n"
- "\r\n"
- "In response the Working Group produced by 1965 three subsets \r\n"
- "of the  language plus two proposals for I/O. These were put \r\n"
- "together in a Draft Recommendation: ISO decided not to call \r\n"
- "them standards because there  were still arguments about \r\n"
- "whether there should be one standard language  rather than \r\n"
- "standards for various languages.\r\n"
- "\r\n"
- "The draft appeared in April 1967, but it was March 1972 before \r\n"
- "scrutiny  of the draft was completed and `ISO recommendation \r\n"
- "No 1538: Programming language -- Algol' appeared.\r\n"
- "\r\n"
- "This, said Hill, \"was an absolute disaster, full of errors and \r\n"
- "changes which had been made without consultation\". Hill \r\n"
- "himself was instrumental  in rectifying the \"disaster\", along \r\n"
- "with Richard de Morgan and Brian  Wichman. Together these \r\n"
- "three formed a new IFIP sub-committee to  consider further \r\n"
- "revisions to Algol 60.\r\n"
- "\r\n"
- "This sub-committee had a number of sources to draw on. At a \r\n"
- "1972 ISO committee meeting it was agreed that a new edition of \r\n"
- "ISO Recommendation 1538 should be produced. The delegates at \r\n"
- "this meeting drew up a list of errors in the earlier ISO \r\n"
- "document, and also drew up a list of questions that ought to \r\n"
- "go to the new IFIP sub-committee. There were also  proposals \r\n"
- "from German and Japanese sources, and a number of published  \r\n"
- "papers by Algol specialists.\r\n"
- "\r\n"
- "The IFIP sub-committee was finally left with a number of \r\n"
- "difficulties of  interpretation, plus some unsettled \r\n"
- "questions. On these points the  committee had to make its own \r\n"
- "decisions.\r\n"
- "\r\n"
- "Once all the difficulties had been resolved, the maintenance  \r\n"
- "committee's report was agreed by IFIP Working Group 2.1 and \r\n"
- "subsequently  became known as `The Modified Report'.\r\n"
- "\r\n"
- "At this point the emphasis of the Society's meeting shifted \r\n"
- "from the  specification to the implementation. The next three \r\n"
- "speakers described  the development of compilers for three \r\n"
- "sixties computers, the English  Electric KDF9, the Elliott 803 \r\n"
- "and the DECsystem-10.\r\n"
- "\r\n"
- "Lawford Russell joined English Electric in 1960, and after \r\n"
- "initial work  on the Deuce teamed up with Brian Randall to \r\n"
- "produce an assembler for  the KDF9, then under development. \r\n"
- "Before the project made much progress,  however, the two men \r\n"
- "went to an Algol conference and became \"very  excited by it \r\n"
- "all\".\r\n"
- "\r\n"
- "Deciding on the spot that they must implement Algol on the \r\n"
- "KDF9, they approached Algol guru Edsger Dijkstra for advice. \r\n"
- "The upshot was that  they spent an intensive two weeks study \r\n"
- "with Dijkstra in Holland, which  \"led us to an outline of the \r\n"
- "basic structure of the intermediate  language, which we \r\n"
- "transposed Algol into for running\".\r\n"
- "\r\n"
- "Randall and Russell made two early important design decisions. \r\n"
- "The  language would be interpretive, as that was what the \r\n"
- "users in their  division of English Electric wanted. And \"we \r\n"
- "decided to go for a single  pass translation as we were used \r\n"
- "to on the Deuce, which allowed you to  do some processing \r\n"
- "while your cards were being read in\". The KDF9 would  be \r\n"
- "faster and would use paper tape, so \"surely we could do some  \r\n"
- "processing for the translation while the program was being \r\n"
- "read in?\".\r\n"
- "\r\n"
- "The striking aspect of this project was the working conditions \r\n"
- "which  would be thought impossibly primitive today. \"We had no \r\n"
- "machine and very  little information about it so we had to do \r\n"
- "lots and lots of desk  checking. We produced our logic flow \r\n"
- "diagrams and just desk checked  these between us... So the \r\n"
- "logic checking got far ahead of the code  testing: some of \r\n"
- "that was good and some of it was bad.\"\r\n"
- "\r\n"
- "About this time potential KDF9 customers starting asking for \r\n"
- "copies of  the compiler. But it wasn't finished, and \"our flow \r\n"
- "diagrams were only  meant for inter-project use. So we thought \r\n"
- "we would need to define a much  more rigid sort of meta-\r\n"
- "language... then we had to convert all our flow  diagrams to \r\n"
- "this, then we had to desk check them again\".\r\n"
- "\r\n"
- "The logic flow diagrams were actually delivered to one \r\n"
- "potential  customer, de Havilland -- \"the first case of a copy \r\n"
- "of a compiler being  available before the original\".\r\n"
- "\r\n"
- "The design of the Algol compiler for the Elliott 803 presented \r\n"
- "a  different set of problems, described by Jeff Hillmore. Late \r\n"
- "in 1960 a  small group from Elliott went to an Algol \r\n"
- "Conference run by  Dijkstra -- that man again. They returned \r\n"
- "determined to make Algol 60 the   advanced  programming \r\n"
- "language for the 803. A development team was formed, and  \r\n"
- "Hillmore joined it in November 1961.\r\n"
- "\r\n"
- "The team worked with some despatch. The first program was \r\n"
- "compiled and  run just three months later, on 15 February \r\n"
- "1962. Version 1 of the  compiler, using five-hole paper tape \r\n"
- "input/output, was available by  November. The time taken to \r\n"
- "reach that point, which included writing the  user manual, was \r\n"
- "eight person-years.\r\n"
- "\r\n"
- "\"The 803 sold to a lot of educational establishments and to \r\n"
- "scientific users, and in both of these areas there was a need \r\n"
- "to process a high  average number of programs in a given \r\n"
- "period, and to reduce to a minimum  the time spent in changing \r\n"
- "over from one program to another.\r\n"
- "\r\n"
- "\"So the design decisions that were made were, first of all, \r\n"
- "the system  should be a load-and-go system. You should, at the \r\n"
- "start of a session,  load the compiler, load the dynamic \r\n"
- "routines and the process, compile  and run program after \r\n"
- "program.\r\n"
- "\r\n"
- "\"The other decision that was made was that the user's program \r\n"
- "should run  at the full speed of the machine. So we wanted a \r\n"
- "compiler that would  generate an object program in binary \r\n"
- "machine code which would then run,  and we didn't want to \r\n"
- "interpret them. This was a very different decision  to that \r\n"
- "made by the KDF9 people.\r\n"
- "\r\n"
- "\"The other decision was that the source text should be read \r\n"
- "once only.  So we ended up with a compiler which was designed \r\n"
- "to operate in two  phases. The compiler converted the Algol \r\n"
- "source to an intermediate  binary stream which we called Own \r\n"
- "Code, and this was processed in the  second internal pass into \r\n"
- "a binary object program, and that was then  executed at full \r\n"
- "speed.\"\r\n"
- "\r\n"
- "Hillmore identified six activities in the compiler writing \r\n"
- "process.  First there was the writing of a lexicon analyser to \r\n"
- "tokenise the Algol  symbols, taking the hardware \r\n"
- "representation and generating these tokens,  which made the \r\n"
- "compiler independent of how the program was input.\r\n"
- "\r\n"
- "Next came the dictionary system for recording identifiers and \r\n"
- "their properties. Then the team decided how the memory space \r\n"
- "was going to be allocated. Fourth, they specified the own code \r\n"
- "format. \"Out of those  four parts of the initial activity came \r\n"
- "the definition of the Algol 60  subset which would be \r\n"
- "implemented\".\r\n"
- "\r\n"
- "The final two activities were the specification of the I/O \r\n"
- "definition  and the writing of a high level pseudo-Algol \r\n"
- "definition of the compiler.\r\n"
- "\r\n"
- "The final speaker was Richard de Morgan, who gave a \r\n"
- "presentation  describing the design of the Algol compiler for \r\n"
- "the DECsystem-10. We  have already met de Morgan as one of the \r\n"
- "IFIP sub-committee that  produced the Modified Report. \r\n"
- "Earlier, he had been one of the earliest  users of Algol -- he \r\n"
- "learnt it as his first programming language while an  \r\n"
- "undergraduate at Liverpool University.\r\n"
- "\r\n"
- "de Morgan's first task at DEC, which he joined in 1969, was to \r\n"
- "work on  the outline design of an Algol-60 compiler for the \r\n"
- "DECsystem-10. The  only languages supplied for it then were \r\n"
- "Fortran and BASIC.\r\n"
- "\r\n"
- "de Morgan was working with Professor Nicol Hardiman of \r\n"
- "Carnegie-Mellon University, and they were given one month to \r\n"
- "complete the  task.\r\n"
- "\r\n"
- "\"We did design a system, and the amazing thing is that we \r\n"
- "could do the design down to a fair amount of detail in one \r\n"
- "month. It turned out that Nicol Hardiman's ideas about how the \r\n"
- "system ought to be built and my experience of writing \r\n"
- "compilers were more or less compatible.\r\n"
- "\r\n"
- "\"We decided that we would do a one pass compiler but we would \r\n"
- "implement everything we could in what we conceived to be the \r\n"
- "spirit of the Algol  60 revised report... Of the things we \r\n"
- "couldn't implement, if we thought  they were useful we'd find \r\n"
- "a way round them and if we didn't think they  were useful we \r\n"
- "wouldn't implement them.\"\r\n"
- "\r\n"
- "The decision to build a one-pass compiler created problems. \r\n"
- "One of the  major ones concerned formal parameters, \r\n"
- "particularly formal parameters  that are procedures. The \r\n"
- "question was: how do you know when you're going  to call a \r\n"
- "formal procedure parameter what its parameters are?\r\n"
- "\r\n"
- "de Morgan went on: \"Given that we had to have independent \r\n"
- "compilation,  the unit of compilation was either the main \r\n"
- "program or a procedure. So  we had the concept of an external \r\n"
- "procedure: we had to enforce type  checking at run-time of the \r\n"
- "actual to formal parameter correspondence.\"\r\n"
- "\r\n"
- "Another design decision was to allow users to do anything they \r\n"
- "liked  with formal parameters. They could even be used as the \r\n"
- "controlled  variable in a forced statement, so that you could \r\n"
- "predict what was going  to happen.\r\n"
- "\r\n"
- "Then questions arose about own variables and own arrays, which \r\n"
- "were only resolved after much thought.\r\n"
- "\r\n"
- "\"We put in a few other extras: position, remainder, operator, \r\n"
- "which we thought very useful. We put in `While' as an \r\n"
- "iterative statement. We  added another type -- non-real -- \r\n"
- "rather than having some type of   compiler  directive which \r\n"
- "told you what precision your reals ought to be.\"\r\n"
- "\r\n"
- "The resulting compiler worked well. \"Efficiency of the code \r\n"
- "was fairly  good because we put work into getting around the \r\n"
- "overhead of the  procedure calls by generating access \r\n"
- "sequences that were very efficient.  We often ran faster than \r\n"
- "Fortran, and typically 1.5 to three times  faster than Algol \r\n"
- "60 on comparable machines.\" \r\n"
- "\r\n"
- "Top  Previous  Next  The influence of Alan Blumlein on early computers \r\n"
- "Ted Newman\r\n"
- "I believe that Blumlein was the best electronic engineer that \r\n"
- "ever lived.\r\n"
- "\r\n"
- "I first met him during the war when, as a young engineer, I \r\n"
- "saw an  advert for someone to do TV tubes and applied for the \r\n"
- "job. I went  along and there was this very frightening man \r\n"
- "with green eyes who  interviewed me -- Blumlein seemed to have \r\n"
- "the greenest eyes of anyone I'd seen.\r\n"
- "\r\n"
- "He started the interview by asking if I knew anything about  \r\n"
- "vector analysis. I said I didn't. He said, \"Here are some \r\n"
- "circuits  I want you to look at\". He spent a long time making \r\n"
- "me look at these  circuits and asking, \"How do you think this \r\n"
- "works?\", \"How do you think  that works?\". Then he said, \r\n"
- "\"Actually I would call that vector  analysis. You might think \r\n"
- "that I'm now taking you to the vacancy we've  got in the TV \r\n"
- "tube place. You're not going to do that. You're going to  work \r\n"
- "on circuits\".\r\n"
- "\r\n"
- "I was 22 at the time I started. I was Blumlein's personal \r\n"
- "dogsbody,  and had lots of odd things to do for him. I saw \r\n"
- "Blumlein much more  than I would have expected to, because I \r\n"
- "was a lad of not much  importance. He was always Mr Blumlein \r\n"
- "to me -- never Alan -- because he  was the big boss.\r\n"
- "\r\n"
- "He created a range of monitors -- they were very advanced  \r\n"
- "measuring oscilloscopes. You could measure the amplitude and \r\n"
- "width of  the pulses very accurately. You could do this by \r\n"
- "shifting the offset  voltage on the screen, and measuring the \r\n"
- "shift on the meter, and the  width could be similarly measured \r\n"
- "with a very accurately defined  sawtooth scan.\r\n"
- "\r\n"
- "The first monitor was called Mohammed, after the founder of \r\n"
- "the  Moslems. The Caliphs came after Mohammed in history so \r\n"
- "the later  monitors were called Caliphs -- I can remember Ali \r\n"
- "and Xerxes, but not  the others. The monitors were all \r\n"
- "slightly different and Blumlein  expected every one to be \r\n"
- "correctly named; if you got a name wrong you  were in dead \r\n"
- "trouble.\r\n"
- "\r\n"
- "He also had names for many of his circuits. There was the \r\n"
- "Cholmondeley  Tweaker, a Featherstonehaugh Follower and a St \r\n"
- "John Something Else.  (These names were pronounced Chumley, \r\n"
- "Fanshaw and Sin-jin.)\r\n"
- "\r\n"
- "He believed that circuits had to be calculated. I had a little \r\n"
- "book  that I'd calculate various circuits in and then he'd see \r\n"
- "on the  monitor whether the pulse was the same as I'd \r\n"
- "calculated.\r\n"
- "\r\n"
- "Blumlein was born in 1903. He was in Standard International \r\n"
- "from 1924  to 1929, when he joined Schoenberg's Columbia \r\n"
- "record organisation,  which was a small company at the time. \r\n"
- "The following year he joined  EMI, where he worked till he was \r\n"
- "killed in a plane crash in 1942.\r\n"
- "\r\n"
- "He filed 128 patents, but he didn't write many papers. If \r\n"
- "you've got a  lot of valuable ideas in a commercial firm you \r\n"
- "don't want to give them  to everybody else, so you don't write \r\n"
- "papers, you file patents.\r\n"
- "\r\n"
- "Some time after Blumlein's death, in 1947, at an important \r\n"
- "meeting of  the Association of Scientific Workers there was an \r\n"
- "almost unanimous  decision that all research ought to be done \r\n"
- "in Government and not  commercially. I was an idealist at the \r\n"
- "time so I tried to get into  Government service at a very \r\n"
- "reduced salary.\r\n"
- "\r\n"
- "I went to the Civil Service Commission, and was interviewed by \r\n"
- "HA  Thomas, who asked me \"EMI -- isn't that where Blumlein \r\n"
- "was?\". I said  yes, and he then sent me to NPL.\r\n"
- "\r\n"
- "There was a background to this which I discovered later. At \r\n"
- "the time  Turing had got a lot of details, in fact a full \r\n"
- "logical diagram, for a  both a big computer and a small \r\n"
- "machine. The big one Turing thought  was too much to tackle: \r\n"
- "the small one was called the Ace Pilot Model.  A number of \r\n"
- "people had tried and failed to get the circuits working at  \r\n"
- "all, including Turing to start with -- he wasn't very good at \r\n"
- "getting  circuits going. \r\n"
- "\r\n"
- "I think what happened was that HA Thomas, a much maligned man, \r\n"
- "thought  it would be a good idea to recruit someone who knew \r\n"
- "something about  circuits of the kind that were necessary for \r\n"
- "computers, and these were  the sort of circuits that Blumlein \r\n"
- "created.\r\n"
- "\r\n"
- "Once I was at the NPL, Thomas asked me to recruit other people \r\n"
- "with  this knowledge. So Tubsy Clayden was recruited, and then \r\n"
- "later John  Parks and Roger Scantlebury (Roger's dad had also \r\n"
- "worked at EMI for a  long time).\r\n"
- "\r\n"
- "The circuits we produced all worked extremely well, and they \r\n"
- "were  derived from Blumlein circuits, so there is no doubting \r\n"
- "the influence  of Blumlein on the very reliable Pilot Model \r\n"
- "Ace.\r\n"
- "\r\n"
- "Also, Blumlein visited TRE in the forties and met Williams and \r\n"
- "his  colleagues. They had not been doing very well with their \r\n"
- "circuits, and  Blumlein showed them how to do it. Tom Kilburn \r\n"
- "agrees that this  happened. Williams afterwards became \r\n"
- "Professor Williams who dealt with  the Manchester computer, \r\n"
- "and Kilburn joined him from TRE, and from  what I could tell \r\n"
- "the Blumlein-type circuits were widely used in TRE.  So once \r\n"
- "again the influence of Blumlein as very great.\r\n"
- "\r\n"
- "Blumlein was unique. He was highly inventive, and a man who \r\n"
- "thought in  a different way from his contemporaries. Light \r\n"
- "engineering in 1929  dealt almost entirely with communication \r\n"
- "by voice or code.  Transmission was by wire cable or radio. \r\n"
- "I've read all the standard  books on communication up to 1945 \r\n"
- "that I can find, and none of them  deals in any way with high \r\n"
- "speed pulses. Nor, except for the purely  transmission side, \r\n"
- "could they deal with the tasks posed by television.\r\n"
- "\r\n"
- "In the communication industry all control and switching \r\n"
- "functions were  either done mechanically or by electrically \r\n"
- "controlled relays. High  speed was not wanted. It was only \r\n"
- "recently, long after the advent of  computers. that \r\n"
- "electronics was used. For television and particularly  for \r\n"
- "advanced radars or computers, control and switching had to be \r\n"
- "done  electrically. But Blumlein was an iconoclast and was \r\n"
- "very inventive:  only such a person could break the necessary \r\n"
- "new ground.\r\n"
- "\r\n"
- "This article is an edited transcript of a talk given by Ted \r\n"
- "Newman to  the Society at the Science Museum on 28 February \r\n"
- "1991.\r\n"
- "\r\n"
- "Top  Previous  Next  The pre-history of the Digital Equipment Corporation \r\n"
- "Adrian Johnstone\r\n"
- "\r\n"
- "   The Digital Equipment Corporation (DEC) was formed in \r\n"
- "   1957 and is now perhaps the second or third largest \r\n"
- "   computer company in the world. Remarkably, the company is \r\n"
- "   still led by the original president, Ken Olsen, who was a \r\n"
- "   student at MIT at a key time in computing history. DEC is \r\n"
- "   widely credited with producing the first desktop \r\n"
- "   minicomputer, the PDP-8. The minicomputer style of \r\n"
- "   computer architecture is very different from the long-\r\n"
- "   word length machines that dominated early commercial \r\n"
- "   computing, but the ideas did not spring fully formed from \r\n"
- "   the minds of DEC's designers. I hope to show here that \r\n"
- "   one of the earliest programmable computers constructed in \r\n"
- "   the United States was the direct parent of the DEC PDP-5, \r\n"
- "   -8 and -11 series of machines as well as many early \r\n"
- "   eight- and sixteen-bit microprocessors.\r\n"
- "Although the distinctions are nowadays becoming blurred, \r\n"
- "traditionally computing has been divided into three \r\n"
- "application areas: scientific computing with an emphasis \r\n"
- "on floating point arithmetic, commercial computing which \r\n"
- "requires access to large databases and real-time \r\n"
- "computing which requires relatively simple processing to \r\n"
- "be performed at the highest speed.  A real-time system \r\n"
- "must return results within the timeframe of some \r\n"
- "monitored process -- car engine management systems, \r\n"
- "flight simulators and the computer inside your washing \r\n"
- "machine are all examples of real-time problems. There is \r\n"
- "an old joke that defines a scientific programmer as one \r\n"
- "who types in a single number, processes it for a week and \r\n"
- "then prints a single number. By the same token, a \r\n"
- "commercial programmer types in a number and prints out \r\n"
- "the names of five thousand people that have the same \r\n"
- "number, and a real-time programmer doesn't type in any \r\n"
- "numbers because embedded systems do not have keyboards.  \r\n"
- "\r\n"
- "In many ways real-time computing is the Cinderella of the \r\n"
- "three being mainly the province of engineers capable of \r\n"
- "squeezing the last ounce of performance from computers that \r\n"
- "have to be low cost, because they are to be embedded in some \r\n"
- "other product. In the past this meant a minicomputer and \r\n"
- "nowadays a microprocessor, but in either case the traditions \r\n"
- "of machine level programming that naturally dominated the \r\n"
- "pioneering days of computing live on in the real-time domain \r\n"
- "and there is therefore a strong affinity between the \r\n"
- "activities of the Society and the real-time computing world.\r\n"
- "\r\n"
- "Since embedded systems must be cheap, it might be thought that \r\n"
- "real-time control systems are a relatively recent phenomenon. \r\n"
- "In general this is true. To be more specific, it was the \r\n"
- "arrival of minicomputers, especially the PDP-8 in April 1965, \r\n"
- "that allowed engineers to seriously consider dedicating an \r\n"
- "entire computer to a single experiment or instrument. However, \r\n"
- "it turns out that one of the first computers constructed in \r\n"
- "the United States was a real-time system, and the \r\n"
- "architectural design decisions that were taken then formed the \r\n"
- "template for the minis and micros to come. This machine was \r\n"
- "the Whirlwind. \r\n"
- "\r\n"
- "In 1944 the US Navy contracted the Masachussets Institute of \r\n"
- "Technology (MIT) to  build an aeroplane simulator that would \r\n"
- "be capable of solving the equations of motion of the aeroplane \r\n"
- "in real time and which could thus be used to investigate \r\n"
- "instability problems in aircraft designs of the day. \r\n"
- "Originally an analogue machine was proposed, but in 1945 the \r\n"
- "design turned into a general purpose digital computer. The \r\n"
- "laboratory at MIT was renamed the Digital Computer Laboratory \r\n"
- "and Maurice Wilkes who had many contacts with the MIT team, \r\n"
- "says in his memoirs:\r\n"
- "\r\n"
- "\r\n"
- "   \"by the time I knew them they were pillars of digital \r\n"
- "    orthodoxy and I did not suspect they had an analogue \r\n"
- "    past\"\r\n"
- "The machine was a sixteen-bit single address processor -- an \r\n"
- "arrangement familiar to anybody who has worked with early \r\n"
- "minis or micros, but in those days to have a machine with only \r\n"
- "a 16-bit word was heretical. Typical word lengths were in the \r\n"
- "range 36 to 40 bits because of the need for real number \r\n"
- "arithmetic precision. No less a figure than von Neumann \r\n"
- "criticised the Whirlwind saying that with its short word \r\n"
- "length he was concerned about its ability to do anything \r\n"
- "useful at all. However, sixteen bits of precision is more than \r\n"
- "adequate for most sensing and control applications, and if you \r\n"
- "must have more precision you can always perform multiword \r\n"
- "arithmetic. Interestingly,  on modern machines the word size \r\n"
- "is dominated by the need to address large amount of memory \r\n"
- "rather than the size of the data being manipulated: hence the \r\n"
- "widely expected move towards 64-bit architectures such as the \r\n"
- "new MIPS and DEC Alpha devices is being driven by the need to \r\n"
- "directly address more than 4G byte memory spaces, not the need \r\n"
- "to manipulate 64-bit numbers. I cannot resist pointing out at \r\n"
- "this stage that von Neumann also had a fight with Edward \r\n"
- "Teller concerning the UNIVAC LARC (Livermore  Automatic \r\n"
- "Research Computer) contending that putting anything more than \r\n"
- "10,000 words in a computer would always be a waste of \r\n"
- "money.\r\n"
- "\r\n"
- "The real reason that Whirlwind had such a small word size is \r\n"
- "that it was bit-parallel at a time when almost all computers \r\n"
- "were bit serial. The Elliot 803 in the museum's collection, \r\n"
- "for instance, has at its heart a single full adder, through \r\n"
- "which the two operands are passed one bit per cycle. The \r\n"
- "Whirlwind processed two sixteen-bit operands in a single \r\n"
- "cycle, but naturally required sixteen times as much hardware \r\n"
- "to do so. Since the Whirlwind was being designed for a very \r\n"
- "specific application, it was possible for the designers to \r\n"
- "make a detailed analysis of the design constraints. Robert \r\n"
- "Everett, who was responsible for designing part of the order \r\n"
- "code for the machine had these comments about how they arrived \r\n"
- "at a 16-bit, one address computer:\r\n"
- "\r\n"
- "\r\n"
- "   \"[Sixteen] . . . is a nice binary number, but it did not \r\n"
- "   come about arbitrarily. It was determined by asking \"What \r\n"
- "   is the shortest single-address instruction that looks \r\n"
- "   reasonable?\" Our analysis of the programs we were \r\n"
- "   interested in showed that 1000 words was tight and 2000 \r\n"
- "   considerably better. That gave us eleven bits, and we \r\n"
- "   knew that we needed at least 16 instructions; 32 sounded \r\n"
- "   reasonable, and that gave us five bits more. Therefore \r\n"
- "   the sixteen was not a binary number, it was the sum of \r\n"
- "   two primes.\"\r\n"
- "Now although I am claiming that Whirlwind was architecturally \r\n"
- "the first minicomputer there is no doubt that the machine was \r\n"
- "anything but miniature physically. Indeed the scale of the \r\n"
- "project was staggering. The budget was $1 million per annum \r\n"
- "for the years 1945 -- 1950, which must have given Maurice \r\n"
- "Wilkes pause for thought on his visits there. The machine was \r\n"
- "laid out in 2-dimensional form so that every part could be \r\n"
- "immediately accessed in case of failure. This led to a very \r\n"
- "space-inefficient design requiring one floor of a large \r\n"
- "building. The control room alone contained fifteen 6-foot \r\n"
- "racks along with oscilloscopes and I/O equipment. The machine \r\n"
- "used specially made valves that cost between $5 and  $10 each, \r\n"
- "and the laboratory had its own tube shop to make them. Over \r\n"
- "5,000 valves and 11,000 germanium diodes went into the running \r\n"
- "system. Considering EDSAC had 3,000 valves in it and was \r\n"
- "really rather compact, it is quite difficult to see why \r\n"
- "Whirlwind needed so much floor space. Later on large tubes \r\n"
- "were added to Whirlwind that were used purely for display and \r\n"
- "Whirlwind is therefore probably the first computer to have \r\n"
- "purpose designed VDU's attached. Whirlwind has an even \r\n"
- "stronger claim to be the first computer with a light pen \r\n"
- "attached.\r\n"
- "\r\n"
- "One important aspect of the Whirlwind design was the \r\n"
- "instruction decoder. At the heart of the machine was a diode \r\n"
- "matrix that performed the decoding, rather than a set of \r\n"
- "random logic gates. This structured decoder was of course only \r\n"
- "one step away from a microcoded architecture as described by \r\n"
- "Maurice Wilkes. When Wilkes visited MIT in the 1950's he was \r\n"
- "already thinking about the use of structured as opposed to \r\n"
- "random logic and was shown the Whirlwind which: \r\n"
- "\r\n"
- "\r\n"
- "   \". . . did indeed have a centralised control based on the \r\n"
- "   use of a matrix of diodes . . . It was not, I think, \r\n"
- "   until I got back to Cambridge that I realised that the \r\n"
- "   solution was to turn the control unit into a computer in \r\n"
- "   miniature by adding a second matrix to determine the flow \r\n"
- "   of control at the micro level and providing for \r\n"
- "   conditional micro-instructions.\"\r\n"
- "The Whirlwind was run in a military fashion: the machine was \r\n"
- "very thoroughly documented and everybody working on the \r\n"
- "project had to produce a biweekly report. The highly \r\n"
- "disciplined preventative maintenance programme kept the valve \r\n"
- "failure rate down to 0.1% per 1000 hours.\r\n"
- "\r\n"
- "By the beginning of 1950 the Whirlwind was running well but \r\n"
- "the Navy was tiring of the $1,000,000 annual running budget. \r\n"
- "However, about that time the USSR developed its atomic bomb \r\n"
- "and the intercontinental aircraft necessary to threaten US \r\n"
- "territory. This was also the time of the Korean war and a time \r\n"
- "of general paranoia in the US. To detect enemy aircraft flying \r\n"
- "low, a network of small radar stations was required, but this \r\n"
- "then presented the problem of correlating and presenting a \r\n"
- "mass of  information to the military commanders. As an \r\n"
- "experiment, Whirlwind was hooked up over Telex lines to a \r\n"
- "radar in Lexington Massachusetts with some real time \r\n"
- "computation being performed in the MIT lab. This was a great \r\n"
- "success, and the airforce took over the project. A new \r\n"
- "division known as the Lincoln Laboratory was created, and the \r\n"
- "MIT Digital Computer Lab became part of it. Lincoln's primary \r\n"
- "responsibility was the Semi-Automatic Ground Air Defence \r\n"
- "System, otherwise know as SAGE.\r\n"
- "\r\n"
- "Whirlwind ran in this role until June 30 1959. On of the \r\n"
- "project team, Bill Wolf, rented the machine for a dollar a \r\n"
- "year until the late 1970's after which Ken Olsen, the DEC \r\n"
- "president, looked after it for a while before transferring it \r\n"
- "to the Smithsonian.\r\n"
- "\r\n"
- "Probably the most lasting contribution Whirlwind made to \r\n"
- "mainstream (as opposed to real-time) computing history is the \r\n"
- "\r\n"
- "development of the ferrite core memory, and it is here that \r\n"
- "the link with DEC becomes clear. Early computer memories, \r\n"
- "whether of the delay line or storage tube type, were \r\n"
- "unsatisfactory both because of their bulk and because of \r\n"
- "unreliability. There is evidence to show that the development \r\n"
- "of the Williams Tube in the UK gave us a significant \r\n"
- "technological lead over the US teams, until the arrival of the \r\n"
- "ferrite core memory. To quote from the famous Moore School \r\n"
- "course of 1946:\r\n"
- "\r\n"
- "\r\n"
- "   \"Several forms of fast internal memory have been proposed \r\n"
- "   and the one that shows the most promise at the present \r\n"
- "   time is the electrostatic storage tube. The one on which \r\n"
- "   most work is being done at the present time by RCA is the \r\n"
- "   Selectron, and when perfected it will have most of the \r\n"
- "   features that are desirable in this type of memory\"\r\n"
- "The Selectron appears to have been the great white hope of the \r\n"
- "American designers, but it was a long time coming. It was a \r\n"
- "complex device, difficult to develop and would probably have \r\n"
- "been very expensive to mass produce. The Whirlwind used its \r\n"
- "own electrostatic storage tube, but these designs could not \r\n"
- "match the elegance of the Williams' tube which was even \r\n"
- "licensed by IBM for use in the 701. However, all this effort \r\n"
- "was obsoleted at a stroke by J Forrester's work on ferrite \r\n"
- "cores. In 1952 the first testable cores were received from \r\n"
- "General Ceramics, and a 16 x 16 matrix was constructed. To \r\n"
- "develop a full system required a computer to test it, so the \r\n"
- "Memory Test Computer (MTC) was built: MTC had the same \r\n"
- "relationship to ferrite core as the Manchester Mk 1 had to \r\n"
- "Williams Tubes. The design team was headed by a recent MIT \r\n"
- "graduate called Ken Olsen. The MTC was therefore the first \r\n"
- "computer equipped with ferrite core memory. It was a great \r\n"
- "success, and the memory was transferred onto the Whirlwind, \r\n"
- "after which the MTBF on memory rose from two hours to two \r\n"
- "weeks. At this point the tube shop was converted to making \r\n"
- "displays!\r\n"
- "\r\n"
- "The MTC was about as fast as Whirlwind, although it was much \r\n"
- "more compact. Since it was not software compatible with \r\n"
- "Whirlwind, it never became part of the mainstream work of the \r\n"
- "lab. The designers subsequently moved to the new Lincoln \r\n"
- "laboratory in Lexington, and Olsen began work on the TX-0 \r\n"
- "which aimed to test transistor circuitry and a large 64K \r\n"
- "ferrite memory. The transistors used included the new Philco \r\n"
- "SBT100 surface barrier transistors which cost $80 each. TX-0 \r\n"
- "contained 3,600 transistors.\r\n"
- "\r\n"
- "The TX-0 had an 18-bit data word with a sixteen bit address \r\n"
- "space and only four instructions: STORE, ADD, JUMP IF LESS \r\n"
- "THAN and OPERATE. The OPERATE instruction included commands \r\n"
- "coded on bits that could be combined to produce a large \r\n"
- "number of sub-instructions such as `clear right half of \r\n"
- "accumulator' and `shift right'. This scheme was to appear \r\n"
- "in many subsequent DEC computers up to and including the \r\n"
- "PDP-8. There were two registers: an accumulator and a live \r\n"
- "register used for controlling and buffering I/O transfers. \r\n"
- "However, there was no interrupt mechanism.\r\n"
- "\r\n"
- "The TX-0 went from Lincoln to MIT in 1958 and was used for \r\n"
- "teaching and as a laboratory controller. Later the \r\n"
- "architecture was extended to include index registers. The \r\n"
- "machine was in use until 1975 when DEC bought it for use in a \r\n"
- "museum.\r\n"
- "\r\n"
- "TX-0 was a rather futuristic looking machine. Olsen had \r\n"
- "received some (no doubt harmlessly intended) criticism over \r\n"
- "the rather homely appearance of the MTC, and seems to have \r\n"
- "taken this very much to heart in his subsequent systems. He \r\n"
- "supposedly spent some time in electrical utility shops \r\n"
- "examining home appliances, and the characteristic toggle \r\n"
- "switches seen on most DEC computers up until recent times \r\n"
- "(when toggle switches are frowned upon) are apparently based \r\n"
- "on those found on 1950's fridges. Olsen has always been most \r\n"
- "concerned about the appearance of DEC products and in some \r\n"
- "parts of the company he is referred to as the Chief Box \r\n"
- "Designer.\r\n"
- "\r\n"
- "The TX-2 was a much larger machine, containing 22,000 \r\n"
- "transistors. Its principle design goal was efficient I/O. One \r\n"
- "option might have been to use a separate I/O processor as with \r\n"
- "the IBM channel. This was rejected in favour of giving the I/O \r\n"
- "controllers direct access to main memory and having separate \r\n"
- "program counters with associated program sequences that \r\n"
- "controlled the I/O using the main processor. It was a short \r\n"
- "step from here to modern Direct Memory Access using memory \r\n"
- "mapped peripheral registers and prioritised interrupts, as \r\n"
- "seen in nearly all subsequent DEC machines. The echoes of this \r\n"
- "design decision are still very much present today. Intel-style \r\n"
- "microprocessors follow the IBM I/O model, with separate \r\n"
- "instructions for performing I/O, in spite of the fact that \r\n"
- "these microprocessors do not usually have independent I/O \r\n"
- "processors. Motorola-style devices, including the Rockwell \r\n"
- "65xx family, use a very DEC-like arrangement of memory mapped \r\n"
- "I/O registers.\r\n"
- "\r\n"
- "The TX-2 even had some internal parallelism. It has a 36-bit \r\n"
- "ALU which could be partitioned into 4 x 9, 2 x 18, 1 x 36 or \r\n"
- "even one 9-bit and one 27-bit ALU operating concurrently. The \r\n"
- "machine had separate adders for indexing and program counter \r\n"
- "\r\n"
- "incrementing. In the 1960's the TX-2 was modified to support \r\n"
- "multiprogrammed timesharing. It was finally dismantled in \r\n"
- "1977. \r\n"
- "\r\n"
- "The construction of the machine was based on a few general \r\n"
- "purpose circuits mounted in modules running at 5MHz. In 1957, \r\n"
- "Olsen and two others formed the Digital Equipment Corporation \r\n"
- "with venture capital from American Research and Development \r\n"
- "and others. Although the original aim was to build computers, \r\n"
- "the backers were sceptical and preferred a business based on \r\n"
- "the construction of logic modules for laboratory use.  \r\n"
- "\r\n"
- "For many years, the various series of logic modules were a \r\n"
- "mainstay of DEC business, but their first computer was shipped \r\n"
- "in November 1960. DEC machines have always appealed to \r\n"
- "engineers and scientists because of their low cost and \r\n"
- "accessibility. The PDP prefix that was used for all computers \r\n"
- "up to the 1978 VAX machines stands for Programmable Digital \r\n"
- "Processor, and was used instead of the word `computer' \r\n"
- "specifically so that the accountants in DEC's customers' \r\n"
- "companies would not notice that the engineering  teams were \r\n"
- "buying computers, which as everybody knows are the sole \r\n"
- "province of commercial Data Processing shops.  \r\n"
- "\r\n"
- "Real-time systems, whilst outwardly less exciting than the \r\n"
- "latest Cray or workstation in fact account for far more of the \r\n"
- "computers in the world, both by number of units and by shipped \r\n"
- "value. At a rough count there are fifteen computers in my \r\n"
- "home, of which only three have keyboards attached. If my TV \r\n"
- "and audio hardware were a little less aged, there would be far \r\n"
- "more. So the Whirlwind and its small, fast successors have \r\n"
- "inherited the Earth, in spite of the scepticism of von \r\n"
- "Neumann.\r\n"
- "\r\n"
- "Top  Previous  Next  Early computers at Manchester University \r\n"
- "\r\n"
- "   Manchester University is, along with Cambridge University \r\n"
- "   and the  National Physical Laboratory, sure of its place \r\n"
- "   in the history books for  its pioneering contributions to \r\n"
- "   computer technology. Members of the  Society were given \r\n"
- "   some interesting and revealing insights into the  stories \r\n"
- "   behind the design of the early Manchester computers at an \r\n"
- "   all-day seminar held at the Science Museum on 23 May \r\n"
- "   1991. This report  concentrates on the hardware aspects \r\n"
- "   of the five machines described.\r\n"
- "\r\n"
- "   Professor Tom Kilburn was involved throughout the \r\n"
- "   development period,  initially as a graduate student \r\n"
- "   assisting Professor Freddie Williams. He  was thus an \r\n"
- "   appropriate choice as the first speaker, and he discussed  \r\n"
- "   the development of the both the prototype computer and \r\n"
- "   the full sized  successor, the Mark I.\r\n"
- "Mark I\r\n"
- "\r\n"
- "Kilburn told the meeting that the University's involvement \r\n"
- "with  computers started when Freddie Williams paid two visit \r\n"
- "to the States in  1945 and 1946 to assess the radar circuitry \r\n"
- "being developed there. On  the second trip he visited Bell \r\n"
- "Labs and saw experiments using cathode  ray tubes. The \r\n"
- "objective was to remove the ground echoes that occurred  in \r\n"
- "all radar systems.\r\n"
- "\r\n"
- "Williams thought he could see a different use for CRTs -- as \r\n"
- "storage  devices -- and started exploring the possibility as \r\n"
- "soon as he got back.  \"We'd been aware of digital computers \r\n"
- "for some time then, especially  about the mercury delay line, \r\n"
- "but of course the mercury delay line is  not immediate access. \r\n"
- "There was a chance of making an immediate access  store, \r\n"
- "perhaps, with a cathode ray tube. And so it proved.\"\r\n"
- "\r\n"
- "After a period of experimentation, a working system was \r\n"
- "developed, and  the need to test it was to prove the \r\n"
- "foundation of Manchester's  computing reputation. \"The only \r\n"
- "way to make sure you've got a cathode  ray tube store is to \r\n"
- "actually test it with zeroes and ones changing  throughout the \r\n"
- "pattern at machine speed. Various pieces of test gear  were \r\n"
- "postulated, and Geoff Toothill and I nearly built them, but in \r\n"
- "the  end it turned out that it was going to be far easier to \r\n"
- "build a computer  to do the job properly. We set about that at \r\n"
- "the end of 1947 and by the  middle of 1948 we had what we \r\n"
- "called the baby machine.\r\n"
- "\r\n"
- "\"The machine attracted a great deal of interest. Among the \r\n"
- "many eminent  visitors who found their way to Manchester was \r\n"
- "Sir Ben Lockspeiser of  Ferrantis. His company was already \r\n"
- "involved in the computer project, as  they had supplied a \r\n"
- "magnetic drum for the baby machine. Now Lockspeiser  committed \r\n"
- "to fund the manufacture of a full scale machine, with the idea  \r\n"
- "of subsequently building copies for sale.\r\n"
- "\r\n"
- "\"Following Ben Lockspeiser's visit, Geoff Toothill and I, \r\n"
- "aided by Dai  Edwards and Tommy Thomas who joined us in \r\n"
- "September 1948, set about  making a big machine. This machine \r\n"
- "worked. It was quite a sizeable  machine and it stayed working \r\n"
- "at the University for quite a time, and  was used by people \r\n"
- "like Newman, Turing and one or two others.\"\r\n"
- "\r\n"
- "It took till November 1949 to complete the specification for \r\n"
- "the Mark I,  and another 15 months before Ferranti was ready \r\n"
- "to deliver the machine  to the University.\r\n"
- "\r\n"
- "Then, said Kilburn, \"It took in those days quite a number of \r\n"
- "months to  install the machine. The Mark I was, like all those \r\n"
- "machines, quite  difficult to maintain. We had trouble with \r\n"
- "the machine, and trouble with  the drum, and everyone around \r\n"
- "us was conscripted to try and keep the  machine working. The \r\n"
- "machine continued to work at the University up to I  believe \r\n"
- "1959.\r\n"
- "\r\n"
- "\"One of our aims was to introduce computers to industry. We \r\n"
- "allowed  industry to use the machine right from the start, \r\n"
- "charging them some  reasonable fee which was I think £50 an \r\n"
- "hour.\"\r\n"
- "\r\n"
- "While grappling with the problems of getting the Mark I to \r\n"
- "work, Kilburn  and his colleagues were already thinking ahead \r\n"
- "to the next computer.\r\n"
- "\r\n"
- "\"It was clear long before the machine actually worked that we \r\n"
- "could  improve on the Mark I. For example the Mark I had been \r\n"
- "influenced by the  pure mathematicians like Newman and Turing \r\n"
- "that we'd been talking to, so  we turned out special \r\n"
- "instructions to help them. It was clear by 1951  that pure \r\n"
- "maths would not be the prime use of the machine: scientific  \r\n"
- "computing would.\"\r\n"
- "\r\n"
- "That involved designing a floating point accelerator. Together \r\n"
- "with  other improvements suggested by the experience of Mark \r\n"
- "I, \"we embarked  on a machine called Meg. This became the \r\n"
- "Ferranti Mercury, and was about  30 times more powerful than \r\n"
- "the Mark I at about the same cost.\"\r\n"
- "\r\n"
- "Meg and Mercury\r\n"
- "\r\n"
- "Kilburn was followed to the rostrum by Professor Dai Edwards, \r\n"
- "who gave  the audience many details of the technological \r\n"
- "advances introduced in  Meg and Mercury.\r\n"
- "\r\n"
- "Edwards started by describing the experiences of some of the \r\n"
- "early Mark  I users. One user, which was engaged in working \r\n"
- "out crystal structures,  found that out of the total machine \r\n"
- "time of 1750 hours, 250 were wasted  due to machine faults, \r\n"
- "about 14% of the time they took. Another 10% of  time was \r\n"
- "daily routine maintenance, so a fair stretch of machine time  \r\n"
- "went to waste. Improving reliability was therefore a priority.\r\n"
- "\r\n"
- "\"There were something like 4200 cathodes in the Mark I, but \r\n"
- "only 1800 in  the Mercury with 1600 crystal diodes. Even when \r\n"
- "you add the totals  together there were still fewer elements, \r\n"
- "a 19% reduction. That was a  move towards getting a bit of \r\n"
- "extra reliability.\"\r\n"
- "\r\n"
- "Memory sizes on the Mark I were 10K bits for the CRT main \r\n"
- "memory, and  650K bits for the drum. These were the same on \r\n"
- "the successor machines,  both Meg and Mercury. \r\n"
- "\r\n"
- "\"On Meg we used a CRT, on the Mercury made by Ferranti we went \r\n"
- "to core.  The drum wasn't that reliable, so on the Mercury it \r\n"
- "was smaller and more  of them could be connected. Thus if one \r\n"
- "drum went funny you didn't lose  everything. It was possible \r\n"
- "to attach eight drums, but typically four  were used. The IBM \r\n"
- "701, a contemporary of our prototype Megs of 1954,  had seven \r\n"
- "times the RAM, but their drums were about 10% smaller.\r\n"
- "\r\n"
- "\"We used 10-bit words because that was the natural element \r\n"
- "that came out  of the CRT. With a CRT you have to regenerate \r\n"
- "the information otherwise  it would decay away, so in the \r\n"
- "Manchester machines there were things  called `scan periods' \r\n"
- "when we regenerated information, and `action  periods' when we \r\n"
- "used the store to get something out or put something  in.\r\n"
- "\r\n"
- "\"Instructions were 20 bits, so we required two accesses for \r\n"
- "that, and if  we were using a 10-digit number you had a third \r\n"
- "action. So in three  double beats, 60 microseconds, you could \r\n"
- "do arithmetic on 10 bits, which  was done in the B-registers.\r\n"
- "\r\n"
- "\"In the Meg we just had five bits to define the instruction, \r\n"
- "so in  modern terminology it was really a risc machine. When \r\n"
- "we went to the  Mercury we used seven bits to provide extra \r\n"
- "instructions. Short  operations were 60 microseconds. A \r\n"
- "floating point operation with a 40- bit number (a 30-bit \r\n"
- "fraction and a 10-bit exponent) took 180  microseconds, \r\n"
- "multiplication 300 microseconds. In the 701 a fixed point  \r\n"
- "\r\n"
- "addition or subtraction over 36 bits was 60 microseconds, but  \r\n"
- "multiplication was 500 microseconds.\"\r\n"
- "\r\n"
- "Transistor computer\r\n"
- "\r\n"
- "Professor Dick Grimsdale followed Professor Edwards with a \r\n"
- "discussion of  his work on the Manchester prototype transistor \r\n"
- "computer -- work which  overlapped with the development of \r\n"
- "Meg/Mercury. This had also emerged  out of a concern for \r\n"
- "reliability, as transistors, though at the time  much more \r\n"
- "unreliable than valves, offered a potential future  \r\n"
- "improvement, and also consumed far less power.\r\n"
- "\r\n"
- "Together with a colleague, Doug Webb, \"we were doing some \r\n"
- "experiments  with STC crystal triodes. We got some of the \r\n"
- "basic circuits, and were  able to use them to make a prototype \r\n"
- "computer. We used a drum because it  was the only storage \r\n"
- "device available. The drum was a delay-type store,  with the \r\n"
- "delay caused by the drum rotation\".\r\n"
- "\r\n"
- "The prototype was a 48-bit word machine, with four spare bits \r\n"
- "for timing  leaving 44 usable bits. The clock rate was 125 \r\n"
- "KHz. There were 92 point  contact transistors in it, with six \r\n"
- "point-contact diodes on average for  each transistor. This \r\n"
- "machine was first run on 16 November 1953, \"the  first \r\n"
- "transistor computer in the world\".\r\n"
- "\r\n"
- "Having proved the feasibility of a transistor computer, \"we \r\n"
- "decided to  take it to pieces and rebuild it.\r\n"
- "\r\n"
- "\"The full-scale computer had a B-register and an eight word \r\n"
- "serial  register. It also had a multiplier. That machine was \r\n"
- "operational in  1955. It had 150 watt power consumption and \r\n"
- "250 transistors. It would  add two 44-bit numbers in 1.5 drum \r\n"
- "revolutions. The drum operated at  3000 rpm. A division sub-\r\n"
- "routine took one second, square roots 1.3  seconds.\"\r\n"
- "\r\n"
- "History then repeated itself, though: \"There was a problem \r\n"
- "with the  unreliability of the transistors\". This was solved \r\n"
- "by the development of  a different type of component, the \r\n"
- "junction transistor, initially used  by Grimsdale in an \r\n"
- "experimental small core store.\r\n"
- "\r\n"
- "The transistor computer even in its original form had enough \r\n"
- "potential  to interest Metropolitan Vickers. \"The outcome was \r\n"
- "the commercialisation  of the machine as the Metrovick 950, of \r\n"
- "which seven were built. It used  junction transistors because \r\n"
- "they were more reliable.\"\r\n"
- "\r\n"
- "Atlas\r\n"
- "\r\n"
- "The session between lunch and tea was devoted entirely to the \r\n"
- "advances  embodied in the next Manchester computer, Atlas, \r\n"
- "with further  presentations from Messrs Kilburn and Edwards.\r\n"
- "\r\n"
- "Atlas, as Kilburn told the delegates, was a major project for \r\n"
- "a  university to undertake. Value of the first version at \r\n"
- "delivery was  £1.5m, which today is equivalent to £15 million. \r\n"
- "The later machine cost  installed at Chiltern would have cost \r\n"
- "£25m today. Atlas was competitive with  IBM Stretch for the \r\n"
- "title of most powerful computer in the world in its  time, and \r\n"
- "was 80 times as powerful as Mercury.\r\n"
- "\r\n"
- "\"Atlas introduced many new ideas, such as multiprogramming, \r\n"
- "job  scheduling, interrupts, virtual storage, paging and \r\n"
- "operating systems.  The idea was that a job could be input on \r\n"
- "any teleprinter and output,  instead of using dedicated \r\n"
- "peripherals. The task of sorting it out was  given to the \r\n"
- "supervisor, as no human knew what was going on.\"\r\n"
- "\r\n"
- "Its development ensured that in the Flowers report Manchester \r\n"
- "was  designated as one of the three regional university \r\n"
- "computer centres in  the country. Inaugurated on 7 December \r\n"
- "1962, Atlas provided a 24 hour  service to other universities, \r\n"
- "including Nottingham, Edinburgh and  London, and was \r\n"
- "operational till 1972, when it was replaced by MU5.\r\n"
- "\r\n"
- "Atlas was produced in a collaborative effort with the \r\n"
- "university's long  established industrial partner, Ferranti. \r\n"
- "\"We charged 7.5% of the  capital value of machine for \r\n"
- "maintenance\", said Kilburn. \"This was  £100,000 a year, or £1 \r\n"
- "million today. We sorted out that the university  would have \r\n"
- "half the machine time, while Ferranti would sell the other  \r\n"
- "half.\"\r\n"
- "\r\n"
- "Taking over the rostrum to describe the technical \r\n"
- "specification of  Atlas, Dai Edwards told the audience that \r\n"
- "Atlas was built from 10  shelves, each with 50 printed circuit \r\n"
- "boards. In all it contained 60,000  transistors and 300,000 \r\n"
- "diodes.\r\n"
- "\r\n"
- "Storage used components that were state-of-the-art at the \r\n"
- "time. There  was a fixed store (in today's terminology, a ROM) \r\n"
- "of twice 4096 words  with 0.3 microsecond access; a core \r\n"
- "store, with four units of 4096 words  and 0.5 microsecond \r\n"
- "access; and a drum of 100K words.\r\n"
- "\r\n"
- "\"In the fixed store were engineering test programs, peripheral  \r\n"
- "start/stop routines, scheduling routines, and 250 additional \r\n"
- "orders. The  fixed store was novel, cheap and fast.\"\r\n"
- "\r\n"
- "In 1965 a Dataproducts disc added, 31\" in diameter, with 16 or \r\n"
- "32  platters on a shaft. The larger size had a capacity of 16m \r\n"
- "words, or  100Mb. It consumed 7.5 Kw and weighed 3500 lbs.\r\n"
- "\r\n"
- "The processor had a 48-bit floating-point unit, which could be  \r\n"
- "overlapped with a 24-bit fixed point unit. In the multiplier, \r\n"
- "bits were  grouped in threes rather than in twos as on \r\n"
- "Mercury. Multiply time was  4.7 microseconds.\r\n"
- "\r\n"
- "For I/O Atlas used paper tape equipment, data links over \r\n"
- "private lines  at 60-100 kcps, and also card equipment.\r\n"
- "\r\n"
- "MU5\r\n"
- "\r\n"
- "Finally, Professor Derrick Morris told the audience about the \r\n"
- "last of  the pioneering Manchester machines. which in the more \r\n"
- "prosaic computing  times of the late sixties was known simply \r\n"
- "as MU5.\r\n"
- "\r\n"
- "This successor to Atlas was first conceived in 1966. The \r\n"
- "University won  support from both the SRC and ICL in 1967, and \r\n"
- "had built up a joint  design team of 20 by the following year, \r\n"
- "with 11 from the University,  five from ICL and four from the \r\n"
- "SRC.\r\n"
- "\r\n"
- "The objective of the new machine was to achieve 20 times the  \r\n"
- "throughput of Atlas, of which seven times was to come from \r\n"
- "improving the  technology, two times from the high level \r\n"
- "language architecture, and two  times from the overall system \r\n"
- "architecture.\r\n"
- "\r\n"
- "Unlike the other Manchester machines, MU5 was conceived as a \r\n"
- "range of  three machines. The first was to be a small machine \r\n"
- "of around the cost  of a DEC PDP-11. The second was to be a \r\n"
- "high-end scientific machine. The  third was to be a \r\n"
- "multiprocessor. Of these, only the second was actually  built.\r\n"
- "\r\n"
- "\"The most interesting technical aspect of MU5 was the \r\n"
- "associative store.  This was as a result of an analysis of the \r\n"
- "Atlas software, especially  the instruction code. We learnt \r\n"
- "something about the frequency of use of  operands and control \r\n"
- "structures. The order code accommodated string  functions and \r\n"
- "vector functions.\"\r\n"
- "\r\n"
- "The basic instruction was 16 bits, though there were some 32-\r\n"
- "bit  variants also. There were no conventional registers (such \r\n"
- "as the block  of 128 B-registers on Atlas).\r\n"
- "\r\n"
- "MU5 was heavily pipelined -- about five stages at 50ns per \r\n"
- "stage. The  secondary pipeline had 10 instructions. The local \r\n"
- "store was 250ns, so  there was a wide access path to keep \r\n"
- "system going, with eight  instructions in it.\r\n"
- "\r\n"
- "Top  Previous  Next  Miscellany \r\n"
- "Membership of the Society has risen above the 300 mark.\r\n"
- "\r\n"
- "Our new chairman, Graham Morris, is the third former BCS president \r\n"
- "to join the committee. The others are our immediate past chairman, \r\n"
- "Ewart Willey, and Professor Sandy Douglas. The number will rise to \r\n"
- "four in October when Roger Johnson takes office as the 1992-93 President.\r\n"
- "\r\n"
- "Doron Swade is planning to resuscitate the Totalisator Working Party \r\n"
- "now that his heavy workload commemorating the bicentenary of the birth \r\n"
- "of Charles Babbage is finished.\r\n"
- "\r\n"
- "We regret to record the news that one of computing's best-known pioneers, \r\n"
- "Grace Hopper, died on New Year's Day at the age of 85. \r\n"
- "Rear-Admiral Hopper had many innovative software developments to her name, \r\n"
- "though perhaps she is best known for introducing the word \"bug\" into computer
  \r\n"
- "terminology, when she discovered that a failure of the Harvard Mark I computer
  \r\n"
- "was caused by a moth.\r\n"
- "\r\n"
- "Computing anniversaries in 1992 include:\r\n"
- "\r\n"
- "375th: Napier's invention of the primitive calculating device known as \r\n"
- "Napier's Bones in 1617\r\n"
- "\r\n"
- "100th: Herman Hollerith's entry into business as the Hollerith Electric \r\n"
- "Tabulating System in 1892, following the success of his automation of the \r\n"
- "processing of the 1890 US census\r\n"
- "\r\n"
- "30th: launch of the Ferranti Orion in 1962\r\n"
- "\r\n"
- "25th: IBM's introduction of the binary synchronous communications protocol in 1967\r\n"
- "\r\n"
- "25th: installation of the first cash dispenser in the UK, also in 1967\r\n"
- "\r\n"
- "10th: the issuing of a licence to Mercury Communications in 1982\r\n"
- "\r\n"
- "5th: launch of the IBM PS/2 in 1987.\r\n"
- "\r\n"
- "Top  Previous  Next  Working Party Reports \r\n"
- "Elliottt 803 Working Party\r\n"
- "John Sinclair, Chairman\r\n"
- "\r\n"
- "In the last issue of Resurrection I reported that the \r\n"
- "processor was operational. Since then, we have made steady \r\n"
- "progress towards our goal of restoring it to \"as new\" \r\n"
- "condition, as a result of a lot of hard if unglamorous work. \r\n"
- "The working party members put in 32 sessions of restoration \r\n"
- "during 1991.\r\n"
- "\r\n"
- "The processor is now exceptionally reliable -- indeed, I \r\n"
- "cannot remember the last logic failure. We did have a store \r\n"
- "problem in the summer, when the room temperature was around 80 \r\n"
- "degrees (neither the room nor the processor has any air \r\n"
- "conditioning).\r\n"
- "\r\n"
- "All the peripherals are now operational, including the 35mm \r\n"
- "film handlers, and reliability is steadily improving. The film \r\n"
- "handlers were thick with grime when we got them, and to start \r\n"
- "with we were discovering new faults every time we switched \r\n"
- "them on, but we have now got past that point.\r\n"
- "\r\n"
- "The major advance since the last newsletter has been the \r\n"
- "acquisition of a new battery, generously donated by the RAF to \r\n"
- "the Science Museum after we tracked down the appropriate \r\n"
- "stores unit and paid them a visit. (The batteries are still \r\n"
- "being made for use in aircraft like the Nimrod.)\r\n"
- "\r\n"
- "This was the first time that any member of the working party \r\n"
- "had seen a brand new battery: the normal procedure with \r\n"
- "defective batteries when the Elliotts were in use was to \r\n"
- "replace the faulty cell or cells. This was principally on \r\n"
- "grounds of cost -- the last time I looked each cell cost \r\n"
- "around £70.\r\n"
- "\r\n"
- "The new battery has helped a great deal. Previously, we had to \r\n"
- "put the old battery on a charge for an hour before we could \r\n"
- "switch the processor on, as it would not otherwise cope with \r\n"
- "the surge of power.\r\n"
- "\r\n"
- "Other acquisitions include a collection of Creed teleprinter \r\n"
- "parts, acquired by working party member George Bradley from an \r\n"
- "engineer who used to work with Creed, and had been storing \r\n"
- "them in his garage since the company discontinued production. \r\n"
- "These will be useful for the Pegasus as well, and we should \r\n"
- "now be able to keep the teleprinters running on both machines \r\n"
- "for a considerable time.\r\n"
- "\r\n"
- "At the Open Day, we were promised a complete additional 803 -- \r\n"
- "a major surprise, as we thought that our machine plus the \r\n"
- "incomplete one in the Science Museum store were the only \r\n"
- "surviving examples.\r\n"
- "\r\n"
- "DEC\r\n"
- "Adrian Johnstone, Chairman\r\n"
- "\r\n"
- "The Working Party, having restored the museum's original PDP-8 \r\n"
- "to its full glory, has been concentrating its efforts on a \r\n"
- "PDP-12. This machine is rather a surprise to anyone that \r\n"
- "associates DEC with small machines, firstly in that it is \r\n"
- "rather large, and secondly in that it is green. I cannot, off \r\n"
- "hand, think of any other green production computers (I \r\n"
- "discount the Elliot 401 languishing in the corner as it was \r\n"
- "never mass produced) and am sure that the particular \r\n"
- "combinations of day-glo and olive drab employed here will not \r\n"
- "be seen again in our lifetimes. \r\n"
- "\r\n"
- "The 12 is an odd machine in may other ways. It is something  /of \r\n"
- "a specialist device, being equipped as standard with a bay of \r\n"
- "Analogue to Digital Converters and a console VDU. Internally, \r\n"
- "it is a hybrid of a PDP-8 and a LINC (Laboratory Instrument \r\n"
- "Computer) which was originally demonstrated at MIT in 1961. \r\n"
- "The LINC was a great influence on the design of the DEC PDP-4 \r\n"
- "and PDP-5, and therefore of the 5's successor the PDP-8. The \r\n"
- "original LINC machines were constructed using DEC supplied \r\n"
- "logic modules, so it was natural for DEC to take over \r\n"
- "production from MIT. Subsequently a two processor machine, the \r\n"
- "LINC-8 was designed which could execute LINC and PDP-8 \r\n"
- "instructions in parallel, and then the PDP-12 which could \r\n"
- "execute either LINC or -8 instructions but not at the same \r\n"
- "time.\r\n"
- "\r\n"
- "About 1000 PDP-12's were made, and many were sold to hospitals \r\n"
- "and other medical institutions. Our machine was used for \r\n"
- "diagnosis and research into hearing and speech disorders. A \r\n"
- "speech synthesiser was used to play back syllables to the \r\n"
- "guinea pig in a controlled way. This system, complete with \r\n"
- "software is now restored, and can make various burbling and \r\n"
- "whistling noises. The machine was never used for full \r\n"
- "connected speech, so it cannot easily be persuaded to hold a \r\n"
- "conversation, but we plan to use some public domain text-to-\r\n"
- "phoneme ftware to build some sample sentences for play back. \r\n"
- "This is a major undertaking, and I would be pleased to hear \r\n"
- "from programmers with an interest in speech synthesis. I have \r\n"
- "built a small phoneme based speech synthesiser for use on my \r\n"
- "own machines on which the text-to-speech programs have been \r\n"
- "demonstrated, so most of the ingredients are already \r\n"
- "available.\r\n"
- "\r\n"
- "The Working party has also acquired some PDP-11 equipment \r\n"
- "which will shortly be transferred to the museum for \r\n"
- "restoration. The haul includes what is probably one of the \r\n"
- "first PDP-11's to be sold in this country. Unfortunately the \r\n"
- "machine is showing signs of {\\em rust} of all things, so \r\n"
- "considerable work may be required before it may be safely \r\n"
- "switched on.\r\n"
- "\r\n"
- "Software and Emulators\r\n"
- "Tony Sale, Chairman\r\n"
- "\r\n"
- "The Working Party took the major decision last summer to focus \r\n"
- "its efforts more sharply by concentrating on the emulation of \r\n"
- "old computers, and particularly the computers in the Society's \r\n"
- "collection. Software in the round had proved to be too large a \r\n"
- "subject.\r\n"
- "\r\n"
- "As a result, we are now known as the Software and Emulators \r\n"
- "Working Party. At the same time, I succeeded Martin Campbell-\r\n"
- "Kelly as chairman.\r\n"
- "\r\n"
- "We have made considerable progress since then. We have spent \r\n"
- "some time studying the possibility of developing standard file \r\n"
- "formats for paper tape emulation on floppy discs -- for \r\n"
- "transferring data and programs from tape to disc for use in \r\n"
- "emulations and vice versa. We have  eveloped a firm proposal \r\n"
- "which we are now considering in more detail.\r\n"
- "\r\n"
- "We have also spent some enjoyable hours testing Chris Burton's \r\n"
- "\"flight simulator\" of Pegasus. Some explanation is needed \r\n"
- "here, as the flight simulator concept is an important one \r\n"
- "which will be of interest to everyone attempting conservation \r\n"
- "and restoration of historic computers.\r\n"
- "\r\n"
- "The \"flight simulator\" is a piece of software that not only \r\n"
- "emulates the instruction set of the target computer, but also \r\n"
- "emulates the person-machine interaction using graphics. You \r\n"
- "could say it conserves the persona of the machine in software.\r\n"
- "\r\n"
- "Thus Chris Burton's simulator shows a pictorial representation \r\n"
- "of the front face of a Pegasus with its CRTs, lights and \r\n"
- "switches working in real time when a program is run. (A hand \r\n"
- "emerges from behind the screen to change the switch settings \r\n"
- "when this is required!) It also shows the holes punched in the \r\n"
- "paper tape that is being used.\r\n"
- "\r\n"
- "Chris' simulator has now been extensively tested and debugged, \r\n"
- "and has been verified by Derek Milledge against our own \r\n"
- "Pegasus. Some of our older members are now using it to \r\n"
- "redevelop programs they wrote when Pegasus was a new machine.\r\n"
- "\r\n"
- "A second flight simulator is being written by Peter Onion for \r\n"
- "our Elliott 803, and this is now nearing completion. This, \r\n"
- "like the Pegasus program, will run on any PC that has VGA \r\n"
- "graphics.\r\n"
- "\r\n"
- "Writing simulators is as you can imagine very time-consuming. \r\n"
- "Another thing we have been looking at is the development of a \r\n"
- "toolset to enable these programs to be written more easily.\r\n"
- "\r\n"
- "Pegasus\r\n"
- "John Cooper, Chairman\r\n"
- "\r\n"
- "In my last report I described how we had succeeded in getting \r\n"
- "Pegasus working again. Getting from that point to a condition \r\n"
- "where the system would be reliable enough for continuous daily \r\n"
- "use has involved at least as much work again.\r\n"
- "\r\n"
- "There has been a sustained effort over the past year to \r\n"
- "improve reliability, involving 34 sessions of work by Working \r\n"
- "Party members. The major achievement has been the complete \r\n"
- "refurbishment of the margin control panel.\r\n"
- "\r\n"
- "This is a panel inside the power supply unit that allows you \r\n"
- "to change the voltages within the machine gradually until a \r\n"
- "component within the computer fails, and then to identify and \r\n"
- "rectify the cause of failure. Getting it into full working \r\n"
- "order was a major job. The panel will help us greatly in our \r\n"
- "goal of restoring Pegasus to routine operational condition, \r\n"
- "and we are now embarking on a programme of work designed to \r\n"
- "achieve this.\r\n"
- "\r\n"
- "We are keen that this work should have an educational as well \r\n"
- "as a functional value, and are actively encouraging younger \r\n"
- "members of the Society to join us so they can familiarise \r\n"
- "themselves with the logic and operation of Pegasus. Anyone \r\n"
- "interested should contact myself or Tony Sale and we'll \r\n"
- "arrange a meeting. No previous experience of Pegasus or any \r\n"
- "similar computer is required.\r\n"
- "\r\n"
- "We also had a problem with the drum, which we identified using \r\n"
- "the margin control system though it proved not to be related \r\n"
- "to voltage changes. It took us a long time to track down the \r\n"
- "fault, which turned out to be a bad joint inside the drum \r\n"
- "case.\r\n"
- "\r\n"
- "We have completely refurbished the package tester, which also \r\n"
- "had a major fault. This is an aid to repairing broken packages \r\n"
- "- circuit boards - and was supplied with the system.\r\n"
- "\r\n"
- "Away from the machine, we have made further progress in \r\n"
- "cataloguing our collection of spares. We are also in the \r\n"
- "process of cataloguing the software, and copying it so that we \r\n"
- "have duplicate tapes of everything.\r\n"
- "\r\n"
- "Chris Burton has produced a Pegasus emulator which runs on an \r\n"
- "IBM style computer with VGA graphics. It emulates both the \r\n"
- "functions and operation of the machine, and presents a most \r\n"
- "realistic view of the console in colour, with a full set of \r\n"
- "working handswitches that can be manipulated via the IBM \r\n"
- "keyboard. This is a very fine piece of work.\r\n"
- "\r\n"
- "We also now have available a paper tape editing set for use on \r\n"
- "an IBM PC. This allows the user to create programs and text \r\n"
- "using a standard editor or word processor, with conversions to \r\n"
- "and from five hole Pegasus tape being performed automatically.\r\n"
- "\r\n"
- "S-100 bus\r\n"
- "Robin Shirley, Chairman\r\n"
- "\r\n"
- "Interest in the activities of the S-100 group has steadily \r\n"
- "been increasing. A lot of people have been contacting us after \r\n"
- "a news item about our activities appeared in Computer Shopper \r\n"
- "magazine. We also had a much more productive Open Day than in \r\n"
- "1990, which apart from providing us with some interesting \r\n"
- "contacts also produced some bits and pieces of useful \r\n"
- "equipment. Membership of the Working party is now between 10 \r\n"
- "and 20. \r\n"
- "\r\n"
- "We have acquired a Dynabyte machine, complete with \r\n"
- "documentation, which was on view at the Open day. Our display \r\n"
- "then was similar to the 1990 show. I am currently exploring \r\n"
- "the possibility of acquiring at least one Altair, which is of \r\n"
- "particular interest to us as it was the original S-100 bus \r\n"
- "machine.\r\n"
- "\r\n"
- "Many of the people who have contacted us have specific \r\n"
- "interests. For example, one man based in Carlisle has a \r\n"
- "collection of Triumph-Adler machines -- he ran the Triumph-\r\n"
- "Adler user group for a while. Another has a good collection of \r\n"
- "Hewlett-Packard desktops. A third used to run the Lynx User \r\n"
- "Group.\r\n"
- "\r\n"
- "This leads to the thought that we should perhaps create a \r\n"
- "number of sub-working parties to cater for each of these \r\n"
- "interests, all linked to the parent group in a tree-like \r\n"
- "structure. Our working party does not have the same obvious \r\n"
- "focal point of interest as the Pegasus and Elliot groups. I am \r\n"
- "contemplating writing a news sheet to keep all our members \r\n"
- "informed of the many different interests within the Working \r\n"
- "Party, if this is felt to be worthwhile.\r\n"
- "\r\n"
- "TopPrevious Next Forthcoming events \r\n"
- "5 October 1992  In steam dayOctober 1992  Evening meeting2 November 1992  In steam
  day19 November 1992  Society Open Day26 November 1992  Evening meeting7 December
  1992  In steam day\r\n"
- "\r\n"
- "In Steam Days start at 10 am and finish at 5 p.m. Members are \r\n"
- "requested to let the secretary know before coming, \r\n"
- "particularly if bringing visitors. Contact him on 071-938 \r\n"
- "8196.\r\n"
- "\r\n"
- "Members will be notified about the contents of the evening \r\n"
- "meetings once the Committee has finalised the 1992-93 \r\n"
- "programme. All the evening meetings take place in the Science \r\n"
- "Museum Lecture Theatre and start at 5.30pm.\r\n"
- "\r\n"
- "\r\n"
- "TopPrevious Next Committee of the Society \r\n"
- "[The printed version carries contact details of committee members]\r\n"
- "Chairman    Graham Morris FBCS Secretary   Tony Sale FBCS Treasurer   Dan Hayton
  Science Museum representative   Doron SwadeChairman, Pegasus Working Party   John
  Cooper MBCSChairman, Elliott 803 Working Party   John SinclairChairman, DEC Working
  Party   Dr Adrian JohnstoneChairman, S100 bus Working Party   Robin ShirleyEditor,
  Resurrection   Nicholas Enticknap Archivist   Harold Gearing \r\n"
- "\r\n"
- "Committee members\r\n"
- "\r\n"
- "Dr Martin Campbell-KellyGeorge DavisProfessor Sandy Douglas CBE FBCSChristopher
  HipwellDr Roger Johnson FBCSEwart Willey FBCSPat Woodroffe\r\n"
- "\r\n"
- "TopPreviousAims and objectives\r\n"
- "The Computer Conservation Society (CCS) is a co-operative \r\n"
- "venture between the British Computer Society and the Science \r\n"
- "Museum of London.\r\n"
- "\r\n"
- "The CCS was constituted in September 1989 as a Specialist \r\n"
- "Group of the British Computer Society (BCS). It thus is \r\n"
- "covered by the Royal Charter  and charitable status of the \r\n"
- "BCS.\r\n"
- "\r\n"
- "The aims of the CCS are to\r\n"
- "Promote the conservation of historic computers\r\n"
- "\r\n"
- " Develop awareness of the importance of historic \r\n"
- "         computers\r\n"
- "\r\n"
- "     Encourage research on historic computers\r\n"
- "Membership is open to anyone interested in computer \r\n"
- "conservation and the history of computing.\r\n"
- "\r\n"
- "The CCS is funded and supported by, a grant from the BCS, fees \r\n"
- "from corporate membership, donations, and by the free use of \r\n"
- "Science Museum facilities. Membership is free but some charges \r\n"
- "may be made for publications and attendance at seminars and \r\n"
- "conferences.\r\n"
- "\r\n"
- "There are a number of active Working Parties on specific \r\n"
- "computer restorations and early computer technologies and \r\n"
- "software. Younger people are especially encouraged to take \r\n"
- "part in order to achieve skills transfer.\r\n"
- "Resurrection is the bulletin of the Computer \r\n"
- "Conservation Society and is distributed free to members. Additional \r\n"
- "copies are £3.00 each, or £10.00 for an annual \r\n"
- "subscription covering four issues. Editor - Nicholas Enticknap\r\n"
- "    Cover design - Tony Sale  Typesetting - Adrian Johnstone\r\n"
- "    Printed by the British Computer Society © Copyright Computer Conservation SocietyComputerRESURRECTION
  The Bulletin of the Computer Conservation SocietyISSN 0958 - 7403 Volume 1 Number
  4Summer 1992Nicholas Enticknap, EditorIt has been a long time since the last issue,
  and much has \r\n"
- "happened. The most significant develop ment has been Tony \r\n"
- "Sale's initiative in setting in motion plans for a Museum of \r\n"
- "Cryptology and Computing in Bletchley Park, on the very site \r\n"
- "where the Colossus code-breaking computers played such a vital \r\n"
- "role in World War Two. Tony summarises the current situation \r\n"
- "in his Society News piece.We hope this enterprise will eventually result in both
  a \r\n"
- "permanent  home for the Society and its machines and other \r\n"
- "artefacts as well as a  focal point for our various \r\n"
- "activities. These have expanded with the  arrival of our \r\n"
- "Archivist, Harold Gearing, who has started work on the  \r\n"
- "massive undertaking of documenting and classifying our growing  \r\n"
- "collection of historical documents.Meanwhile the Society's existing activities
  have continued \r\n"
- "unabated.  As far as work on our two oldest computers is \r\n"
- "concerned, the emphasis  has changed -- both Pegasus and \r\n"
- "Elliott have been working for over a  year now, and the new \r\n"
- "objective is to get them back to the state of  reliability \r\n"
- "they enjoyed when new.The two working parties concerned with more modern computers
  \r\n"
- "have both  been expanding their portfolios of equipment, while \r\n"
- "the Software group  has taken on a new lease of life with a \r\n"
- "redefinition of its role.  Further details of all this \r\n"
- "activity can be found in the Working Party  reports.The meetings programme has
  continued toughout the past year \r\n"
- "along  the lines successfully established in our first year. \r\n"
- "This issue  carries reports on a wide variety of historical \r\n"
- "subjects, ranging from  the evolution of Algol to the \r\n"
- "influence on early circuitry of Alan  Blumlein via the \r\n"
- "development of the DEC PDP-8. We also carry a report based on \r\n"
- "the all-day seminar on the pioneering computers from  \r\n"
- "Manchester University.Director, The National Museum of Science and IndustryThe
  activities of the Computer Conservation Society have \r\n"
- "agitated a host of issues that are both exciting and \r\n"
- "disturbing. Several established traditions have been \r\n"
- "challenged. There is an unspoken assumption in the museum \r\n"
- "world that interpretation of the past is necessarily based on \r\n"
- "partial, if not fragmentary, evidence. However, the Society's \r\n"
- "programme, far from being damned to shards and chipped \r\n"
- "fragments from an inaccessibly distant past, provides an \r\n"
- "embarrassment of riches -- machines, documentation, orally \r\n"
- "transmitted expertise and experiences, recorded seminars and \r\n"
- "colloquia by the living practitioners and witnesses to the \r\n"
- "great pioneering age of computing. Unlike the archaeologist we \r\n"
- "have the opportunity to select from an almost unlimited wealth \r\n"
- "of evidence. There is another respect in which the activities of the \r\n"
- "Society up-end otherwise comfortable perceptions. The \r\n"
- "established ethos of preservation is essentially passive -- \r\n"
- "physical relics placed in an inert environment to retard \r\n"
- "degradation. However, the efforts to restore historic machines \r\n"
- "to working order by those who originally designed and \r\n"
- "maintained them are highly interventionist and this raises \r\n"
- "dilemmas about historical integrity and authenticity.These are not the only stirrings
  in the museological soup. It \r\n"
- "is painful to accept the ultimately inevitable demise of \r\n"
- "machines lovingly and ingeniously restored to working order. \r\n"
- "The Society's programme to emulate past performance on present \r\n"
- "day machines using the restored original as a benchmark of \r\n"
- "authenticity, is a bold and visionary move, but it has \r\n"
- "disturbing implications. The museum culture is founded on the \r\n"
- "notion that the original object is an ultimate historical \r\n"
- "source. However, with emulation, we are faced with the \r\n"
- "prospect of the operational spirit of a machine being \r\n"
- "preserved, as it were, independently of its body. The \r\n"
- "`ultimate source' is now a computer program not an object. Can \r\n"
- "museums extend to embrace the abstract as object?These are a few of the many rewarding
  speculations stimulated \r\n"
- "by the activities of the Society which has broken new ground \r\n"
- "in conservation and museological terms. Its accomplishments \r\n"
- "are to be saluted and we are indebted to its many members for \r\n"
- "the generosity of their efforts and time, The Science Museum \r\n"
- "cherishes its relationship with this vigorous and \r\n"
- "unconventional organisation and looks forward to building on \r\n"
- "its successes and progressing its pioneering programme in the \r\n"
- "coming yearsTony Sale, SecretaryWe spent a lot of time last year working on the
  long term \r\n"
- "future of the  Society. We have been concerned that our future \r\n"
- "is anything but secure.  Our premises at the Science Museum \r\n"
- "are already too small for our growing  collection of \r\n"
- "computers, and in any event the building is under threat  of \r\n"
- "re-development.Last summer a unique opportunity arose to secure a permanent \r\n"
- "home for the Society. This is in the most appropriate site of \r\n"
- "Bletchley Park,  where the Colossus code-breaking computers \r\n"
- "were developed and used  during World War II.Bletchley Park is currently still
  largely owned by the \r\n"
- "Government,  represented by Property Holdings, with the \r\n"
- "remaining small part  belonging to British Telecom. The two \r\n"
- "organisations were planning to  sell the Park for re-\r\n"
- "development, including the huts used by the  code-breakers and \r\n"
- "a number of other buildings used to house teleprinters and  \r\n"
- "other equipment.The Society joined forces with the Bletchley Archaeological \r\n"
- "Society to  lobby the appropriate local authority, the Milton \r\n"
- "Keynes Development  Corporation, for support in preserving the \r\n"
- "historic huts. On our own  initiative we further proposed that \r\n"
- "the part of the Park which includes  the huts should be used \r\n"
- "to house a Museum of Cryptology and Computing.  The proposed \r\n"
- "Museum site covers four acres, and contains 9,000 square  feet \r\n"
- "of space in the huts and a further 60,000 square feet in the \r\n"
- "other  buildings, which are currently leased by the Civil \r\n"
- "Aviation Authority.I am glad to say that our efforts have been successful. The
  \r\n"
- "Milton  Keynes Development Corporation has set up a Bletchley \r\n"
- "Park Trust with a  seedcorn start-up fund of £20,000. The \r\n"
- "Trust is currently raising  further funds from industry.The Trust has a steering
  committee, and has produced an \r\n"
- "outline business  plan. This involves turning the whole of \r\n"
- "Bletchley Park into a 1940s  theme park, of which the museum \r\n"
- "campus will form a part. Income from the  theme park will \r\n"
- "provide the funding for the Museum.There is a long way to go yet. The Trust needs
  to raise £10 \r\n"
- "million to  purchase the Park. Nonetheless, I am very hopeful \r\n"
- "that the project will  succeed, and remove the uncertainty \r\n"
- "hanging over the Society's future.Nicholas Enticknap and Pat WoodroffeThe first
  public implementation of Algol was created in \r\n"
- "January 1960. The thirtieth anniversary of the language, \r\n"
- "therefore, took place in 1990. To commemorate the occasion, \r\n"
- "the Society held an afternoon meeting  at the Science Museum.The meeting concentrated
  on the early days -- how Algol came \r\n"
- "into being,  and how the early compilers were developed. It \r\n"
- "was chaired by Mike  Woodger, a member of committees \r\n"
- "responsible for defining the language as  far back as 1958. \r\n"
- "Woodger gave a scene-setting talk describing the  creation of \r\n"
- "the language.Broadly speaking, Algol emerged from the activities of two \r\n"
- "independent groups: the GAMM subcommittee in Europe, and the \r\n"
- "ACM in America. The major steps in the process are listed in \r\n"
- "the following table:Woodger also ran over the genesis of the various ideas and
  \r\n"
- "concepts that found expression in the early implementations of \r\n"
- "Algol, starting as far  back as 1948.Woodger was followed to the rostrum by David
  Hill of the \r\n"
- "Medical  Research Council, who took the story forward into the \r\n"
- "seventies with an  account of subsequent standardising work by \r\n"
- "IFIP and ISO.ISO and IFIP both entered the picture in 1962, when IFIP \r\n"
- "Working Group  2.1 took over running Algol as ISO was turning \r\n"
- "its attention to the standardisation of programming languages. \r\n"
- "So the Working Group submitted  its 1962 Algol report to ISO.ISO, said Hill, decided
  the report wasn't suitable as it \r\n"
- "stood. It  wanted a subset, some I/O to go with it, and a \r\n"
- "standardised hardware  representation of the language.In response the Working Group
  produced by 1965 three subsets \r\n"
- "of the  language plus two proposals for I/O. These were put \r\n"
- "together in a Draft Recommendation: ISO decided not to call \r\n"
- "them standards because there  were still arguments about \r\n"
- "whether there should be one standard language  rather than \r\n"
- "standards for various languages.The draft appeared in April 1967, but it was March
  1972 before \r\n"
- "scrutiny  of the draft was completed and `ISO recommendation \r\n"
- "No 1538: Programming language -- Algol' appeared.This, said Hill, \"was an absolute
  disaster, full of errors and \r\n"
- "changes which had been made without consultation\". Hill \r\n"
- "himself was instrumental  in rectifying the \"disaster\", along \r\n"
- "with Richard de Morgan and Brian  Wichman. Together these \r\n"
- "three formed a new IFIP sub-committee to  consider further \r\n"
- "revisions to Algol 60.This sub-committee had a number of sources to draw on. At
  a \r\n"
- "1972 ISO committee meeting it was agreed that a new edition of \r\n"
- "ISO Recommendation 1538 should be produced. The delegates at \r\n"
- "this meeting drew up a list of errors in the earlier ISO \r\n"
- "document, and also drew up a list of questions that ought to \r\n"
- "go to the new IFIP sub-committee. There were also  proposals \r\n"
- "from German and Japanese sources, and a number of published  \r\n"
- "papers by Algol specialists.The IFIP sub-committee was finally left with a number
  of \r\n"
- "difficulties of  interpretation, plus some unsettled \r\n"
- "questions. On these points the  committee had to make its own \r\n"
- "decisions.Once all the difficulties had been resolved, the maintenance  \r\n"
- "committee's report was agreed by IFIP Working Group 2.1 and \r\n"
- "subsequently  became known as `The Modified Report'.At this point the emphasis
  of the Society's meeting shifted \r\n"
- "from the  specification to the implementation. The next three \r\n"
- "speakers described  the development of compilers for three \r\n"
- "sixties computers, the English  Electric KDF9, the Elliott 803 \r\n"
- "and the DECsystem-10.Lawford Russell joined English Electric in 1960, and after
  \r\n"
- "initial work  on the Deuce teamed up with Brian Randall to \r\n"
- "produce an assembler for  the KDF9, then under development. \r\n"
- "Before the project made much progress,  however, the two men \r\n"
- "went to an Algol conference and became \"very  excited by it \r\n"
- "all\".Deciding on the spot that they must implement Algol on the \r\n"
- "KDF9, they approached Algol guru Edsger Dijkstra for advice. \r\n"
- "The upshot was that  they spent an intensive two weeks study \r\n"
- "with Dijkstra in Holland, which  \"led us to an outline of the \r\n"
- "basic structure of the intermediate  language, which we \r\n"
- "transposed Algol into for running\".Randall and Russell made two early important
  design decisions. \r\n"
- "The  language would be interpretive, as that was what the \r\n"
- "users in their  division of English Electric wanted. And \"we \r\n"
- "decided to go for a single  pass translation as we were used \r\n"
- "to on the Deuce, which allowed you to  do some processing \r\n"
- "while your cards were being read in\". The KDF9 would  be \r\n"
- "faster and would use paper tape, so \"surely we could do some  \r\n"
- "processing for the translation while the program was being \r\n"
- "read in?\".The striking aspect of this project was the working conditions \r\n"
- "which  would be thought impossibly primitive today. \"We had no \r\n"
- "machine and very  little information about it so we had to do \r\n"
- "lots and lots of desk  checking. We produced our logic flow \r\n"
- "diagrams and just desk checked  these between us... So the \r\n"
- "logic checking got far ahead of the code  testing: some of \r\n"
- "that was good and some of it was bad.\"About this time potential KDF9 customers
  starting asking for \r\n"
- "copies of  the compiler. But it wasn't finished, and \"our flow \r\n"
- "diagrams were only  meant for inter-project use. So we thought \r\n"
- "we would need to define a much  more rigid sort of meta-\r\n"
- "language... then we had to convert all our flow  diagrams to \r\n"
- "this, then we had to desk check them again\".The logic flow diagrams were actually
  delivered to one \r\n"
- "potential  customer, de Havilland -- \"the first case of a copy \r\n"
- "of a compiler being  available before the original\".The design of the Algol compiler
  for the Elliott 803 presented \r\n"
- "a  different set of problems, described by Jeff Hillmore. Late \r\n"
- "in 1960 a  small group from Elliott went to an Algol \r\n"
- "Conference run by  Dijkstra -- that man again. They returned \r\n"
- "determined to make Algol 60 the   advanced  programming \r\n"
- "language for the 803. A development team was formed, and  \r\n"
- "Hillmore joined it in November 1961.The team worked with some despatch. The first
  program was \r\n"
- "compiled and  run just three months later, on 15 February \r\n"
- "1962. Version 1 of the  compiler, using five-hole paper tape \r\n"
- "input/output, was available by  November. The time taken to \r\n"
- "reach that point, which included writing the  user manual, was \r\n"
- "eight person-years.\"The 803 sold to a lot of educational establishments and to
  \r\n"
- "scientific users, and in both of these areas there was a need \r\n"
- "to process a high  average number of programs in a given \r\n"
- "period, and to reduce to a minimum  the time spent in changing \r\n"
- "over from one program to another.\"So the design decisions that were made were,
  first of all, \r\n"
- "the system  should be a load-and-go system. You should, at the \r\n"
- "start of a session,  load the compiler, load the dynamic \r\n"
- "routines and the process, compile  and run program after \r\n"
- "program.\"The other decision that was made was that the user's program \r\n"
- "should run  at the full speed of the machine. So we wanted a \r\n"
- "compiler that would  generate an object program in binary \r\n"
- "machine code which would then run,  and we didn't want to \r\n"
- "interpret them. This was a very different decision  to that \r\n"
- "made by the KDF9 people.\"The other decision was that the source text should be
  read \r\n"
- "once only.  So we ended up with a compiler which was designed \r\n"
- "to operate in two  phases. The compiler converted the Algol \r\n"
- "source to an intermediate  binary stream which we called Own \r\n"
- "Code, and this was processed in the  second internal pass into \r\n"
- "a binary object program, and that was then  executed at full \r\n"
- "speed.\"Hillmore identified six activities in the compiler writing \r\n"
- "process.  First there was the writing of a lexicon analyser to \r\n"
- "tokenise the Algol  symbols, taking the hardware \r\n"
- "representation and generating these tokens,  which made the \r\n"
- "compiler independent of how the program was input.Next came the dictionary system
  for recording identifiers and \r\n"
- "their properties. Then the team decided how the memory space \r\n"
- "was going to be allocated. Fourth, they specified the own code \r\n"
- "format. \"Out of those  four parts of the initial activity came \r\n"
- "the definition of the Algol 60  subset which would be \r\n"
- "implemented\".The final two activities were the specification of the I/O \r\n"
- "definition  and the writing of a high level pseudo-Algol \r\n"
- "definition of the compiler.The final speaker was Richard de Morgan, who gave a
  \r\n"
- "presentation  describing the design of the Algol compiler for \r\n"
- "the DECsystem-10. We  have already met de Morgan as one of the \r\n"
- "IFIP sub-committee that  produced the Modified Report. \r\n"
- "Earlier, he had been one of the earliest  users of Algol -- he \r\n"
- "learnt it as his first programming language while an  \r\n"
- "undergraduate at Liverpool University.de Morgan's first task at DEC, which he joined
  in 1969, was to \r\n"
- "work on  the outline design of an Algol-60 compiler for the \r\n"
- "DECsystem-10. The  only languages supplied for it then were \r\n"
- "Fortran and BASIC.de Morgan was working with Professor Nicol Hardiman of \r\n"
- "Carnegie-Mellon University, and they were given one month to \r\n"
- "complete the  task.\"We did design a system, and the amazing thing is that we \r\n"
- "could do the design down to a fair amount of detail in one \r\n"
- "month. It turned out that Nicol Hardiman's ideas about how the \r\n"
- "system ought to be built and my experience of writing \r\n"
- "compilers were more or less compatible.\"We decided that we would do a one pass
  compiler but we would \r\n"
- "implement everything we could in what we conceived to be the \r\n"
- "spirit of the Algol  60 revised report... Of the things we \r\n"
- "couldn't implement, if we thought  they were useful we'd find \r\n"
- "a way round them and if we didn't think they  were useful we \r\n"
- "wouldn't implement them.\"The decision to build a one-pass compiler created problems.
  \r\n"
- "One of the  major ones concerned formal parameters, \r\n"
- "particularly formal parameters  that are procedures. The \r\n"
- "question was: how do you know when you're going  to call a \r\n"
- "formal procedure parameter what its parameters are?de Morgan went on: \"Given that
  we had to have independent \r\n"
- "compilation,  the unit of compilation was either the main \r\n"
- "program or a procedure. So  we had the concept of an external \r\n"
- "procedure: we had to enforce type  checking at run-time of the \r\n"
- "actual to formal parameter correspondence.\"Another design decision was to allow
  users to do anything they \r\n"
- "liked  with formal parameters. They could even be used as the \r\n"
- "controlled  variable in a forced statement, so that you could \r\n"
- "predict what was going  to happen.Then questions arose about own variables and
  own arrays, which \r\n"
- "were only resolved after much thought.\"We put in a few other extras: position,
  remainder, operator, \r\n"
- "which we thought very useful. We put in `While' as an \r\n"
- "iterative statement. We  added another type -- non-real -- \r\n"
- "rather than having some type of   compiler  directive which \r\n"
- "told you what precision your reals ought to be.\"The resulting compiler worked
  well. \"Efficiency of the code \r\n"
- "was fairly  good because we put work into getting around the \r\n"
- "overhead of the  procedure calls by generating access \r\n"
- "sequences that were very efficient.  We often ran faster than \r\n"
- "Fortran, and typically 1.5 to three times  faster than Algol \r\n"
- "60 on comparable machines.\" Ted NewmanI believe that Blumlein was the best electronic
  engineer that \r\n"
- "ever lived.I first met him during the war when, as a young engineer, I \r\n"
- "saw an  advert for someone to do TV tubes and applied for the \r\n"
- "job. I went  along and there was this very frightening man \r\n"
- "with green eyes who  interviewed me -- Blumlein seemed to have \r\n"
- "the greenest eyes of anyone I'd seen.He started the interview by asking if I knew
  anything about  \r\n"
- "vector analysis. I said I didn't. He said, \"Here are some \r\n"
- "circuits  I want you to look at\". He spent a long time making \r\n"
- "me look at these  circuits and asking, \"How do you think this \r\n"
- "works?\", \"How do you think  that works?\". Then he said, \r\n"
- "\"Actually I would call that vector  analysis. You might think \r\n"
- "that I'm now taking you to the vacancy we've  got in the TV \r\n"
- "tube place. You're not going to do that. You're going to  work \r\n"
- "on circuits\".I was 22 at the time I started. I was Blumlein's personal \r\n"
- "dogsbody,  and had lots of odd things to do for him. I saw \r\n"
- "Blumlein much more  than I would have expected to, because I \r\n"
- "was a lad of not much  importance. He was always Mr Blumlein \r\n"
- "to me -- never Alan -- because he  was the big boss.He created a range of monitors
  -- they were very advanced  \r\n"
- "measuring oscilloscopes. You could measure the amplitude and \r\n"
- "width of  the pulses very accurately. You could do this by \r\n"
- "shifting the offset  voltage on the screen, and measuring the \r\n"
- "shift on the meter, and the  width could be similarly measured \r\n"
- "with a very accurately defined  sawtooth scan.The first monitor was called Mohammed,
  after the founder of \r\n"
- "the  Moslems. The Caliphs came after Mohammed in history so \r\n"
- "the later  monitors were called Caliphs -- I can remember Ali \r\n"
- "and Xerxes, but not  the others. The monitors were all \r\n"
- "slightly different and Blumlein  expected every one to be \r\n"
- "correctly named; if you got a name wrong you  were in dead \r\n"
- "trouble.He also had names for many of his circuits. There was the \r\n"
- "Cholmondeley  Tweaker, a Featherstonehaugh Follower and a St \r\n"
- "John Something Else.  (These names were pronounced Chumley, \r\n"
- "Fanshaw and Sin-jin.)He believed that circuits had to be calculated. I had a little
  \r\n"
- "book  that I'd calculate various circuits in and then he'd see \r\n"
- "on the  monitor whether the pulse was the same as I'd \r\n"
- "calculated.Blumlein was born in 1903. He was in Standard International \r\n"
- "from 1924  to 1929, when he joined Schoenberg's Columbia \r\n"
- "record organisation,  which was a small company at the time. \r\n"
- "The following year he joined  EMI, where he worked till he was \r\n"
- "killed in a plane crash in 1942.He filed 128 patents, but he didn't write many
  papers. If \r\n"
- "you've got a  lot of valuable ideas in a commercial firm you \r\n"
- "don't want to give them  to everybody else, so you don't write \r\n"
- "papers, you file patents.Some time after Blumlein's death, in 1947, at an important
  \r\n"
- "meeting of  the Association of Scientific Workers there was an \r\n"
- "almost unanimous  decision that all research ought to be done \r\n"
- "in Government and not  commercially. I was an idealist at the \r\n"
- "time so I tried to get into  Government service at a very \r\n"
- "reduced salary.I went to the Civil Service Commission, and was interviewed by \r\n"
- "HA  Thomas, who asked me \"EMI -- isn't that where Blumlein \r\n"
- "was?\". I said  yes, and he then sent me to NPL.There was a background to this
  which I discovered later. At \r\n"
- "the time  Turing had got a lot of details, in fact a full \r\n"
- "logical diagram, for a  both a big computer and a small \r\n"
- "machine. The big one Turing thought  was too much to tackle: \r\n"
- "the small one was called the Ace Pilot Model.  A number of \r\n"
- "people had tried and failed to get the circuits working at  \r\n"
- "all, including Turing to start with -- he wasn't very good at \r\n"
- "getting  circuits going. I think what happened was that HA Thomas, a much maligned
  man, \r\n"
- "thought  it would be a good idea to recruit someone who knew \r\n"
- "something about  circuits of the kind that were necessary for \r\n"
- "computers, and these were  the sort of circuits that Blumlein \r\n"
- "created.Once I was at the NPL, Thomas asked me to recruit other people \r\n"
- "with  this knowledge. So Tubsy Clayden was recruited, and then \r\n"
- "later John  Parks and Roger Scantlebury (Roger's dad had also \r\n"
- "worked at EMI for a  long time).The circuits we produced all worked extremely well,
  and they \r\n"
- "were  derived from Blumlein circuits, so there is no doubting \r\n"
- "the influence  of Blumlein on the very reliable Pilot Model \r\n"
- "Ace.Also, Blumlein visited TRE in the forties and met Williams and \r\n"
- "his  colleagues. They had not been doing very well with their \r\n"
- "circuits, and  Blumlein showed them how to do it. Tom Kilburn \r\n"
- "agrees that this  happened. Williams afterwards became \r\n"
- "Professor Williams who dealt with  the Manchester computer, \r\n"
- "and Kilburn joined him from TRE, and from  what I could tell \r\n"
- "the Blumlein-type circuits were widely used in TRE.  So once \r\n"
- "again the influence of Blumlein as very great.Blumlein was unique. He was highly
  inventive, and a man who \r\n"
- "thought in  a different way from his contemporaries. Light \r\n"
- "engineering in 1929  dealt almost entirely with communication \r\n"
- "by voice or code.  Transmission was by wire cable or radio. \r\n"
- "I've read all the standard  books on communication up to 1945 \r\n"
- "that I can find, and none of them  deals in any way with high \r\n"
- "speed pulses. Nor, except for the purely  transmission side, \r\n"
- "could they deal with the tasks posed by television.In the communication industry
  all control and switching \r\n"
- "functions were  either done mechanically or by electrically \r\n"
- "controlled relays. High  speed was not wanted. It was only \r\n"
- "recently, long after the advent of  computers. that \r\n"
- "electronics was used. For television and particularly  for \r\n"
- "advanced radars or computers, control and switching had to be \r\n"
- "done  electrically. But Blumlein was an iconoclast and was \r\n"
- "very inventive:  only such a person could break the necessary \r\n"
- "new ground.This article is an edited transcript of a talk given by Ted \r\n"
- "Newman to  the Society at the Science Museum on 28 February \r\n"
- "1991.Adrian Johnstone   The Digital Equipment Corporation (DEC) was formed in \r\n"
- "   1957 and is now perhaps the second or third largest \r\n"
- "   computer company in the world. Remarkably, the company is \r\n"
- "   still led by the original president, Ken Olsen, who was a \r\n"
- "   student at MIT at a key time in computing history. DEC is \r\n"
- "   widely credited with producing the first desktop \r\n"
- "   minicomputer, the PDP-8. The minicomputer style of \r\n"
- "   computer architecture is very different from the long-\r\n"
- "   word length machines that dominated early commercial \r\n"
- "   computing, but the ideas did not spring fully formed from \r\n"
- "   the minds of DEC's designers. I hope to show here that \r\n"
- "   one of the earliest programmable computers constructed in \r\n"
- "   the United States was the direct parent of the DEC PDP-5, \r\n"
- "   -8 and -11 series of machines as well as many early \r\n"
- "   eight- and sixteen-bit microprocessors.Although the distinctions are nowadays
  becoming blurred, \r\n"
- "traditionally computing has been divided into three \r\n"
- "application areas: scientific computing with an emphasis \r\n"
- "on floating point arithmetic, commercial computing which \r\n"
- "requires access to large databases and real-time \r\n"
- "computing which requires relatively simple processing to \r\n"
- "be performed at the highest speed.  A real-time system \r\n"
- "must return results within the timeframe of some \r\n"
- "monitored process -- car engine management systems, \r\n"
- "flight simulators and the computer inside your washing \r\n"
- "machine are all examples of real-time problems. There is \r\n"
- "an old joke that defines a scientific programmer as one \r\n"
- "who types in a single number, processes it for a week and \r\n"
- "then prints a single number. By the same token, a \r\n"
- "commercial programmer types in a number and prints out \r\n"
- "the names of five thousand people that have the same \r\n"
- "number, and a real-time programmer doesn't type in any \r\n"
- "numbers because embedded systems do not have keyboards.  In many ways real-time
  computing is the Cinderella of the \r\n"
- "three being mainly the province of engineers capable of \r\n"
- "squeezing the last ounce of performance from computers that \r\n"
- "have to be low cost, because they are to be embedded in some \r\n"
- "other product. In the past this meant a minicomputer and \r\n"
- "nowadays a microprocessor, but in either case the traditions \r\n"
- "of machine level programming that naturally dominated the \r\n"
- "pioneering days of computing live on in the real-time domain \r\n"
- "and there is therefore a strong affinity between the \r\n"
- "activities of the Society and the real-time computing world.Since embedded systems
  must be cheap, it might be thought that \r\n"
- "real-time control systems are a relatively recent phenomenon. \r\n"
- "In general this is true. To be more specific, it was the \r\n"
- "arrival of minicomputers, especially the PDP-8 in April 1965, \r\n"
- "that allowed engineers to seriously consider dedicating an \r\n"
- "entire computer to a single experiment or instrument. However, \r\n"
- "it turns out that one of the first computers constructed in \r\n"
- "the United States was a real-time system, and the \r\n"
- "architectural design decisions that were taken then formed the \r\n"
- "template for the minis and micros to come. This machine was \r\n"
- "the Whirlwind. In 1944 the US Navy contracted the Masachussets Institute of \r\n"
- "Technology (MIT) to  build an aeroplane simulator that would \r\n"
- "be capable of solving the equations of motion of the aeroplane \r\n"
- "in real time and which could thus be used to investigate \r\n"
- "instability problems in aircraft designs of the day. \r\n"
- "Originally an analogue machine was proposed, but in 1945 the \r\n"
- "design turned into a general purpose digital computer. The \r\n"
- "laboratory at MIT was renamed the Digital Computer Laboratory \r\n"
- "and Maurice Wilkes who had many contacts with the MIT team, \r\n"
- "says in his memoirs:   \"by the time I knew them they were pillars of digital \r\n"
- "    orthodoxy and I did not suspect they had an analogue \r\n"
- "    past\"The machine was a sixteen-bit single address processor -- an \r\n"
- "arrangement familiar to anybody who has worked with early \r\n"
- "minis or micros, but in those days to have a machine with only \r\n"
- "a 16-bit word was heretical. Typical word lengths were in the \r\n"
- "range 36 to 40 bits because of the need for real number \r\n"
- "arithmetic precision. No less a figure than von Neumann \r\n"
- "criticised the Whirlwind saying that with its short word \r\n"
- "length he was concerned about its ability to do anything \r\n"
- "useful at all. However, sixteen bits of precision is more than \r\n"
- "adequate for most sensing and control applications, and if you \r\n"
- "must have more precision you can always perform multiword \r\n"
- "arithmetic. Interestingly,  on modern machines the word size \r\n"
- "is dominated by the need to address large amount of memory \r\n"
- "rather than the size of the data being manipulated: hence the \r\n"
- "widely expected move towards 64-bit architectures such as the \r\n"
- "new MIPS and DEC Alpha devices is being driven by the need to \r\n"
- "directly address more than 4G byte memory spaces, not the need \r\n"
- "to manipulate 64-bit numbers. I cannot resist pointing out at \r\n"
- "this stage that von Neumann also had a fight with Edward \r\n"
- "Teller concerning the UNIVAC LARC (Livermore  Automatic \r\n"
- "Research Computer) contending that putting anything more than \r\n"
- "10,000 words in a computer would always be a waste of \r\n"
- "money.The real reason that Whirlwind had such a small word size is \r\n"
- "that it was bit-parallel at a time when almost all computers \r\n"
- "were bit serial. The Elliot 803 in the museum's collection, \r\n"
- "for instance, has at its heart a single full adder, through \r\n"
- "which the two operands are passed one bit per cycle. The \r\n"
- "Whirlwind processed two sixteen-bit operands in a single \r\n"
- "cycle, but naturally required sixteen times as much hardware \r\n"
- "to do so. Since the Whirlwind was being designed for a very \r\n"
- "specific application, it was possible for the designers to \r\n"
- "make a detailed analysis of the design constraints. Robert \r\n"
- "Everett, who was responsible for designing part of the order \r\n"
- "code for the machine had these comments about how they arrived \r\n"
- "at a 16-bit, one address computer:   \"[Sixteen] . . . is a nice binary number,
  but it did not \r\n"
- "   come about arbitrarily. It was determined by asking \"What \r\n"
- "   is the shortest single-address instruction that looks \r\n"
- "   reasonable?\" Our analysis of the programs we were \r\n"
- "   interested in showed that 1000 words was tight and 2000 \r\n"
- "   considerably better. That gave us eleven bits, and we \r\n"
- "   knew that we needed at least 16 instructions; 32 sounded \r\n"
- "   reasonable, and that gave us five bits more. Therefore \r\n"
- "   the sixteen was not a binary number, it was the sum of \r\n"
- "   two primes.\"Now although I am claiming that Whirlwind was architecturally \r\n"
- "the first minicomputer there is no doubt that the machine was \r\n"
- "anything but miniature physically. Indeed the scale of the \r\n"
- "project was staggering. The budget was $1 million per annum \r\n"
- "for the years 1945 -- 1950, which must have given Maurice \r\n"
- "Wilkes pause for thought on his visits there. The machine was \r\n"
- "laid out in 2-dimensional form so that every part could be \r\n"
- "immediately accessed in case of failure. This led to a very \r\n"
- "space-inefficient design requiring one floor of a large \r\n"
- "building. The control room alone contained fifteen 6-foot \r\n"
- "racks along with oscilloscopes and I/O equipment. The machine \r\n"
- "used specially made valves that cost between $5 and  $10 each, \r\n"
- "and the laboratory had its own tube shop to make them. Over \r\n"
- "5,000 valves and 11,000 germanium diodes went into the running \r\n"
- "system. Considering EDSAC had 3,000 valves in it and was \r\n"
- "really rather compact, it is quite difficult to see why \r\n"
- "Whirlwind needed so much floor space. Later on large tubes \r\n"
- "were added to Whirlwind that were used purely for display and \r\n"
- "Whirlwind is therefore probably the first computer to have \r\n"
- "purpose designed VDU's attached. Whirlwind has an even \r\n"
- "stronger claim to be the first computer with a light pen \r\n"
- "attached.One important aspect of the Whirlwind design was the \r\n"
- "instruction decoder. At the heart of the machine was a diode \r\n"
- "matrix that performed the decoding, rather than a set of \r\n"
- "random logic gates. This structured decoder was of course only \r\n"
- "one step away from a microcoded architecture as described by \r\n"
- "Maurice Wilkes. When Wilkes visited MIT in the 1950's he was \r\n"
- "already thinking about the use of structured as opposed to \r\n"
- "random logic and was shown the Whirlwind which:    \". . . did indeed have a centralised
  control based on the \r\n"
- "   use of a matrix of diodes . . . It was not, I think, \r\n"
- "   until I got back to Cambridge that I realised that the \r\n"
- "   solution was to turn the control unit into a computer in \r\n"
- "   miniature by adding a second matrix to determine the flow \r\n"
- "   of control at the micro level and providing for \r\n"
- "   conditional micro-instructions.\"The Whirlwind was run in a military fashion:
  the machine was \r\n"
- "very thoroughly documented and everybody working on the \r\n"
- "project had to produce a biweekly report. The highly \r\n"
- "disciplined preventative maintenance programme kept the valve \r\n"
- "failure rate down to 0.1% per 1000 hours.By the beginning of 1950 the Whirlwind
  was running well but \r\n"
- "the Navy was tiring of the $1,000,000 annual running budget. \r\n"
- "However, about that time the USSR developed its atomic bomb \r\n"
- "and the intercontinental aircraft necessary to threaten US \r\n"
- "territory. This was also the time of the Korean war and a time \r\n"
- "of general paranoia in the US. To detect enemy aircraft flying \r\n"
- "low, a network of small radar stations was required, but this \r\n"
- "then presented the problem of correlating and presenting a \r\n"
- "mass of  information to the military commanders. As an \r\n"
- "experiment, Whirlwind was hooked up over Telex lines to a \r\n"
- "radar in Lexington Massachusetts with some real time \r\n"
- "computation being performed in the MIT lab. This was a great \r\n"
- "success, and the airforce took over the project. A new \r\n"
- "division known as the Lincoln Laboratory was created, and the \r\n"
- "MIT Digital Computer Lab became part of it. Lincoln's primary \r\n"
- "responsibility was the Semi-Automatic Ground Air Defence \r\n"
- "System, otherwise know as SAGE.Whirlwind ran in this role until June 30 1959. On
  of the \r\n"
- "project team, Bill Wolf, rented the machine for a dollar a \r\n"
- "year until the late 1970's after which Ken Olsen, the DEC \r\n"
- "president, looked after it for a while before transferring it \r\n"
- "to the Smithsonian.Probably the most lasting contribution Whirlwind made to \r\n"
- "mainstream (as opposed to real-time) computing history is the development of the
  ferrite core memory, and it is here that \r\n"
- "the link with DEC becomes clear. Early computer memories, \r\n"
- "whether of the delay line or storage tube type, were \r\n"
- "unsatisfactory both because of their bulk and because of \r\n"
- "unreliability. There is evidence to show that the development \r\n"
- "of the Williams Tube in the UK gave us a significant \r\n"
- "technological lead over the US teams, until the arrival of the \r\n"
- "ferrite core memory. To quote from the famous Moore School \r\n"
- "course of 1946:   \"Several forms of fast internal memory have been proposed \r\n"
- "   and the one that shows the most promise at the present \r\n"
- "   time is the electrostatic storage tube. The one on which \r\n"
- "   most work is being done at the present time by RCA is the \r\n"
- "   Selectron, and when perfected it will have most of the \r\n"
- "   features that are desirable in this type of memory\"The Selectron appears to
  have been the great white hope of the \r\n"
- "American designers, but it was a long time coming. It was a \r\n"
- "complex device, difficult to develop and would probably have \r\n"
- "been very expensive to mass produce. The Whirlwind used its \r\n"
- "own electrostatic storage tube, but these designs could not \r\n"
- "match the elegance of the Williams' tube which was even \r\n"
- "licensed by IBM for use in the 701. However, all this effort \r\n"
- "was obsoleted at a stroke by J Forrester's work on ferrite \r\n"
- "cores. In 1952 the first testable cores were received from \r\n"
- "General Ceramics, and a 16 x 16 matrix was constructed. To \r\n"
- "develop a full system required a computer to test it, so the \r\n"
- "Memory Test Computer (MTC) was built: MTC had the same \r\n"
- "relationship to ferrite core as the Manchester Mk 1 had to \r\n"
- "Williams Tubes. The design team was headed by a recent MIT \r\n"
- "graduate called Ken Olsen. The MTC was therefore the first \r\n"
- "computer equipped with ferrite core memory. It was a great \r\n"
- "success, and the memory was transferred onto the Whirlwind, \r\n"
- "after which the MTBF on memory rose from two hours to two \r\n"
- "weeks. At this point the tube shop was converted to making \r\n"
- "displays!The MTC was about as fast as Whirlwind, although it was much \r\n"
- "more compact. Since it was not software compatible with \r\n"
- "Whirlwind, it never became part of the mainstream work of the \r\n"
- "lab. The designers subsequently moved to the new Lincoln \r\n"
- "laboratory in Lexington, and Olsen began work on the TX-0 \r\n"
- "which aimed to test transistor circuitry and a large 64K \r\n"
- "ferrite memory. The transistors used included the new Philco \r\n"
- "SBT100 surface barrier transistors which cost $80 each. TX-0 \r\n"
- "contained 3,600 transistors.The TX-0 had an 18-bit data word with a sixteen bit
  address \r\n"
- "space and only four instructions: STORE, ADD, JUMP IF LESS \r\n"
- "THAN and OPERATE. The OPERATE instruction included commands \r\n"
- "coded on bits that could be combined to produce a large \r\n"
- "number of sub-instructions such as `clear right half of \r\n"
- "accumulator' and `shift right'. This scheme was to appear \r\n"
- "in many subsequent DEC computers up to and including the \r\n"
- "PDP-8. There were two registers: an accumulator and a live \r\n"
- "register used for controlling and buffering I/O transfers. \r\n"
- "However, there was no interrupt mechanism.The TX-0 went from Lincoln to MIT in
  1958 and was used for \r\n"
- "teaching and as a laboratory controller. Later the \r\n"
- "architecture was extended to include index registers. The \r\n"
- "machine was in use until 1975 when DEC bought it for use in a \r\n"
- "museum.TX-0 was a rather futuristic looking machine. Olsen had \r\n"
- "received some (no doubt harmlessly intended) criticism over \r\n"
- "the rather homely appearance of the MTC, and seems to have \r\n"
- "taken this very much to heart in his subsequent systems. He \r\n"
- "supposedly spent some time in electrical utility shops \r\n"
- "examining home appliances, and the characteristic toggle \r\n"
- "switches seen on most DEC computers up until recent times \r\n"
- "(when toggle switches are frowned upon) are apparently based \r\n"
- "on those found on 1950's fridges. Olsen has always been most \r\n"
- "concerned about the appearance of DEC products and in some \r\n"
- "parts of the company he is referred to as the Chief Box \r\n"
- "Designer.The TX-2 was a much larger machine, containing 22,000 \r\n"
- "transistors. Its principle design goal was efficient I/O. One \r\n"
- "option might have been to use a separate I/O processor as with \r\n"
- "the IBM channel. This was rejected in favour of giving the I/O \r\n"
- "controllers direct access to main memory and having separate \r\n"
- "program counters with associated program sequences that \r\n"
- "controlled the I/O using the main processor. It was a short \r\n"
- "step from here to modern Direct Memory Access using memory \r\n"
- "mapped peripheral registers and prioritised interrupts, as \r\n"
- "seen in nearly all subsequent DEC machines. The echoes of this \r\n"
- "design decision are still very much present today. Intel-style \r\n"
- "microprocessors follow the IBM I/O model, with separate \r\n"
- "instructions for performing I/O, in spite of the fact that \r\n"
- "these microprocessors do not usually have independent I/O \r\n"
- "processors. Motorola-style devices, including the Rockwell \r\n"
- "65xx family, use a very DEC-like arrangement of memory mapped \r\n"
- "I/O registers.The TX-2 even had some internal parallelism. It has a 36-bit \r\n"
- "ALU which could be partitioned into 4 x 9, 2 x 18, 1 x 36 or \r\n"
- "even one 9-bit and one 27-bit ALU operating concurrently. The \r\n"
- "machine had separate adders for indexing and program counter incrementing. In the
  1960's the TX-2 was modified to support \r\n"
- "multiprogrammed timesharing. It was finally dismantled in \r\n"
- "1977. The construction of the machine was based on a few general \r\n"
- "purpose circuits mounted in modules running at 5MHz. In 1957, \r\n"
- "Olsen and two others formed the Digital Equipment Corporation \r\n"
- "with venture capital from American Research and Development \r\n"
- "and others. Although the original aim was to build computers, \r\n"
- "the backers were sceptical and preferred a business based on \r\n"
- "the construction of logic modules for laboratory use.  For many years, the various
  series of logic modules were a \r\n"
- "mainstay of DEC business, but their first computer was shipped \r\n"
- "in November 1960. DEC machines have always appealed to \r\n"
- "engineers and scientists because of their low cost and \r\n"
- "accessibility. The PDP prefix that was used for all computers \r\n"
- "up to the 1978 VAX machines stands for Programmable Digital \r\n"
- "Processor, and was used instead of the word `computer' \r\n"
- "specifically so that the accountants in DEC's customers' \r\n"
- "companies would not notice that the engineering  teams were \r\n"
- "buying computers, which as everybody knows are the sole \r\n"
- "province of commercial Data Processing shops.  Real-time systems, whilst outwardly
  less exciting than the \r\n"
- "latest Cray or workstation in fact account for far more of the \r\n"
- "computers in the world, both by number of units and by shipped \r\n"
- "value. At a rough count there are fifteen computers in my \r\n"
- "home, of which only three have keyboards attached. If my TV \r\n"
- "and audio hardware were a little less aged, there would be far \r\n"
- "more. So the Whirlwind and its small, fast successors have \r\n"
- "inherited the Earth, in spite of the scepticism of von \r\n"
- "Neumann.   Manchester University is, along with Cambridge University \r\n"
- "   and the  National Physical Laboratory, sure of its place \r\n"
- "   in the history books for  its pioneering contributions to \r\n"
- "   computer technology. Members of the  Society were given \r\n"
- "   some interesting and revealing insights into the  stories \r\n"
- "   behind the design of the early Manchester computers at an \r\n"
- "   all-day seminar held at the Science Museum on 23 May \r\n"
- "   1991. This report  concentrates on the hardware aspects \r\n"
- "   of the five machines described.   Professor Tom Kilburn was involved throughout
  the \r\n"
- "   development period,  initially as a graduate student \r\n"
- "   assisting Professor Freddie Williams. He  was thus an \r\n"
- "   appropriate choice as the first speaker, and he discussed  \r\n"
- "   the development of the both the prototype computer and \r\n"
- "   the full sized  successor, the Mark I.Mark IKilburn told the meeting that the
  University's involvement \r\n"
- "with  computers started when Freddie Williams paid two visit \r\n"
- "to the States in  1945 and 1946 to assess the radar circuitry \r\n"
- "being developed there. On  the second trip he visited Bell \r\n"
- "Labs and saw experiments using cathode  ray tubes. The \r\n"
- "objective was to remove the ground echoes that occurred  in \r\n"
- "all radar systems.Williams thought he could see a different use for CRTs -- as
  \r\n"
- "storage  devices -- and started exploring the possibility as \r\n"
- "soon as he got back.  \"We'd been aware of digital computers \r\n"
- "for some time then, especially  about the mercury delay line, \r\n"
- "but of course the mercury delay line is  not immediate access. \r\n"
- "There was a chance of making an immediate access  store, \r\n"
- "perhaps, with a cathode ray tube. And so it proved.\"After a period of experimentation,
  a working system was \r\n"
- "developed, and  the need to test it was to prove the \r\n"
- "foundation of Manchester's  computing reputation. \"The only \r\n"
- "way to make sure you've got a cathode  ray tube store is to \r\n"
- "actually test it with zeroes and ones changing  throughout the \r\n"
- "pattern at machine speed. Various pieces of test gear  were \r\n"
- "postulated, and Geoff Toothill and I nearly built them, but in \r\n"
- "the  end it turned out that it was going to be far easier to \r\n"
- "build a computer  to do the job properly. We set about that at \r\n"
- "the end of 1947 and by the  middle of 1948 we had what we \r\n"
- "called the baby machine.\"The machine attracted a great deal of interest. Among
  the \r\n"
- "many eminent  visitors who found their way to Manchester was \r\n"
- "Sir Ben Lockspeiser of  Ferrantis. His company was already \r\n"
- "involved in the computer project, as  they had supplied a \r\n"
- "magnetic drum for the baby machine. Now Lockspeiser  committed \r\n"
- "to fund the manufacture of a full scale machine, with the idea  \r\n"
- "of subsequently building copies for sale.\"Following Ben Lockspeiser's visit, Geoff
  Toothill and I, \r\n"
- "aided by Dai  Edwards and Tommy Thomas who joined us in \r\n"
- "September 1948, set about  making a big machine. This machine \r\n"
- "worked. It was quite a sizeable  machine and it stayed working \r\n"
- "at the University for quite a time, and  was used by people \r\n"
- "like Newman, Turing and one or two others.\"It took till November 1949 to complete
  the specification for \r\n"
- "the Mark I,  and another 15 months before Ferranti was ready \r\n"
- "to deliver the machine  to the University.Then, said Kilburn, \"It took in those
  days quite a number of \r\n"
- "months to  install the machine. The Mark I was, like all those \r\n"
- "machines, quite  difficult to maintain. We had trouble with \r\n"
- "the machine, and trouble with  the drum, and everyone around \r\n"
- "us was conscripted to try and keep the  machine working. The \r\n"
- "machine continued to work at the University up to I  believe \r\n"
- "1959.\"One of our aims was to introduce computers to industry. We \r\n"
- "allowed  industry to use the machine right from the start, \r\n"
- "charging them some  reasonable fee which was I think £50 an \r\n"
- "hour.\"While grappling with the problems of getting the Mark I to \r\n"
- "work, Kilburn  and his colleagues were already thinking ahead \r\n"
- "to the next computer.\"It was clear long before the machine actually worked that
  we \r\n"
- "could  improve on the Mark I. For example the Mark I had been \r\n"
- "influenced by the  pure mathematicians like Newman and Turing \r\n"
- "that we'd been talking to, so  we turned out special \r\n"
- "instructions to help them. It was clear by 1951  that pure \r\n"
- "maths would not be the prime use of the machine: scientific  \r\n"
- "computing would.\"That involved designing a floating point accelerator. Together
  \r\n"
- "with  other improvements suggested by the experience of Mark \r\n"
- "I, \"we embarked  on a machine called Meg. This became the \r\n"
- "Ferranti Mercury, and was about  30 times more powerful than \r\n"
- "the Mark I at about the same cost.\"Meg and MercuryKilburn was followed to the
  rostrum by Professor Dai Edwards, \r\n"
- "who gave  the audience many details of the technological \r\n"
- "advances introduced in  Meg and Mercury.Edwards started by describing the experiences
  of some of the \r\n"
- "early Mark  I users. One user, which was engaged in working \r\n"
- "out crystal structures,  found that out of the total machine \r\n"
- "time of 1750 hours, 250 were wasted  due to machine faults, \r\n"
- "about 14% of the time they took. Another 10% of  time was \r\n"
- "daily routine maintenance, so a fair stretch of machine time  \r\n"
- "went to waste. Improving reliability was therefore a priority.\"There were something
  like 4200 cathodes in the Mark I, but \r\n"
- "only 1800 in  the Mercury with 1600 crystal diodes. Even when \r\n"
- "you add the totals  together there were still fewer elements, \r\n"
- "a 19% reduction. That was a  move towards getting a bit of \r\n"
- "extra reliability.\"Memory sizes on the Mark I were 10K bits for the CRT main \r\n"
- "memory, and  650K bits for the drum. These were the same on \r\n"
- "the successor machines,  both Meg and Mercury. \"On Meg we used a CRT, on the Mercury
  made by Ferranti we went \r\n"
- "to core.  The drum wasn't that reliable, so on the Mercury it \r\n"
- "was smaller and more  of them could be connected. Thus if one \r\n"
- "drum went funny you didn't lose  everything. It was possible \r\n"
- "to attach eight drums, but typically four  were used. The IBM \r\n"
- "701, a contemporary of our prototype Megs of 1954,  had seven \r\n"
- "times the RAM, but their drums were about 10% smaller.\"We used 10-bit words because
  that was the natural element \r\n"
- "that came out  of the CRT. With a CRT you have to regenerate \r\n"
- "the information otherwise  it would decay away, so in the \r\n"
- "Manchester machines there were things  called `scan periods' \r\n"
- "when we regenerated information, and `action  periods' when we \r\n"
- "used the store to get something out or put something  in.\"Instructions were 20
  bits, so we required two accesses for \r\n"
- "that, and if  we were using a 10-digit number you had a third \r\n"
- "action. So in three  double beats, 60 microseconds, you could \r\n"
- "do arithmetic on 10 bits, which  was done in the B-registers.\"In the Meg we just
  had five bits to define the instruction, \r\n"
- "so in  modern terminology it was really a risc machine. When \r\n"
- "we went to the  Mercury we used seven bits to provide extra \r\n"
- "instructions. Short  operations were 60 microseconds. A \r\n"
- "floating point operation with a 40- bit number (a 30-bit \r\n"
- "fraction and a 10-bit exponent) took 180  microseconds, \r\n"
- "multiplication 300 microseconds. In the 701 a fixed point  addition or subtraction
  over 36 bits was 60 microseconds, but  \r\n"
- "multiplication was 500 microseconds.\"Transistor computerProfessor Dick Grimsdale
  followed Professor Edwards with a \r\n"
- "discussion of  his work on the Manchester prototype transistor \r\n"
- "computer -- work which  overlapped with the development of \r\n"
- "Meg/Mercury. This had also emerged  out of a concern for \r\n"
- "reliability, as transistors, though at the time  much more \r\n"
- "unreliable than valves, offered a potential future  \r\n"
- "improvement, and also consumed far less power.Together with a colleague, Doug Webb,
  \"we were doing some \r\n"
- "experiments  with STC crystal triodes. We got some of the \r\n"
- "basic circuits, and were  able to use them to make a prototype \r\n"
- "computer. We used a drum because it  was the only storage \r\n"
- "device available. The drum was a delay-type store,  with the \r\n"
- "delay caused by the drum rotation\".The prototype was a 48-bit word machine, with
  four spare bits \r\n"
- "for timing  leaving 44 usable bits. The clock rate was 125 \r\n"
- "KHz. There were 92 point  contact transistors in it, with six \r\n"
- "point-contact diodes on average for  each transistor. This \r\n"
- "machine was first run on 16 November 1953, \"the  first \r\n"
- "transistor computer in the world\".Having proved the feasibility of a transistor
  computer, \"we \r\n"
- "decided to  take it to pieces and rebuild it.\"The full-scale computer had a B-register
  and an eight word \r\n"
- "serial  register. It also had a multiplier. That machine was \r\n"
- "operational in  1955. It had 150 watt power consumption and \r\n"
- "250 transistors. It would  add two 44-bit numbers in 1.5 drum \r\n"
- "revolutions. The drum operated at  3000 rpm. A division sub-\r\n"
- "routine took one second, square roots 1.3  seconds.\"History then repeated itself,
  though: \"There was a problem \r\n"
- "with the  unreliability of the transistors\". This was solved \r\n"
- "by the development of  a different type of component, the \r\n"
- "junction transistor, initially used  by Grimsdale in an \r\n"
- "experimental small core store.The transistor computer even in its original form
  had enough \r\n"
- "potential  to interest Metropolitan Vickers. \"The outcome was \r\n"
- "the commercialisation  of the machine as the Metrovick 950, of \r\n"
- "which seven were built. It used  junction transistors because \r\n"
- "they were more reliable.\"AtlasThe session between lunch and tea was devoted entirely
  to the \r\n"
- "advances  embodied in the next Manchester computer, Atlas, \r\n"
- "with further  presentations from Messrs Kilburn and Edwards.Atlas, as Kilburn told
  the delegates, was a major project for \r\n"
- "a  university to undertake. Value of the first version at \r\n"
- "delivery was  £1.5m, which today is equivalent to £15 million. \r\n"
- "The later machine cost  installed at Chiltern would have cost \r\n"
- "£25m today. Atlas was competitive with  IBM Stretch for the \r\n"
- "title of most powerful computer in the world in its  time, and \r\n"
- "was 80 times as powerful as Mercury.\"Atlas introduced many new ideas, such as
  multiprogramming, \r\n"
- "job  scheduling, interrupts, virtual storage, paging and \r\n"
- "operating systems.  The idea was that a job could be input on \r\n"
- "any teleprinter and output,  instead of using dedicated \r\n"
- "peripherals. The task of sorting it out was  given to the \r\n"
- "supervisor, as no human knew what was going on.\"Its development ensured that in
  the Flowers report Manchester \r\n"
- "was  designated as one of the three regional university \r\n"
- "computer centres in  the country. Inaugurated on 7 December \r\n"
- "1962, Atlas provided a 24 hour  service to other universities, \r\n"
- "including Nottingham, Edinburgh and  London, and was \r\n"
- "operational till 1972, when it was replaced by MU5.Atlas was produced in a collaborative
  effort with the \r\n"
- "university's long  established industrial partner, Ferranti. \r\n"
- "\"We charged 7.5% of the  capital value of machine for \r\n"
- "maintenance\", said Kilburn. \"This was  £100,000 a year, or £1 \r\n"
- "million today. We sorted out that the university  would have \r\n"
- "half the machine time, while Ferranti would sell the other  \r\n"
- "half.\"Taking over the rostrum to describe the technical \r\n"
- "specification of  Atlas, Dai Edwards told the audience that \r\n"
- "Atlas was built from 10  shelves, each with 50 printed circuit \r\n"
- "boards. In all it contained 60,000  transistors and 300,000 \r\n"
- "diodes.Storage used components that were state-of-the-art at the \r\n"
- "time. There  was a fixed store (in today's terminology, a ROM) \r\n"
- "of twice 4096 words  with 0.3 microsecond access; a core \r\n"
- "store, with four units of 4096 words  and 0.5 microsecond \r\n"
- "access; and a drum of 100K words.\"In the fixed store were engineering test programs,
  peripheral  \r\n"
- "start/stop routines, scheduling routines, and 250 additional \r\n"
- "orders. The  fixed store was novel, cheap and fast.\"In 1965 a Dataproducts disc
  added, 31\" in diameter, with 16 or \r\n"
- "32  platters on a shaft. The larger size had a capacity of 16m \r\n"
- "words, or  100Mb. It consumed 7.5 Kw and weighed 3500 lbs.The processor had a 48-bit
  floating-point unit, which could be  \r\n"
- "overlapped with a 24-bit fixed point unit. In the multiplier, \r\n"
- "bits were  grouped in threes rather than in twos as on \r\n"
- "Mercury. Multiply time was  4.7 microseconds.For I/O Atlas used paper tape equipment,
  data links over \r\n"
- "private lines  at 60-100 kcps, and also card equipment.MU5Finally, Professor Derrick
  Morris told the audience about the \r\n"
- "last of  the pioneering Manchester machines. which in the more \r\n"
- "prosaic computing  times of the late sixties was known simply \r\n"
- "as MU5.This successor to Atlas was first conceived in 1966. The \r\n"
- "University won  support from both the SRC and ICL in 1967, and \r\n"
- "had built up a joint  design team of 20 by the following year, \r\n"
- "with 11 from the University,  five from ICL and four from the \r\n"
- "SRC.The objective of the new machine was to achieve 20 times the  \r\n"
- "throughput of Atlas, of which seven times was to come from \r\n"
- "improving the  technology, two times from the high level \r\n"
- "language architecture, and two  times from the overall system \r\n"
- "architecture.Unlike the other Manchester machines, MU5 was conceived as a \r\n"
- "range of  three machines. The first was to be a small machine \r\n"
- "of around the cost  of a DEC PDP-11. The second was to be a \r\n"
- "high-end scientific machine. The  third was to be a \r\n"
- "multiprocessor. Of these, only the second was actually  built.\"The most interesting
  technical aspect of MU5 was the \r\n"
- "associative store.  This was as a result of an analysis of the \r\n"
- "Atlas software, especially  the instruction code. We learnt \r\n"
- "something about the frequency of use of  operands and control \r\n"
- "structures. The order code accommodated string  functions and \r\n"
- "vector functions.\"The basic instruction was 16 bits, though there were some 32-\r\n"
- "bit  variants also. There were no conventional registers (such \r\n"
- "as the block  of 128 B-registers on Atlas).MU5 was heavily pipelined -- about five
  stages at 50ns per \r\n"
- "stage. The  secondary pipeline had 10 instructions. The local \r\n"
- "store was 250ns, so  there was a wide access path to keep \r\n"
- "system going, with eight  instructions in it.Membership of the Society has risen
  above the 300 mark.Our new chairman, Graham Morris, is the third former BCS president
  \r\n"
- "to join the committee. The others are our immediate past chairman, \r\n"
- "Ewart Willey, and Professor Sandy Douglas. The number will rise to \r\n"
- "four in October when Roger Johnson takes office as the 1992-93 President.Doron
  Swade is planning to resuscitate the Totalisator Working Party \r\n"
- "now that his heavy workload commemorating the bicentenary of the birth \r\n"
- "of Charles Babbage is finished.We regret to record the news that one of computing's
  best-known pioneers, \r\n"
- "Grace Hopper, died on New Year's Day at the age of 85. \r\n"
- "Rear-Admiral Hopper had many innovative software developments to her name, \r\n"
- "though perhaps she is best known for introducing the word \"bug\" into computer
  \r\n"
- "terminology, when she discovered that a failure of the Harvard Mark I computer
  \r\n"
- "was caused by a moth.Computing anniversaries in 1992 include:375th: Napier's invention
  of the primitive calculating device known as \r\n"
- "Napier's Bones in 1617100th: Herman Hollerith's entry into business as the Hollerith
  Electric \r\n"
- "Tabulating System in 1892, following the success of his automation of the \r\n"
- "processing of the 1890 US census30th: launch of the Ferranti Orion in 196225th:
  IBM's introduction of the binary synchronous communications protocol in 196725th:
  installation of the first cash dispenser in the UK, also in 196710th: the issuing
  of a licence to Mercury Communications in 19825th: launch of the IBM PS/2 in 1987.John
  Sinclair, ChairmanIn the last issue of Resurrection I reported that the \r\n"
- "processor was operational. Since then, we have made steady \r\n"
- "progress towards our goal of restoring it to \"as new\" \r\n"
- "condition, as a result of a lot of hard if unglamorous work. \r\n"
- "The working party members put in 32 sessions of restoration \r\n"
- "during 1991.The processor is now exceptionally reliable -- indeed, I \r\n"
- "cannot remember the last logic failure. We did have a store \r\n"
- "problem in the summer, when the room temperature was around 80 \r\n"
- "degrees (neither the room nor the processor has any air \r\n"
- "conditioning).All the peripherals are now operational, including the 35mm \r\n"
- "film handlers, and reliability is steadily improving. The film \r\n"
- "handlers were thick with grime when we got them, and to start \r\n"
- "with we were discovering new faults every time we switched \r\n"
- "them on, but we have now got past that point.The major advance since the last newsletter
  has been the \r\n"
- "acquisition of a new battery, generously donated by the RAF to \r\n"
- "the Science Museum after we tracked down the appropriate \r\n"
- "stores unit and paid them a visit. (The batteries are still \r\n"
- "being made for use in aircraft like the Nimrod.)This was the first time that any
  member of the working party \r\n"
- "had seen a brand new battery: the normal procedure with \r\n"
- "defective batteries when the Elliotts were in use was to \r\n"
- "replace the faulty cell or cells. This was principally on \r\n"
- "grounds of cost -- the last time I looked each cell cost \r\n"
- "around £70.The new battery has helped a great deal. Previously, we had to \r\n"
- "put the old battery on a charge for an hour before we could \r\n"
- "switch the processor on, as it would not otherwise cope with \r\n"
- "the surge of power.Other acquisitions include a collection of Creed teleprinter
  \r\n"
- "parts, acquired by working party member George Bradley from an \r\n"
- "engineer who used to work with Creed, and had been storing \r\n"
- "them in his garage since the company discontinued production. \r\n"
- "These will be useful for the Pegasus as well, and we should \r\n"
- "now be able to keep the teleprinters running on both machines \r\n"
- "for a considerable time.At the Open Day, we were promised a complete additional
  803 -- \r\n"
- "a major surprise, as we thought that our machine plus the \r\n"
- "incomplete one in the Science Museum store were the only \r\n"
- "surviving examples.Adrian Johnstone, ChairmanThe Working Party, having restored
  the museum's original PDP-8 \r\n"
- "to its full glory, has been concentrating its efforts on a \r\n"
- "PDP-12. This machine is rather a surprise to anyone that \r\n"
- "associates DEC with small machines, firstly in that it is \r\n"
- "rather large, and secondly in that it is green. I cannot, off \r\n"
- "hand, think of any other green production computers (I \r\n"
- "discount the Elliot 401 languishing in the corner as it was \r\n"
- "never mass produced) and am sure that the particular \r\n"
- "combinations of day-glo and olive drab employed here will not \r\n"
- "be seen again in our lifetimes. The 12 is an odd machine in may other ways. It
  is something  /of \r\n"
- "a specialist device, being equipped as standard with a bay of \r\n"
- "Analogue to Digital Converters and a console VDU. Internally, \r\n"
- "it is a hybrid of a PDP-8 and a LINC (Laboratory Instrument \r\n"
- "Computer) which was originally demonstrated at MIT in 1961. \r\n"
- "The LINC was a great influence on the design of the DEC PDP-4 \r\n"
- "and PDP-5, and therefore of the 5's successor the PDP-8. The \r\n"
- "original LINC machines were constructed using DEC supplied \r\n"
- "logic modules, so it was natural for DEC to take over \r\n"
- "production from MIT. Subsequently a two processor machine, the \r\n"
- "LINC-8 was designed which could execute LINC and PDP-8 \r\n"
- "instructions in parallel, and then the PDP-12 which could \r\n"
- "execute either LINC or -8 instructions but not at the same \r\n"
- "time.About 1000 PDP-12's were made, and many were sold to hospitals \r\n"
- "and other medical institutions. Our machine was used for \r\n"
- "diagnosis and research into hearing and speech disorders. A \r\n"
- "speech synthesiser was used to play back syllables to the \r\n"
- "guinea pig in a controlled way. This system, complete with \r\n"
- "software is now restored, and can make various burbling and \r\n"
- "whistling noises. The machine was never used for full \r\n"
- "connected speech, so it cannot easily be persuaded to hold a \r\n"
- "conversation, but we plan to use some public domain text-to-\r\n"
- "phoneme ftware to build some sample sentences for play back. \r\n"
- "This is a major undertaking, and I would be pleased to hear \r\n"
- "from programmers with an interest in speech synthesis. I have \r\n"
- "built a small phoneme based speech synthesiser for use on my \r\n"
- "own machines on which the text-to-speech programs have been \r\n"
- "demonstrated, so most of the ingredients are already \r\n"
- "available.The Working party has also acquired some PDP-11 equipment \r\n"
- "which will shortly be transferred to the museum for \r\n"
- "restoration. The haul includes what is probably one of the \r\n"
- "first PDP-11's to be sold in this country. Unfortunately the \r\n"
- "machine is showing signs of {\\em rust} of all things, so \r\n"
- "considerable work may be required before it may be safely \r\n"
- "switched on.Tony Sale, ChairmanThe Working Party took the major decision last summer
  to focus \r\n"
- "its efforts more sharply by concentrating on the emulation of \r\n"
- "old computers, and particularly the computers in the Society's \r\n"
- "collection. Software in the round had proved to be too large a \r\n"
- "subject.As a result, we are now known as the Software and Emulators \r\n"
- "Working Party. At the same time, I succeeded Martin Campbell-\r\n"
- "Kelly as chairman.We have made considerable progress since then. We have spent
  \r\n"
- "some time studying the possibility of developing standard file \r\n"
- "formats for paper tape emulation on floppy discs -- for \r\n"
- "transferring data and programs from tape to disc for use in \r\n"
- "emulations and vice versa. We have  eveloped a firm proposal \r\n"
- "which we are now considering in more detail.We have also spent some enjoyable hours
  testing Chris Burton's \r\n"
- "\"flight simulator\" of Pegasus. Some explanation is needed \r\n"
- "here, as the flight simulator concept is an important one \r\n"
- "which will be of interest to everyone attempting conservation \r\n"
- "and restoration of historic computers.The \"flight simulator\" is a piece of software
  that not only \r\n"
- "emulates the instruction set of the target computer, but also \r\n"
- "emulates the person-machine interaction using graphics. You \r\n"
- "could say it conserves the persona of the machine in software.Thus Chris Burton's
  simulator shows a pictorial representation \r\n"
- "of the front face of a Pegasus with its CRTs, lights and \r\n"
- "switches working in real time when a program is run. (A hand \r\n"
- "emerges from behind the screen to change the switch settings \r\n"
- "when this is required!) It also shows the holes punched in the \r\n"
- "paper tape that is being used.Chris' simulator has now been extensively tested
  and debugged, \r\n"
- "and has been verified by Derek Milledge against our own \r\n"
- "Pegasus. Some of our older members are now using it to \r\n"
- "redevelop programs they wrote when Pegasus was a new machine.A second flight simulator
  is being written by Peter Onion for \r\n"
- "our Elliott 803, and this is now nearing completion. This, \r\n"
- "like the Pegasus program, will run on any PC that has VGA \r\n"
- "graphics.Writing simulators is as you can imagine very time-consuming. \r\n"
- "Another thing we have been looking at is the development of a \r\n"
- "toolset to enable these programs to be written more easily.John Cooper, ChairmanIn
  my last report I described how we had succeeded in getting \r\n"
- "Pegasus working again. Getting from that point to a condition \r\n"
- "where the system would be reliable enough for continuous daily \r\n"
- "use has involved at least as much work again.There has been a sustained effort
  over the past year to \r\n"
- "improve reliability, involving 34 sessions of work by Working \r\n"
- "Party members. The major achievement has been the complete \r\n"
- "refurbishment of the margin control panel.This is a panel inside the power supply
  unit that allows you \r\n"
- "to change the voltages within the machine gradually until a \r\n"
- "component within the computer fails, and then to identify and \r\n"
- "rectify the cause of failure. Getting it into full working \r\n"
- "order was a major job. The panel will help us greatly in our \r\n"
- "goal of restoring Pegasus to routine operational condition, \r\n"
- "and we are now embarking on a programme of work designed to \r\n"
- "achieve this.We are keen that this work should have an educational as well \r\n"
- "as a functional value, and are actively encouraging younger \r\n"
- "members of the Society to join us so they can familiarise \r\n"
- "themselves with the logic and operation of Pegasus. Anyone \r\n"
- "interested should contact myself or Tony Sale and we'll \r\n"
- "arrange a meeting. No previous experience of Pegasus or any \r\n"
- "similar computer is required.We also had a problem with the drum, which we identified
  using \r\n"
- "the margin control system though it proved not to be related \r\n"
- "to voltage changes. It took us a long time to track down the \r\n"
- "fault, which turned out to be a bad joint inside the drum \r\n"
- "case.We have completely refurbished the package tester, which also \r\n"
- "had a major fault. This is an aid to repairing broken packages \r\n"
- "- circuit boards - and was supplied with the system.Away from the machine, we have
  made further progress in \r\n"
- "cataloguing our collection of spares. We are also in the \r\n"
- "process of cataloguing the software, and copying it so that we \r\n"
- "have duplicate tapes of everything.Chris Burton has produced a Pegasus emulator
  which runs on an \r\n"
- "IBM style computer with VGA graphics. It emulates both the \r\n"
- "functions and operation of the machine, and presents a most \r\n"
- "realistic view of the console in colour, with a full set of \r\n"
- "working handswitches that can be manipulated via the IBM \r\n"
- "keyboard. This is a very fine piece of work.We also now have available a paper
  tape editing set for use on \r\n"
- "an IBM PC. This allows the user to create programs and text \r\n"
- "using a standard editor or word processor, with conversions to \r\n"
- "and from five hole Pegasus tape being performed automatically.Robin Shirley, ChairmanInterest
  in the activities of the S-100 group has steadily \r\n"
- "been increasing. A lot of people have been contacting us after \r\n"
- "a news item about our activities appeared in Computer Shopper \r\n"
- "magazine. We also had a much more productive Open Day than in \r\n"
- "1990, which apart from providing us with some interesting \r\n"
- "contacts also produced some bits and pieces of useful \r\n"
- "equipment. Membership of the Working party is now between 10 \r\n"
- "and 20. We have acquired a Dynabyte machine, complete with \r\n"
- "documentation, which was on view at the Open day. Our display \r\n"
- "then was similar to the 1990 show. I am currently exploring \r\n"
- "the possibility of acquiring at least one Altair, which is of \r\n"
- "particular interest to us as it was the original S-100 bus \r\n"
- "machine.Many of the people who have contacted us have specific \r\n"
- "interests. For example, one man based in Carlisle has a \r\n"
- "collection of Triumph-Adler machines -- he ran the Triumph-\r\n"
- "Adler user group for a while. Another has a good collection of \r\n"
- "Hewlett-Packard desktops. A third used to run the Lynx User \r\n"
- "Group.This leads to the thought that we should perhaps create a \r\n"
- "number of sub-working parties to cater for each of these \r\n"
- "interests, all linked to the parent group in a tree-like \r\n"
- "structure. Our working party does not have the same obvious \r\n"
- "focal point of interest as the Pegasus and Elliot groups. I am \r\n"
- "contemplating writing a news sheet to keep all our members \r\n"
- "informed of the many different interests within the Working \r\n"
- "Party, if this is felt to be worthwhile.5 October 1992  In steam dayOctober 1992
  \ Evening meeting2 November 1992  In steam day19 November 1992  Society Open Day26
  November 1992  Evening meeting7 December 1992  In steam dayIn Steam Days start at
  10 am and finish at 5 p.m. Members are \r\n"
- "requested to let the secretary know before coming, \r\n"
- "particularly if bringing visitors. Contact him on 071-938 \r\n"
- "8196.Members will be notified about the contents of the evening \r\n"
- "meetings once the Committee has finalised the 1992-93 \r\n"
- "programme. All the evening meetings take place in the Science \r\n"
- "Museum Lecture Theatre and start at 5.30pm.[The printed version carries contact
  details of committee members]Chairman    Graham Morris FBCS Secretary   Tony Sale
  FBCS Treasurer   Dan Hayton Science Museum representative   Doron SwadeChairman,
  Pegasus Working Party   John Cooper MBCSChairman, Elliott 803 Working Party   John
  SinclairChairman, DEC Working Party   Dr Adrian JohnstoneChairman, S100 bus Working
  Party   Robin ShirleyEditor, Resurrection   Nicholas Enticknap Archivist   Harold
  Gearing Committee membersDr Martin Campbell-KellyGeorge DavisProfessor Sandy Douglas
  CBE FBCSChristopher HipwellDr Roger Johnson FBCSEwart Willey FBCSPat WoodroffeThe
  Computer Conservation Society (CCS) is a co-operative \r\n"
- "venture between the British Computer Society and the Science \r\n"
- "Museum of London.The CCS was constituted in September 1989 as a Specialist \r\n"
- "Group of the British Computer Society (BCS). It thus is \r\n"
- "covered by the Royal Charter  and charitable status of the \r\n"
- "BCS.The aims of the CCS are toMembership is open to anyone interested in computer
  \r\n"
- "conservation and the history of computing.The CCS is funded and supported by, a
  grant from the BCS, fees \r\n"
- "from corporate membership, donations, and by the free use of \r\n"
- "Science Museum facilities. Membership is free but some charges \r\n"
- "may be made for publications and attendance at seminars and \r\n"
- "conferences.There are a number of active Working Parties on specific \r\n"
- "computer restorations and early computer technologies and \r\n"
- "software. Younger people are especially encouraged to take \r\n"
- part in order to achieve skills transfer.
index:
  resurrection: !ruby/object:Word
    word: resurrection
    stem: resurrect
    docFrequency: 8.0
    docPositions:
    - 4
    - 11
    - 1215
    - 1479
    - 1515
    - 2356
    - 2530
  home: !ruby/object:Word
    word: home
    stem: home
    docFrequency: 10.0
    docPositions:
    - 4
    - 31
    - 120
    - 804
    - 863
    - 1527
    - 1594
    - 2093
    - 2140
  previous: !ruby/object:Word
    word: previous
    stem: previou
    docFrequency: 12.0
    docPositions:
    - 5
    - 60
    - 110
    - 159
    - 406
    - 537
    - 869
    - 1173
    - 1211
    - 1398
    - 2482
  issue: !ruby/object:Word
    word: issue
    stem: issu
    docFrequency: 9.0
    docPositions:
    - 5
    - 6
    - 22
    - 53
    - 1215
    - 1520
    - 1543
    - 2356
  next: !ruby/object:Word
    word: next
    stem: next
    docFrequency: 21.0
    docPositions:
    - 6
    - 20
    - 60
    - 110
    - 159
    - 236
    - 332
    - 406
    - 537
    - 869
    - 951
    - 1071
    - 1173
    - 1211
    - 1463
    - 1477
    - 1667
    - 1735
    - 2203
    - 2279
  view: !ruby/object:Word
    word: view
    stem: view
    docFrequency: 6.0
    docPositions:
    - 7
    - 1419
    - 1441
    - 2495
    - 2508
  original: !ruby/object:Word
    word: original
    stem: origin
    docFrequency: 20.0
    docPositions:
    - 7
    - 90
    - 93
    - 282
    - 543
    - 843
    - 1062
    - 1268
    - 1286
    - 1444
    - 1572
    - 1575
    - 1701
    - 1875
    - 2124
    - 2274
    - 2390
    - 2406
    - 2511
  cover: !ruby/object:Word
    word: cover
    stem: cover
    docFrequency: 3.0
    docPositions:
    - 8
    - 1519
  writelink: !ruby/object:Word
    word: writelink
    stem: writelink
    docFrequency: 2.0
    docPositions:
    - 9
  pdf: !ruby/object:Word
    word: pdf
    stem: pdf
    docFrequency: 2.0
    docPositions:
    - 9
  computer: !ruby/object:Word
    word: computer
    stem: comput
    docFrequency: 110.0
    docPositions:
    - 10
    - 12
    - 62
    - 97
    - 482
    - 509
    - 542
    - 547
    - 564
    - 590
    - 603
    - 604
    - 632
    - 633
    - 648
    - 679
    - 681
    - 697
    - 721
    - 735
    - 761
    - 762
    - 766
    - 848
    - 853
    - 874
    - 885
    - 913
    - 920
    - 951
    - 1022
    - 1026
    - 1035
    - 1044
    - 1046
    - 1049
    - 1062
    - 1071
    - 1079
    - 1091
    - 1188
    - 1189
    - 1283
    - 1346
    - 1386
    - 1399
    - 1417
    - 1433
    - 1486
    - 1487
    - 1491
    - 1502
    - 1512
    - 1515
    - 1520
    - 1548
    - 1579
    - 1833
    - 1852
    - 1874
    - 1879
    - 1895
    - 1917
    - 1928
    - 1929
    - 1953
    - 1954
    - 1967
    - 1994
    - 1996
    - 2007
    - 2028
    - 2036
    - 2058
    - 2059
    - 2063
    - 2127
    - 2132
    - 2147
    - 2156
    - 2177
    - 2182
    - 2203
    - 2250
    - 2257
    - 2264
    - 2265
    - 2274
    - 2279
    - 2285
    - 2293
    - 2351
    - 2352
    - 2403
    - 2449
    - 2472
    - 2483
    - 2493
    - 2502
    - 2530
    - 2531
    - 2533
    - 2535
    - 2541
  bulletin: !ruby/object:Word
    word: bulletin
    stem: bulletin
    docFrequency: 4.0
    docPositions:
    - 12
    - 1515
    - 1520
  conservation: !ruby/object:Word
    word: conservation
    stem: conserv
    docFrequency: 16.0
    docPositions:
    - 12
    - 62
    - 102
    - 1342
    - 1486
    - 1496
    - 1503
    - 1516
    - 1520
    - 1548
    - 1582
    - 2447
    - 2530
    - 2536
  society: !ruby/object:Word
    word: society
    stem: societi
    docFrequency: 58.0
    docPositions:
    - 12
    - 18
    - 28
    - 31
    - 38
    - 62
    - 67
    - 78
    - 89
    - 101
    - 110
    - 113
    - 120
    - 132
    - 133
    - 157
    - 164
    - 235
    - 534
    - 583
    - 874
    - 1174
    - 1324
    - 1395
    - 1464
    - 1477
    - 1486
    - 1487
    - 1491
    - 1516
    - 1520
    - 1526
    - 1527
    - 1532
    - 1548
    - 1553
    - 1562
    - 1571
    - 1581
    - 1589
    - 1594
    - 1602
    - 1603
    - 1621
    - 1624
    - 1666
    - 1871
    - 1912
    - 2147
    - 2343
    - 2435
    - 2479
    - 2524
    - 2530
    - 2531
    - 2533
  issn: !ruby/object:Word
    word: issn
    stem: issn
    docFrequency: 2.0
    docPositions:
    - 13
  volume: !ruby/object:Word
    word: volume
    stem: volum
    docFrequency: 3.0
    docPositions:
    - 14
    - 1520
  number: !ruby/object:Word
    word: number
    stem: number
    docFrequency: 45.0
    docPositions:
    - 14
    - 129
    - 217
    - 223
    - 226
    - 301
    - 484
    - 567
    - 568
    - 569
    - 571
    - 616
    - 651
    - 659
    - 786
    - 861
    - 936
    - 1007
    - 1015
    - 1178
    - 1455
    - 1511
    - 1520
    - 1601
    - 1654
    - 1660
    - 1661
    - 1714
    - 1835
    - 1898
    - 1899
    - 1900
    - 1902
    - 1937
    - 1967
    - 1975
    - 2079
    - 2138
    - 2192
    - 2239
    - 2245
    - 2345
    - 2518
    - 2540
  summer: !ruby/object:Word
    word: summer
    stem: summer
    docFrequency: 8.0
    docPositions:
    - 16
    - 119
    - 1224
    - 1322
    - 1593
    - 2363
    - 2433
  editorial: !ruby/object:Word
    word: editorial
    stem: editori
    docFrequency: 3.0
    docPositions:
    - 18
    - 20
  nicholas: !ruby/object:Word
    word: nicholas
    stem: nichola
    docFrequency: 9.0
    docPositions:
    - 18
    - 21
    - 160
    - 1479
    - 1518
    - 1621
    - 2530
  enticknap: !ruby/object:Word
    word: enticknap
    stem: enticknap
    docFrequency: 10.0
    docPositions:
    - 18
    - 21
    - 160
    - 1479
    - 1518
    - 1520
    - 1621
    - 2530
  editor: !ruby/object:Word
    word: editor
    stem: editor
    docFrequency: 6.0
    docPositions:
    - 18
    - 21
    - 1425
    - 1518
    - 2499
  guest: !ruby/object:Word
    word: guest
    stem: guest
    docFrequency: 3.0
    docPositions:
    - 18
    - 60
  opinion: !ruby/object:Word
    word: opinion
    stem: opinion
    docFrequency: 3.0
    docPositions:
    - 18
    - 60
  director: !ruby/object:Word
    word: director
    stem: director
    docFrequency: 4.0
    docPositions:
    - 18
    - 61
    - 1548
  national: !ruby/object:Word
    word: national
    stem: nation
    docFrequency: 6.0
    docPositions:
    - 18
    - 61
    - 872
    - 1548
    - 2145
  museumof: !ruby/object:Word
    word: museumof
    stem: museumof
    docFrequency: 2.0
    docPositions:
    - 18
  science: !ruby/object:Word
    word: science
    stem: scienc
    docFrequency: 26.0
    docPositions:
    - 18
    - 61
    - 104
    - 114
    - 164
    - 534
    - 877
    - 1236
    - 1262
    - 1473
    - 1479
    - 1487
    - 1507
    - 1548
    - 1584
    - 1590
    - 1624
    - 1871
    - 2150
    - 2371
    - 2389
    - 2529
    - 2530
    - 2531
    - 2538
  and: !ruby/object:Word
    word: and
    stem: and
    docFrequency: 600.0
    docPositions:
    - 18
    - 22
    - 25
    - 31
    - 35
    - 40
    - 41
    - 61
    - 63
    - 68
    - 71
    - 72
    - 82
    - 83
    - 84
    - 88
    - 91
    - 102
    - 103
    - 104
    - 105
    - 106
    - 107
    - 116
    - 122
    - 128
    - 129
    - 137
    - 138
    - 139
    - 148
    - 156
    - 160
    - 167
    - 174
    - 180
    - 181
    - 188
    - 190
    - 196
    - 207
    - 210
    - 213
    - 221
    - 223
    - 232
    - 239
    - 241
    - 245
    - 255
    - 257
    - 261
    - 267
    - 268
    - 269
    - 271
    - 274
    - 289
    - 293
    - 299
    - 300
    - 302
    - 306
    - 308
    - 314
    - 322
    - 323
    - 329
    - 332
    - 340
    - 354
    - 357
    - 360
    - 363
    - 370
    - 390
    - 403
    - 412
    - 413
    - 420
    - 428
    - 434
    - 436
    - 437
    - 443
    - 444
    - 449
    - 451
    - 454
    - 472
    - 476
    - 478
    - 482
    - 485
    - 492
    - 496
    - 497
    - 500
    - 505
    - 507
    - 510
    - 514
    - 519
    - 523
    - 527
    - 528
    - 529
    - 541
    - 553
    - 554
    - 559
    - 564
    - 567
    - 569
    - 571
    - 578
    - 582
    - 583
    - 592
    - 594
    - 600
    - 605
    - 610
    - 621
    - 627
    - 655
    - 656
    - 658
    - 671
    - 672
    - 673
    - 674
    - 675
    - 678
    - 691
    - 699
    - 702
    - 710
    - 711
    - 714
    - 719
    - 720
    - 734
    - 737
    - 746
    - 749
    - 753
    - 760
    - 767
    - 776
    - 777
    - 783
    - 784
    - 787
    - 788
    - 789
    - 790
    - 793
    - 794
    - 801
    - 804
    - 808
    - 816
    - 820
    - 832
    - 833
    - 841
    - 842
    - 843
    - 844
    - 850
    - 853
    - 861
    - 864
    - 865
    - 872
    - 875
    - 884
    - 885
    - 891
    - 893
    - 898
    - 903
    - 906
    - 909
    - 911
    - 914
    - 925
    - 926
    - 928
    - 929
    - 930
    - 933
    - 939
    - 940
    - 950
    - 955
    - 964
    - 967
    - 971
    - 988
    - 989
    - 993
    - 1003
    - 1007
    - 1016
    - 1030
    - 1034
    - 1047
    - 1049
    - 1051
    - 1070
    - 1072
    - 1079
    - 1083
    - 1085
    - 1093
    - 1107
    - 1113
    - 1114
    - 1117
    - 1118
    - 1122
    - 1130
    - 1140
    - 1142
    - 1148
    - 1160
    - 1161
    - 1178
    - 1229
    - 1230
    - 1237
    - 1254
    - 1256
    - 1272
    - 1275
    - 1276
    - 1281
    - 1282
    - 1285
    - 1289
    - 1290
    - 1294
    - 1295
    - 1296
    - 1299
    - 1304
    - 1319
    - 1324
    - 1328
    - 1335
    - 1336
    - 1343
    - 1351
    - 1357
    - 1358
    - 1363
    - 1386
    - 1390
    - 1394
    - 1396
    - 1397
    - 1409
    - 1413
    - 1418
    - 1424
    - 1426
    - 1436
    - 1438
    - 1458
    - 1466
    - 1474
    - 1485
    - 1487
    - 1492
    - 1503
    - 1505
    - 1506
    - 1508
    - 1512
    - 1516
    - 1520
    - 1523
    - 1527
    - 1531
    - 1534
    - 1535
    - 1548
    - 1549
    - 1554
    - 1557
    - 1558
    - 1566
    - 1567
    - 1568
    - 1570
    - 1573
    - 1582
    - 1583
    - 1584
    - 1585
    - 1586
    - 1587
    - 1592
    - 1596
    - 1600
    - 1601
    - 1607
    - 1608
    - 1609
    - 1614
    - 1620
    - 1621
    - 1625
    - 1630
    - 1632
    - 1637
    - 1641
    - 1648
    - 1649
    - 1652
    - 1658
    - 1660
    - 1665
    - 1670
    - 1674
    - 1680
    - 1682
    - 1686
    - 1690
    - 1691
    - 1692
    - 1694
    - 1695
    - 1706
    - 1708
    - 1712
    - 1713
    - 1715
    - 1717
    - 1719
    - 1723
    - 1729
    - 1730
    - 1734
    - 1735
    - 1741
    - 1751
    - 1752
    - 1753
    - 1756
    - 1761
    - 1773
    - 1782
    - 1785
    - 1786
    - 1791
    - 1797
    - 1801
    - 1803
    - 1804
    - 1808
    - 1809
    - 1812
    - 1814
    - 1815
    - 1827
    - 1829
    - 1831
    - 1833
    - 1836
    - 1841
    - 1843
    - 1844
    - 1845
    - 1848
    - 1850
    - 1853
    - 1855
    - 1860
    - 1862
    - 1866
    - 1867
    - 1868
    - 1873
    - 1885
    - 1886
    - 1890
    - 1895
    - 1898
    - 1900
    - 1902
    - 1907
    - 1911
    - 1912
    - 1919
    - 1921
    - 1925
    - 1930
    - 1932
    - 1942
    - 1948
    - 1971
    - 1972
    - 1974
    - 1986
    - 1987
    - 1988
    - 1989
    - 1990
    - 1993
    - 2004
    - 2009
    - 2011
    - 2017
    - 2018
    - 2021
    - 2026
    - 2027
    - 2035
    - 2038
    - 2044
    - 2047
    - 2050
    - 2057
    - 2064
    - 2071
    - 2072
    - 2076
    - 2077
    - 2080
    - 2081
    - 2082
    - 2083
    - 2084
    - 2085
    - 2090
    - 2093
    - 2097
    - 2103
    - 2107
    - 2117
    - 2118
    - 2122
    - 2123
    - 2124
    - 2125
    - 2129
    - 2132
    - 2138
    - 2141
    - 2142
    - 2145
    - 2148
    - 2155
    - 2156
    - 2159
    - 2161
    - 2164
    - 2169
    - 2170
    - 2173
    - 2175
    - 2178
    - 2185
    - 2186
    - 2188
    - 2189
    - 2190
    - 2191
    - 2195
    - 2196
    - 2202
    - 2205
    - 2212
    - 2213
    - 2215
    - 2226
    - 2227
    - 2229
    - 2237
    - 2239
    - 2246
    - 2254
    - 2256
    - 2265
    - 2267
    - 2278
    - 2280
    - 2285
    - 2287
    - 2289
    - 2295
    - 2305
    - 2309
    - 2310
    - 2311
    - 2312
    - 2314
    - 2318
    - 2322
    - 2324
    - 2328
    - 2336
    - 2337
    - 2345
    - 2366
    - 2367
    - 2372
    - 2383
    - 2385
    - 2394
    - 2397
    - 2398
    - 2401
    - 2402
    - 2405
    - 2409
    - 2410
    - 2412
    - 2413
    - 2414
    - 2417
    - 2422
    - 2435
    - 2437
    - 2442
    - 2443
    - 2448
    - 2452
    - 2456
    - 2457
    - 2460
    - 2472
    - 2476
    - 2478
    - 2480
    - 2481
    - 2489
    - 2491
    - 2494
    - 2498
    - 2500
    - 2505
    - 2507
    - 2521
    - 2524
    - 2530
    - 2531
    - 2534
    - 2536
    - 2537
    - 2539
    - 2541
  industry: !ruby/object:Word
    word: industry
    stem: industri
    docFrequency: 11.0
    docPositions:
    - 18
    - 61
    - 146
    - 523
    - 944
    - 945
    - 1614
    - 1862
    - 2198
    - 2199
  news: !ruby/object:Word
    word: news
    stem: new
    docFrequency: 11.0
    docPositions:
    - 18
    - 28
    - 110
    - 1185
    - 1433
    - 1459
    - 1526
    - 2348
    - 2502
    - 2522
  tony: !ruby/object:Word
    word: tony
    stem: toni
    docFrequency: 14.0
    docPositions:
    - 18
    - 23
    - 27
    - 111
    - 1320
    - 1397
    - 1479
    - 1519
    - 1521
    - 1525
    - 2433
    - 2481
    - 2530
  sale: !ruby/object:Word
    word: sale
    stem: sale
    docFrequency: 15.0
    docPositions:
    - 18
    - 24
    - 111
    - 923
    - 1320
    - 1397
    - 1479
    - 1519
    - 1522
    - 1588
    - 2185
    - 2433
    - 2481
    - 2530
  secretary: !ruby/object:Word
    word: secretary
    stem: secretari
    docFrequency: 7.0
    docPositions:
    - 18
    - 111
    - 1467
    - 1479
    - 2525
    - 2530
  early: !ruby/object:Word
    word: early
    stem: earli
    docFrequency: 31.0
    docPositions:
    - 18
    - 55
    - 159
    - 166
    - 167
    - 182
    - 255
    - 406
    - 548
    - 553
    - 613
    - 735
    - 869
    - 876
    - 974
    - 1512
    - 1545
    - 1624
    - 1625
    - 1633
    - 1680
    - 1880
    - 1885
    - 1934
    - 2036
    - 2149
    - 2216
    - 2541
  days: !ruby/object:Word
    word: days
    stem: dai
    docFrequency: 13.0
    docPositions:
    - 18
    - 159
    - 166
    - 581
    - 614
    - 936
    - 1466
    - 1624
    - 1910
    - 1935
    - 2192
    - 2524
  algol: !ruby/object:Word
    word: algol
    stem: algol
    docFrequency: 60.0
    docPositions:
    - 18
    - 54
    - 159
    - 161
    - 166
    - 173
    - 180
    - 183
    - 191
    - 193
    - 208
    - 215
    - 224
    - 245
    - 248
    - 249
    - 253
    - 284
    - 286
    - 288
    - 320
    - 328
    - 336
    - 340
    - 344
    - 347
    - 352
    - 368
    - 403
    - 1544
    - 1621
    - 1624
    - 1629
    - 1634
    - 1638
    - 1640
    - 1649
    - 1654
    - 1661
    - 1674
    - 1675
    - 1676
    - 1680
    - 1701
    - 1703
    - 1705
    - 1727
    - 1733
    - 1739
    - 1741
    - 1743
    - 1746
    - 1749
    - 1759
    - 1782
  pat: !ruby/object:Word
    word: pat
    stem: pat
    docFrequency: 4.0
    docPositions:
    - 18
    - 160
    - 1621
  woodroffe: !ruby/object:Word
    word: woodroffe
    stem: woodroff
    docFrequency: 4.0
    docPositions:
    - 18
    - 160
    - 1483
  influence: !ruby/object:Word
    word: influence
    stem: influenc
    docFrequency: 11.0
    docPositions:
    - 18
    - 55
    - 406
    - 502
    - 512
    - 1284
    - 1545
    - 1847
    - 1855
    - 2404
  alan: !ruby/object:Word
    word: alan
    stem: alan
    docFrequency: 7.0
    docPositions:
    - 18
    - 55
    - 406
    - 431
    - 1545
    - 1800
  blumlein: !ruby/object:Word
    word: blumlein
    stem: blumlein
    docFrequency: 41.0
    docPositions:
    - 18
    - 55
    - 406
    - 408
    - 414
    - 427
    - 429
    - 430
    - 444
    - 458
    - 469
    - 477
    - 492
    - 501
    - 502
    - 505
    - 507
    - 511
    - 512
    - 514
    - 529
    - 1545
    - 1783
    - 1787
    - 1796
    - 1798
    - 1799
    - 1809
    - 1817
    - 1824
    - 1830
    - 1841
    - 1846
    - 1847
    - 1848
    - 1850
    - 1854
    - 1855
    - 1868
  computers: !ruby/object:Word
    word: computers
    stem: comput
    docFrequency: 66.0
    docPositions:
    - 18
    - 26
    - 39
    - 45
    - 57
    - 116
    - 121
    - 238
    - 406
    - 492
    - 526
    - 528
    - 551
    - 576
    - 591
    - 637
    - 788
    - 805
    - 843
    - 851
    - 856
    - 861
    - 862
    - 869
    - 876
    - 890
    - 899
    - 944
    - 1273
    - 1324
    - 1343
    - 1496
    - 1499
    - 1501
    - 1524
    - 1533
    - 1537
    - 1547
    - 1592
    - 1595
    - 1669
    - 1841
    - 1865
    - 1867
    - 1883
    - 1905
    - 1918
    - 1956
    - 2081
    - 2094
    - 2124
    - 2130
    - 2135
    - 2138
    - 2139
    - 2149
    - 2158
    - 2165
    - 2198
    - 2395
    - 2435
    - 2448
  ted: !ruby/object:Word
    word: ted
    stem: ted
    docFrequency: 6.0
    docPositions:
    - 18
    - 407
    - 533
    - 1783
    - 1870
  newman: !ruby/object:Word
    word: newman
    stem: newman
    docFrequency: 9.0
    docPositions:
    - 18
    - 407
    - 534
    - 930
    - 955
    - 1871
    - 2190
    - 2205
  pre: !ruby/object:Word
    word: pre
    stem: pre
    docFrequency: 3.0
    docPositions:
    - 18
    - 537
  history: !ruby/object:Word
    word: history
    stem: histori
    docFrequency: 15.0
    docPositions:
    - 18
    - 441
    - 537
    - 544
    - 732
    - 873
    - 1056
    - 1503
    - 1806
    - 1876
    - 2035
    - 2146
    - 2270
    - 2536
  digital: !ruby/object:Word
    word: digital
    stem: digit
    docFrequency: 21.0
    docPositions:
    - 18
    - 537
    - 540
    - 603
    - 604
    - 609
    - 721
    - 841
    - 852
    - 899
    - 1281
    - 1872
    - 1928
    - 1929
    - 1931
    - 2028
    - 2122
    - 2131
    - 2165
    - 2401
  equipment: !ruby/object:Word
    word: equipment
    stem: equip
    docFrequency: 21.0
    docPositions:
    - 18
    - 46
    - 130
    - 537
    - 540
    - 671
    - 841
    - 1129
    - 1130
    - 1311
    - 1437
    - 1538
    - 1602
    - 1872
    - 1986
    - 2122
    - 2317
    - 2318
    - 2427
    - 2506
  corporation: !ruby/object:Word
    word: corporation
    stem: corpor
    docFrequency: 11.0
    docPositions:
    - 18
    - 134
    - 144
    - 537
    - 540
    - 841
    - 1604
    - 1612
    - 1872
    - 2122
  adrian: !ruby/object:Word
    word: adrian
    stem: adrian
    docFrequency: 9.0
    docPositions:
    - 18
    - 538
    - 1266
    - 1479
    - 1519
    - 1872
    - 2390
    - 2530
  johnstone: !ruby/object:Word
    word: johnstone
    stem: johnston
    docFrequency: 7.0
    docPositions:
    - 18
    - 538
    - 1266
    - 1519
    - 1872
    - 2390
  manchester: !ruby/object:Word
    word: manchester
    stem: manchest
    docFrequency: 29.0
    docPositions:
    - 18
    - 58
    - 509
    - 763
    - 869
    - 871
    - 876
    - 907
    - 918
    - 1002
    - 1025
    - 1071
    - 1089
    - 1135
    - 1151
    - 1548
    - 1852
    - 2060
    - 2144
    - 2149
    - 2171
    - 2180
    - 2236
    - 2249
    - 2279
    - 2291
    - 2319
    - 2329
  university: !ruby/object:Word
    word: university
    stem: univers
    docFrequency: 33.0
    docPositions:
    - 18
    - 58
    - 349
    - 357
    - 869
    - 871
    - 889
    - 929
    - 934
    - 941
    - 1075
    - 1090
    - 1097
    - 1100
    - 1140
    - 1142
    - 1548
    - 1748
    - 1752
    - 2144
    - 2157
    - 2189
    - 2192
    - 2197
    - 2281
    - 2292
    - 2297
    - 2300
    - 2322
    - 2324
  miscellany: !ruby/object:Word
    word: miscellany
    stem: miscellani
    docFrequency: 3.0
    docPositions:
    - 18
    - 1173
  working: !ruby/object:Word
    word: working
    stem: work
    docFrequency: 85.0
    docPositions:
    - 18
    - 41
    - 45
    - 49
    - 82
    - 88
    - 112
    - 180
    - 191
    - 193
    - 199
    - 232
    - 265
    - 356
    - 485
    - 702
    - 905
    - 928
    - 940
    - 974
    - 1181
    - 1211
    - 1212
    - 1219
    - 1240
    - 1253
    - 1268
    - 1311
    - 1322
    - 1329
    - 1352
    - 1375
    - 1380
    - 1387
    - 1420
    - 1437
    - 1455
    - 1457
    - 1460
    - 1479
    - 1511
    - 1535
    - 1537
    - 1541
    - 1566
    - 1570
    - 1588
    - 1638
    - 1640
    - 1642
    - 1665
    - 1688
    - 1751
    - 1836
    - 2011
    - 2169
    - 2188
    - 2196
    - 2216
    - 2346
    - 2360
    - 2373
    - 2382
    - 2390
    - 2427
    - 2433
    - 2438
    - 2453
    - 2465
    - 2468
    - 2473
    - 2496
    - 2506
    - 2518
    - 2520
    - 2523
    - 2530
    - 2540
  party: !ruby/object:Word
    word: party
    stem: parti
    docFrequency: 38.0
    docPositions:
    - 18
    - 49
    - 1181
    - 1211
    - 1212
    - 1219
    - 1240
    - 1253
    - 1268
    - 1311
    - 1322
    - 1329
    - 1381
    - 1437
    - 1457
    - 1461
    - 1479
    - 1541
    - 2346
    - 2360
    - 2373
    - 2382
    - 2390
    - 2427
    - 2433
    - 2438
    - 2469
    - 2506
    - 2520
    - 2524
    - 2530
  reports: !ruby/object:Word
    word: reports
    stem: report
    docFrequency: 7.0
    docPositions:
    - 18
    - 49
    - 53
    - 1211
    - 1541
    - 1543
  forthcoming: !ruby/object:Word
    word: forthcoming
    stem: forthcom
    docFrequency: 3.0
    docPositions:
    - 18
    - 1463
  events: !ruby/object:Word
    word: events
    stem: event
    docFrequency: 3.0
    docPositions:
    - 18
    - 1463
  committee: !ruby/object:Word
    word: committee
    stem: committe
    docFrequency: 30.0
    docPositions:
    - 18
    - 148
    - 179
    - 214
    - 217
    - 218
    - 222
    - 226
    - 228
    - 232
    - 346
    - 1177
    - 1472
    - 1477
    - 1478
    - 1481
    - 1614
    - 1653
    - 1654
    - 1655
    - 1659
    - 1661
    - 1663
    - 1665
    - 1745
    - 2344
    - 2528
    - 2530
  aims: !ruby/object:Word
    word: aims
    stem: aim
    docFrequency: 6.0
    docPositions:
    - 18
    - 944
    - 1495
    - 2198
    - 2535
  objectives: !ruby/object:Word
    word: objectives
    stem: object
    docFrequency: 3.0
    docPositions:
    - 18
    - 1485
  topprevious: !ruby/object:Word
    word: topprevious
    stem: topprevi
    docFrequency: 4.0
    docPositions:
    - 20
    - 1463
    - 1477
  has: !ruby/object:Word
    word: has
    stem: ha
    docFrequency: 71.0
    docPositions:
    - 22
    - 23
    - 34
    - 40
    - 47
    - 51
    - 91
    - 101
    - 144
    - 148
    - 556
    - 613
    - 639
    - 680
    - 807
    - 830
    - 1174
    - 1225
    - 1234
    - 1247
    - 1269
    - 1311
    - 1357
    - 1358
    - 1364
    - 1377
    - 1379
    - 1381
    - 1416
    - 1431
    - 1448
    - 1450
    - 1472
    - 1520
    - 1521
    - 1530
    - 1534
    - 1539
    - 1541
    - 1573
    - 1581
    - 1612
    - 1614
    - 1887
    - 1934
    - 1958
    - 1995
    - 2096
    - 2115
    - 2343
    - 2364
    - 2369
    - 2378
    - 2391
    - 2427
    - 2456
    - 2457
    - 2461
    - 2467
    - 2469
    - 2492
    - 2500
    - 2513
    - 2515
    - 2528
  been: !ruby/object:Word
    word: been
    stem: been
    docFrequency: 63.0
    docPositions:
    - 22
    - 23
    - 41
    - 46
    - 64
    - 113
    - 143
    - 211
    - 231
    - 347
    - 506
    - 556
    - 745
    - 751
    - 754
    - 807
    - 814
    - 899
    - 954
    - 956
    - 1234
    - 1254
    - 1269
    - 1307
    - 1357
    - 1358
    - 1368
    - 1379
    - 1381
    - 1432
    - 1520
    - 1521
    - 1535
    - 1538
    - 1550
    - 1589
    - 1611
    - 1650
    - 1664
    - 1746
    - 1849
    - 1887
    - 2043
    - 2048
    - 2051
    - 2096
    - 2101
    - 2165
    - 2204
    - 2206
    - 2369
    - 2383
    - 2391
    - 2425
    - 2456
    - 2457
    - 2463
    - 2467
    - 2469
    - 2501
  long: !ruby/object:Word
    word: long
    stem: long
    docFrequency: 23.0
    docPositions:
    - 22
    - 112
    - 154
    - 419
    - 498
    - 526
    - 547
    - 752
    - 953
    - 1097
    - 1403
    - 1520
    - 1588
    - 1618
    - 1790
    - 1845
    - 1865
    - 1879
    - 2049
    - 2203
    - 2297
    - 2485
  time: !ruby/object:Word
    word: time
    stem: time
    docFrequency: 117.0
    docPositions:
    - 22
    - 104
    - 112
    - 273
    - 295
    - 302
    - 382
    - 419
    - 427
    - 460
    - 469
    - 473
    - 481
    - 498
    - 544
    - 559
    - 561
    - 565
    - 571
    - 574
    - 581
    - 583
    - 586
    - 592
    - 600
    - 609
    - 637
    - 709
    - 711
    - 717
    - 732
    - 747
    - 748
    - 752
    - 803
    - 859
    - 900
    - 929
    - 976
    - 977
    - 978
    - 1028
    - 1079
    - 1101
    - 1111
    - 1127
    - 1231
    - 1240
    - 1244
    - 1258
    - 1292
    - 1329
    - 1333
    - 1352
    - 1367
    - 1403
    - 1520
    - 1584
    - 1588
    - 1694
    - 1710
    - 1715
    - 1769
    - 1790
    - 1796
    - 1819
    - 1824
    - 1828
    - 1832
    - 1845
    - 1876
    - 1890
    - 1892
    - 1896
    - 1902
    - 1903
    - 1910
    - 1912
    - 1913
    - 1919
    - 1925
    - 1931
    - 1956
    - 2016
    - 2018
    - 2024
    - 2035
    - 2045
    - 2046
    - 2049
    - 2092
    - 2136
    - 2166
    - 2189
    - 2218
    - 2219
    - 2220
    - 2252
    - 2285
    - 2301
    - 2307
    - 2317
    - 2368
    - 2373
    - 2377
    - 2387
    - 2412
    - 2438
    - 2440
    - 2453
    - 2462
    - 2485
  since: !ruby/object:Word
    word: since
    stem: sinc
    docFrequency: 17.0
    docPositions:
    - 22
    - 585
    - 643
    - 773
    - 1216
    - 1234
    - 1255
    - 1332
    - 1520
    - 1912
    - 1962
    - 2068
    - 2357
    - 2369
    - 2384
    - 2439
  last: !ruby/object:Word
    word: last
    stem: last
    docFrequency: 23.0
    docPositions:
    - 22
    - 112
    - 119
    - 576
    - 1135
    - 1215
    - 1223
    - 1234
    - 1244
    - 1322
    - 1374
    - 1520
    - 1588
    - 1593
    - 1905
    - 2319
    - 2356
    - 2362
    - 2369
    - 2377
    - 2433
    - 2464
  much: !ruby/object:Word
    word: much
    stem: much
    docFrequency: 35.0
    docPositions:
    - 22
    - 244
    - 276
    - 391
    - 429
    - 430
    - 483
    - 489
    - 642
    - 677
    - 772
    - 802
    - 812
    - 822
    - 1028
    - 1377
    - 1434
    - 1520
    - 1673
    - 1697
    - 1774
    - 1798
    - 1799
    - 1834
    - 1838
    - 1961
    - 1992
    - 2067
    - 2091
    - 2099
    - 2109
    - 2252
    - 2467
    - 2503
  happened: !ruby/object:Word
    word: happened
    stem: happen
    docFrequency: 7.0
    docPositions:
    - 23
    - 489
    - 508
    - 1521
    - 1838
    - 1851
  most: !ruby/object:Word
    word: most
    stem: most
    docFrequency: 27.0
    docPositions:
    - 23
    - 120
    - 621
    - 731
    - 746
    - 748
    - 749
    - 805
    - 807
    - 1079
    - 1157
    - 1308
    - 1418
    - 1521
    - 1594
    - 1942
    - 2034
    - 2044
    - 2046
    - 2047
    - 2094
    - 2096
    - 2285
    - 2333
    - 2426
    - 2494
  significant: !ruby/object:Word
    word: significant
    stem: signific
    docFrequency: 5.0
    docPositions:
    - 23
    - 739
    - 1521
    - 2040
  develop: !ruby/object:Word
    word: develop
    stem: develop
    docFrequency: 8.0
    docPositions:
    - 23
    - 753
    - 761
    - 1498
    - 1521
    - 2050
    - 2058
  ment: !ruby/object:Word
    word: ment
    stem: ment
    docFrequency: 3.0
    docPositions:
    - 23
    - 1521
  s: !ruby/object:Word
    word: s
    stem: s
    docFrequency: 91.0
    docPositions:
    - 24
    - 38
    - 67
    - 89
    - 157
    - 179
    - 232
    - 235
    - 311
    - 351
    - 362
    - 427
    - 459
    - 469
    - 497
    - 550
    - 638
    - 680
    - 689
    - 721
    - 727
    - 758
    - 807
    - 835
    - 854
    - 889
    - 907
    - 925
    - 1097
    - 1111
    - 1185
    - 1186
    - 1194
    - 1195
    - 1197
    - 1203
    - 1268
    - 1285
    - 1294
    - 1314
    - 1324
    - 1339
    - 1350
    - 1428
    - 1431
    - 1444
    - 1522
    - 1532
    - 1553
    - 1571
    - 1621
    - 1665
    - 1666
    - 1720
    - 1748
    - 1755
    - 1796
    - 1818
    - 1824
    - 1844
    - 1882
    - 1957
    - 1995
    - 2002
    - 2028
    - 2032
    - 2055
    - 2096
    - 2118
    - 2133
    - 2157
    - 2171
    - 2185
    - 2297
    - 2307
    - 2348
    - 2349
    - 2353
    - 2354
    - 2356
    - 2390
    - 2405
    - 2412
    - 2430
    - 2435
    - 2444
    - 2451
    - 2500
    - 2511
  initiative: !ruby/object:Word
    word: initiative
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 24
    - 135
    - 1522
    - 1605
  setting: !ruby/object:Word
    word: setting
    stem: set
    docFrequency: 5.0
    docPositions:
    - 24
    - 170
    - 1522
    - 1628
  motion: !ruby/object:Word
    word: motion
    stem: motion
    docFrequency: 5.0
    docPositions:
    - 24
    - 599
    - 1522
    - 1924
  plans: !ruby/object:Word
    word: plans
    stem: plan
    docFrequency: 3.0
    docPositions:
    - 24
    - 1522
  museum: !ruby/object:Word
    word: museum
    stem: museum
    docFrequency: 47.0
    docPositions:
    - 24
    - 61
    - 65
    - 92
    - 104
    - 114
    - 137
    - 138
    - 150
    - 152
    - 164
    - 534
    - 638
    - 797
    - 877
    - 1236
    - 1262
    - 1268
    - 1312
    - 1474
    - 1479
    - 1488
    - 1507
    - 1522
    - 1548
    - 1551
    - 1574
    - 1584
    - 1590
    - 1607
    - 1608
    - 1616
    - 1618
    - 1624
    - 1871
    - 1957
    - 2088
    - 2150
    - 2371
    - 2389
    - 2390
    - 2428
    - 2530
    - 2532
    - 2538
  cryptology: !ruby/object:Word
    word: cryptology
    stem: cryptolog
    docFrequency: 5.0
    docPositions:
    - 25
    - 137
    - 1523
    - 1607
  computing: !ruby/object:Word
    word: computing
    stem: comput
    docFrequency: 39.0
    docPositions:
    - 25
    - 73
    - 137
    - 544
    - 549
    - 556
    - 557
    - 558
    - 560
    - 574
    - 581
    - 583
    - 732
    - 907
    - 959
    - 1136
    - 1185
    - 1192
    - 1503
    - 1523
    - 1559
    - 1607
    - 1876
    - 1881
    - 1887
    - 1888
    - 1889
    - 1891
    - 1903
    - 1910
    - 1912
    - 2035
    - 2171
    - 2209
    - 2320
    - 2348
    - 2353
    - 2536
  bletchley: !ruby/object:Word
    word: bletchley
    stem: bletchlei
    docFrequency: 13.0
    docPositions:
    - 25
    - 121
    - 124
    - 132
    - 144
    - 150
    - 1523
    - 1595
    - 1596
    - 1602
    - 1612
    - 1616
  park: !ruby/object:Word
    word: park
    stem: park
    docFrequency: 21.0
    docPositions:
    - 25
    - 121
    - 124
    - 127
    - 136
    - 145
    - 150
    - 151
    - 155
    - 1523
    - 1595
    - 1596
    - 1599
    - 1606
    - 1613
    - 1616
    - 1617
    - 1619
  very: !ruby/object:Word
    word: very
    stem: veri
    docFrequency: 55.0
    docPositions:
    - 25
    - 155
    - 245
    - 267
    - 315
    - 394
    - 402
    - 413
    - 433
    - 435
    - 438
    - 473
    - 486
    - 502
    - 506
    - 512
    - 530
    - 547
    - 643
    - 668
    - 702
    - 754
    - 802
    - 822
    - 827
    - 1367
    - 1421
    - 1523
    - 1619
    - 1674
    - 1690
    - 1724
    - 1775
    - 1781
    - 1786
    - 1800
    - 1802
    - 1805
    - 1828
    - 1837
    - 1847
    - 1849
    - 1855
    - 1869
    - 1879
    - 1962
    - 1983
    - 2011
    - 2051
    - 2091
    - 2109
    - 2114
    - 2462
    - 2497
  site: !ruby/object:Word
    word: site
    stem: site
    docFrequency: 7.0
    docPositions:
    - 25
    - 120
    - 138
    - 1523
    - 1594
    - 1608
  colossus: !ruby/object:Word
    word: colossus
    stem: colossu
    docFrequency: 5.0
    docPositions:
    - 26
    - 121
    - 1524
    - 1595
  code: !ruby/object:Word
    word: code
    stem: code
    docFrequency: 25.0
    docPositions:
    - 26
    - 121
    - 128
    - 270
    - 314
    - 322
    - 334
    - 399
    - 517
    - 647
    - 1159
    - 1161
    - 1524
    - 1595
    - 1600
    - 1693
    - 1723
    - 1729
    - 1737
    - 1778
    - 1858
    - 1966
    - 2335
    - 2337
  breaking: !ruby/object:Word
    word: breaking
    stem: break
    docFrequency: 5.0
    docPositions:
    - 26
    - 121
    - 1524
    - 1595
  played: !ruby/object:Word
    word: played
    stem: plai
    docFrequency: 3.0
    docPositions:
    - 26
    - 1524
  such: !ruby/object:Word
    word: such
    stem: such
    docFrequency: 15.0
    docPositions:
    - 26
    - 530
    - 626
    - 636
    - 786
    - 1082
    - 1165
    - 1524
    - 1869
    - 1947
    - 1955
    - 2079
    - 2286
    - 2339
  vital: !ruby/object:Word
    word: vital
    stem: vital
    docFrequency: 3.0
    docPositions:
    - 26
    - 1524
  role: !ruby/object:Word
    word: role
    stem: role
    docFrequency: 7.0
    docPositions:
    - 27
    - 48
    - 725
    - 1525
    - 1540
    - 2030
  world: !ruby/object:Word
    word: world
    stem: world
    docFrequency: 17.0
    docPositions:
    - 27
    - 66
    - 122
    - 542
    - 583
    - 861
    - 1044
    - 1079
    - 1525
    - 1552
    - 1596
    - 1874
    - 1912
    - 2138
    - 2264
    - 2285
  war: !ruby/object:Word
    word: war
    stem: war
    docFrequency: 9.0
    docPositions:
    - 27
    - 122
    - 411
    - 711
    - 1525
    - 1596
    - 1784
    - 2018
  two: !ruby/object:Word
    word: two
    stem: two
    docFrequency: 51.0
    docPositions:
    - 27
    - 39
    - 45
    - 126
    - 173
    - 200
    - 244
    - 250
    - 255
    - 320
    - 339
    - 640
    - 641
    - 660
    - 768
    - 789
    - 841
    - 890
    - 930
    - 1006
    - 1052
    - 1147
    - 1148
    - 1288
    - 1525
    - 1533
    - 1537
    - 1598
    - 1629
    - 1643
    - 1673
    - 1677
    - 1680
    - 1727
    - 1740
    - 1959
    - 1960
    - 1976
    - 2065
    - 2082
    - 2122
    - 2158
    - 2190
    - 2238
    - 2268
    - 2327
    - 2328
    - 2408
  summarises: !ruby/object:Word
    word: summarises
    stem: summaris
    docFrequency: 3.0
    docPositions:
    - 27
    - 1525
  current: !ruby/object:Word
    word: current
    stem: current
    docFrequency: 3.0
    docPositions:
    - 27
    - 1525
  situation: !ruby/object:Word
    word: situation
    stem: situat
    docFrequency: 3.0
    docPositions:
    - 27
    - 1525
  his: !ruby/object:Word
    word: his
    stem: hi
    docFrequency: 29.0
    docPositions:
    - 28
    - 348
    - 448
    - 506
    - 515
    - 606
    - 666
    - 802
    - 919
    - 950
    - 1025
    - 1182
    - 1198
    - 1255
    - 1526
    - 1747
    - 1811
    - 1849
    - 1856
    - 1931
    - 1981
    - 2091
    - 2181
    - 2202
    - 2249
    - 2347
    - 2355
    - 2384
  piece: !ruby/object:Word
    word: piece
    stem: piec
    docFrequency: 7.0
    docPositions:
    - 28
    - 1345
    - 1421
    - 1526
    - 2448
    - 2497
  we: !ruby/object:Word
    word: we
    stem: we
    docFrequency: 224.0
    docPositions:
    - 30
    - 56
    - 73
    - 94
    - 103
    - 112
    - 113
    - 135
    - 252
    - 257
    - 258
    - 261
    - 266
    - 267
    - 268
    - 275
    - 276
    - 277
    - 278
    - 312
    - 314
    - 319
    - 321
    - 345
    - 360
    - 366
    - 367
    - 368
    - 369
    - 370
    - 379
    - 381
    - 382
    - 393
    - 394
    - 395
    - 400
    - 402
    - 423
    - 500
    - 654
    - 656
    - 657
    - 899
    - 913
    - 914
    - 938
    - 944
    - 953
    - 956
    - 963
    - 991
    - 999
    - 1003
    - 1006
    - 1007
    - 1011
    - 1013
    - 1032
    - 1033
    - 1035
    - 1046
    - 1098
    - 1100
    - 1159
    - 1185
    - 1216
    - 1223
    - 1230
    - 1231
    - 1232
    - 1236
    - 1247
    - 1248
    - 1256
    - 1260
    - 1261
    - 1302
    - 1328
    - 1332
    - 1336
    - 1337
    - 1339
    - 1368
    - 1374
    - 1390
    - 1393
    - 1397
    - 1401
    - 1407
    - 1411
    - 1412
    - 1413
    - 1423
    - 1434
    - 1440
    - 1454
    - 1526
    - 1546
    - 1559
    - 1576
    - 1583
    - 1589
    - 1605
    - 1679
    - 1682
    - 1683
    - 1686
    - 1689
    - 1690
    - 1691
    - 1696
    - 1697
    - 1698
    - 1699
    - 1721
    - 1723
    - 1726
    - 1728
    - 1744
    - 1753
    - 1757
    - 1758
    - 1759
    - 1760
    - 1761
    - 1766
    - 1768
    - 1769
    - 1774
    - 1775
    - 1776
    - 1779
    - 1781
    - 1794
    - 1845
    - 1970
    - 1972
    - 1973
    - 2165
    - 2177
    - 2178
    - 2194
    - 2198
    - 2203
    - 2206
    - 2211
    - 2227
    - 2233
    - 2237
    - 2238
    - 2239
    - 2241
    - 2243
    - 2254
    - 2255
    - 2257
    - 2264
    - 2298
    - 2300
    - 2335
    - 2348
    - 2357
    - 2362
    - 2367
    - 2368
    - 2369
    - 2371
    - 2378
    - 2379
    - 2385
    - 2387
    - 2388
    - 2420
    - 2437
    - 2439
    - 2443
    - 2444
    - 2463
    - 2464
    - 2476
    - 2477
    - 2481
    - 2483
    - 2487
    - 2489
    - 2490
    - 2491
    - 2497
    - 2503
    - 2507
    - 2517
  hope: !ruby/object:Word
    word: hope
    stem: hope
    docFrequency: 7.0
    docPositions:
    - 30
    - 550
    - 751
    - 1526
    - 1882
    - 2048
  enterprise: !ruby/object:Word
    word: enterprise
    stem: enterpris
    docFrequency: 3.0
    docPositions:
    - 30
    - 1526
  eventually: !ruby/object:Word
    word: eventually
    stem: eventu
    docFrequency: 3.0
    docPositions:
    - 30
    - 1526
  result: !ruby/object:Word
    word: result
    stem: result
    docFrequency: 9.0
    docPositions:
    - 30
    - 1158
    - 1218
    - 1328
    - 1526
    - 2334
    - 2359
    - 2437
  both: !ruby/object:Word
    word: both
    stem: both
    docFrequency: 29.0
    docPositions:
    - 30
    - 40
    - 46
    - 63
    - 190
    - 300
    - 482
    - 737
    - 861
    - 885
    - 989
    - 1140
    - 1257
    - 1417
    - 1526
    - 1534
    - 1538
    - 1549
    - 1637
    - 1713
    - 1833
    - 2038
    - 2138
    - 2156
    - 2227
    - 2322
    - 2386
    - 2493
  permanent: !ruby/object:Word
    word: permanent
    stem: perman
    docFrequency: 5.0
    docPositions:
    - 31
    - 119
    - 1527
    - 1593
  its: !ruby/object:Word
    word: its
    stem: it
    docFrequency: 59.0
    docPositions:
    - 31
    - 48
    - 96
    - 102
    - 103
    - 105
    - 107
    - 192
    - 193
    - 228
    - 377
    - 618
    - 619
    - 639
    - 673
    - 709
    - 754
    - 813
    - 865
    - 872
    - 873
    - 1062
    - 1079
    - 1089
    - 1269
    - 1323
    - 1351
    - 1527
    - 1540
    - 1578
    - 1582
    - 1583
    - 1585
    - 1587
    - 1639
    - 1640
    - 1663
    - 1766
    - 1939
    - 1940
    - 1958
    - 1988
    - 2016
    - 2051
    - 2100
    - 2142
    - 2145
    - 2146
    - 2274
    - 2285
    - 2291
    - 2391
    - 2434
    - 2452
  machines: !ruby/object:Word
    word: machines
    stem: machin
    docFrequency: 49.0
    docPositions:
    - 31
    - 70
    - 81
    - 88
    - 90
    - 404
    - 548
    - 553
    - 623
    - 821
    - 849
    - 852
    - 879
    - 938
    - 989
    - 1002
    - 1135
    - 1151
    - 1152
    - 1257
    - 1271
    - 1286
    - 1307
    - 1449
    - 1527
    - 1556
    - 1565
    - 1570
    - 1572
    - 1783
    - 1880
    - 1885
    - 1944
    - 2108
    - 2128
    - 2131
    - 2152
    - 2194
    - 2227
    - 2236
    - 2319
    - 2329
    - 2330
    - 2386
    - 2393
    - 2406
    - 2425
    - 2514
  other: !ruby/object:Word
    word: other
    stem: other
    docFrequency: 35.0
    docPositions:
    - 31
    - 129
    - 130
    - 140
    - 311
    - 318
    - 393
    - 495
    - 578
    - 962
    - 1092
    - 1101
    - 1151
    - 1252
    - 1273
    - 1279
    - 1295
    - 1527
    - 1601
    - 1602
    - 1610
    - 1720
    - 1725
    - 1774
    - 1842
    - 1907
    - 2210
    - 2294
    - 2301
    - 2329
    - 2381
    - 2395
    - 2399
    - 2413
  artefacts: !ruby/object:Word
    word: artefacts
    stem: artefact
    docFrequency: 3.0
    docPositions:
    - 32
    - 1528
  well: !ruby/object:Word
    word: well
    stem: well
    docFrequency: 17.0
    docPositions:
    - 32
    - 399
    - 500
    - 506
    - 553
    - 707
    - 1256
    - 1393
    - 1528
    - 1778
    - 1845
    - 1849
    - 1885
    - 2014
    - 2385
    - 2477
  focal: !ruby/object:Word
    word: focal
    stem: focal
    docFrequency: 5.0
    docPositions:
    - 32
    - 1458
    - 1528
    - 2521
  point: !ruby/object:Word
    word: point
    stem: point
    docFrequency: 31.0
    docPositions:
    - 32
    - 235
    - 296
    - 558
    - 769
    - 961
    - 1015
    - 1017
    - 1041
    - 1042
    - 1124
    - 1125
    - 1232
    - 1375
    - 1458
    - 1528
    - 1666
    - 1711
    - 1889
    - 2066
    - 2209
    - 2245
    - 2247
    - 2261
    - 2262
    - 2314
    - 2315
    - 2369
    - 2465
    - 2521
  our: !ruby/object:Word
    word: our
    stem: our
    docFrequency: 63.0
    docPositions:
    - 32
    - 33
    - 35
    - 39
    - 52
    - 113
    - 114
    - 115
    - 135
    - 143
    - 268
    - 274
    - 277
    - 654
    - 944
    - 996
    - 1176
    - 1177
    - 1217
    - 1261
    - 1277
    - 1295
    - 1358
    - 1359
    - 1363
    - 1388
    - 1412
    - 1433
    - 1441
    - 1457
    - 1459
    - 1528
    - 1529
    - 1531
    - 1533
    - 1542
    - 1589
    - 1590
    - 1591
    - 1605
    - 1611
    - 1691
    - 1695
    - 1698
    - 1970
    - 2198
    - 2232
    - 2343
    - 2344
    - 2358
    - 2388
    - 2399
    - 2413
    - 2457
    - 2458
    - 2460
    - 2474
    - 2490
    - 2502
    - 2508
    - 2520
    - 2522
  various: !ruby/object:Word
    word: various
    stem: variou
    docFrequency: 15.0
    docPositions:
    - 32
    - 181
    - 204
    - 454
    - 847
    - 910
    - 1299
    - 1528
    - 1632
    - 1647
    - 1815
    - 2126
    - 2174
    - 2417
  activities: !ruby/object:Word
    word: activities
    stem: activ
    docFrequency: 23.0
    docPositions:
    - 33
    - 38
    - 62
    - 77
    - 101
    - 173
    - 326
    - 339
    - 583
    - 1431
    - 1433
    - 1529
    - 1532
    - 1548
    - 1561
    - 1581
    - 1629
    - 1731
    - 1740
    - 1912
    - 2500
    - 2502
  these: !ruby/object:Word
    word: these
    stem: these
    docFrequency: 41.0
    docPositions:
    - 33
    - 86
    - 100
    - 200
    - 213
    - 228
    - 269
    - 300
    - 329
    - 420
    - 450
    - 492
    - 647
    - 755
    - 825
    - 988
    - 1155
    - 1256
    - 1369
    - 1455
    - 1529
    - 1568
    - 1580
    - 1643
    - 1652
    - 1663
    - 1692
    - 1713
    - 1734
    - 1791
    - 1813
    - 1841
    - 1966
    - 2052
    - 2112
    - 2226
    - 2333
    - 2385
    - 2464
    - 2518
  have: !ruby/object:Word
    word: have
    stem: have
    docFrequency: 109.0
    docPositions:
    - 33
    - 38
    - 41
    - 46
    - 62
    - 64
    - 74
    - 113
    - 143
    - 345
    - 379
    - 414
    - 429
    - 570
    - 572
    - 577
    - 614
    - 622
    - 665
    - 679
    - 694
    - 745
    - 749
    - 751
    - 753
    - 801
    - 814
    - 825
    - 849
    - 863
    - 865
    - 1000
    - 1077
    - 1100
    - 1216
    - 1223
    - 1232
    - 1305
    - 1307
    - 1332
    - 1336
    - 1339
    - 1368
    - 1393
    - 1407
    - 1411
    - 1414
    - 1423
    - 1432
    - 1440
    - 1447
    - 1457
    - 1529
    - 1532
    - 1535
    - 1538
    - 1548
    - 1550
    - 1560
    - 1589
    - 1611
    - 1744
    - 1766
    - 1787
    - 1798
    - 1901
    - 1903
    - 1906
    - 1935
    - 1943
    - 1980
    - 1994
    - 2004
    - 2043
    - 2047
    - 2048
    - 2050
    - 2090
    - 2101
    - 2112
    - 2128
    - 2140
    - 2142
    - 2234
    - 2283
    - 2300
    - 2357
    - 2362
    - 2369
    - 2423
    - 2425
    - 2439
    - 2443
    - 2444
    - 2463
    - 2477
    - 2487
    - 2489
    - 2492
    - 2497
    - 2501
    - 2507
    - 2512
    - 2520
  expanded: !ruby/object:Word
    word: expanded
    stem: expand
    docFrequency: 3.0
    docPositions:
    - 33
    - 1529
  arrival: !ruby/object:Word
    word: arrival
    stem: arriv
    docFrequency: 7.0
    docPositions:
    - 33
    - 588
    - 740
    - 1529
    - 1915
    - 2041
  archivist: !ruby/object:Word
    word: archivist
    stem: archivist
    docFrequency: 5.0
    docPositions:
    - 34
    - 1479
    - 1530
    - 2530
  harold: !ruby/object:Word
    word: harold
    stem: harold
    docFrequency: 5.0
    docPositions:
    - 34
    - 1479
    - 1530
    - 2530
  gearing: !ruby/object:Word
    word: gearing
    stem: gear
    docFrequency: 5.0
    docPositions:
    - 34
    - 1479
    - 1530
    - 2530
  started: !ruby/object:Word
    word: started
    stem: start
    docFrequency: 13.0
    docPositions:
    - 34
    - 417
    - 427
    - 890
    - 898
    - 973
    - 1530
    - 1788
    - 1796
    - 2158
    - 2164
    - 2215
  work: !ruby/object:Word
    word: work
    stem: work
    docFrequency: 47.0
    docPositions:
    - 34
    - 39
    - 187
    - 242
    - 352
    - 400
    - 424
    - 748
    - 758
    - 774
    - 776
    - 941
    - 950
    - 1025
    - 1026
    - 1218
    - 1254
    - 1316
    - 1377
    - 1380
    - 1390
    - 1393
    - 1421
    - 1530
    - 1533
    - 1636
    - 1671
    - 1749
    - 1779
    - 1795
    - 2046
    - 2055
    - 2069
    - 2071
    - 2197
    - 2202
    - 2249
    - 2250
    - 2359
    - 2383
    - 2432
    - 2467
    - 2468
    - 2476
    - 2477
    - 2497
  massive: !ruby/object:Word
    word: massive
    stem: massiv
    docFrequency: 3.0
    docPositions:
    - 35
    - 1531
  undertaking: !ruby/object:Word
    word: undertaking
    stem: undertak
    docFrequency: 5.0
    docPositions:
    - 35
    - 1304
    - 1531
    - 2422
  documenting: !ruby/object:Word
    word: documenting
    stem: document
    docFrequency: 3.0
    docPositions:
    - 35
    - 1531
  classifying: !ruby/object:Word
    word: classifying
    stem: classifi
    docFrequency: 3.0
    docPositions:
    - 35
    - 1531
  growing: !ruby/object:Word
    word: growing
    stem: grow
    docFrequency: 5.0
    docPositions:
    - 35
    - 115
    - 1531
    - 1591
  collection: !ruby/object:Word
    word: collection
    stem: collect
    docFrequency: 17.0
    docPositions:
    - 36
    - 115
    - 638
    - 1252
    - 1325
    - 1412
    - 1449
    - 1450
    - 1532
    - 1591
    - 1957
    - 2381
    - 2436
    - 2490
    - 2514
    - 2515
  historical: !ruby/object:Word
    word: historical
    stem: histor
    docFrequency: 9.0
    docPositions:
    - 36
    - 53
    - 84
    - 93
    - 1532
    - 1543
    - 1568
    - 1575
  documents: !ruby/object:Word
    word: documents
    stem: document
    docFrequency: 3.0
    docPositions:
    - 36
    - 1532
  meanwhile: !ruby/object:Word
    word: meanwhile
    stem: meanwhil
    docFrequency: 3.0
    docPositions:
    - 38
    - 1532
  existing: !ruby/object:Word
    word: existing
    stem: exist
    docFrequency: 3.0
    docPositions:
    - 38
    - 1532
  continued: !ruby/object:Word
    word: continued
    stem: continu
    docFrequency: 7.0
    docPositions:
    - 38
    - 51
    - 941
    - 1532
    - 1541
    - 2197
  unabated: !ruby/object:Word
    word: unabated
    stem: unab
    docFrequency: 3.0
    docPositions:
    - 39
    - 1533
  far: !ruby/object:Word
    word: far
    stem: far
    docFrequency: 19.0
    docPositions:
    - 39
    - 68
    - 169
    - 183
    - 270
    - 860
    - 864
    - 912
    - 1030
    - 1533
    - 1554
    - 1627
    - 1634
    - 1693
    - 2137
    - 2141
    - 2176
    - 2254
  oldest: !ruby/object:Word
    word: oldest
    stem: oldest
    docFrequency: 3.0
    docPositions:
    - 39
    - 1533
  concerned: !ruby/object:Word
    word: concerned
    stem: concern
    docFrequency: 13.0
    docPositions:
    - 40
    - 45
    - 113
    - 374
    - 619
    - 808
    - 1534
    - 1537
    - 1589
    - 1763
    - 1940
    - 2097
  emphasis: !ruby/object:Word
    word: emphasis
    stem: emphasi
    docFrequency: 7.0
    docPositions:
    - 40
    - 235
    - 557
    - 1534
    - 1666
    - 1888
  changed: !ruby/object:Word
    word: changed
    stem: chang
    docFrequency: 3.0
    docPositions:
    - 40
    - 1534
  pegasus: !ruby/object:Word
    word: pegasus
    stem: pegasu
    docFrequency: 32.0
    docPositions:
    - 40
    - 1256
    - 1340
    - 1351
    - 1359
    - 1360
    - 1364
    - 1371
    - 1375
    - 1389
    - 1396
    - 1398
    - 1416
    - 1426
    - 1458
    - 1479
    - 1534
    - 2385
    - 2445
    - 2452
    - 2458
    - 2459
    - 2461
    - 2465
    - 2475
    - 2480
    - 2482
    - 2492
    - 2500
    - 2521
    - 2530
  elliott: !ruby/object:Word
    word: elliott
    stem: elliott
    docFrequency: 13.0
    docPositions:
    - 41
    - 238
    - 284
    - 286
    - 1363
    - 1479
    - 1535
    - 1669
    - 1701
    - 1703
    - 2460
    - 2530
  over: !ruby/object:Word
    word: over
    stem: over
    docFrequency: 31.0
    docPositions:
    - 41
    - 157
    - 181
    - 191
    - 303
    - 673
    - 716
    - 719
    - 740
    - 800
    - 1019
    - 1104
    - 1129
    - 1287
    - 1379
    - 1535
    - 1621
    - 1632
    - 1638
    - 1716
    - 1988
    - 2023
    - 2026
    - 2041
    - 2089
    - 2247
    - 2302
    - 2317
    - 2407
    - 2467
  year: !ruby/object:Word
    word: year
    stem: year
    docFrequency: 21.0
    docPositions:
    - 41
    - 51
    - 52
    - 112
    - 461
    - 727
    - 1099
    - 1141
    - 1186
    - 1379
    - 1535
    - 1541
    - 1542
    - 1588
    - 1820
    - 2032
    - 2299
    - 2323
    - 2349
    - 2467
  now: !ruby/object:Word
    word: now
    stem: now
    docFrequency: 41.0
    docPositions:
    - 41
    - 97
    - 423
    - 541
    - 661
    - 921
    - 1182
    - 1222
    - 1228
    - 1232
    - 1257
    - 1299
    - 1328
    - 1337
    - 1357
    - 1359
    - 1363
    - 1390
    - 1423
    - 1437
    - 1535
    - 1579
    - 1794
    - 1873
    - 1976
    - 2183
    - 2347
    - 2361
    - 2365
    - 2369
    - 2386
    - 2417
    - 2437
    - 2444
    - 2456
    - 2458
    - 2460
    - 2476
    - 2497
    - 2506
  new: !ruby/object:Word
    word: new
    stem: new
    docFrequency: 46.0
    docPositions:
    - 41
    - 43
    - 47
    - 101
    - 180
    - 214
    - 218
    - 222
    - 531
    - 627
    - 719
    - 775
    - 778
    - 1082
    - 1145
    - 1176
    - 1186
    - 1217
    - 1231
    - 1235
    - 1241
    - 1247
    - 1360
    - 1535
    - 1537
    - 1539
    - 1581
    - 1653
    - 1655
    - 1659
    - 1870
    - 1948
    - 2026
    - 2070
    - 2073
    - 2286
    - 2325
    - 2343
    - 2349
    - 2358
    - 2368
    - 2370
    - 2374
    - 2378
    - 2459
  objective: !ruby/object:Word
    word: objective
    stem: object
    docFrequency: 7.0
    docPositions:
    - 42
    - 894
    - 1145
    - 1536
    - 2162
    - 2325
  get: !ruby/object:Word
    word: get
    stem: get
    docFrequency: 9.0
    docPositions:
    - 42
    - 473
    - 485
    - 1004
    - 1536
    - 1828
    - 1836
    - 2238
  them: !ruby/object:Word
    word: them
    stem: them
    docFrequency: 43.0
    docPositions:
    - 42
    - 83
    - 202
    - 278
    - 315
    - 370
    - 371
    - 466
    - 507
    - 519
    - 609
    - 673
    - 911
    - 946
    - 957
    - 993
    - 1034
    - 1230
    - 1232
    - 1237
    - 1255
    - 1536
    - 1567
    - 1645
    - 1699
    - 1724
    - 1761
    - 1762
    - 1823
    - 1850
    - 1860
    - 1931
    - 1988
    - 2175
    - 2200
    - 2207
    - 2229
    - 2256
    - 2367
    - 2369
    - 2372
    - 2384
  back: !ruby/object:Word
    word: back
    stem: back
    docFrequency: 15.0
    docPositions:
    - 42
    - 169
    - 183
    - 696
    - 899
    - 1297
    - 1303
    - 1536
    - 1627
    - 1634
    - 2006
    - 2165
    - 2415
    - 2421
  state: !ruby/object:Word
    word: state
    stem: state
    docFrequency: 5.0
    docPositions:
    - 42
    - 1110
    - 1536
    - 2306
  reliability: !ruby/object:Word
    word: reliability
    stem: reliabl
    docFrequency: 13.0
    docPositions:
    - 42
    - 979
    - 985
    - 1028
    - 1229
    - 1380
    - 1536
    - 2221
    - 2225
    - 2252
    - 2366
    - 2468
  they: !ruby/object:Word
    word: they
    stem: thei
    docFrequency: 49.0
    docPositions:
    - 43
    - 248
    - 249
    - 250
    - 287
    - 334
    - 357
    - 369
    - 370
    - 385
    - 386
    - 433
    - 500
    - 506
    - 521
    - 577
    - 609
    - 610
    - 647
    - 920
    - 977
    - 1066
    - 1360
    - 1395
    - 1537
    - 1675
    - 1676
    - 1677
    - 1704
    - 1737
    - 1752
    - 1760
    - 1761
    - 1770
    - 1771
    - 1800
    - 1845
    - 1849
    - 1862
    - 1906
    - 1931
    - 1932
    - 1966
    - 2182
    - 2219
    - 2278
    - 2459
    - 2479
  enjoyed: !ruby/object:Word
    word: enjoyed
    stem: enjoi
    docFrequency: 3.0
    docPositions:
    - 43
    - 1537
  parties: !ruby/object:Word
    word: parties
    stem: parti
    docFrequency: 7.0
    docPositions:
    - 45
    - 1455
    - 1511
    - 1537
    - 2518
    - 2540
  more: !ruby/object:Word
    word: more
    stem: more
    docFrequency: 45.0
    docPositions:
    - 45
    - 276
    - 364
    - 429
    - 587
    - 620
    - 622
    - 628
    - 632
    - 658
    - 773
    - 860
    - 865
    - 964
    - 993
    - 1028
    - 1066
    - 1135
    - 1323
    - 1337
    - 1369
    - 1434
    - 1537
    - 1697
    - 1757
    - 1798
    - 1914
    - 1941
    - 1943
    - 1949
    - 1953
    - 1974
    - 2068
    - 2137
    - 2142
    - 2212
    - 2229
    - 2252
    - 2278
    - 2319
    - 2434
    - 2444
    - 2464
    - 2503
  modern: !ruby/object:Word
    word: modern
    stem: modern
    docFrequency: 9.0
    docPositions:
    - 45
    - 623
    - 819
    - 1012
    - 1537
    - 1944
    - 2106
    - 2242
  expanding: !ruby/object:Word
    word: expanding
    stem: expand
    docFrequency: 3.0
    docPositions:
    - 46
    - 1538
  their: !ruby/object:Word
    word: their
    stem: their
    docFrequency: 21.0
    docPositions:
    - 46
    - 104
    - 257
    - 333
    - 506
    - 737
    - 848
    - 850
    - 918
    - 997
    - 1538
    - 1584
    - 1682
    - 1736
    - 1849
    - 2038
    - 2127
    - 2129
    - 2180
    - 2233
  portfolios: !ruby/object:Word
    word: portfolios
    stem: portfolio
    docFrequency: 3.0
    docPositions:
    - 46
    - 1538
  while: !ruby/object:Word
    word: while
    stem: while
    docFrequency: 19.0
    docPositions:
    - 46
    - 260
    - 262
    - 348
    - 394
    - 728
    - 949
    - 1101
    - 1450
    - 1538
    - 1685
    - 1687
    - 1747
    - 1775
    - 2033
    - 2201
    - 2301
    - 2515
  software: !ruby/object:Word
    word: software
    stem: softwar
    docFrequency: 24.0
    docPositions:
    - 47
    - 773
    - 1159
    - 1187
    - 1299
    - 1319
    - 1325
    - 1328
    - 1345
    - 1348
    - 1413
    - 1513
    - 1539
    - 2068
    - 2335
    - 2350
    - 2417
    - 2436
    - 2437
    - 2448
    - 2451
    - 2491
    - 2542
  group: !ruby/object:Word
    word: group
    stem: group
    docFrequency: 24.0
    docPositions:
    - 47
    - 179
    - 191
    - 193
    - 199
    - 232
    - 286
    - 1431
    - 1450
    - 1452
    - 1456
    - 1491
    - 1539
    - 1638
    - 1640
    - 1642
    - 1665
    - 1703
    - 2500
    - 2515
    - 2517
    - 2519
    - 2533
  taken: !ruby/object:Word
    word: taken
    stem: taken
    docFrequency: 9.0
    docPositions:
    - 47
    - 295
    - 593
    - 802
    - 1539
    - 1710
    - 1920
    - 2091
  lease: !ruby/object:Word
    word: lease
    stem: leas
    docFrequency: 3.0
    docPositions:
    - 47
    - 1539
  life: !ruby/object:Word
    word: life
    stem: life
    docFrequency: 3.0
    docPositions:
    - 47
    - 1539
  redefinition: !ruby/object:Word
    word: redefinition
    stem: redefinit
    docFrequency: 3.0
    docPositions:
    - 48
    - 1540
  further: !ruby/object:Word
    word: further
    stem: further
    docFrequency: 15.0
    docPositions:
    - 48
    - 135
    - 139
    - 146
    - 214
    - 1072
    - 1411
    - 1540
    - 1605
    - 1609
    - 1614
    - 1653
    - 2280
    - 2489
  details: !ruby/object:Word
    word: details
    stem: detail
    docFrequency: 9.0
    docPositions:
    - 48
    - 481
    - 970
    - 1478
    - 1540
    - 1832
    - 2214
    - 2530
  all: !ruby/object:Word
    word: all
    stem: all
    docFrequency: 55.0
    docPositions:
    - 48
    - 57
    - 231
    - 246
    - 277
    - 305
    - 443
    - 471
    - 486
    - 500
    - 518
    - 523
    - 565
    - 620
    - 637
    - 757
    - 821
    - 851
    - 877
    - 895
    - 937
    - 1107
    - 1228
    - 1315
    - 1456
    - 1459
    - 1473
    - 1540
    - 1547
    - 1664
    - 1675
    - 1698
    - 1716
    - 1808
    - 1826
    - 1837
    - 1845
    - 1859
    - 1862
    - 1896
    - 1941
    - 1956
    - 2054
    - 2108
    - 2130
    - 2150
    - 2163
    - 2193
    - 2305
    - 2365
    - 2431
    - 2519
    - 2522
    - 2529
  activity: !ruby/object:Word
    word: activity
    stem: activ
    docFrequency: 5.0
    docPositions:
    - 49
    - 335
    - 1541
    - 1738
  can: !ruby/object:Word
    word: can
    stem: can
    docFrequency: 19.0
    docPositions:
    - 49
    - 97
    - 442
    - 519
    - 622
    - 1299
    - 1367
    - 1395
    - 1420
    - 1541
    - 1579
    - 1807
    - 1860
    - 1943
    - 2417
    - 2462
    - 2479
    - 2496
  found: !ruby/object:Word
    word: found
    stem: found
    docFrequency: 11.0
    docPositions:
    - 49
    - 182
    - 807
    - 918
    - 975
    - 1541
    - 1633
    - 2096
    - 2180
    - 2217
  meetings: !ruby/object:Word
    word: meetings
    stem: meet
    docFrequency: 7.0
    docPositions:
    - 51
    - 1472
    - 1473
    - 1541
    - 2528
    - 2529
  programme: !ruby/object:Word
    word: programme
    stem: programm
    docFrequency: 15.0
    docPositions:
    - 51
    - 68
    - 89
    - 107
    - 704
    - 1390
    - 1473
    - 1541
    - 1554
    - 1571
    - 1587
    - 2013
    - 2476
    - 2529
  toughout: !ruby/object:Word
    word: toughout
    stem: toughout
    docFrequency: 3.0
    docPositions:
    - 51
    - 1541
  past: !ruby/object:Word
    word: past
    stem: past
    docFrequency: 19.0
    docPositions:
    - 51
    - 66
    - 69
    - 89
    - 578
    - 611
    - 1177
    - 1232
    - 1379
    - 1541
    - 1552
    - 1555
    - 1571
    - 1907
    - 1933
    - 2344
    - 2369
    - 2467
  along: !ruby/object:Word
    word: along
    stem: along
    docFrequency: 11.0
    docPositions:
    - 52
    - 212
    - 413
    - 671
    - 871
    - 1542
    - 1651
    - 1786
    - 1986
    - 2144
  lines: !ruby/object:Word
    word: lines
    stem: line
    docFrequency: 7.0
    docPositions:
    - 52
    - 716
    - 1130
    - 1542
    - 2023
    - 2318
  successfully: !ruby/object:Word
    word: successfully
    stem: successfulli
    docFrequency: 3.0
    docPositions:
    - 52
    - 1542
  established: !ruby/object:Word
    word: established
    stem: establish
    docFrequency: 9.0
    docPositions:
    - 52
    - 64
    - 79
    - 1097
    - 1542
    - 1550
    - 1563
    - 2297
  first: !ruby/object:Word
    word: first
    stem: first
    docFrequency: 57.0
    docPositions:
    - 52
    - 161
    - 180
    - 281
    - 292
    - 305
    - 327
    - 348
    - 351
    - 411
    - 440
    - 545
    - 591
    - 662
    - 679
    - 681
    - 759
    - 765
    - 848
    - 884
    - 1043
    - 1075
    - 1139
    - 1152
    - 1205
    - 1240
    - 1314
    - 1542
    - 1621
    - 1700
    - 1707
    - 1716
    - 1732
    - 1747
    - 1748
    - 1784
    - 1805
    - 1877
    - 1918
    - 1977
    - 1994
    - 1996
    - 2056
    - 2062
    - 2127
    - 2155
    - 2263
    - 2281
    - 2321
    - 2330
    - 2356
    - 2373
    - 2430
  carries: !ruby/object:Word
    word: carries
    stem: carri
    docFrequency: 5.0
    docPositions:
    - 53
    - 1478
    - 1543
    - 2530
  wide: !ruby/object:Word
    word: wide
    stem: wide
    docFrequency: 5.0
    docPositions:
    - 53
    - 1170
    - 1543
    - 2342
  variety: !ruby/object:Word
    word: variety
    stem: varieti
    docFrequency: 3.0
    docPositions:
    - 53
    - 1543
  subjects: !ruby/object:Word
    word: subjects
    stem: subject
    docFrequency: 3.0
    docPositions:
    - 54
    - 1544
  ranging: !ruby/object:Word
    word: ranging
    stem: rang
    docFrequency: 3.0
    docPositions:
    - 54
    - 1544
  evolution: !ruby/object:Word
    word: evolution
    stem: evolut
    docFrequency: 3.0
    docPositions:
    - 54
    - 1544
  circuitry: !ruby/object:Word
    word: circuitry
    stem: circuitri
    docFrequency: 7.0
    docPositions:
    - 55
    - 777
    - 891
    - 1545
    - 2072
    - 2159
  via: !ruby/object:Word
    word: via
    stem: via
    docFrequency: 5.0
    docPositions:
    - 55
    - 1420
    - 1545
    - 2496
  development: !ruby/object:Word
    word: development
    stem: develop
    docFrequency: 35.0
    docPositions:
    - 56
    - 117
    - 128
    - 134
    - 144
    - 237
    - 243
    - 289
    - 734
    - 738
    - 842
    - 882
    - 885
    - 1026
    - 1058
    - 1089
    - 1368
    - 1546
    - 1593
    - 1600
    - 1604
    - 1612
    - 1668
    - 1672
    - 1706
    - 2035
    - 2039
    - 2123
    - 2153
    - 2156
    - 2250
    - 2272
    - 2291
    - 2463
  dec: !ruby/object:Word
    word: dec
    stem: dec
    docFrequency: 50.0
    docPositions:
    - 56
    - 351
    - 540
    - 544
    - 550
    - 552
    - 627
    - 727
    - 735
    - 788
    - 796
    - 805
    - 808
    - 821
    - 827
    - 848
    - 849
    - 854
    - 1153
    - 1265
    - 1271
    - 1284
    - 1286
    - 1287
    - 1479
    - 1546
    - 1748
    - 1872
    - 1876
    - 1882
    - 1884
    - 1948
    - 2032
    - 2036
    - 2081
    - 2087
    - 2094
    - 2097
    - 2108
    - 2114
    - 2127
    - 2128
    - 2133
    - 2331
    - 2393
    - 2404
    - 2406
    - 2407
    - 2530
  pdp: !ruby/object:Word
    word: pdp
    stem: pdp
    docFrequency: 37.0
    docPositions:
    - 56
    - 546
    - 552
    - 588
    - 789
    - 851
    - 1153
    - 1268
    - 1270
    - 1282
    - 1284
    - 1285
    - 1289
    - 1290
    - 1294
    - 1311
    - 1314
    - 1546
    - 1878
    - 1884
    - 1915
    - 2082
    - 2130
    - 2331
    - 2390
    - 2392
    - 2402
    - 2404
    - 2405
    - 2409
    - 2410
    - 2412
    - 2427
    - 2430
  also: !ruby/object:Word
    word: also
    stem: also
    docFrequency: 51.0
    docPositions:
    - 56
    - 181
    - 221
    - 222
    - 448
    - 497
    - 505
    - 630
    - 711
    - 1027
    - 1030
    - 1050
    - 1130
    - 1165
    - 1205
    - 1311
    - 1339
    - 1346
    - 1354
    - 1401
    - 1407
    - 1412
    - 1423
    - 1434
    - 1436
    - 1546
    - 1632
    - 1658
    - 1659
    - 1811
    - 1844
    - 1848
    - 1951
    - 2018
    - 2251
    - 2254
    - 2266
    - 2318
    - 2339
    - 2356
    - 2427
    - 2444
    - 2449
    - 2455
    - 2483
    - 2487
    - 2490
    - 2497
    - 2503
    - 2505
  carry: !ruby/object:Word
    word: carry
    stem: carri
    docFrequency: 3.0
    docPositions:
    - 56
    - 1546
  report: !ruby/object:Word
    word: report
    stem: report
    docFrequency: 23.0
    docPositions:
    - 56
    - 193
    - 195
    - 232
    - 233
    - 346
    - 368
    - 703
    - 878
    - 1089
    - 1374
    - 1546
    - 1640
    - 1665
    - 1666
    - 1745
    - 1759
    - 2012
    - 2151
    - 2291
    - 2464
  based: !ruby/object:Word
    word: based
    stem: base
    docFrequency: 17.0
    docPositions:
    - 56
    - 66
    - 694
    - 806
    - 839
    - 844
    - 1306
    - 1448
    - 1546
    - 1552
    - 2004
    - 2095
    - 2120
    - 2125
    - 2424
    - 2513
  day: !ruby/object:Word
    word: day
    stem: dai
    docFrequency: 20.0
    docPositions:
    - 57
    - 90
    - 601
    - 877
    - 1186
    - 1260
    - 1276
    - 1434
    - 1441
    - 1464
    - 1547
    - 1572
    - 1926
    - 2150
    - 2349
    - 2387
    - 2398
    - 2503
    - 2508
  seminar: !ruby/object:Word
    word: seminar
    stem: seminar
    docFrequency: 5.0
    docPositions:
    - 57
    - 877
    - 1547
    - 2150
  pioneering: !ruby/object:Word
    word: pioneering
    stem: pioneer
    docFrequency: 13.0
    docPositions:
    - 57
    - 73
    - 107
    - 581
    - 873
    - 1135
    - 1547
    - 1559
    - 1587
    - 1910
    - 2146
    - 2319
  top: !ruby/object:Word
    word: top
    stem: top
    docFrequency: 9.0
    docPositions:
    - 60
    - 110
    - 159
    - 406
    - 537
    - 869
    - 1173
    - 1211
  agitated: !ruby/object:Word
    word: agitated
    stem: agit
    docFrequency: 3.0
    docPositions:
    - 63
    - 1549
  host: !ruby/object:Word
    word: host
    stem: host
    docFrequency: 3.0
    docPositions:
    - 63
    - 1549
  issues: !ruby/object:Word
    word: issues
    stem: issu
    docFrequency: 4.0
    docPositions:
    - 63
    - 1518
    - 1549
  exciting: !ruby/object:Word
    word: exciting
    stem: excit
    docFrequency: 5.0
    docPositions:
    - 63
    - 859
    - 1549
    - 2136
  disturbing: !ruby/object:Word
    word: disturbing
    stem: disturb
    docFrequency: 5.0
    docPositions:
    - 64
    - 92
    - 1550
    - 1574
  several: !ruby/object:Word
    word: several
    stem: sever
    docFrequency: 5.0
    docPositions:
    - 64
    - 745
    - 1550
    - 2043
  traditions: !ruby/object:Word
    word: traditions
    stem: tradit
    docFrequency: 5.0
    docPositions:
    - 64
    - 579
    - 1550
    - 1908
  challenged: !ruby/object:Word
    word: challenged
    stem: challeng
    docFrequency: 3.0
    docPositions:
    - 65
    - 1551
  there: !ruby/object:Word
    word: there
    stem: there
    docFrequency: 71.0
    docPositions:
    - 65
    - 77
    - 154
    - 202
    - 203
    - 222
    - 300
    - 327
    - 413
    - 448
    - 470
    - 480
    - 501
    - 565
    - 582
    - 662
    - 666
    - 738
    - 789
    - 791
    - 862
    - 864
    - 892
    - 902
    - 981
    - 983
    - 1002
    - 1041
    - 1056
    - 1111
    - 1164
    - 1165
    - 1170
    - 1379
    - 1511
    - 1551
    - 1561
    - 1618
    - 1645
    - 1646
    - 1659
    - 1713
    - 1732
    - 1786
    - 1811
    - 1825
    - 1831
    - 1846
    - 1896
    - 1911
    - 1977
    - 1981
    - 2039
    - 2082
    - 2084
    - 2139
    - 2141
    - 2160
    - 2168
    - 2221
    - 2223
    - 2236
    - 2261
    - 2270
    - 2307
    - 2338
    - 2339
    - 2342
    - 2467
    - 2540
  unspoken: !ruby/object:Word
    word: unspoken
    stem: unspoken
    docFrequency: 3.0
    docPositions:
    - 65
    - 1551
  assumption: !ruby/object:Word
    word: assumption
    stem: assumpt
    docFrequency: 3.0
    docPositions:
    - 65
    - 1551
  interpretation: !ruby/object:Word
    word: interpretation
    stem: interpret
    docFrequency: 5.0
    docPositions:
    - 66
    - 227
    - 1552
    - 1662
  necessarily: !ruby/object:Word
    word: necessarily
    stem: necessarili
    docFrequency: 3.0
    docPositions:
    - 66
    - 1552
  partial: !ruby/object:Word
    word: partial
    stem: partial
    docFrequency: 3.0
    docPositions:
    - 67
    - 1553
  if: !ruby/object:Word
    word: if
    stem: if
    docFrequency: 29.0
    docPositions:
    - 67
    - 369
    - 370
    - 417
    - 445
    - 464
    - 621
    - 783
    - 863
    - 993
    - 1007
    - 1218
    - 1461
    - 1468
    - 1553
    - 1760
    - 1761
    - 1788
    - 1810
    - 1821
    - 1942
    - 2076
    - 2140
    - 2229
    - 2239
    - 2359
    - 2524
    - 2526
  not: !ruby/object:Word
    word: not
    stem: not
    docFrequency: 59.0
    docPositions:
    - 67
    - 86
    - 97
    - 201
    - 424
    - 430
    - 443
    - 472
    - 506
    - 525
    - 549
    - 572
    - 610
    - 628
    - 651
    - 659
    - 695
    - 755
    - 773
    - 825
    - 855
    - 901
    - 958
    - 1249
    - 1276
    - 1291
    - 1345
    - 1402
    - 1457
    - 1553
    - 1568
    - 1579
    - 1644
    - 1795
    - 1799
    - 1808
    - 1827
    - 1849
    - 1864
    - 1881
    - 1903
    - 1932
    - 1949
    - 1967
    - 1975
    - 2005
    - 2052
    - 2068
    - 2112
    - 2134
    - 2167
    - 2208
    - 2380
    - 2398
    - 2411
    - 2448
    - 2484
    - 2520
  fragmentary: !ruby/object:Word
    word: fragmentary
    stem: fragmentari
    docFrequency: 3.0
    docPositions:
    - 67
    - 1553
  evidence: !ruby/object:Word
    word: evidence
    stem: evid
    docFrequency: 7.0
    docPositions:
    - 67
    - 75
    - 738
    - 1553
    - 1561
    - 2039
  however: !ruby/object:Word
    word: however
    stem: howev
    docFrequency: 19.0
    docPositions:
    - 67
    - 81
    - 94
    - 244
    - 590
    - 620
    - 709
    - 757
    - 791
    - 1553
    - 1565
    - 1576
    - 1673
    - 1917
    - 1941
    - 2016
    - 2054
    - 2084
  being: !ruby/object:Word
    word: being
    stem: be
    docFrequency: 37.0
    docPositions:
    - 68
    - 95
    - 167
    - 260
    - 262
    - 282
    - 575
    - 625
    - 627
    - 643
    - 718
    - 748
    - 892
    - 1238
    - 1280
    - 1355
    - 1362
    - 1426
    - 1554
    - 1577
    - 1625
    - 1685
    - 1687
    - 1701
    - 1904
    - 1946
    - 1948
    - 1962
    - 2025
    - 2046
    - 2160
    - 2373
    - 2400
    - 2456
    - 2459
    - 2500
  damned: !ruby/object:Word
    word: damned
    stem: damn
    docFrequency: 3.0
    docPositions:
    - 68
    - 1554
  shards: !ruby/object:Word
    word: shards
    stem: shard
    docFrequency: 3.0
    docPositions:
    - 68
    - 1554
  chipped: !ruby/object:Word
    word: chipped
    stem: chip
    docFrequency: 3.0
    docPositions:
    - 68
    - 1554
  fragments: !ruby/object:Word
    word: fragments
    stem: fragment
    docFrequency: 3.0
    docPositions:
    - 69
    - 1555
  inaccessibly: !ruby/object:Word
    word: inaccessibly
    stem: inaccess
    docFrequency: 3.0
    docPositions:
    - 69
    - 1555
  distant: !ruby/object:Word
    word: distant
    stem: distant
    docFrequency: 3.0
    docPositions:
    - 69
    - 1555
  provides: !ruby/object:Word
    word: provides
    stem: provid
    docFrequency: 3.0
    docPositions:
    - 69
    - 1555
  embarrassment: !ruby/object:Word
    word: embarrassment
    stem: embarrass
    docFrequency: 3.0
    docPositions:
    - 70
    - 1556
  riches: !ruby/object:Word
    word: riches
    stem: rich
    docFrequency: 3.0
    docPositions:
    - 70
    - 1556
  documentation: !ruby/object:Word
    word: documentation
    stem: document
    docFrequency: 5.0
    docPositions:
    - 70
    - 1441
    - 1556
    - 2508
  orally: !ruby/object:Word
    word: orally
    stem: oral
    docFrequency: 3.0
    docPositions:
    - 70
    - 1556
  transmitted: !ruby/object:Word
    word: transmitted
    stem: transmit
    docFrequency: 3.0
    docPositions:
    - 71
    - 1557
  expertise: !ruby/object:Word
    word: expertise
    stem: expertis
    docFrequency: 3.0
    docPositions:
    - 71
    - 1557
  experiences: !ruby/object:Word
    word: experiences
    stem: experi
    docFrequency: 5.0
    docPositions:
    - 71
    - 973
    - 1557
    - 2215
  recorded: !ruby/object:Word
    word: recorded
    stem: record
    docFrequency: 3.0
    docPositions:
    - 71
    - 1557
  seminars: !ruby/object:Word
    word: seminars
    stem: seminar
    docFrequency: 5.0
    docPositions:
    - 71
    - 1508
    - 1557
    - 2539
  colloquia: !ruby/object:Word
    word: colloquia
    stem: colloquia
    docFrequency: 3.0
    docPositions:
    - 72
    - 1558
  living: !ruby/object:Word
    word: living
    stem: live
    docFrequency: 3.0
    docPositions:
    - 72
    - 1558
  practitioners: !ruby/object:Word
    word: practitioners
    stem: practition
    docFrequency: 3.0
    docPositions:
    - 72
    - 1558
  witnesses: !ruby/object:Word
    word: witnesses
    stem: wit
    docFrequency: 3.0
    docPositions:
    - 72
    - 1558
  great: !ruby/object:Word
    word: great
    stem: great
    docFrequency: 17.0
    docPositions:
    - 73
    - 512
    - 718
    - 751
    - 766
    - 917
    - 1247
    - 1284
    - 1559
    - 1855
    - 2025
    - 2048
    - 2063
    - 2179
    - 2378
    - 2404
  age: !ruby/object:Word
    word: age
    stem: ag
    docFrequency: 5.0
    docPositions:
    - 73
    - 1186
    - 1559
    - 2349
  unlike: !ruby/object:Word
    word: unlike
    stem: unlik
    docFrequency: 5.0
    docPositions:
    - 73
    - 1151
    - 1559
    - 2329
  archaeologist: !ruby/object:Word
    word: archaeologist
    stem: archaeologist
    docFrequency: 3.0
    docPositions:
    - 73
    - 1559
  opportunity: !ruby/object:Word
    word: opportunity
    stem: opportun
    docFrequency: 5.0
    docPositions:
    - 74
    - 119
    - 1560
    - 1593
  select: !ruby/object:Word
    word: select
    stem: select
    docFrequency: 3.0
    docPositions:
    - 74
    - 1560
  almost: !ruby/object:Word
    word: almost
    stem: almost
    docFrequency: 9.0
    docPositions:
    - 74
    - 471
    - 516
    - 637
    - 1560
    - 1826
    - 1857
    - 1956
  unlimited: !ruby/object:Word
    word: unlimited
    stem: unlimit
    docFrequency: 3.0
    docPositions:
    - 74
    - 1560
  wealth: !ruby/object:Word
    word: wealth
    stem: wealth
    docFrequency: 3.0
    docPositions:
    - 74
    - 1560
  another: !ruby/object:Word
    word: another
    stem: anoth
    docFrequency: 17.0
    docPositions:
    - 77
    - 303
    - 385
    - 395
    - 933
    - 977
    - 1368
    - 1450
    - 1561
    - 1716
    - 1770
    - 1776
    - 2191
    - 2219
    - 2463
    - 2515
  respect: !ruby/object:Word
    word: respect
    stem: respect
    docFrequency: 3.0
    docPositions:
    - 77
    - 1561
  which: !ruby/object:Word
    word: which
    stem: which
    docFrequency: 121.0
    docPositions:
    - 77
    - 101
    - 136
    - 140
    - 150
    - 211
    - 251
    - 252
    - 259
    - 266
    - 296
    - 314
    - 319
    - 321
    - 329
    - 336
    - 351
    - 390
    - 394
    - 396
    - 460
    - 480
    - 558
    - 560
    - 600
    - 640
    - 665
    - 691
    - 727
    - 747
    - 756
    - 768
    - 777
    - 779
    - 831
    - 856
    - 863
    - 946
    - 974
    - 1009
    - 1026
    - 1065
    - 1076
    - 1124
    - 1135
    - 1146
    - 1283
    - 1289
    - 1290
    - 1307
    - 1312
    - 1337
    - 1342
    - 1401
    - 1404
    - 1407
    - 1416
    - 1435
    - 1441
    - 1443
    - 1561
    - 1581
    - 1606
    - 1610
    - 1616
    - 1650
    - 1678
    - 1679
    - 1684
    - 1689
    - 1711
    - 1723
    - 1726
    - 1728
    - 1734
    - 1739
    - 1748
    - 1773
    - 1775
    - 1777
    - 1819
    - 1831
    - 1889
    - 1891
    - 1925
    - 1959
    - 1980
    - 2004
    - 2032
    - 2045
    - 2053
    - 2065
    - 2072
    - 2074
    - 2116
    - 2135
    - 2140
    - 2200
    - 2216
    - 2241
    - 2250
    - 2277
    - 2282
    - 2314
    - 2319
    - 2326
    - 2403
    - 2409
    - 2410
    - 2425
    - 2428
    - 2444
    - 2447
    - 2483
    - 2486
    - 2487
    - 2492
    - 2504
    - 2508
    - 2510
  up: !ruby/object:Word
    word: up
    stem: up
    docFrequency: 29.0
    docPositions:
    - 78
    - 144
    - 145
    - 220
    - 221
    - 242
    - 319
    - 518
    - 716
    - 788
    - 805
    - 852
    - 941
    - 1141
    - 1562
    - 1612
    - 1613
    - 1657
    - 1658
    - 1671
    - 1726
    - 1859
    - 2023
    - 2081
    - 2094
    - 2131
    - 2197
    - 2323
  end: !ruby/object:Word
    word: end
    stem: end
    docFrequency: 9.0
    docPositions:
    - 78
    - 912
    - 914
    - 1154
    - 1562
    - 2176
    - 2178
    - 2332
  otherwise: !ruby/object:Word
    word: otherwise
    stem: otherwis
    docFrequency: 9.0
    docPositions:
    - 78
    - 723
    - 1001
    - 1249
    - 1562
    - 2030
    - 2235
    - 2380
  comfortable: !ruby/object:Word
    word: comfortable
    stem: comfort
    docFrequency: 3.0
    docPositions:
    - 78
    - 1562
  perceptions: !ruby/object:Word
    word: perceptions
    stem: percept
    docFrequency: 3.0
    docPositions:
    - 78
    - 1562
  ethos: !ruby/object:Word
    word: ethos
    stem: etho
    docFrequency: 3.0
    docPositions:
    - 79
    - 1563
  preservation: !ruby/object:Word
    word: preservation
    stem: preserv
    docFrequency: 3.0
    docPositions:
    - 79
    - 1563
  essentially: !ruby/object:Word
    word: essentially
    stem: essenti
    docFrequency: 3.0
    docPositions:
    - 79
    - 1563
  passive: !ruby/object:Word
    word: passive
    stem: passiv
    docFrequency: 3.0
    docPositions:
    - 79
    - 1563
  physical: !ruby/object:Word
    word: physical
    stem: physic
    docFrequency: 5.0
    docPositions:
    - 80
    - 872
    - 1564
    - 2145
  relics: !ruby/object:Word
    word: relics
    stem: relic
    docFrequency: 3.0
    docPositions:
    - 80
    - 1564
  placed: !ruby/object:Word
    word: placed
    stem: place
    docFrequency: 3.0
    docPositions:
    - 80
    - 1564
  inert: !ruby/object:Word
    word: inert
    stem: inert
    docFrequency: 3.0
    docPositions:
    - 80
    - 1564
  environment: !ruby/object:Word
    word: environment
    stem: environ
    docFrequency: 3.0
    docPositions:
    - 80
    - 1564
  retard: !ruby/object:Word
    word: retard
    stem: retard
    docFrequency: 3.0
    docPositions:
    - 80
    - 1564
  degradation: !ruby/object:Word
    word: degradation
    stem: degrad
    docFrequency: 3.0
    docPositions:
    - 81
    - 1565
  efforts: !ruby/object:Word
    word: efforts
    stem: effort
    docFrequency: 11.0
    docPositions:
    - 81
    - 104
    - 143
    - 1269
    - 1323
    - 1565
    - 1584
    - 1611
    - 2391
    - 2434
  restore: !ruby/object:Word
    word: restore
    stem: restor
    docFrequency: 3.0
    docPositions:
    - 81
    - 1565
  historic: !ruby/object:Word
    word: historic
    stem: histor
    docFrequency: 10.0
    docPositions:
    - 81
    - 135
    - 1343
    - 1496
    - 1498
    - 1501
    - 1565
    - 1605
    - 2448
  order: !ruby/object:Word
    word: order
    stem: order
    docFrequency: 13.0
    docPositions:
    - 82
    - 88
    - 646
    - 1161
    - 1388
    - 1514
    - 1566
    - 1570
    - 1965
    - 2337
    - 2474
    - 2543
  those: !ruby/object:Word
    word: those
    stem: those
    docFrequency: 13.0
    docPositions:
    - 82
    - 335
    - 614
    - 807
    - 936
    - 937
    - 1566
    - 1738
    - 1935
    - 2096
    - 2192
    - 2193
  originally: !ruby/object:Word
    word: originally
    stem: origin
    docFrequency: 7.0
    docPositions:
    - 82
    - 602
    - 1283
    - 1566
    - 1927
    - 2403
  designed: !ruby/object:Word
    word: designed
    stem: design
    docFrequency: 13.0
    docPositions:
    - 82
    - 319
    - 643
    - 680
    - 1289
    - 1390
    - 1566
    - 1726
    - 1962
    - 1995
    - 2409
    - 2476
  maintained: !ruby/object:Word
    word: maintained
    stem: maintain
    docFrequency: 3.0
    docPositions:
    - 83
    - 1567
  highly: !ruby/object:Word
    word: highly
    stem: highli
    docFrequency: 7.0
    docPositions:
    - 83
    - 514
    - 703
    - 1567
    - 1855
    - 2012
  interventionist: !ruby/object:Word
    word: interventionist
    stem: interventionist
    docFrequency: 3.0
    docPositions:
    - 83
    - 1567
  raises: !ruby/object:Word
    word: raises
    stem: rais
    docFrequency: 3.0
    docPositions:
    - 83
    - 1567
  dilemmas: !ruby/object:Word
    word: dilemmas
    stem: dilemma
    docFrequency: 3.0
    docPositions:
    - 84
    - 1568
  integrity: !ruby/object:Word
    word: integrity
    stem: integr
    docFrequency: 3.0
    docPositions:
    - 84
    - 1568
  authenticity: !ruby/object:Word
    word: authenticity
    stem: authent
    docFrequency: 5.0
    docPositions:
    - 84
    - 91
    - 1568
    - 1573
  only: !ruby/object:Word
    word: only
    stem: onli
    docFrequency: 35.0
    docPositions:
    - 86
    - 275
    - 319
    - 353
    - 391
    - 525
    - 530
    - 614
    - 687
    - 783
    - 863
    - 907
    - 982
    - 1035
    - 1155
    - 1262
    - 1345
    - 1568
    - 1696
    - 1726
    - 1750
    - 1774
    - 1864
    - 1869
    - 1935
    - 2000
    - 2076
    - 2140
    - 2171
    - 2222
    - 2257
    - 2333
    - 2389
    - 2448
  stirrings: !ruby/object:Word
    word: stirrings
    stem: stir
    docFrequency: 3.0
    docPositions:
    - 86
    - 1568
  museological: !ruby/object:Word
    word: museological
    stem: museolog
    docFrequency: 5.0
    docPositions:
    - 86
    - 102
    - 1568
    - 1582
  soup: !ruby/object:Word
    word: soup
    stem: soup
    docFrequency: 3.0
    docPositions:
    - 86
    - 1568
  painful: !ruby/object:Word
    word: painful
    stem: pain
    docFrequency: 3.0
    docPositions:
    - 87
    - 1569
  accept: !ruby/object:Word
    word: accept
    stem: accept
    docFrequency: 3.0
    docPositions:
    - 87
    - 1569
  ultimately: !ruby/object:Word
    word: ultimately
    stem: ultim
    docFrequency: 3.0
    docPositions:
    - 87
    - 1569
  inevitable: !ruby/object:Word
    word: inevitable
    stem: inevit
    docFrequency: 3.0
    docPositions:
    - 87
    - 1569
  demise: !ruby/object:Word
    word: demise
    stem: demis
    docFrequency: 3.0
    docPositions:
    - 87
    - 1569
  lovingly: !ruby/object:Word
    word: lovingly
    stem: lovingli
    docFrequency: 3.0
    docPositions:
    - 88
    - 1570
  ingeniously: !ruby/object:Word
    word: ingeniously
    stem: ingeni
    docFrequency: 3.0
    docPositions:
    - 88
    - 1570
  restored: !ruby/object:Word
    word: restored
    stem: restor
    docFrequency: 9.0
    docPositions:
    - 88
    - 90
    - 1268
    - 1299
    - 1570
    - 1572
    - 2390
    - 2417
  emulate: !ruby/object:Word
    word: emulate
    stem: emul
    docFrequency: 3.0
    docPositions:
    - 89
    - 1571
  performance: !ruby/object:Word
    word: performance
    stem: perform
    docFrequency: 5.0
    docPositions:
    - 89
    - 576
    - 1571
    - 1905
  present: !ruby/object:Word
    word: present
    stem: present
    docFrequency: 9.0
    docPositions:
    - 89
    - 746
    - 748
    - 822
    - 1571
    - 2044
    - 2046
    - 2109
  using: !ruby/object:Word
    word: using
    stem: us
    docFrequency: 25.0
    docPositions:
    - 90
    - 294
    - 818
    - 819
    - 893
    - 1007
    - 1085
    - 1286
    - 1347
    - 1359
    - 1401
    - 1425
    - 1572
    - 1709
    - 2105
    - 2106
    - 2161
    - 2239
    - 2289
    - 2406
    - 2450
    - 2458
    - 2483
    - 2499
  benchmark: !ruby/object:Word
    word: benchmark
    stem: benchmark
    docFrequency: 3.0
    docPositions:
    - 90
    - 1572
  bold: !ruby/object:Word
    word: bold
    stem: bold
    docFrequency: 3.0
    docPositions:
    - 91
    - 1573
  visionary: !ruby/object:Word
    word: visionary
    stem: visionari
    docFrequency: 3.0
    docPositions:
    - 91
    - 1573
  move: !ruby/object:Word
    word: move
    stem: move
    docFrequency: 7.0
    docPositions:
    - 91
    - 626
    - 984
    - 1573
    - 1947
    - 2224
  but: !ruby/object:Word
    word: but
    stem: but
    docFrequency: 63.0
    docPositions:
    - 91
    - 114
    - 206
    - 274
    - 366
    - 443
    - 464
    - 529
    - 549
    - 579
    - 602
    - 614
    - 642
    - 651
    - 663
    - 707
    - 713
    - 752
    - 755
    - 848
    - 901
    - 911
    - 981
    - 995
    - 997
    - 1019
    - 1232
    - 1291
    - 1302
    - 1346
    - 1507
    - 1573
    - 1590
    - 1647
    - 1695
    - 1757
    - 1808
    - 1821
    - 1868
    - 1881
    - 1908
    - 1927
    - 1935
    - 1961
    - 1967
    - 1978
    - 2014
    - 2020
    - 2049
    - 2052
    - 2127
    - 2167
    - 2175
    - 2221
    - 2231
    - 2233
    - 2247
    - 2369
    - 2411
    - 2420
    - 2449
    - 2538
  implications: !ruby/object:Word
    word: implications
    stem: implic
    docFrequency: 3.0
    docPositions:
    - 92
    - 1574
  culture: !ruby/object:Word
    word: culture
    stem: cultur
    docFrequency: 3.0
    docPositions:
    - 92
    - 1574
  founded: !ruby/object:Word
    word: founded
    stem: found
    docFrequency: 3.0
    docPositions:
    - 92
    - 1574
  notion: !ruby/object:Word
    word: notion
    stem: notion
    docFrequency: 3.0
    docPositions:
    - 93
    - 1575
  object: !ruby/object:Word
    word: object
    stem: object
    docFrequency: 11.0
    docPositions:
    - 93
    - 97
    - 98
    - 313
    - 323
    - 1575
    - 1579
    - 1580
    - 1722
    - 1730
  ultimate: !ruby/object:Word
    word: ultimate
    stem: ultim
    docFrequency: 5.0
    docPositions:
    - 93
    - 97
    - 1575
    - 1579
  source: !ruby/object:Word
    word: source
    stem: sourc
    docFrequency: 9.0
    docPositions:
    - 94
    - 97
    - 318
    - 321
    - 1576
    - 1579
    - 1725
    - 1728
  emulation: !ruby/object:Word
    word: emulation
    stem: emul
    docFrequency: 7.0
    docPositions:
    - 94
    - 1323
    - 1334
    - 1576
    - 2434
    - 2441
  faced: !ruby/object:Word
    word: faced
    stem: face
    docFrequency: 3.0
    docPositions:
    - 94
    - 1576
  prospect: !ruby/object:Word
    word: prospect
    stem: prospect
    docFrequency: 3.0
    docPositions:
    - 95
    - 1577
  operational: !ruby/object:Word
    word: operational
    stem: oper
    docFrequency: 13.0
    docPositions:
    - 95
    - 1051
    - 1094
    - 1216
    - 1228
    - 1389
    - 1577
    - 2267
    - 2296
    - 2357
    - 2365
    - 2475
  spirit: !ruby/object:Word
    word: spirit
    stem: spirit
    docFrequency: 5.0
    docPositions:
    - 95
    - 368
    - 1577
    - 1759
  machine: !ruby/object:Word
    word: machine
    stem: machin
    docFrequency: 139.0
    docPositions:
    - 95
    - 267
    - 312
    - 314
    - 483
    - 565
    - 580
    - 594
    - 602
    - 612
    - 614
    - 647
    - 662
    - 666
    - 671
    - 685
    - 701
    - 726
    - 796
    - 799
    - 812
    - 833
    - 839
    - 910
    - 915
    - 917
    - 921
    - 922
    - 927
    - 928
    - 934
    - 937
    - 939
    - 940
    - 941
    - 945
    - 953
    - 958
    - 963
    - 975
    - 976
    - 978
    - 1012
    - 1039
    - 1043
    - 1050
    - 1064
    - 1077
    - 1098
    - 1101
    - 1145
    - 1152
    - 1154
    - 1261
    - 1270
    - 1279
    - 1288
    - 1295
    - 1300
    - 1315
    - 1347
    - 1348
    - 1360
    - 1385
    - 1411
    - 1418
    - 1440
    - 1445
    - 1577
    - 1690
    - 1721
    - 1723
    - 1834
    - 1896
    - 1909
    - 1921
    - 1927
    - 1933
    - 1935
    - 1966
    - 1977
    - 1981
    - 1986
    - 1998
    - 2010
    - 2031
    - 2087
    - 2088
    - 2099
    - 2118
    - 2120
    - 2174
    - 2179
    - 2183
    - 2184
    - 2187
    - 2188
    - 2192
    - 2193
    - 2195
    - 2196
    - 2197
    - 2199
    - 2203
    - 2208
    - 2211
    - 2217
    - 2218
    - 2220
    - 2242
    - 2259
    - 2263
    - 2266
    - 2276
    - 2283
    - 2298
    - 2301
    - 2325
    - 2330
    - 2332
    - 2388
    - 2392
    - 2399
    - 2408
    - 2413
    - 2418
    - 2431
    - 2450
    - 2451
    - 2459
    - 2471
    - 2489
    - 2494
    - 2507
    - 2512
  preserved: !ruby/object:Word
    word: preserved
    stem: preserv
    docFrequency: 3.0
    docPositions:
    - 96
    - 1578
  were: !ruby/object:Word
    word: were
    stem: were
    docFrequency: 155.0
    docPositions:
    - 96
    - 122
    - 127
    - 167
    - 200
    - 202
    - 222
    - 258
    - 260
    - 275
    - 280
    - 305
    - 339
    - 353
    - 357
    - 364
    - 369
    - 370
    - 391
    - 402
    - 433
    - 442
    - 443
    - 445
    - 450
    - 491
    - 492
    - 501
    - 511
    - 524
    - 593
    - 609
    - 615
    - 638
    - 654
    - 678
    - 736
    - 759
    - 789
    - 844
    - 847
    - 855
    - 864
    - 874
    - 910
    - 950
    - 976
    - 981
    - 983
    - 987
    - 988
    - 995
    - 997
    - 1002
    - 1006
    - 1007
    - 1014
    - 1032
    - 1034
    - 1041
    - 1065
    - 1066
    - 1110
    - 1116
    - 1126
    - 1164
    - 1165
    - 1230
    - 1231
    - 1242
    - 1260
    - 1262
    - 1286
    - 1294
    - 1578
    - 1596
    - 1599
    - 1625
    - 1643
    - 1645
    - 1659
    - 1683
    - 1685
    - 1696
    - 1699
    - 1716
    - 1740
    - 1750
    - 1752
    - 1757
    - 1760
    - 1761
    - 1774
    - 1781
    - 1800
    - 1807
    - 1808
    - 1810
    - 1813
    - 1840
    - 1841
    - 1846
    - 1854
    - 1863
    - 1920
    - 1931
    - 1936
    - 1957
    - 1970
    - 1993
    - 2037
    - 2056
    - 2082
    - 2125
    - 2126
    - 2134
    - 2141
    - 2147
    - 2174
    - 2202
    - 2218
    - 2221
    - 2223
    - 2225
    - 2226
    - 2231
    - 2233
    - 2236
    - 2238
    - 2239
    - 2244
    - 2254
    - 2256
    - 2261
    - 2277
    - 2278
    - 2306
    - 2310
    - 2316
    - 2338
    - 2339
    - 2367
    - 2368
    - 2375
    - 2387
    - 2389
    - 2406
    - 2412
  independently: !ruby/object:Word
    word: independently
    stem: independ
    docFrequency: 3.0
    docPositions:
    - 96
    - 1578
  body: !ruby/object:Word
    word: body
    stem: bodi
    docFrequency: 3.0
    docPositions:
    - 96
    - 1578
  '': !ruby/object:Word
    word: ''
    stem: ''
    docFrequency: 42.0
    docPositions:
    - 97
    - 299
    - 305
    - 311
    - 318
    - 360
    - 366
    - 393
    - 422
    - 553
    - 609
    - 651
    - 694
    - 745
    - 806
    - 917
    - 925
    - 944
    - 953
    - 981
    - 991
    - 999
    - 1006
    - 1011
    - 1049
    - 1078
    - 1082
    - 1098
    - 1116
    - 1157
    - 1340
    - 1409
    - 1478
    - 1579
    - 1793
    - 1885
    - 2095
    - 2284
    - 2298
    - 2445
    - 2489
  program: !ruby/object:Word
    word: program
    stem: program
    docFrequency: 33.0
    docPositions:
    - 97
    - 262
    - 292
    - 303
    - 308
    - 309
    - 311
    - 313
    - 323
    - 330
    - 381
    - 817
    - 833
    - 1352
    - 1364
    - 1579
    - 1687
    - 1707
    - 1716
    - 1719
    - 1720
    - 1722
    - 1730
    - 1735
    - 1768
    - 2104
    - 2118
    - 2453
    - 2461
  museums: !ruby/object:Word
    word: museums
    stem: museum
    docFrequency: 3.0
    docPositions:
    - 98
    - 1580
  extend: !ruby/object:Word
    word: extend
    stem: extend
    docFrequency: 3.0
    docPositions:
    - 98
    - 1580
  embrace: !ruby/object:Word
    word: embrace
    stem: embrac
    docFrequency: 3.0
    docPositions:
    - 98
    - 1580
  abstract: !ruby/object:Word
    word: abstract
    stem: abstract
    docFrequency: 3.0
    docPositions:
    - 98
    - 1580
  few: !ruby/object:Word
    word: few
    stem: few
    docFrequency: 7.0
    docPositions:
    - 100
    - 393
    - 839
    - 1580
    - 1774
    - 2120
  many: !ruby/object:Word
    word: many
    stem: mani
    docFrequency: 33.0
    docPositions:
    - 100
    - 103
    - 448
    - 464
    - 553
    - 574
    - 605
    - 788
    - 847
    - 918
    - 970
    - 1082
    - 1187
    - 1294
    - 1447
    - 1460
    - 1580
    - 1583
    - 1811
    - 1821
    - 1885
    - 1903
    - 1930
    - 2081
    - 2126
    - 2180
    - 2214
    - 2286
    - 2350
    - 2412
    - 2512
    - 2523
  rewarding: !ruby/object:Word
    word: rewarding
    stem: reward
    docFrequency: 3.0
    docPositions:
    - 100
    - 1580
  speculations: !ruby/object:Word
    word: speculations
    stem: specul
    docFrequency: 3.0
    docPositions:
    - 100
    - 1580
  stimulated: !ruby/object:Word
    word: stimulated
    stem: stimul
    docFrequency: 3.0
    docPositions:
    - 100
    - 1580
  broken: !ruby/object:Word
    word: broken
    stem: broken
    docFrequency: 5.0
    docPositions:
    - 101
    - 1408
    - 1581
    - 2488
  ground: !ruby/object:Word
    word: ground
    stem: ground
    docFrequency: 9.0
    docPositions:
    - 101
    - 531
    - 722
    - 894
    - 1581
    - 1870
    - 2029
    - 2162
  terms: !ruby/object:Word
    word: terms
    stem: term
    docFrequency: 3.0
    docPositions:
    - 102
    - 1582
  accomplishments: !ruby/object:Word
    word: accomplishments
    stem: accomplish
    docFrequency: 3.0
    docPositions:
    - 102
    - 1582
  saluted: !ruby/object:Word
    word: saluted
    stem: salut
    docFrequency: 3.0
    docPositions:
    - 103
    - 1583
  indebted: !ruby/object:Word
    word: indebted
    stem: indebt
    docFrequency: 3.0
    docPositions:
    - 103
    - 1583
  members: !ruby/object:Word
    word: members
    stem: member
    docFrequency: 23.0
    docPositions:
    - 103
    - 874
    - 1219
    - 1359
    - 1381
    - 1395
    - 1459
    - 1466
    - 1471
    - 1478
    - 1481
    - 1516
    - 1583
    - 2147
    - 2360
    - 2458
    - 2469
    - 2479
    - 2522
    - 2524
    - 2527
    - 2530
  generosity: !ruby/object:Word
    word: generosity
    stem: generos
    docFrequency: 3.0
    docPositions:
    - 104
    - 1584
  cherishes: !ruby/object:Word
    word: cherishes
    stem: cherish
    docFrequency: 3.0
    docPositions:
    - 105
    - 1585
  relationship: !ruby/object:Word
    word: relationship
    stem: relationship
    docFrequency: 5.0
    docPositions:
    - 105
    - 763
    - 1585
    - 2060
  vigorous: !ruby/object:Word
    word: vigorous
    stem: vigor
    docFrequency: 3.0
    docPositions:
    - 105
    - 1585
  unconventional: !ruby/object:Word
    word: unconventional
    stem: unconvent
    docFrequency: 3.0
    docPositions:
    - 106
    - 1586
  organisation: !ruby/object:Word
    word: organisation
    stem: organis
    docFrequency: 5.0
    docPositions:
    - 106
    - 460
    - 1586
    - 1819
  looks: !ruby/object:Word
    word: looks
    stem: look
    docFrequency: 5.0
    docPositions:
    - 106
    - 653
    - 1586
    - 1969
  forward: !ruby/object:Word
    word: forward
    stem: forward
    docFrequency: 5.0
    docPositions:
    - 106
    - 186
    - 1586
    - 1635
  building: !ruby/object:Word
    word: building
    stem: build
    docFrequency: 9.0
    docPositions:
    - 106
    - 116
    - 670
    - 923
    - 1586
    - 1592
    - 1985
    - 2185
  successes: !ruby/object:Word
    word: successes
    stem: success
    docFrequency: 3.0
    docPositions:
    - 107
    - 1587
  progressing: !ruby/object:Word
    word: progressing
    stem: progress
    docFrequency: 3.0
    docPositions:
    - 107
    - 1587
  coming: !ruby/object:Word
    word: coming
    stem: come
    docFrequency: 7.0
    docPositions:
    - 108
    - 752
    - 1467
    - 1588
    - 2049
    - 2525
  years: !ruby/object:Word
    word: years
    stem: year
    docFrequency: 8.0
    docPositions:
    - 108
    - 297
    - 665
    - 847
    - 1712
    - 1980
    - 2126
  spent: !ruby/object:Word
    word: spent
    stem: spent
    docFrequency: 15.0
    docPositions:
    - 112
    - 250
    - 302
    - 419
    - 803
    - 1332
    - 1339
    - 1588
    - 1677
    - 1715
    - 1790
    - 2092
    - 2439
    - 2444
  lot: !ruby/object:Word
    word: lot
    stem: lot
    docFrequency: 13.0
    docPositions:
    - 112
    - 299
    - 465
    - 481
    - 1218
    - 1432
    - 1588
    - 1712
    - 1822
    - 1832
    - 2359
    - 2501
  term: !ruby/object:Word
    word: term
    stem: term
    docFrequency: 3.0
    docPositions:
    - 112
    - 1588
  future: !ruby/object:Word
    word: future
    stem: futur
    docFrequency: 9.0
    docPositions:
    - 113
    - 157
    - 1029
    - 1589
    - 1621
    - 2253
  anything: !ruby/object:Word
    word: anything
    stem: anyth
    docFrequency: 13.0
    docPositions:
    - 114
    - 385
    - 417
    - 619
    - 632
    - 663
    - 1590
    - 1770
    - 1788
    - 1940
    - 1953
    - 1978
  secure: !ruby/object:Word
    word: secure
    stem: secur
    docFrequency: 5.0
    docPositions:
    - 114
    - 119
    - 1590
    - 1593
  premises: !ruby/object:Word
    word: premises
    stem: premis
    docFrequency: 3.0
    docPositions:
    - 114
    - 1590
  already: !ruby/object:Word
    word: already
    stem: alreadi
    docFrequency: 13.0
    docPositions:
    - 115
    - 345
    - 690
    - 919
    - 950
    - 1308
    - 1591
    - 1744
    - 2003
    - 2181
    - 2202
    - 2426
  too: !ruby/object:Word
    word: too
    stem: too
    docFrequency: 7.0
    docPositions:
    - 115
    - 483
    - 1325
    - 1591
    - 1834
    - 2436
  small: !ruby/object:Word
    word: small
    stem: small
    docFrequency: 27.0
    docPositions:
    - 115
    - 126
    - 286
    - 460
    - 482
    - 484
    - 636
    - 713
    - 865
    - 1060
    - 1152
    - 1271
    - 1306
    - 1591
    - 1598
    - 1703
    - 1819
    - 1833
    - 1835
    - 1955
    - 2020
    - 2142
    - 2274
    - 2330
    - 2393
    - 2424
  any: !ruby/object:Word
    word: any
    stem: ani
    docFrequency: 19.0
    docPositions:
    - 116
    - 519
    - 571
    - 1085
    - 1225
    - 1240
    - 1273
    - 1364
    - 1398
    - 1592
    - 1860
    - 1902
    - 2289
    - 2364
    - 2373
    - 2395
    - 2461
    - 2482
  event: !ruby/object:Word
    word: event
    stem: event
    docFrequency: 4.0
    docPositions:
    - 116
    - 178
    - 1592
  under: !ruby/object:Word
    word: under
    stem: under
    docFrequency: 5.0
    docPositions:
    - 116
    - 243
    - 1592
    - 1672
  threat: !ruby/object:Word
    word: threat
    stem: threat
    docFrequency: 3.0
    docPositions:
    - 116
    - 1592
  re: !ruby/object:Word
    word: re
    stem: re
    docFrequency: 11.0
    docPositions:
    - 117
    - 127
    - 376
    - 424
    - 1593
    - 1599
    - 1765
    - 1795
  unique: !ruby/object:Word
    word: unique
    stem: uniqu
    docFrequency: 5.0
    docPositions:
    - 119
    - 514
    - 1593
    - 1855
  arose: !ruby/object:Word
    word: arose
    stem: aros
    docFrequency: 5.0
    docPositions:
    - 119
    - 390
    - 1593
    - 1773
  appropriate: !ruby/object:Word
    word: appropriate
    stem: appropri
    docFrequency: 9.0
    docPositions:
    - 120
    - 133
    - 884
    - 1236
    - 1594
    - 1603
    - 2155
    - 2371
  developed: !ruby/object:Word
    word: developed
    stem: develop
    docFrequency: 11.0
    docPositions:
    - 122
    - 167
    - 709
    - 892
    - 906
    - 1596
    - 1625
    - 2016
    - 2160
    - 2170
  used: !ruby/object:Word
    word: used
    stem: us
    docFrequency: 69.0
    docPositions:
    - 122
    - 128
    - 129
    - 136
    - 258
    - 386
    - 511
    - 527
    - 600
    - 672
    - 678
    - 754
    - 778
    - 790
    - 793
    - 851
    - 853
    - 929
    - 991
    - 995
    - 999
    - 1004
    - 1013
    - 1035
    - 1059
    - 1065
    - 1110
    - 1129
    - 1254
    - 1295
    - 1297
    - 1300
    - 1355
    - 1451
    - 1596
    - 1600
    - 1601
    - 1606
    - 1683
    - 1771
    - 1854
    - 1866
    - 1925
    - 1987
    - 1993
    - 2051
    - 2073
    - 2083
    - 2084
    - 2130
    - 2132
    - 2189
    - 2227
    - 2231
    - 2233
    - 2238
    - 2243
    - 2257
    - 2273
    - 2277
    - 2306
    - 2317
    - 2383
    - 2413
    - 2415
    - 2418
    - 2456
    - 2516
  during: !ruby/object:Word
    word: during
    stem: dure
    docFrequency: 7.0
    docPositions:
    - 122
    - 411
    - 1220
    - 1596
    - 1784
    - 2361
  ii: !ruby/object:Word
    word: ii
    stem: ii
    docFrequency: 3.0
    docPositions:
    - 122
    - 1596
  currently: !ruby/object:Word
    word: currently
    stem: current
    docFrequency: 9.0
    docPositions:
    - 124
    - 140
    - 146
    - 1442
    - 1596
    - 1610
    - 1614
    - 2509
  still: !ruby/object:Word
    word: still
    stem: still
    docFrequency: 13.0
    docPositions:
    - 124
    - 202
    - 543
    - 822
    - 983
    - 1237
    - 1596
    - 1645
    - 1875
    - 2109
    - 2223
    - 2372
  largely: !ruby/object:Word
    word: largely
    stem: larg
    docFrequency: 3.0
    docPositions:
    - 124
    - 1596
  owned: !ruby/object:Word
    word: owned
    stem: own
    docFrequency: 3.0
    docPositions:
    - 124
    - 1596
  government: !ruby/object:Word
    word: government
    stem: govern
    docFrequency: 7.0
    docPositions:
    - 125
    - 472
    - 473
    - 1597
    - 1827
    - 1828
  represented: !ruby/object:Word
    word: represented
    stem: repres
    docFrequency: 3.0
    docPositions:
    - 125
    - 1597
  property: !ruby/object:Word
    word: property
    stem: properti
    docFrequency: 3.0
    docPositions:
    - 125
    - 1597
  holdings: !ruby/object:Word
    word: holdings
    stem: hold
    docFrequency: 3.0
    docPositions:
    - 125
    - 1597
  remaining: !ruby/object:Word
    word: remaining
    stem: remain
    docFrequency: 3.0
    docPositions:
    - 126
    - 1598
  part: !ruby/object:Word
    word: part
    stem: part
    docFrequency: 17.0
    docPositions:
    - 126
    - 136
    - 151
    - 646
    - 667
    - 721
    - 774
    - 1514
    - 1598
    - 1606
    - 1617
    - 1965
    - 1982
    - 2028
    - 2069
    - 2543
  belonging: !ruby/object:Word
    word: belonging
    stem: belong
    docFrequency: 3.0
    docPositions:
    - 126
    - 1598
  british: !ruby/object:Word
    word: british
    stem: british
    docFrequency: 8.0
    docPositions:
    - 126
    - 1487
    - 1491
    - 1520
    - 1598
    - 2531
    - 2533
  telecom: !ruby/object:Word
    word: telecom
    stem: telecom
    docFrequency: 3.0
    docPositions:
    - 126
    - 1598
  organisations: !ruby/object:Word
    word: organisations
    stem: organis
    docFrequency: 3.0
    docPositions:
    - 127
    - 1599
  planning: !ruby/object:Word
    word: planning
    stem: plan
    docFrequency: 5.0
    docPositions:
    - 127
    - 1181
    - 1599
    - 2346
  sell: !ruby/object:Word
    word: sell
    stem: sell
    docFrequency: 5.0
    docPositions:
    - 127
    - 1101
    - 1599
    - 2301
  including: !ruby/object:Word
    word: including
    stem: includ
    docFrequency: 13.0
    docPositions:
    - 128
    - 486
    - 788
    - 826
    - 1093
    - 1228
    - 1600
    - 1837
    - 2081
    - 2113
    - 2295
    - 2365
  huts: !ruby/object:Word
    word: huts
    stem: hut
    docFrequency: 9.0
    docPositions:
    - 128
    - 135
    - 136
    - 139
    - 1600
    - 1605
    - 1606
    - 1609
  breakers: !ruby/object:Word
    word: breakers
    stem: breaker
    docFrequency: 3.0
    docPositions:
    - 128
    - 1600
  buildings: !ruby/object:Word
    word: buildings
    stem: build
    docFrequency: 5.0
    docPositions:
    - 129
    - 140
    - 1601
    - 1610
  house: !ruby/object:Word
    word: house
    stem: hous
    docFrequency: 5.0
    docPositions:
    - 129
    - 137
    - 1601
    - 1607
  teleprinters: !ruby/object:Word
    word: teleprinters
    stem: teleprint
    docFrequency: 5.0
    docPositions:
    - 129
    - 1257
    - 1601
    - 2386
  joined: !ruby/object:Word
    word: joined
    stem: join
    docFrequency: 17.0
    docPositions:
    - 132
    - 241
    - 290
    - 351
    - 459
    - 461
    - 510
    - 926
    - 1602
    - 1670
    - 1707
    - 1748
    - 1818
    - 1820
    - 1853
    - 2186
  forces: !ruby/object:Word
    word: forces
    stem: forc
    docFrequency: 3.0
    docPositions:
    - 132
    - 1602
  archaeological: !ruby/object:Word
    word: archaeological
    stem: archaeolog
    docFrequency: 3.0
    docPositions:
    - 132
    - 1602
  lobby: !ruby/object:Word
    word: lobby
    stem: lobbi
    docFrequency: 3.0
    docPositions:
    - 133
    - 1603
  local: !ruby/object:Word
    word: local
    stem: local
    docFrequency: 5.0
    docPositions:
    - 133
    - 1169
    - 1603
    - 2341
  authority: !ruby/object:Word
    word: authority
    stem: author
    docFrequency: 5.0
    docPositions:
    - 133
    - 141
    - 1603
    - 1611
  milton: !ruby/object:Word
    word: milton
    stem: milton
    docFrequency: 5.0
    docPositions:
    - 133
    - 144
    - 1603
    - 1612
  keynes: !ruby/object:Word
    word: keynes
    stem: keyn
    docFrequency: 5.0
    docPositions:
    - 134
    - 144
    - 1604
    - 1612
  support: !ruby/object:Word
    word: support
    stem: support
    docFrequency: 7.0
    docPositions:
    - 134
    - 835
    - 1140
    - 1604
    - 2118
    - 2322
  preserving: !ruby/object:Word
    word: preserving
    stem: preserv
    docFrequency: 3.0
    docPositions:
    - 134
    - 1604
  own: !ruby/object:Word
    word: own
    stem: own
    docFrequency: 21.0
    docPositions:
    - 135
    - 228
    - 321
    - 334
    - 390
    - 673
    - 755
    - 1307
    - 1358
    - 1605
    - 1663
    - 1728
    - 1737
    - 1773
    - 1988
    - 2052
    - 2425
    - 2457
  proposed: !ruby/object:Word
    word: proposed
    stem: propos
    docFrequency: 10.0
    docPositions:
    - 135
    - 137
    - 180
    - 602
    - 745
    - 1605
    - 1607
    - 1927
    - 2043
  includes: !ruby/object:Word
    word: includes
    stem: includ
    docFrequency: 5.0
    docPositions:
    - 136
    - 1313
    - 1606
    - 2429
  should: !ruby/object:Word
    word: should
    stem: should
    docFrequency: 23.0
    docPositions:
    - 136
    - 203
    - 219
    - 306
    - 312
    - 318
    - 1256
    - 1393
    - 1397
    - 1454
    - 1606
    - 1646
    - 1656
    - 1717
    - 1721
    - 1725
    - 2385
    - 2477
    - 2481
    - 2517
  covers: !ruby/object:Word
    word: covers
    stem: cover
    docFrequency: 3.0
    docPositions:
    - 138
    - 1608
  four: !ruby/object:Word
    word: four
    stem: four
    docFrequency: 18.0
    docPositions:
    - 138
    - 335
    - 783
    - 995
    - 1039
    - 1113
    - 1142
    - 1179
    - 1518
    - 1608
    - 1738
    - 2076
    - 2231
    - 2259
    - 2309
    - 2324
    - 2346
  acres: !ruby/object:Word
    word: acres
    stem: acr
    docFrequency: 3.0
    docPositions:
    - 138
    - 1608
  contains: !ruby/object:Word
    word: contains
    stem: contain
    docFrequency: 3.0
    docPositions:
    - 138
    - 1608
  square: !ruby/object:Word
    word: square
    stem: squar
    docFrequency: 7.0
    docPositions:
    - 138
    - 139
    - 1054
    - 1608
    - 1609
    - 2270
  feet: !ruby/object:Word
    word: feet
    stem: feet
    docFrequency: 5.0
    docPositions:
    - 138
    - 139
    - 1608
    - 1609
  space: !ruby/object:Word
    word: space
    stem: space
    docFrequency: 11.0
    docPositions:
    - 139
    - 333
    - 669
    - 677
    - 783
    - 1609
    - 1736
    - 1984
    - 1992
    - 2076
  leased: !ruby/object:Word
    word: leased
    stem: leas
    docFrequency: 3.0
    docPositions:
    - 140
    - 1610
  civil: !ruby/object:Word
    word: civil
    stem: civil
    docFrequency: 5.0
    docPositions:
    - 140
    - 476
    - 1610
    - 1829
  aviation: !ruby/object:Word
    word: aviation
    stem: aviat
    docFrequency: 3.0
    docPositions:
    - 141
    - 1611
  i: !ruby/object:Word
    word: i
    stem: i
    docFrequency: 165.0
    docPositions:
    - 143
    - 155
    - 196
    - 200
    - 339
    - 408
    - 411
    - 413
    - 415
    - 417
    - 418
    - 419
    - 422
    - 423
    - 427
    - 428
    - 429
    - 442
    - 453
    - 454
    - 455
    - 472
    - 473
    - 476
    - 478
    - 480
    - 489
    - 495
    - 510
    - 518
    - 519
    - 550
    - 609
    - 610
    - 629
    - 661
    - 671
    - 695
    - 696
    - 790
    - 813
    - 814
    - 815
    - 818
    - 823
    - 824
    - 825
    - 828
    - 886
    - 887
    - 911
    - 925
    - 933
    - 937
    - 941
    - 946
    - 949
    - 954
    - 963
    - 965
    - 974
    - 981
    - 987
    - 1129
    - 1189
    - 1215
    - 1222
    - 1244
    - 1272
    - 1273
    - 1304
    - 1305
    - 1329
    - 1374
    - 1442
    - 1458
    - 1611
    - 1619
    - 1641
    - 1643
    - 1740
    - 1784
    - 1786
    - 1788
    - 1789
    - 1790
    - 1793
    - 1794
    - 1796
    - 1797
    - 1798
    - 1807
    - 1814
    - 1815
    - 1816
    - 1827
    - 1828
    - 1829
    - 1831
    - 1838
    - 1842
    - 1853
    - 1859
    - 1860
    - 1882
    - 1931
    - 1932
    - 1950
    - 1976
    - 1986
    - 2005
    - 2006
    - 2083
    - 2100
    - 2101
    - 2102
    - 2105
    - 2110
    - 2111
    - 2112
    - 2115
    - 2157
    - 2175
    - 2185
    - 2191
    - 2193
    - 2197
    - 2200
    - 2201
    - 2204
    - 2211
    - 2213
    - 2216
    - 2221
    - 2225
    - 2317
    - 2352
    - 2356
    - 2361
    - 2377
    - 2394
    - 2395
    - 2422
    - 2423
    - 2438
    - 2464
    - 2509
    - 2521
  am: !ruby/object:Word
    word: am
    stem: am
    docFrequency: 15.0
    docPositions:
    - 143
    - 155
    - 661
    - 1275
    - 1442
    - 1458
    - 1466
    - 1611
    - 1619
    - 1976
    - 2397
    - 2509
    - 2521
    - 2524
  glad: !ruby/object:Word
    word: glad
    stem: glad
    docFrequency: 3.0
    docPositions:
    - 143
    - 1611
  say: !ruby/object:Word
    word: say
    stem: sai
    docFrequency: 5.0
    docPositions:
    - 143
    - 1348
    - 1611
    - 2451
  successful: !ruby/object:Word
    word: successful
    stem: success
    docFrequency: 3.0
    docPositions:
    - 143
    - 1611
  set: !ruby/object:Word
    word: set
    stem: set
    docFrequency: 17.0
    docPositions:
    - 144
    - 285
    - 686
    - 913
    - 927
    - 1346
    - 1419
    - 1423
    - 1612
    - 1702
    - 1999
    - 2177
    - 2187
    - 2449
    - 2495
    - 2497
  trust: !ruby/object:Word
    word: trust
    stem: trust
    docFrequency: 9.0
    docPositions:
    - 145
    - 146
    - 148
    - 154
    - 1613
    - 1614
    - 1618
  seedcorn: !ruby/object:Word
    word: seedcorn
    stem: seedcorn
    docFrequency: 3.0
    docPositions:
    - 145
    - 1613
  start: !ruby/object:Word
    word: start
    stem: start
    docFrequency: 17.0
    docPositions:
    - 145
    - 307
    - 486
    - 945
    - 1117
    - 1230
    - 1466
    - 1474
    - 1613
    - 1718
    - 1837
    - 2199
    - 2311
    - 2367
    - 2524
    - 2530
  fund: !ruby/object:Word
    word: fund
    stem: fund
    docFrequency: 5.0
    docPositions:
    - 145
    - 922
    - 1613
    - 2184
  raising: !ruby/object:Word
    word: raising
    stem: rais
    docFrequency: 3.0
    docPositions:
    - 146
    - 1614
  funds: !ruby/object:Word
    word: funds
    stem: fund
    docFrequency: 3.0
    docPositions:
    - 146
    - 1614
  steering: !ruby/object:Word
    word: steering
    stem: steer
    docFrequency: 3.0
    docPositions:
    - 148
    - 1614
  produced: !ruby/object:Word
    word: produced
    stem: produc
    docFrequency: 21.0
    docPositions:
    - 148
    - 199
    - 219
    - 268
    - 346
    - 500
    - 1096
    - 1275
    - 1416
    - 1436
    - 1614
    - 1642
    - 1656
    - 1691
    - 1745
    - 1845
    - 2296
    - 2397
    - 2492
    - 2505
  outline: !ruby/object:Word
    word: outline
    stem: outlin
    docFrequency: 7.0
    docPositions:
    - 149
    - 251
    - 352
    - 1615
    - 1678
    - 1749
  business: !ruby/object:Word
    word: business
    stem: busi
    docFrequency: 9.0
    docPositions:
    - 149
    - 844
    - 848
    - 1197
    - 1615
    - 2125
    - 2127
    - 2354
  plan: !ruby/object:Word
    word: plan
    stem: plan
    docFrequency: 5.0
    docPositions:
    - 149
    - 1302
    - 1615
    - 2420
  involves: !ruby/object:Word
    word: involves
    stem: involv
    docFrequency: 3.0
    docPositions:
    - 149
    - 1615
  turning: !ruby/object:Word
    word: turning
    stem: turn
    docFrequency: 5.0
    docPositions:
    - 149
    - 191
    - 1615
    - 1638
  whole: !ruby/object:Word
    word: whole
    stem: whole
    docFrequency: 3.0
    docPositions:
    - 149
    - 1615
  into: !ruby/object:Word
    word: into
    stem: into
    docFrequency: 35.0
    docPositions:
    - 150
    - 167
    - 186
    - 253
    - 322
    - 400
    - 473
    - 556
    - 603
    - 674
    - 697
    - 831
    - 875
    - 1188
    - 1197
    - 1296
    - 1387
    - 1616
    - 1625
    - 1635
    - 1680
    - 1729
    - 1779
    - 1828
    - 1887
    - 1928
    - 1989
    - 2007
    - 2116
    - 2148
    - 2351
    - 2354
    - 2414
    - 2473
  theme: !ruby/object:Word
    word: theme
    stem: theme
    docFrequency: 5.0
    docPositions:
    - 150
    - 151
    - 1616
    - 1617
  campus: !ruby/object:Word
    word: campus
    stem: campu
    docFrequency: 3.0
    docPositions:
    - 151
    - 1617
  form: !ruby/object:Word
    word: form
    stem: form
    docFrequency: 7.0
    docPositions:
    - 151
    - 667
    - 1062
    - 1617
    - 1982
    - 2274
  income: !ruby/object:Word
    word: income
    stem: incom
    docFrequency: 3.0
    docPositions:
    - 151
    - 1617
  provide: !ruby/object:Word
    word: provide
    stem: provid
    docFrequency: 5.0
    docPositions:
    - 152
    - 1013
    - 1618
    - 2243
  funding: !ruby/object:Word
    word: funding
    stem: fund
    docFrequency: 3.0
    docPositions:
    - 152
    - 1618
  way: !ruby/object:Word
    word: way
    stem: wai
    docFrequency: 15.0
    docPositions:
    - 154
    - 370
    - 515
    - 519
    - 908
    - 918
    - 1298
    - 1618
    - 1761
    - 1856
    - 1860
    - 2172
    - 2180
    - 2416
  go: !ruby/object:Word
    word: go
    stem: go
    docFrequency: 11.0
    docPositions:
    - 154
    - 196
    - 222
    - 258
    - 306
    - 1618
    - 1641
    - 1659
    - 1683
    - 1717
  yet: !ruby/object:Word
    word: yet
    stem: yet
    docFrequency: 3.0
    docPositions:
    - 154
    - 1618
  needs: !ruby/object:Word
    word: needs
    stem: need
    docFrequency: 3.0
    docPositions:
    - 154
    - 1618
  raise: !ruby/object:Word
    word: raise
    stem: rais
    docFrequency: 3.0
    docPositions:
    - 154
    - 1618
  million: !ruby/object:Word
    word: million
    stem: million
    docFrequency: 9.0
    docPositions:
    - 155
    - 664
    - 1076
    - 1100
    - 1619
    - 1979
    - 2282
    - 2300
  purchase: !ruby/object:Word
    word: purchase
    stem: purchas
    docFrequency: 3.0
    docPositions:
    - 155
    - 1619
  nonetheless: !ruby/object:Word
    word: nonetheless
    stem: nonetheless
    docFrequency: 3.0
    docPositions:
    - 155
    - 1619
  hopeful: !ruby/object:Word
    word: hopeful
    stem: hope
    docFrequency: 3.0
    docPositions:
    - 155
    - 1619
  project: !ruby/object:Word
    word: project
    stem: project
    docFrequency: 21.0
    docPositions:
    - 156
    - 244
    - 265
    - 275
    - 664
    - 703
    - 719
    - 726
    - 920
    - 1074
    - 1620
    - 1673
    - 1688
    - 1696
    - 1979
    - 2012
    - 2026
    - 2031
    - 2182
    - 2280
  succeed: !ruby/object:Word
    word: succeed
    stem: succe
    docFrequency: 3.0
    docPositions:
    - 156
    - 1620
  remove: !ruby/object:Word
    word: remove
    stem: remov
    docFrequency: 5.0
    docPositions:
    - 156
    - 894
    - 1620
    - 2162
  uncertainty: !ruby/object:Word
    word: uncertainty
    stem: uncertainti
    docFrequency: 3.0
    docPositions:
    - 156
    - 1620
  hanging: !ruby/object:Word
    word: hanging
    stem: hang
    docFrequency: 3.0
    docPositions:
    - 157
    - 1621
  public: !ruby/object:Word
    word: public
    stem: public
    docFrequency: 5.0
    docPositions:
    - 161
    - 1302
    - 1621
    - 2420
  implementation: !ruby/object:Word
    word: implementation
    stem: implement
    docFrequency: 5.0
    docPositions:
    - 161
    - 236
    - 1621
    - 1667
  created: !ruby/object:Word
    word: created
    stem: creat
    docFrequency: 12.0
    docPositions:
    - 161
    - 180
    - 373
    - 433
    - 493
    - 720
    - 1621
    - 1762
    - 1800
    - 1842
    - 2027
  january: !ruby/object:Word
    word: january
    stem: januari
    docFrequency: 3.0
    docPositions:
    - 162
    - 1622
  thirtieth: !ruby/object:Word
    word: thirtieth
    stem: thirtieth
    docFrequency: 3.0
    docPositions:
    - 162
    - 1622
  anniversary: !ruby/object:Word
    word: anniversary
    stem: anniversari
    docFrequency: 3.0
    docPositions:
    - 162
    - 1622
  language: !ruby/object:Word
    word: language
    stem: languag
    docFrequency: 31.0
    docPositions:
    - 162
    - 169
    - 171
    - 179
    - 180
    - 197
    - 200
    - 203
    - 208
    - 252
    - 256
    - 277
    - 289
    - 348
    - 1148
    - 1622
    - 1627
    - 1629
    - 1642
    - 1643
    - 1646
    - 1649
    - 1679
    - 1681
    - 1698
    - 1706
    - 1747
    - 2328
  therefore: !ruby/object:Word
    word: therefore
    stem: therefor
    docFrequency: 15.0
    docPositions:
    - 163
    - 582
    - 658
    - 679
    - 765
    - 979
    - 1285
    - 1623
    - 1911
    - 1974
    - 1994
    - 2062
    - 2221
    - 2405
  took: !ruby/object:Word
    word: took
    stem: took
    docFrequency: 23.0
    docPositions:
    - 163
    - 186
    - 191
    - 719
    - 932
    - 936
    - 977
    - 1016
    - 1054
    - 1322
    - 1403
    - 1623
    - 1635
    - 1638
    - 2026
    - 2190
    - 2192
    - 2219
    - 2246
    - 2270
    - 2433
    - 2485
  place: !ruby/object:Word
    word: place
    stem: place
    docFrequency: 9.0
    docPositions:
    - 163
    - 424
    - 872
    - 1473
    - 1623
    - 1795
    - 2145
    - 2529
  commemorate: !ruby/object:Word
    word: commemorate
    stem: commemor
    docFrequency: 3.0
    docPositions:
    - 163
    - 1623
  occasion: !ruby/object:Word
    word: occasion
    stem: occas
    docFrequency: 3.0
    docPositions:
    - 163
    - 1623
  held: !ruby/object:Word
    word: held
    stem: held
    docFrequency: 5.0
    docPositions:
    - 164
    - 877
    - 1624
    - 2150
  afternoon: !ruby/object:Word
    word: afternoon
    stem: afternoon
    docFrequency: 3.0
    docPositions:
    - 164
    - 1624
  meeting: !ruby/object:Word
    word: meeting
    stem: meet
    docFrequency: 17.0
    docPositions:
    - 164
    - 166
    - 218
    - 220
    - 235
    - 470
    - 889
    - 1398
    - 1624
    - 1655
    - 1657
    - 1666
    - 1825
    - 2157
    - 2482
  concentrated: !ruby/object:Word
    word: concentrated
    stem: concentr
    docFrequency: 3.0
    docPositions:
    - 166
    - 1624
  came: !ruby/object:Word
    word: came
    stem: came
    docFrequency: 11.0
    docPositions:
    - 166
    - 332
    - 335
    - 441
    - 1000
    - 1624
    - 1735
    - 1738
    - 1806
    - 2234
  compilers: !ruby/object:Word
    word: compilers
    stem: compil
    docFrequency: 8.0
    docPositions:
    - 167
    - 180
    - 237
    - 364
    - 1625
    - 1668
    - 1757
  chaired: !ruby/object:Word
    word: chaired
    stem: chair
    docFrequency: 3.0
    docPositions:
    - 168
    - 1626
  mike: !ruby/object:Word
    word: mike
    stem: mike
    docFrequency: 3.0
    docPositions:
    - 168
    - 1626
  woodger: !ruby/object:Word
    word: woodger
    stem: woodger
    docFrequency: 9.0
    docPositions:
    - 168
    - 170
    - 181
    - 185
    - 1626
    - 1628
    - 1632
    - 1634
  member: !ruby/object:Word
    word: member
    stem: member
    docFrequency: 7.0
    docPositions:
    - 168
    - 1240
    - 1253
    - 1626
    - 2373
    - 2382
  committees: !ruby/object:Word
    word: committees
    stem: committe
    docFrequency: 3.0
    docPositions:
    - 168
    - 1626
  responsible: !ruby/object:Word
    word: responsible
    stem: respons
    docFrequency: 5.0
    docPositions:
    - 169
    - 646
    - 1627
    - 1965
  defining: !ruby/object:Word
    word: defining
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 169
    - 1627
  gave: !ruby/object:Word
    word: gave
    stem: gave
    docFrequency: 13.0
    docPositions:
    - 170
    - 343
    - 656
    - 658
    - 739
    - 970
    - 1628
    - 1742
    - 1972
    - 1974
    - 2040
    - 2214
  scene: !ruby/object:Word
    word: scene
    stem: scene
    docFrequency: 3.0
    docPositions:
    - 170
    - 1628
  talk: !ruby/object:Word
    word: talk
    stem: talk
    docFrequency: 5.0
    docPositions:
    - 170
    - 533
    - 1628
    - 1870
  describing: !ruby/object:Word
    word: describing
    stem: describ
    docFrequency: 7.0
    docPositions:
    - 170
    - 344
    - 973
    - 1628
    - 1743
    - 2215
  creation: !ruby/object:Word
    word: creation
    stem: creation
    docFrequency: 3.0
    docPositions:
    - 170
    - 1628
  broadly: !ruby/object:Word
    word: broadly
    stem: broadli
    docFrequency: 3.0
    docPositions:
    - 173
    - 1629
  speaking: !ruby/object:Word
    word: speaking
    stem: speak
    docFrequency: 3.0
    docPositions:
    - 173
    - 1629
  emerged: !ruby/object:Word
    word: emerged
    stem: emerg
    docFrequency: 5.0
    docPositions:
    - 173
    - 1027
    - 1629
    - 2251
  independent: !ruby/object:Word
    word: independent
    stem: independ
    docFrequency: 9.0
    docPositions:
    - 174
    - 330
    - 379
    - 825
    - 1630
    - 1735
    - 1766
    - 2112
  groups: !ruby/object:Word
    word: groups
    stem: group
    docFrequency: 5.0
    docPositions:
    - 174
    - 1458
    - 1630
    - 2521
  gamm: !ruby/object:Word
    word: gamm
    stem: gamm
    docFrequency: 7.0
    docPositions:
    - 174
    - 178
    - 179
    - 1630
  subcommittee: !ruby/object:Word
    word: subcommittee
    stem: subcommitte
    docFrequency: 5.0
    docPositions:
    - 174
    - 178
    - 179
    - 1630
  europe: !ruby/object:Word
    word: europe
    stem: europ
    docFrequency: 3.0
    docPositions:
    - 174
    - 1630
  acm: !ruby/object:Word
    word: acm
    stem: acm
    docFrequency: 7.0
    docPositions:
    - 175
    - 179
    - 1631
  america: !ruby/object:Word
    word: america
    stem: america
    docFrequency: 3.0
    docPositions:
    - 175
    - 1631
  major: !ruby/object:Word
    word: major
    stem: major
    docFrequency: 21.0
    docPositions:
    - 175
    - 374
    - 1074
    - 1234
    - 1261
    - 1304
    - 1322
    - 1381
    - 1388
    - 1408
    - 1631
    - 1763
    - 2280
    - 2369
    - 2388
    - 2422
    - 2433
    - 2469
    - 2474
    - 2488
  steps: !ruby/object:Word
    word: steps
    stem: step
    docFrequency: 3.0
    docPositions:
    - 175
    - 1631
  process: !ruby/object:Word
    word: process
    stem: process
    docFrequency: 13.0
    docPositions:
    - 175
    - 301
    - 308
    - 327
    - 563
    - 1413
    - 1631
    - 1714
    - 1719
    - 1732
    - 1894
    - 2491
  listed: !ruby/object:Word
    word: listed
    stem: list
    docFrequency: 3.0
    docPositions:
    - 175
    - 1631
  following: !ruby/object:Word
    word: following
    stem: follow
    docFrequency: 11.0
    docPositions:
    - 176
    - 461
    - 925
    - 1141
    - 1198
    - 1632
    - 1820
    - 2185
    - 2323
    - 2355
  table: !ruby/object:Word
    word: table
    stem: tabl
    docFrequency: 3.0
    docPositions:
    - 176
    - 1632
  date: !ruby/object:Word
    word: date
    stem: date
    docFrequency: 2.0
    docPositions:
    - 178
  oct: !ruby/object:Word
    word: oct
    stem: oct
    docFrequency: 5.0
    docPositions:
    - 178
    - 179
    - 180
  programming: !ruby/object:Word
    word: programming
    stem: program
    docFrequency: 13.0
    docPositions:
    - 178
    - 179
    - 192
    - 208
    - 288
    - 348
    - 580
    - 1639
    - 1649
    - 1705
    - 1747
    - 1909
  languages: !ruby/object:Word
    word: languages
    stem: languag
    docFrequency: 8.0
    docPositions:
    - 179
    - 192
    - 204
    - 353
    - 1639
    - 1647
    - 1750
  formed: !ruby/object:Word
    word: formed
    stem: form
    docFrequency: 14.0
    docPositions:
    - 179
    - 214
    - 289
    - 540
    - 549
    - 593
    - 841
    - 1653
    - 1706
    - 1872
    - 1881
    - 1920
    - 2122
  appointed: !ruby/object:Word
    word: appointed
    stem: appoint
    docFrequency: 2.0
    docPositions:
    - 179
  specify: !ruby/object:Word
    word: specify
    stem: specifi
    docFrequency: 2.0
    docPositions:
    - 179
  universal: !ruby/object:Word
    word: universal
    stem: univers
    docFrequency: 2.0
    docPositions:
    - 179
  design: !ruby/object:Word
    word: design
    stem: design
    docFrequency: 41.0
    docPositions:
    - 179
    - 255
    - 284
    - 305
    - 344
    - 352
    - 360
    - 361
    - 385
    - 593
    - 603
    - 645
    - 669
    - 684
    - 764
    - 813
    - 822
    - 876
    - 1141
    - 1284
    - 1519
    - 1680
    - 1701
    - 1716
    - 1743
    - 1749
    - 1753
    - 1754
    - 1770
    - 1920
    - 1928
    - 1964
    - 1984
    - 1997
    - 2061
    - 2100
    - 2109
    - 2149
    - 2323
    - 2404
  finished: !ruby/object:Word
    word: finished
    stem: finish
    docFrequency: 6.0
    docPositions:
    - 179
    - 274
    - 1183
    - 1695
    - 2348
  letter: !ruby/object:Word
    word: letter
    stem: letter
    docFrequency: 2.0
    docPositions:
    - 179
  sent: !ruby/object:Word
    word: sent
    stem: sent
    docFrequency: 4.0
    docPositions:
    - 179
    - 478
    - 1831
  suggesting: !ruby/object:Word
    word: suggesting
    stem: suggest
    docFrequency: 2.0
    docPositions:
    - 179
  joint: !ruby/object:Word
    word: joint
    stem: joint
    docFrequency: 7.0
    docPositions:
    - 179
    - 1141
    - 1404
    - 2323
    - 2486
  conference: !ruby/object:Word
    word: conference
    stem: confer
    docFrequency: 6.0
    docPositions:
    - 179
    - 245
    - 287
    - 1674
    - 1704
  apr: !ruby/object:Word
    word: apr
    stem: apr
    docFrequency: 2.0
    docPositions:
    - 179
  proposal: !ruby/object:Word
    word: proposal
    stem: propos
    docFrequency: 4.0
    docPositions:
    - 179
    - 1336
    - 2443
  presented: !ruby/object:Word
    word: presented
    stem: present
    docFrequency: 6.0
    docPositions:
    - 179
    - 284
    - 714
    - 1701
    - 2021
  may: !ruby/object:Word
    word: may
    stem: mai
    docFrequency: 12.0
    docPositions:
    - 179
    - 877
    - 1279
    - 1316
    - 1508
    - 2150
    - 2399
    - 2432
    - 2539
  proposals: !ruby/object:Word
    word: proposals
    stem: propos
    docFrequency: 6.0
    docPositions:
    - 179
    - 200
    - 222
    - 1643
    - 1659
  made: !ruby/object:Word
    word: made
    stem: made
    docFrequency: 34.0
    docPositions:
    - 179
    - 211
    - 244
    - 255
    - 305
    - 311
    - 316
    - 329
    - 672
    - 731
    - 991
    - 1216
    - 1238
    - 1294
    - 1332
    - 1411
    - 1508
    - 1650
    - 1673
    - 1680
    - 1716
    - 1720
    - 1725
    - 1734
    - 1987
    - 2034
    - 2227
    - 2357
    - 2373
    - 2412
    - 2439
    - 2489
    - 2539
  later: !ruby/object:Word
    word: later
    stem: later
    docFrequency: 16.0
    docPositions:
    - 180
    - 293
    - 442
    - 480
    - 497
    - 677
    - 794
    - 1077
    - 1708
    - 1807
    - 1831
    - 1844
    - 1992
    - 2085
    - 2283
  called: !ruby/object:Word
    word: called
    stem: call
    docFrequency: 18.0
    docPositions:
    - 180
    - 321
    - 440
    - 442
    - 484
    - 765
    - 915
    - 963
    - 1002
    - 1728
    - 1805
    - 1807
    - 1835
    - 2062
    - 2179
    - 2211
    - 2236
  ial: !ruby/object:Word
    word: ial
    stem: ial
    docFrequency: 2.0
    docPositions:
    - 180
  name: !ruby/object:Word
    word: name
    stem: name
    docFrequency: 6.0
    docPositions:
    - 180
    - 445
    - 1187
    - 1810
    - 2350
  nov: !ruby/object:Word
    word: nov
    stem: nov
    docFrequency: 2.0
    docPositions:
    - 180
  reported: !ruby/object:Word
    word: reported
    stem: report
    docFrequency: 4.0
    docPositions:
    - 180
    - 1215
    - 2356
  jan: !ruby/object:Word
    word: jan
    stem: jan
    docFrequency: 2.0
    docPositions:
    - 180
  paris: !ruby/object:Word
    word: paris
    stem: pari
    docFrequency: 2.0
    docPositions:
    - 180
  dijkstra: !ruby/object:Word
    word: dijkstra
    stem: dijkstra
    docFrequency: 8.0
    docPositions:
    - 180
    - 249
    - 251
    - 287
    - 1676
    - 1678
    - 1704
  zonnefeld: !ruby/object:Word
    word: zonnefeld
    stem: zonnefeld
    docFrequency: 2.0
    docPositions:
    - 180
  produce: !ruby/object:Word
    word: produce
    stem: produc
    docFrequency: 10.0
    docPositions:
    - 180
    - 243
    - 703
    - 754
    - 785
    - 1672
    - 2012
    - 2051
    - 2078
  translator: !ruby/object:Word
    word: translator
    stem: translat
    docFrequency: 2.0
    docPositions:
    - 181
  ran: !ruby/object:Word
    word: ran
    stem: ran
    docFrequency: 9.0
    docPositions:
    - 181
    - 402
    - 725
    - 1449
    - 1632
    - 1781
    - 2030
    - 2514
  genesis: !ruby/object:Word
    word: genesis
    stem: genesi
    docFrequency: 3.0
    docPositions:
    - 181
    - 1632
  ideas: !ruby/object:Word
    word: ideas
    stem: idea
    docFrequency: 11.0
    docPositions:
    - 181
    - 362
    - 465
    - 549
    - 1082
    - 1632
    - 1755
    - 1822
    - 1881
    - 2286
  concepts: !ruby/object:Word
    word: concepts
    stem: concept
    docFrequency: 3.0
    docPositions:
    - 182
    - 1633
  expression: !ruby/object:Word
    word: expression
    stem: express
    docFrequency: 3.0
    docPositions:
    - 182
    - 1633
  implementations: !ruby/object:Word
    word: implementations
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 182
    - 1633
  starting: !ruby/object:Word
    word: starting
    stem: start
    docFrequency: 5.0
    docPositions:
    - 183
    - 273
    - 1634
    - 1694
  followed: !ruby/object:Word
    word: followed
    stem: follow
    docFrequency: 7.0
    docPositions:
    - 185
    - 969
    - 1024
    - 1634
    - 2213
    - 2248
  rostrum: !ruby/object:Word
    word: rostrum
    stem: rostrum
    docFrequency: 7.0
    docPositions:
    - 185
    - 969
    - 1104
    - 1634
    - 2213
    - 2302
  david: !ruby/object:Word
    word: david
    stem: david
    docFrequency: 3.0
    docPositions:
    - 185
    - 1634
  hill: !ruby/object:Word
    word: hill
    stem: hill
    docFrequency: 9.0
    docPositions:
    - 185
    - 195
    - 210
    - 211
    - 1634
    - 1640
    - 1649
    - 1650
  medical: !ruby/object:Word
    word: medical
    stem: medic
    docFrequency: 5.0
    docPositions:
    - 186
    - 1295
    - 1635
    - 2413
  research: !ruby/object:Word
    word: research
    stem: research
    docFrequency: 12.0
    docPositions:
    - 186
    - 471
    - 632
    - 842
    - 1296
    - 1501
    - 1635
    - 1826
    - 1953
    - 2123
    - 2414
  council: !ruby/object:Word
    word: council
    stem: council
    docFrequency: 3.0
    docPositions:
    - 186
    - 1635
  story: !ruby/object:Word
    word: story
    stem: stori
    docFrequency: 3.0
    docPositions:
    - 186
    - 1635
  seventies: !ruby/object:Word
    word: seventies
    stem: seventi
    docFrequency: 3.0
    docPositions:
    - 187
    - 1636
  account: !ruby/object:Word
    word: account
    stem: account
    docFrequency: 5.0
    docPositions:
    - 187
    - 860
    - 1636
    - 2137
  subsequent: !ruby/object:Word
    word: subsequent
    stem: subsequ
    docFrequency: 9.0
    docPositions:
    - 187
    - 788
    - 802
    - 821
    - 1636
    - 2081
    - 2091
    - 2108
  standardising: !ruby/object:Word
    word: standardising
    stem: standardis
    docFrequency: 3.0
    docPositions:
    - 187
    - 1636
  ifip: !ruby/object:Word
    word: ifip
    stem: ifip
    docFrequency: 17.0
    docPositions:
    - 188
    - 190
    - 214
    - 222
    - 226
    - 232
    - 346
    - 1637
    - 1653
    - 1659
    - 1661
    - 1665
    - 1745
  iso: !ruby/object:Word
    word: iso
    stem: iso
    docFrequency: 21.0
    docPositions:
    - 188
    - 190
    - 191
    - 193
    - 195
    - 201
    - 207
    - 218
    - 219
    - 220
    - 1637
    - 1638
    - 1640
    - 1644
    - 1648
    - 1655
    - 1656
    - 1657
  entered: !ruby/object:Word
    word: entered
    stem: enter
    docFrequency: 3.0
    docPositions:
    - 190
    - 1637
  picture: !ruby/object:Word
    word: picture
    stem: pictur
    docFrequency: 3.0
    docPositions:
    - 190
    - 1637
  running: !ruby/object:Word
    word: running
    stem: run
    docFrequency: 15.0
    docPositions:
    - 191
    - 253
    - 674
    - 707
    - 708
    - 840
    - 1257
    - 1638
    - 1680
    - 1989
    - 2014
    - 2015
    - 2121
    - 2386
  attention: !ruby/object:Word
    word: attention
    stem: attent
    docFrequency: 3.0
    docPositions:
    - 192
    - 1639
  standardisation: !ruby/object:Word
    word: standardisation
    stem: standardis
    docFrequency: 3.0
    docPositions:
    - 192
    - 1639
  so: !ruby/object:Word
    word: so
    stem: so
    docFrequency: 75.0
    docPositions:
    - 193
    - 261
    - 267
    - 269
    - 275
    - 305
    - 312
    - 319
    - 381
    - 387
    - 441
    - 466
    - 473
    - 496
    - 501
    - 511
    - 643
    - 667
    - 677
    - 761
    - 854
    - 865
    - 903
    - 956
    - 978
    - 992
    - 1001
    - 1006
    - 1008
    - 1012
    - 1170
    - 1287
    - 1301
    - 1308
    - 1315
    - 1395
    - 1413
    - 1640
    - 1686
    - 1690
    - 1692
    - 1696
    - 1716
    - 1721
    - 1726
    - 1768
    - 1772
    - 1806
    - 1823
    - 1828
    - 1843
    - 1846
    - 1854
    - 1962
    - 1982
    - 1992
    - 2058
    - 2133
    - 2142
    - 2169
    - 2206
    - 2220
    - 2228
    - 2235
    - 2238
    - 2240
    - 2242
    - 2342
    - 2407
    - 2419
    - 2426
    - 2431
    - 2479
    - 2491
  submitted: !ruby/object:Word
    word: submitted
    stem: submit
    docFrequency: 3.0
    docPositions:
    - 193
    - 1640
  said: !ruby/object:Word
    word: said
    stem: said
    docFrequency: 17.0
    docPositions:
    - 195
    - 210
    - 418
    - 421
    - 478
    - 936
    - 1099
    - 1640
    - 1649
    - 1789
    - 1792
    - 1831
    - 2192
    - 2299
  decided: !ruby/object:Word
    word: decided
    stem: decid
    docFrequency: 13.0
    docPositions:
    - 195
    - 201
    - 258
    - 333
    - 366
    - 1047
    - 1640
    - 1644
    - 1683
    - 1736
    - 1757
    - 2265
  wasn: !ruby/object:Word
    word: wasn
    stem: wasn
    docFrequency: 9.0
    docPositions:
    - 195
    - 274
    - 486
    - 992
    - 1640
    - 1695
    - 1837
    - 2228
  t: !ruby/object:Word
    word: t
    stem: t
    docFrequency: 31.0
    docPositions:
    - 195
    - 274
    - 314
    - 369
    - 370
    - 371
    - 418
    - 464
    - 466
    - 477
    - 486
    - 571
    - 992
    - 994
    - 1640
    - 1695
    - 1723
    - 1760
    - 1761
    - 1762
    - 1789
    - 1821
    - 1823
    - 1830
    - 1837
    - 1902
    - 2228
    - 2230
  suitable: !ruby/object:Word
    word: suitable
    stem: suitabl
    docFrequency: 3.0
    docPositions:
    - 195
    - 1640
  stood: !ruby/object:Word
    word: stood
    stem: stood
    docFrequency: 3.0
    docPositions:
    - 196
    - 1641
  wanted: !ruby/object:Word
    word: wanted
    stem: want
    docFrequency: 9.0
    docPositions:
    - 196
    - 257
    - 312
    - 525
    - 1641
    - 1682
    - 1721
    - 1864
  subset: !ruby/object:Word
    word: subset
    stem: subset
    docFrequency: 5.0
    docPositions:
    - 196
    - 336
    - 1641
    - 1739
  some: !ruby/object:Word
    word: some
    stem: some
    docFrequency: 69.0
    docPositions:
    - 196
    - 227
    - 259
    - 261
    - 270
    - 271
    - 292
    - 396
    - 418
    - 469
    - 562
    - 577
    - 717
    - 800
    - 803
    - 808
    - 830
    - 875
    - 900
    - 946
    - 973
    - 1032
    - 1033
    - 1164
    - 1302
    - 1303
    - 1311
    - 1333
    - 1339
    - 1340
    - 1359
    - 1435
    - 1436
    - 1507
    - 1641
    - 1662
    - 1684
    - 1686
    - 1693
    - 1694
    - 1707
    - 1777
    - 1789
    - 1824
    - 1893
    - 1906
    - 2024
    - 2089
    - 2092
    - 2097
    - 2115
    - 2148
    - 2166
    - 2200
    - 2215
    - 2254
    - 2255
    - 2338
    - 2420
    - 2421
    - 2427
    - 2440
    - 2444
    - 2445
    - 2458
    - 2504
    - 2505
    - 2538
  o: !ruby/object:Word
    word: o
    stem: o
    docFrequency: 29.0
    docPositions:
    - 196
    - 200
    - 339
    - 671
    - 790
    - 813
    - 814
    - 815
    - 818
    - 823
    - 824
    - 825
    - 828
    - 1129
    - 1641
    - 1643
    - 1740
    - 1986
    - 2083
    - 2100
    - 2101
    - 2102
    - 2105
    - 2110
    - 2111
    - 2112
    - 2115
    - 2317
  standardised: !ruby/object:Word
    word: standardised
    stem: standardis
    docFrequency: 3.0
    docPositions:
    - 197
    - 1642
  hardware: !ruby/object:Word
    word: hardware
    stem: hardwar
    docFrequency: 11.0
    docPositions:
    - 197
    - 328
    - 642
    - 864
    - 878
    - 1642
    - 1733
    - 1961
    - 2141
    - 2151
  representation: !ruby/object:Word
    word: representation
    stem: represent
    docFrequency: 7.0
    docPositions:
    - 197
    - 329
    - 1350
    - 1642
    - 1734
    - 2451
  response: !ruby/object:Word
    word: response
    stem: respons
    docFrequency: 3.0
    docPositions:
    - 199
    - 1642
  three: !ruby/object:Word
    word: three
    stem: three
    docFrequency: 25.0
    docPositions:
    - 199
    - 214
    - 236
    - 237
    - 293
    - 403
    - 556
    - 575
    - 863
    - 1008
    - 1090
    - 1152
    - 1642
    - 1653
    - 1667
    - 1668
    - 1708
    - 1782
    - 1887
    - 1904
    - 2140
    - 2240
    - 2292
    - 2330
  subsets: !ruby/object:Word
    word: subsets
    stem: subset
    docFrequency: 3.0
    docPositions:
    - 199
    - 1642
  plus: !ruby/object:Word
    word: plus
    stem: plu
    docFrequency: 7.0
    docPositions:
    - 200
    - 227
    - 1261
    - 1643
    - 1662
    - 2388
  put: !ruby/object:Word
    word: put
    stem: put
    docFrequency: 15.0
    docPositions:
    - 200
    - 393
    - 394
    - 400
    - 1004
    - 1219
    - 1248
    - 1643
    - 1774
    - 1775
    - 1779
    - 2238
    - 2360
    - 2379
  together: !ruby/object:Word
    word: together
    stem: togeth
    docFrequency: 11.0
    docPositions:
    - 201
    - 213
    - 961
    - 983
    - 1032
    - 1644
    - 1652
    - 2209
    - 2223
    - 2254
  draft: !ruby/object:Word
    word: draft
    stem: draft
    docFrequency: 7.0
    docPositions:
    - 201
    - 206
    - 207
    - 1644
    - 1647
    - 1648
  recommendation: !ruby/object:Word
    word: recommendation
    stem: recommend
    docFrequency: 7.0
    docPositions:
    - 201
    - 207
    - 219
    - 1644
    - 1648
    - 1656
  call: !ruby/object:Word
    word: call
    stem: call
    docFrequency: 7.0
    docPositions:
    - 201
    - 376
    - 422
    - 1644
    - 1765
    - 1793
  standards: !ruby/object:Word
    word: standards
    stem: standard
    docFrequency: 5.0
    docPositions:
    - 202
    - 204
    - 1645
    - 1647
  because: !ruby/object:Word
    word: because
    stem: becaus
    docFrequency: 27.0
    docPositions:
    - 202
    - 400
    - 429
    - 431
    - 572
    - 577
    - 616
    - 737
    - 850
    - 999
    - 1035
    - 1065
    - 1645
    - 1779
    - 1798
    - 1800
    - 1903
    - 1906
    - 1937
    - 2038
    - 2129
    - 2233
    - 2257
    - 2277
  arguments: !ruby/object:Word
    word: arguments
    stem: argument
    docFrequency: 3.0
    docPositions:
    - 202
    - 1645
  whether: !ruby/object:Word
    word: whether
    stem: whether
    docFrequency: 7.0
    docPositions:
    - 203
    - 455
    - 736
    - 1646
    - 1816
    - 2037
  one: !ruby/object:Word
    word: one
    stem: 'on'
    docFrequency: 77.0
    docPositions:
    - 203
    - 280
    - 303
    - 345
    - 347
    - 357
    - 361
    - 366
    - 373
    - 374
    - 444
    - 483
    - 484
    - 551
    - 566
    - 591
    - 640
    - 648
    - 669
    - 684
    - 688
    - 746
    - 747
    - 813
    - 832
    - 930
    - 944
    - 974
    - 993
    - 1054
    - 1090
    - 1185
    - 1262
    - 1313
    - 1341
    - 1443
    - 1448
    - 1646
    - 1699
    - 1716
    - 1744
    - 1746
    - 1752
    - 1754
    - 1757
    - 1762
    - 1763
    - 1809
    - 1834
    - 1835
    - 1883
    - 1897
    - 1918
    - 1959
    - 1967
    - 1984
    - 1997
    - 2001
    - 2044
    - 2045
    - 2100
    - 2117
    - 2190
    - 2198
    - 2216
    - 2229
    - 2270
    - 2292
    - 2348
    - 2389
    - 2429
    - 2446
    - 2510
    - 2513
  standard: !ruby/object:Word
    word: standard
    stem: standard
    docFrequency: 13.0
    docPositions:
    - 203
    - 458
    - 518
    - 1280
    - 1333
    - 1425
    - 1646
    - 1817
    - 1859
    - 2400
    - 2440
    - 2499
  rather: !ruby/object:Word
    word: rather
    stem: rather
    docFrequency: 21.0
    docPositions:
    - 203
    - 396
    - 625
    - 676
    - 686
    - 799
    - 801
    - 1126
    - 1270
    - 1272
    - 1646
    - 1777
    - 1946
    - 1991
    - 1999
    - 2088
    - 2090
    - 2316
    - 2392
    - 2394
  than: !ruby/object:Word
    word: than
    stem: than
    docFrequency: 35.0
    docPositions:
    - 203
    - 396
    - 402
    - 403
    - 429
    - 617
    - 620
    - 625
    - 628
    - 632
    - 686
    - 784
    - 859
    - 964
    - 1029
    - 1126
    - 1434
    - 1646
    - 1777
    - 1781
    - 1782
    - 1798
    - 1938
    - 1941
    - 1946
    - 1949
    - 1953
    - 1999
    - 2077
    - 2136
    - 2212
    - 2253
    - 2316
    - 2503
  appeared: !ruby/object:Word
    word: appeared
    stem: appear
    docFrequency: 7.0
    docPositions:
    - 206
    - 208
    - 1433
    - 1647
    - 1649
    - 2502
  april: !ruby/object:Word
    word: april
    stem: april
    docFrequency: 5.0
    docPositions:
    - 206
    - 588
    - 1647
    - 1915
  march: !ruby/object:Word
    word: march
    stem: march
    docFrequency: 3.0
    docPositions:
    - 206
    - 1647
  before: !ruby/object:Word
    word: before
    stem: befor
    docFrequency: 19.0
    docPositions:
    - 206
    - 244
    - 282
    - 728
    - 933
    - 953
    - 1248
    - 1316
    - 1467
    - 1647
    - 1673
    - 1701
    - 2033
    - 2191
    - 2203
    - 2379
    - 2432
    - 2525
  scrutiny: !ruby/object:Word
    word: scrutiny
    stem: scrutini
    docFrequency: 3.0
    docPositions:
    - 207
    - 1648
  completed: !ruby/object:Word
    word: completed
    stem: complet
    docFrequency: 3.0
    docPositions:
    - 207
    - 1648
  'no': !ruby/object:Word
    word: 'no'
    stem: 'no'
    docFrequency: 21.0
    docPositions:
    - 208
    - 266
    - 501
    - 617
    - 662
    - 791
    - 800
    - 1087
    - 1165
    - 1398
    - 1649
    - 1689
    - 1846
    - 1938
    - 1977
    - 2084
    - 2089
    - 2291
    - 2339
    - 2482
  absolute: !ruby/object:Word
    word: absolute
    stem: absolut
    docFrequency: 3.0
    docPositions:
    - 210
    - 1649
  disaster: !ruby/object:Word
    word: disaster
    stem: disast
    docFrequency: 5.0
    docPositions:
    - 210
    - 212
    - 1649
    - 1651
  full: !ruby/object:Word
    word: full
    stem: full
    docFrequency: 27.0
    docPositions:
    - 210
    - 312
    - 323
    - 481
    - 639
    - 761
    - 886
    - 922
    - 1049
    - 1269
    - 1300
    - 1387
    - 1419
    - 1649
    - 1721
    - 1730
    - 1832
    - 1958
    - 2058
    - 2157
    - 2184
    - 2265
    - 2391
    - 2418
    - 2473
    - 2495
  errors: !ruby/object:Word
    word: errors
    stem: error
    docFrequency: 5.0
    docPositions:
    - 210
    - 220
    - 1649
    - 1657
  changes: !ruby/object:Word
    word: changes
    stem: chang
    docFrequency: 5.0
    docPositions:
    - 211
    - 1403
    - 1650
    - 2485
  had: !ruby/object:Word
    word: had
    stem: had
    docFrequency: 121.0
    docPositions:
    - 211
    - 217
    - 228
    - 231
    - 266
    - 267
    - 277
    - 278
    - 347
    - 379
    - 381
    - 382
    - 428
    - 448
    - 453
    - 481
    - 485
    - 497
    - 506
    - 528
    - 605
    - 610
    - 630
    - 636
    - 647
    - 673
    - 675
    - 703
    - 762
    - 763
    - 782
    - 799
    - 830
    - 833
    - 914
    - 920
    - 938
    - 954
    - 996
    - 1007
    - 1011
    - 1027
    - 1049
    - 1050
    - 1051
    - 1062
    - 1121
    - 1124
    - 1141
    - 1169
    - 1187
    - 1241
    - 1247
    - 1254
    - 1325
    - 1374
    - 1401
    - 1408
    - 1434
    - 1650
    - 1654
    - 1663
    - 1664
    - 1689
    - 1690
    - 1698
    - 1699
    - 1746
    - 1766
    - 1768
    - 1769
    - 1797
    - 1811
    - 1814
    - 1832
    - 1836
    - 1844
    - 1849
    - 1867
    - 1930
    - 1932
    - 1951
    - 1955
    - 1966
    - 1988
    - 1990
    - 2012
    - 2059
    - 2060
    - 2075
    - 2088
    - 2115
    - 2118
    - 2178
    - 2182
    - 2194
    - 2204
    - 2232
    - 2239
    - 2241
    - 2251
    - 2265
    - 2266
    - 2267
    - 2274
    - 2313
    - 2314
    - 2323
    - 2341
    - 2350
    - 2374
    - 2378
    - 2383
    - 2436
    - 2464
    - 2483
    - 2488
    - 2503
  without: !ruby/object:Word
    word: without
    stem: without
    docFrequency: 3.0
    docPositions:
    - 211
    - 1650
  consultation: !ruby/object:Word
    word: consultation
    stem: consult
    docFrequency: 3.0
    docPositions:
    - 211
    - 1650
  himself: !ruby/object:Word
    word: himself
    stem: himself
    docFrequency: 3.0
    docPositions:
    - 212
    - 1651
  instrumental: !ruby/object:Word
    word: instrumental
    stem: instrument
    docFrequency: 3.0
    docPositions:
    - 212
    - 1651
  rectifying: !ruby/object:Word
    word: rectifying
    stem: rectifi
    docFrequency: 3.0
    docPositions:
    - 212
    - 1651
  richard: !ruby/object:Word
    word: richard
    stem: richard
    docFrequency: 5.0
    docPositions:
    - 213
    - 343
    - 1652
    - 1742
  de: !ruby/object:Word
    word: de
    stem: de
    docFrequency: 15.0
    docPositions:
    - 213
    - 281
    - 343
    - 345
    - 351
    - 356
    - 379
    - 1652
    - 1700
    - 1742
    - 1744
    - 1748
    - 1751
    - 1766
  morgan: !ruby/object:Word
    word: morgan
    stem: morgan
    docFrequency: 13.0
    docPositions:
    - 213
    - 343
    - 345
    - 351
    - 356
    - 379
    - 1652
    - 1742
    - 1744
    - 1748
    - 1751
    - 1766
  brian: !ruby/object:Word
    word: brian
    stem: brian
    docFrequency: 5.0
    docPositions:
    - 213
    - 242
    - 1652
    - 1671
  wichman: !ruby/object:Word
    word: wichman
    stem: wichman
    docFrequency: 3.0
    docPositions:
    - 213
    - 1652
  sub: !ruby/object:Word
    word: sub
    stem: sub
    docFrequency: 17.0
    docPositions:
    - 214
    - 217
    - 222
    - 226
    - 346
    - 786
    - 1053
    - 1455
    - 1653
    - 1654
    - 1659
    - 1661
    - 1745
    - 2079
    - 2269
    - 2518
  consider: !ruby/object:Word
    word: consider
    stem: consid
    docFrequency: 5.0
    docPositions:
    - 214
    - 589
    - 1653
    - 1916
  revisions: !ruby/object:Word
    word: revisions
    stem: revis
    docFrequency: 3.0
    docPositions:
    - 215
    - 1654
  sources: !ruby/object:Word
    word: sources
    stem: sourc
    docFrequency: 5.0
    docPositions:
    - 217
    - 223
    - 1654
    - 1660
  draw: !ruby/object:Word
    word: draw
    stem: draw
    docFrequency: 3.0
    docPositions:
    - 217
    - 1654
  agreed: !ruby/object:Word
    word: agreed
    stem: agre
    docFrequency: 5.0
    docPositions:
    - 218
    - 232
    - 1655
    - 1665
  edition: !ruby/object:Word
    word: edition
    stem: edit
    docFrequency: 3.0
    docPositions:
    - 218
    - 1655
  delegates: !ruby/object:Word
    word: delegates
    stem: deleg
    docFrequency: 5.0
    docPositions:
    - 219
    - 1074
    - 1656
    - 2280
  drew: !ruby/object:Word
    word: drew
    stem: drew
    docFrequency: 5.0
    docPositions:
    - 220
    - 221
    - 1657
    - 1658
  list: !ruby/object:Word
    word: list
    stem: list
    docFrequency: 5.0
    docPositions:
    - 220
    - 221
    - 1657
    - 1658
  earlier: !ruby/object:Word
    word: earlier
    stem: earlier
    docFrequency: 5.0
    docPositions:
    - 220
    - 347
    - 1657
    - 1746
  document: !ruby/object:Word
    word: document
    stem: document
    docFrequency: 3.0
    docPositions:
    - 221
    - 1658
  questions: !ruby/object:Word
    word: questions
    stem: question
    docFrequency: 7.0
    docPositions:
    - 221
    - 228
    - 390
    - 1658
    - 1663
    - 1773
  ought: !ruby/object:Word
    word: ought
    stem: ought
    docFrequency: 9.0
    docPositions:
    - 221
    - 363
    - 397
    - 471
    - 1658
    - 1756
    - 1778
    - 1826
  german: !ruby/object:Word
    word: german
    stem: german
    docFrequency: 3.0
    docPositions:
    - 223
    - 1660
  japanese: !ruby/object:Word
    word: japanese
    stem: japanes
    docFrequency: 3.0
    docPositions:
    - 223
    - 1660
  published: !ruby/object:Word
    word: published
    stem: publish
    docFrequency: 3.0
    docPositions:
    - 223
    - 1660
  papers: !ruby/object:Word
    word: papers
    stem: paper
    docFrequency: 7.0
    docPositions:
    - 224
    - 464
    - 467
    - 1661
    - 1821
    - 1824
  specialists: !ruby/object:Word
    word: specialists
    stem: specialist
    docFrequency: 3.0
    docPositions:
    - 224
    - 1661
  finally: !ruby/object:Word
    word: finally
    stem: final
    docFrequency: 6.0
    docPositions:
    - 226
    - 836
    - 1134
    - 1661
    - 2119
  left: !ruby/object:Word
    word: left
    stem: left
    docFrequency: 3.0
    docPositions:
    - 226
    - 1661
  difficulties: !ruby/object:Word
    word: difficulties
    stem: difficulti
    docFrequency: 5.0
    docPositions:
    - 227
    - 231
    - 1662
    - 1664
  unsettled: !ruby/object:Word
    word: unsettled
    stem: unsettl
    docFrequency: 3.0
    docPositions:
    - 227
    - 1662
  points: !ruby/object:Word
    word: points
    stem: point
    docFrequency: 3.0
    docPositions:
    - 228
    - 1663
  make: !ruby/object:Word
    word: make
    stem: make
    docFrequency: 15.0
    docPositions:
    - 228
    - 288
    - 645
    - 673
    - 908
    - 1034
    - 1299
    - 1663
    - 1705
    - 1964
    - 1988
    - 2172
    - 2256
    - 2417
  decisions: !ruby/object:Word
    word: decisions
    stem: decis
    docFrequency: 9.0
    docPositions:
    - 229
    - 255
    - 305
    - 593
    - 1664
    - 1680
    - 1716
    - 1920
  once: !ruby/object:Word
    word: once
    stem: onc
    docFrequency: 11.0
    docPositions:
    - 231
    - 319
    - 495
    - 511
    - 1472
    - 1664
    - 1726
    - 1842
    - 1854
    - 2528
  resolved: !ruby/object:Word
    word: resolved
    stem: resolv
    docFrequency: 5.0
    docPositions:
    - 231
    - 391
    - 1664
    - 1774
  maintenance: !ruby/object:Word
    word: maintenance
    stem: mainten
    docFrequency: 9.0
    docPositions:
    - 231
    - 704
    - 978
    - 1099
    - 1664
    - 2013
    - 2220
    - 2299
  subsequently: !ruby/object:Word
    word: subsequently
    stem: subsequ
    docFrequency: 9.0
    docPositions:
    - 233
    - 775
    - 923
    - 1288
    - 1666
    - 2070
    - 2185
    - 2408
  became: !ruby/object:Word
    word: became
    stem: becam
    docFrequency: 13.0
    docPositions:
    - 233
    - 245
    - 508
    - 721
    - 774
    - 963
    - 1666
    - 1674
    - 1851
    - 2028
    - 2069
    - 2211
  known: !ruby/object:Word
    word: known
    stem: known
    docFrequency: 15.0
    docPositions:
    - 233
    - 720
    - 1136
    - 1185
    - 1188
    - 1194
    - 1328
    - 1666
    - 2027
    - 2320
    - 2348
    - 2351
    - 2353
    - 2437
  modified: !ruby/object:Word
    word: modified
    stem: modifi
    docFrequency: 7.0
    docPositions:
    - 233
    - 346
    - 835
    - 1666
    - 1745
    - 2118
  shifted: !ruby/object:Word
    word: shifted
    stem: shift
    docFrequency: 3.0
    docPositions:
    - 235
    - 1666
  specification: !ruby/object:Word
    word: specification
    stem: specif
    docFrequency: 9.0
    docPositions:
    - 236
    - 339
    - 932
    - 1105
    - 1667
    - 1740
    - 2190
    - 2303
  speakers: !ruby/object:Word
    word: speakers
    stem: speaker
    docFrequency: 3.0
    docPositions:
    - 237
    - 1668
  described: !ruby/object:Word
    word: described
    stem: describ
    docFrequency: 11.0
    docPositions:
    - 237
    - 285
    - 688
    - 879
    - 1374
    - 1668
    - 1702
    - 2001
    - 2152
    - 2464
  sixties: !ruby/object:Word
    word: sixties
    stem: sixti
    docFrequency: 5.0
    docPositions:
    - 238
    - 1136
    - 1669
    - 2320
  english: !ruby/object:Word
    word: english
    stem: english
    docFrequency: 7.0
    docPositions:
    - 238
    - 241
    - 257
    - 1669
    - 1670
    - 1682
  electric: !ruby/object:Word
    word: electric
    stem: electr
    docFrequency: 9.0
    docPositions:
    - 238
    - 241
    - 257
    - 1197
    - 1669
    - 1670
    - 1682
    - 2354
  decsystem: !ruby/object:Word
    word: decsystem
    stem: decsystem
    docFrequency: 7.0
    docPositions:
    - 239
    - 345
    - 353
    - 1670
    - 1744
    - 1750
  lawford: !ruby/object:Word
    word: lawford
    stem: lawford
    docFrequency: 3.0
    docPositions:
    - 241
    - 1670
  russell: !ruby/object:Word
    word: russell
    stem: russel
    docFrequency: 5.0
    docPositions:
    - 241
    - 255
    - 1670
    - 1680
  after: !ruby/object:Word
    word: after
    stem: after
    docFrequency: 27.0
    docPositions:
    - 241
    - 308
    - 391
    - 440
    - 441
    - 469
    - 526
    - 727
    - 728
    - 768
    - 905
    - 1236
    - 1432
    - 1670
    - 1719
    - 1774
    - 1805
    - 1806
    - 1824
    - 1865
    - 2032
    - 2033
    - 2065
    - 2169
    - 2371
    - 2501
  initial: !ruby/object:Word
    word: initial
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 242
    - 335
    - 1671
    - 1738
  deuce: !ruby/object:Word
    word: deuce
    stem: deuc
    docFrequency: 5.0
    docPositions:
    - 242
    - 259
    - 1671
    - 1684
  teamed: !ruby/object:Word
    word: teamed
    stem: team
    docFrequency: 3.0
    docPositions:
    - 242
    - 1671
  randall: !ruby/object:Word
    word: randall
    stem: randal
    docFrequency: 5.0
    docPositions:
    - 242
    - 255
    - 1671
    - 1680
  assembler: !ruby/object:Word
    word: assembler
    stem: assembl
    docFrequency: 3.0
    docPositions:
    - 243
    - 1672
  then: !ruby/object:Word
    word: then
    stem: then
    docFrequency: 47.0
    docPositions:
    - 243
    - 277
    - 278
    - 314
    - 323
    - 333
    - 353
    - 390
    - 421
    - 454
    - 478
    - 496
    - 568
    - 593
    - 714
    - 900
    - 936
    - 1056
    - 1216
    - 1290
    - 1332
    - 1386
    - 1442
    - 1672
    - 1698
    - 1699
    - 1723
    - 1730
    - 1736
    - 1750
    - 1773
    - 1792
    - 1815
    - 1831
    - 1843
    - 1899
    - 1920
    - 2021
    - 2166
    - 2192
    - 2270
    - 2357
    - 2410
    - 2439
    - 2472
    - 2509
  progress: !ruby/object:Word
    word: progress
    stem: progress
    docFrequency: 9.0
    docPositions:
    - 244
    - 1217
    - 1332
    - 1411
    - 1673
    - 2358
    - 2439
    - 2489
  men: !ruby/object:Word
    word: men
    stem: men
    docFrequency: 3.0
    docPositions:
    - 244
    - 1673
  went: !ruby/object:Word
    word: went
    stem: went
    docFrequency: 23.0
    docPositions:
    - 245
    - 286
    - 379
    - 413
    - 476
    - 674
    - 793
    - 979
    - 991
    - 994
    - 1013
    - 1674
    - 1703
    - 1766
    - 1786
    - 1829
    - 1989
    - 2084
    - 2221
    - 2227
    - 2230
    - 2243
  excited: !ruby/object:Word
    word: excited
    stem: excit
    docFrequency: 3.0
    docPositions:
    - 245
    - 1674
  deciding: !ruby/object:Word
    word: deciding
    stem: decid
    docFrequency: 3.0
    docPositions:
    - 248
    - 1675
  spot: !ruby/object:Word
    word: spot
    stem: spot
    docFrequency: 3.0
    docPositions:
    - 248
    - 1675
  must: !ruby/object:Word
    word: must
    stem: must
    docFrequency: 11.0
    docPositions:
    - 248
    - 562
    - 585
    - 622
    - 665
    - 1675
    - 1893
    - 1912
    - 1943
    - 1980
  implement: !ruby/object:Word
    word: implement
    stem: implement
    docFrequency: 9.0
    docPositions:
    - 248
    - 367
    - 369
    - 371
    - 1675
    - 1758
    - 1760
    - 1762
  approached: !ruby/object:Word
    word: approached
    stem: approach
    docFrequency: 3.0
    docPositions:
    - 249
    - 1676
  guru: !ruby/object:Word
    word: guru
    stem: guru
    docFrequency: 3.0
    docPositions:
    - 249
    - 1676
  edsger: !ruby/object:Word
    word: edsger
    stem: edsger
    docFrequency: 3.0
    docPositions:
    - 249
    - 1676
  advice: !ruby/object:Word
    word: advice
    stem: advic
    docFrequency: 3.0
    docPositions:
    - 249
    - 1676
  upshot: !ruby/object:Word
    word: upshot
    stem: upshot
    docFrequency: 3.0
    docPositions:
    - 250
    - 1677
  intensive: !ruby/object:Word
    word: intensive
    stem: intens
    docFrequency: 3.0
    docPositions:
    - 250
    - 1677
  weeks: !ruby/object:Word
    word: weeks
    stem: week
    docFrequency: 5.0
    docPositions:
    - 250
    - 769
    - 1677
    - 2066
  study: !ruby/object:Word
    word: study
    stem: studi
    docFrequency: 3.0
    docPositions:
    - 250
    - 1677
  holland: !ruby/object:Word
    word: holland
    stem: holland
    docFrequency: 3.0
    docPositions:
    - 251
    - 1678
  led: !ruby/object:Word
    word: led
    stem: led
    docFrequency: 7.0
    docPositions:
    - 251
    - 543
    - 668
    - 1678
    - 1875
    - 1983
  us: !ruby/object:Word
    word: us
    stem: us
    docFrequency: 39.0
    docPositions:
    - 251
    - 269
    - 597
    - 656
    - 658
    - 710
    - 712
    - 739
    - 740
    - 926
    - 940
    - 1199
    - 1388
    - 1395
    - 1403
    - 1432
    - 1435
    - 1444
    - 1447
    - 1678
    - 1692
    - 1922
    - 1972
    - 1974
    - 2017
    - 2019
    - 2040
    - 2041
    - 2186
    - 2196
    - 2356
    - 2474
    - 2479
    - 2485
    - 2501
    - 2504
    - 2511
    - 2512
  basic: !ruby/object:Word
    word: basic
    stem: basic
    docFrequency: 9.0
    docPositions:
    - 252
    - 354
    - 1034
    - 1164
    - 1679
    - 1751
    - 2256
    - 2338
  structure: !ruby/object:Word
    word: structure
    stem: structur
    docFrequency: 5.0
    docPositions:
    - 252
    - 1457
    - 1679
    - 2520
  intermediate: !ruby/object:Word
    word: intermediate
    stem: intermedi
    docFrequency: 5.0
    docPositions:
    - 252
    - 321
    - 1679
    - 1728
  transposed: !ruby/object:Word
    word: transposed
    stem: transpos
    docFrequency: 3.0
    docPositions:
    - 253
    - 1680
  important: !ruby/object:Word
    word: important
    stem: import
    docFrequency: 9.0
    docPositions:
    - 255
    - 469
    - 684
    - 1341
    - 1680
    - 1824
    - 1997
    - 2446
  would: !ruby/object:Word
    word: would
    stem: would
    docFrequency: 57.0
    docPositions:
    - 256
    - 260
    - 261
    - 266
    - 276
    - 313
    - 314
    - 336
    - 366
    - 422
    - 429
    - 490
    - 598
    - 633
    - 753
    - 855
    - 864
    - 958
    - 959
    - 1001
    - 1052
    - 1077
    - 1100
    - 1101
    - 1249
    - 1304
    - 1376
    - 1681
    - 1685
    - 1686
    - 1689
    - 1697
    - 1722
    - 1723
    - 1739
    - 1757
    - 1793
    - 1798
    - 1839
    - 1923
    - 1954
    - 2050
    - 2134
    - 2141
    - 2208
    - 2209
    - 2235
    - 2268
    - 2283
    - 2300
    - 2301
    - 2380
    - 2422
    - 2466
  interpretive: !ruby/object:Word
    word: interpretive
    stem: interpret
    docFrequency: 3.0
    docPositions:
    - 256
    - 1681
  users: !ruby/object:Word
    word: users
    stem: user
    docFrequency: 11.0
    docPositions:
    - 257
    - 300
    - 347
    - 385
    - 974
    - 1682
    - 1713
    - 1746
    - 1770
    - 2216
  division: !ruby/object:Word
    word: division
    stem: divis
    docFrequency: 7.0
    docPositions:
    - 257
    - 720
    - 1053
    - 1682
    - 2027
    - 2269
  single: !ruby/object:Word
    word: single
    stem: singl
    docFrequency: 17.0
    docPositions:
    - 258
    - 567
    - 568
    - 590
    - 612
    - 639
    - 641
    - 653
    - 1683
    - 1898
    - 1899
    - 1917
    - 1933
    - 1958
    - 1960
    - 1969
  pass: !ruby/object:Word
    word: pass
    stem: pass
    docFrequency: 9.0
    docPositions:
    - 258
    - 322
    - 366
    - 373
    - 1683
    - 1729
    - 1757
    - 1762
  translation: !ruby/object:Word
    word: translation
    stem: translat
    docFrequency: 5.0
    docPositions:
    - 258
    - 262
    - 1683
    - 1687
  allowed: !ruby/object:Word
    word: allowed
    stem: allow
    docFrequency: 7.0
    docPositions:
    - 259
    - 589
    - 945
    - 1684
    - 1916
    - 2199
  you: !ruby/object:Word
    word: you
    stem: you
    docFrequency: 65.0
    docPositions:
    - 259
    - 306
    - 376
    - 387
    - 397
    - 419
    - 420
    - 421
    - 422
    - 423
    - 424
    - 434
    - 435
    - 445
    - 465
    - 466
    - 467
    - 621
    - 622
    - 908
    - 983
    - 994
    - 1000
    - 1007
    - 1008
    - 1347
    - 1367
    - 1384
    - 1684
    - 1717
    - 1765
    - 1772
    - 1778
    - 1790
    - 1791
    - 1792
    - 1793
    - 1794
    - 1795
    - 1801
    - 1802
    - 1810
    - 1822
    - 1823
    - 1824
    - 1942
    - 1943
    - 2172
    - 2223
    - 2230
    - 2234
    - 2239
    - 2240
    - 2450
    - 2462
    - 2470
  do: !ruby/object:Word
    word: do
    stem: do
    docFrequency: 41.0
    docPositions:
    - 259
    - 261
    - 267
    - 361
    - 366
    - 376
    - 385
    - 412
    - 420
    - 421
    - 424
    - 428
    - 435
    - 507
    - 572
    - 619
    - 643
    - 825
    - 913
    - 1009
    - 1684
    - 1686
    - 1690
    - 1754
    - 1757
    - 1765
    - 1770
    - 1785
    - 1791
    - 1792
    - 1795
    - 1797
    - 1802
    - 1850
    - 1903
    - 1940
    - 1962
    - 2112
    - 2177
    - 2241
  processing: !ruby/object:Word
    word: processing
    stem: process
    docFrequency: 11.0
    docPositions:
    - 259
    - 262
    - 560
    - 857
    - 1199
    - 1684
    - 1687
    - 1891
    - 2136
    - 2356
  your: !ruby/object:Word
    word: your
    stem: your
    docFrequency: 7.0
    docPositions:
    - 260
    - 397
    - 564
    - 1685
    - 1778
    - 1895
  cards: !ruby/object:Word
    word: cards
    stem: card
    docFrequency: 3.0
    docPositions:
    - 260
    - 1685
  read: !ruby/object:Word
    word: read
    stem: read
    docFrequency: 9.0
    docPositions:
    - 260
    - 263
    - 318
    - 518
    - 1685
    - 1688
    - 1725
    - 1859
  faster: !ruby/object:Word
    word: faster
    stem: faster
    docFrequency: 7.0
    docPositions:
    - 261
    - 402
    - 403
    - 1686
    - 1781
    - 1782
  use: !ruby/object:Word
    word: use
    stem: us
    docFrequency: 47.0
    docPositions:
    - 261
    - 275
    - 690
    - 695
    - 757
    - 796
    - 814
    - 827
    - 845
    - 897
    - 945
    - 958
    - 1034
    - 1160
    - 1238
    - 1242
    - 1302
    - 1306
    - 1335
    - 1377
    - 1423
    - 1506
    - 1686
    - 1696
    - 2003
    - 2005
    - 2054
    - 2087
    - 2101
    - 2114
    - 2126
    - 2163
    - 2199
    - 2208
    - 2256
    - 2336
    - 2373
    - 2375
    - 2420
    - 2424
    - 2442
    - 2467
    - 2497
    - 2537
  paper: !ruby/object:Word
    word: paper
    stem: paper
    docFrequency: 13.0
    docPositions:
    - 261
    - 294
    - 1129
    - 1334
    - 1355
    - 1423
    - 1686
    - 1709
    - 2317
    - 2441
    - 2456
    - 2497
  tape: !ruby/object:Word
    word: tape
    stem: tape
    docFrequency: 17.0
    docPositions:
    - 261
    - 294
    - 1129
    - 1334
    - 1335
    - 1355
    - 1423
    - 1426
    - 1686
    - 1709
    - 2317
    - 2441
    - 2442
    - 2456
    - 2497
    - 2500
  surely: !ruby/object:Word
    word: surely
    stem: sure
    docFrequency: 3.0
    docPositions:
    - 261
    - 1686
  could: !ruby/object:Word
    word: could
    stem: could
    docFrequency: 53.0
    docPositions:
    - 261
    - 361
    - 367
    - 386
    - 387
    - 434
    - 435
    - 437
    - 510
    - 521
    - 530
    - 600
    - 667
    - 755
    - 785
    - 831
    - 897
    - 954
    - 993
    - 1008
    - 1084
    - 1124
    - 1248
    - 1289
    - 1290
    - 1348
    - 1686
    - 1754
    - 1758
    - 1771
    - 1772
    - 1801
    - 1802
    - 1804
    - 1853
    - 1862
    - 1869
    - 1925
    - 1982
    - 2052
    - 2078
    - 2116
    - 2163
    - 2204
    - 2229
    - 2240
    - 2288
    - 2314
    - 2379
    - 2409
    - 2410
    - 2451
  striking: !ruby/object:Word
    word: striking
    stem: strike
    docFrequency: 3.0
    docPositions:
    - 265
    - 1688
  aspect: !ruby/object:Word
    word: aspect
    stem: aspect
    docFrequency: 7.0
    docPositions:
    - 265
    - 684
    - 1157
    - 1688
    - 1997
    - 2333
  conditions: !ruby/object:Word
    word: conditions
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 265
    - 1688
  thought: !ruby/object:Word
    word: thought
    stem: thought
    docFrequency: 27.0
    docPositions:
    - 266
    - 275
    - 369
    - 391
    - 394
    - 483
    - 490
    - 515
    - 585
    - 666
    - 897
    - 1261
    - 1454
    - 1689
    - 1696
    - 1760
    - 1774
    - 1775
    - 1834
    - 1839
    - 1856
    - 1912
    - 1981
    - 2163
    - 2388
    - 2517
  impossibly: !ruby/object:Word
    word: impossibly
    stem: imposs
    docFrequency: 3.0
    docPositions:
    - 266
    - 1689
  primitive: !ruby/object:Word
    word: primitive
    stem: primit
    docFrequency: 5.0
    docPositions:
    - 266
    - 1194
    - 1689
    - 2353
  today: !ruby/object:Word
    word: today
    stem: todai
    docFrequency: 13.0
    docPositions:
    - 266
    - 822
    - 1076
    - 1078
    - 1100
    - 1111
    - 1689
    - 2109
    - 2282
    - 2284
    - 2300
    - 2307
  little: !ruby/object:Word
    word: little
    stem: littl
    docFrequency: 7.0
    docPositions:
    - 267
    - 453
    - 864
    - 1690
    - 1814
    - 2141
  information: !ruby/object:Word
    word: information
    stem: inform
    docFrequency: 9.0
    docPositions:
    - 267
    - 715
    - 1001
    - 1003
    - 1690
    - 2022
    - 2235
    - 2237
  lots: !ruby/object:Word
    word: lots
    stem: lot
    docFrequency: 7.0
    docPositions:
    - 268
    - 428
    - 1691
    - 1797
  desk: !ruby/object:Word
    word: desk
    stem: desk
    docFrequency: 7.0
    docPositions:
    - 268
    - 269
    - 278
    - 1691
    - 1692
    - 1699
  checking: !ruby/object:Word
    word: checking
    stem: check
    docFrequency: 7.0
    docPositions:
    - 268
    - 270
    - 382
    - 1691
    - 1693
    - 1769
  logic: !ruby/object:Word
    word: logic
    stem: logic
    docFrequency: 21.0
    docPositions:
    - 268
    - 270
    - 280
    - 687
    - 691
    - 845
    - 847
    - 1223
    - 1287
    - 1396
    - 1691
    - 1693
    - 1699
    - 2000
    - 2004
    - 2126
    - 2362
    - 2407
    - 2480
  flow: !ruby/object:Word
    word: flow
    stem: flow
    docFrequency: 11.0
    docPositions:
    - 268
    - 274
    - 277
    - 280
    - 698
    - 1691
    - 1695
    - 1698
    - 1699
    - 2008
  diagrams: !ruby/object:Word
    word: diagrams
    stem: diagram
    docFrequency: 9.0
    docPositions:
    - 269
    - 275
    - 277
    - 280
    - 1692
    - 1696
    - 1698
    - 1699
  just: !ruby/object:Word
    word: just
    stem: just
    docFrequency: 7.0
    docPositions:
    - 269
    - 293
    - 1011
    - 1692
    - 1708
    - 2241
  checked: !ruby/object:Word
    word: checked
    stem: check
    docFrequency: 3.0
    docPositions:
    - 269
    - 1692
  between: !ruby/object:Word
    word: between
    stem: between
    docFrequency: 13.0
    docPositions:
    - 269
    - 582
    - 672
    - 1070
    - 1437
    - 1487
    - 1692
    - 1911
    - 1987
    - 2278
    - 2506
    - 2531
  got: !ruby/object:Word
    word: got
    stem: got
    docFrequency: 23.0
    docPositions:
    - 270
    - 423
    - 445
    - 465
    - 481
    - 696
    - 899
    - 908
    - 1033
    - 1230
    - 1232
    - 1693
    - 1794
    - 1810
    - 1822
    - 1832
    - 2006
    - 2165
    - 2172
    - 2255
    - 2367
    - 2369
  ahead: !ruby/object:Word
    word: ahead
    stem: ahead
    docFrequency: 5.0
    docPositions:
    - 270
    - 950
    - 1693
    - 2202
  testing: !ruby/object:Word
    word: testing
    stem: test
    docFrequency: 5.0
    docPositions:
    - 270
    - 1339
    - 1693
    - 2444
  good: !ruby/object:Word
    word: good
    stem: good
    docFrequency: 11.0
    docPositions:
    - 271
    - 400
    - 486
    - 490
    - 1450
    - 1694
    - 1779
    - 1837
    - 1839
    - 2515
  bad: !ruby/object:Word
    word: bad
    stem: bad
    docFrequency: 5.0
    docPositions:
    - 271
    - 1404
    - 1694
    - 2486
  potential: !ruby/object:Word
    word: potential
    stem: potenti
    docFrequency: 9.0
    docPositions:
    - 273
    - 281
    - 1029
    - 1063
    - 1694
    - 1700
    - 2253
    - 2275
  customers: !ruby/object:Word
    word: customers
    stem: custom
    docFrequency: 5.0
    docPositions:
    - 273
    - 854
    - 1694
    - 2133
  asking: !ruby/object:Word
    word: asking
    stem: ask
    docFrequency: 9.0
    docPositions:
    - 273
    - 417
    - 420
    - 652
    - 1694
    - 1788
    - 1791
    - 1968
  copies: !ruby/object:Word
    word: copies
    stem: copi
    docFrequency: 6.0
    docPositions:
    - 274
    - 923
    - 1517
    - 1695
    - 2185
  compiler: !ruby/object:Word
    word: compiler
    stem: compil
    docFrequency: 35.0
    docPositions:
    - 274
    - 282
    - 284
    - 294
    - 307
    - 313
    - 319
    - 320
    - 326
    - 330
    - 341
    - 344
    - 352
    - 366
    - 373
    - 396
    - 399
    - 1695
    - 1701
    - 1709
    - 1718
    - 1722
    - 1726
    - 1727
    - 1731
    - 1735
    - 1742
    - 1743
    - 1749
    - 1757
    - 1762
    - 1777
    - 1778
  meant: !ruby/object:Word
    word: meant
    stem: meant
    docFrequency: 5.0
    docPositions:
    - 275
    - 578
    - 1696
    - 1907
  inter: !ruby/object:Word
    word: inter
    stem: inter
    docFrequency: 3.0
    docPositions:
    - 275
    - 1696
  need: !ruby/object:Word
    word: need
    stem: need
    docFrequency: 15.0
    docPositions:
    - 276
    - 300
    - 616
    - 624
    - 627
    - 628
    - 906
    - 1697
    - 1713
    - 1937
    - 1945
    - 1948
    - 1949
    - 2170
  define: !ruby/object:Word
    word: define
    stem: defin
    docFrequency: 5.0
    docPositions:
    - 276
    - 1011
    - 1697
    - 2241
  rigid: !ruby/object:Word
    word: rigid
    stem: rigid
    docFrequency: 3.0
    docPositions:
    - 276
    - 1697
  sort: !ruby/object:Word
    word: sort
    stem: sort
    docFrequency: 5.0
    docPositions:
    - 276
    - 492
    - 1697
    - 1841
  meta: !ruby/object:Word
    word: meta
    stem: meta
    docFrequency: 3.0
    docPositions:
    - 276
    - 1697
  convert: !ruby/object:Word
    word: convert
    stem: convert
    docFrequency: 3.0
    docPositions:
    - 277
    - 1698
  check: !ruby/object:Word
    word: check
    stem: check
    docFrequency: 3.0
    docPositions:
    - 278
    - 1699
  again: !ruby/object:Word
    word: again
    stem: again
    docFrequency: 13.0
    docPositions:
    - 278
    - 287
    - 512
    - 1277
    - 1375
    - 1377
    - 1699
    - 1704
    - 1855
    - 2399
    - 2465
    - 2467
  actually: !ruby/object:Word
    word: actually
    stem: actual
    docFrequency: 11.0
    docPositions:
    - 280
    - 422
    - 909
    - 953
    - 1155
    - 1699
    - 1793
    - 2173
    - 2203
    - 2333
  delivered: !ruby/object:Word
    word: delivered
    stem: deliv
    docFrequency: 3.0
    docPositions:
    - 280
    - 1699
  customer: !ruby/object:Word
    word: customer
    stem: custom
    docFrequency: 3.0
    docPositions:
    - 281
    - 1700
  havilland: !ruby/object:Word
    word: havilland
    stem: havilland
    docFrequency: 3.0
    docPositions:
    - 281
    - 1700
  case: !ruby/object:Word
    word: case
    stem: case
    docFrequency: 9.0
    docPositions:
    - 281
    - 579
    - 668
    - 1405
    - 1700
    - 1908
    - 1983
    - 2487
  copy: !ruby/object:Word
    word: copy
    stem: copi
    docFrequency: 3.0
    docPositions:
    - 281
    - 1700
  available: !ruby/object:Word
    word: available
    stem: avail
    docFrequency: 11.0
    docPositions:
    - 282
    - 295
    - 1036
    - 1309
    - 1423
    - 1701
    - 1710
    - 2258
    - 2427
    - 2497
  different: !ruby/object:Word
    word: different
    stem: differ
    docFrequency: 17.0
    docPositions:
    - 285
    - 315
    - 444
    - 515
    - 547
    - 897
    - 1058
    - 1460
    - 1702
    - 1724
    - 1809
    - 1856
    - 1879
    - 2163
    - 2272
    - 2523
  problems: !ruby/object:Word
    word: problems
    stem: problem
    docFrequency: 11.0
    docPositions:
    - 285
    - 373
    - 565
    - 601
    - 949
    - 1702
    - 1762
    - 1896
    - 1926
    - 2201
  jeff: !ruby/object:Word
    word: jeff
    stem: jeff
    docFrequency: 3.0
    docPositions:
    - 285
    - 1702
  hillmore: !ruby/object:Word
    word: hillmore
    stem: hillmor
    docFrequency: 7.0
    docPositions:
    - 285
    - 290
    - 326
    - 1702
    - 1707
    - 1731
  late: !ruby/object:Word
    word: late
    stem: late
    docFrequency: 7.0
    docPositions:
    - 285
    - 727
    - 1136
    - 1702
    - 2032
    - 2320
  run: !ruby/object:Word
    word: run
    stem: run
    docFrequency: 23.0
    docPositions:
    - 287
    - 293
    - 308
    - 312
    - 314
    - 382
    - 701
    - 1043
    - 1352
    - 1364
    - 1451
    - 1704
    - 1708
    - 1719
    - 1721
    - 1723
    - 1769
    - 2010
    - 2263
    - 2453
    - 2461
    - 2516
  man: !ruby/object:Word
    word: man
    stem: man
    docFrequency: 11.0
    docPositions:
    - 287
    - 413
    - 489
    - 514
    - 1448
    - 1704
    - 1786
    - 1838
    - 1855
    - 2513
  returned: !ruby/object:Word
    word: returned
    stem: return
    docFrequency: 3.0
    docPositions:
    - 287
    - 1704
  determined: !ruby/object:Word
    word: determined
    stem: determin
    docFrequency: 5.0
    docPositions:
    - 288
    - 652
    - 1705
    - 1968
  advanced: !ruby/object:Word
    word: advanced
    stem: advanc
    docFrequency: 7.0
    docPositions:
    - 288
    - 433
    - 528
    - 1705
    - 1800
    - 1867
  team: !ruby/object:Word
    word: team
    stem: team
    docFrequency: 15.0
    docPositions:
    - 289
    - 292
    - 333
    - 605
    - 726
    - 764
    - 1141
    - 1706
    - 1707
    - 1736
    - 1930
    - 2031
    - 2061
    - 2323
  november: !ruby/object:Word
    word: november
    stem: novemb
    docFrequency: 17.0
    docPositions:
    - 290
    - 295
    - 849
    - 932
    - 1043
    - 1464
    - 1707
    - 1710
    - 2128
    - 2190
    - 2263
    - 2524
  worked: !ruby/object:Word
    word: worked
    stem: work
    docFrequency: 17.0
    docPositions:
    - 292
    - 399
    - 461
    - 498
    - 500
    - 613
    - 928
    - 953
    - 1707
    - 1778
    - 1820
    - 1845
    - 1934
    - 2188
    - 2203
  despatch: !ruby/object:Word
    word: despatch
    stem: despatch
    docFrequency: 3.0
    docPositions:
    - 292
    - 1707
  compiled: !ruby/object:Word
    word: compiled
    stem: compil
    docFrequency: 3.0
    docPositions:
    - 293
    - 1708
  months: !ruby/object:Word
    word: months
    stem: month
    docFrequency: 7.0
    docPositions:
    - 293
    - 933
    - 937
    - 1708
    - 2191
    - 2193
  february: !ruby/object:Word
    word: february
    stem: februari
    docFrequency: 5.0
    docPositions:
    - 293
    - 534
    - 1708
    - 1871
  version: !ruby/object:Word
    word: version
    stem: version
    docFrequency: 7.0
    docPositions:
    - 294
    - 1075
    - 1478
    - 1709
    - 2281
    - 2530
  five: !ruby/object:Word
    word: five
    stem: five
    docFrequency: 17.0
    docPositions:
    - 294
    - 570
    - 658
    - 879
    - 1011
    - 1142
    - 1168
    - 1426
    - 1709
    - 1901
    - 1974
    - 2152
    - 2241
    - 2324
    - 2340
    - 2500
  hole: !ruby/object:Word
    word: hole
    stem: hole
    docFrequency: 5.0
    docPositions:
    - 294
    - 1426
    - 1709
    - 2500
  input: !ruby/object:Word
    word: input
    stem: input
    docFrequency: 7.0
    docPositions:
    - 295
    - 330
    - 1084
    - 1710
    - 1735
    - 2288
  output: !ruby/object:Word
    word: output
    stem: output
    docFrequency: 5.0
    docPositions:
    - 295
    - 1085
    - 1710
    - 2289
  reach: !ruby/object:Word
    word: reach
    stem: reach
    docFrequency: 3.0
    docPositions:
    - 296
    - 1711
  included: !ruby/object:Word
    word: included
    stem: includ
    docFrequency: 7.0
    docPositions:
    - 296
    - 778
    - 784
    - 1711
    - 2073
    - 2077
  writing: !ruby/object:Word
    word: writing
    stem: write
    docFrequency: 15.0
    docPositions:
    - 296
    - 326
    - 327
    - 340
    - 363
    - 1367
    - 1459
    - 1711
    - 1731
    - 1732
    - 1741
    - 1756
    - 2462
    - 2522
  user: !ruby/object:Word
    word: user
    stem: user
    docFrequency: 13.0
    docPositions:
    - 296
    - 311
    - 974
    - 1424
    - 1450
    - 1451
    - 1711
    - 1720
    - 2216
    - 2498
    - 2515
    - 2516
  manual: !ruby/object:Word
    word: manual
    stem: manual
    docFrequency: 3.0
    docPositions:
    - 296
    - 1711
  eight: !ruby/object:Word
    word: eight
    stem: eight
    docFrequency: 11.0
    docPositions:
    - 297
    - 554
    - 995
    - 1049
    - 1171
    - 1712
    - 1886
    - 2231
    - 2265
    - 2343
  person: !ruby/object:Word
    word: person
    stem: person
    docFrequency: 7.0
    docPositions:
    - 297
    - 530
    - 1347
    - 1712
    - 1869
    - 2450
  sold: !ruby/object:Word
    word: sold
    stem: sold
    docFrequency: 7.0
    docPositions:
    - 299
    - 1294
    - 1314
    - 1712
    - 2412
    - 2430
  educational: !ruby/object:Word
    word: educational
    stem: educ
    docFrequency: 5.0
    docPositions:
    - 299
    - 1393
    - 1712
    - 2477
  establishments: !ruby/object:Word
    word: establishments
    stem: establish
    docFrequency: 3.0
    docPositions:
    - 299
    - 1712
  scientific: !ruby/object:Word
    word: scientific
    stem: scientif
    docFrequency: 13.0
    docPositions:
    - 300
    - 470
    - 557
    - 566
    - 958
    - 1154
    - 1713
    - 1825
    - 1888
    - 1897
    - 2208
    - 2332
  areas: !ruby/object:Word
    word: areas
    stem: area
    docFrequency: 5.0
    docPositions:
    - 300
    - 557
    - 1713
    - 1888
  high: !ruby/object:Word
    word: high
    stem: high
    docFrequency: 13.0
    docPositions:
    - 301
    - 340
    - 519
    - 525
    - 1147
    - 1154
    - 1714
    - 1741
    - 1860
    - 1864
    - 2327
    - 2332
  average: !ruby/object:Word
    word: average
    stem: averag
    docFrequency: 5.0
    docPositions:
    - 301
    - 1042
    - 1714
    - 2262
  programs: !ruby/object:Word
    word: programs
    stem: program
    docFrequency: 17.0
    docPositions:
    - 301
    - 654
    - 1116
    - 1307
    - 1335
    - 1360
    - 1369
    - 1424
    - 1714
    - 1970
    - 2310
    - 2425
    - 2442
    - 2459
    - 2464
    - 2498
  given: !ruby/object:Word
    word: given
    stem: given
    docFrequency: 15.0
    docPositions:
    - 301
    - 357
    - 379
    - 533
    - 665
    - 874
    - 1086
    - 1714
    - 1752
    - 1766
    - 1870
    - 1980
    - 2147
    - 2290
  period: !ruby/object:Word
    word: period
    stem: period
    docFrequency: 7.0
    docPositions:
    - 302
    - 882
    - 905
    - 1715
    - 2153
    - 2169
  reduce: !ruby/object:Word
    word: reduce
    stem: reduc
    docFrequency: 3.0
    docPositions:
    - 302
    - 1715
  minimum: !ruby/object:Word
    word: minimum
    stem: minimum
    docFrequency: 3.0
    docPositions:
    - 302
    - 1715
  changing: !ruby/object:Word
    word: changing
    stem: chang
    docFrequency: 5.0
    docPositions:
    - 302
    - 909
    - 1715
    - 2173
  system: !ruby/object:Word
    word: system
    stem: system
    docFrequency: 37.0
    docPositions:
    - 306
    - 332
    - 360
    - 363
    - 561
    - 592
    - 675
    - 723
    - 761
    - 905
    - 1148
    - 1171
    - 1198
    - 1298
    - 1376
    - 1402
    - 1409
    - 1717
    - 1735
    - 1753
    - 1756
    - 1892
    - 1919
    - 1990
    - 2030
    - 2058
    - 2169
    - 2328
    - 2343
    - 2355
    - 2416
    - 2466
    - 2484
    - 2489
  load: !ruby/object:Word
    word: load
    stem: load
    docFrequency: 7.0
    docPositions:
    - 306
    - 307
    - 1717
    - 1718
  session: !ruby/object:Word
    word: session
    stem: session
    docFrequency: 5.0
    docPositions:
    - 307
    - 1070
    - 1718
    - 2278
  dynamic: !ruby/object:Word
    word: dynamic
    stem: dynam
    docFrequency: 3.0
    docPositions:
    - 307
    - 1718
  routines: !ruby/object:Word
    word: routines
    stem: routin
    docFrequency: 7.0
    docPositions:
    - 308
    - 1117
    - 1719
    - 2311
  compile: !ruby/object:Word
    word: compile
    stem: compil
    docFrequency: 3.0
    docPositions:
    - 308
    - 1719
  decision: !ruby/object:Word
    word: decision
    stem: decis
    docFrequency: 17.0
    docPositions:
    - 311
    - 315
    - 318
    - 373
    - 385
    - 471
    - 822
    - 1322
    - 1720
    - 1724
    - 1725
    - 1762
    - 1770
    - 1826
    - 2109
    - 2433
  speed: !ruby/object:Word
    word: speed
    stem: speed
    docFrequency: 13.0
    docPositions:
    - 312
    - 324
    - 520
    - 525
    - 561
    - 910
    - 1721
    - 1731
    - 1861
    - 1864
    - 1892
    - 2174
  generate: !ruby/object:Word
    word: generate
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 313
    - 1722
  binary: !ruby/object:Word
    word: binary
    stem: binari
    docFrequency: 13.0
    docPositions:
    - 313
    - 321
    - 323
    - 651
    - 659
    - 1203
    - 1722
    - 1728
    - 1730
    - 1967
    - 1975
    - 2356
  didn: !ruby/object:Word
    word: didn
    stem: didn
    docFrequency: 11.0
    docPositions:
    - 314
    - 370
    - 418
    - 464
    - 994
    - 1723
    - 1761
    - 1789
    - 1821
    - 2230
  want: !ruby/object:Word
    word: want
    stem: want
    docFrequency: 7.0
    docPositions:
    - 314
    - 419
    - 466
    - 1723
    - 1790
    - 1823
  interpret: !ruby/object:Word
    word: interpret
    stem: interpret
    docFrequency: 3.0
    docPositions:
    - 315
    - 1724
  people: !ruby/object:Word
    word: people
    stem: peopl
    docFrequency: 17.0
    docPositions:
    - 316
    - 485
    - 495
    - 570
    - 929
    - 1432
    - 1447
    - 1513
    - 1725
    - 1836
    - 1842
    - 1901
    - 2189
    - 2501
    - 2512
    - 2542
  text: !ruby/object:Word
    word: text
    stem: text
    docFrequency: 9.0
    docPositions:
    - 318
    - 1302
    - 1307
    - 1424
    - 1725
    - 2420
    - 2425
    - 2498
  ended: !ruby/object:Word
    word: ended
    stem: end
    docFrequency: 3.0
    docPositions:
    - 319
    - 1726
  operate: !ruby/object:Word
    word: operate
    stem: oper
    docFrequency: 7.0
    docPositions:
    - 320
    - 784
    - 1727
    - 2077
  phases: !ruby/object:Word
    word: phases
    stem: phase
    docFrequency: 3.0
    docPositions:
    - 320
    - 1727
  converted: !ruby/object:Word
    word: converted
    stem: convert
    docFrequency: 5.0
    docPositions:
    - 320
    - 769
    - 1727
    - 2066
  stream: !ruby/object:Word
    word: stream
    stem: stream
    docFrequency: 3.0
    docPositions:
    - 321
    - 1728
  processed: !ruby/object:Word
    word: processed
    stem: process
    docFrequency: 5.0
    docPositions:
    - 322
    - 641
    - 1729
    - 1960
  second: !ruby/object:Word
    word: second
    stem: second
    docFrequency: 17.0
    docPositions:
    - 322
    - 541
    - 698
    - 892
    - 1054
    - 1153
    - 1155
    - 1362
    - 1729
    - 1873
    - 2008
    - 2160
    - 2270
    - 2331
    - 2333
    - 2459
  internal: !ruby/object:Word
    word: internal
    stem: intern
    docFrequency: 7.0
    docPositions:
    - 322
    - 745
    - 830
    - 1729
    - 2043
    - 2115
  executed: !ruby/object:Word
    word: executed
    stem: execut
    docFrequency: 3.0
    docPositions:
    - 323
    - 1730
  identified: !ruby/object:Word
    word: identified
    stem: identifi
    docFrequency: 5.0
    docPositions:
    - 326
    - 1401
    - 1731
    - 2483
  six: !ruby/object:Word
    word: six
    stem: six
    docFrequency: 5.0
    docPositions:
    - 326
    - 1041
    - 1731
    - 2261
  lexicon: !ruby/object:Word
    word: lexicon
    stem: lexicon
    docFrequency: 3.0
    docPositions:
    - 327
    - 1732
  analyser: !ruby/object:Word
    word: analyser
    stem: analys
    docFrequency: 3.0
    docPositions:
    - 327
    - 1732
  tokenise: !ruby/object:Word
    word: tokenise
    stem: tokenis
    docFrequency: 3.0
    docPositions:
    - 328
    - 1733
  symbols: !ruby/object:Word
    word: symbols
    stem: symbol
    docFrequency: 3.0
    docPositions:
    - 328
    - 1733
  taking: !ruby/object:Word
    word: taking
    stem: take
    docFrequency: 7.0
    docPositions:
    - 328
    - 423
    - 1104
    - 1733
    - 1794
    - 2302
  generating: !ruby/object:Word
    word: generating
    stem: gener
    docFrequency: 5.0
    docPositions:
    - 329
    - 401
    - 1734
    - 1780
  tokens: !ruby/object:Word
    word: tokens
    stem: token
    docFrequency: 3.0
    docPositions:
    - 329
    - 1734
  dictionary: !ruby/object:Word
    word: dictionary
    stem: dictionari
    docFrequency: 3.0
    docPositions:
    - 332
    - 1735
  recording: !ruby/object:Word
    word: recording
    stem: record
    docFrequency: 3.0
    docPositions:
    - 332
    - 1735
  identifiers: !ruby/object:Word
    word: identifiers
    stem: identifi
    docFrequency: 3.0
    docPositions:
    - 332
    - 1735
  properties: !ruby/object:Word
    word: properties
    stem: properti
    docFrequency: 3.0
    docPositions:
    - 333
    - 1736
  memory: !ruby/object:Word
    word: memory
    stem: memori
    docFrequency: 37.0
    docPositions:
    - 333
    - 624
    - 628
    - 734
    - 741
    - 745
    - 750
    - 762
    - 766
    - 767
    - 768
    - 778
    - 816
    - 819
    - 827
    - 987
    - 988
    - 1736
    - 1945
    - 1949
    - 2035
    - 2042
    - 2043
    - 2048
    - 2059
    - 2063
    - 2064
    - 2065
    - 2073
    - 2103
    - 2106
    - 2114
    - 2225
    - 2226
  going: !ruby/object:Word
    word: going
    stem: go
    docFrequency: 19.0
    docPositions:
    - 334
    - 376
    - 388
    - 424
    - 487
    - 912
    - 1087
    - 1171
    - 1737
    - 1765
    - 1773
    - 1795
    - 1838
    - 2176
    - 2291
    - 2343
  allocated: !ruby/object:Word
    word: allocated
    stem: alloc
    docFrequency: 3.0
    docPositions:
    - 334
    - 1737
  fourth: !ruby/object:Word
    word: fourth
    stem: fourth
    docFrequency: 3.0
    docPositions:
    - 334
    - 1737
  specified: !ruby/object:Word
    word: specified
    stem: specifi
    docFrequency: 3.0
    docPositions:
    - 334
    - 1737
  format: !ruby/object:Word
    word: format
    stem: format
    docFrequency: 3.0
    docPositions:
    - 335
    - 1738
  out: !ruby/object:Word
    word: out
    stem: out
    docFrequency: 33.0
    docPositions:
    - 335
    - 362
    - 569
    - 591
    - 629
    - 667
    - 912
    - 956
    - 975
    - 1000
    - 1004
    - 1027
    - 1086
    - 1100
    - 1404
    - 1738
    - 1755
    - 1900
    - 1918
    - 1950
    - 1982
    - 2176
    - 2206
    - 2217
    - 2234
    - 2238
    - 2251
    - 2290
    - 2300
    - 2486
  parts: !ruby/object:Word
    word: parts
    stem: part
    docFrequency: 7.0
    docPositions:
    - 335
    - 809
    - 1253
    - 1738
    - 2098
    - 2382
  definition: !ruby/object:Word
    word: definition
    stem: definit
    docFrequency: 7.0
    docPositions:
    - 336
    - 340
    - 341
    - 1739
    - 1741
    - 1742
  implemented: !ruby/object:Word
    word: implemented
    stem: implement
    docFrequency: 3.0
    docPositions:
    - 337
    - 1740
  final: !ruby/object:Word
    word: final
    stem: final
    docFrequency: 5.0
    docPositions:
    - 339
    - 343
    - 1740
    - 1742
  level: !ruby/object:Word
    word: level
    stem: level
    docFrequency: 9.0
    docPositions:
    - 340
    - 580
    - 699
    - 1147
    - 1741
    - 1909
    - 2009
    - 2327
  pseudo: !ruby/object:Word
    word: pseudo
    stem: pseudo
    docFrequency: 3.0
    docPositions:
    - 340
    - 1741
  speaker: !ruby/object:Word
    word: speaker
    stem: speaker
    docFrequency: 5.0
    docPositions:
    - 343
    - 884
    - 1742
    - 2155
  presentation: !ruby/object:Word
    word: presentation
    stem: present
    docFrequency: 3.0
    docPositions:
    - 344
    - 1743
  met: !ruby/object:Word
    word: met
    stem: met
    docFrequency: 7.0
    docPositions:
    - 345
    - 411
    - 505
    - 1744
    - 1784
    - 1848
  he: !ruby/object:Word
    word: he
    stem: he
    docFrequency: 67.0
    docPositions:
    - 347
    - 351
    - 417
    - 418
    - 419
    - 421
    - 430
    - 431
    - 433
    - 448
    - 453
    - 454
    - 458
    - 459
    - 461
    - 464
    - 478
    - 486
    - 514
    - 619
    - 689
    - 802
    - 809
    - 883
    - 884
    - 892
    - 897
    - 899
    - 1449
    - 1746
    - 1748
    - 1788
    - 1789
    - 1790
    - 1792
    - 1799
    - 1800
    - 1811
    - 1814
    - 1815
    - 1817
    - 1818
    - 1820
    - 1821
    - 1831
    - 1837
    - 1855
    - 1940
    - 2002
    - 2091
    - 2098
    - 2154
    - 2155
    - 2160
    - 2163
    - 2165
    - 2514
  earliest: !ruby/object:Word
    word: earliest
    stem: earliest
    docFrequency: 5.0
    docPositions:
    - 347
    - 551
    - 1746
    - 1883
  learnt: !ruby/object:Word
    word: learnt
    stem: learnt
    docFrequency: 5.0
    docPositions:
    - 348
    - 1159
    - 1747
    - 2335
  undergraduate: !ruby/object:Word
    word: undergraduate
    stem: undergradu
    docFrequency: 3.0
    docPositions:
    - 349
    - 1748
  liverpool: !ruby/object:Word
    word: liverpool
    stem: liverpool
    docFrequency: 3.0
    docPositions:
    - 349
    - 1748
  task: !ruby/object:Word
    word: task
    stem: task
    docFrequency: 7.0
    docPositions:
    - 351
    - 358
    - 1086
    - 1748
    - 1753
    - 2290
  supplied: !ruby/object:Word
    word: supplied
    stem: suppli
    docFrequency: 9.0
    docPositions:
    - 353
    - 920
    - 1286
    - 1409
    - 1750
    - 2182
    - 2406
    - 2489
  fortran: !ruby/object:Word
    word: fortran
    stem: fortran
    docFrequency: 5.0
    docPositions:
    - 354
    - 403
    - 1751
    - 1782
  professor: !ruby/object:Word
    word: professor
    stem: professor
    docFrequency: 18.0
    docPositions:
    - 356
    - 509
    - 881
    - 883
    - 969
    - 1024
    - 1134
    - 1178
    - 1751
    - 1852
    - 2152
    - 2154
    - 2213
    - 2248
    - 2318
    - 2345
  nicol: !ruby/object:Word
    word: nicol
    stem: nicol
    docFrequency: 5.0
    docPositions:
    - 356
    - 362
    - 1751
    - 1755
  hardiman: !ruby/object:Word
    word: hardiman
    stem: hardiman
    docFrequency: 5.0
    docPositions:
    - 356
    - 362
    - 1751
    - 1755
  carnegie: !ruby/object:Word
    word: carnegie
    stem: carnegi
    docFrequency: 3.0
    docPositions:
    - 357
    - 1752
  mellon: !ruby/object:Word
    word: mellon
    stem: mellon
    docFrequency: 3.0
    docPositions:
    - 357
    - 1752
  month: !ruby/object:Word
    word: month
    stem: month
    docFrequency: 5.0
    docPositions:
    - 357
    - 362
    - 1752
    - 1755
  complete: !ruby/object:Word
    word: complete
    stem: complet
    docFrequency: 13.0
    docPositions:
    - 358
    - 932
    - 1260
    - 1298
    - 1381
    - 1440
    - 1753
    - 2190
    - 2387
    - 2416
    - 2469
    - 2507
  did: !ruby/object:Word
    word: did
    stem: did
    docFrequency: 13.0
    docPositions:
    - 360
    - 549
    - 610
    - 651
    - 694
    - 1223
    - 1753
    - 1881
    - 1932
    - 1967
    - 2004
    - 2362
  amazing: !ruby/object:Word
    word: amazing
    stem: amaz
    docFrequency: 3.0
    docPositions:
    - 360
    - 1753
  thing: !ruby/object:Word
    word: thing
    stem: thing
    docFrequency: 5.0
    docPositions:
    - 360
    - 1368
    - 1753
    - 2463
  down: !ruby/object:Word
    word: down
    stem: down
    docFrequency: 9.0
    docPositions:
    - 361
    - 705
    - 1236
    - 1403
    - 1754
    - 2014
    - 2371
    - 2485
  fair: !ruby/object:Word
    word: fair
    stem: fair
    docFrequency: 5.0
    docPositions:
    - 361
    - 978
    - 1754
    - 2220
  amount: !ruby/object:Word
    word: amount
    stem: amount
    docFrequency: 5.0
    docPositions:
    - 361
    - 624
    - 1754
    - 1945
  detail: !ruby/object:Word
    word: detail
    stem: detail
    docFrequency: 5.0
    docPositions:
    - 361
    - 1337
    - 1754
    - 2444
  turned: !ruby/object:Word
    word: turned
    stem: turn
    docFrequency: 11.0
    docPositions:
    - 362
    - 603
    - 912
    - 956
    - 1404
    - 1755
    - 1928
    - 2176
    - 2206
    - 2486
  built: !ruby/object:Word
    word: built
    stem: built
    docFrequency: 17.0
    docPositions:
    - 363
    - 762
    - 911
    - 1065
    - 1106
    - 1141
    - 1155
    - 1306
    - 1756
    - 2059
    - 2175
    - 2277
    - 2304
    - 2323
    - 2333
    - 2424
  my: !ruby/object:Word
    word: my
    stem: my
    docFrequency: 11.0
    docPositions:
    - 363
    - 862
    - 863
    - 1306
    - 1374
    - 1756
    - 2139
    - 2140
    - 2424
    - 2464
  experience: !ruby/object:Word
    word: experience
    stem: experi
    docFrequency: 7.0
    docPositions:
    - 363
    - 962
    - 1398
    - 1756
    - 2210
    - 2482
  less: !ruby/object:Word
    word: less
    stem: less
    docFrequency: 13.0
    docPositions:
    - 364
    - 617
    - 783
    - 859
    - 864
    - 1030
    - 1757
    - 1938
    - 2076
    - 2136
    - 2141
    - 2254
  compatible: !ruby/object:Word
    word: compatible
    stem: compat
    docFrequency: 5.0
    docPositions:
    - 364
    - 773
    - 1757
    - 2068
  everything: !ruby/object:Word
    word: everything
    stem: everyth
    docFrequency: 7.0
    docPositions:
    - 367
    - 994
    - 1414
    - 1758
    - 2230
    - 2492
  conceived: !ruby/object:Word
    word: conceived
    stem: conceiv
    docFrequency: 7.0
    docPositions:
    - 367
    - 1139
    - 1151
    - 1758
    - 2321
    - 2329
  revised: !ruby/object:Word
    word: revised
    stem: revis
    docFrequency: 3.0
    docPositions:
    - 368
    - 1759
  things: !ruby/object:Word
    word: things
    stem: thing
    docFrequency: 9.0
    docPositions:
    - 368
    - 428
    - 1002
    - 1315
    - 1759
    - 1797
    - 2236
    - 2431
  couldn: !ruby/object:Word
    word: couldn
    stem: couldn
    docFrequency: 3.0
    docPositions:
    - 369
    - 1760
  useful: !ruby/object:Word
    word: useful
    stem: us
    docFrequency: 13.0
    docPositions:
    - 369
    - 370
    - 394
    - 620
    - 1256
    - 1436
    - 1760
    - 1761
    - 1775
    - 1941
    - 2385
    - 2505
  d: !ruby/object:Word
    word: d
    stem: d
    docFrequency: 15.0
    docPositions:
    - 369
    - 415
    - 454
    - 455
    - 899
    - 956
    - 1760
    - 1788
    - 1815
    - 1816
    - 2165
    - 2206
  find: !ruby/object:Word
    word: find
    stem: find
    docFrequency: 5.0
    docPositions:
    - 369
    - 519
    - 1760
    - 1860
  round: !ruby/object:Word
    word: round
    stem: round
    docFrequency: 5.0
    docPositions:
    - 370
    - 1325
    - 1761
    - 2436
  think: !ruby/object:Word
    word: think
    stem: think
    docFrequency: 17.0
    docPositions:
    - 370
    - 420
    - 421
    - 422
    - 489
    - 695
    - 946
    - 1273
    - 1761
    - 1791
    - 1792
    - 1793
    - 1838
    - 2005
    - 2200
    - 2395
  wouldn: !ruby/object:Word
    word: wouldn
    stem: wouldn
    docFrequency: 3.0
    docPositions:
    - 371
    - 1762
  build: !ruby/object:Word
    word: build
    stem: build
    docFrequency: 11.0
    docPositions:
    - 373
    - 598
    - 843
    - 913
    - 1303
    - 1762
    - 1923
    - 2124
    - 2177
    - 2421
  ones: !ruby/object:Word
    word: ones
    stem: 'on'
    docFrequency: 5.0
    docPositions:
    - 374
    - 909
    - 1763
    - 2173
  formal: !ruby/object:Word
    word: formal
    stem: formal
    docFrequency: 11.0
    docPositions:
    - 374
    - 375
    - 377
    - 383
    - 386
    - 1763
    - 1764
    - 1766
    - 1770
    - 1771
  parameters: !ruby/object:Word
    word: parameters
    stem: paramet
    docFrequency: 9.0
    docPositions:
    - 374
    - 375
    - 377
    - 386
    - 1763
    - 1764
    - 1766
    - 1771
  particularly: !ruby/object:Word
    word: particularly
    stem: particularli
    docFrequency: 9.0
    docPositions:
    - 375
    - 527
    - 1324
    - 1468
    - 1764
    - 1866
    - 2435
    - 2526
  procedures: !ruby/object:Word
    word: procedures
    stem: procedur
    docFrequency: 3.0
    docPositions:
    - 375
    - 1764
  question: !ruby/object:Word
    word: question
    stem: question
    docFrequency: 3.0
    docPositions:
    - 376
    - 1765
  know: !ruby/object:Word
    word: know
    stem: know
    docFrequency: 7.0
    docPositions:
    - 376
    - 723
    - 1467
    - 1765
    - 2030
    - 2525
  procedure: !ruby/object:Word
    word: procedure
    stem: procedur
    docFrequency: 11.0
    docPositions:
    - 377
    - 381
    - 382
    - 401
    - 1241
    - 1766
    - 1768
    - 1769
    - 1780
    - 2374
  parameter: !ruby/object:Word
    word: parameter
    stem: paramet
    docFrequency: 5.0
    docPositions:
    - 377
    - 383
    - 1766
    - 1770
  compilation: !ruby/object:Word
    word: compilation
    stem: compil
    docFrequency: 5.0
    docPositions:
    - 380
    - 1767
  unit: !ruby/object:Word
    word: unit
    stem: unit
    docFrequency: 13.0
    docPositions:
    - 380
    - 697
    - 1124
    - 1125
    - 1237
    - 1384
    - 1767
    - 2007
    - 2314
    - 2315
    - 2372
    - 2470
  either: !ruby/object:Word
    word: either
    stem: either
    docFrequency: 9.0
    docPositions:
    - 380
    - 524
    - 579
    - 1291
    - 1767
    - 1863
    - 1908
    - 2411
  main: !ruby/object:Word
    word: main
    stem: main
    docFrequency: 9.0
    docPositions:
    - 380
    - 816
    - 818
    - 987
    - 1767
    - 2103
    - 2105
    - 2225
  concept: !ruby/object:Word
    word: concept
    stem: concept
    docFrequency: 5.0
    docPositions:
    - 381
    - 1341
    - 1768
    - 2446
  external: !ruby/object:Word
    word: external
    stem: extern
    docFrequency: 3.0
    docPositions:
    - 381
    - 1768
  enforce: !ruby/object:Word
    word: enforce
    stem: enforc
    docFrequency: 3.0
    docPositions:
    - 382
    - 1769
  type: !ruby/object:Word
    word: type
    stem: type
    docFrequency: 19.0
    docPositions:
    - 382
    - 395
    - 396
    - 511
    - 571
    - 736
    - 750
    - 1036
    - 1058
    - 1769
    - 1776
    - 1777
    - 1854
    - 1902
    - 2037
    - 2048
    - 2258
    - 2272
  actual: !ruby/object:Word
    word: actual
    stem: actual
    docFrequency: 3.0
    docPositions:
    - 383
    - 1770
  correspondence: !ruby/object:Word
    word: correspondence
    stem: correspond
    docFrequency: 3.0
    docPositions:
    - 383
    - 1770
  allow: !ruby/object:Word
    word: allow
    stem: allow
    docFrequency: 3.0
    docPositions:
    - 385
    - 1770
  liked: !ruby/object:Word
    word: liked
    stem: like
    docFrequency: 3.0
    docPositions:
    - 386
    - 1771
  even: !ruby/object:Word
    word: even
    stem: even
    docFrequency: 15.0
    docPositions:
    - 386
    - 680
    - 756
    - 830
    - 832
    - 982
    - 1062
    - 1771
    - 1995
    - 2053
    - 2115
    - 2117
    - 2222
    - 2274
  controlled: !ruby/object:Word
    word: controlled
    stem: control
    docFrequency: 9.0
    docPositions:
    - 387
    - 525
    - 818
    - 1298
    - 1772
    - 1864
    - 2105
    - 2416
  variable: !ruby/object:Word
    word: variable
    stem: variabl
    docFrequency: 3.0
    docPositions:
    - 387
    - 1772
  forced: !ruby/object:Word
    word: forced
    stem: forc
    docFrequency: 3.0
    docPositions:
    - 387
    - 1772
  statement: !ruby/object:Word
    word: statement
    stem: statement
    docFrequency: 5.0
    docPositions:
    - 387
    - 395
    - 1772
    - 1776
  predict: !ruby/object:Word
    word: predict
    stem: predict
    docFrequency: 3.0
    docPositions:
    - 388
    - 1773
  happen: !ruby/object:Word
    word: happen
    stem: happen
    docFrequency: 3.0
    docPositions:
    - 388
    - 1773
  variables: !ruby/object:Word
    word: variables
    stem: variabl
    docFrequency: 3.0
    docPositions:
    - 390
    - 1773
  arrays: !ruby/object:Word
    word: arrays
    stem: arrai
    docFrequency: 3.0
    docPositions:
    - 390
    - 1773
  extras: !ruby/object:Word
    word: extras
    stem: extra
    docFrequency: 3.0
    docPositions:
    - 393
    - 1774
  position: !ruby/object:Word
    word: position
    stem: posit
    docFrequency: 3.0
    docPositions:
    - 393
    - 1774
  remainder: !ruby/object:Word
    word: remainder
    stem: remaind
    docFrequency: 3.0
    docPositions:
    - 393
    - 1774
  operator: !ruby/object:Word
    word: operator
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 393
    - 1774
  iterative: !ruby/object:Word
    word: iterative
    stem: iter
    docFrequency: 3.0
    docPositions:
    - 395
    - 1776
  added: !ruby/object:Word
    word: added
    stem: ad
    docFrequency: 7.0
    docPositions:
    - 395
    - 678
    - 1120
    - 1776
    - 1993
    - 2312
  non: !ruby/object:Word
    word: non
    stem: non
    docFrequency: 3.0
    docPositions:
    - 395
    - 1776
  real: !ruby/object:Word
    word: real
    stem: real
    docFrequency: 35.0
    docPositions:
    - 395
    - 559
    - 561
    - 565
    - 571
    - 574
    - 581
    - 583
    - 586
    - 592
    - 600
    - 616
    - 636
    - 717
    - 732
    - 859
    - 1352
    - 1776
    - 1890
    - 1892
    - 1896
    - 1902
    - 1903
    - 1910
    - 1912
    - 1913
    - 1919
    - 1925
    - 1937
    - 1955
    - 2024
    - 2035
    - 2136
    - 2453
  having: !ruby/object:Word
    word: having
    stem: have
    docFrequency: 9.0
    docPositions:
    - 396
    - 816
    - 1046
    - 1268
    - 1777
    - 2103
    - 2264
    - 2390
  directive: !ruby/object:Word
    word: directive
    stem: direct
    docFrequency: 3.0
    docPositions:
    - 396
    - 1777
  told: !ruby/object:Word
    word: told
    stem: told
    docFrequency: 11.0
    docPositions:
    - 397
    - 889
    - 1074
    - 1105
    - 1134
    - 1778
    - 2157
    - 2280
    - 2303
    - 2318
  precision: !ruby/object:Word
    word: precision
    stem: precis
    docFrequency: 9.0
    docPositions:
    - 397
    - 617
    - 620
    - 622
    - 1778
    - 1938
    - 1941
    - 1943
  reals: !ruby/object:Word
    word: reals
    stem: real
    docFrequency: 3.0
    docPositions:
    - 397
    - 1778
  resulting: !ruby/object:Word
    word: resulting
    stem: result
    docFrequency: 3.0
    docPositions:
    - 399
    - 1778
  efficiency: !ruby/object:Word
    word: efficiency
    stem: effici
    docFrequency: 3.0
    docPositions:
    - 399
    - 1778
  fairly: !ruby/object:Word
    word: fairly
    stem: fairli
    docFrequency: 3.0
    docPositions:
    - 400
    - 1779
  getting: !ruby/object:Word
    word: getting
    stem: get
    docFrequency: 15.0
    docPositions:
    - 400
    - 487
    - 949
    - 984
    - 1374
    - 1375
    - 1387
    - 1779
    - 1838
    - 2201
    - 2224
    - 2464
    - 2465
    - 2473
  around: !ruby/object:Word
    word: around
    stem: around
    docFrequency: 11.0
    docPositions:
    - 400
    - 939
    - 1153
    - 1224
    - 1245
    - 1779
    - 2195
    - 2331
    - 2363
    - 2378
  overhead: !ruby/object:Word
    word: overhead
    stem: overhead
    docFrequency: 3.0
    docPositions:
    - 401
    - 1780
  calls: !ruby/object:Word
    word: calls
    stem: call
    docFrequency: 3.0
    docPositions:
    - 401
    - 1780
  access: !ruby/object:Word
    word: access
    stem: access
    docFrequency: 19.0
    docPositions:
    - 401
    - 559
    - 816
    - 819
    - 901
    - 902
    - 1112
    - 1114
    - 1170
    - 1780
    - 1890
    - 2103
    - 2106
    - 2167
    - 2168
    - 2308
    - 2310
    - 2342
  sequences: !ruby/object:Word
    word: sequences
    stem: sequenc
    docFrequency: 5.0
    docPositions:
    - 402
    - 817
    - 1781
    - 2104
  efficient: !ruby/object:Word
    word: efficient
    stem: effici
    docFrequency: 5.0
    docPositions:
    - 402
    - 813
    - 1781
    - 2100
  often: !ruby/object:Word
    word: often
    stem: often
    docFrequency: 3.0
    docPositions:
    - 402
    - 1781
  typically: !ruby/object:Word
    word: typically
    stem: typic
    docFrequency: 5.0
    docPositions:
    - 403
    - 995
    - 1782
    - 2231
  times: !ruby/object:Word
    word: times
    stem: time
    docFrequency: 23.0
    docPositions:
    - 403
    - 642
    - 805
    - 964
    - 997
    - 1080
    - 1136
    - 1145
    - 1146
    - 1147
    - 1148
    - 1782
    - 1961
    - 2094
    - 2212
    - 2233
    - 2286
    - 2320
    - 2325
    - 2326
    - 2327
    - 2328
  comparable: !ruby/object:Word
    word: comparable
    stem: compar
    docFrequency: 3.0
    docPositions:
    - 404
    - 1783
  believe: !ruby/object:Word
    word: believe
    stem: believ
    docFrequency: 5.0
    docPositions:
    - 408
    - 941
    - 1783
    - 2197
  best: !ruby/object:Word
    word: best
    stem: best
    docFrequency: 7.0
    docPositions:
    - 408
    - 1185
    - 1188
    - 1783
    - 2348
    - 2351
  electronic: !ruby/object:Word
    word: electronic
    stem: electron
    docFrequency: 3.0
    docPositions:
    - 408
    - 1783
  engineer: !ruby/object:Word
    word: engineer
    stem: engin
    docFrequency: 7.0
    docPositions:
    - 408
    - 411
    - 1254
    - 1783
    - 1784
    - 2383
  ever: !ruby/object:Word
    word: ever
    stem: ever
    docFrequency: 3.0
    docPositions:
    - 409
    - 1784
  lived: !ruby/object:Word
    word: lived
    stem: live
    docFrequency: 3.0
    docPositions:
    - 409
    - 1784
  him: !ruby/object:Word
    word: him
    stem: him
    docFrequency: 9.0
    docPositions:
    - 411
    - 428
    - 510
    - 1468
    - 1784
    - 1797
    - 1853
    - 2526
  young: !ruby/object:Word
    word: young
    stem: young
    docFrequency: 3.0
    docPositions:
    - 411
    - 1784
  saw: !ruby/object:Word
    word: saw
    stem: saw
    docFrequency: 7.0
    docPositions:
    - 412
    - 428
    - 893
    - 1785
    - 1797
    - 2161
  advert: !ruby/object:Word
    word: advert
    stem: advert
    docFrequency: 3.0
    docPositions:
    - 412
    - 1785
  someone: !ruby/object:Word
    word: someone
    stem: someon
    docFrequency: 5.0
    docPositions:
    - 412
    - 490
    - 1785
    - 1839
  tv: !ruby/object:Word
    word: tv
    stem: tv
    docFrequency: 7.0
    docPositions:
    - 412
    - 423
    - 863
    - 1785
    - 1794
    - 2140
  tubes: !ruby/object:Word
    word: tubes
    stem: tube
    docFrequency: 9.0
    docPositions:
    - 412
    - 677
    - 764
    - 893
    - 1785
    - 1992
    - 2061
    - 2161
  applied: !ruby/object:Word
    word: applied
    stem: appli
    docFrequency: 3.0
    docPositions:
    - 412
    - 1785
  job: !ruby/object:Word
    word: job
    stem: job
    docFrequency: 11.0
    docPositions:
    - 413
    - 913
    - 1083
    - 1084
    - 1388
    - 1786
    - 2177
    - 2287
    - 2288
    - 2474
  frightening: !ruby/object:Word
    word: frightening
    stem: frighten
    docFrequency: 3.0
    docPositions:
    - 413
    - 1786
  green: !ruby/object:Word
    word: green
    stem: green
    docFrequency: 7.0
    docPositions:
    - 414
    - 1272
    - 1273
    - 1787
    - 2394
    - 2395
  eyes: !ruby/object:Word
    word: eyes
    stem: ey
    docFrequency: 5.0
    docPositions:
    - 414
    - 415
    - 1787
    - 1788
  interviewed: !ruby/object:Word
    word: interviewed
    stem: interview
    docFrequency: 5.0
    docPositions:
    - 414
    - 476
    - 1787
    - 1829
  me: !ruby/object:Word
    word: me
    stem: me
    docFrequency: 13.0
    docPositions:
    - 414
    - 420
    - 431
    - 477
    - 478
    - 495
    - 1787
    - 1791
    - 1800
    - 1830
    - 1831
    - 1842
  seemed: !ruby/object:Word
    word: seemed
    stem: seem
    docFrequency: 3.0
    docPositions:
    - 414
    - 1787
  greenest: !ruby/object:Word
    word: greenest
    stem: greenest
    docFrequency: 3.0
    docPositions:
    - 415
    - 1788
  anyone: !ruby/object:Word
    word: anyone
    stem: anyon
    docFrequency: 9.0
    docPositions:
    - 415
    - 1270
    - 1396
    - 1502
    - 1788
    - 2392
    - 2480
    - 2535
  seen: !ruby/object:Word
    word: seen
    stem: seen
    docFrequency: 11.0
    docPositions:
    - 415
    - 805
    - 821
    - 1241
    - 1277
    - 1788
    - 2094
    - 2108
    - 2374
    - 2399
  interview: !ruby/object:Word
    word: interview
    stem: interview
    docFrequency: 3.0
    docPositions:
    - 417
    - 1788
  knew: !ruby/object:Word
    word: knew
    stem: knew
    docFrequency: 11.0
    docPositions:
    - 417
    - 490
    - 609
    - 657
    - 1087
    - 1788
    - 1839
    - 1931
    - 1973
    - 2291
  vector: !ruby/object:Word
    word: vector
    stem: vector
    docFrequency: 7.0
    docPositions:
    - 418
    - 422
    - 1162
    - 1789
    - 1793
    - 2338
  analysis: !ruby/object:Word
    word: analysis
    stem: analysi
    docFrequency: 11.0
    docPositions:
    - 418
    - 422
    - 645
    - 654
    - 1158
    - 1789
    - 1793
    - 1964
    - 1970
    - 2334
  here: !ruby/object:Word
    word: here
    stem: here
    docFrequency: 13.0
    docPositions:
    - 418
    - 550
    - 734
    - 819
    - 1276
    - 1341
    - 1789
    - 1882
    - 2035
    - 2106
    - 2398
    - 2446
  circuits: !ruby/object:Word
    word: circuits
    stem: circuit
    docFrequency: 33.0
    docPositions:
    - 419
    - 420
    - 425
    - 448
    - 453
    - 454
    - 485
    - 487
    - 491
    - 492
    - 500
    - 501
    - 507
    - 511
    - 840
    - 1034
    - 1790
    - 1791
    - 1796
    - 1811
    - 1814
    - 1815
    - 1836
    - 1838
    - 1840
    - 1841
    - 1845
    - 1846
    - 1850
    - 1854
    - 2121
    - 2256
  look: !ruby/object:Word
    word: look
    stem: look
    docFrequency: 5.0
    docPositions:
    - 419
    - 420
    - 1790
    - 1791
  making: !ruby/object:Word
    word: making
    stem: make
    docFrequency: 9.0
    docPositions:
    - 419
    - 769
    - 902
    - 927
    - 1790
    - 2066
    - 2168
    - 2187
  works: !ruby/object:Word
    word: works
    stem: work
    docFrequency: 5.0
    docPositions:
    - 421
    - 1792
  might: !ruby/object:Word
    word: might
    stem: might
    docFrequency: 7.0
    docPositions:
    - 422
    - 585
    - 814
    - 1793
    - 1912
    - 2101
  m: !ruby/object:Word
    word: m
    stem: m
    docFrequency: 5.0
    docPositions:
    - 423
    - 1466
    - 1794
    - 2524
  vacancy: !ruby/object:Word
    word: vacancy
    stem: vacanc
    docFrequency: 3.0
    docPositions:
    - 423
    - 1794
  ve: !ruby/object:Word
    word: ve
    stem: ve
    docFrequency: 9.0
    docPositions:
    - 423
    - 465
    - 518
    - 908
    - 1794
    - 1822
    - 1859
    - 2172
  tube: !ruby/object:Word
    word: tube
    stem: tube
    docFrequency: 21.0
    docPositions:
    - 424
    - 673
    - 736
    - 739
    - 747
    - 755
    - 756
    - 769
    - 903
    - 908
    - 1795
    - 1988
    - 2037
    - 2040
    - 2045
    - 2052
    - 2053
    - 2066
    - 2169
    - 2172
  personal: !ruby/object:Word
    word: personal
    stem: person
    docFrequency: 3.0
    docPositions:
    - 427
    - 1796
  dogsbody: !ruby/object:Word
    word: dogsbody
    stem: dogsbodi
    docFrequency: 3.0
    docPositions:
    - 428
    - 1797
  odd: !ruby/object:Word
    word: odd
    stem: odd
    docFrequency: 5.0
    docPositions:
    - 428
    - 1279
    - 1797
    - 2399
  expected: !ruby/object:Word
    word: expected
    stem: expect
    docFrequency: 7.0
    docPositions:
    - 429
    - 444
    - 626
    - 1798
    - 1809
    - 1947
  lad: !ruby/object:Word
    word: lad
    stem: lad
    docFrequency: 3.0
    docPositions:
    - 430
    - 1799
  importance: !ruby/object:Word
    word: importance
    stem: import
    docFrequency: 4.0
    docPositions:
    - 430
    - 1498
    - 1799
  always: !ruby/object:Word
    word: always
    stem: alwai
    docFrequency: 11.0
    docPositions:
    - 430
    - 622
    - 633
    - 807
    - 849
    - 1799
    - 1943
    - 1954
    - 2096
    - 2128
  mr: !ruby/object:Word
    word: mr
    stem: mr
    docFrequency: 3.0
    docPositions:
    - 430
    - 1799
  never: !ruby/object:Word
    word: never
    stem: never
    docFrequency: 9.0
    docPositions:
    - 431
    - 774
    - 1275
    - 1300
    - 1800
    - 2069
    - 2397
    - 2418
  big: !ruby/object:Word
    word: big
    stem: big
    docFrequency: 9.0
    docPositions:
    - 431
    - 482
    - 483
    - 927
    - 1800
    - 1833
    - 1834
    - 2187
  boss: !ruby/object:Word
    word: boss
    stem: boss
    docFrequency: 3.0
    docPositions:
    - 431
    - 1800
  range: !ruby/object:Word
    word: range
    stem: rang
    docFrequency: 7.0
    docPositions:
    - 433
    - 616
    - 1152
    - 1800
    - 1937
    - 2330
  monitors: !ruby/object:Word
    word: monitors
    stem: monitor
    docFrequency: 7.0
    docPositions:
    - 433
    - 442
    - 443
    - 1800
    - 1807
    - 1808
  measuring: !ruby/object:Word
    word: measuring
    stem: measur
    docFrequency: 5.0
    docPositions:
    - 434
    - 436
    - 1801
    - 1803
  oscilloscopes: !ruby/object:Word
    word: oscilloscopes
    stem: oscilloscop
    docFrequency: 5.0
    docPositions:
    - 434
    - 671
    - 1801
    - 1986
  measure: !ruby/object:Word
    word: measure
    stem: measur
    docFrequency: 3.0
    docPositions:
    - 434
    - 1801
  amplitude: !ruby/object:Word
    word: amplitude
    stem: amplitud
    docFrequency: 3.0
    docPositions:
    - 434
    - 1801
  width: !ruby/object:Word
    word: width
    stem: width
    docFrequency: 5.0
    docPositions:
    - 435
    - 437
    - 1802
    - 1804
  pulses: !ruby/object:Word
    word: pulses
    stem: puls
    docFrequency: 5.0
    docPositions:
    - 435
    - 520
    - 1802
    - 1861
  accurately: !ruby/object:Word
    word: accurately
    stem: accur
    docFrequency: 5.0
    docPositions:
    - 435
    - 438
    - 1802
    - 1805
  shifting: !ruby/object:Word
    word: shifting
    stem: shift
    docFrequency: 3.0
    docPositions:
    - 436
    - 1803
  offset: !ruby/object:Word
    word: offset
    stem: offset
    docFrequency: 3.0
    docPositions:
    - 436
    - 1803
  voltage: !ruby/object:Word
    word: voltage
    stem: voltag
    docFrequency: 5.0
    docPositions:
    - 436
    - 1403
    - 1803
    - 2485
  screen: !ruby/object:Word
    word: screen
    stem: screen
    docFrequency: 5.0
    docPositions:
    - 436
    - 1353
    - 1803
    - 2454
  shift: !ruby/object:Word
    word: shift
    stem: shift
    docFrequency: 5.0
    docPositions:
    - 437
    - 787
    - 1804
    - 2080
  meter: !ruby/object:Word
    word: meter
    stem: meter
    docFrequency: 3.0
    docPositions:
    - 437
    - 1804
  similarly: !ruby/object:Word
    word: similarly
    stem: similarli
    docFrequency: 3.0
    docPositions:
    - 437
    - 1804
  measured: !ruby/object:Word
    word: measured
    stem: measur
    docFrequency: 3.0
    docPositions:
    - 437
    - 1804
  defined: !ruby/object:Word
    word: defined
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 438
    - 1805
  sawtooth: !ruby/object:Word
    word: sawtooth
    stem: sawtooth
    docFrequency: 3.0
    docPositions:
    - 438
    - 1805
  scan: !ruby/object:Word
    word: scan
    stem: scan
    docFrequency: 5.0
    docPositions:
    - 438
    - 1002
    - 1805
    - 2236
  monitor: !ruby/object:Word
    word: monitor
    stem: monitor
    docFrequency: 5.0
    docPositions:
    - 440
    - 455
    - 1805
    - 1816
  mohammed: !ruby/object:Word
    word: mohammed
    stem: moham
    docFrequency: 5.0
    docPositions:
    - 440
    - 441
    - 1805
    - 1806
  founder: !ruby/object:Word
    word: founder
    stem: founder
    docFrequency: 3.0
    docPositions:
    - 440
    - 1805
  moslems: !ruby/object:Word
    word: moslems
    stem: moslem
    docFrequency: 3.0
    docPositions:
    - 441
    - 1806
  caliphs: !ruby/object:Word
    word: caliphs
    stem: caliph
    docFrequency: 5.0
    docPositions:
    - 441
    - 442
    - 1806
    - 1807
  remember: !ruby/object:Word
    word: remember
    stem: rememb
    docFrequency: 5.0
    docPositions:
    - 442
    - 1223
    - 1807
    - 2362
  ali: !ruby/object:Word
    word: ali
    stem: ali
    docFrequency: 3.0
    docPositions:
    - 442
    - 1807
  xerxes: !ruby/object:Word
    word: xerxes
    stem: xerx
    docFrequency: 3.0
    docPositions:
    - 443
    - 1808
  others: !ruby/object:Word
    word: others
    stem: other
    docFrequency: 11.0
    docPositions:
    - 443
    - 841
    - 843
    - 930
    - 1177
    - 1808
    - 2122
    - 2124
    - 2190
    - 2344
  slightly: !ruby/object:Word
    word: slightly
    stem: slightli
    docFrequency: 3.0
    docPositions:
    - 444
    - 1809
  every: !ruby/object:Word
    word: every
    stem: everi
    docFrequency: 7.0
    docPositions:
    - 444
    - 667
    - 1231
    - 1809
    - 1982
    - 2368
  correctly: !ruby/object:Word
    word: correctly
    stem: correctli
    docFrequency: 3.0
    docPositions:
    - 445
    - 1810
  named: !ruby/object:Word
    word: named
    stem: name
    docFrequency: 3.0
    docPositions:
    - 445
    - 1810
  wrong: !ruby/object:Word
    word: wrong
    stem: wrong
    docFrequency: 3.0
    docPositions:
    - 445
    - 1810
  dead: !ruby/object:Word
    word: dead
    stem: dead
    docFrequency: 3.0
    docPositions:
    - 445
    - 1810
  trouble: !ruby/object:Word
    word: trouble
    stem: troubl
    docFrequency: 7.0
    docPositions:
    - 446
    - 938
    - 939
    - 1811
    - 2194
    - 2195
  names: !ruby/object:Word
    word: names
    stem: name
    docFrequency: 7.0
    docPositions:
    - 448
    - 450
    - 570
    - 1811
    - 1813
    - 1901
  cholmondeley: !ruby/object:Word
    word: cholmondeley
    stem: cholmondelei
    docFrequency: 3.0
    docPositions:
    - 449
    - 1812
  tweaker: !ruby/object:Word
    word: tweaker
    stem: tweaker
    docFrequency: 3.0
    docPositions:
    - 449
    - 1812
  featherstonehaugh: !ruby/object:Word
    word: featherstonehaugh
    stem: featherstonehaugh
    docFrequency: 3.0
    docPositions:
    - 449
    - 1812
  follower: !ruby/object:Word
    word: follower
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 449
    - 1812
  st: !ruby/object:Word
    word: st
    stem: st
    docFrequency: 3.0
    docPositions:
    - 449
    - 1812
  john: !ruby/object:Word
    word: john
    stem: john
    docFrequency: 13.0
    docPositions:
    - 450
    - 497
    - 1213
    - 1372
    - 1479
    - 1813
    - 1844
    - 2356
    - 2464
    - 2530
  something: !ruby/object:Word
    word: something
    stem: someth
    docFrequency: 15.0
    docPositions:
    - 450
    - 491
    - 981
    - 1004
    - 1160
    - 1279
    - 1813
    - 1840
    - 2221
    - 2238
    - 2336
    - 2399
  else: !ruby/object:Word
    word: else
    stem: els
    docFrequency: 5.0
    docPositions:
    - 450
    - 466
    - 1813
    - 1823
  pronounced: !ruby/object:Word
    word: pronounced
    stem: pronounc
    docFrequency: 3.0
    docPositions:
    - 450
    - 1813
  chumley: !ruby/object:Word
    word: chumley
    stem: chumlei
    docFrequency: 3.0
    docPositions:
    - 450
    - 1813
  fanshaw: !ruby/object:Word
    word: fanshaw
    stem: fanshaw
    docFrequency: 3.0
    docPositions:
    - 451
    - 1814
  sin: !ruby/object:Word
    word: sin
    stem: sin
    docFrequency: 3.0
    docPositions:
    - 451
    - 1814
  jin: !ruby/object:Word
    word: jin
    stem: jin
    docFrequency: 3.0
    docPositions:
    - 451
    - 1814
  believed: !ruby/object:Word
    word: believed
    stem: believ
    docFrequency: 3.0
    docPositions:
    - 453
    - 1814
  calculated: !ruby/object:Word
    word: calculated
    stem: calcul
    docFrequency: 5.0
    docPositions:
    - 453
    - 456
    - 1814
    - 1817
  book: !ruby/object:Word
    word: book
    stem: book
    docFrequency: 3.0
    docPositions:
    - 454
    - 1815
  calculate: !ruby/object:Word
    word: calculate
    stem: calcul
    docFrequency: 3.0
    docPositions:
    - 454
    - 1815
  see: !ruby/object:Word
    word: see
    stem: see
    docFrequency: 7.0
    docPositions:
    - 454
    - 676
    - 897
    - 1815
    - 1991
    - 2163
  pulse: !ruby/object:Word
    word: pulse
    stem: puls
    docFrequency: 3.0
    docPositions:
    - 455
    - 1816
  same: !ruby/object:Word
    word: same
    stem: same
    docFrequency: 19.0
    docPositions:
    - 455
    - 568
    - 570
    - 762
    - 965
    - 988
    - 1291
    - 1329
    - 1457
    - 1816
    - 1899
    - 1901
    - 2059
    - 2213
    - 2226
    - 2411
    - 2438
    - 2520
  born: !ruby/object:Word
    word: born
    stem: born
    docFrequency: 3.0
    docPositions:
    - 458
    - 1817
  international: !ruby/object:Word
    word: international
    stem: intern
    docFrequency: 3.0
    docPositions:
    - 458
    - 1817
  schoenberg: !ruby/object:Word
    word: schoenberg
    stem: schoenberg
    docFrequency: 3.0
    docPositions:
    - 459
    - 1818
  columbia: !ruby/object:Word
    word: columbia
    stem: columbia
    docFrequency: 3.0
    docPositions:
    - 459
    - 1818
  record: !ruby/object:Word
    word: record
    stem: record
    docFrequency: 5.0
    docPositions:
    - 460
    - 1185
    - 1819
    - 2348
  company: !ruby/object:Word
    word: company
    stem: compani
    docFrequency: 13.0
    docPositions:
    - 460
    - 542
    - 809
    - 919
    - 1255
    - 1819
    - 1874
    - 2098
    - 2181
    - 2384
  emi: !ruby/object:Word
    word: emi
    stem: emi
    docFrequency: 7.0
    docPositions:
    - 461
    - 477
    - 498
    - 1820
    - 1830
    - 1845
  till: !ruby/object:Word
    word: till
    stem: till
    docFrequency: 7.0
    docPositions:
    - 461
    - 932
    - 1094
    - 1820
    - 2190
    - 2296
  killed: !ruby/object:Word
    word: killed
    stem: kill
    docFrequency: 3.0
    docPositions:
    - 462
    - 1821
  plane: !ruby/object:Word
    word: plane
    stem: plane
    docFrequency: 3.0
    docPositions:
    - 462
    - 1821
  crash: !ruby/object:Word
    word: crash
    stem: crash
    docFrequency: 3.0
    docPositions:
    - 462
    - 1821
  filed: !ruby/object:Word
    word: filed
    stem: file
    docFrequency: 3.0
    docPositions:
    - 464
    - 1821
  patents: !ruby/object:Word
    word: patents
    stem: patent
    docFrequency: 5.0
    docPositions:
    - 464
    - 467
    - 1821
    - 1824
  write: !ruby/object:Word
    word: write
    stem: write
    docFrequency: 5.0
    docPositions:
    - 464
    - 466
    - 1821
    - 1823
  valuable: !ruby/object:Word
    word: valuable
    stem: valuabl
    docFrequency: 3.0
    docPositions:
    - 465
    - 1822
  commercial: !ruby/object:Word
    word: commercial
    stem: commerci
    docFrequency: 11.0
    docPositions:
    - 465
    - 548
    - 558
    - 569
    - 857
    - 1822
    - 1880
    - 1889
    - 1900
    - 2136
  firm: !ruby/object:Word
    word: firm
    stem: firm
    docFrequency: 5.0
    docPositions:
    - 465
    - 1336
    - 1822
    - 2443
  don: !ruby/object:Word
    word: don
    stem: don
    docFrequency: 5.0
    docPositions:
    - 466
    - 1823
  give: !ruby/object:Word
    word: give
    stem: give
    docFrequency: 3.0
    docPositions:
    - 466
    - 1823
  everybody: !ruby/object:Word
    word: everybody
    stem: everybodi
    docFrequency: 7.0
    docPositions:
    - 466
    - 702
    - 856
    - 1823
    - 2011
    - 2135
  file: !ruby/object:Word
    word: file
    stem: file
    docFrequency: 5.0
    docPositions:
    - 467
    - 1333
    - 1824
    - 2440
  death: !ruby/object:Word
    word: death
    stem: death
    docFrequency: 3.0
    docPositions:
    - 469
    - 1824
  association: !ruby/object:Word
    word: association
    stem: associ
    docFrequency: 3.0
    docPositions:
    - 470
    - 1825
  workers: !ruby/object:Word
    word: workers
    stem: worker
    docFrequency: 3.0
    docPositions:
    - 470
    - 1825
  unanimous: !ruby/object:Word
    word: unanimous
    stem: unanim
    docFrequency: 3.0
    docPositions:
    - 471
    - 1826
  done: !ruby/object:Word
    word: done
    stem: done
    docFrequency: 11.0
    docPositions:
    - 471
    - 524
    - 529
    - 748
    - 1009
    - 1826
    - 1863
    - 1868
    - 2046
    - 2241
  commercially: !ruby/object:Word
    word: commercially
    stem: commerci
    docFrequency: 3.0
    docPositions:
    - 472
    - 1827
  idealist: !ruby/object:Word
    word: idealist
    stem: idealist
    docFrequency: 3.0
    docPositions:
    - 472
    - 1827
  tried: !ruby/object:Word
    word: tried
    stem: tri
    docFrequency: 5.0
    docPositions:
    - 473
    - 485
    - 1828
    - 1836
  service: !ruby/object:Word
    word: service
    stem: servic
    docFrequency: 7.0
    docPositions:
    - 473
    - 476
    - 1092
    - 1828
    - 1829
    - 2294
  reduced: !ruby/object:Word
    word: reduced
    stem: reduc
    docFrequency: 3.0
    docPositions:
    - 474
    - 1829
  salary: !ruby/object:Word
    word: salary
    stem: salari
    docFrequency: 3.0
    docPositions:
    - 474
    - 1829
  commission: !ruby/object:Word
    word: commission
    stem: commiss
    docFrequency: 3.0
    docPositions:
    - 476
    - 1829
  ha: !ruby/object:Word
    word: ha
    stem: ha
    docFrequency: 5.0
    docPositions:
    - 477
    - 489
    - 1830
    - 1838
  thomas: !ruby/object:Word
    word: thomas
    stem: thoma
    docFrequency: 9.0
    docPositions:
    - 477
    - 489
    - 495
    - 926
    - 1830
    - 1838
    - 1842
    - 2186
  asked: !ruby/object:Word
    word: asked
    stem: ask
    docFrequency: 5.0
    docPositions:
    - 477
    - 495
    - 1830
    - 1842
  isn: !ruby/object:Word
    word: isn
    stem: isn
    docFrequency: 3.0
    docPositions:
    - 477
    - 1830
  'yes': !ruby/object:Word
    word: 'yes'
    stem: ye
    docFrequency: 3.0
    docPositions:
    - 478
    - 1831
  npl: !ruby/object:Word
    word: npl
    stem: npl
    docFrequency: 5.0
    docPositions:
    - 478
    - 495
    - 1831
    - 1842
  background: !ruby/object:Word
    word: background
    stem: background
    docFrequency: 3.0
    docPositions:
    - 480
    - 1831
  discovered: !ruby/object:Word
    word: discovered
    stem: discov
    docFrequency: 5.0
    docPositions:
    - 480
    - 1189
    - 1831
    - 2352
  turing: !ruby/object:Word
    word: turing
    stem: ture
    docFrequency: 11.0
    docPositions:
    - 481
    - 483
    - 486
    - 930
    - 955
    - 1832
    - 1834
    - 1837
    - 2190
    - 2205
  fact: !ruby/object:Word
    word: fact
    stem: fact
    docFrequency: 7.0
    docPositions:
    - 481
    - 824
    - 860
    - 1832
    - 2111
    - 2137
  logical: !ruby/object:Word
    word: logical
    stem: logic
    docFrequency: 3.0
    docPositions:
    - 482
    - 1833
  diagram: !ruby/object:Word
    word: diagram
    stem: diagram
    docFrequency: 3.0
    docPositions:
    - 482
    - 1833
  tackle: !ruby/object:Word
    word: tackle
    stem: tackl
    docFrequency: 3.0
    docPositions:
    - 483
    - 1834
  ace: !ruby/object:Word
    word: ace
    stem: ac
    docFrequency: 5.0
    docPositions:
    - 484
    - 503
    - 1835
    - 1848
  pilot: !ruby/object:Word
    word: pilot
    stem: pilot
    docFrequency: 5.0
    docPositions:
    - 484
    - 502
    - 1835
    - 1847
  model: !ruby/object:Word
    word: model
    stem: model
    docFrequency: 7.0
    docPositions:
    - 484
    - 502
    - 823
    - 1835
    - 1847
    - 2110
  failed: !ruby/object:Word
    word: failed
    stem: fail
    docFrequency: 3.0
    docPositions:
    - 485
    - 1836
  maligned: !ruby/object:Word
    word: maligned
    stem: malign
    docFrequency: 3.0
    docPositions:
    - 489
    - 1838
  idea: !ruby/object:Word
    word: idea
    stem: idea
    docFrequency: 7.0
    docPositions:
    - 490
    - 922
    - 1084
    - 1839
    - 2184
    - 2288
  recruit: !ruby/object:Word
    word: recruit
    stem: recruit
    docFrequency: 5.0
    docPositions:
    - 490
    - 495
    - 1839
    - 1842
  kind: !ruby/object:Word
    word: kind
    stem: kind
    docFrequency: 3.0
    docPositions:
    - 491
    - 1840
  necessary: !ruby/object:Word
    word: necessary
    stem: necessari
    docFrequency: 7.0
    docPositions:
    - 491
    - 530
    - 710
    - 1840
    - 1869
    - 2017
  knowledge: !ruby/object:Word
    word: knowledge
    stem: knowledg
    docFrequency: 3.0
    docPositions:
    - 496
    - 1843
  tubsy: !ruby/object:Word
    word: tubsy
    stem: tubsi
    docFrequency: 3.0
    docPositions:
    - 496
    - 1843
  clayden: !ruby/object:Word
    word: clayden
    stem: clayden
    docFrequency: 3.0
    docPositions:
    - 496
    - 1843
  recruited: !ruby/object:Word
    word: recruited
    stem: recruit
    docFrequency: 3.0
    docPositions:
    - 496
    - 1843
  parks: !ruby/object:Word
    word: parks
    stem: park
    docFrequency: 3.0
    docPositions:
    - 497
    - 1844
  roger: !ruby/object:Word
    word: roger
    stem: roger
    docFrequency: 9.0
    docPositions:
    - 497
    - 1179
    - 1483
    - 1844
    - 2346
    - 2530
  scantlebury: !ruby/object:Word
    word: scantlebury
    stem: scantleburi
    docFrequency: 3.0
    docPositions:
    - 497
    - 1844
  dad: !ruby/object:Word
    word: dad
    stem: dad
    docFrequency: 3.0
    docPositions:
    - 497
    - 1844
  extremely: !ruby/object:Word
    word: extremely
    stem: extrem
    docFrequency: 3.0
    docPositions:
    - 500
    - 1845
  derived: !ruby/object:Word
    word: derived
    stem: deriv
    docFrequency: 3.0
    docPositions:
    - 501
    - 1846
  doubting: !ruby/object:Word
    word: doubting
    stem: doubt
    docFrequency: 3.0
    docPositions:
    - 501
    - 1846
  reliable: !ruby/object:Word
    word: reliable
    stem: reliabl
    docFrequency: 11.0
    docPositions:
    - 502
    - 992
    - 1066
    - 1222
    - 1376
    - 1847
    - 2228
    - 2278
    - 2361
    - 2466
  visited: !ruby/object:Word
    word: visited
    stem: visit
    docFrequency: 7.0
    docPositions:
    - 505
    - 689
    - 892
    - 1848
    - 2002
    - 2160
  tre: !ruby/object:Word
    word: tre
    stem: tre
    docFrequency: 7.0
    docPositions:
    - 505
    - 510
    - 511
    - 1848
    - 1853
    - 1854
  forties: !ruby/object:Word
    word: forties
    stem: forti
    docFrequency: 3.0
    docPositions:
    - 505
    - 1848
  williams: !ruby/object:Word
    word: williams
    stem: william
    docFrequency: 19.0
    docPositions:
    - 505
    - 508
    - 509
    - 739
    - 756
    - 764
    - 883
    - 890
    - 897
    - 1848
    - 1851
    - 1852
    - 2040
    - 2053
    - 2061
    - 2154
    - 2158
    - 2163
  colleagues: !ruby/object:Word
    word: colleagues
    stem: colleagu
    docFrequency: 5.0
    docPositions:
    - 506
    - 950
    - 1849
    - 2202
  doing: !ruby/object:Word
    word: doing
    stem: do
    docFrequency: 5.0
    docPositions:
    - 506
    - 1032
    - 1849
    - 2254
  showed: !ruby/object:Word
    word: showed
    stem: show
    docFrequency: 5.0
    docPositions:
    - 507
    - 655
    - 1850
    - 1971
  tom: !ruby/object:Word
    word: tom
    stem: tom
    docFrequency: 5.0
    docPositions:
    - 507
    - 881
    - 1850
    - 2152
  kilburn: !ruby/object:Word
    word: kilburn
    stem: kilburn
    docFrequency: 19.0
    docPositions:
    - 507
    - 510
    - 881
    - 889
    - 936
    - 950
    - 969
    - 1072
    - 1074
    - 1099
    - 1850
    - 1853
    - 2152
    - 2192
    - 2202
    - 2280
    - 2299
  agrees: !ruby/object:Word
    word: agrees
    stem: agre
    docFrequency: 3.0
    docPositions:
    - 508
    - 1851
  afterwards: !ruby/object:Word
    word: afterwards
    stem: afterward
    docFrequency: 3.0
    docPositions:
    - 508
    - 1851
  dealt: !ruby/object:Word
    word: dealt
    stem: dealt
    docFrequency: 5.0
    docPositions:
    - 509
    - 516
    - 1852
    - 1857
  tell: !ruby/object:Word
    word: tell
    stem: tell
    docFrequency: 3.0
    docPositions:
    - 510
    - 1853
  widely: !ruby/object:Word
    word: widely
    stem: wide
    docFrequency: 7.0
    docPositions:
    - 511
    - 545
    - 626
    - 1854
    - 1877
    - 1947
  inventive: !ruby/object:Word
    word: inventive
    stem: invent
    docFrequency: 5.0
    docPositions:
    - 514
    - 530
    - 1855
    - 1869
  contemporaries: !ruby/object:Word
    word: contemporaries
    stem: contemporari
    docFrequency: 3.0
    docPositions:
    - 515
    - 1856
  light: !ruby/object:Word
    word: light
    stem: light
    docFrequency: 5.0
    docPositions:
    - 515
    - 681
    - 1856
    - 1996
  engineering: !ruby/object:Word
    word: engineering
    stem: engin
    docFrequency: 7.0
    docPositions:
    - 516
    - 855
    - 1116
    - 1857
    - 2134
    - 2310
  entirely: !ruby/object:Word
    word: entirely
    stem: entir
    docFrequency: 5.0
    docPositions:
    - 516
    - 1070
    - 1857
    - 2278
  communication: !ruby/object:Word
    word: communication
    stem: commun
    docFrequency: 7.0
    docPositions:
    - 516
    - 518
    - 523
    - 1857
    - 1859
    - 1862
  voice: !ruby/object:Word
    word: voice
    stem: voic
    docFrequency: 3.0
    docPositions:
    - 517
    - 1858
  transmission: !ruby/object:Word
    word: transmission
    stem: transmiss
    docFrequency: 5.0
    docPositions:
    - 517
    - 520
    - 1858
    - 1861
  wire: !ruby/object:Word
    word: wire
    stem: wire
    docFrequency: 3.0
    docPositions:
    - 517
    - 1858
  cable: !ruby/object:Word
    word: cable
    stem: cabl
    docFrequency: 3.0
    docPositions:
    - 517
    - 1858
  radio: !ruby/object:Word
    word: radio
    stem: radio
    docFrequency: 3.0
    docPositions:
    - 517
    - 1858
  books: !ruby/object:Word
    word: books
    stem: book
    docFrequency: 5.0
    docPositions:
    - 518
    - 873
    - 1859
    - 2146
  none: !ruby/object:Word
    word: none
    stem: none
    docFrequency: 3.0
    docPositions:
    - 519
    - 1860
  deals: !ruby/object:Word
    word: deals
    stem: deal
    docFrequency: 3.0
    docPositions:
    - 519
    - 1860
  nor: !ruby/object:Word
    word: nor
    stem: nor
    docFrequency: 5.0
    docPositions:
    - 520
    - 1225
    - 1861
    - 2364
  except: !ruby/object:Word
    word: except
    stem: except
    docFrequency: 3.0
    docPositions:
    - 520
    - 1861
  purely: !ruby/object:Word
    word: purely
    stem: pure
    docFrequency: 5.0
    docPositions:
    - 520
    - 678
    - 1861
    - 1993
  side: !ruby/object:Word
    word: side
    stem: side
    docFrequency: 3.0
    docPositions:
    - 520
    - 1861
  deal: !ruby/object:Word
    word: deal
    stem: deal
    docFrequency: 7.0
    docPositions:
    - 521
    - 917
    - 1247
    - 1862
    - 2179
    - 2378
  tasks: !ruby/object:Word
    word: tasks
    stem: task
    docFrequency: 3.0
    docPositions:
    - 521
    - 1862
  posed: !ruby/object:Word
    word: posed
    stem: pose
    docFrequency: 3.0
    docPositions:
    - 521
    - 1862
  television: !ruby/object:Word
    word: television
    stem: televis
    docFrequency: 5.0
    docPositions:
    - 521
    - 527
    - 1862
    - 1866
  control: !ruby/object:Word
    word: control
    stem: control
    docFrequency: 23.0
    docPositions:
    - 523
    - 528
    - 586
    - 621
    - 670
    - 694
    - 697
    - 699
    - 1160
    - 1382
    - 1402
    - 1862
    - 1867
    - 1913
    - 1942
    - 1985
    - 2004
    - 2007
    - 2009
    - 2336
    - 2470
    - 2484
  switching: !ruby/object:Word
    word: switching
    stem: switch
    docFrequency: 5.0
    docPositions:
    - 523
    - 528
    - 1862
    - 1867
  functions: !ruby/object:Word
    word: functions
    stem: function
    docFrequency: 9.0
    docPositions:
    - 524
    - 1161
    - 1162
    - 1418
    - 1863
    - 2337
    - 2338
    - 2494
  mechanically: !ruby/object:Word
    word: mechanically
    stem: mechan
    docFrequency: 3.0
    docPositions:
    - 524
    - 1863
  electrically: !ruby/object:Word
    word: electrically
    stem: electr
    docFrequency: 5.0
    docPositions:
    - 524
    - 529
    - 1863
    - 1868
  relays: !ruby/object:Word
    word: relays
    stem: relai
    docFrequency: 3.0
    docPositions:
    - 525
    - 1864
  recently: !ruby/object:Word
    word: recently
    stem: recent
    docFrequency: 3.0
    docPositions:
    - 526
    - 1865
  advent: !ruby/object:Word
    word: advent
    stem: advent
    docFrequency: 3.0
    docPositions:
    - 526
    - 1865
  electronics: !ruby/object:Word
    word: electronics
    stem: electron
    docFrequency: 3.0
    docPositions:
    - 527
    - 1866
  radars: !ruby/object:Word
    word: radars
    stem: radar
    docFrequency: 3.0
    docPositions:
    - 528
    - 1867
  iconoclast: !ruby/object:Word
    word: iconoclast
    stem: iconoclast
    docFrequency: 3.0
    docPositions:
    - 529
    - 1868
  break: !ruby/object:Word
    word: break
    stem: break
    docFrequency: 3.0
    docPositions:
    - 530
    - 1869
  article: !ruby/object:Word
    word: article
    stem: articl
    docFrequency: 3.0
    docPositions:
    - 533
    - 1870
  edited: !ruby/object:Word
    word: edited
    stem: edit
    docFrequency: 3.0
    docPositions:
    - 533
    - 1870
  transcript: !ruby/object:Word
    word: transcript
    stem: transcript
    docFrequency: 3.0
    docPositions:
    - 533
    - 1870
  perhaps: !ruby/object:Word
    word: perhaps
    stem: perhap
    docFrequency: 9.0
    docPositions:
    - 541
    - 903
    - 1188
    - 1454
    - 1873
    - 2169
    - 2351
    - 2517
  third: !ruby/object:Word
    word: third
    stem: third
    docFrequency: 11.0
    docPositions:
    - 541
    - 1007
    - 1154
    - 1176
    - 1451
    - 1873
    - 2239
    - 2332
    - 2343
    - 2516
  largest: !ruby/object:Word
    word: largest
    stem: largest
    docFrequency: 3.0
    docPositions:
    - 541
    - 1873
  remarkably: !ruby/object:Word
    word: remarkably
    stem: remark
    docFrequency: 3.0
    docPositions:
    - 542
    - 1874
  president: !ruby/object:Word
    word: president
    stem: presid
    docFrequency: 9.0
    docPositions:
    - 543
    - 728
    - 1176
    - 1179
    - 1875
    - 2033
    - 2343
    - 2346
  ken: !ruby/object:Word
    word: ken
    stem: ken
    docFrequency: 7.0
    docPositions:
    - 543
    - 727
    - 765
    - 1875
    - 2032
    - 2062
  olsen: !ruby/object:Word
    word: olsen
    stem: olsen
    docFrequency: 15.0
    docPositions:
    - 543
    - 727
    - 765
    - 776
    - 799
    - 807
    - 841
    - 1875
    - 2032
    - 2062
    - 2071
    - 2088
    - 2096
    - 2122
  student: !ruby/object:Word
    word: student
    stem: student
    docFrequency: 5.0
    docPositions:
    - 544
    - 882
    - 1876
    - 2153
  mit: !ruby/object:Word
    word: mit
    stem: mit
    docFrequency: 23.0
    docPositions:
    - 544
    - 598
    - 604
    - 605
    - 689
    - 718
    - 721
    - 764
    - 793
    - 1283
    - 1288
    - 1876
    - 1923
    - 1929
    - 1930
    - 2002
    - 2025
    - 2028
    - 2061
    - 2084
    - 2403
    - 2408
  key: !ruby/object:Word
    word: key
    stem: kei
    docFrequency: 3.0
    docPositions:
    - 544
    - 1876
  credited: !ruby/object:Word
    word: credited
    stem: credit
    docFrequency: 3.0
    docPositions:
    - 545
    - 1877
  producing: !ruby/object:Word
    word: producing
    stem: produc
    docFrequency: 3.0
    docPositions:
    - 545
    - 1877
  desktop: !ruby/object:Word
    word: desktop
    stem: desktop
    docFrequency: 3.0
    docPositions:
    - 545
    - 1877
  minicomputer: !ruby/object:Word
    word: minicomputer
    stem: minicomput
    docFrequency: 9.0
    docPositions:
    - 546
    - 578
    - 662
    - 1878
    - 1907
    - 1977
  style: !ruby/object:Word
    word: style
    stem: style
    docFrequency: 9.0
    docPositions:
    - 546
    - 822
    - 826
    - 1417
    - 1878
    - 2109
    - 2113
    - 2493
  architecture: !ruby/object:Word
    word: architecture
    stem: architectur
    docFrequency: 11.0
    docPositions:
    - 547
    - 688
    - 795
    - 1148
    - 1149
    - 1879
    - 2001
    - 2086
    - 2328
    - 2329
  word: !ruby/object:Word
    word: word
    stem: word
    docFrequency: 25.0
    docPositions:
    - 548
    - 615
    - 618
    - 623
    - 636
    - 782
    - 853
    - 1039
    - 1049
    - 1188
    - 1425
    - 1880
    - 1936
    - 1939
    - 1944
    - 1955
    - 2075
    - 2132
    - 2259
    - 2265
    - 2351
    - 2499
  length: !ruby/object:Word
    word: length
    stem: length
    docFrequency: 5.0
    docPositions:
    - 548
    - 619
    - 1880
    - 1940
  dominated: !ruby/object:Word
    word: dominated
    stem: domin
    docFrequency: 7.0
    docPositions:
    - 548
    - 580
    - 624
    - 1880
    - 1909
    - 1945
  spring: !ruby/object:Word
    word: spring
    stem: spring
    docFrequency: 3.0
    docPositions:
    - 549
    - 1881
  fully: !ruby/object:Word
    word: fully
    stem: fulli
    docFrequency: 3.0
    docPositions:
    - 549
    - 1881
  minds: !ruby/object:Word
    word: minds
    stem: mind
    docFrequency: 3.0
    docPositions:
    - 550
    - 1882
  designers: !ruby/object:Word
    word: designers
    stem: design
    docFrequency: 9.0
    docPositions:
    - 550
    - 644
    - 752
    - 775
    - 1882
    - 1963
    - 2049
    - 2070
  show: !ruby/object:Word
    word: show
    stem: show
    docFrequency: 7.0
    docPositions:
    - 550
    - 738
    - 1442
    - 1882
    - 2039
    - 2509
  programmable: !ruby/object:Word
    word: programmable
    stem: programm
    docFrequency: 5.0
    docPositions:
    - 551
    - 852
    - 1883
    - 2131
  constructed: !ruby/object:Word
    word: constructed
    stem: construct
    docFrequency: 9.0
    docPositions:
    - 551
    - 591
    - 760
    - 1286
    - 1883
    - 1918
    - 2057
    - 2406
  united: !ruby/object:Word
    word: united
    stem: unit
    docFrequency: 5.0
    docPositions:
    - 552
    - 592
    - 1884
    - 1919
  states: !ruby/object:Word
    word: states
    stem: state
    docFrequency: 7.0
    docPositions:
    - 552
    - 592
    - 891
    - 1884
    - 1919
    - 2159
  direct: !ruby/object:Word
    word: direct
    stem: direct
    docFrequency: 7.0
    docPositions:
    - 552
    - 816
    - 819
    - 1884
    - 2103
    - 2106
  parent: !ruby/object:Word
    word: parent
    stem: parent
    docFrequency: 5.0
    docPositions:
    - 552
    - 1456
    - 1884
    - 2519
  series: !ruby/object:Word
    word: series
    stem: seri
    docFrequency: 5.0
    docPositions:
    - 553
    - 847
    - 1885
    - 2126
  sixteen: !ruby/object:Word
    word: sixteen
    stem: sixteen
    docFrequency: 17.0
    docPositions:
    - 554
    - 612
    - 620
    - 641
    - 642
    - 651
    - 659
    - 782
    - 1886
    - 1933
    - 1941
    - 1960
    - 1961
    - 1967
    - 1975
    - 2075
  bit: !ruby/object:Word
    word: bit
    stem: bit
    docFrequency: 51.0
    docPositions:
    - 554
    - 612
    - 615
    - 626
    - 629
    - 637
    - 638
    - 640
    - 641
    - 648
    - 782
    - 830
    - 832
    - 984
    - 999
    - 1015
    - 1016
    - 1039
    - 1052
    - 1124
    - 1125
    - 1165
    - 1886
    - 1933
    - 1936
    - 1947
    - 1950
    - 1956
    - 1957
    - 1959
    - 1960
    - 1967
    - 2075
    - 2115
    - 2117
    - 2224
    - 2233
    - 2245
    - 2246
    - 2259
    - 2268
    - 2314
    - 2315
    - 2339
  microprocessors: !ruby/object:Word
    word: microprocessors
    stem: microprocessor
    docFrequency: 7.0
    docPositions:
    - 554
    - 823
    - 825
    - 1886
    - 2110
    - 2112
  although: !ruby/object:Word
    word: although
    stem: although
    docFrequency: 9.0
    docPositions:
    - 555
    - 661
    - 772
    - 843
    - 1886
    - 1976
    - 2067
    - 2124
  distinctions: !ruby/object:Word
    word: distinctions
    stem: distinct
    docFrequency: 3.0
    docPositions:
    - 555
    - 1886
  nowadays: !ruby/object:Word
    word: nowadays
    stem: nowadai
    docFrequency: 5.0
    docPositions:
    - 555
    - 579
    - 1886
    - 1908
  becoming: !ruby/object:Word
    word: becoming
    stem: becom
    docFrequency: 3.0
    docPositions:
    - 555
    - 1886
  blurred: !ruby/object:Word
    word: blurred
    stem: blur
    docFrequency: 3.0
    docPositions:
    - 555
    - 1886
  traditionally: !ruby/object:Word
    word: traditionally
    stem: tradition
    docFrequency: 3.0
    docPositions:
    - 556
    - 1887
  divided: !ruby/object:Word
    word: divided
    stem: divid
    docFrequency: 3.0
    docPositions:
    - 556
    - 1887
  application: !ruby/object:Word
    word: application
    stem: applic
    docFrequency: 5.0
    docPositions:
    - 557
    - 644
    - 1888
    - 1963
  floating: !ruby/object:Word
    word: floating
    stem: float
    docFrequency: 9.0
    docPositions:
    - 558
    - 961
    - 1015
    - 1124
    - 1889
    - 2209
    - 2245
    - 2314
  arithmetic: !ruby/object:Word
    word: arithmetic
    stem: arithmet
    docFrequency: 9.0
    docPositions:
    - 558
    - 617
    - 623
    - 1009
    - 1889
    - 1938
    - 1944
    - 2241
  requires: !ruby/object:Word
    word: requires
    stem: requir
    docFrequency: 5.0
    docPositions:
    - 559
    - 560
    - 1890
    - 1891
  large: !ruby/object:Word
    word: large
    stem: larg
    docFrequency: 17.0
    docPositions:
    - 559
    - 624
    - 669
    - 677
    - 777
    - 785
    - 1272
    - 1325
    - 1890
    - 1945
    - 1984
    - 1992
    - 2072
    - 2078
    - 2394
    - 2436
  databases: !ruby/object:Word
    word: databases
    stem: databas
    docFrequency: 3.0
    docPositions:
    - 559
    - 1890
  relatively: !ruby/object:Word
    word: relatively
    stem: rel
    docFrequency: 5.0
    docPositions:
    - 560
    - 586
    - 1891
    - 1913
  simple: !ruby/object:Word
    word: simple
    stem: simpl
    docFrequency: 3.0
    docPositions:
    - 560
    - 1891
  performed: !ruby/object:Word
    word: performed
    stem: perform
    docFrequency: 9.0
    docPositions:
    - 561
    - 686
    - 718
    - 1426
    - 1892
    - 1999
    - 2025
    - 2500
  highest: !ruby/object:Word
    word: highest
    stem: highest
    docFrequency: 3.0
    docPositions:
    - 561
    - 1892
  return: !ruby/object:Word
    word: return
    stem: return
    docFrequency: 3.0
    docPositions:
    - 562
    - 1893
  results: !ruby/object:Word
    word: results
    stem: result
    docFrequency: 3.0
    docPositions:
    - 562
    - 1893
  within: !ruby/object:Word
    word: within
    stem: within
    docFrequency: 9.0
    docPositions:
    - 562
    - 1385
    - 1386
    - 1460
    - 1893
    - 2471
    - 2472
    - 2523
  timeframe: !ruby/object:Word
    word: timeframe
    stem: timefram
    docFrequency: 3.0
    docPositions:
    - 562
    - 1893
  monitored: !ruby/object:Word
    word: monitored
    stem: monitor
    docFrequency: 3.0
    docPositions:
    - 563
    - 1894
  car: !ruby/object:Word
    word: car
    stem: car
    docFrequency: 3.0
    docPositions:
    - 563
    - 1894
  engine: !ruby/object:Word
    word: engine
    stem: engin
    docFrequency: 3.0
    docPositions:
    - 563
    - 1894
  management: !ruby/object:Word
    word: management
    stem: manag
    docFrequency: 3.0
    docPositions:
    - 563
    - 1894
  systems: !ruby/object:Word
    word: systems
    stem: system
    docFrequency: 17.0
    docPositions:
    - 563
    - 572
    - 585
    - 586
    - 802
    - 859
    - 895
    - 1084
    - 1894
    - 1903
    - 1912
    - 1913
    - 2091
    - 2136
    - 2163
    - 2288
  flight: !ruby/object:Word
    word: flight
    stem: flight
    docFrequency: 11.0
    docPositions:
    - 564
    - 1340
    - 1341
    - 1345
    - 1362
    - 1895
    - 2445
    - 2446
    - 2448
    - 2459
  simulators: !ruby/object:Word
    word: simulators
    stem: simul
    docFrequency: 5.0
    docPositions:
    - 564
    - 1367
    - 1895
    - 2462
  inside: !ruby/object:Word
    word: inside
    stem: insid
    docFrequency: 7.0
    docPositions:
    - 564
    - 1384
    - 1404
    - 1895
    - 2470
    - 2486
  washing: !ruby/object:Word
    word: washing
    stem: wash
    docFrequency: 3.0
    docPositions:
    - 564
    - 1895
  examples: !ruby/object:Word
    word: examples
    stem: exampl
    docFrequency: 5.0
    docPositions:
    - 565
    - 1263
    - 1896
    - 2390
  old: !ruby/object:Word
    word: old
    stem: old
    docFrequency: 7.0
    docPositions:
    - 566
    - 1248
    - 1324
    - 1897
    - 2379
    - 2435
  joke: !ruby/object:Word
    word: joke
    stem: joke
    docFrequency: 3.0
    docPositions:
    - 566
    - 1897
  defines: !ruby/object:Word
    word: defines
    stem: defin
    docFrequency: 3.0
    docPositions:
    - 566
    - 1897
  programmer: !ruby/object:Word
    word: programmer
    stem: programm
    docFrequency: 7.0
    docPositions:
    - 566
    - 569
    - 571
    - 1897
    - 1900
    - 1902
  types: !ruby/object:Word
    word: types
    stem: type
    docFrequency: 5.0
    docPositions:
    - 567
    - 569
    - 1898
    - 1900
  processes: !ruby/object:Word
    word: processes
    stem: process
    docFrequency: 3.0
    docPositions:
    - 567
    - 1898
  week: !ruby/object:Word
    word: week
    stem: week
    docFrequency: 3.0
    docPositions:
    - 567
    - 1898
  prints: !ruby/object:Word
    word: prints
    stem: print
    docFrequency: 5.0
    docPositions:
    - 568
    - 569
    - 1899
    - 1900
  token: !ruby/object:Word
    word: token
    stem: token
    docFrequency: 3.0
    docPositions:
    - 568
    - 1899
  thousand: !ruby/object:Word
    word: thousand
    stem: thousand
    docFrequency: 3.0
    docPositions:
    - 570
    - 1901
  doesn: !ruby/object:Word
    word: doesn
    stem: doesn
    docFrequency: 3.0
    docPositions:
    - 571
    - 1902
  numbers: !ruby/object:Word
    word: numbers
    stem: number
    docFrequency: 7.0
    docPositions:
    - 572
    - 629
    - 1052
    - 1903
    - 1950
    - 2268
  embedded: !ruby/object:Word
    word: embedded
    stem: embed
    docFrequency: 7.0
    docPositions:
    - 572
    - 577
    - 585
    - 1903
    - 1906
    - 1912
  keyboards: !ruby/object:Word
    word: keyboards
    stem: keyboard
    docFrequency: 5.0
    docPositions:
    - 572
    - 863
    - 1903
    - 2140
  ways: !ruby/object:Word
    word: ways
    stem: wai
    docFrequency: 5.0
    docPositions:
    - 574
    - 1279
    - 1903
    - 2399
  cinderella: !ruby/object:Word
    word: cinderella
    stem: cinderella
    docFrequency: 3.0
    docPositions:
    - 574
    - 1903
  mainly: !ruby/object:Word
    word: mainly
    stem: mainli
    docFrequency: 3.0
    docPositions:
    - 575
    - 1904
  province: !ruby/object:Word
    word: province
    stem: provinc
    docFrequency: 5.0
    docPositions:
    - 575
    - 857
    - 1904
    - 2136
  engineers: !ruby/object:Word
    word: engineers
    stem: engin
    docFrequency: 7.0
    docPositions:
    - 575
    - 589
    - 850
    - 1904
    - 1916
    - 2129
  capable: !ruby/object:Word
    word: capable
    stem: capabl
    docFrequency: 5.0
    docPositions:
    - 575
    - 599
    - 1904
    - 1924
  squeezing: !ruby/object:Word
    word: squeezing
    stem: squeez
    docFrequency: 3.0
    docPositions:
    - 576
    - 1905
  ounce: !ruby/object:Word
    word: ounce
    stem: ounc
    docFrequency: 3.0
    docPositions:
    - 576
    - 1905
  low: !ruby/object:Word
    word: low
    stem: low
    docFrequency: 7.0
    docPositions:
    - 577
    - 713
    - 850
    - 1906
    - 2020
    - 2129
  cost: !ruby/object:Word
    word: cost
    stem: cost
    docFrequency: 21.0
    docPositions:
    - 577
    - 672
    - 779
    - 850
    - 965
    - 1077
    - 1153
    - 1244
    - 1906
    - 1987
    - 2074
    - 2129
    - 2213
    - 2283
    - 2331
    - 2377
  product: !ruby/object:Word
    word: product
    stem: product
    docFrequency: 3.0
    docPositions:
    - 578
    - 1907
  microprocessor: !ruby/object:Word
    word: microprocessor
    stem: microprocessor
    docFrequency: 3.0
    docPositions:
    - 579
    - 1908
  naturally: !ruby/object:Word
    word: naturally
    stem: natur
    docFrequency: 5.0
    docPositions:
    - 580
    - 642
    - 1909
    - 1961
  live: !ruby/object:Word
    word: live
    stem: live
    docFrequency: 5.0
    docPositions:
    - 581
    - 789
    - 1910
    - 2082
  domain: !ruby/object:Word
    word: domain
    stem: domain
    docFrequency: 5.0
    docPositions:
    - 581
    - 1302
    - 1910
    - 2420
  strong: !ruby/object:Word
    word: strong
    stem: strong
    docFrequency: 3.0
    docPositions:
    - 582
    - 1911
  affinity: !ruby/object:Word
    word: affinity
    stem: affin
    docFrequency: 3.0
    docPositions:
    - 582
    - 1911
  cheap: !ruby/object:Word
    word: cheap
    stem: cheap
    docFrequency: 5.0
    docPositions:
    - 585
    - 1118
    - 1912
    - 2312
  recent: !ruby/object:Word
    word: recent
    stem: recent
    docFrequency: 7.0
    docPositions:
    - 586
    - 764
    - 805
    - 1913
    - 2061
    - 2094
  phenomenon: !ruby/object:Word
    word: phenomenon
    stem: phenomenon
    docFrequency: 3.0
    docPositions:
    - 586
    - 1913
  general: !ruby/object:Word
    word: general
    stem: gener
    docFrequency: 11.0
    docPositions:
    - 587
    - 603
    - 712
    - 760
    - 839
    - 1914
    - 1928
    - 2019
    - 2057
    - 2120
  'true': !ruby/object:Word
    word: 'true'
    stem: 'true'
    docFrequency: 3.0
    docPositions:
    - 587
    - 1914
  specific: !ruby/object:Word
    word: specific
    stem: specif
    docFrequency: 9.0
    docPositions:
    - 587
    - 644
    - 1447
    - 1511
    - 1914
    - 1963
    - 2512
    - 2540
  minicomputers: !ruby/object:Word
    word: minicomputers
    stem: minicomput
    docFrequency: 3.0
    docPositions:
    - 588
    - 1915
  especially: !ruby/object:Word
    word: especially
    stem: especi
    docFrequency: 9.0
    docPositions:
    - 588
    - 900
    - 1159
    - 1513
    - 1915
    - 2166
    - 2335
    - 2542
  seriously: !ruby/object:Word
    word: seriously
    stem: serious
    docFrequency: 3.0
    docPositions:
    - 589
    - 1916
  dedicating: !ruby/object:Word
    word: dedicating
    stem: dedic
    docFrequency: 3.0
    docPositions:
    - 589
    - 1916
  entire: !ruby/object:Word
    word: entire
    stem: entir
    docFrequency: 3.0
    docPositions:
    - 590
    - 1917
  experiment: !ruby/object:Word
    word: experiment
    stem: experi
    docFrequency: 5.0
    docPositions:
    - 590
    - 716
    - 1917
    - 2023
  instrument: !ruby/object:Word
    word: instrument
    stem: instrument
    docFrequency: 5.0
    docPositions:
    - 590
    - 1282
    - 1917
    - 2402
  turns: !ruby/object:Word
    word: turns
    stem: turn
    docFrequency: 3.0
    docPositions:
    - 591
    - 1918
  architectural: !ruby/object:Word
    word: architectural
    stem: architectur
    docFrequency: 3.0
    docPositions:
    - 593
    - 1920
  template: !ruby/object:Word
    word: template
    stem: templat
    docFrequency: 3.0
    docPositions:
    - 594
    - 1921
  minis: !ruby/object:Word
    word: minis
    stem: mini
    docFrequency: 5.0
    docPositions:
    - 594
    - 614
    - 1921
    - 1935
  micros: !ruby/object:Word
    word: micros
    stem: micro
    docFrequency: 5.0
    docPositions:
    - 594
    - 614
    - 1921
    - 1935
  come: !ruby/object:Word
    word: come
    stem: come
    docFrequency: 7.0
    docPositions:
    - 594
    - 652
    - 1146
    - 1921
    - 1968
    - 2326
  whirlwind: !ruby/object:Word
    word: whirlwind
    stem: whirlwind
    docFrequency: 45.0
    docPositions:
    - 595
    - 618
    - 636
    - 641
    - 643
    - 661
    - 677
    - 678
    - 679
    - 680
    - 684
    - 691
    - 701
    - 707
    - 716
    - 725
    - 731
    - 754
    - 767
    - 772
    - 774
    - 865
    - 1922
    - 1939
    - 1955
    - 1960
    - 1962
    - 1976
    - 1992
    - 1993
    - 1994
    - 1995
    - 1997
    - 2004
    - 2010
    - 2014
    - 2023
    - 2030
    - 2034
    - 2051
    - 2064
    - 2067
    - 2069
    - 2142
  navy: !ruby/object:Word
    word: navy
    stem: navi
    docFrequency: 5.0
    docPositions:
    - 597
    - 708
    - 1922
    - 2015
  contracted: !ruby/object:Word
    word: contracted
    stem: contract
    docFrequency: 3.0
    docPositions:
    - 597
    - 1922
  masachussets: !ruby/object:Word
    word: masachussets
    stem: masachusset
    docFrequency: 3.0
    docPositions:
    - 597
    - 1922
  institute: !ruby/object:Word
    word: institute
    stem: institut
    docFrequency: 3.0
    docPositions:
    - 597
    - 1922
  technology: !ruby/object:Word
    word: technology
    stem: technolog
    docFrequency: 7.0
    docPositions:
    - 598
    - 874
    - 1147
    - 1923
    - 2147
    - 2327
  aeroplane: !ruby/object:Word
    word: aeroplane
    stem: aeroplan
    docFrequency: 5.0
    docPositions:
    - 598
    - 599
    - 1923
    - 1924
  simulator: !ruby/object:Word
    word: simulator
    stem: simul
    docFrequency: 15.0
    docPositions:
    - 598
    - 1340
    - 1341
    - 1345
    - 1350
    - 1357
    - 1362
    - 1923
    - 2445
    - 2446
    - 2448
    - 2451
    - 2456
    - 2459
  solving: !ruby/object:Word
    word: solving
    stem: solv
    docFrequency: 3.0
    docPositions:
    - 599
    - 1924
  equations: !ruby/object:Word
    word: equations
    stem: equat
    docFrequency: 3.0
    docPositions:
    - 599
    - 1924
  thus: !ruby/object:Word
    word: thus
    stem: thu
    docFrequency: 11.0
    docPositions:
    - 600
    - 883
    - 993
    - 1350
    - 1491
    - 1925
    - 2154
    - 2229
    - 2451
    - 2533
  investigate: !ruby/object:Word
    word: investigate
    stem: investig
    docFrequency: 3.0
    docPositions:
    - 600
    - 1925
  instability: !ruby/object:Word
    word: instability
    stem: instabl
    docFrequency: 3.0
    docPositions:
    - 601
    - 1926
  aircraft: !ruby/object:Word
    word: aircraft
    stem: aircraft
    docFrequency: 9.0
    docPositions:
    - 601
    - 710
    - 712
    - 1238
    - 1926
    - 2017
    - 2019
    - 2373
  designs: !ruby/object:Word
    word: designs
    stem: design
    docFrequency: 5.0
    docPositions:
    - 601
    - 755
    - 1926
    - 2052
  analogue: !ruby/object:Word
    word: analogue
    stem: analogu
    docFrequency: 7.0
    docPositions:
    - 602
    - 610
    - 1281
    - 1927
    - 1932
    - 2401
  purpose: !ruby/object:Word
    word: purpose
    stem: purpos
    docFrequency: 7.0
    docPositions:
    - 603
    - 680
    - 840
    - 1928
    - 1995
    - 2121
  laboratory: !ruby/object:Word
    word: laboratory
    stem: laboratori
    docFrequency: 19.0
    docPositions:
    - 604
    - 673
    - 720
    - 776
    - 794
    - 845
    - 872
    - 1282
    - 1929
    - 1988
    - 2027
    - 2071
    - 2085
    - 2126
    - 2145
    - 2402
  renamed: !ruby/object:Word
    word: renamed
    stem: renam
    docFrequency: 3.0
    docPositions:
    - 604
    - 1929
  maurice: !ruby/object:Word
    word: maurice
    stem: mauric
    docFrequency: 7.0
    docPositions:
    - 605
    - 665
    - 689
    - 1930
    - 1980
    - 2002
  wilkes: !ruby/object:Word
    word: wilkes
    stem: wilk
    docFrequency: 9.0
    docPositions:
    - 605
    - 666
    - 689
    - 1930
    - 1981
    - 2002
  contacts: !ruby/object:Word
    word: contacts
    stem: contact
    docFrequency: 5.0
    docPositions:
    - 605
    - 1436
    - 1930
    - 2505
  says: !ruby/object:Word
    word: says
    stem: sai
    docFrequency: 3.0
    docPositions:
    - 606
    - 1931
  memoirs: !ruby/object:Word
    word: memoirs
    stem: memoir
    docFrequency: 3.0
    docPositions:
    - 606
    - 1931
  pillars: !ruby/object:Word
    word: pillars
    stem: pillar
    docFrequency: 3.0
    docPositions:
    - 609
    - 1931
  orthodoxy: !ruby/object:Word
    word: orthodoxy
    stem: orthodoxi
    docFrequency: 3.0
    docPositions:
    - 610
    - 1932
  suspect: !ruby/object:Word
    word: suspect
    stem: suspect
    docFrequency: 3.0
    docPositions:
    - 610
    - 1932
  address: !ruby/object:Word
    word: address
    stem: address
    docFrequency: 13.0
    docPositions:
    - 612
    - 624
    - 628
    - 648
    - 653
    - 782
    - 1933
    - 1945
    - 1949
    - 1967
    - 1969
    - 2075
  processor: !ruby/object:Word
    word: processor
    stem: processor
    docFrequency: 23.0
    docPositions:
    - 612
    - 814
    - 818
    - 853
    - 1124
    - 1216
    - 1222
    - 1225
    - 1249
    - 1288
    - 1425
    - 1933
    - 2101
    - 2105
    - 2132
    - 2314
    - 2357
    - 2361
    - 2364
    - 2380
    - 2408
    - 2499
  arrangement: !ruby/object:Word
    word: arrangement
    stem: arrang
    docFrequency: 5.0
    docPositions:
    - 613
    - 827
    - 1934
    - 2114
  familiar: !ruby/object:Word
    word: familiar
    stem: familiar
    docFrequency: 3.0
    docPositions:
    - 613
    - 1934
  anybody: !ruby/object:Word
    word: anybody
    stem: anybodi
    docFrequency: 3.0
    docPositions:
    - 613
    - 1934
  heretical: !ruby/object:Word
    word: heretical
    stem: heret
    docFrequency: 3.0
    docPositions:
    - 615
    - 1936
  typical: !ruby/object:Word
    word: typical
    stem: typic
    docFrequency: 3.0
    docPositions:
    - 615
    - 1936
  lengths: !ruby/object:Word
    word: lengths
    stem: length
    docFrequency: 3.0
    docPositions:
    - 615
    - 1936
  bits: !ruby/object:Word
    word: bits
    stem: bit
    docFrequency: 35.0
    docPositions:
    - 616
    - 620
    - 656
    - 658
    - 785
    - 987
    - 988
    - 1006
    - 1009
    - 1011
    - 1013
    - 1019
    - 1039
    - 1040
    - 1126
    - 1164
    - 1436
    - 1937
    - 1941
    - 1972
    - 1974
    - 2078
    - 2225
    - 2226
    - 2238
    - 2241
    - 2243
    - 2247
    - 2259
    - 2260
    - 2316
    - 2338
    - 2505
  figure: !ruby/object:Word
    word: figure
    stem: figur
    docFrequency: 3.0
    docPositions:
    - 617
    - 1938
  von: !ruby/object:Word
    word: von
    stem: von
    docFrequency: 7.0
    docPositions:
    - 617
    - 630
    - 866
    - 1938
    - 1951
    - 2143
  neumann: !ruby/object:Word
    word: neumann
    stem: neumann
    docFrequency: 7.0
    docPositions:
    - 617
    - 630
    - 867
    - 1938
    - 1951
    - 2144
  criticised: !ruby/object:Word
    word: criticised
    stem: criticis
    docFrequency: 3.0
    docPositions:
    - 618
    - 1939
  saying: !ruby/object:Word
    word: saying
    stem: sai
    docFrequency: 3.0
    docPositions:
    - 618
    - 1939
  short: !ruby/object:Word
    word: short
    stem: short
    docFrequency: 7.0
    docPositions:
    - 618
    - 818
    - 1014
    - 1939
    - 2105
    - 2244
  ability: !ruby/object:Word
    word: ability
    stem: abil
    docFrequency: 3.0
    docPositions:
    - 619
    - 1940
  adequate: !ruby/object:Word
    word: adequate
    stem: adequ
    docFrequency: 3.0
    docPositions:
    - 621
    - 1942
  sensing: !ruby/object:Word
    word: sensing
    stem: sens
    docFrequency: 3.0
    docPositions:
    - 621
    - 1942
  applications: !ruby/object:Word
    word: applications
    stem: applic
    docFrequency: 3.0
    docPositions:
    - 621
    - 1942
  perform: !ruby/object:Word
    word: perform
    stem: perform
    docFrequency: 3.0
    docPositions:
    - 622
    - 1943
  multiword: !ruby/object:Word
    word: multiword
    stem: multiword
    docFrequency: 3.0
    docPositions:
    - 622
    - 1943
  interestingly: !ruby/object:Word
    word: interestingly
    stem: interestingli
    docFrequency: 3.0
    docPositions:
    - 623
    - 1944
  size: !ruby/object:Word
    word: size
    stem: size
    docFrequency: 9.0
    docPositions:
    - 623
    - 625
    - 636
    - 1121
    - 1944
    - 1946
    - 1955
    - 2313
  data: !ruby/object:Word
    word: data
    stem: data
    docFrequency: 11.0
    docPositions:
    - 625
    - 782
    - 857
    - 1129
    - 1335
    - 1946
    - 2075
    - 2136
    - 2317
    - 2442
  manipulated: !ruby/object:Word
    word: manipulated
    stem: manipul
    docFrequency: 5.0
    docPositions:
    - 625
    - 1420
    - 1946
    - 2496
  hence: !ruby/object:Word
    word: hence
    stem: henc
    docFrequency: 3.0
    docPositions:
    - 625
    - 1946
  towards: !ruby/object:Word
    word: towards
    stem: toward
    docFrequency: 7.0
    docPositions:
    - 626
    - 984
    - 1217
    - 1947
    - 2224
    - 2358
  architectures: !ruby/object:Word
    word: architectures
    stem: architectur
    docFrequency: 3.0
    docPositions:
    - 626
    - 1947
  mips: !ruby/object:Word
    word: mips
    stem: mip
    docFrequency: 3.0
    docPositions:
    - 627
    - 1948
  alpha: !ruby/object:Word
    word: alpha
    stem: alpha
    docFrequency: 3.0
    docPositions:
    - 627
    - 1948
  devices: !ruby/object:Word
    word: devices
    stem: devic
    docFrequency: 7.0
    docPositions:
    - 627
    - 826
    - 898
    - 1948
    - 2113
    - 2164
  driven: !ruby/object:Word
    word: driven
    stem: driven
    docFrequency: 3.0
    docPositions:
    - 627
    - 1948
  directly: !ruby/object:Word
    word: directly
    stem: directli
    docFrequency: 3.0
    docPositions:
    - 628
    - 1949
  byte: !ruby/object:Word
    word: byte
    stem: byte
    docFrequency: 3.0
    docPositions:
    - 628
    - 1949
  spaces: !ruby/object:Word
    word: spaces
    stem: space
    docFrequency: 3.0
    docPositions:
    - 628
    - 1949
  manipulate: !ruby/object:Word
    word: manipulate
    stem: manipul
    docFrequency: 3.0
    docPositions:
    - 629
    - 1950
  cannot: !ruby/object:Word
    word: cannot
    stem: cannot
    docFrequency: 9.0
    docPositions:
    - 629
    - 1223
    - 1272
    - 1301
    - 1950
    - 2362
    - 2394
    - 2419
  resist: !ruby/object:Word
    word: resist
    stem: resist
    docFrequency: 3.0
    docPositions:
    - 629
    - 1950
  pointing: !ruby/object:Word
    word: pointing
    stem: point
    docFrequency: 3.0
    docPositions:
    - 629
    - 1950
  stage: !ruby/object:Word
    word: stage
    stem: stage
    docFrequency: 5.0
    docPositions:
    - 630
    - 1169
    - 1951
    - 2341
  fight: !ruby/object:Word
    word: fight
    stem: fight
    docFrequency: 3.0
    docPositions:
    - 630
    - 1951
  edward: !ruby/object:Word
    word: edward
    stem: edward
    docFrequency: 3.0
    docPositions:
    - 630
    - 1951
  teller: !ruby/object:Word
    word: teller
    stem: teller
    docFrequency: 3.0
    docPositions:
    - 631
    - 1952
  concerning: !ruby/object:Word
    word: concerning
    stem: concern
    docFrequency: 3.0
    docPositions:
    - 631
    - 1952
  univac: !ruby/object:Word
    word: univac
    stem: univac
    docFrequency: 3.0
    docPositions:
    - 631
    - 1952
  larc: !ruby/object:Word
    word: larc
    stem: larc
    docFrequency: 3.0
    docPositions:
    - 631
    - 1952
  livermore: !ruby/object:Word
    word: livermore
    stem: livermor
    docFrequency: 3.0
    docPositions:
    - 631
    - 1952
  automatic: !ruby/object:Word
    word: automatic
    stem: automat
    docFrequency: 5.0
    docPositions:
    - 631
    - 722
    - 1952
    - 2029
  contending: !ruby/object:Word
    word: contending
    stem: contend
    docFrequency: 3.0
    docPositions:
    - 632
    - 1953
  putting: !ruby/object:Word
    word: putting
    stem: put
    docFrequency: 3.0
    docPositions:
    - 632
    - 1953
  words: !ruby/object:Word
    word: words
    stem: word
    docFrequency: 15.0
    docPositions:
    - 633
    - 655
    - 999
    - 1112
    - 1113
    - 1114
    - 1122
    - 1954
    - 1971
    - 2233
    - 2308
    - 2309
    - 2310
    - 2314
  waste: !ruby/object:Word
    word: waste
    stem: wast
    docFrequency: 5.0
    docPositions:
    - 633
    - 979
    - 1954
    - 2221
  money: !ruby/object:Word
    word: money
    stem: monei
    docFrequency: 3.0
    docPositions:
    - 634
    - 1955
  reason: !ruby/object:Word
    word: reason
    stem: reason
    docFrequency: 3.0
    docPositions:
    - 636
    - 1955
  parallel: !ruby/object:Word
    word: parallel
    stem: parallel
    docFrequency: 5.0
    docPositions:
    - 637
    - 1290
    - 1956
    - 2410
  serial: !ruby/object:Word
    word: serial
    stem: serial
    docFrequency: 5.0
    docPositions:
    - 638
    - 1050
    - 1957
    - 2266
  elliot: !ruby/object:Word
    word: elliot
    stem: elliot
    docFrequency: 7.0
    docPositions:
    - 638
    - 1274
    - 1458
    - 1957
    - 2396
    - 2521
  instance: !ruby/object:Word
    word: instance
    stem: instanc
    docFrequency: 3.0
    docPositions:
    - 639
    - 1958
  heart: !ruby/object:Word
    word: heart
    stem: heart
    docFrequency: 7.0
    docPositions:
    - 639
    - 685
    - 802
    - 1958
    - 1998
    - 2091
  adder: !ruby/object:Word
    word: adder
    stem: adder
    docFrequency: 3.0
    docPositions:
    - 639
    - 1958
  through: !ruby/object:Word
    word: through
    stem: through
    docFrequency: 3.0
    docPositions:
    - 639
    - 1958
  operands: !ruby/object:Word
    word: operands
    stem: operand
    docFrequency: 7.0
    docPositions:
    - 640
    - 641
    - 1160
    - 1959
    - 1960
    - 2336
  passed: !ruby/object:Word
    word: passed
    stem: pass
    docFrequency: 3.0
    docPositions:
    - 640
    - 1959
  per: !ruby/object:Word
    word: per
    stem: per
    docFrequency: 9.0
    docPositions:
    - 640
    - 664
    - 705
    - 1168
    - 1959
    - 1979
    - 2014
    - 2340
  cycle: !ruby/object:Word
    word: cycle
    stem: cycl
    docFrequency: 5.0
    docPositions:
    - 640
    - 642
    - 1959
    - 1961
  required: !ruby/object:Word
    word: required
    stem: requir
    docFrequency: 15.0
    docPositions:
    - 642
    - 713
    - 761
    - 1006
    - 1316
    - 1354
    - 1399
    - 1961
    - 2020
    - 2058
    - 2238
    - 2432
    - 2455
    - 2483
  possible: !ruby/object:Word
    word: possible
    stem: possibl
    docFrequency: 5.0
    docPositions:
    - 644
    - 994
    - 1963
    - 2230
  detailed: !ruby/object:Word
    word: detailed
    stem: detail
    docFrequency: 3.0
    docPositions:
    - 645
    - 1964
  constraints: !ruby/object:Word
    word: constraints
    stem: constraint
    docFrequency: 3.0
    docPositions:
    - 645
    - 1964
  robert: !ruby/object:Word
    word: robert
    stem: robert
    docFrequency: 3.0
    docPositions:
    - 645
    - 1964
  everett: !ruby/object:Word
    word: everett
    stem: everett
    docFrequency: 3.0
    docPositions:
    - 646
    - 1965
  designing: !ruby/object:Word
    word: designing
    stem: design
    docFrequency: 5.0
    docPositions:
    - 646
    - 961
    - 1965
    - 2209
  comments: !ruby/object:Word
    word: comments
    stem: comment
    docFrequency: 3.0
    docPositions:
    - 647
    - 1966
  arrived: !ruby/object:Word
    word: arrived
    stem: arriv
    docFrequency: 3.0
    docPositions:
    - 647
    - 1966
  nice: !ruby/object:Word
    word: nice
    stem: nice
    docFrequency: 3.0
    docPositions:
    - 651
    - 1967
  arbitrarily: !ruby/object:Word
    word: arbitrarily
    stem: arbitrarili
    docFrequency: 3.0
    docPositions:
    - 652
    - 1968
  shortest: !ruby/object:Word
    word: shortest
    stem: shortest
    docFrequency: 3.0
    docPositions:
    - 653
    - 1969
  instruction: !ruby/object:Word
    word: instruction
    stem: instruct
    docFrequency: 15.0
    docPositions:
    - 653
    - 685
    - 784
    - 1011
    - 1159
    - 1164
    - 1346
    - 1969
    - 1998
    - 2077
    - 2241
    - 2335
    - 2338
    - 2449
  reasonable: !ruby/object:Word
    word: reasonable
    stem: reason
    docFrequency: 7.0
    docPositions:
    - 654
    - 658
    - 946
    - 1970
    - 1974
    - 2200
  interested: !ruby/object:Word
    word: interested
    stem: interest
    docFrequency: 7.0
    docPositions:
    - 655
    - 1397
    - 1502
    - 1971
    - 2481
    - 2535
  tight: !ruby/object:Word
    word: tight
    stem: tight
    docFrequency: 3.0
    docPositions:
    - 655
    - 1971
  considerably: !ruby/object:Word
    word: considerably
    stem: consider
    docFrequency: 3.0
    docPositions:
    - 656
    - 1972
  better: !ruby/object:Word
    word: better
    stem: better
    docFrequency: 3.0
    docPositions:
    - 656
    - 1972
  eleven: !ruby/object:Word
    word: eleven
    stem: eleven
    docFrequency: 3.0
    docPositions:
    - 656
    - 1972
  needed: !ruby/object:Word
    word: needed
    stem: need
    docFrequency: 7.0
    docPositions:
    - 657
    - 677
    - 1340
    - 1973
    - 1992
    - 2445
  least: !ruby/object:Word
    word: least
    stem: least
    docFrequency: 7.0
    docPositions:
    - 657
    - 1377
    - 1443
    - 1973
    - 2467
    - 2510
  instructions: !ruby/object:Word
    word: instructions
    stem: instruct
    docFrequency: 25.0
    docPositions:
    - 657
    - 700
    - 783
    - 786
    - 824
    - 957
    - 1006
    - 1014
    - 1169
    - 1171
    - 1290
    - 1291
    - 1973
    - 2010
    - 2076
    - 2079
    - 2111
    - 2207
    - 2238
    - 2244
    - 2341
    - 2343
    - 2410
    - 2411
  sounded: !ruby/object:Word
    word: sounded
    stem: sound
    docFrequency: 3.0
    docPositions:
    - 657
    - 1973
  sum: !ruby/object:Word
    word: sum
    stem: sum
    docFrequency: 3.0
    docPositions:
    - 659
    - 1975
  primes: !ruby/object:Word
    word: primes
    stem: prime
    docFrequency: 3.0
    docPositions:
    - 660
    - 1976
  claiming: !ruby/object:Word
    word: claiming
    stem: claim
    docFrequency: 3.0
    docPositions:
    - 661
    - 1976
  architecturally: !ruby/object:Word
    word: architecturally
    stem: architectur
    docFrequency: 3.0
    docPositions:
    - 661
    - 1976
  doubt: !ruby/object:Word
    word: doubt
    stem: doubt
    docFrequency: 5.0
    docPositions:
    - 662
    - 800
    - 1977
    - 2089
  miniature: !ruby/object:Word
    word: miniature
    stem: miniatur
    docFrequency: 5.0
    docPositions:
    - 663
    - 698
    - 1978
    - 2008
  physically: !ruby/object:Word
    word: physically
    stem: physic
    docFrequency: 3.0
    docPositions:
    - 663
    - 1978
  indeed: !ruby/object:Word
    word: indeed
    stem: inde
    docFrequency: 7.0
    docPositions:
    - 663
    - 694
    - 1222
    - 1978
    - 2004
    - 2361
  scale: !ruby/object:Word
    word: scale
    stem: scale
    docFrequency: 7.0
    docPositions:
    - 663
    - 922
    - 1049
    - 1978
    - 2184
    - 2265
  staggering: !ruby/object:Word
    word: staggering
    stem: stagger
    docFrequency: 3.0
    docPositions:
    - 664
    - 1979
  budget: !ruby/object:Word
    word: budget
    stem: budget
    docFrequency: 5.0
    docPositions:
    - 664
    - 708
    - 1979
    - 2015
  annum: !ruby/object:Word
    word: annum
    stem: annum
    docFrequency: 3.0
    docPositions:
    - 664
    - 1979
  pause: !ruby/object:Word
    word: pause
    stem: paus
    docFrequency: 3.0
    docPositions:
    - 666
    - 1981
  visits: !ruby/object:Word
    word: visits
    stem: visit
    docFrequency: 3.0
    docPositions:
    - 666
    - 1981
  laid: !ruby/object:Word
    word: laid
    stem: laid
    docFrequency: 3.0
    docPositions:
    - 667
    - 1982
  dimensional: !ruby/object:Word
    word: dimensional
    stem: dimension
    docFrequency: 3.0
    docPositions:
    - 667
    - 1982
  immediately: !ruby/object:Word
    word: immediately
    stem: immedi
    docFrequency: 3.0
    docPositions:
    - 668
    - 1983
  accessed: !ruby/object:Word
    word: accessed
    stem: access
    docFrequency: 3.0
    docPositions:
    - 668
    - 1983
  failure: !ruby/object:Word
    word: failure
    stem: failur
    docFrequency: 11.0
    docPositions:
    - 668
    - 705
    - 1189
    - 1223
    - 1387
    - 1983
    - 2014
    - 2352
    - 2362
    - 2473
  inefficient: !ruby/object:Word
    word: inefficient
    stem: ineffici
    docFrequency: 3.0
    docPositions:
    - 669
    - 1984
  requiring: !ruby/object:Word
    word: requiring
    stem: requir
    docFrequency: 3.0
    docPositions:
    - 669
    - 1984
  floor: !ruby/object:Word
    word: floor
    stem: floor
    docFrequency: 5.0
    docPositions:
    - 669
    - 677
    - 1984
    - 1992
  room: !ruby/object:Word
    word: room
    stem: room
    docFrequency: 7.0
    docPositions:
    - 670
    - 1224
    - 1225
    - 1985
    - 2363
    - 2364
  alone: !ruby/object:Word
    word: alone
    stem: alon
    docFrequency: 3.0
    docPositions:
    - 670
    - 1985
  contained: !ruby/object:Word
    word: contained
    stem: contain
    docFrequency: 7.0
    docPositions:
    - 670
    - 780
    - 1107
    - 1985
    - 2075
    - 2305
  fifteen: !ruby/object:Word
    word: fifteen
    stem: fifteen
    docFrequency: 5.0
    docPositions:
    - 670
    - 862
    - 1985
    - 2139
  foot: !ruby/object:Word
    word: foot
    stem: foot
    docFrequency: 3.0
    docPositions:
    - 670
    - 1985
  racks: !ruby/object:Word
    word: racks
    stem: rack
    docFrequency: 3.0
    docPositions:
    - 671
    - 1986
  specially: !ruby/object:Word
    word: specially
    stem: special
    docFrequency: 3.0
    docPositions:
    - 672
    - 1987
  valves: !ruby/object:Word
    word: valves
    stem: valv
    docFrequency: 9.0
    docPositions:
    - 672
    - 674
    - 675
    - 1029
    - 1987
    - 1989
    - 1990
    - 2253
  each: !ruby/object:Word
    word: each
    stem: each
    docFrequency: 14.0
    docPositions:
    - 672
    - 779
    - 1042
    - 1106
    - 1244
    - 1455
    - 1517
    - 1987
    - 2074
    - 2262
    - 2304
    - 2377
    - 2518
  shop: !ruby/object:Word
    word: shop
    stem: shop
    docFrequency: 5.0
    docPositions:
    - 673
    - 769
    - 1988
    - 2066
  germanium: !ruby/object:Word
    word: germanium
    stem: germanium
    docFrequency: 3.0
    docPositions:
    - 674
    - 1989
  diodes: !ruby/object:Word
    word: diodes
    stem: diod
    docFrequency: 11.0
    docPositions:
    - 674
    - 695
    - 982
    - 1042
    - 1108
    - 1989
    - 2005
    - 2222
    - 2262
    - 2306
  considering: !ruby/object:Word
    word: considering
    stem: consid
    docFrequency: 5.0
    docPositions:
    - 675
    - 1337
    - 1990
    - 2444
  edsac: !ruby/object:Word
    word: edsac
    stem: edsac
    docFrequency: 3.0
    docPositions:
    - 675
    - 1990
  really: !ruby/object:Word
    word: really
    stem: realli
    docFrequency: 5.0
    docPositions:
    - 676
    - 1012
    - 1991
    - 2242
  compact: !ruby/object:Word
    word: compact
    stem: compact
    docFrequency: 5.0
    docPositions:
    - 676
    - 773
    - 1991
    - 2068
  quite: !ruby/object:Word
    word: quite
    stem: quit
    docFrequency: 11.0
    docPositions:
    - 676
    - 928
    - 929
    - 936
    - 938
    - 1991
    - 2188
    - 2189
    - 2192
    - 2194
  difficult: !ruby/object:Word
    word: difficult
    stem: difficult
    docFrequency: 7.0
    docPositions:
    - 676
    - 753
    - 938
    - 1991
    - 2050
    - 2194
  why: !ruby/object:Word
    word: why
    stem: why
    docFrequency: 3.0
    docPositions:
    - 676
    - 1991
  display: !ruby/object:Word
    word: display
    stem: displai
    docFrequency: 5.0
    docPositions:
    - 678
    - 1441
    - 1993
    - 2508
  probably: !ruby/object:Word
    word: probably
    stem: probabl
    docFrequency: 9.0
    docPositions:
    - 679
    - 731
    - 753
    - 1313
    - 1994
    - 2034
    - 2050
    - 2429
  vdu: !ruby/object:Word
    word: vdu
    stem: vdu
    docFrequency: 5.0
    docPositions:
    - 680
    - 1281
    - 1995
    - 2401
  attached: !ruby/object:Word
    word: attached
    stem: attach
    docFrequency: 7.0
    docPositions:
    - 680
    - 682
    - 863
    - 1995
    - 1997
    - 2140
  stronger: !ruby/object:Word
    word: stronger
    stem: stronger
    docFrequency: 3.0
    docPositions:
    - 681
    - 1996
  claim: !ruby/object:Word
    word: claim
    stem: claim
    docFrequency: 3.0
    docPositions:
    - 681
    - 1996
  pen: !ruby/object:Word
    word: pen
    stem: pen
    docFrequency: 3.0
    docPositions:
    - 681
    - 1996
  decoder: !ruby/object:Word
    word: decoder
    stem: decod
    docFrequency: 5.0
    docPositions:
    - 685
    - 687
    - 1998
    - 2000
  diode: !ruby/object:Word
    word: diode
    stem: diod
    docFrequency: 3.0
    docPositions:
    - 685
    - 1998
  matrix: !ruby/object:Word
    word: matrix
    stem: matrix
    docFrequency: 9.0
    docPositions:
    - 686
    - 695
    - 698
    - 760
    - 1999
    - 2005
    - 2008
    - 2057
  decoding: !ruby/object:Word
    word: decoding
    stem: decod
    docFrequency: 3.0
    docPositions:
    - 686
    - 1999
  random: !ruby/object:Word
    word: random
    stem: random
    docFrequency: 5.0
    docPositions:
    - 687
    - 691
    - 2000
    - 2004
  gates: !ruby/object:Word
    word: gates
    stem: gate
    docFrequency: 3.0
    docPositions:
    - 687
    - 2000
  structured: !ruby/object:Word
    word: structured
    stem: structur
    docFrequency: 5.0
    docPositions:
    - 687
    - 690
    - 2000
    - 2003
  course: !ruby/object:Word
    word: course
    stem: cours
    docFrequency: 7.0
    docPositions:
    - 687
    - 742
    - 901
    - 2000
    - 2043
    - 2167
  step: !ruby/object:Word
    word: step
    stem: step
    docFrequency: 5.0
    docPositions:
    - 688
    - 819
    - 2001
    - 2106
  away: !ruby/object:Word
    word: away
    stem: awai
    docFrequency: 7.0
    docPositions:
    - 688
    - 1001
    - 1411
    - 2001
    - 2235
    - 2489
  microcoded: !ruby/object:Word
    word: microcoded
    stem: microcod
    docFrequency: 3.0
    docPositions:
    - 688
    - 2001
  thinking: !ruby/object:Word
    word: thinking
    stem: think
    docFrequency: 5.0
    docPositions:
    - 690
    - 950
    - 2003
    - 2202
  opposed: !ruby/object:Word
    word: opposed
    stem: oppos
    docFrequency: 5.0
    docPositions:
    - 690
    - 732
    - 2003
    - 2035
  shown: !ruby/object:Word
    word: shown
    stem: shown
    docFrequency: 3.0
    docPositions:
    - 691
    - 2004
  centralised: !ruby/object:Word
    word: centralised
    stem: centralis
    docFrequency: 3.0
    docPositions:
    - 694
    - 2004
  until: !ruby/object:Word
    word: until
    stem: until
    docFrequency: 15.0
    docPositions:
    - 696
    - 725
    - 727
    - 740
    - 796
    - 805
    - 1385
    - 2006
    - 2030
    - 2032
    - 2041
    - 2087
    - 2094
    - 2471
  cambridge: !ruby/object:Word
    word: cambridge
    stem: cambridg
    docFrequency: 5.0
    docPositions:
    - 696
    - 871
    - 2006
    - 2144
  realised: !ruby/object:Word
    word: realised
    stem: realis
    docFrequency: 3.0
    docPositions:
    - 696
    - 2006
  solution: !ruby/object:Word
    word: solution
    stem: solut
    docFrequency: 3.0
    docPositions:
    - 697
    - 2007
  turn: !ruby/object:Word
    word: turn
    stem: turn
    docFrequency: 3.0
    docPositions:
    - 697
    - 2007
  adding: !ruby/object:Word
    word: adding
    stem: ad
    docFrequency: 3.0
    docPositions:
    - 698
    - 2008
  determine: !ruby/object:Word
    word: determine
    stem: determin
    docFrequency: 3.0
    docPositions:
    - 698
    - 2008
  micro: !ruby/object:Word
    word: micro
    stem: micro
    docFrequency: 5.0
    docPositions:
    - 699
    - 700
    - 2009
    - 2010
  providing: !ruby/object:Word
    word: providing
    stem: provid
    docFrequency: 5.0
    docPositions:
    - 699
    - 1435
    - 2009
    - 2504
  conditional: !ruby/object:Word
    word: conditional
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 700
    - 2010
  military: !ruby/object:Word
    word: military
    stem: militari
    docFrequency: 5.0
    docPositions:
    - 701
    - 715
    - 2010
    - 2022
  fashion: !ruby/object:Word
    word: fashion
    stem: fashion
    docFrequency: 3.0
    docPositions:
    - 701
    - 2010
  thoroughly: !ruby/object:Word
    word: thoroughly
    stem: thoroughli
    docFrequency: 3.0
    docPositions:
    - 702
    - 2011
  documented: !ruby/object:Word
    word: documented
    stem: document
    docFrequency: 3.0
    docPositions:
    - 702
    - 2011
  biweekly: !ruby/object:Word
    word: biweekly
    stem: biweekli
    docFrequency: 3.0
    docPositions:
    - 703
    - 2012
  disciplined: !ruby/object:Word
    word: disciplined
    stem: disciplin
    docFrequency: 3.0
    docPositions:
    - 704
    - 2013
  preventative: !ruby/object:Word
    word: preventative
    stem: prevent
    docFrequency: 3.0
    docPositions:
    - 704
    - 2013
  kept: !ruby/object:Word
    word: kept
    stem: kept
    docFrequency: 3.0
    docPositions:
    - 704
    - 2013
  valve: !ruby/object:Word
    word: valve
    stem: valv
    docFrequency: 3.0
    docPositions:
    - 704
    - 2013
  rate: !ruby/object:Word
    word: rate
    stem: rate
    docFrequency: 5.0
    docPositions:
    - 705
    - 1040
    - 2014
    - 2260
  hours: !ruby/object:Word
    word: hours
    stem: hour
    docFrequency: 9.0
    docPositions:
    - 705
    - 768
    - 976
    - 1339
    - 2014
    - 2065
    - 2218
    - 2444
  beginning: !ruby/object:Word
    word: beginning
    stem: begin
    docFrequency: 3.0
    docPositions:
    - 707
    - 2014
  tiring: !ruby/object:Word
    word: tiring
    stem: tire
    docFrequency: 3.0
    docPositions:
    - 708
    - 2015
  annual: !ruby/object:Word
    word: annual
    stem: annual
    docFrequency: 4.0
    docPositions:
    - 708
    - 1517
    - 2015
  ussr: !ruby/object:Word
    word: ussr
    stem: ussr
    docFrequency: 3.0
    docPositions:
    - 709
    - 2016
  atomic: !ruby/object:Word
    word: atomic
    stem: atom
    docFrequency: 3.0
    docPositions:
    - 709
    - 2016
  bomb: !ruby/object:Word
    word: bomb
    stem: bomb
    docFrequency: 3.0
    docPositions:
    - 709
    - 2016
  intercontinental: !ruby/object:Word
    word: intercontinental
    stem: intercontinent
    docFrequency: 3.0
    docPositions:
    - 710
    - 2017
  threaten: !ruby/object:Word
    word: threaten
    stem: threaten
    docFrequency: 3.0
    docPositions:
    - 710
    - 2017
  territory: !ruby/object:Word
    word: territory
    stem: territori
    docFrequency: 3.0
    docPositions:
    - 711
    - 2018
  korean: !ruby/object:Word
    word: korean
    stem: korean
    docFrequency: 3.0
    docPositions:
    - 711
    - 2018
  paranoia: !ruby/object:Word
    word: paranoia
    stem: paranoia
    docFrequency: 3.0
    docPositions:
    - 712
    - 2019
  detect: !ruby/object:Word
    word: detect
    stem: detect
    docFrequency: 3.0
    docPositions:
    - 712
    - 2019
  enemy: !ruby/object:Word
    word: enemy
    stem: enemi
    docFrequency: 3.0
    docPositions:
    - 712
    - 2019
  flying: !ruby/object:Word
    word: flying
    stem: fly
    docFrequency: 3.0
    docPositions:
    - 712
    - 2019
  network: !ruby/object:Word
    word: network
    stem: network
    docFrequency: 3.0
    docPositions:
    - 713
    - 2020
  radar: !ruby/object:Word
    word: radar
    stem: radar
    docFrequency: 9.0
    docPositions:
    - 713
    - 717
    - 891
    - 895
    - 2020
    - 2024
    - 2159
    - 2163
  stations: !ruby/object:Word
    word: stations
    stem: station
    docFrequency: 3.0
    docPositions:
    - 713
    - 2020
  problem: !ruby/object:Word
    word: problem
    stem: problem
    docFrequency: 9.0
    docPositions:
    - 714
    - 1056
    - 1224
    - 1401
    - 2021
    - 2270
    - 2363
    - 2483
  correlating: !ruby/object:Word
    word: correlating
    stem: correl
    docFrequency: 3.0
    docPositions:
    - 714
    - 2021
  presenting: !ruby/object:Word
    word: presenting
    stem: present
    docFrequency: 3.0
    docPositions:
    - 714
    - 2021
  mass: !ruby/object:Word
    word: mass
    stem: mass
    docFrequency: 7.0
    docPositions:
    - 715
    - 754
    - 1275
    - 2022
    - 2051
    - 2397
  commanders: !ruby/object:Word
    word: commanders
    stem: command
    docFrequency: 3.0
    docPositions:
    - 715
    - 2022
  hooked: !ruby/object:Word
    word: hooked
    stem: hook
    docFrequency: 3.0
    docPositions:
    - 716
    - 2023
  telex: !ruby/object:Word
    word: telex
    stem: telex
    docFrequency: 3.0
    docPositions:
    - 716
    - 2023
  lexington: !ruby/object:Word
    word: lexington
    stem: lexington
    docFrequency: 5.0
    docPositions:
    - 717
    - 776
    - 2024
    - 2071
  massachusetts: !ruby/object:Word
    word: massachusetts
    stem: massachusett
    docFrequency: 3.0
    docPositions:
    - 717
    - 2024
  computation: !ruby/object:Word
    word: computation
    stem: comput
    docFrequency: 3.0
    docPositions:
    - 718
    - 2025
  lab: !ruby/object:Word
    word: lab
    stem: lab
    docFrequency: 7.0
    docPositions:
    - 718
    - 721
    - 775
    - 2025
    - 2028
    - 2070
  success: !ruby/object:Word
    word: success
    stem: success
    docFrequency: 7.0
    docPositions:
    - 719
    - 767
    - 1198
    - 2026
    - 2064
    - 2355
  airforce: !ruby/object:Word
    word: airforce
    stem: airforc
    docFrequency: 3.0
    docPositions:
    - 719
    - 2026
  lincoln: !ruby/object:Word
    word: lincoln
    stem: lincoln
    docFrequency: 9.0
    docPositions:
    - 720
    - 721
    - 775
    - 793
    - 2027
    - 2028
    - 2070
    - 2084
  primary: !ruby/object:Word
    word: primary
    stem: primari
    docFrequency: 3.0
    docPositions:
    - 721
    - 2028
  responsibility: !ruby/object:Word
    word: responsibility
    stem: respons
    docFrequency: 3.0
    docPositions:
    - 722
    - 2029
  semi: !ruby/object:Word
    word: semi
    stem: semi
    docFrequency: 3.0
    docPositions:
    - 722
    - 2029
  air: !ruby/object:Word
    word: air
    stem: air
    docFrequency: 5.0
    docPositions:
    - 722
    - 1225
    - 2029
    - 2364
  defence: !ruby/object:Word
    word: defence
    stem: defenc
    docFrequency: 3.0
    docPositions:
    - 722
    - 2029
  sage: !ruby/object:Word
    word: sage
    stem: sage
    docFrequency: 3.0
    docPositions:
    - 723
    - 2030
  june: !ruby/object:Word
    word: june
    stem: june
    docFrequency: 3.0
    docPositions:
    - 725
    - 2030
  bill: !ruby/object:Word
    word: bill
    stem: bill
    docFrequency: 3.0
    docPositions:
    - 726
    - 2031
  wolf: !ruby/object:Word
    word: wolf
    stem: wolf
    docFrequency: 3.0
    docPositions:
    - 726
    - 2031
  rented: !ruby/object:Word
    word: rented
    stem: rent
    docFrequency: 3.0
    docPositions:
    - 726
    - 2031
  dollar: !ruby/object:Word
    word: dollar
    stem: dollar
    docFrequency: 3.0
    docPositions:
    - 726
    - 2031
  looked: !ruby/object:Word
    word: looked
    stem: look
    docFrequency: 5.0
    docPositions:
    - 728
    - 1244
    - 2033
    - 2377
  transferring: !ruby/object:Word
    word: transferring
    stem: transfer
    docFrequency: 5.0
    docPositions:
    - 728
    - 1335
    - 2033
    - 2442
  smithsonian: !ruby/object:Word
    word: smithsonian
    stem: smithsonian
    docFrequency: 3.0
    docPositions:
    - 729
    - 2034
  lasting: !ruby/object:Word
    word: lasting
    stem: last
    docFrequency: 3.0
    docPositions:
    - 731
    - 2034
  contribution: !ruby/object:Word
    word: contribution
    stem: contribut
    docFrequency: 3.0
    docPositions:
    - 731
    - 2034
  mainstream: !ruby/object:Word
    word: mainstream
    stem: mainstream
    docFrequency: 5.0
    docPositions:
    - 732
    - 774
    - 2035
    - 2069
  ferrite: !ruby/object:Word
    word: ferrite
    stem: ferrit
    docFrequency: 13.0
    docPositions:
    - 734
    - 741
    - 758
    - 763
    - 766
    - 778
    - 2035
    - 2042
    - 2055
    - 2060
    - 2063
    - 2073
  core: !ruby/object:Word
    word: core
    stem: core
    docFrequency: 15.0
    docPositions:
    - 734
    - 741
    - 763
    - 766
    - 992
    - 1060
    - 1112
    - 2035
    - 2042
    - 2060
    - 2063
    - 2228
    - 2274
    - 2308
  link: !ruby/object:Word
    word: link
    stem: link
    docFrequency: 3.0
    docPositions:
    - 735
    - 2036
  becomes: !ruby/object:Word
    word: becomes
    stem: becom
    docFrequency: 3.0
    docPositions:
    - 735
    - 2036
  clear: !ruby/object:Word
    word: clear
    stem: clear
    docFrequency: 9.0
    docPositions:
    - 735
    - 786
    - 953
    - 957
    - 2036
    - 2079
    - 2203
    - 2207
  memories: !ruby/object:Word
    word: memories
    stem: memori
    docFrequency: 3.0
    docPositions:
    - 735
    - 2036
  delay: !ruby/object:Word
    word: delay
    stem: delai
    docFrequency: 11.0
    docPositions:
    - 736
    - 900
    - 901
    - 1036
    - 1037
    - 2037
    - 2166
    - 2167
    - 2258
    - 2259
  line: !ruby/object:Word
    word: line
    stem: line
    docFrequency: 7.0
    docPositions:
    - 736
    - 900
    - 901
    - 2037
    - 2166
    - 2167
  storage: !ruby/object:Word
    word: storage
    stem: storag
    docFrequency: 15.0
    docPositions:
    - 736
    - 747
    - 755
    - 898
    - 1035
    - 1083
    - 1110
    - 2037
    - 2045
    - 2052
    - 2164
    - 2257
    - 2287
    - 2306
  unsatisfactory: !ruby/object:Word
    word: unsatisfactory
    stem: unsatisfactori
    docFrequency: 3.0
    docPositions:
    - 737
    - 2038
  bulk: !ruby/object:Word
    word: bulk
    stem: bulk
    docFrequency: 3.0
    docPositions:
    - 737
    - 2038
  unreliability: !ruby/object:Word
    word: unreliability
    stem: unreli
    docFrequency: 5.0
    docPositions:
    - 738
    - 1057
    - 2039
    - 2271
  uk: !ruby/object:Word
    word: uk
    stem: uk
    docFrequency: 5.0
    docPositions:
    - 739
    - 1205
    - 2040
    - 2356
  technological: !ruby/object:Word
    word: technological
    stem: technolog
    docFrequency: 5.0
    docPositions:
    - 740
    - 970
    - 2041
    - 2214
  lead: !ruby/object:Word
    word: lead
    stem: lead
    docFrequency: 3.0
    docPositions:
    - 740
    - 2041
  teams: !ruby/object:Word
    word: teams
    stem: team
    docFrequency: 5.0
    docPositions:
    - 740
    - 855
    - 2041
    - 2134
  quote: !ruby/object:Word
    word: quote
    stem: quot
    docFrequency: 3.0
    docPositions:
    - 741
    - 2042
  famous: !ruby/object:Word
    word: famous
    stem: famou
    docFrequency: 3.0
    docPositions:
    - 741
    - 2042
  moore: !ruby/object:Word
    word: moore
    stem: moor
    docFrequency: 3.0
    docPositions:
    - 741
    - 2042
  school: !ruby/object:Word
    word: school
    stem: school
    docFrequency: 3.0
    docPositions:
    - 741
    - 2042
  forms: !ruby/object:Word
    word: forms
    stem: form
    docFrequency: 3.0
    docPositions:
    - 745
    - 2043
  fast: !ruby/object:Word
    word: fast
    stem: fast
    docFrequency: 9.0
    docPositions:
    - 745
    - 772
    - 865
    - 1118
    - 2043
    - 2067
    - 2142
    - 2312
  shows: !ruby/object:Word
    word: shows
    stem: show
    docFrequency: 7.0
    docPositions:
    - 746
    - 1350
    - 1354
    - 2044
    - 2451
    - 2455
  promise: !ruby/object:Word
    word: promise
    stem: promis
    docFrequency: 3.0
    docPositions:
    - 746
    - 2044
  electrostatic: !ruby/object:Word
    word: electrostatic
    stem: electrostat
    docFrequency: 5.0
    docPositions:
    - 747
    - 755
    - 2045
    - 2052
  rca: !ruby/object:Word
    word: rca
    stem: rca
    docFrequency: 3.0
    docPositions:
    - 748
    - 2046
  selectron: !ruby/object:Word
    word: selectron
    stem: selectron
    docFrequency: 5.0
    docPositions:
    - 749
    - 751
    - 2047
    - 2048
  perfected: !ruby/object:Word
    word: perfected
    stem: perfect
    docFrequency: 3.0
    docPositions:
    - 749
    - 2047
  features: !ruby/object:Word
    word: features
    stem: featur
    docFrequency: 3.0
    docPositions:
    - 750
    - 2048
  desirable: !ruby/object:Word
    word: desirable
    stem: desir
    docFrequency: 3.0
    docPositions:
    - 750
    - 2048
  appears: !ruby/object:Word
    word: appears
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 751
    - 2048
  white: !ruby/object:Word
    word: white
    stem: white
    docFrequency: 3.0
    docPositions:
    - 751
    - 2048
  american: !ruby/object:Word
    word: american
    stem: american
    docFrequency: 5.0
    docPositions:
    - 752
    - 842
    - 2049
    - 2123
  complex: !ruby/object:Word
    word: complex
    stem: complex
    docFrequency: 3.0
    docPositions:
    - 753
    - 2050
  device: !ruby/object:Word
    word: device
    stem: devic
    docFrequency: 9.0
    docPositions:
    - 753
    - 1036
    - 1194
    - 1280
    - 2050
    - 2258
    - 2353
    - 2400
  expensive: !ruby/object:Word
    word: expensive
    stem: expens
    docFrequency: 3.0
    docPositions:
    - 754
    - 2051
  match: !ruby/object:Word
    word: match
    stem: match
    docFrequency: 3.0
    docPositions:
    - 756
    - 2053
  elegance: !ruby/object:Word
    word: elegance
    stem: eleg
    docFrequency: 3.0
    docPositions:
    - 756
    - 2053
  licensed: !ruby/object:Word
    word: licensed
    stem: licens
    docFrequency: 3.0
    docPositions:
    - 757
    - 2054
  ibm: !ruby/object:Word
    word: ibm
    stem: ibm
    docFrequency: 21.0
    docPositions:
    - 757
    - 815
    - 823
    - 995
    - 1078
    - 1203
    - 1209
    - 1417
    - 1420
    - 1424
    - 2054
    - 2102
    - 2110
    - 2231
    - 2284
    - 2356
    - 2493
    - 2496
    - 2498
  effort: !ruby/object:Word
    word: effort
    stem: effort
    docFrequency: 7.0
    docPositions:
    - 757
    - 1096
    - 1379
    - 2054
    - 2296
    - 2467
  obsoleted: !ruby/object:Word
    word: obsoleted
    stem: obsolet
    docFrequency: 3.0
    docPositions:
    - 758
    - 2055
  stroke: !ruby/object:Word
    word: stroke
    stem: stroke
    docFrequency: 3.0
    docPositions:
    - 758
    - 2055
  j: !ruby/object:Word
    word: j
    stem: j
    docFrequency: 3.0
    docPositions:
    - 758
    - 2055
  forrester: !ruby/object:Word
    word: forrester
    stem: forrest
    docFrequency: 3.0
    docPositions:
    - 758
    - 2055
  cores: !ruby/object:Word
    word: cores
    stem: core
    docFrequency: 5.0
    docPositions:
    - 759
    - 2056
  testable: !ruby/object:Word
    word: testable
    stem: testabl
    docFrequency: 3.0
    docPositions:
    - 759
    - 2056
  received: !ruby/object:Word
    word: received
    stem: receiv
    docFrequency: 5.0
    docPositions:
    - 759
    - 800
    - 2056
    - 2089
  ceramics: !ruby/object:Word
    word: ceramics
    stem: ceram
    docFrequency: 3.0
    docPositions:
    - 760
    - 2057
  x: !ruby/object:Word
    word: x
    stem: x
    docFrequency: 9.0
    docPositions:
    - 760
    - 831
    - 2057
    - 2116
  test: !ruby/object:Word
    word: test
    stem: test
    docFrequency: 15.0
    docPositions:
    - 761
    - 762
    - 777
    - 906
    - 909
    - 910
    - 1116
    - 2058
    - 2059
    - 2072
    - 2170
    - 2173
    - 2174
    - 2310
  mtc: !ruby/object:Word
    word: mtc
    stem: mtc
    docFrequency: 11.0
    docPositions:
    - 762
    - 765
    - 772
    - 801
    - 2059
    - 2062
    - 2067
    - 2090
  mk: !ruby/object:Word
    word: mk
    stem: mk
    docFrequency: 3.0
    docPositions:
    - 763
    - 2060
  headed: !ruby/object:Word
    word: headed
    stem: head
    docFrequency: 3.0
    docPositions:
    - 764
    - 2061
  graduate: !ruby/object:Word
    word: graduate
    stem: graduat
    docFrequency: 5.0
    docPositions:
    - 765
    - 882
    - 2062
    - 2153
  equipped: !ruby/object:Word
    word: equipped
    stem: equip
    docFrequency: 5.0
    docPositions:
    - 766
    - 1280
    - 2063
    - 2400
  transferred: !ruby/object:Word
    word: transferred
    stem: transfer
    docFrequency: 5.0
    docPositions:
    - 767
    - 1312
    - 2064
    - 2428
  onto: !ruby/object:Word
    word: onto
    stem: onto
    docFrequency: 3.0
    docPositions:
    - 767
    - 2064
  mtbf: !ruby/object:Word
    word: mtbf
    stem: mtbf
    docFrequency: 3.0
    docPositions:
    - 768
    - 2065
  rose: !ruby/object:Word
    word: rose
    stem: rose
    docFrequency: 3.0
    docPositions:
    - 768
    - 2065
  displays: !ruby/object:Word
    word: displays
    stem: displai
    docFrequency: 3.0
    docPositions:
    - 770
    - 2067
  moved: !ruby/object:Word
    word: moved
    stem: move
    docFrequency: 3.0
    docPositions:
    - 775
    - 2070
  began: !ruby/object:Word
    word: began
    stem: began
    docFrequency: 3.0
    docPositions:
    - 776
    - 2071
  tx: !ruby/object:Word
    word: tx
    stem: tx
    docFrequency: 17.0
    docPositions:
    - 776
    - 779
    - 782
    - 793
    - 799
    - 812
    - 830
    - 835
    - 2071
    - 2074
    - 2075
    - 2084
    - 2088
    - 2099
    - 2115
    - 2118
  aimed: !ruby/object:Word
    word: aimed
    stem: aim
    docFrequency: 3.0
    docPositions:
    - 777
    - 2072
  transistor: !ruby/object:Word
    word: transistor
    stem: transistor
    docFrequency: 17.0
    docPositions:
    - 777
    - 1022
    - 1025
    - 1042
    - 1044
    - 1046
    - 1059
    - 1062
    - 2072
    - 2248
    - 2249
    - 2262
    - 2264
    - 2273
    - 2274
  transistors: !ruby/object:Word
    word: transistors
    stem: transistor
    docFrequency: 21.0
    docPositions:
    - 778
    - 779
    - 780
    - 813
    - 1028
    - 1041
    - 1052
    - 1057
    - 1065
    - 1107
    - 2073
    - 2074
    - 2075
    - 2100
    - 2252
    - 2261
    - 2268
    - 2271
    - 2277
    - 2305
  philco: !ruby/object:Word
    word: philco
    stem: philco
    docFrequency: 3.0
    docPositions:
    - 778
    - 2073
  surface: !ruby/object:Word
    word: surface
    stem: surfac
    docFrequency: 3.0
    docPositions:
    - 779
    - 2074
  barrier: !ruby/object:Word
    word: barrier
    stem: barrier
    docFrequency: 3.0
    docPositions:
    - 779
    - 2074
  store: !ruby/object:Word
    word: store
    stem: store
    docFrequency: 29.0
    docPositions:
    - 783
    - 902
    - 908
    - 1004
    - 1036
    - 1060
    - 1111
    - 1113
    - 1116
    - 1118
    - 1158
    - 1170
    - 1223
    - 1262
    - 2076
    - 2168
    - 2172
    - 2238
    - 2258
    - 2274
    - 2307
    - 2309
    - 2310
    - 2312
    - 2334
    - 2342
    - 2362
    - 2389
  add: !ruby/object:Word
    word: add
    stem: add
    docFrequency: 7.0
    docPositions:
    - 783
    - 983
    - 1052
    - 2076
    - 2223
    - 2268
  jump: !ruby/object:Word
    word: jump
    stem: jump
    docFrequency: 3.0
    docPositions:
    - 783
    - 2076
  commands: !ruby/object:Word
    word: commands
    stem: command
    docFrequency: 3.0
    docPositions:
    - 784
    - 2077
  coded: !ruby/object:Word
    word: coded
    stem: code
    docFrequency: 3.0
    docPositions:
    - 785
    - 2078
  combined: !ruby/object:Word
    word: combined
    stem: combin
    docFrequency: 3.0
    docPositions:
    - 785
    - 2078
  right: !ruby/object:Word
    word: right
    stem: right
    docFrequency: 7.0
    docPositions:
    - 786
    - 787
    - 945
    - 2079
    - 2080
    - 2199
  half: !ruby/object:Word
    word: half
    stem: half
    docFrequency: 7.0
    docPositions:
    - 786
    - 1101
    - 1102
    - 2079
    - 2301
    - 2302
  accumulator: !ruby/object:Word
    word: accumulator
    stem: accumul
    docFrequency: 5.0
    docPositions:
    - 787
    - 789
    - 2080
    - 2082
  scheme: !ruby/object:Word
    word: scheme
    stem: scheme
    docFrequency: 3.0
    docPositions:
    - 787
    - 2080
  appear: !ruby/object:Word
    word: appear
    stem: appear
    docFrequency: 3.0
    docPositions:
    - 787
    - 2080
  registers: !ruby/object:Word
    word: registers
    stem: regist
    docFrequency: 15.0
    docPositions:
    - 789
    - 795
    - 820
    - 828
    - 1009
    - 1165
    - 1166
    - 2082
    - 2086
    - 2107
    - 2115
    - 2241
    - 2339
    - 2340
  register: !ruby/object:Word
    word: register
    stem: regist
    docFrequency: 7.0
    docPositions:
    - 790
    - 1049
    - 1050
    - 2083
    - 2265
    - 2266
  controlling: !ruby/object:Word
    word: controlling
    stem: control
    docFrequency: 3.0
    docPositions:
    - 790
    - 2083
  buffering: !ruby/object:Word
    word: buffering
    stem: buffer
    docFrequency: 3.0
    docPositions:
    - 790
    - 2083
  transfers: !ruby/object:Word
    word: transfers
    stem: transfer
    docFrequency: 3.0
    docPositions:
    - 790
    - 2083
  interrupt: !ruby/object:Word
    word: interrupt
    stem: interrupt
    docFrequency: 3.0
    docPositions:
    - 791
    - 2084
  mechanism: !ruby/object:Word
    word: mechanism
    stem: mechan
    docFrequency: 3.0
    docPositions:
    - 791
    - 2084
  teaching: !ruby/object:Word
    word: teaching
    stem: teach
    docFrequency: 3.0
    docPositions:
    - 794
    - 2085
  controller: !ruby/object:Word
    word: controller
    stem: control
    docFrequency: 3.0
    docPositions:
    - 794
    - 2085
  extended: !ruby/object:Word
    word: extended
    stem: extend
    docFrequency: 3.0
    docPositions:
    - 795
    - 2086
  include: !ruby/object:Word
    word: include
    stem: includ
    docFrequency: 7.0
    docPositions:
    - 795
    - 1192
    - 1252
    - 2086
    - 2353
    - 2381
  index: !ruby/object:Word
    word: index
    stem: index
    docFrequency: 3.0
    docPositions:
    - 795
    - 2086
  bought: !ruby/object:Word
    word: bought
    stem: bought
    docFrequency: 3.0
    docPositions:
    - 796
    - 2087
  futuristic: !ruby/object:Word
    word: futuristic
    stem: futurist
    docFrequency: 3.0
    docPositions:
    - 799
    - 2088
  looking: !ruby/object:Word
    word: looking
    stem: look
    docFrequency: 5.0
    docPositions:
    - 799
    - 1368
    - 2088
    - 2463
  harmlessly: !ruby/object:Word
    word: harmlessly
    stem: harmlessli
    docFrequency: 3.0
    docPositions:
    - 800
    - 2089
  intended: !ruby/object:Word
    word: intended
    stem: intend
    docFrequency: 3.0
    docPositions:
    - 800
    - 2089
  criticism: !ruby/object:Word
    word: criticism
    stem: critic
    docFrequency: 3.0
    docPositions:
    - 800
    - 2089
  homely: !ruby/object:Word
    word: homely
    stem: home
    docFrequency: 3.0
    docPositions:
    - 801
    - 2090
  appearance: !ruby/object:Word
    word: appearance
    stem: appear
    docFrequency: 5.0
    docPositions:
    - 801
    - 808
    - 2090
    - 2097
  seems: !ruby/object:Word
    word: seems
    stem: seem
    docFrequency: 3.0
    docPositions:
    - 801
    - 2090
  supposedly: !ruby/object:Word
    word: supposedly
    stem: supposedli
    docFrequency: 3.0
    docPositions:
    - 803
    - 2092
  electrical: !ruby/object:Word
    word: electrical
    stem: electr
    docFrequency: 3.0
    docPositions:
    - 803
    - 2092
  utility: !ruby/object:Word
    word: utility
    stem: util
    docFrequency: 3.0
    docPositions:
    - 803
    - 2092
  shops: !ruby/object:Word
    word: shops
    stem: shop
    docFrequency: 5.0
    docPositions:
    - 803
    - 857
    - 2092
    - 2136
  examining: !ruby/object:Word
    word: examining
    stem: examin
    docFrequency: 3.0
    docPositions:
    - 804
    - 2093
  appliances: !ruby/object:Word
    word: appliances
    stem: applianc
    docFrequency: 3.0
    docPositions:
    - 804
    - 2093
  characteristic: !ruby/object:Word
    word: characteristic
    stem: characterist
    docFrequency: 3.0
    docPositions:
    - 804
    - 2093
  toggle: !ruby/object:Word
    word: toggle
    stem: toggl
    docFrequency: 5.0
    docPositions:
    - 804
    - 806
    - 2093
    - 2095
  switches: !ruby/object:Word
    word: switches
    stem: switch
    docFrequency: 7.0
    docPositions:
    - 805
    - 806
    - 1352
    - 2094
    - 2095
    - 2453
  frowned: !ruby/object:Word
    word: frowned
    stem: frown
    docFrequency: 3.0
    docPositions:
    - 806
    - 2095
  upon: !ruby/object:Word
    word: upon
    stem: upon
    docFrequency: 3.0
    docPositions:
    - 806
    - 2095
  apparently: !ruby/object:Word
    word: apparently
    stem: appar
    docFrequency: 3.0
    docPositions:
    - 806
    - 2095
  fridges: !ruby/object:Word
    word: fridges
    stem: fridg
    docFrequency: 3.0
    docPositions:
    - 807
    - 2096
  products: !ruby/object:Word
    word: products
    stem: product
    docFrequency: 3.0
    docPositions:
    - 808
    - 2097
  referred: !ruby/object:Word
    word: referred
    stem: refer
    docFrequency: 3.0
    docPositions:
    - 809
    - 2098
  chief: !ruby/object:Word
    word: chief
    stem: chief
    docFrequency: 3.0
    docPositions:
    - 809
    - 2098
  box: !ruby/object:Word
    word: box
    stem: box
    docFrequency: 3.0
    docPositions:
    - 809
    - 2098
  designer: !ruby/object:Word
    word: designer
    stem: design
    docFrequency: 3.0
    docPositions:
    - 810
    - 2099
  larger: !ruby/object:Word
    word: larger
    stem: larger
    docFrequency: 5.0
    docPositions:
    - 812
    - 1121
    - 2099
    - 2313
  containing: !ruby/object:Word
    word: containing
    stem: contain
    docFrequency: 3.0
    docPositions:
    - 812
    - 2099
  principle: !ruby/object:Word
    word: principle
    stem: principl
    docFrequency: 3.0
    docPositions:
    - 813
    - 2100
  goal: !ruby/object:Word
    word: goal
    stem: goal
    docFrequency: 7.0
    docPositions:
    - 813
    - 1217
    - 1389
    - 2100
    - 2358
    - 2475
  option: !ruby/object:Word
    word: option
    stem: option
    docFrequency: 3.0
    docPositions:
    - 814
    - 2101
  separate: !ruby/object:Word
    word: separate
    stem: separ
    docFrequency: 9.0
    docPositions:
    - 814
    - 816
    - 823
    - 833
    - 2101
    - 2103
    - 2110
    - 2118
  channel: !ruby/object:Word
    word: channel
    stem: channel
    docFrequency: 3.0
    docPositions:
    - 815
    - 2102
  rejected: !ruby/object:Word
    word: rejected
    stem: reject
    docFrequency: 3.0
    docPositions:
    - 815
    - 2102
  favour: !ruby/object:Word
    word: favour
    stem: favour
    docFrequency: 3.0
    docPositions:
    - 815
    - 2102
  giving: !ruby/object:Word
    word: giving
    stem: give
    docFrequency: 3.0
    docPositions:
    - 815
    - 2102
  controllers: !ruby/object:Word
    word: controllers
    stem: control
    docFrequency: 3.0
    docPositions:
    - 816
    - 2103
  counters: !ruby/object:Word
    word: counters
    stem: counter
    docFrequency: 3.0
    docPositions:
    - 817
    - 2104
  associated: !ruby/object:Word
    word: associated
    stem: associ
    docFrequency: 3.0
    docPositions:
    - 817
    - 2104
  mapped: !ruby/object:Word
    word: mapped
    stem: map
    docFrequency: 5.0
    docPositions:
    - 820
    - 827
    - 2107
    - 2114
  peripheral: !ruby/object:Word
    word: peripheral
    stem: peripher
    docFrequency: 5.0
    docPositions:
    - 820
    - 1116
    - 2107
    - 2310
  prioritised: !ruby/object:Word
    word: prioritised
    stem: prioritis
    docFrequency: 3.0
    docPositions:
    - 820
    - 2107
  interrupts: !ruby/object:Word
    word: interrupts
    stem: interrupt
    docFrequency: 5.0
    docPositions:
    - 820
    - 1083
    - 2107
    - 2287
  nearly: !ruby/object:Word
    word: nearly
    stem: nearli
    docFrequency: 5.0
    docPositions:
    - 821
    - 911
    - 2108
    - 2175
  echoes: !ruby/object:Word
    word: echoes
    stem: echo
    docFrequency: 5.0
    docPositions:
    - 821
    - 894
    - 2108
    - 2162
  intel: !ruby/object:Word
    word: intel
    stem: intel
    docFrequency: 3.0
    docPositions:
    - 822
    - 2109
  follow: !ruby/object:Word
    word: follow
    stem: follow
    docFrequency: 3.0
    docPositions:
    - 823
    - 2110
  performing: !ruby/object:Word
    word: performing
    stem: perform
    docFrequency: 3.0
    docPositions:
    - 824
    - 2111
  spite: !ruby/object:Word
    word: spite
    stem: spite
    docFrequency: 5.0
    docPositions:
    - 824
    - 866
    - 2111
    - 2143
  usually: !ruby/object:Word
    word: usually
    stem: usual
    docFrequency: 3.0
    docPositions:
    - 825
    - 2112
  processors: !ruby/object:Word
    word: processors
    stem: processor
    docFrequency: 3.0
    docPositions:
    - 826
    - 2113
  motorola: !ruby/object:Word
    word: motorola
    stem: motorola
    docFrequency: 3.0
    docPositions:
    - 826
    - 2113
  rockwell: !ruby/object:Word
    word: rockwell
    stem: rockwel
    docFrequency: 3.0
    docPositions:
    - 826
    - 2113
  family: !ruby/object:Word
    word: family
    stem: famili
    docFrequency: 3.0
    docPositions:
    - 827
    - 2114
  like: !ruby/object:Word
    word: like
    stem: like
    docFrequency: 17.0
    docPositions:
    - 827
    - 930
    - 937
    - 955
    - 981
    - 1238
    - 1364
    - 1456
    - 2114
    - 2190
    - 2193
    - 2205
    - 2221
    - 2373
    - 2461
    - 2519
  parallelism: !ruby/object:Word
    word: parallelism
    stem: parallel
    docFrequency: 3.0
    docPositions:
    - 830
    - 2115
  alu: !ruby/object:Word
    word: alu
    stem: alu
    docFrequency: 5.0
    docPositions:
    - 831
    - 832
    - 2116
    - 2117
  partitioned: !ruby/object:Word
    word: partitioned
    stem: partit
    docFrequency: 3.0
    docPositions:
    - 831
    - 2116
  operating: !ruby/object:Word
    word: operating
    stem: oper
    docFrequency: 5.0
    docPositions:
    - 832
    - 1084
    - 2117
    - 2288
  concurrently: !ruby/object:Word
    word: concurrently
    stem: concurr
    docFrequency: 3.0
    docPositions:
    - 832
    - 2117
  adders: !ruby/object:Word
    word: adders
    stem: adder
    docFrequency: 3.0
    docPositions:
    - 833
    - 2118
  indexing: !ruby/object:Word
    word: indexing
    stem: index
    docFrequency: 3.0
    docPositions:
    - 833
    - 2118
  counter: !ruby/object:Word
    word: counter
    stem: counter
    docFrequency: 3.0
    docPositions:
    - 833
    - 2118
  incrementing: !ruby/object:Word
    word: incrementing
    stem: increment
    docFrequency: 3.0
    docPositions:
    - 835
    - 2118
  multiprogrammed: !ruby/object:Word
    word: multiprogrammed
    stem: multiprogram
    docFrequency: 3.0
    docPositions:
    - 836
    - 2119
  timesharing: !ruby/object:Word
    word: timesharing
    stem: timeshar
    docFrequency: 3.0
    docPositions:
    - 836
    - 2119
  dismantled: !ruby/object:Word
    word: dismantled
    stem: dismantl
    docFrequency: 3.0
    docPositions:
    - 836
    - 2119
  construction: !ruby/object:Word
    word: construction
    stem: construct
    docFrequency: 5.0
    docPositions:
    - 839
    - 845
    - 2120
    - 2126
  mounted: !ruby/object:Word
    word: mounted
    stem: mount
    docFrequency: 3.0
    docPositions:
    - 840
    - 2121
  modules: !ruby/object:Word
    word: modules
    stem: modul
    docFrequency: 9.0
    docPositions:
    - 840
    - 845
    - 847
    - 1287
    - 2121
    - 2126
    - 2407
  venture: !ruby/object:Word
    word: venture
    stem: ventur
    docFrequency: 5.0
    docPositions:
    - 842
    - 1487
    - 2123
    - 2531
  capital: !ruby/object:Word
    word: capital
    stem: capit
    docFrequency: 5.0
    docPositions:
    - 842
    - 1098
    - 2123
    - 2298
  aim: !ruby/object:Word
    word: aim
    stem: aim
    docFrequency: 3.0
    docPositions:
    - 843
    - 2124
  backers: !ruby/object:Word
    word: backers
    stem: backer
    docFrequency: 3.0
    docPositions:
    - 844
    - 2125
  sceptical: !ruby/object:Word
    word: sceptical
    stem: sceptic
    docFrequency: 3.0
    docPositions:
    - 844
    - 2125
  preferred: !ruby/object:Word
    word: preferred
    stem: prefer
    docFrequency: 3.0
    docPositions:
    - 844
    - 2125
  mainstay: !ruby/object:Word
    word: mainstay
    stem: mainstai
    docFrequency: 3.0
    docPositions:
    - 848
    - 2127
  shipped: !ruby/object:Word
    word: shipped
    stem: ship
    docFrequency: 5.0
    docPositions:
    - 848
    - 861
    - 2127
    - 2138
  appealed: !ruby/object:Word
    word: appealed
    stem: appeal
    docFrequency: 3.0
    docPositions:
    - 849
    - 2128
  scientists: !ruby/object:Word
    word: scientists
    stem: scientist
    docFrequency: 3.0
    docPositions:
    - 850
    - 2129
  accessibility: !ruby/object:Word
    word: accessibility
    stem: access
    docFrequency: 3.0
    docPositions:
    - 851
    - 2130
  prefix: !ruby/object:Word
    word: prefix
    stem: prefix
    docFrequency: 3.0
    docPositions:
    - 851
    - 2130
  vax: !ruby/object:Word
    word: vax
    stem: vax
    docFrequency: 3.0
    docPositions:
    - 852
    - 2131
  stands: !ruby/object:Word
    word: stands
    stem: stand
    docFrequency: 3.0
    docPositions:
    - 852
    - 2131
  instead: !ruby/object:Word
    word: instead
    stem: instead
    docFrequency: 5.0
    docPositions:
    - 853
    - 1085
    - 2132
    - 2289
  specifically: !ruby/object:Word
    word: specifically
    stem: specif
    docFrequency: 3.0
    docPositions:
    - 854
    - 2133
  accountants: !ruby/object:Word
    word: accountants
    stem: account
    docFrequency: 3.0
    docPositions:
    - 854
    - 2133
  companies: !ruby/object:Word
    word: companies
    stem: compani
    docFrequency: 3.0
    docPositions:
    - 855
    - 2134
  notice: !ruby/object:Word
    word: notice
    stem: notic
    docFrequency: 3.0
    docPositions:
    - 855
    - 2134
  buying: !ruby/object:Word
    word: buying
    stem: bui
    docFrequency: 3.0
    docPositions:
    - 856
    - 2135
  knows: !ruby/object:Word
    word: knows
    stem: know
    docFrequency: 3.0
    docPositions:
    - 856
    - 2135
  sole: !ruby/object:Word
    word: sole
    stem: sole
    docFrequency: 3.0
    docPositions:
    - 856
    - 2135
  whilst: !ruby/object:Word
    word: whilst
    stem: whilst
    docFrequency: 3.0
    docPositions:
    - 859
    - 2136
  outwardly: !ruby/object:Word
    word: outwardly
    stem: outwardli
    docFrequency: 3.0
    docPositions:
    - 859
    - 2136
  latest: !ruby/object:Word
    word: latest
    stem: latest
    docFrequency: 3.0
    docPositions:
    - 860
    - 2137
  cray: !ruby/object:Word
    word: cray
    stem: crai
    docFrequency: 3.0
    docPositions:
    - 860
    - 2137
  workstation: !ruby/object:Word
    word: workstation
    stem: workstat
    docFrequency: 3.0
    docPositions:
    - 860
    - 2137
  units: !ruby/object:Word
    word: units
    stem: unit
    docFrequency: 5.0
    docPositions:
    - 861
    - 1113
    - 2138
    - 2309
  value: !ruby/object:Word
    word: value
    stem: valu
    docFrequency: 9.0
    docPositions:
    - 862
    - 1075
    - 1098
    - 1394
    - 2139
    - 2281
    - 2298
    - 2478
  rough: !ruby/object:Word
    word: rough
    stem: rough
    docFrequency: 3.0
    docPositions:
    - 862
    - 2139
  count: !ruby/object:Word
    word: count
    stem: count
    docFrequency: 3.0
    docPositions:
    - 862
    - 2139
  audio: !ruby/object:Word
    word: audio
    stem: audio
    docFrequency: 3.0
    docPositions:
    - 864
    - 2141
  aged: !ruby/object:Word
    word: aged
    stem: ag
    docFrequency: 3.0
    docPositions:
    - 864
    - 2141
  successors: !ruby/object:Word
    word: successors
    stem: successor
    docFrequency: 3.0
    docPositions:
    - 865
    - 2142
  inherited: !ruby/object:Word
    word: inherited
    stem: inherit
    docFrequency: 3.0
    docPositions:
    - 866
    - 2143
  earth: !ruby/object:Word
    word: earth
    stem: earth
    docFrequency: 3.0
    docPositions:
    - 866
    - 2143
  scepticism: !ruby/object:Word
    word: scepticism
    stem: sceptic
    docFrequency: 3.0
    docPositions:
    - 866
    - 2143
  sure: !ruby/object:Word
    word: sure
    stem: sure
    docFrequency: 7.0
    docPositions:
    - 872
    - 908
    - 1275
    - 2145
    - 2172
    - 2397
  contributions: !ruby/object:Word
    word: contributions
    stem: contribut
    docFrequency: 3.0
    docPositions:
    - 873
    - 2146
  interesting: !ruby/object:Word
    word: interesting
    stem: interest
    docFrequency: 7.0
    docPositions:
    - 875
    - 1157
    - 1435
    - 2148
    - 2333
    - 2504
  revealing: !ruby/object:Word
    word: revealing
    stem: reveal
    docFrequency: 3.0
    docPositions:
    - 875
    - 2148
  insights: !ruby/object:Word
    word: insights
    stem: insight
    docFrequency: 3.0
    docPositions:
    - 875
    - 2148
  stories: !ruby/object:Word
    word: stories
    stem: stori
    docFrequency: 3.0
    docPositions:
    - 875
    - 2148
  behind: !ruby/object:Word
    word: behind
    stem: behind
    docFrequency: 5.0
    docPositions:
    - 876
    - 1353
    - 2149
    - 2454
  concentrates: !ruby/object:Word
    word: concentrates
    stem: concentr
    docFrequency: 3.0
    docPositions:
    - 878
    - 2151
  aspects: !ruby/object:Word
    word: aspects
    stem: aspect
    docFrequency: 3.0
    docPositions:
    - 878
    - 2151
  involved: !ruby/object:Word
    word: involved
    stem: involv
    docFrequency: 9.0
    docPositions:
    - 881
    - 920
    - 961
    - 1377
    - 2152
    - 2182
    - 2209
    - 2467
  throughout: !ruby/object:Word
    word: throughout
    stem: throughout
    docFrequency: 5.0
    docPositions:
    - 881
    - 909
    - 2152
    - 2173
  initially: !ruby/object:Word
    word: initially
    stem: initi
    docFrequency: 5.0
    docPositions:
    - 882
    - 1059
    - 2153
    - 2273
  assisting: !ruby/object:Word
    word: assisting
    stem: assist
    docFrequency: 3.0
    docPositions:
    - 883
    - 2154
  freddie: !ruby/object:Word
    word: freddie
    stem: freddi
    docFrequency: 5.0
    docPositions:
    - 883
    - 890
    - 2154
    - 2158
  choice: !ruby/object:Word
    word: choice
    stem: choic
    docFrequency: 3.0
    docPositions:
    - 884
    - 2155
  discussed: !ruby/object:Word
    word: discussed
    stem: discuss
    docFrequency: 3.0
    docPositions:
    - 884
    - 2155
  prototype: !ruby/object:Word
    word: prototype
    stem: prototyp
    docFrequency: 11.0
    docPositions:
    - 885
    - 996
    - 1025
    - 1034
    - 1039
    - 2156
    - 2232
    - 2249
    - 2256
    - 2259
  sized: !ruby/object:Word
    word: sized
    stem: size
    docFrequency: 3.0
    docPositions:
    - 886
    - 2157
  successor: !ruby/object:Word
    word: successor
    stem: successor
    docFrequency: 9.0
    docPositions:
    - 886
    - 989
    - 1139
    - 1285
    - 2157
    - 2227
    - 2321
    - 2405
  mark: !ruby/object:Word
    word: mark
    stem: mark
    docFrequency: 29.0
    docPositions:
    - 886
    - 887
    - 933
    - 937
    - 949
    - 954
    - 962
    - 965
    - 974
    - 981
    - 987
    - 1174
    - 1189
    - 2157
    - 2191
    - 2193
    - 2201
    - 2204
    - 2210
    - 2213
    - 2216
    - 2221
    - 2225
    - 2343
    - 2352
  involvement: !ruby/object:Word
    word: involvement
    stem: involv
    docFrequency: 3.0
    docPositions:
    - 889
    - 2157
  paid: !ruby/object:Word
    word: paid
    stem: paid
    docFrequency: 5.0
    docPositions:
    - 890
    - 1237
    - 2158
    - 2372
  visit: !ruby/object:Word
    word: visit
    stem: visit
    docFrequency: 7.0
    docPositions:
    - 890
    - 925
    - 1237
    - 2158
    - 2185
    - 2372
  assess: !ruby/object:Word
    word: assess
    stem: assess
    docFrequency: 3.0
    docPositions:
    - 891
    - 2159
  trip: !ruby/object:Word
    word: trip
    stem: trip
    docFrequency: 3.0
    docPositions:
    - 892
    - 2160
  bell: !ruby/object:Word
    word: bell
    stem: bell
    docFrequency: 3.0
    docPositions:
    - 892
    - 2160
  labs: !ruby/object:Word
    word: labs
    stem: lab
    docFrequency: 3.0
    docPositions:
    - 893
    - 2161
  experiments: !ruby/object:Word
    word: experiments
    stem: experi
    docFrequency: 5.0
    docPositions:
    - 893
    - 1033
    - 2161
    - 2255
  cathode: !ruby/object:Word
    word: cathode
    stem: cathod
    docFrequency: 7.0
    docPositions:
    - 893
    - 903
    - 908
    - 2161
    - 2169
    - 2172
  ray: !ruby/object:Word
    word: ray
    stem: rai
    docFrequency: 7.0
    docPositions:
    - 893
    - 903
    - 908
    - 2161
    - 2169
    - 2172
  occurred: !ruby/object:Word
    word: occurred
    stem: occur
    docFrequency: 3.0
    docPositions:
    - 894
    - 2162
  crts: !ruby/object:Word
    word: crts
    stem: crt
    docFrequency: 5.0
    docPositions:
    - 897
    - 1351
    - 2163
    - 2452
  exploring: !ruby/object:Word
    word: exploring
    stem: explor
    docFrequency: 5.0
    docPositions:
    - 898
    - 1442
    - 2164
    - 2509
  possibility: !ruby/object:Word
    word: possibility
    stem: possibl
    docFrequency: 7.0
    docPositions:
    - 898
    - 1333
    - 1443
    - 2164
    - 2440
    - 2510
  soon: !ruby/object:Word
    word: soon
    stem: soon
    docFrequency: 3.0
    docPositions:
    - 899
    - 2165
  aware: !ruby/object:Word
    word: aware
    stem: awar
    docFrequency: 3.0
    docPositions:
    - 899
    - 2165
  mercury: !ruby/object:Word
    word: mercury
    stem: mercuri
    docFrequency: 28.0
    docPositions:
    - 900
    - 901
    - 964
    - 967
    - 971
    - 982
    - 989
    - 991
    - 992
    - 1013
    - 1027
    - 1080
    - 1127
    - 1207
    - 2166
    - 2167
    - 2212
    - 2215
    - 2222
    - 2227
    - 2228
    - 2243
    - 2251
    - 2286
    - 2317
    - 2356
  immediate: !ruby/object:Word
    word: immediate
    stem: immedi
    docFrequency: 7.0
    docPositions:
    - 901
    - 902
    - 1177
    - 2167
    - 2168
    - 2344
  chance: !ruby/object:Word
    word: chance
    stem: chanc
    docFrequency: 3.0
    docPositions:
    - 902
    - 2168
  proved: !ruby/object:Word
    word: proved
    stem: prove
    docFrequency: 9.0
    docPositions:
    - 903
    - 1046
    - 1325
    - 1402
    - 2169
    - 2264
    - 2436
    - 2484
  experimentation: !ruby/object:Word
    word: experimentation
    stem: experiment
    docFrequency: 3.0
    docPositions:
    - 905
    - 2169
  prove: !ruby/object:Word
    word: prove
    stem: prove
    docFrequency: 3.0
    docPositions:
    - 906
    - 2170
  foundation: !ruby/object:Word
    word: foundation
    stem: foundat
    docFrequency: 3.0
    docPositions:
    - 907
    - 2171
  reputation: !ruby/object:Word
    word: reputation
    stem: reput
    docFrequency: 3.0
    docPositions:
    - 907
    - 2171
  zeroes: !ruby/object:Word
    word: zeroes
    stem: zero
    docFrequency: 3.0
    docPositions:
    - 909
    - 2173
  pattern: !ruby/object:Word
    word: pattern
    stem: pattern
    docFrequency: 3.0
    docPositions:
    - 910
    - 2174
  pieces: !ruby/object:Word
    word: pieces
    stem: piec
    docFrequency: 7.0
    docPositions:
    - 910
    - 1047
    - 1436
    - 2174
    - 2265
    - 2505
  gear: !ruby/object:Word
    word: gear
    stem: gear
    docFrequency: 3.0
    docPositions:
    - 910
    - 2174
  postulated: !ruby/object:Word
    word: postulated
    stem: postul
    docFrequency: 3.0
    docPositions:
    - 911
    - 2175
  geoff: !ruby/object:Word
    word: geoff
    stem: geoff
    docFrequency: 5.0
    docPositions:
    - 911
    - 925
    - 2175
    - 2185
  toothill: !ruby/object:Word
    word: toothill
    stem: toothil
    docFrequency: 5.0
    docPositions:
    - 911
    - 925
    - 2175
    - 2185
  easier: !ruby/object:Word
    word: easier
    stem: easier
    docFrequency: 3.0
    docPositions:
    - 912
    - 2176
  properly: !ruby/object:Word
    word: properly
    stem: properli
    docFrequency: 3.0
    docPositions:
    - 913
    - 2177
  middle: !ruby/object:Word
    word: middle
    stem: middl
    docFrequency: 3.0
    docPositions:
    - 914
    - 2178
  baby: !ruby/object:Word
    word: baby
    stem: babi
    docFrequency: 5.0
    docPositions:
    - 915
    - 921
    - 2179
    - 2183
  attracted: !ruby/object:Word
    word: attracted
    stem: attract
    docFrequency: 3.0
    docPositions:
    - 917
    - 2179
  interest: !ruby/object:Word
    word: interest
    stem: interest
    docFrequency: 14.0
    docPositions:
    - 917
    - 1063
    - 1305
    - 1342
    - 1431
    - 1444
    - 1458
    - 2179
    - 2275
    - 2423
    - 2447
    - 2511
    - 2521
  among: !ruby/object:Word
    word: among
    stem: among
    docFrequency: 3.0
    docPositions:
    - 917
    - 2179
  eminent: !ruby/object:Word
    word: eminent
    stem: emin
    docFrequency: 3.0
    docPositions:
    - 918
    - 2180
  visitors: !ruby/object:Word
    word: visitors
    stem: visitor
    docFrequency: 5.0
    docPositions:
    - 918
    - 1468
    - 2180
    - 2526
  sir: !ruby/object:Word
    word: sir
    stem: sir
    docFrequency: 3.0
    docPositions:
    - 919
    - 2181
  ben: !ruby/object:Word
    word: ben
    stem: ben
    docFrequency: 5.0
    docPositions:
    - 919
    - 925
    - 2181
    - 2185
  lockspeiser: !ruby/object:Word
    word: lockspeiser
    stem: lockspeis
    docFrequency: 7.0
    docPositions:
    - 919
    - 921
    - 925
    - 2181
    - 2183
    - 2185
  ferrantis: !ruby/object:Word
    word: ferrantis
    stem: ferranti
    docFrequency: 3.0
    docPositions:
    - 919
    - 2181
  magnetic: !ruby/object:Word
    word: magnetic
    stem: magnet
    docFrequency: 3.0
    docPositions:
    - 921
    - 2183
  drum: !ruby/object:Word
    word: drum
    stem: drum
    docFrequency: 27.0
    docPositions:
    - 921
    - 939
    - 988
    - 992
    - 994
    - 1035
    - 1036
    - 1037
    - 1052
    - 1053
    - 1114
    - 1401
    - 1404
    - 2183
    - 2195
    - 2226
    - 2228
    - 2230
    - 2257
    - 2258
    - 2259
    - 2268
    - 2269
    - 2310
    - 2483
    - 2486
  committed: !ruby/object:Word
    word: committed
    stem: commit
    docFrequency: 3.0
    docPositions:
    - 921
    - 2183
  manufacture: !ruby/object:Word
    word: manufacture
    stem: manufactur
    docFrequency: 3.0
    docPositions:
    - 922
    - 2184
  aided: !ruby/object:Word
    word: aided
    stem: aid
    docFrequency: 3.0
    docPositions:
    - 926
    - 2186
  dai: !ruby/object:Word
    word: dai
    stem: dai
    docFrequency: 7.0
    docPositions:
    - 926
    - 969
    - 1105
    - 2186
    - 2213
    - 2303
  edwards: !ruby/object:Word
    word: edwards
    stem: edward
    docFrequency: 13.0
    docPositions:
    - 926
    - 969
    - 973
    - 1024
    - 1072
    - 1105
    - 2186
    - 2213
    - 2215
    - 2248
    - 2280
    - 2303
  tommy: !ruby/object:Word
    word: tommy
    stem: tommi
    docFrequency: 3.0
    docPositions:
    - 926
    - 2186
  september: !ruby/object:Word
    word: september
    stem: septemb
    docFrequency: 5.0
    docPositions:
    - 927
    - 1490
    - 2187
    - 2532
  sizeable: !ruby/object:Word
    word: sizeable
    stem: sizeabl
    docFrequency: 3.0
    docPositions:
    - 928
    - 2188
  stayed: !ruby/object:Word
    word: stayed
    stem: stai
    docFrequency: 3.0
    docPositions:
    - 928
    - 2188
  ferranti: !ruby/object:Word
    word: ferranti
    stem: ferranti
    docFrequency: 13.0
    docPositions:
    - 933
    - 964
    - 991
    - 1097
    - 1101
    - 1201
    - 2191
    - 2212
    - 2227
    - 2297
    - 2301
    - 2356
  ready: !ruby/object:Word
    word: ready
    stem: readi
    docFrequency: 3.0
    docPositions:
    - 933
    - 2191
  deliver: !ruby/object:Word
    word: deliver
    stem: deliv
    docFrequency: 3.0
    docPositions:
    - 934
    - 2192
  install: !ruby/object:Word
    word: install
    stem: instal
    docFrequency: 3.0
    docPositions:
    - 937
    - 2193
  maintain: !ruby/object:Word
    word: maintain
    stem: maintain
    docFrequency: 3.0
    docPositions:
    - 938
    - 2194
  everyone: !ruby/object:Word
    word: everyone
    stem: everyon
    docFrequency: 5.0
    docPositions:
    - 939
    - 1342
    - 2195
    - 2447
  conscripted: !ruby/object:Word
    word: conscripted
    stem: conscript
    docFrequency: 3.0
    docPositions:
    - 940
    - 2196
  try: !ruby/object:Word
    word: try
    stem: try
    docFrequency: 3.0
    docPositions:
    - 940
    - 2196
  keep: !ruby/object:Word
    word: keep
    stem: keep
    docFrequency: 9.0
    docPositions:
    - 940
    - 1170
    - 1257
    - 1459
    - 2196
    - 2342
    - 2386
    - 2522
  introduce: !ruby/object:Word
    word: introduce
    stem: introduc
    docFrequency: 3.0
    docPositions:
    - 944
    - 2198
  charging: !ruby/object:Word
    word: charging
    stem: charg
    docFrequency: 3.0
    docPositions:
    - 946
    - 2200
  fee: !ruby/object:Word
    word: fee
    stem: fee
    docFrequency: 3.0
    docPositions:
    - 946
    - 2200
  hour: !ruby/object:Word
    word: hour
    stem: hour
    docFrequency: 7.0
    docPositions:
    - 947
    - 1092
    - 1248
    - 2201
    - 2294
    - 2379
  grappling: !ruby/object:Word
    word: grappling
    stem: grappl
    docFrequency: 3.0
    docPositions:
    - 949
    - 2201
  improve: !ruby/object:Word
    word: improve
    stem: improv
    docFrequency: 5.0
    docPositions:
    - 954
    - 1380
    - 2204
    - 2468
  example: !ruby/object:Word
    word: example
    stem: exampl
    docFrequency: 5.0
    docPositions:
    - 954
    - 1448
    - 2204
    - 2513
  influenced: !ruby/object:Word
    word: influenced
    stem: influenc
    docFrequency: 3.0
    docPositions:
    - 955
    - 2205
  pure: !ruby/object:Word
    word: pure
    stem: pure
    docFrequency: 5.0
    docPositions:
    - 955
    - 957
    - 2205
    - 2207
  mathematicians: !ruby/object:Word
    word: mathematicians
    stem: mathematician
    docFrequency: 3.0
    docPositions:
    - 955
    - 2205
  talking: !ruby/object:Word
    word: talking
    stem: talk
    docFrequency: 3.0
    docPositions:
    - 956
    - 2206
  special: !ruby/object:Word
    word: special
    stem: special
    docFrequency: 3.0
    docPositions:
    - 956
    - 2206
  help: !ruby/object:Word
    word: help
    stem: help
    docFrequency: 5.0
    docPositions:
    - 957
    - 1388
    - 2207
    - 2474
  maths: !ruby/object:Word
    word: maths
    stem: math
    docFrequency: 3.0
    docPositions:
    - 958
    - 2208
  prime: !ruby/object:Word
    word: prime
    stem: prime
    docFrequency: 3.0
    docPositions:
    - 958
    - 2208
  accelerator: !ruby/object:Word
    word: accelerator
    stem: acceler
    docFrequency: 3.0
    docPositions:
    - 961
    - 2209
  improvements: !ruby/object:Word
    word: improvements
    stem: improv
    docFrequency: 3.0
    docPositions:
    - 962
    - 2210
  suggested: !ruby/object:Word
    word: suggested
    stem: suggest
    docFrequency: 3.0
    docPositions:
    - 962
    - 2210
  embarked: !ruby/object:Word
    word: embarked
    stem: embark
    docFrequency: 3.0
    docPositions:
    - 963
    - 2211
  meg: !ruby/object:Word
    word: meg
    stem: meg
    docFrequency: 15.0
    docPositions:
    - 963
    - 967
    - 971
    - 989
    - 991
    - 1011
    - 1027
    - 2211
    - 2213
    - 2215
    - 2227
    - 2241
    - 2251
  powerful: !ruby/object:Word
    word: powerful
    stem: power
    docFrequency: 7.0
    docPositions:
    - 964
    - 1079
    - 1080
    - 2212
    - 2285
    - 2286
  audience: !ruby/object:Word
    word: audience
    stem: audienc
    docFrequency: 7.0
    docPositions:
    - 970
    - 1105
    - 1134
    - 2214
    - 2303
    - 2318
  advances: !ruby/object:Word
    word: advances
    stem: advanc
    docFrequency: 5.0
    docPositions:
    - 971
    - 1071
    - 2215
    - 2279
  introduced: !ruby/object:Word
    word: introduced
    stem: introduc
    docFrequency: 5.0
    docPositions:
    - 971
    - 1082
    - 2215
    - 2286
  engaged: !ruby/object:Word
    word: engaged
    stem: engag
    docFrequency: 3.0
    docPositions:
    - 974
    - 2216
  crystal: !ruby/object:Word
    word: crystal
    stem: crystal
    docFrequency: 7.0
    docPositions:
    - 975
    - 982
    - 1033
    - 2217
    - 2222
    - 2255
  structures: !ruby/object:Word
    word: structures
    stem: structur
    docFrequency: 5.0
    docPositions:
    - 975
    - 1161
    - 2217
    - 2337
  total: !ruby/object:Word
    word: total
    stem: total
    docFrequency: 3.0
    docPositions:
    - 975
    - 2217
  wasted: !ruby/object:Word
    word: wasted
    stem: wast
    docFrequency: 3.0
    docPositions:
    - 976
    - 2218
  due: !ruby/object:Word
    word: due
    stem: due
    docFrequency: 3.0
    docPositions:
    - 976
    - 2218
  faults: !ruby/object:Word
    word: faults
    stem: fault
    docFrequency: 5.0
    docPositions:
    - 976
    - 1231
    - 2218
    - 2368
  daily: !ruby/object:Word
    word: daily
    stem: daili
    docFrequency: 5.0
    docPositions:
    - 978
    - 1376
    - 2220
    - 2466
  routine: !ruby/object:Word
    word: routine
    stem: routin
    docFrequency: 7.0
    docPositions:
    - 978
    - 1054
    - 1389
    - 2220
    - 2270
    - 2475
  stretch: !ruby/object:Word
    word: stretch
    stem: stretch
    docFrequency: 5.0
    docPositions:
    - 978
    - 1078
    - 2220
    - 2284
  improving: !ruby/object:Word
    word: improving
    stem: improv
    docFrequency: 7.0
    docPositions:
    - 979
    - 1147
    - 1229
    - 2221
    - 2327
    - 2366
  priority: !ruby/object:Word
    word: priority
    stem: prioriti
    docFrequency: 3.0
    docPositions:
    - 979
    - 2221
  cathodes: !ruby/object:Word
    word: cathodes
    stem: cathod
    docFrequency: 3.0
    docPositions:
    - 981
    - 2221
  totals: !ruby/object:Word
    word: totals
    stem: total
    docFrequency: 3.0
    docPositions:
    - 983
    - 2223
  fewer: !ruby/object:Word
    word: fewer
    stem: fewer
    docFrequency: 3.0
    docPositions:
    - 983
    - 2223
  elements: !ruby/object:Word
    word: elements
    stem: element
    docFrequency: 3.0
    docPositions:
    - 983
    - 2223
  reduction: !ruby/object:Word
    word: reduction
    stem: reduct
    docFrequency: 3.0
    docPositions:
    - 984
    - 2224
  extra: !ruby/object:Word
    word: extra
    stem: extra
    docFrequency: 5.0
    docPositions:
    - 985
    - 1013
    - 2225
    - 2243
  sizes: !ruby/object:Word
    word: sizes
    stem: size
    docFrequency: 3.0
    docPositions:
    - 987
    - 2225
  crt: !ruby/object:Word
    word: crt
    stem: crt
    docFrequency: 9.0
    docPositions:
    - 987
    - 991
    - 1000
    - 2225
    - 2227
    - 2234
  smaller: !ruby/object:Word
    word: smaller
    stem: smaller
    docFrequency: 5.0
    docPositions:
    - 993
    - 997
    - 2229
    - 2233
  connected: !ruby/object:Word
    word: connected
    stem: connect
    docFrequency: 5.0
    docPositions:
    - 993
    - 1301
    - 2229
    - 2419
  funny: !ruby/object:Word
    word: funny
    stem: funni
    docFrequency: 3.0
    docPositions:
    - 994
    - 2230
  lose: !ruby/object:Word
    word: lose
    stem: lose
    docFrequency: 3.0
    docPositions:
    - 994
    - 2230
  attach: !ruby/object:Word
    word: attach
    stem: attach
    docFrequency: 3.0
    docPositions:
    - 995
    - 2231
  drums: !ruby/object:Word
    word: drums
    stem: drum
    docFrequency: 5.0
    docPositions:
    - 995
    - 997
    - 2231
    - 2233
  contemporary: !ruby/object:Word
    word: contemporary
    stem: contemporari
    docFrequency: 3.0
    docPositions:
    - 996
    - 2232
  megs: !ruby/object:Word
    word: megs
    stem: meg
    docFrequency: 3.0
    docPositions:
    - 996
    - 2232
  seven: !ruby/object:Word
    word: seven
    stem: seven
    docFrequency: 9.0
    docPositions:
    - 996
    - 1013
    - 1065
    - 1146
    - 2232
    - 2243
    - 2277
    - 2326
  ram: !ruby/object:Word
    word: ram
    stem: ram
    docFrequency: 3.0
    docPositions:
    - 997
    - 2233
  natural: !ruby/object:Word
    word: natural
    stem: natur
    docFrequency: 5.0
    docPositions:
    - 999
    - 1287
    - 2233
    - 2407
  element: !ruby/object:Word
    word: element
    stem: element
    docFrequency: 3.0
    docPositions:
    - 999
    - 2233
  regenerate: !ruby/object:Word
    word: regenerate
    stem: regener
    docFrequency: 3.0
    docPositions:
    - 1000
    - 2234
  decay: !ruby/object:Word
    word: decay
    stem: decai
    docFrequency: 3.0
    docPositions:
    - 1001
    - 2235
  periods: !ruby/object:Word
    word: periods
    stem: period
    docFrequency: 5.0
    docPositions:
    - 1002
    - 1003
    - 2236
    - 2237
  regenerated: !ruby/object:Word
    word: regenerated
    stem: regener
    docFrequency: 3.0
    docPositions:
    - 1003
    - 2237
  action: !ruby/object:Word
    word: action
    stem: action
    docFrequency: 5.0
    docPositions:
    - 1003
    - 1008
    - 2237
    - 2240
  accesses: !ruby/object:Word
    word: accesses
    stem: access
    docFrequency: 3.0
    docPositions:
    - 1006
    - 2238
  digit: !ruby/object:Word
    word: digit
    stem: digit
    docFrequency: 3.0
    docPositions:
    - 1007
    - 2239
  double: !ruby/object:Word
    word: double
    stem: doubl
    docFrequency: 3.0
    docPositions:
    - 1008
    - 2240
  beats: !ruby/object:Word
    word: beats
    stem: beat
    docFrequency: 3.0
    docPositions:
    - 1008
    - 2240
  microseconds: !ruby/object:Word
    word: microseconds
    stem: microsecond
    docFrequency: 15.0
    docPositions:
    - 1008
    - 1014
    - 1016
    - 1017
    - 1019
    - 1020
    - 1127
    - 2240
    - 2244
    - 2246
    - 2247
    - 2248
    - 2317
  b: !ruby/object:Word
    word: b
    stem: b
    docFrequency: 7.0
    docPositions:
    - 1009
    - 1049
    - 1166
    - 2241
    - 2265
    - 2340
  terminology: !ruby/object:Word
    word: terminology
    stem: terminolog
    docFrequency: 7.0
    docPositions:
    - 1012
    - 1111
    - 1189
    - 2242
    - 2307
    - 2352
  risc: !ruby/object:Word
    word: risc
    stem: risc
    docFrequency: 3.0
    docPositions:
    - 1012
    - 2242
  operations: !ruby/object:Word
    word: operations
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 1014
    - 2244
  operation: !ruby/object:Word
    word: operation
    stem: oper
    docFrequency: 7.0
    docPositions:
    - 1015
    - 1396
    - 1418
    - 2245
    - 2480
    - 2494
  fraction: !ruby/object:Word
    word: fraction
    stem: fraction
    docFrequency: 3.0
    docPositions:
    - 1016
    - 2246
  exponent: !ruby/object:Word
    word: exponent
    stem: expon
    docFrequency: 3.0
    docPositions:
    - 1016
    - 2246
  multiplication: !ruby/object:Word
    word: multiplication
    stem: multipl
    docFrequency: 5.0
    docPositions:
    - 1017
    - 1020
    - 2247
    - 2248
  fixed: !ruby/object:Word
    word: fixed
    stem: fix
    docFrequency: 11.0
    docPositions:
    - 1017
    - 1111
    - 1116
    - 1118
    - 1125
    - 2247
    - 2307
    - 2310
    - 2312
    - 2315
  addition: !ruby/object:Word
    word: addition
    stem: addit
    docFrequency: 3.0
    docPositions:
    - 1019
    - 2247
  subtraction: !ruby/object:Word
    word: subtraction
    stem: subtract
    docFrequency: 3.0
    docPositions:
    - 1019
    - 2247
  dick: !ruby/object:Word
    word: dick
    stem: dick
    docFrequency: 3.0
    docPositions:
    - 1024
    - 2248
  grimsdale: !ruby/object:Word
    word: grimsdale
    stem: grimsdal
    docFrequency: 5.0
    docPositions:
    - 1024
    - 1059
    - 2248
    - 2273
  discussion: !ruby/object:Word
    word: discussion
    stem: discuss
    docFrequency: 3.0
    docPositions:
    - 1025
    - 2249
  overlapped: !ruby/object:Word
    word: overlapped
    stem: overlap
    docFrequency: 5.0
    docPositions:
    - 1026
    - 1125
    - 2250
    - 2315
  concern: !ruby/object:Word
    word: concern
    stem: concern
    docFrequency: 3.0
    docPositions:
    - 1027
    - 2251
  though: !ruby/object:Word
    word: though
    stem: though
    docFrequency: 11.0
    docPositions:
    - 1028
    - 1056
    - 1164
    - 1188
    - 1402
    - 2252
    - 2270
    - 2338
    - 2351
    - 2484
  unreliable: !ruby/object:Word
    word: unreliable
    stem: unreli
    docFrequency: 3.0
    docPositions:
    - 1029
    - 2253
  offered: !ruby/object:Word
    word: offered
    stem: offer
    docFrequency: 3.0
    docPositions:
    - 1029
    - 2253
  improvement: !ruby/object:Word
    word: improvement
    stem: improv
    docFrequency: 3.0
    docPositions:
    - 1030
    - 2254
  consumed: !ruby/object:Word
    word: consumed
    stem: consum
    docFrequency: 5.0
    docPositions:
    - 1030
    - 1122
    - 2254
    - 2314
  power: !ruby/object:Word
    word: power
    stem: power
    docFrequency: 9.0
    docPositions:
    - 1030
    - 1051
    - 1250
    - 1384
    - 2254
    - 2267
    - 2381
    - 2470
  colleague: !ruby/object:Word
    word: colleague
    stem: colleagu
    docFrequency: 3.0
    docPositions:
    - 1032
    - 2254
  doug: !ruby/object:Word
    word: doug
    stem: doug
    docFrequency: 3.0
    docPositions:
    - 1032
    - 2254
  webb: !ruby/object:Word
    word: webb
    stem: webb
    docFrequency: 3.0
    docPositions:
    - 1032
    - 2254
  stc: !ruby/object:Word
    word: stc
    stem: stc
    docFrequency: 3.0
    docPositions:
    - 1033
    - 2255
  triodes: !ruby/object:Word
    word: triodes
    stem: triod
    docFrequency: 3.0
    docPositions:
    - 1033
    - 2255
  able: !ruby/object:Word
    word: able
    stem: abl
    docFrequency: 5.0
    docPositions:
    - 1034
    - 1257
    - 2256
    - 2386
  caused: !ruby/object:Word
    word: caused
    stem: caus
    docFrequency: 5.0
    docPositions:
    - 1037
    - 1190
    - 2259
    - 2353
  rotation: !ruby/object:Word
    word: rotation
    stem: rotat
    docFrequency: 3.0
    docPositions:
    - 1037
    - 2259
  spare: !ruby/object:Word
    word: spare
    stem: spare
    docFrequency: 3.0
    docPositions:
    - 1039
    - 2259
  timing: !ruby/object:Word
    word: timing
    stem: time
    docFrequency: 3.0
    docPositions:
    - 1040
    - 2260
  leaving: !ruby/object:Word
    word: leaving
    stem: leav
    docFrequency: 3.0
    docPositions:
    - 1040
    - 2260
  usable: !ruby/object:Word
    word: usable
    stem: usabl
    docFrequency: 3.0
    docPositions:
    - 1040
    - 2260
  clock: !ruby/object:Word
    word: clock
    stem: clock
    docFrequency: 3.0
    docPositions:
    - 1040
    - 2260
  khz: !ruby/object:Word
    word: khz
    stem: khz
    docFrequency: 3.0
    docPositions:
    - 1041
    - 2261
  contact: !ruby/object:Word
    word: contact
    stem: contact
    docFrequency: 11.0
    docPositions:
    - 1041
    - 1042
    - 1397
    - 1468
    - 1478
    - 2261
    - 2262
    - 2481
    - 2526
    - 2530
  feasibility: !ruby/object:Word
    word: feasibility
    stem: feasibl
    docFrequency: 3.0
    docPositions:
    - 1046
    - 2264
  take: !ruby/object:Word
    word: take
    stem: take
    docFrequency: 9.0
    docPositions:
    - 1047
    - 1287
    - 1473
    - 1513
    - 2265
    - 2407
    - 2529
    - 2542
  rebuild: !ruby/object:Word
    word: rebuild
    stem: rebuild
    docFrequency: 3.0
    docPositions:
    - 1047
    - 2265
  multiplier: !ruby/object:Word
    word: multiplier
    stem: multipli
    docFrequency: 5.0
    docPositions:
    - 1050
    - 1125
    - 2266
    - 2315
  watt: !ruby/object:Word
    word: watt
    stem: watt
    docFrequency: 3.0
    docPositions:
    - 1051
    - 2267
  consumption: !ruby/object:Word
    word: consumption
    stem: consumpt
    docFrequency: 3.0
    docPositions:
    - 1051
    - 2267
  revolutions: !ruby/object:Word
    word: revolutions
    stem: revolut
    docFrequency: 3.0
    docPositions:
    - 1053
    - 2269
  operated: !ruby/object:Word
    word: operated
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 1053
    - 2269
  rpm: !ruby/object:Word
    word: rpm
    stem: rpm
    docFrequency: 3.0
    docPositions:
    - 1053
    - 2269
  roots: !ruby/object:Word
    word: roots
    stem: root
    docFrequency: 3.0
    docPositions:
    - 1054
    - 2270
  seconds: !ruby/object:Word
    word: seconds
    stem: second
    docFrequency: 3.0
    docPositions:
    - 1054
    - 2270
  repeated: !ruby/object:Word
    word: repeated
    stem: repeat
    docFrequency: 3.0
    docPositions:
    - 1056
    - 2270
  itself: !ruby/object:Word
    word: itself
    stem: itself
    docFrequency: 3.0
    docPositions:
    - 1056
    - 2270
  solved: !ruby/object:Word
    word: solved
    stem: solv
    docFrequency: 3.0
    docPositions:
    - 1057
    - 2271
  component: !ruby/object:Word
    word: component
    stem: compon
    docFrequency: 5.0
    docPositions:
    - 1058
    - 1386
    - 2272
    - 2472
  junction: !ruby/object:Word
    word: junction
    stem: junction
    docFrequency: 5.0
    docPositions:
    - 1059
    - 1065
    - 2273
    - 2277
  experimental: !ruby/object:Word
    word: experimental
    stem: experiment
    docFrequency: 3.0
    docPositions:
    - 1060
    - 2274
  enough: !ruby/object:Word
    word: enough
    stem: enough
    docFrequency: 5.0
    docPositions:
    - 1062
    - 1376
    - 2274
    - 2466
  metropolitan: !ruby/object:Word
    word: metropolitan
    stem: metropolitan
    docFrequency: 3.0
    docPositions:
    - 1063
    - 2275
  vickers: !ruby/object:Word
    word: vickers
    stem: vicker
    docFrequency: 3.0
    docPositions:
    - 1063
    - 2275
  outcome: !ruby/object:Word
    word: outcome
    stem: outcom
    docFrequency: 3.0
    docPositions:
    - 1063
    - 2275
  commercialisation: !ruby/object:Word
    word: commercialisation
    stem: commercialis
    docFrequency: 3.0
    docPositions:
    - 1064
    - 2276
  metrovick: !ruby/object:Word
    word: metrovick
    stem: metrovick
    docFrequency: 3.0
    docPositions:
    - 1064
    - 2276
  atlas: !ruby/object:Word
    word: atlas
    stem: atla
    docFrequency: 28.0
    docPositions:
    - 1068
    - 1071
    - 1074
    - 1078
    - 1082
    - 1092
    - 1096
    - 1105
    - 1106
    - 1129
    - 1139
    - 1146
    - 1159
    - 1166
    - 2279
    - 2280
    - 2284
    - 2286
    - 2294
    - 2296
    - 2303
    - 2304
    - 2317
    - 2321
    - 2326
    - 2335
    - 2340
  lunch: !ruby/object:Word
    word: lunch
    stem: lunch
    docFrequency: 3.0
    docPositions:
    - 1070
    - 2278
  tea: !ruby/object:Word
    word: tea
    stem: tea
    docFrequency: 3.0
    docPositions:
    - 1070
    - 2278
  devoted: !ruby/object:Word
    word: devoted
    stem: devot
    docFrequency: 3.0
    docPositions:
    - 1070
    - 2278
  embodied: !ruby/object:Word
    word: embodied
    stem: embodi
    docFrequency: 3.0
    docPositions:
    - 1071
    - 2279
  presentations: !ruby/object:Word
    word: presentations
    stem: present
    docFrequency: 3.0
    docPositions:
    - 1072
    - 2280
  messrs: !ruby/object:Word
    word: messrs
    stem: messr
    docFrequency: 3.0
    docPositions:
    - 1072
    - 2280
  undertake: !ruby/object:Word
    word: undertake
    stem: undertak
    docFrequency: 3.0
    docPositions:
    - 1075
    - 2281
  delivery: !ruby/object:Word
    word: delivery
    stem: deliveri
    docFrequency: 3.0
    docPositions:
    - 1076
    - 2282
  equivalent: !ruby/object:Word
    word: equivalent
    stem: equival
    docFrequency: 3.0
    docPositions:
    - 1076
    - 2282
  installed: !ruby/object:Word
    word: installed
    stem: instal
    docFrequency: 3.0
    docPositions:
    - 1077
    - 2283
  chiltern: !ruby/object:Word
    word: chiltern
    stem: chiltern
    docFrequency: 3.0
    docPositions:
    - 1077
    - 2283
  competitive: !ruby/object:Word
    word: competitive
    stem: competit
    docFrequency: 3.0
    docPositions:
    - 1078
    - 2284
  title: !ruby/object:Word
    word: title
    stem: titl
    docFrequency: 3.0
    docPositions:
    - 1079
    - 2285
  multiprogramming: !ruby/object:Word
    word: multiprogramming
    stem: multiprogram
    docFrequency: 3.0
    docPositions:
    - 1082
    - 2286
  scheduling: !ruby/object:Word
    word: scheduling
    stem: schedul
    docFrequency: 5.0
    docPositions:
    - 1083
    - 1117
    - 2287
    - 2311
  virtual: !ruby/object:Word
    word: virtual
    stem: virtual
    docFrequency: 3.0
    docPositions:
    - 1083
    - 2287
  paging: !ruby/object:Word
    word: paging
    stem: page
    docFrequency: 3.0
    docPositions:
    - 1083
    - 2287
  teleprinter: !ruby/object:Word
    word: teleprinter
    stem: teleprint
    docFrequency: 5.0
    docPositions:
    - 1085
    - 1252
    - 2289
    - 2381
  dedicated: !ruby/object:Word
    word: dedicated
    stem: dedic
    docFrequency: 3.0
    docPositions:
    - 1085
    - 2289
  peripherals: !ruby/object:Word
    word: peripherals
    stem: peripher
    docFrequency: 5.0
    docPositions:
    - 1086
    - 1228
    - 2290
    - 2365
  sorting: !ruby/object:Word
    word: sorting
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 1086
    - 2290
  supervisor: !ruby/object:Word
    word: supervisor
    stem: supervisor
    docFrequency: 3.0
    docPositions:
    - 1087
    - 2291
  human: !ruby/object:Word
    word: human
    stem: human
    docFrequency: 3.0
    docPositions:
    - 1087
    - 2291
  ensured: !ruby/object:Word
    word: ensured
    stem: ensur
    docFrequency: 3.0
    docPositions:
    - 1089
    - 2291
  flowers: !ruby/object:Word
    word: flowers
    stem: flower
    docFrequency: 3.0
    docPositions:
    - 1089
    - 2291
  designated: !ruby/object:Word
    word: designated
    stem: design
    docFrequency: 3.0
    docPositions:
    - 1090
    - 2292
  regional: !ruby/object:Word
    word: regional
    stem: region
    docFrequency: 3.0
    docPositions:
    - 1090
    - 2292
  centres: !ruby/object:Word
    word: centres
    stem: centr
    docFrequency: 3.0
    docPositions:
    - 1091
    - 2293
  country: !ruby/object:Word
    word: country
    stem: countri
    docFrequency: 5.0
    docPositions:
    - 1091
    - 1314
    - 2293
    - 2430
  inaugurated: !ruby/object:Word
    word: inaugurated
    stem: inaugur
    docFrequency: 3.0
    docPositions:
    - 1091
    - 2293
  december: !ruby/object:Word
    word: december
    stem: decemb
    docFrequency: 5.0
    docPositions:
    - 1091
    - 1464
    - 2293
    - 2524
  provided: !ruby/object:Word
    word: provided
    stem: provid
    docFrequency: 3.0
    docPositions:
    - 1092
    - 2294
  universities: !ruby/object:Word
    word: universities
    stem: univers
    docFrequency: 3.0
    docPositions:
    - 1092
    - 2294
  nottingham: !ruby/object:Word
    word: nottingham
    stem: nottingham
    docFrequency: 3.0
    docPositions:
    - 1093
    - 2295
  edinburgh: !ruby/object:Word
    word: edinburgh
    stem: edinburgh
    docFrequency: 3.0
    docPositions:
    - 1093
    - 2295
  london: !ruby/object:Word
    word: london
    stem: london
    docFrequency: 5.0
    docPositions:
    - 1093
    - 1488
    - 2295
    - 2532
  replaced: !ruby/object:Word
    word: replaced
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 1094
    - 2296
  collaborative: !ruby/object:Word
    word: collaborative
    stem: collabor
    docFrequency: 3.0
    docPositions:
    - 1096
    - 2296
  industrial: !ruby/object:Word
    word: industrial
    stem: industri
    docFrequency: 3.0
    docPositions:
    - 1097
    - 2297
  partner: !ruby/object:Word
    word: partner
    stem: partner
    docFrequency: 3.0
    docPositions:
    - 1097
    - 2297
  charged: !ruby/object:Word
    word: charged
    stem: charg
    docFrequency: 3.0
    docPositions:
    - 1098
    - 2298
  sorted: !ruby/object:Word
    word: sorted
    stem: sort
    docFrequency: 3.0
    docPositions:
    - 1100
    - 2300
  describe: !ruby/object:Word
    word: describe
    stem: describ
    docFrequency: 3.0
    docPositions:
    - 1104
    - 2302
  technical: !ruby/object:Word
    word: technical
    stem: technic
    docFrequency: 5.0
    docPositions:
    - 1104
    - 1157
    - 2302
    - 2333
  shelves: !ruby/object:Word
    word: shelves
    stem: shelv
    docFrequency: 3.0
    docPositions:
    - 1106
    - 2304
  printed: !ruby/object:Word
    word: printed
    stem: print
    docFrequency: 6.0
    docPositions:
    - 1106
    - 1478
    - 1520
    - 2304
    - 2530
  circuit: !ruby/object:Word
    word: circuit
    stem: circuit
    docFrequency: 5.0
    docPositions:
    - 1106
    - 1409
    - 2304
    - 2489
  boards: !ruby/object:Word
    word: boards
    stem: board
    docFrequency: 5.0
    docPositions:
    - 1107
    - 1409
    - 2305
    - 2489
  components: !ruby/object:Word
    word: components
    stem: compon
    docFrequency: 3.0
    docPositions:
    - 1110
    - 2306
  art: !ruby/object:Word
    word: art
    stem: art
    docFrequency: 3.0
    docPositions:
    - 1110
    - 2306
  rom: !ruby/object:Word
    word: rom
    stem: rom
    docFrequency: 3.0
    docPositions:
    - 1111
    - 2307
  twice: !ruby/object:Word
    word: twice
    stem: twice
    docFrequency: 3.0
    docPositions:
    - 1112
    - 2308
  microsecond: !ruby/object:Word
    word: microsecond
    stem: microsecond
    docFrequency: 5.0
    docPositions:
    - 1112
    - 1113
    - 2308
    - 2309
  stop: !ruby/object:Word
    word: stop
    stem: stop
    docFrequency: 3.0
    docPositions:
    - 1117
    - 2311
  additional: !ruby/object:Word
    word: additional
    stem: addit
    docFrequency: 6.0
    docPositions:
    - 1117
    - 1260
    - 1516
    - 2311
    - 2387
  orders: !ruby/object:Word
    word: orders
    stem: order
    docFrequency: 3.0
    docPositions:
    - 1118
    - 2312
  novel: !ruby/object:Word
    word: novel
    stem: novel
    docFrequency: 3.0
    docPositions:
    - 1118
    - 2312
  dataproducts: !ruby/object:Word
    word: dataproducts
    stem: dataproduct
    docFrequency: 3.0
    docPositions:
    - 1120
    - 2312
  disc: !ruby/object:Word
    word: disc
    stem: disc
    docFrequency: 5.0
    docPositions:
    - 1120
    - 1335
    - 2312
    - 2442
  diameter: !ruby/object:Word
    word: diameter
    stem: diamet
    docFrequency: 3.0
    docPositions:
    - 1120
    - 2312
  platters: !ruby/object:Word
    word: platters
    stem: platter
    docFrequency: 3.0
    docPositions:
    - 1121
    - 2313
  shaft: !ruby/object:Word
    word: shaft
    stem: shaft
    docFrequency: 3.0
    docPositions:
    - 1121
    - 2313
  capacity: !ruby/object:Word
    word: capacity
    stem: capac
    docFrequency: 3.0
    docPositions:
    - 1121
    - 2313
  kw: !ruby/object:Word
    word: kw
    stem: kw
    docFrequency: 3.0
    docPositions:
    - 1122
    - 2314
  weighed: !ruby/object:Word
    word: weighed
    stem: weigh
    docFrequency: 3.0
    docPositions:
    - 1122
    - 2314
  lbs: !ruby/object:Word
    word: lbs
    stem: lb
    docFrequency: 3.0
    docPositions:
    - 1122
    - 2314
  grouped: !ruby/object:Word
    word: grouped
    stem: group
    docFrequency: 3.0
    docPositions:
    - 1126
    - 2316
  threes: !ruby/object:Word
    word: threes
    stem: three
    docFrequency: 3.0
    docPositions:
    - 1126
    - 2316
  twos: !ruby/object:Word
    word: twos
    stem: two
    docFrequency: 3.0
    docPositions:
    - 1126
    - 2316
  multiply: !ruby/object:Word
    word: multiply
    stem: multipli
    docFrequency: 3.0
    docPositions:
    - 1127
    - 2317
  links: !ruby/object:Word
    word: links
    stem: link
    docFrequency: 3.0
    docPositions:
    - 1129
    - 2317
  private: !ruby/object:Word
    word: private
    stem: privat
    docFrequency: 3.0
    docPositions:
    - 1130
    - 2318
  kcps: !ruby/object:Word
    word: kcps
    stem: kcp
    docFrequency: 3.0
    docPositions:
    - 1130
    - 2318
  card: !ruby/object:Word
    word: card
    stem: card
    docFrequency: 3.0
    docPositions:
    - 1130
    - 2318
  derrick: !ruby/object:Word
    word: derrick
    stem: derrick
    docFrequency: 3.0
    docPositions:
    - 1134
    - 2318
  morris: !ruby/object:Word
    word: morris
    stem: morri
    docFrequency: 7.0
    docPositions:
    - 1134
    - 1176
    - 1479
    - 2318
    - 2343
    - 2530
  prosaic: !ruby/object:Word
    word: prosaic
    stem: prosaic
    docFrequency: 3.0
    docPositions:
    - 1136
    - 2320
  simply: !ruby/object:Word
    word: simply
    stem: simpli
    docFrequency: 3.0
    docPositions:
    - 1136
    - 2320
  won: !ruby/object:Word
    word: won
    stem: won
    docFrequency: 3.0
    docPositions:
    - 1140
    - 2322
  icl: !ruby/object:Word
    word: icl
    stem: icl
    docFrequency: 5.0
    docPositions:
    - 1140
    - 1142
    - 2322
    - 2324
  achieve: !ruby/object:Word
    word: achieve
    stem: achiev
    docFrequency: 7.0
    docPositions:
    - 1145
    - 1391
    - 1514
    - 2325
    - 2477
    - 2543
  throughput: !ruby/object:Word
    word: throughput
    stem: throughput
    docFrequency: 3.0
    docPositions:
    - 1146
    - 2326
  overall: !ruby/object:Word
    word: overall
    stem: overal
    docFrequency: 3.0
    docPositions:
    - 1148
    - 2328
  multiprocessor: !ruby/object:Word
    word: multiprocessor
    stem: multiprocessor
    docFrequency: 3.0
    docPositions:
    - 1155
    - 2333
  associative: !ruby/object:Word
    word: associative
    stem: associ
    docFrequency: 3.0
    docPositions:
    - 1158
    - 2334
  frequency: !ruby/object:Word
    word: frequency
    stem: frequenc
    docFrequency: 3.0
    docPositions:
    - 1160
    - 2336
  accommodated: !ruby/object:Word
    word: accommodated
    stem: accommod
    docFrequency: 3.0
    docPositions:
    - 1161
    - 2337
  string: !ruby/object:Word
    word: string
    stem: string
    docFrequency: 3.0
    docPositions:
    - 1161
    - 2337
  variants: !ruby/object:Word
    word: variants
    stem: variant
    docFrequency: 3.0
    docPositions:
    - 1165
    - 2339
  conventional: !ruby/object:Word
    word: conventional
    stem: convent
    docFrequency: 3.0
    docPositions:
    - 1165
    - 2339
  block: !ruby/object:Word
    word: block
    stem: block
    docFrequency: 3.0
    docPositions:
    - 1166
    - 2340
  heavily: !ruby/object:Word
    word: heavily
    stem: heavili
    docFrequency: 3.0
    docPositions:
    - 1168
    - 2340
  pipelined: !ruby/object:Word
    word: pipelined
    stem: pipelin
    docFrequency: 3.0
    docPositions:
    - 1168
    - 2340
  stages: !ruby/object:Word
    word: stages
    stem: stage
    docFrequency: 3.0
    docPositions:
    - 1168
    - 2340
  secondary: !ruby/object:Word
    word: secondary
    stem: secondari
    docFrequency: 3.0
    docPositions:
    - 1169
    - 2341
  pipeline: !ruby/object:Word
    word: pipeline
    stem: pipelin
    docFrequency: 3.0
    docPositions:
    - 1169
    - 2341
  path: !ruby/object:Word
    word: path
    stem: path
    docFrequency: 3.0
    docPositions:
    - 1170
    - 2342
  membership: !ruby/object:Word
    word: membership
    stem: membership
    docFrequency: 10.0
    docPositions:
    - 1174
    - 1437
    - 1502
    - 1506
    - 1507
    - 2343
    - 2506
    - 2537
    - 2538
  risen: !ruby/object:Word
    word: risen
    stem: risen
    docFrequency: 3.0
    docPositions:
    - 1174
    - 2343
  above: !ruby/object:Word
    word: above
    stem: abov
    docFrequency: 3.0
    docPositions:
    - 1174
    - 2343
  chairman: !ruby/object:Word
    word: chairman
    stem: chairman
    docFrequency: 14.0
    docPositions:
    - 1176
    - 1177
    - 1213
    - 1266
    - 1320
    - 1330
    - 1372
    - 1429
    - 1479
    - 2343
    - 2344
    - 2439
    - 2530
  graham: !ruby/object:Word
    word: graham
    stem: graham
    docFrequency: 5.0
    docPositions:
    - 1176
    - 1479
    - 2343
    - 2530
  former: !ruby/object:Word
    word: former
    stem: former
    docFrequency: 3.0
    docPositions:
    - 1176
    - 2343
  bcs: !ruby/object:Word
    word: bcs
    stem: bc
    docFrequency: 9.0
    docPositions:
    - 1176
    - 1491
    - 1493
    - 1505
    - 2343
    - 2533
    - 2535
    - 2536
  join: !ruby/object:Word
    word: join
    stem: join
    docFrequency: 5.0
    docPositions:
    - 1177
    - 1395
    - 2344
    - 2479
  ewart: !ruby/object:Word
    word: ewart
    stem: ewart
    docFrequency: 3.0
    docPositions:
    - 1178
    - 2345
  willey: !ruby/object:Word
    word: willey
    stem: willei
    docFrequency: 5.0
    docPositions:
    - 1178
    - 1483
    - 2345
    - 2530
  sandy: !ruby/object:Word
    word: sandy
    stem: sandi
    docFrequency: 5.0
    docPositions:
    - 1178
    - 1483
    - 2345
    - 2530
  douglas: !ruby/object:Word
    word: douglas
    stem: dougla
    docFrequency: 5.0
    docPositions:
    - 1178
    - 1483
    - 2345
    - 2530
  rise: !ruby/object:Word
    word: rise
    stem: rise
    docFrequency: 3.0
    docPositions:
    - 1178
    - 2345
  october: !ruby/object:Word
    word: october
    stem: octob
    docFrequency: 5.0
    docPositions:
    - 1179
    - 1464
    - 2346
    - 2524
  johnson: !ruby/object:Word
    word: johnson
    stem: johnson
    docFrequency: 5.0
    docPositions:
    - 1179
    - 1483
    - 2346
    - 2530
  takes: !ruby/object:Word
    word: takes
    stem: take
    docFrequency: 3.0
    docPositions:
    - 1179
    - 2346
  office: !ruby/object:Word
    word: office
    stem: offic
    docFrequency: 3.0
    docPositions:
    - 1179
    - 2346
  doron: !ruby/object:Word
    word: doron
    stem: doron
    docFrequency: 5.0
    docPositions:
    - 1181
    - 1479
    - 2346
    - 2530
  swade: !ruby/object:Word
    word: swade
    stem: swade
    docFrequency: 3.0
    docPositions:
    - 1181
    - 2346
  resuscitate: !ruby/object:Word
    word: resuscitate
    stem: resuscit
    docFrequency: 3.0
    docPositions:
    - 1181
    - 2346
  totalisator: !ruby/object:Word
    word: totalisator
    stem: totalis
    docFrequency: 3.0
    docPositions:
    - 1181
    - 2346
  heavy: !ruby/object:Word
    word: heavy
    stem: heavi
    docFrequency: 3.0
    docPositions:
    - 1182
    - 2347
  workload: !ruby/object:Word
    word: workload
    stem: workload
    docFrequency: 3.0
    docPositions:
    - 1182
    - 2347
  commemorating: !ruby/object:Word
    word: commemorating
    stem: commemor
    docFrequency: 3.0
    docPositions:
    - 1182
    - 2347
  bicentenary: !ruby/object:Word
    word: bicentenary
    stem: bicentenari
    docFrequency: 3.0
    docPositions:
    - 1182
    - 2347
  birth: !ruby/object:Word
    word: birth
    stem: birth
    docFrequency: 3.0
    docPositions:
    - 1182
    - 2347
  charles: !ruby/object:Word
    word: charles
    stem: charl
    docFrequency: 3.0
    docPositions:
    - 1183
    - 2348
  babbage: !ruby/object:Word
    word: babbage
    stem: babbag
    docFrequency: 3.0
    docPositions:
    - 1183
    - 2348
  regret: !ruby/object:Word
    word: regret
    stem: regret
    docFrequency: 3.0
    docPositions:
    - 1185
    - 2348
  pioneers: !ruby/object:Word
    word: pioneers
    stem: pioneer
    docFrequency: 3.0
    docPositions:
    - 1185
    - 2348
  grace: !ruby/object:Word
    word: grace
    stem: grace
    docFrequency: 3.0
    docPositions:
    - 1186
    - 2349
  hopper: !ruby/object:Word
    word: hopper
    stem: hopper
    docFrequency: 5.0
    docPositions:
    - 1186
    - 1187
    - 2349
    - 2350
  died: !ruby/object:Word
    word: died
    stem: di
    docFrequency: 3.0
    docPositions:
    - 1186
    - 2349
  rear: !ruby/object:Word
    word: rear
    stem: rear
    docFrequency: 3.0
    docPositions:
    - 1187
    - 2350
  admiral: !ruby/object:Word
    word: admiral
    stem: admir
    docFrequency: 3.0
    docPositions:
    - 1187
    - 2350
  innovative: !ruby/object:Word
    word: innovative
    stem: innov
    docFrequency: 3.0
    docPositions:
    - 1187
    - 2350
  developments: !ruby/object:Word
    word: developments
    stem: develop
    docFrequency: 3.0
    docPositions:
    - 1187
    - 2350
  her: !ruby/object:Word
    word: her
    stem: her
    docFrequency: 3.0
    docPositions:
    - 1187
    - 2350
  she: !ruby/object:Word
    word: she
    stem: she
    docFrequency: 5.0
    docPositions:
    - 1188
    - 1189
    - 2351
    - 2352
  introducing: !ruby/object:Word
    word: introducing
    stem: introduc
    docFrequency: 3.0
    docPositions:
    - 1188
    - 2351
  bug: !ruby/object:Word
    word: bug
    stem: bug
    docFrequency: 3.0
    docPositions:
    - 1188
    - 2351
  harvard: !ruby/object:Word
    word: harvard
    stem: harvard
    docFrequency: 3.0
    docPositions:
    - 1189
    - 2352
  moth: !ruby/object:Word
    word: moth
    stem: moth
    docFrequency: 3.0
    docPositions:
    - 1190
    - 2353
  anniversaries: !ruby/object:Word
    word: anniversaries
    stem: anniversari
    docFrequency: 3.0
    docPositions:
    - 1192
    - 2353
  napier: !ruby/object:Word
    word: napier
    stem: napier
    docFrequency: 5.0
    docPositions:
    - 1194
    - 1195
    - 2353
    - 2354
  invention: !ruby/object:Word
    word: invention
    stem: invent
    docFrequency: 3.0
    docPositions:
    - 1194
    - 2353
  calculating: !ruby/object:Word
    word: calculating
    stem: calcul
    docFrequency: 3.0
    docPositions:
    - 1194
    - 2353
  bones: !ruby/object:Word
    word: bones
    stem: bone
    docFrequency: 3.0
    docPositions:
    - 1195
    - 2354
  herman: !ruby/object:Word
    word: herman
    stem: herman
    docFrequency: 3.0
    docPositions:
    - 1197
    - 2354
  hollerith: !ruby/object:Word
    word: hollerith
    stem: hollerith
    docFrequency: 5.0
    docPositions:
    - 1197
    - 2354
  entry: !ruby/object:Word
    word: entry
    stem: entri
    docFrequency: 3.0
    docPositions:
    - 1197
    - 2354
  tabulating: !ruby/object:Word
    word: tabulating
    stem: tabul
    docFrequency: 3.0
    docPositions:
    - 1198
    - 2355
  automation: !ruby/object:Word
    word: automation
    stem: autom
    docFrequency: 3.0
    docPositions:
    - 1198
    - 2355
  census: !ruby/object:Word
    word: census
    stem: censu
    docFrequency: 2.0
    docPositions:
    - 1199
  launch: !ruby/object:Word
    word: launch
    stem: launch
    docFrequency: 5.0
    docPositions:
    - 1201
    - 1209
    - 2356
  orion: !ruby/object:Word
    word: orion
    stem: orion
    docFrequency: 3.0
    docPositions:
    - 1201
    - 2356
  introduction: !ruby/object:Word
    word: introduction
    stem: introduct
    docFrequency: 3.0
    docPositions:
    - 1203
    - 2356
  synchronous: !ruby/object:Word
    word: synchronous
    stem: synchron
    docFrequency: 3.0
    docPositions:
    - 1203
    - 2356
  communications: !ruby/object:Word
    word: communications
    stem: commun
    docFrequency: 5.0
    docPositions:
    - 1203
    - 1207
    - 2356
  protocol: !ruby/object:Word
    word: protocol
    stem: protocol
    docFrequency: 3.0
    docPositions:
    - 1203
    - 2356
  installation: !ruby/object:Word
    word: installation
    stem: instal
    docFrequency: 3.0
    docPositions:
    - 1205
    - 2356
  cash: !ruby/object:Word
    word: cash
    stem: cash
    docFrequency: 3.0
    docPositions:
    - 1205
    - 2356
  dispenser: !ruby/object:Word
    word: dispenser
    stem: dispens
    docFrequency: 3.0
    docPositions:
    - 1205
    - 2356
  issuing: !ruby/object:Word
    word: issuing
    stem: issu
    docFrequency: 3.0
    docPositions:
    - 1207
    - 2356
  licence: !ruby/object:Word
    word: licence
    stem: licenc
    docFrequency: 3.0
    docPositions:
    - 1207
    - 2356
  ps: !ruby/object:Word
    word: ps
    stem: ps
    docFrequency: 3.0
    docPositions:
    - 1209
    - 2356
  elliottt: !ruby/object:Word
    word: elliottt
    stem: elliottt
    docFrequency: 2.0
    docPositions:
    - 1212
  sinclair: !ruby/object:Word
    word: sinclair
    stem: sinclair
    docFrequency: 3.0
    docPositions:
    - 1213
    - 2356
  steady: !ruby/object:Word
    word: steady
    stem: steadi
    docFrequency: 3.0
    docPositions:
    - 1216
    - 2357
  restoring: !ruby/object:Word
    word: restoring
    stem: restor
    docFrequency: 5.0
    docPositions:
    - 1217
    - 1389
    - 2358
    - 2475
  condition: !ruby/object:Word
    word: condition
    stem: condit
    docFrequency: 7.0
    docPositions:
    - 1218
    - 1375
    - 1389
    - 2359
    - 2465
    - 2475
  hard: !ruby/object:Word
    word: hard
    stem: hard
    docFrequency: 3.0
    docPositions:
    - 1218
    - 2359
  unglamorous: !ruby/object:Word
    word: unglamorous
    stem: unglamor
    docFrequency: 3.0
    docPositions:
    - 1218
    - 2359
  sessions: !ruby/object:Word
    word: sessions
    stem: session
    docFrequency: 5.0
    docPositions:
    - 1219
    - 1380
    - 2360
    - 2468
  restoration: !ruby/object:Word
    word: restoration
    stem: restor
    docFrequency: 7.0
    docPositions:
    - 1219
    - 1313
    - 1343
    - 2360
    - 2429
    - 2448
  exceptionally: !ruby/object:Word
    word: exceptionally
    stem: exception
    docFrequency: 3.0
    docPositions:
    - 1222
    - 2361
  temperature: !ruby/object:Word
    word: temperature
    stem: temperatur
    docFrequency: 3.0
    docPositions:
    - 1224
    - 2363
  degrees: !ruby/object:Word
    word: degrees
    stem: degre
    docFrequency: 3.0
    docPositions:
    - 1225
    - 2364
  neither: !ruby/object:Word
    word: neither
    stem: neither
    docFrequency: 3.0
    docPositions:
    - 1225
    - 2364
  conditioning: !ruby/object:Word
    word: conditioning
    stem: condit
    docFrequency: 3.0
    docPositions:
    - 1226
    - 2365
  film: !ruby/object:Word
    word: film
    stem: film
    docFrequency: 5.0
    docPositions:
    - 1229
    - 2366
  handlers: !ruby/object:Word
    word: handlers
    stem: handler
    docFrequency: 5.0
    docPositions:
    - 1229
    - 1230
    - 2366
    - 2367
  steadily: !ruby/object:Word
    word: steadily
    stem: steadili
    docFrequency: 5.0
    docPositions:
    - 1229
    - 1431
    - 2366
    - 2500
  thick: !ruby/object:Word
    word: thick
    stem: thick
    docFrequency: 3.0
    docPositions:
    - 1230
    - 2367
  grime: !ruby/object:Word
    word: grime
    stem: grime
    docFrequency: 3.0
    docPositions:
    - 1230
    - 2367
  discovering: !ruby/object:Word
    word: discovering
    stem: discov
    docFrequency: 3.0
    docPositions:
    - 1231
    - 2368
  switched: !ruby/object:Word
    word: switched
    stem: switch
    docFrequency: 5.0
    docPositions:
    - 1231
    - 1317
    - 2368
    - 2433
  advance: !ruby/object:Word
    word: advance
    stem: advanc
    docFrequency: 3.0
    docPositions:
    - 1234
    - 2369
  newsletter: !ruby/object:Word
    word: newsletter
    stem: newslett
    docFrequency: 3.0
    docPositions:
    - 1234
    - 2369
  acquisition: !ruby/object:Word
    word: acquisition
    stem: acquisit
    docFrequency: 3.0
    docPositions:
    - 1235
    - 2370
  battery: !ruby/object:Word
    word: battery
    stem: batteri
    docFrequency: 9.0
    docPositions:
    - 1235
    - 1241
    - 1247
    - 1248
    - 2370
    - 2374
    - 2378
    - 2379
  generously: !ruby/object:Word
    word: generously
    stem: gener
    docFrequency: 3.0
    docPositions:
    - 1235
    - 2370
  donated: !ruby/object:Word
    word: donated
    stem: donat
    docFrequency: 3.0
    docPositions:
    - 1235
    - 2370
  raf: !ruby/object:Word
    word: raf
    stem: raf
    docFrequency: 3.0
    docPositions:
    - 1235
    - 2370
  tracked: !ruby/object:Word
    word: tracked
    stem: track
    docFrequency: 3.0
    docPositions:
    - 1236
    - 2371
  stores: !ruby/object:Word
    word: stores
    stem: store
    docFrequency: 3.0
    docPositions:
    - 1237
    - 2372
  batteries: !ruby/object:Word
    word: batteries
    stem: batteri
    docFrequency: 5.0
    docPositions:
    - 1237
    - 1242
    - 2372
    - 2375
  nimrod: !ruby/object:Word
    word: nimrod
    stem: nimrod
    docFrequency: 3.0
    docPositions:
    - 1238
    - 2373
  brand: !ruby/object:Word
    word: brand
    stem: brand
    docFrequency: 3.0
    docPositions:
    - 1241
    - 2374
  normal: !ruby/object:Word
    word: normal
    stem: normal
    docFrequency: 3.0
    docPositions:
    - 1241
    - 2374
  defective: !ruby/object:Word
    word: defective
    stem: defect
    docFrequency: 3.0
    docPositions:
    - 1242
    - 2375
  elliotts: !ruby/object:Word
    word: elliotts
    stem: elliott
    docFrequency: 3.0
    docPositions:
    - 1242
    - 2375
  replace: !ruby/object:Word
    word: replace
    stem: replac
    docFrequency: 3.0
    docPositions:
    - 1243
    - 2376
  faulty: !ruby/object:Word
    word: faulty
    stem: faulti
    docFrequency: 3.0
    docPositions:
    - 1243
    - 2376
  cell: !ruby/object:Word
    word: cell
    stem: cell
    docFrequency: 5.0
    docPositions:
    - 1243
    - 1244
    - 2376
    - 2377
  cells: !ruby/object:Word
    word: cells
    stem: cell
    docFrequency: 3.0
    docPositions:
    - 1243
    - 2376
  principally: !ruby/object:Word
    word: principally
    stem: princip
    docFrequency: 3.0
    docPositions:
    - 1243
    - 2376
  grounds: !ruby/object:Word
    word: grounds
    stem: ground
    docFrequency: 3.0
    docPositions:
    - 1244
    - 2377
  helped: !ruby/object:Word
    word: helped
    stem: help
    docFrequency: 3.0
    docPositions:
    - 1247
    - 2378
  previously: !ruby/object:Word
    word: previously
    stem: previous
    docFrequency: 3.0
    docPositions:
    - 1247
    - 2378
  charge: !ruby/object:Word
    word: charge
    stem: charg
    docFrequency: 3.0
    docPositions:
    - 1248
    - 2379
  switch: !ruby/object:Word
    word: switch
    stem: switch
    docFrequency: 5.0
    docPositions:
    - 1249
    - 1353
    - 2380
    - 2454
  cope: !ruby/object:Word
    word: cope
    stem: cope
    docFrequency: 3.0
    docPositions:
    - 1249
    - 2380
  surge: !ruby/object:Word
    word: surge
    stem: surg
    docFrequency: 3.0
    docPositions:
    - 1250
    - 2381
  acquisitions: !ruby/object:Word
    word: acquisitions
    stem: acquisit
    docFrequency: 3.0
    docPositions:
    - 1252
    - 2381
  creed: !ruby/object:Word
    word: creed
    stem: creed
    docFrequency: 5.0
    docPositions:
    - 1252
    - 1254
    - 2381
    - 2383
  acquired: !ruby/object:Word
    word: acquired
    stem: acquir
    docFrequency: 7.0
    docPositions:
    - 1253
    - 1311
    - 1440
    - 2382
    - 2427
    - 2507
  george: !ruby/object:Word
    word: george
    stem: georg
    docFrequency: 3.0
    docPositions:
    - 1253
    - 2382
  bradley: !ruby/object:Word
    word: bradley
    stem: bradlei
    docFrequency: 3.0
    docPositions:
    - 1253
    - 2382
  storing: !ruby/object:Word
    word: storing
    stem: store
    docFrequency: 3.0
    docPositions:
    - 1254
    - 2383
  garage: !ruby/object:Word
    word: garage
    stem: garag
    docFrequency: 3.0
    docPositions:
    - 1255
    - 2384
  discontinued: !ruby/object:Word
    word: discontinued
    stem: discontinu
    docFrequency: 3.0
    docPositions:
    - 1255
    - 2384
  production: !ruby/object:Word
    word: production
    stem: product
    docFrequency: 7.0
    docPositions:
    - 1255
    - 1273
    - 1288
    - 2384
    - 2395
    - 2408
  considerable: !ruby/object:Word
    word: considerable
    stem: consider
    docFrequency: 7.0
    docPositions:
    - 1258
    - 1316
    - 1332
    - 2387
    - 2432
    - 2439
  open: !ruby/object:Word
    word: open
    stem: open
    docFrequency: 11.0
    docPositions:
    - 1260
    - 1434
    - 1441
    - 1464
    - 1502
    - 2387
    - 2503
    - 2508
    - 2524
    - 2535
  promised: !ruby/object:Word
    word: promised
    stem: promis
    docFrequency: 3.0
    docPositions:
    - 1260
    - 2387
  surprise: !ruby/object:Word
    word: surprise
    stem: surpris
    docFrequency: 5.0
    docPositions:
    - 1261
    - 1270
    - 2388
    - 2392
  incomplete: !ruby/object:Word
    word: incomplete
    stem: incomplet
    docFrequency: 3.0
    docPositions:
    - 1262
    - 2389
  surviving: !ruby/object:Word
    word: surviving
    stem: surviv
    docFrequency: 3.0
    docPositions:
    - 1263
    - 2390
  glory: !ruby/object:Word
    word: glory
    stem: glori
    docFrequency: 3.0
    docPositions:
    - 1269
    - 2391
  concentrating: !ruby/object:Word
    word: concentrating
    stem: concentr
    docFrequency: 5.0
    docPositions:
    - 1269
    - 1323
    - 2391
    - 2434
  associates: !ruby/object:Word
    word: associates
    stem: associ
    docFrequency: 3.0
    docPositions:
    - 1271
    - 2393
  firstly: !ruby/object:Word
    word: firstly
    stem: firstli
    docFrequency: 3.0
    docPositions:
    - 1271
    - 2393
  secondly: !ruby/object:Word
    word: secondly
    stem: secondli
    docFrequency: 3.0
    docPositions:
    - 1272
    - 2394
  'off': !ruby/object:Word
    word: 'off'
    stem: 'off'
    docFrequency: 3.0
    docPositions:
    - 1272
    - 2394
  hand: !ruby/object:Word
    word: hand
    stem: hand
    docFrequency: 5.0
    docPositions:
    - 1273
    - 1352
    - 2395
    - 2453
  discount: !ruby/object:Word
    word: discount
    stem: discount
    docFrequency: 3.0
    docPositions:
    - 1274
    - 2396
  languishing: !ruby/object:Word
    word: languishing
    stem: languish
    docFrequency: 3.0
    docPositions:
    - 1274
    - 2396
  corner: !ruby/object:Word
    word: corner
    stem: corner
    docFrequency: 3.0
    docPositions:
    - 1274
    - 2396
  particular: !ruby/object:Word
    word: particular
    stem: particular
    docFrequency: 5.0
    docPositions:
    - 1275
    - 1444
    - 2397
    - 2511
  combinations: !ruby/object:Word
    word: combinations
    stem: combin
    docFrequency: 3.0
    docPositions:
    - 1276
    - 2398
  glo: !ruby/object:Word
    word: glo
    stem: glo
    docFrequency: 3.0
    docPositions:
    - 1276
    - 2398
  olive: !ruby/object:Word
    word: olive
    stem: oliv
    docFrequency: 3.0
    docPositions:
    - 1276
    - 2398
  drab: !ruby/object:Word
    word: drab
    stem: drab
    docFrequency: 3.0
    docPositions:
    - 1276
    - 2398
  employed: !ruby/object:Word
    word: employed
    stem: emploi
    docFrequency: 3.0
    docPositions:
    - 1276
    - 2398
  lifetimes: !ruby/object:Word
    word: lifetimes
    stem: lifetim
    docFrequency: 3.0
    docPositions:
    - 1277
    - 2399
  specialist: !ruby/object:Word
    word: specialist
    stem: specialist
    docFrequency: 5.0
    docPositions:
    - 1280
    - 1490
    - 2400
    - 2532
  bay: !ruby/object:Word
    word: bay
    stem: bai
    docFrequency: 3.0
    docPositions:
    - 1280
    - 2400
  converters: !ruby/object:Word
    word: converters
    stem: convert
    docFrequency: 3.0
    docPositions:
    - 1281
    - 2401
  console: !ruby/object:Word
    word: console
    stem: consol
    docFrequency: 5.0
    docPositions:
    - 1281
    - 1419
    - 2401
    - 2495
  internally: !ruby/object:Word
    word: internally
    stem: intern
    docFrequency: 3.0
    docPositions:
    - 1281
    - 2401
  hybrid: !ruby/object:Word
    word: hybrid
    stem: hybrid
    docFrequency: 3.0
    docPositions:
    - 1282
    - 2402
  linc: !ruby/object:Word
    word: linc
    stem: linc
    docFrequency: 13.0
    docPositions:
    - 1282
    - 1284
    - 1286
    - 1289
    - 1291
    - 2402
    - 2404
    - 2406
    - 2409
    - 2411
  demonstrated: !ruby/object:Word
    word: demonstrated
    stem: demonstr
    docFrequency: 5.0
    docPositions:
    - 1283
    - 1308
    - 2403
    - 2426
  execute: !ruby/object:Word
    word: execute
    stem: execut
    docFrequency: 5.0
    docPositions:
    - 1289
    - 1291
    - 2409
    - 2411
  hospitals: !ruby/object:Word
    word: hospitals
    stem: hospit
    docFrequency: 3.0
    docPositions:
    - 1294
    - 2412
  institutions: !ruby/object:Word
    word: institutions
    stem: institut
    docFrequency: 3.0
    docPositions:
    - 1295
    - 2413
  diagnosis: !ruby/object:Word
    word: diagnosis
    stem: diagnosi
    docFrequency: 3.0
    docPositions:
    - 1296
    - 2414
  hearing: !ruby/object:Word
    word: hearing
    stem: hear
    docFrequency: 3.0
    docPositions:
    - 1296
    - 2414
  speech: !ruby/object:Word
    word: speech
    stem: speech
    docFrequency: 13.0
    docPositions:
    - 1296
    - 1297
    - 1301
    - 1305
    - 1306
    - 1307
    - 2414
    - 2415
    - 2419
    - 2423
    - 2424
    - 2425
  disorders: !ruby/object:Word
    word: disorders
    stem: disord
    docFrequency: 3.0
    docPositions:
    - 1296
    - 2414
  synthesiser: !ruby/object:Word
    word: synthesiser
    stem: synthesis
    docFrequency: 5.0
    docPositions:
    - 1297
    - 1306
    - 2415
    - 2424
  play: !ruby/object:Word
    word: play
    stem: plai
    docFrequency: 5.0
    docPositions:
    - 1297
    - 1303
    - 2415
    - 2421
  syllables: !ruby/object:Word
    word: syllables
    stem: syllabl
    docFrequency: 3.0
    docPositions:
    - 1297
    - 2415
  guinea: !ruby/object:Word
    word: guinea
    stem: guinea
    docFrequency: 3.0
    docPositions:
    - 1298
    - 2416
  pig: !ruby/object:Word
    word: pig
    stem: pig
    docFrequency: 3.0
    docPositions:
    - 1298
    - 2416
  burbling: !ruby/object:Word
    word: burbling
    stem: burbl
    docFrequency: 3.0
    docPositions:
    - 1299
    - 2417
  whistling: !ruby/object:Word
    word: whistling
    stem: whistl
    docFrequency: 3.0
    docPositions:
    - 1300
    - 2418
  noises: !ruby/object:Word
    word: noises
    stem: nois
    docFrequency: 3.0
    docPositions:
    - 1300
    - 2418
  easily: !ruby/object:Word
    word: easily
    stem: easili
    docFrequency: 5.0
    docPositions:
    - 1301
    - 1369
    - 2419
    - 2464
  persuaded: !ruby/object:Word
    word: persuaded
    stem: persuad
    docFrequency: 3.0
    docPositions:
    - 1301
    - 2419
  hold: !ruby/object:Word
    word: hold
    stem: hold
    docFrequency: 3.0
    docPositions:
    - 1301
    - 2419
  conversation: !ruby/object:Word
    word: conversation
    stem: convers
    docFrequency: 3.0
    docPositions:
    - 1302
    - 2420
  phoneme: !ruby/object:Word
    word: phoneme
    stem: phonem
    docFrequency: 5.0
    docPositions:
    - 1303
    - 1306
    - 2421
    - 2424
  ftware: !ruby/object:Word
    word: ftware
    stem: ftware
    docFrequency: 3.0
    docPositions:
    - 1303
    - 2421
  sample: !ruby/object:Word
    word: sample
    stem: sampl
    docFrequency: 3.0
    docPositions:
    - 1303
    - 2421
  sentences: !ruby/object:Word
    word: sentences
    stem: sentenc
    docFrequency: 3.0
    docPositions:
    - 1303
    - 2421
  pleased: !ruby/object:Word
    word: pleased
    stem: pleas
    docFrequency: 3.0
    docPositions:
    - 1304
    - 2422
  hear: !ruby/object:Word
    word: hear
    stem: hear
    docFrequency: 3.0
    docPositions:
    - 1304
    - 2422
  programmers: !ruby/object:Word
    word: programmers
    stem: programm
    docFrequency: 3.0
    docPositions:
    - 1305
    - 2423
  synthesis: !ruby/object:Word
    word: synthesis
    stem: synthesi
    docFrequency: 3.0
    docPositions:
    - 1305
    - 2423
  ingredients: !ruby/object:Word
    word: ingredients
    stem: ingredi
    docFrequency: 3.0
    docPositions:
    - 1308
    - 2426
  shortly: !ruby/object:Word
    word: shortly
    stem: shortli
    docFrequency: 3.0
    docPositions:
    - 1312
    - 2428
  haul: !ruby/object:Word
    word: haul
    stem: haul
    docFrequency: 3.0
    docPositions:
    - 1313
    - 2429
  unfortunately: !ruby/object:Word
    word: unfortunately
    stem: unfortun
    docFrequency: 3.0
    docPositions:
    - 1314
    - 2430
  showing: !ruby/object:Word
    word: showing
    stem: show
    docFrequency: 3.0
    docPositions:
    - 1315
    - 2431
  signs: !ruby/object:Word
    word: signs
    stem: sign
    docFrequency: 3.0
    docPositions:
    - 1315
    - 2431
  em: !ruby/object:Word
    word: em
    stem: em
    docFrequency: 3.0
    docPositions:
    - 1315
    - 2431
  rust: !ruby/object:Word
    word: rust
    stem: rust
    docFrequency: 3.0
    docPositions:
    - 1315
    - 2431
  safely: !ruby/object:Word
    word: safely
    stem: safe
    docFrequency: 3.0
    docPositions:
    - 1316
    - 2432
  emulators: !ruby/object:Word
    word: emulators
    stem: emul
    docFrequency: 4.0
    docPositions:
    - 1319
    - 1328
    - 2437
  focus: !ruby/object:Word
    word: focus
    stem: focu
    docFrequency: 3.0
    docPositions:
    - 1322
    - 2433
  sharply: !ruby/object:Word
    word: sharply
    stem: sharpli
    docFrequency: 3.0
    docPositions:
    - 1323
    - 2434
  subject: !ruby/object:Word
    word: subject
    stem: subject
    docFrequency: 3.0
    docPositions:
    - 1326
    - 2437
  succeeded: !ruby/object:Word
    word: succeeded
    stem: succeed
    docFrequency: 5.0
    docPositions:
    - 1329
    - 1374
    - 2438
    - 2464
  martin: !ruby/object:Word
    word: martin
    stem: martin
    docFrequency: 5.0
    docPositions:
    - 1329
    - 1483
    - 2438
    - 2530
  campbell: !ruby/object:Word
    word: campbell
    stem: campbel
    docFrequency: 5.0
    docPositions:
    - 1329
    - 1483
    - 2438
    - 2530
  kelly: !ruby/object:Word
    word: kelly
    stem: kelli
    docFrequency: 3.0
    docPositions:
    - 1330
    - 2439
  studying: !ruby/object:Word
    word: studying
    stem: studi
    docFrequency: 3.0
    docPositions:
    - 1333
    - 2440
  developing: !ruby/object:Word
    word: developing
    stem: develop
    docFrequency: 3.0
    docPositions:
    - 1333
    - 2440
  formats: !ruby/object:Word
    word: formats
    stem: format
    docFrequency: 3.0
    docPositions:
    - 1334
    - 2441
  floppy: !ruby/object:Word
    word: floppy
    stem: floppi
    docFrequency: 3.0
    docPositions:
    - 1334
    - 2441
  discs: !ruby/object:Word
    word: discs
    stem: disc
    docFrequency: 3.0
    docPositions:
    - 1334
    - 2441
  emulations: !ruby/object:Word
    word: emulations
    stem: emul
    docFrequency: 3.0
    docPositions:
    - 1336
    - 2443
  vice: !ruby/object:Word
    word: vice
    stem: vice
    docFrequency: 3.0
    docPositions:
    - 1336
    - 2443
  versa: !ruby/object:Word
    word: versa
    stem: versa
    docFrequency: 3.0
    docPositions:
    - 1336
    - 2443
  eveloped: !ruby/object:Word
    word: eveloped
    stem: evelop
    docFrequency: 3.0
    docPositions:
    - 1336
    - 2443
  enjoyable: !ruby/object:Word
    word: enjoyable
    stem: enjoy
    docFrequency: 3.0
    docPositions:
    - 1339
    - 2444
  chris: !ruby/object:Word
    word: chris
    stem: chri
    docFrequency: 9.0
    docPositions:
    - 1339
    - 1350
    - 1357
    - 1416
    - 2444
    - 2451
    - 2456
    - 2492
  burton: !ruby/object:Word
    word: burton
    stem: burton
    docFrequency: 7.0
    docPositions:
    - 1339
    - 1350
    - 1416
    - 2444
    - 2451
    - 2492
  explanation: !ruby/object:Word
    word: explanation
    stem: explan
    docFrequency: 3.0
    docPositions:
    - 1340
    - 2445
  attempting: !ruby/object:Word
    word: attempting
    stem: attempt
    docFrequency: 3.0
    docPositions:
    - 1342
    - 2447
  emulates: !ruby/object:Word
    word: emulates
    stem: emul
    docFrequency: 7.0
    docPositions:
    - 1346
    - 1347
    - 1417
    - 2449
    - 2450
    - 2493
  target: !ruby/object:Word
    word: target
    stem: target
    docFrequency: 3.0
    docPositions:
    - 1346
    - 2449
  interaction: !ruby/object:Word
    word: interaction
    stem: interact
    docFrequency: 3.0
    docPositions:
    - 1347
    - 2450
  graphics: !ruby/object:Word
    word: graphics
    stem: graphic
    docFrequency: 7.0
    docPositions:
    - 1347
    - 1365
    - 1417
    - 2450
    - 2462
    - 2493
  conserves: !ruby/object:Word
    word: conserves
    stem: conserv
    docFrequency: 3.0
    docPositions:
    - 1348
    - 2451
  persona: !ruby/object:Word
    word: persona
    stem: persona
    docFrequency: 3.0
    docPositions:
    - 1348
    - 2451
  pictorial: !ruby/object:Word
    word: pictorial
    stem: pictori
    docFrequency: 3.0
    docPositions:
    - 1350
    - 2451
  front: !ruby/object:Word
    word: front
    stem: front
    docFrequency: 3.0
    docPositions:
    - 1351
    - 2452
  face: !ruby/object:Word
    word: face
    stem: face
    docFrequency: 3.0
    docPositions:
    - 1351
    - 2452
  lights: !ruby/object:Word
    word: lights
    stem: light
    docFrequency: 3.0
    docPositions:
    - 1351
    - 2452
  emerges: !ruby/object:Word
    word: emerges
    stem: emerg
    docFrequency: 3.0
    docPositions:
    - 1353
    - 2454
  change: !ruby/object:Word
    word: change
    stem: chang
    docFrequency: 5.0
    docPositions:
    - 1353
    - 1385
    - 2454
    - 2471
  settings: !ruby/object:Word
    word: settings
    stem: set
    docFrequency: 3.0
    docPositions:
    - 1353
    - 2454
  holes: !ruby/object:Word
    word: holes
    stem: hole
    docFrequency: 3.0
    docPositions:
    - 1354
    - 2455
  punched: !ruby/object:Word
    word: punched
    stem: punch
    docFrequency: 3.0
    docPositions:
    - 1354
    - 2455
  extensively: !ruby/object:Word
    word: extensively
    stem: extens
    docFrequency: 3.0
    docPositions:
    - 1357
    - 2456
  tested: !ruby/object:Word
    word: tested
    stem: test
    docFrequency: 3.0
    docPositions:
    - 1357
    - 2456
  debugged: !ruby/object:Word
    word: debugged
    stem: debug
    docFrequency: 3.0
    docPositions:
    - 1357
    - 2456
  verified: !ruby/object:Word
    word: verified
    stem: verifi
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2457
  derek: !ruby/object:Word
    word: derek
    stem: derek
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2457
  milledge: !ruby/object:Word
    word: milledge
    stem: milledg
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2457
  against: !ruby/object:Word
    word: against
    stem: against
    docFrequency: 3.0
    docPositions:
    - 1358
    - 2457
  older: !ruby/object:Word
    word: older
    stem: older
    docFrequency: 3.0
    docPositions:
    - 1359
    - 2458
  redevelop: !ruby/object:Word
    word: redevelop
    stem: redevelop
    docFrequency: 3.0
    docPositions:
    - 1360
    - 2459
  wrote: !ruby/object:Word
    word: wrote
    stem: wrote
    docFrequency: 3.0
    docPositions:
    - 1360
    - 2459
  written: !ruby/object:Word
    word: written
    stem: written
    docFrequency: 5.0
    docPositions:
    - 1362
    - 1369
    - 2459
    - 2464
  peter: !ruby/object:Word
    word: peter
    stem: peter
    docFrequency: 3.0
    docPositions:
    - 1362
    - 2459
  onion: !ruby/object:Word
    word: onion
    stem: onion
    docFrequency: 3.0
    docPositions:
    - 1362
    - 2459
  nearing: !ruby/object:Word
    word: nearing
    stem: near
    docFrequency: 3.0
    docPositions:
    - 1363
    - 2460
  completion: !ruby/object:Word
    word: completion
    stem: complet
    docFrequency: 3.0
    docPositions:
    - 1363
    - 2460
  pc: !ruby/object:Word
    word: pc
    stem: pc
    docFrequency: 5.0
    docPositions:
    - 1364
    - 1424
    - 2461
    - 2498
  vga: !ruby/object:Word
    word: vga
    stem: vga
    docFrequency: 5.0
    docPositions:
    - 1364
    - 1417
    - 2461
    - 2493
  imagine: !ruby/object:Word
    word: imagine
    stem: imagin
    docFrequency: 3.0
    docPositions:
    - 1367
    - 2462
  consuming: !ruby/object:Word
    word: consuming
    stem: consum
    docFrequency: 3.0
    docPositions:
    - 1367
    - 2462
  toolset: !ruby/object:Word
    word: toolset
    stem: toolset
    docFrequency: 3.0
    docPositions:
    - 1369
    - 2464
  enable: !ruby/object:Word
    word: enable
    stem: enabl
    docFrequency: 3.0
    docPositions:
    - 1369
    - 2464
  cooper: !ruby/object:Word
    word: cooper
    stem: cooper
    docFrequency: 5.0
    docPositions:
    - 1372
    - 1479
    - 2464
    - 2530
  continuous: !ruby/object:Word
    word: continuous
    stem: continu
    docFrequency: 3.0
    docPositions:
    - 1376
    - 2466
  sustained: !ruby/object:Word
    word: sustained
    stem: sustain
    docFrequency: 3.0
    docPositions:
    - 1379
    - 2467
  involving: !ruby/object:Word
    word: involving
    stem: involv
    docFrequency: 3.0
    docPositions:
    - 1380
    - 2468
  achievement: !ruby/object:Word
    word: achievement
    stem: achiev
    docFrequency: 3.0
    docPositions:
    - 1381
    - 2469
  refurbishment: !ruby/object:Word
    word: refurbishment
    stem: refurbish
    docFrequency: 3.0
    docPositions:
    - 1382
    - 2470
  margin: !ruby/object:Word
    word: margin
    stem: margin
    docFrequency: 5.0
    docPositions:
    - 1382
    - 1402
    - 2470
    - 2484
  panel: !ruby/object:Word
    word: panel
    stem: panel
    docFrequency: 7.0
    docPositions:
    - 1382
    - 1384
    - 1388
    - 2470
    - 2474
  supply: !ruby/object:Word
    word: supply
    stem: suppli
    docFrequency: 3.0
    docPositions:
    - 1384
    - 2470
  allows: !ruby/object:Word
    word: allows
    stem: allow
    docFrequency: 5.0
    docPositions:
    - 1384
    - 1424
    - 2470
    - 2498
  voltages: !ruby/object:Word
    word: voltages
    stem: voltag
    docFrequency: 3.0
    docPositions:
    - 1385
    - 2471
  gradually: !ruby/object:Word
    word: gradually
    stem: gradual
    docFrequency: 3.0
    docPositions:
    - 1385
    - 2471
  fails: !ruby/object:Word
    word: fails
    stem: fail
    docFrequency: 3.0
    docPositions:
    - 1386
    - 2472
  identify: !ruby/object:Word
    word: identify
    stem: identifi
    docFrequency: 3.0
    docPositions:
    - 1386
    - 2472
  rectify: !ruby/object:Word
    word: rectify
    stem: rectifi
    docFrequency: 3.0
    docPositions:
    - 1387
    - 2473
  cause: !ruby/object:Word
    word: cause
    stem: caus
    docFrequency: 3.0
    docPositions:
    - 1387
    - 2473
  greatly: !ruby/object:Word
    word: greatly
    stem: greatli
    docFrequency: 3.0
    docPositions:
    - 1388
    - 2474
  embarking: !ruby/object:Word
    word: embarking
    stem: embark
    docFrequency: 3.0
    docPositions:
    - 1390
    - 2476
  keen: !ruby/object:Word
    word: keen
    stem: keen
    docFrequency: 3.0
    docPositions:
    - 1393
    - 2477
  functional: !ruby/object:Word
    word: functional
    stem: function
    docFrequency: 3.0
    docPositions:
    - 1394
    - 2478
  actively: !ruby/object:Word
    word: actively
    stem: activ
    docFrequency: 3.0
    docPositions:
    - 1394
    - 2478
  encouraging: !ruby/object:Word
    word: encouraging
    stem: encourag
    docFrequency: 3.0
    docPositions:
    - 1394
    - 2478
  younger: !ruby/object:Word
    word: younger
    stem: younger
    docFrequency: 5.0
    docPositions:
    - 1394
    - 1513
    - 2478
    - 2542
  familiarise: !ruby/object:Word
    word: familiarise
    stem: familiaris
    docFrequency: 3.0
    docPositions:
    - 1395
    - 2479
  themselves: !ruby/object:Word
    word: themselves
    stem: themselv
    docFrequency: 3.0
    docPositions:
    - 1396
    - 2480
  myself: !ruby/object:Word
    word: myself
    stem: myself
    docFrequency: 3.0
    docPositions:
    - 1397
    - 2481
  ll: !ruby/object:Word
    word: ll
    stem: ll
    docFrequency: 3.0
    docPositions:
    - 1397
    - 2481
  arrange: !ruby/object:Word
    word: arrange
    stem: arrang
    docFrequency: 3.0
    docPositions:
    - 1398
    - 2482
  similar: !ruby/object:Word
    word: similar
    stem: similar
    docFrequency: 5.0
    docPositions:
    - 1399
    - 1442
    - 2483
    - 2509
  related: !ruby/object:Word
    word: related
    stem: relat
    docFrequency: 3.0
    docPositions:
    - 1402
    - 2484
  track: !ruby/object:Word
    word: track
    stem: track
    docFrequency: 3.0
    docPositions:
    - 1403
    - 2485
  fault: !ruby/object:Word
    word: fault
    stem: fault
    docFrequency: 5.0
    docPositions:
    - 1404
    - 1408
    - 2486
    - 2488
  completely: !ruby/object:Word
    word: completely
    stem: complet
    docFrequency: 3.0
    docPositions:
    - 1407
    - 2487
  refurbished: !ruby/object:Word
    word: refurbished
    stem: refurbish
    docFrequency: 3.0
    docPositions:
    - 1407
    - 2487
  package: !ruby/object:Word
    word: package
    stem: packag
    docFrequency: 3.0
    docPositions:
    - 1407
    - 2487
  tester: !ruby/object:Word
    word: tester
    stem: tester
    docFrequency: 3.0
    docPositions:
    - 1407
    - 2487
  aid: !ruby/object:Word
    word: aid
    stem: aid
    docFrequency: 3.0
    docPositions:
    - 1408
    - 2488
  repairing: !ruby/object:Word
    word: repairing
    stem: repair
    docFrequency: 3.0
    docPositions:
    - 1408
    - 2488
  packages: !ruby/object:Word
    word: packages
    stem: packag
    docFrequency: 3.0
    docPositions:
    - 1408
    - 2488
  cataloguing: !ruby/object:Word
    word: cataloguing
    stem: catalogu
    docFrequency: 5.0
    docPositions:
    - 1412
    - 1413
    - 2490
    - 2491
  spares: !ruby/object:Word
    word: spares
    stem: spare
    docFrequency: 3.0
    docPositions:
    - 1412
    - 2490
  copying: !ruby/object:Word
    word: copying
    stem: copi
    docFrequency: 3.0
    docPositions:
    - 1413
    - 2491
  duplicate: !ruby/object:Word
    word: duplicate
    stem: duplic
    docFrequency: 3.0
    docPositions:
    - 1414
    - 2492
  tapes: !ruby/object:Word
    word: tapes
    stem: tape
    docFrequency: 3.0
    docPositions:
    - 1414
    - 2492
  emulator: !ruby/object:Word
    word: emulator
    stem: emul
    docFrequency: 3.0
    docPositions:
    - 1416
    - 2492
  runs: !ruby/object:Word
    word: runs
    stem: run
    docFrequency: 3.0
    docPositions:
    - 1416
    - 2492
  presents: !ruby/object:Word
    word: presents
    stem: present
    docFrequency: 3.0
    docPositions:
    - 1418
    - 2494
  realistic: !ruby/object:Word
    word: realistic
    stem: realist
    docFrequency: 3.0
    docPositions:
    - 1419
    - 2495
  colour: !ruby/object:Word
    word: colour
    stem: colour
    docFrequency: 3.0
    docPositions:
    - 1419
    - 2495
  handswitches: !ruby/object:Word
    word: handswitches
    stem: handswitch
    docFrequency: 3.0
    docPositions:
    - 1420
    - 2496
  keyboard: !ruby/object:Word
    word: keyboard
    stem: keyboard
    docFrequency: 3.0
    docPositions:
    - 1421
    - 2497
  fine: !ruby/object:Word
    word: fine
    stem: fine
    docFrequency: 3.0
    docPositions:
    - 1421
    - 2497
  editing: !ruby/object:Word
    word: editing
    stem: edit
    docFrequency: 3.0
    docPositions:
    - 1423
    - 2497
  create: !ruby/object:Word
    word: create
    stem: creat
    docFrequency: 5.0
    docPositions:
    - 1424
    - 1454
    - 2498
    - 2517
  conversions: !ruby/object:Word
    word: conversions
    stem: convers
    docFrequency: 3.0
    docPositions:
    - 1425
    - 2499
  automatically: !ruby/object:Word
    word: automatically
    stem: automat
    docFrequency: 3.0
    docPositions:
    - 1426
    - 2500
  bus: !ruby/object:Word
    word: bus
    stem: bu
    docFrequency: 6.0
    docPositions:
    - 1428
    - 1444
    - 1479
    - 2511
    - 2530
  robin: !ruby/object:Word
    word: robin
    stem: robin
    docFrequency: 5.0
    docPositions:
    - 1429
    - 1479
    - 2500
    - 2530
  shirley: !ruby/object:Word
    word: shirley
    stem: shirlei
    docFrequency: 3.0
    docPositions:
    - 1429
    - 2500
  increasing: !ruby/object:Word
    word: increasing
    stem: increas
    docFrequency: 3.0
    docPositions:
    - 1432
    - 2501
  contacting: !ruby/object:Word
    word: contacting
    stem: contact
    docFrequency: 3.0
    docPositions:
    - 1432
    - 2501
  item: !ruby/object:Word
    word: item
    stem: item
    docFrequency: 3.0
    docPositions:
    - 1433
    - 2502
  shopper: !ruby/object:Word
    word: shopper
    stem: shopper
    docFrequency: 3.0
    docPositions:
    - 1433
    - 2502
  magazine: !ruby/object:Word
    word: magazine
    stem: magazin
    docFrequency: 3.0
    docPositions:
    - 1434
    - 2503
  productive: !ruby/object:Word
    word: productive
    stem: product
    docFrequency: 3.0
    docPositions:
    - 1434
    - 2503
  apart: !ruby/object:Word
    word: apart
    stem: apart
    docFrequency: 3.0
    docPositions:
    - 1435
    - 2504
  dynabyte: !ruby/object:Word
    word: dynabyte
    stem: dynabyt
    docFrequency: 3.0
    docPositions:
    - 1440
    - 2507
  acquiring: !ruby/object:Word
    word: acquiring
    stem: acquir
    docFrequency: 3.0
    docPositions:
    - 1443
    - 2510
  altair: !ruby/object:Word
    word: altair
    stem: altair
    docFrequency: 3.0
    docPositions:
    - 1443
    - 2510
  contacted: !ruby/object:Word
    word: contacted
    stem: contact
    docFrequency: 3.0
    docPositions:
    - 1447
    - 2512
  interests: !ruby/object:Word
    word: interests
    stem: interest
    docFrequency: 7.0
    docPositions:
    - 1448
    - 1456
    - 1460
    - 2513
    - 2519
    - 2523
  carlisle: !ruby/object:Word
    word: carlisle
    stem: carlisl
    docFrequency: 3.0
    docPositions:
    - 1448
    - 2513
  triumph: !ruby/object:Word
    word: triumph
    stem: triumph
    docFrequency: 5.0
    docPositions:
    - 1449
    - 2514
  adler: !ruby/object:Word
    word: adler
    stem: adler
    docFrequency: 5.0
    docPositions:
    - 1449
    - 1450
    - 2514
    - 2515
  hewlett: !ruby/object:Word
    word: hewlett
    stem: hewlett
    docFrequency: 3.0
    docPositions:
    - 1451
    - 2516
  packard: !ruby/object:Word
    word: packard
    stem: packard
    docFrequency: 3.0
    docPositions:
    - 1451
    - 2516
  desktops: !ruby/object:Word
    word: desktops
    stem: desktop
    docFrequency: 3.0
    docPositions:
    - 1451
    - 2516
  lynx: !ruby/object:Word
    word: lynx
    stem: lynx
    docFrequency: 3.0
    docPositions:
    - 1451
    - 2516
  leads: !ruby/object:Word
    word: leads
    stem: lead
    docFrequency: 3.0
    docPositions:
    - 1454
    - 2517
  cater: !ruby/object:Word
    word: cater
    stem: cater
    docFrequency: 3.0
    docPositions:
    - 1455
    - 2518
  linked: !ruby/object:Word
    word: linked
    stem: link
    docFrequency: 3.0
    docPositions:
    - 1456
    - 2519
  tree: !ruby/object:Word
    word: tree
    stem: tree
    docFrequency: 3.0
    docPositions:
    - 1456
    - 2519
  does: !ruby/object:Word
    word: does
    stem: doe
    docFrequency: 3.0
    docPositions:
    - 1457
    - 2520
  obvious: !ruby/object:Word
    word: obvious
    stem: obviou
    docFrequency: 3.0
    docPositions:
    - 1457
    - 2520
  contemplating: !ruby/object:Word
    word: contemplating
    stem: contempl
    docFrequency: 3.0
    docPositions:
    - 1459
    - 2522
  sheet: !ruby/object:Word
    word: sheet
    stem: sheet
    docFrequency: 3.0
    docPositions:
    - 1459
    - 2522
  informed: !ruby/object:Word
    word: informed
    stem: inform
    docFrequency: 3.0
    docPositions:
    - 1460
    - 2523
  felt: !ruby/object:Word
    word: felt
    stem: felt
    docFrequency: 3.0
    docPositions:
    - 1461
    - 2524
  worthwhile: !ruby/object:Word
    word: worthwhile
    stem: worthwhil
    docFrequency: 3.0
    docPositions:
    - 1461
    - 2524
  steam: !ruby/object:Word
    word: steam
    stem: steam
    docFrequency: 9.0
    docPositions:
    - 1464
    - 1466
    - 2524
  dayoctober: !ruby/object:Word
    word: dayoctober
    stem: dayoctob
    docFrequency: 3.0
    docPositions:
    - 1464
    - 2524
  evening: !ruby/object:Word
    word: evening
    stem: even
    docFrequency: 9.0
    docPositions:
    - 1464
    - 1471
    - 1473
    - 2524
    - 2527
    - 2529
  finish: !ruby/object:Word
    word: finish
    stem: finish
    docFrequency: 3.0
    docPositions:
    - 1466
    - 2524
  p: !ruby/object:Word
    word: p
    stem: p
    docFrequency: 3.0
    docPositions:
    - 1466
    - 2524
  requested: !ruby/object:Word
    word: requested
    stem: request
    docFrequency: 3.0
    docPositions:
    - 1467
    - 2525
  let: !ruby/object:Word
    word: let
    stem: let
    docFrequency: 3.0
    docPositions:
    - 1467
    - 2525
  bringing: !ruby/object:Word
    word: bringing
    stem: bring
    docFrequency: 3.0
    docPositions:
    - 1468
    - 2526
  notified: !ruby/object:Word
    word: notified
    stem: notifi
    docFrequency: 3.0
    docPositions:
    - 1471
    - 2527
  contents: !ruby/object:Word
    word: contents
    stem: content
    docFrequency: 3.0
    docPositions:
    - 1471
    - 2527
  finalised: !ruby/object:Word
    word: finalised
    stem: finalis
    docFrequency: 3.0
    docPositions:
    - 1472
    - 2528
  lecture: !ruby/object:Word
    word: lecture
    stem: lectur
    docFrequency: 3.0
    docPositions:
    - 1474
    - 2530
  theatre: !ruby/object:Word
    word: theatre
    stem: theatr
    docFrequency: 3.0
    docPositions:
    - 1474
    - 2530
  fbcs: !ruby/object:Word
    word: fbcs
    stem: fbc
    docFrequency: 5.0
    docPositions:
    - 1479
    - 2530
  treasurer: !ruby/object:Word
    word: treasurer
    stem: treasur
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  dan: !ruby/object:Word
    word: dan
    stem: dan
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  hayton: !ruby/object:Word
    word: hayton
    stem: hayton
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  representative: !ruby/object:Word
    word: representative
    stem: repres
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  swadechairman: !ruby/object:Word
    word: swadechairman
    stem: swadechairman
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  mbcschairman: !ruby/object:Word
    word: mbcschairman
    stem: mbcschairman
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  sinclairchairman: !ruby/object:Word
    word: sinclairchairman
    stem: sinclairchairman
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  dr: !ruby/object:Word
    word: dr
    stem: dr
    docFrequency: 4.0
    docPositions:
    - 1479
    - 1483
    - 2530
  johnstonechairman: !ruby/object:Word
    word: johnstonechairman
    stem: johnstonechairman
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  shirleyeditor: !ruby/object:Word
    word: shirleyeditor
    stem: shirleyeditor
    docFrequency: 3.0
    docPositions:
    - 1479
    - 2530
  kellygeorge: !ruby/object:Word
    word: kellygeorge
    stem: kellygeorg
    docFrequency: 3.0
    docPositions:
    - 1483
    - 2530
  davisprofessor: !ruby/object:Word
    word: davisprofessor
    stem: davisprofessor
    docFrequency: 3.0
    docPositions:
    - 1483
    - 2530
  cbe: !ruby/object:Word
    word: cbe
    stem: cbe
    docFrequency: 3.0
    docPositions:
    - 1483
    - 2530
  fbcschristopher: !ruby/object:Word
    word: fbcschristopher
    stem: fbcschristoph
    docFrequency: 3.0
    docPositions:
    - 1483
    - 2530
  hipwelldr: !ruby/object:Word
    word: hipwelldr
    stem: hipwelldr
    docFrequency: 3.0
    docPositions:
    - 1483
    - 2530
  fbcsewart: !ruby/object:Word
    word: fbcsewart
    stem: fbcsewart
    docFrequency: 3.0
    docPositions:
    - 1483
    - 2530
  fbcspat: !ruby/object:Word
    word: fbcspat
    stem: fbcspat
    docFrequency: 3.0
    docPositions:
    - 1483
    - 2530
  toppreviousaims: !ruby/object:Word
    word: toppreviousaims
    stem: toppreviousaim
    docFrequency: 2.0
    docPositions:
    - 1485
  ccs: !ruby/object:Word
    word: ccs
    stem: cc
    docFrequency: 9.0
    docPositions:
    - 1486
    - 1490
    - 1495
    - 1505
    - 2530
    - 2532
    - 2535
    - 2536
  co: !ruby/object:Word
    word: co
    stem: co
    docFrequency: 3.0
    docPositions:
    - 1486
    - 2530
  operative: !ruby/object:Word
    word: operative
    stem: oper
    docFrequency: 3.0
    docPositions:
    - 1486
    - 2530
  constituted: !ruby/object:Word
    word: constituted
    stem: constitut
    docFrequency: 3.0
    docPositions:
    - 1490
    - 2532
  covered: !ruby/object:Word
    word: covered
    stem: cover
    docFrequency: 3.0
    docPositions:
    - 1492
    - 2534
  royal: !ruby/object:Word
    word: royal
    stem: royal
    docFrequency: 3.0
    docPositions:
    - 1492
    - 2534
  charter: !ruby/object:Word
    word: charter
    stem: charter
    docFrequency: 3.0
    docPositions:
    - 1492
    - 2534
  charitable: !ruby/object:Word
    word: charitable
    stem: charit
    docFrequency: 3.0
    docPositions:
    - 1492
    - 2534
  status: !ruby/object:Word
    word: status
    stem: statu
    docFrequency: 3.0
    docPositions:
    - 1492
    - 2534
  promote: !ruby/object:Word
    word: promote
    stem: promot
    docFrequency: 2.0
    docPositions:
    - 1496
  awareness: !ruby/object:Word
    word: awareness
    stem: awar
    docFrequency: 2.0
    docPositions:
    - 1498
  encourage: !ruby/object:Word
    word: encourage
    stem: encourag
    docFrequency: 2.0
    docPositions:
    - 1501
  funded: !ruby/object:Word
    word: funded
    stem: fund
    docFrequency: 3.0
    docPositions:
    - 1505
    - 2536
  supported: !ruby/object:Word
    word: supported
    stem: support
    docFrequency: 3.0
    docPositions:
    - 1505
    - 2536
  grant: !ruby/object:Word
    word: grant
    stem: grant
    docFrequency: 3.0
    docPositions:
    - 1505
    - 2536
  fees: !ruby/object:Word
    word: fees
    stem: fee
    docFrequency: 3.0
    docPositions:
    - 1505
    - 2536
  corporate: !ruby/object:Word
    word: corporate
    stem: corpor
    docFrequency: 3.0
    docPositions:
    - 1506
    - 2537
  donations: !ruby/object:Word
    word: donations
    stem: donat
    docFrequency: 3.0
    docPositions:
    - 1506
    - 2537
  free: !ruby/object:Word
    word: free
    stem: free
    docFrequency: 6.0
    docPositions:
    - 1506
    - 1507
    - 1516
    - 2537
    - 2538
  facilities: !ruby/object:Word
    word: facilities
    stem: facil
    docFrequency: 3.0
    docPositions:
    - 1507
    - 2538
  charges: !ruby/object:Word
    word: charges
    stem: charg
    docFrequency: 3.0
    docPositions:
    - 1507
    - 2538
  publications: !ruby/object:Word
    word: publications
    stem: public
    docFrequency: 3.0
    docPositions:
    - 1508
    - 2539
  attendance: !ruby/object:Word
    word: attendance
    stem: attend
    docFrequency: 3.0
    docPositions:
    - 1508
    - 2539
  conferences: !ruby/object:Word
    word: conferences
    stem: confer
    docFrequency: 3.0
    docPositions:
    - 1509
    - 2540
  active: !ruby/object:Word
    word: active
    stem: activ
    docFrequency: 3.0
    docPositions:
    - 1511
    - 2540
  restorations: !ruby/object:Word
    word: restorations
    stem: restor
    docFrequency: 3.0
    docPositions:
    - 1512
    - 2541
  technologies: !ruby/object:Word
    word: technologies
    stem: technolog
    docFrequency: 3.0
    docPositions:
    - 1512
    - 2541
  encouraged: !ruby/object:Word
    word: encouraged
    stem: encourag
    docFrequency: 3.0
    docPositions:
    - 1513
    - 2542
  skills: !ruby/object:Word
    word: skills
    stem: skill
    docFrequency: 3.0
    docPositions:
    - 1514
    - 2543
  transfer: !ruby/object:Word
    word: transfer
    stem: transfer
    docFrequency: 3.0
    docPositions:
    - 1514
    - 2543
  distributed: !ruby/object:Word
    word: distributed
    stem: distribut
    docFrequency: 2.0
    docPositions:
    - 1516
  subscription: !ruby/object:Word
    word: subscription
    stem: subscript
    docFrequency: 2.0
    docPositions:
    - 1518
  covering: !ruby/object:Word
    word: covering
    stem: cover
    docFrequency: 2.0
    docPositions:
    - 1518
  typesetting: !ruby/object:Word
    word: typesetting
    stem: typeset
    docFrequency: 2.0
    docPositions:
    - 1519
  copyright: !ruby/object:Word
    word: copyright
    stem: copyright
    docFrequency: 2.0
    docPositions:
    - 1520
  societycomputerresurrection: !ruby/object:Word
    word: societycomputerresurrection
    stem: societycomputerresurrect
    docFrequency: 2.0
    docPositions:
    - 1520
  societyissn: !ruby/object:Word
    word: societyissn
    stem: societyissn
    docFrequency: 2.0
    docPositions:
    - 1520
  editorit: !ruby/object:Word
    word: editorit
    stem: editorit
    docFrequency: 2.0
    docPositions:
    - 1520
  industrythe: !ruby/object:Word
    word: industrythe
    stem: industryth
    docFrequency: 2.0
    docPositions:
    - 1548
  yearstony: !ruby/object:Word
    word: yearstony
    stem: yearstoni
    docFrequency: 2.0
    docPositions:
    - 1588
  secretarywe: !ruby/object:Word
    word: secretarywe
    stem: secretaryw
    docFrequency: 2.0
    docPositions:
    - 1588
  woodroffethe: !ruby/object:Word
    word: woodroffethe
    stem: woodroffeth
    docFrequency: 3.0
    docPositions:
    - 1621
    - 2530
  newmani: !ruby/object:Word
    word: newmani
    stem: newmani
    docFrequency: 2.0
    docPositions:
    - 1783
  ikilburn: !ruby/object:Word
    word: ikilburn
    stem: ikilburn
    docFrequency: 2.0
    docPositions:
    - 2157
  mercurykilburn: !ruby/object:Word
    word: mercurykilburn
    stem: mercurykilburn
    docFrequency: 2.0
    docPositions:
    - 2213
  computerprofessor: !ruby/object:Word
    word: computerprofessor
    stem: computerprofessor
    docFrequency: 2.0
    docPositions:
    - 2248
  atlasthe: !ruby/object:Word
    word: atlasthe
    stem: atlasth
    docFrequency: 2.0
    docPositions:
    - 2278
  chairmanin: !ruby/object:Word
    word: chairmanin
    stem: chairmanin
    docFrequency: 3.0
    docPositions:
    - 2356
    - 2464
  chairmanthe: !ruby/object:Word
    word: chairmanthe
    stem: chairmanth
    docFrequency: 3.0
    docPositions:
    - 2390
    - 2433
  chairmaninterest: !ruby/object:Word
    word: chairmaninterest
    stem: chairmaninterest
    docFrequency: 2.0
    docPositions:
    - 2500
  dayin: !ruby/object:Word
    word: dayin
    stem: dayin
    docFrequency: 2.0
    docPositions:
    - 2524
  membersdr: !ruby/object:Word
    word: membersdr
    stem: membersdr
    docFrequency: 2.0
    docPositions:
    - 2530
  tomembership: !ruby/object:Word
    word: tomembership
    stem: tomembership
    docFrequency: 2.0
    docPositions:
    - 2535
lineCount: 2544
wordCount: 23828
rank: 0.2540983606557377
title: Computer Resurrection Issue 4
links: []
rawText: "\r\n\r\n\r\n\r\nResurrection Home  \r\n  Previous issue  \r\n  Next issue
  \r\n  View Original\r\n                Cover \r\n  writeLink('res04.pdf')\r\n  Computer\r\nRESURRECTION
  \r\nThe Bulletin of the Computer Conservation Society\r\nISSN 0958 - 7403 \r\nVolume
  1 Number 4\r\n \r\nSummer 1992Contents\r\n\r\n Editorial   Nicholas Enticknap, Editor
  \   Guest Opinion   Director, The National Museumof Science and Industry    Society
  News   Tony Sale, Secretary  The early days of Algol    Nicholas Enticknap and Pat
  Woodroffe   The influence of Alan Blumlein on early computers   Ted Newman    The
  pre-history of the Digital Equipment Corporation   Adrian Johnstone    Early computers
  at Manchester University      Miscellany     Working Party Reports      Forthcoming
  Events      Committee of the Society      Aims and Objectives     \r\n\r\nTopPrevious
  \ Next Editorial \r\nNicholas Enticknap, Editor\r\nIt has been a long time since
  the last issue, and much has \r\nhappened. The most significant develop ment has
  been Tony \r\nSale's initiative in setting in motion plans for a Museum of \r\nCryptology
  and Computing in Bletchley Park, on the very site \r\nwhere the Colossus code-breaking
  computers played such a vital \r\nrole in World War Two. Tony summarises the current
  situation \r\nin his Society News piece.\r\n\r\nWe hope this enterprise will eventually
  result in both a \r\npermanent  home for the Society and its machines and other
  \r\nartefacts as well as a  focal point for our various \r\nactivities. These have
  expanded with the  arrival of our \r\nArchivist, Harold Gearing, who has started
  work on the  \r\nmassive undertaking of documenting and classifying our growing
  \ \r\ncollection of historical documents.\r\n\r\nMeanwhile the Society's existing
  activities have continued \r\nunabated.  As far as work on our two oldest computers
  is \r\nconcerned, the emphasis  has changed -- both Pegasus and \r\nElliott have
  been working for over a  year now, and the new \r\nobjective is to get them back
  to the state of  reliability \r\nthey enjoyed when new.\r\n\r\nThe two working parties
  concerned with more modern computers \r\nhave both  been expanding their portfolios
  of equipment, while \r\nthe Software group  has taken on a new lease of life with
  a \r\nredefinition of its role.  Further details of all this \r\nactivity can be
  found in the Working Party  reports.\r\n\r\nThe meetings programme has continued
  toughout the past year \r\nalong  the lines successfully established in our first
  year. \r\nThis issue  carries reports on a wide variety of historical \r\nsubjects,
  ranging from  the evolution of Algol to the \r\ninfluence on early circuitry of
  Alan  Blumlein via the \r\ndevelopment of the DEC PDP-8. We also carry a report
  based on \r\nthe all-day seminar on the pioneering computers from  \r\nManchester
  University.\r\n\r\nTop Previous  Next  Guest Opinion \r\nDirector, The National
  Museum of Science and Industry\r\nThe activities of the Computer Conservation Society
  have \r\nagitated a host of issues that are both exciting and \r\ndisturbing. Several
  established traditions have been \r\nchallenged. There is an unspoken assumption
  in the museum \r\nworld that interpretation of the past is necessarily based on
  \r\npartial, if not fragmentary, evidence. However, the Society's \r\nprogramme,
  far from being damned to shards and chipped \r\nfragments from an inaccessibly distant
  past, provides an \r\nembarrassment of riches -- machines, documentation, orally
  \r\ntransmitted expertise and experiences, recorded seminars and \r\ncolloquia by
  the living practitioners and witnesses to the \r\ngreat pioneering age of computing.
  Unlike the archaeologist we \r\nhave the opportunity to select from an almost unlimited
  wealth \r\nof evidence. \r\n\r\nThere is another respect in which the activities
  of the \r\nSociety up-end otherwise comfortable perceptions. The \r\nestablished
  ethos of preservation is essentially passive -- \r\nphysical relics placed in an
  inert environment to retard \r\ndegradation. However, the efforts to restore historic
  machines \r\nto working order by those who originally designed and \r\nmaintained
  them are highly interventionist and this raises \r\ndilemmas about historical integrity
  and authenticity.\r\n\r\nThese are not the only stirrings in the museological soup.
  It \r\nis painful to accept the ultimately inevitable demise of \r\nmachines lovingly
  and ingeniously restored to working order. \r\nThe Society's programme to emulate
  past performance on present \r\nday machines using the restored original as a benchmark
  of \r\nauthenticity, is a bold and visionary move, but it has \r\ndisturbing implications.
  The museum culture is founded on the \r\nnotion that the original object is an ultimate
  historical \r\nsource. However, with emulation, we are faced with the \r\nprospect
  of the operational spirit of a machine being \r\npreserved, as it were, independently
  of its body. The \r\n`ultimate source' is now a computer program not an object.
  Can \r\nmuseums extend to embrace the abstract as object?\r\n\r\nThese are a few
  of the many rewarding speculations stimulated \r\nby the activities of the Society
  which has broken new ground \r\nin conservation and museological terms. Its accomplishments
  \r\nare to be saluted and we are indebted to its many members for \r\nthe generosity
  of their efforts and time, The Science Museum \r\ncherishes its relationship with
  this vigorous and \r\nunconventional organisation and looks forward to building
  on \r\nits successes and progressing its pioneering programme in the \r\ncoming
  years\r\n\r\nTop Previous  Next  Society News \r\nTony Sale, Secretary\r\nWe spent
  a lot of time last year working on the long term \r\nfuture of the  Society. We
  have been concerned that our future \r\nis anything but secure.  Our premises at
  the Science Museum \r\nare already too small for our growing  collection of \r\ncomputers,
  and in any event the building is under threat  of \r\nre-development.\r\n\r\nLast
  summer a unique opportunity arose to secure a permanent \r\nhome for the Society.
  This is in the most appropriate site of \r\nBletchley Park,  where the Colossus
  code-breaking computers \r\nwere developed and used  during World War II.\r\n\r\nBletchley
  Park is currently still largely owned by the \r\nGovernment,  represented by Property
  Holdings, with the \r\nremaining small part  belonging to British Telecom. The two
  \r\norganisations were planning to  sell the Park for re-\r\ndevelopment, including
  the huts used by the  code-breakers and \r\na number of other buildings used to
  house teleprinters and  \r\nother equipment.\r\n\r\nThe Society joined forces with
  the Bletchley Archaeological \r\nSociety to  lobby the appropriate local authority,
  the Milton \r\nKeynes Development  Corporation, for support in preserving the \r\nhistoric
  huts. On our own  initiative we further proposed that \r\nthe part of the Park which
  includes  the huts should be used \r\nto house a Museum of Cryptology and Computing.
  \ The proposed \r\nMuseum site covers four acres, and contains 9,000 square  feet
  \r\nof space in the huts and a further 60,000 square feet in the \r\nother  buildings,
  which are currently leased by the Civil \r\nAviation Authority.\r\n\r\nI am glad
  to say that our efforts have been successful. The \r\nMilton  Keynes Development
  Corporation has set up a Bletchley \r\nPark Trust with a  seedcorn start-up fund
  of £20,000. The \r\nTrust is currently raising  further funds from industry.\r\n\r\nThe
  Trust has a steering committee, and has produced an \r\noutline business  plan.
  This involves turning the whole of \r\nBletchley Park into a 1940s  theme park,
  of which the museum \r\ncampus will form a part. Income from the  theme park will
  \r\nprovide the funding for the Museum.\r\n\r\nThere is a long way to go yet. The
  Trust needs to raise £10 \r\nmillion to  purchase the Park. Nonetheless, I am very
  hopeful \r\nthat the project will  succeed, and remove the uncertainty \r\nhanging
  over the Society's future.\r\n\r\nTop  Previous  Next  The early days of Algol \r\nNicholas
  Enticknap and Pat Woodroffe\r\nThe first public implementation of Algol was created
  in \r\nJanuary 1960. The thirtieth anniversary of the language, \r\ntherefore, took
  place in 1990. To commemorate the occasion, \r\nthe Society held an afternoon meeting
  \ at the Science Museum.\r\n\r\nThe meeting concentrated on the early days -- how
  Algol came \r\ninto being,  and how the early compilers were developed. It \r\nwas
  chaired by Mike  Woodger, a member of committees \r\nresponsible for defining the
  language as  far back as 1958. \r\nWoodger gave a scene-setting talk describing
  the  creation of \r\nthe language.\r\n\r\nBroadly speaking, Algol emerged from the
  activities of two \r\nindependent groups: the GAMM subcommittee in Europe, and the
  \r\nACM in America. The major steps in the process are listed in \r\nthe following
  table:\r\n\r\nDate        Event\t1955 Oct    GAMM subcommittee for Programming \r\nLanguages
  formed\t1957 Oct    ACM committee appointed to specify a universal programming language\t1957
  Oct    GAMM Subcommittee's language design finished: letter sent to ACM suggesting
  a joint conference\t1958 Apr    GAMM proposal presented to ACM group\t1958 May    Joint
  ACM/GAMM proposals made (the language \r\nwas later called IAL or Algol 58)\t1958
  Oct    The name \"Algol\" is proposed for the new language\t1958 Nov    First Algol
  58 compilers reported working\t1960 Jan    Algol 60 created in Paris\t1960        Dijkstra
  and Zonnefeld produce first Algol \r\n60 translator.\tWoodger also ran over the
  genesis of the various ideas and \r\nconcepts that found expression in the early
  implementations of \r\nAlgol, starting as far  back as 1948.\r\n\r\nWoodger was
  followed to the rostrum by David Hill of the \r\nMedical  Research Council, who
  took the story forward into the \r\nseventies with an  account of subsequent standardising
  work by \r\nIFIP and ISO.\r\n\r\nISO and IFIP both entered the picture in 1962,
  when IFIP \r\nWorking Group  2.1 took over running Algol as ISO was turning \r\nits
  attention to the standardisation of programming languages. \r\nSo the Working Group
  submitted  its 1962 Algol report to ISO.\r\n\r\nISO, said Hill, decided the report
  wasn't suitable as it \r\nstood. It  wanted a subset, some I/O to go with it, and
  a \r\nstandardised hardware  representation of the language.\r\n\r\nIn response
  the Working Group produced by 1965 three subsets \r\nof the  language plus two proposals
  for I/O. These were put \r\ntogether in a Draft Recommendation: ISO decided not
  to call \r\nthem standards because there  were still arguments about \r\nwhether
  there should be one standard language  rather than \r\nstandards for various languages.\r\n\r\nThe
  draft appeared in April 1967, but it was March 1972 before \r\nscrutiny  of the
  draft was completed and `ISO recommendation \r\nNo 1538: Programming language --
  Algol' appeared.\r\n\r\nThis, said Hill, \"was an absolute disaster, full of errors
  and \r\nchanges which had been made without consultation\". Hill \r\nhimself was
  instrumental  in rectifying the \"disaster\", along \r\nwith Richard de Morgan and
  Brian  Wichman. Together these \r\nthree formed a new IFIP sub-committee to  consider
  further \r\nrevisions to Algol 60.\r\n\r\nThis sub-committee had a number of sources
  to draw on. At a \r\n1972 ISO committee meeting it was agreed that a new edition
  of \r\nISO Recommendation 1538 should be produced. The delegates at \r\nthis meeting
  drew up a list of errors in the earlier ISO \r\ndocument, and also drew up a list
  of questions that ought to \r\ngo to the new IFIP sub-committee. There were also
  \ proposals \r\nfrom German and Japanese sources, and a number of published  \r\npapers
  by Algol specialists.\r\n\r\nThe IFIP sub-committee was finally left with a number
  of \r\ndifficulties of  interpretation, plus some unsettled \r\nquestions. On these
  points the  committee had to make its own \r\ndecisions.\r\n\r\nOnce all the difficulties
  had been resolved, the maintenance  \r\ncommittee's report was agreed by IFIP Working
  Group 2.1 and \r\nsubsequently  became known as `The Modified Report'.\r\n\r\nAt
  this point the emphasis of the Society's meeting shifted \r\nfrom the  specification
  to the implementation. The next three \r\nspeakers described  the development of
  compilers for three \r\nsixties computers, the English  Electric KDF9, the Elliott
  803 \r\nand the DECsystem-10.\r\n\r\nLawford Russell joined English Electric in
  1960, and after \r\ninitial work  on the Deuce teamed up with Brian Randall to \r\nproduce
  an assembler for  the KDF9, then under development. \r\nBefore the project made
  much progress,  however, the two men \r\nwent to an Algol conference and became
  \"very  excited by it \r\nall\".\r\n\r\nDeciding on the spot that they must implement
  Algol on the \r\nKDF9, they approached Algol guru Edsger Dijkstra for advice. \r\nThe
  upshot was that  they spent an intensive two weeks study \r\nwith Dijkstra in Holland,
  which  \"led us to an outline of the \r\nbasic structure of the intermediate  language,
  which we \r\ntransposed Algol into for running\".\r\n\r\nRandall and Russell made
  two early important design decisions. \r\nThe  language would be interpretive, as
  that was what the \r\nusers in their  division of English Electric wanted. And \"we
  \r\ndecided to go for a single  pass translation as we were used \r\nto on the Deuce,
  which allowed you to  do some processing \r\nwhile your cards were being read in\".
  The KDF9 would  be \r\nfaster and would use paper tape, so \"surely we could do
  some  \r\nprocessing for the translation while the program was being \r\nread in?\".\r\n\r\nThe
  striking aspect of this project was the working conditions \r\nwhich  would be thought
  impossibly primitive today. \"We had no \r\nmachine and very  little information
  about it so we had to do \r\nlots and lots of desk  checking. We produced our logic
  flow \r\ndiagrams and just desk checked  these between us... So the \r\nlogic checking
  got far ahead of the code  testing: some of \r\nthat was good and some of it was
  bad.\"\r\n\r\nAbout this time potential KDF9 customers starting asking for \r\ncopies
  of  the compiler. But it wasn't finished, and \"our flow \r\ndiagrams were only
  \ meant for inter-project use. So we thought \r\nwe would need to define a much
  \ more rigid sort of meta-\r\nlanguage... then we had to convert all our flow  diagrams
  to \r\nthis, then we had to desk check them again\".\r\n\r\nThe logic flow diagrams
  were actually delivered to one \r\npotential  customer, de Havilland -- \"the first
  case of a copy \r\nof a compiler being  available before the original\".\r\n\r\nThe
  design of the Algol compiler for the Elliott 803 presented \r\na  different set
  of problems, described by Jeff Hillmore. Late \r\nin 1960 a  small group from Elliott
  went to an Algol \r\nConference run by  Dijkstra -- that man again. They returned
  \r\ndetermined to make Algol 60 the   advanced  programming \r\nlanguage for the
  803. A development team was formed, and  \r\nHillmore joined it in November 1961.\r\n\r\nThe
  team worked with some despatch. The first program was \r\ncompiled and  run just
  three months later, on 15 February \r\n1962. Version 1 of the  compiler, using five-hole
  paper tape \r\ninput/output, was available by  November. The time taken to \r\nreach
  that point, which included writing the  user manual, was \r\neight person-years.\r\n\r\n\"The
  803 sold to a lot of educational establishments and to \r\nscientific users, and
  in both of these areas there was a need \r\nto process a high  average number of
  programs in a given \r\nperiod, and to reduce to a minimum  the time spent in changing
  \r\nover from one program to another.\r\n\r\n\"So the design decisions that were
  made were, first of all, \r\nthe system  should be a load-and-go system. You should,
  at the \r\nstart of a session,  load the compiler, load the dynamic \r\nroutines
  and the process, compile  and run program after \r\nprogram.\r\n\r\n\"The other
  decision that was made was that the user's program \r\nshould run  at the full speed
  of the machine. So we wanted a \r\ncompiler that would  generate an object program
  in binary \r\nmachine code which would then run,  and we didn't want to \r\ninterpret
  them. This was a very different decision  to that \r\nmade by the KDF9 people.\r\n\r\n\"The
  other decision was that the source text should be read \r\nonce only.  So we ended
  up with a compiler which was designed \r\nto operate in two  phases. The compiler
  converted the Algol \r\nsource to an intermediate  binary stream which we called
  Own \r\nCode, and this was processed in the  second internal pass into \r\na binary
  object program, and that was then  executed at full \r\nspeed.\"\r\n\r\nHillmore
  identified six activities in the compiler writing \r\nprocess.  First there was
  the writing of a lexicon analyser to \r\ntokenise the Algol  symbols, taking the
  hardware \r\nrepresentation and generating these tokens,  which made the \r\ncompiler
  independent of how the program was input.\r\n\r\nNext came the dictionary system
  for recording identifiers and \r\ntheir properties. Then the team decided how the
  memory space \r\nwas going to be allocated. Fourth, they specified the own code
  \r\nformat. \"Out of those  four parts of the initial activity came \r\nthe definition
  of the Algol 60  subset which would be \r\nimplemented\".\r\n\r\nThe final two activities
  were the specification of the I/O \r\ndefinition  and the writing of a high level
  pseudo-Algol \r\ndefinition of the compiler.\r\n\r\nThe final speaker was Richard
  de Morgan, who gave a \r\npresentation  describing the design of the Algol compiler
  for \r\nthe DECsystem-10. We  have already met de Morgan as one of the \r\nIFIP
  sub-committee that  produced the Modified Report. \r\nEarlier, he had been one of
  the earliest  users of Algol -- he \r\nlearnt it as his first programming language
  while an  \r\nundergraduate at Liverpool University.\r\n\r\nde Morgan's first task
  at DEC, which he joined in 1969, was to \r\nwork on  the outline design of an Algol-60
  compiler for the \r\nDECsystem-10. The  only languages supplied for it then were
  \r\nFortran and BASIC.\r\n\r\nde Morgan was working with Professor Nicol Hardiman
  of \r\nCarnegie-Mellon University, and they were given one month to \r\ncomplete
  the  task.\r\n\r\n\"We did design a system, and the amazing thing is that we \r\ncould
  do the design down to a fair amount of detail in one \r\nmonth. It turned out that
  Nicol Hardiman's ideas about how the \r\nsystem ought to be built and my experience
  of writing \r\ncompilers were more or less compatible.\r\n\r\n\"We decided that
  we would do a one pass compiler but we would \r\nimplement everything we could in
  what we conceived to be the \r\nspirit of the Algol  60 revised report... Of the
  things we \r\ncouldn't implement, if we thought  they were useful we'd find \r\na
  way round them and if we didn't think they  were useful we \r\nwouldn't implement
  them.\"\r\n\r\nThe decision to build a one-pass compiler created problems. \r\nOne
  of the  major ones concerned formal parameters, \r\nparticularly formal parameters
  \ that are procedures. The \r\nquestion was: how do you know when you're going  to
  call a \r\nformal procedure parameter what its parameters are?\r\n\r\nde Morgan
  went on: \"Given that we had to have independent \r\ncompilation,  the unit of compilation
  was either the main \r\nprogram or a procedure. So  we had the concept of an external
  \r\nprocedure: we had to enforce type  checking at run-time of the \r\nactual to
  formal parameter correspondence.\"\r\n\r\nAnother design decision was to allow users
  to do anything they \r\nliked  with formal parameters. They could even be used as
  the \r\ncontrolled  variable in a forced statement, so that you could \r\npredict
  what was going  to happen.\r\n\r\nThen questions arose about own variables and own
  arrays, which \r\nwere only resolved after much thought.\r\n\r\n\"We put in a few
  other extras: position, remainder, operator, \r\nwhich we thought very useful. We
  put in `While' as an \r\niterative statement. We  added another type -- non-real
  -- \r\nrather than having some type of   compiler  directive which \r\ntold you
  what precision your reals ought to be.\"\r\n\r\nThe resulting compiler worked well.
  \"Efficiency of the code \r\nwas fairly  good because we put work into getting around
  the \r\noverhead of the  procedure calls by generating access \r\nsequences that
  were very efficient.  We often ran faster than \r\nFortran, and typically 1.5 to
  three times  faster than Algol \r\n60 on comparable machines.\" \r\n\r\nTop  Previous
  \ Next  The influence of Alan Blumlein on early computers \r\nTed Newman\r\nI believe
  that Blumlein was the best electronic engineer that \r\never lived.\r\n\r\nI first
  met him during the war when, as a young engineer, I \r\nsaw an  advert for someone
  to do TV tubes and applied for the \r\njob. I went  along and there was this very
  frightening man \r\nwith green eyes who  interviewed me -- Blumlein seemed to have
  \r\nthe greenest eyes of anyone I'd seen.\r\n\r\nHe started the interview by asking
  if I knew anything about  \r\nvector analysis. I said I didn't. He said, \"Here
  are some \r\ncircuits  I want you to look at\". He spent a long time making \r\nme
  look at these  circuits and asking, \"How do you think this \r\nworks?\", \"How
  do you think  that works?\". Then he said, \r\n\"Actually I would call that vector
  \ analysis. You might think \r\nthat I'm now taking you to the vacancy we've  got
  in the TV \r\ntube place. You're not going to do that. You're going to  work \r\non
  circuits\".\r\n\r\nI was 22 at the time I started. I was Blumlein's personal \r\ndogsbody,
  \ and had lots of odd things to do for him. I saw \r\nBlumlein much more  than I
  would have expected to, because I \r\nwas a lad of not much  importance. He was
  always Mr Blumlein \r\nto me -- never Alan -- because he  was the big boss.\r\n\r\nHe
  created a range of monitors -- they were very advanced  \r\nmeasuring oscilloscopes.
  You could measure the amplitude and \r\nwidth of  the pulses very accurately. You
  could do this by \r\nshifting the offset  voltage on the screen, and measuring the
  \r\nshift on the meter, and the  width could be similarly measured \r\nwith a very
  accurately defined  sawtooth scan.\r\n\r\nThe first monitor was called Mohammed,
  after the founder of \r\nthe  Moslems. The Caliphs came after Mohammed in history
  so \r\nthe later  monitors were called Caliphs -- I can remember Ali \r\nand Xerxes,
  but not  the others. The monitors were all \r\nslightly different and Blumlein  expected
  every one to be \r\ncorrectly named; if you got a name wrong you  were in dead \r\ntrouble.\r\n\r\nHe
  also had names for many of his circuits. There was the \r\nCholmondeley  Tweaker,
  a Featherstonehaugh Follower and a St \r\nJohn Something Else.  (These names were
  pronounced Chumley, \r\nFanshaw and Sin-jin.)\r\n\r\nHe believed that circuits had
  to be calculated. I had a little \r\nbook  that I'd calculate various circuits in
  and then he'd see \r\non the  monitor whether the pulse was the same as I'd \r\ncalculated.\r\n\r\nBlumlein
  was born in 1903. He was in Standard International \r\nfrom 1924  to 1929, when
  he joined Schoenberg's Columbia \r\nrecord organisation,  which was a small company
  at the time. \r\nThe following year he joined  EMI, where he worked till he was
  \r\nkilled in a plane crash in 1942.\r\n\r\nHe filed 128 patents, but he didn't
  write many papers. If \r\nyou've got a  lot of valuable ideas in a commercial firm
  you \r\ndon't want to give them  to everybody else, so you don't write \r\npapers,
  you file patents.\r\n\r\nSome time after Blumlein's death, in 1947, at an important
  \r\nmeeting of  the Association of Scientific Workers there was an \r\nalmost unanimous
  \ decision that all research ought to be done \r\nin Government and not  commercially.
  I was an idealist at the \r\ntime so I tried to get into  Government service at
  a very \r\nreduced salary.\r\n\r\nI went to the Civil Service Commission, and was
  interviewed by \r\nHA  Thomas, who asked me \"EMI -- isn't that where Blumlein \r\nwas?\".
  I said  yes, and he then sent me to NPL.\r\n\r\nThere was a background to this which
  I discovered later. At \r\nthe time  Turing had got a lot of details, in fact a
  full \r\nlogical diagram, for a  both a big computer and a small \r\nmachine. The
  big one Turing thought  was too much to tackle: \r\nthe small one was called the
  Ace Pilot Model.  A number of \r\npeople had tried and failed to get the circuits
  working at  \r\nall, including Turing to start with -- he wasn't very good at \r\ngetting
  \ circuits going. \r\n\r\nI think what happened was that HA Thomas, a much maligned
  man, \r\nthought  it would be a good idea to recruit someone who knew \r\nsomething
  about  circuits of the kind that were necessary for \r\ncomputers, and these were
  \ the sort of circuits that Blumlein \r\ncreated.\r\n\r\nOnce I was at the NPL,
  Thomas asked me to recruit other people \r\nwith  this knowledge. So Tubsy Clayden
  was recruited, and then \r\nlater John  Parks and Roger Scantlebury (Roger's dad
  had also \r\nworked at EMI for a  long time).\r\n\r\nThe circuits we produced all
  worked extremely well, and they \r\nwere  derived from Blumlein circuits, so there
  is no doubting \r\nthe influence  of Blumlein on the very reliable Pilot Model \r\nAce.\r\n\r\nAlso,
  Blumlein visited TRE in the forties and met Williams and \r\nhis  colleagues. They
  had not been doing very well with their \r\ncircuits, and  Blumlein showed them
  how to do it. Tom Kilburn \r\nagrees that this  happened. Williams afterwards became
  \r\nProfessor Williams who dealt with  the Manchester computer, \r\nand Kilburn
  joined him from TRE, and from  what I could tell \r\nthe Blumlein-type circuits
  were widely used in TRE.  So once \r\nagain the influence of Blumlein as very great.\r\n\r\nBlumlein
  was unique. He was highly inventive, and a man who \r\nthought in  a different way
  from his contemporaries. Light \r\nengineering in 1929  dealt almost entirely with
  communication \r\nby voice or code.  Transmission was by wire cable or radio. \r\nI've
  read all the standard  books on communication up to 1945 \r\nthat I can find, and
  none of them  deals in any way with high \r\nspeed pulses. Nor, except for the purely
  \ transmission side, \r\ncould they deal with the tasks posed by television.\r\n\r\nIn
  the communication industry all control and switching \r\nfunctions were  either
  done mechanically or by electrically \r\ncontrolled relays. High  speed was not
  wanted. It was only \r\nrecently, long after the advent of  computers. that \r\nelectronics
  was used. For television and particularly  for \r\nadvanced radars or computers,
  control and switching had to be \r\ndone  electrically. But Blumlein was an iconoclast
  and was \r\nvery inventive:  only such a person could break the necessary \r\nnew
  ground.\r\n\r\nThis article is an edited transcript of a talk given by Ted \r\nNewman
  to  the Society at the Science Museum on 28 February \r\n1991.\r\n\r\nTop  Previous
  \ Next  The pre-history of the Digital Equipment Corporation \r\nAdrian Johnstone\r\n\r\n
  \  The Digital Equipment Corporation (DEC) was formed in \r\n   1957 and is now
  perhaps the second or third largest \r\n   computer company in the world. Remarkably,
  the company is \r\n   still led by the original president, Ken Olsen, who was a
  \r\n   student at MIT at a key time in computing history. DEC is \r\n   widely credited
  with producing the first desktop \r\n   minicomputer, the PDP-8. The minicomputer
  style of \r\n   computer architecture is very different from the long-\r\n   word
  length machines that dominated early commercial \r\n   computing, but the ideas
  did not spring fully formed from \r\n   the minds of DEC's designers. I hope to
  show here that \r\n   one of the earliest programmable computers constructed in
  \r\n   the United States was the direct parent of the DEC PDP-5, \r\n   -8 and -11
  series of machines as well as many early \r\n   eight- and sixteen-bit microprocessors.\r\nAlthough
  the distinctions are nowadays becoming blurred, \r\ntraditionally computing has
  been divided into three \r\napplication areas: scientific computing with an emphasis
  \r\non floating point arithmetic, commercial computing which \r\nrequires access
  to large databases and real-time \r\ncomputing which requires relatively simple
  processing to \r\nbe performed at the highest speed.  A real-time system \r\nmust
  return results within the timeframe of some \r\nmonitored process -- car engine
  management systems, \r\nflight simulators and the computer inside your washing \r\nmachine
  are all examples of real-time problems. There is \r\nan old joke that defines a
  scientific programmer as one \r\nwho types in a single number, processes it for
  a week and \r\nthen prints a single number. By the same token, a \r\ncommercial
  programmer types in a number and prints out \r\nthe names of five thousand people
  that have the same \r\nnumber, and a real-time programmer doesn't type in any \r\nnumbers
  because embedded systems do not have keyboards.  \r\n\r\nIn many ways real-time
  computing is the Cinderella of the \r\nthree being mainly the province of engineers
  capable of \r\nsqueezing the last ounce of performance from computers that \r\nhave
  to be low cost, because they are to be embedded in some \r\nother product. In the
  past this meant a minicomputer and \r\nnowadays a microprocessor, but in either
  case the traditions \r\nof machine level programming that naturally dominated the
  \r\npioneering days of computing live on in the real-time domain \r\nand there is
  therefore a strong affinity between the \r\nactivities of the Society and the real-time
  computing world.\r\n\r\nSince embedded systems must be cheap, it might be thought
  that \r\nreal-time control systems are a relatively recent phenomenon. \r\nIn general
  this is true. To be more specific, it was the \r\narrival of minicomputers, especially
  the PDP-8 in April 1965, \r\nthat allowed engineers to seriously consider dedicating
  an \r\nentire computer to a single experiment or instrument. However, \r\nit turns
  out that one of the first computers constructed in \r\nthe United States was a real-time
  system, and the \r\narchitectural design decisions that were taken then formed the
  \r\ntemplate for the minis and micros to come. This machine was \r\nthe Whirlwind.
  \r\n\r\nIn 1944 the US Navy contracted the Masachussets Institute of \r\nTechnology
  (MIT) to  build an aeroplane simulator that would \r\nbe capable of solving the
  equations of motion of the aeroplane \r\nin real time and which could thus be used
  to investigate \r\ninstability problems in aircraft designs of the day. \r\nOriginally
  an analogue machine was proposed, but in 1945 the \r\ndesign turned into a general
  purpose digital computer. The \r\nlaboratory at MIT was renamed the Digital Computer
  Laboratory \r\nand Maurice Wilkes who had many contacts with the MIT team, \r\nsays
  in his memoirs:\r\n\r\n\r\n   \"by the time I knew them they were pillars of digital
  \r\n    orthodoxy and I did not suspect they had an analogue \r\n    past\"\r\nThe
  machine was a sixteen-bit single address processor -- an \r\narrangement familiar
  to anybody who has worked with early \r\nminis or micros, but in those days to have
  a machine with only \r\na 16-bit word was heretical. Typical word lengths were in
  the \r\nrange 36 to 40 bits because of the need for real number \r\narithmetic precision.
  No less a figure than von Neumann \r\ncriticised the Whirlwind saying that with
  its short word \r\nlength he was concerned about its ability to do anything \r\nuseful
  at all. However, sixteen bits of precision is more than \r\nadequate for most sensing
  and control applications, and if you \r\nmust have more precision you can always
  perform multiword \r\narithmetic. Interestingly,  on modern machines the word size
  \r\nis dominated by the need to address large amount of memory \r\nrather than the
  size of the data being manipulated: hence the \r\nwidely expected move towards 64-bit
  architectures such as the \r\nnew MIPS and DEC Alpha devices is being driven by
  the need to \r\ndirectly address more than 4G byte memory spaces, not the need \r\nto
  manipulate 64-bit numbers. I cannot resist pointing out at \r\nthis stage that von
  Neumann also had a fight with Edward \r\nTeller concerning the UNIVAC LARC (Livermore
  \ Automatic \r\nResearch Computer) contending that putting anything more than \r\n10,000
  words in a computer would always be a waste of \r\nmoney.\r\n\r\nThe real reason
  that Whirlwind had such a small word size is \r\nthat it was bit-parallel at a time
  when almost all computers \r\nwere bit serial. The Elliot 803 in the museum's collection,
  \r\nfor instance, has at its heart a single full adder, through \r\nwhich the two
  operands are passed one bit per cycle. The \r\nWhirlwind processed two sixteen-bit
  operands in a single \r\ncycle, but naturally required sixteen times as much hardware
  \r\nto do so. Since the Whirlwind was being designed for a very \r\nspecific application,
  it was possible for the designers to \r\nmake a detailed analysis of the design
  constraints. Robert \r\nEverett, who was responsible for designing part of the order
  \r\ncode for the machine had these comments about how they arrived \r\nat a 16-bit,
  one address computer:\r\n\r\n\r\n   \"[Sixteen] . . . is a nice binary number, but
  it did not \r\n   come about arbitrarily. It was determined by asking \"What \r\n
  \  is the shortest single-address instruction that looks \r\n   reasonable?\" Our
  analysis of the programs we were \r\n   interested in showed that 1000 words was
  tight and 2000 \r\n   considerably better. That gave us eleven bits, and we \r\n
  \  knew that we needed at least 16 instructions; 32 sounded \r\n   reasonable, and
  that gave us five bits more. Therefore \r\n   the sixteen was not a binary number,
  it was the sum of \r\n   two primes.\"\r\nNow although I am claiming that Whirlwind
  was architecturally \r\nthe first minicomputer there is no doubt that the machine
  was \r\nanything but miniature physically. Indeed the scale of the \r\nproject was
  staggering. The budget was $1 million per annum \r\nfor the years 1945 -- 1950,
  which must have given Maurice \r\nWilkes pause for thought on his visits there.
  The machine was \r\nlaid out in 2-dimensional form so that every part could be \r\nimmediately
  accessed in case of failure. This led to a very \r\nspace-inefficient design requiring
  one floor of a large \r\nbuilding. The control room alone contained fifteen 6-foot
  \r\nracks along with oscilloscopes and I/O equipment. The machine \r\nused specially
  made valves that cost between $5 and  $10 each, \r\nand the laboratory had its own
  tube shop to make them. Over \r\n5,000 valves and 11,000 germanium diodes went into
  the running \r\nsystem. Considering EDSAC had 3,000 valves in it and was \r\nreally
  rather compact, it is quite difficult to see why \r\nWhirlwind needed so much floor
  space. Later on large tubes \r\nwere added to Whirlwind that were used purely for
  display and \r\nWhirlwind is therefore probably the first computer to have \r\npurpose
  designed VDU's attached. Whirlwind has an even \r\nstronger claim to be the first
  computer with a light pen \r\nattached.\r\n\r\nOne important aspect of the Whirlwind
  design was the \r\ninstruction decoder. At the heart of the machine was a diode
  \r\nmatrix that performed the decoding, rather than a set of \r\nrandom logic gates.
  This structured decoder was of course only \r\none step away from a microcoded architecture
  as described by \r\nMaurice Wilkes. When Wilkes visited MIT in the 1950's he was
  \r\nalready thinking about the use of structured as opposed to \r\nrandom logic
  and was shown the Whirlwind which: \r\n\r\n\r\n   \". . . did indeed have a centralised
  control based on the \r\n   use of a matrix of diodes . . . It was not, I think,
  \r\n   until I got back to Cambridge that I realised that the \r\n   solution was
  to turn the control unit into a computer in \r\n   miniature by adding a second
  matrix to determine the flow \r\n   of control at the micro level and providing
  for \r\n   conditional micro-instructions.\"\r\nThe Whirlwind was run in a military
  fashion: the machine was \r\nvery thoroughly documented and everybody working on
  the \r\nproject had to produce a biweekly report. The highly \r\ndisciplined preventative
  maintenance programme kept the valve \r\nfailure rate down to 0.1% per 1000 hours.\r\n\r\nBy
  the beginning of 1950 the Whirlwind was running well but \r\nthe Navy was tiring
  of the $1,000,000 annual running budget. \r\nHowever, about that time the USSR developed
  its atomic bomb \r\nand the intercontinental aircraft necessary to threaten US \r\nterritory.
  This was also the time of the Korean war and a time \r\nof general paranoia in the
  US. To detect enemy aircraft flying \r\nlow, a network of small radar stations was
  required, but this \r\nthen presented the problem of correlating and presenting
  a \r\nmass of  information to the military commanders. As an \r\nexperiment, Whirlwind
  was hooked up over Telex lines to a \r\nradar in Lexington Massachusetts with some
  real time \r\ncomputation being performed in the MIT lab. This was a great \r\nsuccess,
  and the airforce took over the project. A new \r\ndivision known as the Lincoln
  Laboratory was created, and the \r\nMIT Digital Computer Lab became part of it.
  Lincoln's primary \r\nresponsibility was the Semi-Automatic Ground Air Defence \r\nSystem,
  otherwise know as SAGE.\r\n\r\nWhirlwind ran in this role until June 30 1959. On
  of the \r\nproject team, Bill Wolf, rented the machine for a dollar a \r\nyear until
  the late 1970's after which Ken Olsen, the DEC \r\npresident, looked after it for
  a while before transferring it \r\nto the Smithsonian.\r\n\r\nProbably the most
  lasting contribution Whirlwind made to \r\nmainstream (as opposed to real-time)
  computing history is the \r\n\r\ndevelopment of the ferrite core memory, and it
  is here that \r\nthe link with DEC becomes clear. Early computer memories, \r\nwhether
  of the delay line or storage tube type, were \r\nunsatisfactory both because of
  their bulk and because of \r\nunreliability. There is evidence to show that the
  development \r\nof the Williams Tube in the UK gave us a significant \r\ntechnological
  lead over the US teams, until the arrival of the \r\nferrite core memory. To quote
  from the famous Moore School \r\ncourse of 1946:\r\n\r\n\r\n   \"Several forms of
  fast internal memory have been proposed \r\n   and the one that shows the most promise
  at the present \r\n   time is the electrostatic storage tube. The one on which \r\n
  \  most work is being done at the present time by RCA is the \r\n   Selectron, and
  when perfected it will have most of the \r\n   features that are desirable in this
  type of memory\"\r\nThe Selectron appears to have been the great white hope of the
  \r\nAmerican designers, but it was a long time coming. It was a \r\ncomplex device,
  difficult to develop and would probably have \r\nbeen very expensive to mass produce.
  The Whirlwind used its \r\nown electrostatic storage tube, but these designs could
  not \r\nmatch the elegance of the Williams' tube which was even \r\nlicensed by
  IBM for use in the 701. However, all this effort \r\nwas obsoleted at a stroke by
  J Forrester's work on ferrite \r\ncores. In 1952 the first testable cores were received
  from \r\nGeneral Ceramics, and a 16 x 16 matrix was constructed. To \r\ndevelop
  a full system required a computer to test it, so the \r\nMemory Test Computer (MTC)
  was built: MTC had the same \r\nrelationship to ferrite core as the Manchester Mk
  1 had to \r\nWilliams Tubes. The design team was headed by a recent MIT \r\ngraduate
  called Ken Olsen. The MTC was therefore the first \r\ncomputer equipped with ferrite
  core memory. It was a great \r\nsuccess, and the memory was transferred onto the
  Whirlwind, \r\nafter which the MTBF on memory rose from two hours to two \r\nweeks.
  At this point the tube shop was converted to making \r\ndisplays!\r\n\r\nThe MTC
  was about as fast as Whirlwind, although it was much \r\nmore compact. Since it
  was not software compatible with \r\nWhirlwind, it never became part of the mainstream
  work of the \r\nlab. The designers subsequently moved to the new Lincoln \r\nlaboratory
  in Lexington, and Olsen began work on the TX-0 \r\nwhich aimed to test transistor
  circuitry and a large 64K \r\nferrite memory. The transistors used included the
  new Philco \r\nSBT100 surface barrier transistors which cost $80 each. TX-0 \r\ncontained
  3,600 transistors.\r\n\r\nThe TX-0 had an 18-bit data word with a sixteen bit address
  \r\nspace and only four instructions: STORE, ADD, JUMP IF LESS \r\nTHAN and OPERATE.
  The OPERATE instruction included commands \r\ncoded on bits that could be combined
  to produce a large \r\nnumber of sub-instructions such as `clear right half of \r\naccumulator'
  and `shift right'. This scheme was to appear \r\nin many subsequent DEC computers
  up to and including the \r\nPDP-8. There were two registers: an accumulator and
  a live \r\nregister used for controlling and buffering I/O transfers. \r\nHowever,
  there was no interrupt mechanism.\r\n\r\nThe TX-0 went from Lincoln to MIT in 1958
  and was used for \r\nteaching and as a laboratory controller. Later the \r\narchitecture
  was extended to include index registers. The \r\nmachine was in use until 1975 when
  DEC bought it for use in a \r\nmuseum.\r\n\r\nTX-0 was a rather futuristic looking
  machine. Olsen had \r\nreceived some (no doubt harmlessly intended) criticism over
  \r\nthe rather homely appearance of the MTC, and seems to have \r\ntaken this very
  much to heart in his subsequent systems. He \r\nsupposedly spent some time in electrical
  utility shops \r\nexamining home appliances, and the characteristic toggle \r\nswitches
  seen on most DEC computers up until recent times \r\n(when toggle switches are frowned
  upon) are apparently based \r\non those found on 1950's fridges. Olsen has always
  been most \r\nconcerned about the appearance of DEC products and in some \r\nparts
  of the company he is referred to as the Chief Box \r\nDesigner.\r\n\r\nThe TX-2
  was a much larger machine, containing 22,000 \r\ntransistors. Its principle design
  goal was efficient I/O. One \r\noption might have been to use a separate I/O processor
  as with \r\nthe IBM channel. This was rejected in favour of giving the I/O \r\ncontrollers
  direct access to main memory and having separate \r\nprogram counters with associated
  program sequences that \r\ncontrolled the I/O using the main processor. It was a
  short \r\nstep from here to modern Direct Memory Access using memory \r\nmapped
  peripheral registers and prioritised interrupts, as \r\nseen in nearly all subsequent
  DEC machines. The echoes of this \r\ndesign decision are still very much present
  today. Intel-style \r\nmicroprocessors follow the IBM I/O model, with separate \r\ninstructions
  for performing I/O, in spite of the fact that \r\nthese microprocessors do not usually
  have independent I/O \r\nprocessors. Motorola-style devices, including the Rockwell
  \r\n65xx family, use a very DEC-like arrangement of memory mapped \r\nI/O registers.\r\n\r\nThe
  TX-2 even had some internal parallelism. It has a 36-bit \r\nALU which could be
  partitioned into 4 x 9, 2 x 18, 1 x 36 or \r\neven one 9-bit and one 27-bit ALU
  operating concurrently. The \r\nmachine had separate adders for indexing and program
  counter \r\n\r\nincrementing. In the 1960's the TX-2 was modified to support \r\nmultiprogrammed
  timesharing. It was finally dismantled in \r\n1977. \r\n\r\nThe construction of
  the machine was based on a few general \r\npurpose circuits mounted in modules running
  at 5MHz. In 1957, \r\nOlsen and two others formed the Digital Equipment Corporation
  \r\nwith venture capital from American Research and Development \r\nand others.
  Although the original aim was to build computers, \r\nthe backers were sceptical
  and preferred a business based on \r\nthe construction of logic modules for laboratory
  use.  \r\n\r\nFor many years, the various series of logic modules were a \r\nmainstay
  of DEC business, but their first computer was shipped \r\nin November 1960. DEC
  machines have always appealed to \r\nengineers and scientists because of their low
  cost and \r\naccessibility. The PDP prefix that was used for all computers \r\nup
  to the 1978 VAX machines stands for Programmable Digital \r\nProcessor, and was
  used instead of the word `computer' \r\nspecifically so that the accountants in
  DEC's customers' \r\ncompanies would not notice that the engineering  teams were
  \r\nbuying computers, which as everybody knows are the sole \r\nprovince of commercial
  Data Processing shops.  \r\n\r\nReal-time systems, whilst outwardly less exciting
  than the \r\nlatest Cray or workstation in fact account for far more of the \r\ncomputers
  in the world, both by number of units and by shipped \r\nvalue. At a rough count
  there are fifteen computers in my \r\nhome, of which only three have keyboards attached.
  If my TV \r\nand audio hardware were a little less aged, there would be far \r\nmore.
  So the Whirlwind and its small, fast successors have \r\ninherited the Earth, in
  spite of the scepticism of von \r\nNeumann.\r\n\r\nTop  Previous  Next  Early computers
  at Manchester University \r\n\r\n   Manchester University is, along with Cambridge
  University \r\n   and the  National Physical Laboratory, sure of its place \r\n
  \  in the history books for  its pioneering contributions to \r\n   computer technology.
  Members of the  Society were given \r\n   some interesting and revealing insights
  into the  stories \r\n   behind the design of the early Manchester computers at
  an \r\n   all-day seminar held at the Science Museum on 23 May \r\n   1991. This
  report  concentrates on the hardware aspects \r\n   of the five machines described.\r\n\r\n
  \  Professor Tom Kilburn was involved throughout the \r\n   development period,
  \ initially as a graduate student \r\n   assisting Professor Freddie Williams. He
  \ was thus an \r\n   appropriate choice as the first speaker, and he discussed  \r\n
  \  the development of the both the prototype computer and \r\n   the full sized
  \ successor, the Mark I.\r\nMark I\r\n\r\nKilburn told the meeting that the University's
  involvement \r\nwith  computers started when Freddie Williams paid two visit \r\nto
  the States in  1945 and 1946 to assess the radar circuitry \r\nbeing developed there.
  On  the second trip he visited Bell \r\nLabs and saw experiments using cathode  ray
  tubes. The \r\nobjective was to remove the ground echoes that occurred  in \r\nall
  radar systems.\r\n\r\nWilliams thought he could see a different use for CRTs --
  as \r\nstorage  devices -- and started exploring the possibility as \r\nsoon as
  he got back.  \"We'd been aware of digital computers \r\nfor some time then, especially
  \ about the mercury delay line, \r\nbut of course the mercury delay line is  not
  immediate access. \r\nThere was a chance of making an immediate access  store, \r\nperhaps,
  with a cathode ray tube. And so it proved.\"\r\n\r\nAfter a period of experimentation,
  a working system was \r\ndeveloped, and  the need to test it was to prove the \r\nfoundation
  of Manchester's  computing reputation. \"The only \r\nway to make sure you've got
  a cathode  ray tube store is to \r\nactually test it with zeroes and ones changing
  \ throughout the \r\npattern at machine speed. Various pieces of test gear  were
  \r\npostulated, and Geoff Toothill and I nearly built them, but in \r\nthe  end
  it turned out that it was going to be far easier to \r\nbuild a computer  to do
  the job properly. We set about that at \r\nthe end of 1947 and by the  middle of
  1948 we had what we \r\ncalled the baby machine.\r\n\r\n\"The machine attracted
  a great deal of interest. Among the \r\nmany eminent  visitors who found their way
  to Manchester was \r\nSir Ben Lockspeiser of  Ferrantis. His company was already
  \r\ninvolved in the computer project, as  they had supplied a \r\nmagnetic drum
  for the baby machine. Now Lockspeiser  committed \r\nto fund the manufacture of
  a full scale machine, with the idea  \r\nof subsequently building copies for sale.\r\n\r\n\"Following
  Ben Lockspeiser's visit, Geoff Toothill and I, \r\naided by Dai  Edwards and Tommy
  Thomas who joined us in \r\nSeptember 1948, set about  making a big machine. This
  machine \r\nworked. It was quite a sizeable  machine and it stayed working \r\nat
  the University for quite a time, and  was used by people \r\nlike Newman, Turing
  and one or two others.\"\r\n\r\nIt took till November 1949 to complete the specification
  for \r\nthe Mark I,  and another 15 months before Ferranti was ready \r\nto deliver
  the machine  to the University.\r\n\r\nThen, said Kilburn, \"It took in those days
  quite a number of \r\nmonths to  install the machine. The Mark I was, like all those
  \r\nmachines, quite  difficult to maintain. We had trouble with \r\nthe machine,
  and trouble with  the drum, and everyone around \r\nus was conscripted to try and
  keep the  machine working. The \r\nmachine continued to work at the University up
  to I  believe \r\n1959.\r\n\r\n\"One of our aims was to introduce computers to industry.
  We \r\nallowed  industry to use the machine right from the start, \r\ncharging them
  some  reasonable fee which was I think £50 an \r\nhour.\"\r\n\r\nWhile grappling
  with the problems of getting the Mark I to \r\nwork, Kilburn  and his colleagues
  were already thinking ahead \r\nto the next computer.\r\n\r\n\"It was clear long
  before the machine actually worked that we \r\ncould  improve on the Mark I. For
  example the Mark I had been \r\ninfluenced by the  pure mathematicians like Newman
  and Turing \r\nthat we'd been talking to, so  we turned out special \r\ninstructions
  to help them. It was clear by 1951  that pure \r\nmaths would not be the prime use
  of the machine: scientific  \r\ncomputing would.\"\r\n\r\nThat involved designing
  a floating point accelerator. Together \r\nwith  other improvements suggested by
  the experience of Mark \r\nI, \"we embarked  on a machine called Meg. This became
  the \r\nFerranti Mercury, and was about  30 times more powerful than \r\nthe Mark
  I at about the same cost.\"\r\n\r\nMeg and Mercury\r\n\r\nKilburn was followed to
  the rostrum by Professor Dai Edwards, \r\nwho gave  the audience many details of
  the technological \r\nadvances introduced in  Meg and Mercury.\r\n\r\nEdwards started
  by describing the experiences of some of the \r\nearly Mark  I users. One user,
  which was engaged in working \r\nout crystal structures,  found that out of the
  total machine \r\ntime of 1750 hours, 250 were wasted  due to machine faults, \r\nabout
  14% of the time they took. Another 10% of  time was \r\ndaily routine maintenance,
  so a fair stretch of machine time  \r\nwent to waste. Improving reliability was
  therefore a priority.\r\n\r\n\"There were something like 4200 cathodes in the Mark
  I, but \r\nonly 1800 in  the Mercury with 1600 crystal diodes. Even when \r\nyou
  add the totals  together there were still fewer elements, \r\na 19% reduction. That
  was a  move towards getting a bit of \r\nextra reliability.\"\r\n\r\nMemory sizes
  on the Mark I were 10K bits for the CRT main \r\nmemory, and  650K bits for the
  drum. These were the same on \r\nthe successor machines,  both Meg and Mercury.
  \r\n\r\n\"On Meg we used a CRT, on the Mercury made by Ferranti we went \r\nto core.
  \ The drum wasn't that reliable, so on the Mercury it \r\nwas smaller and more  of
  them could be connected. Thus if one \r\ndrum went funny you didn't lose  everything.
  It was possible \r\nto attach eight drums, but typically four  were used. The IBM
  \r\n701, a contemporary of our prototype Megs of 1954,  had seven \r\ntimes the
  RAM, but their drums were about 10% smaller.\r\n\r\n\"We used 10-bit words because
  that was the natural element \r\nthat came out  of the CRT. With a CRT you have
  to regenerate \r\nthe information otherwise  it would decay away, so in the \r\nManchester
  machines there were things  called `scan periods' \r\nwhen we regenerated information,
  and `action  periods' when we \r\nused the store to get something out or put something
  \ in.\r\n\r\n\"Instructions were 20 bits, so we required two accesses for \r\nthat,
  and if  we were using a 10-digit number you had a third \r\naction. So in three
  \ double beats, 60 microseconds, you could \r\ndo arithmetic on 10 bits, which  was
  done in the B-registers.\r\n\r\n\"In the Meg we just had five bits to define the
  instruction, \r\nso in  modern terminology it was really a risc machine. When \r\nwe
  went to the  Mercury we used seven bits to provide extra \r\ninstructions. Short
  \ operations were 60 microseconds. A \r\nfloating point operation with a 40- bit
  number (a 30-bit \r\nfraction and a 10-bit exponent) took 180  microseconds, \r\nmultiplication
  300 microseconds. In the 701 a fixed point  \r\n\r\naddition or subtraction over
  36 bits was 60 microseconds, but  \r\nmultiplication was 500 microseconds.\"\r\n\r\nTransistor
  computer\r\n\r\nProfessor Dick Grimsdale followed Professor Edwards with a \r\ndiscussion
  of  his work on the Manchester prototype transistor \r\ncomputer -- work which  overlapped
  with the development of \r\nMeg/Mercury. This had also emerged  out of a concern
  for \r\nreliability, as transistors, though at the time  much more \r\nunreliable
  than valves, offered a potential future  \r\nimprovement, and also consumed far
  less power.\r\n\r\nTogether with a colleague, Doug Webb, \"we were doing some \r\nexperiments
  \ with STC crystal triodes. We got some of the \r\nbasic circuits, and were  able
  to use them to make a prototype \r\ncomputer. We used a drum because it  was the
  only storage \r\ndevice available. The drum was a delay-type store,  with the \r\ndelay
  caused by the drum rotation\".\r\n\r\nThe prototype was a 48-bit word machine, with
  four spare bits \r\nfor timing  leaving 44 usable bits. The clock rate was 125 \r\nKHz.
  There were 92 point  contact transistors in it, with six \r\npoint-contact diodes
  on average for  each transistor. This \r\nmachine was first run on 16 November 1953,
  \"the  first \r\ntransistor computer in the world\".\r\n\r\nHaving proved the feasibility
  of a transistor computer, \"we \r\ndecided to  take it to pieces and rebuild it.\r\n\r\n\"The
  full-scale computer had a B-register and an eight word \r\nserial  register. It
  also had a multiplier. That machine was \r\noperational in  1955. It had 150 watt
  power consumption and \r\n250 transistors. It would  add two 44-bit numbers in 1.5
  drum \r\nrevolutions. The drum operated at  3000 rpm. A division sub-\r\nroutine
  took one second, square roots 1.3  seconds.\"\r\n\r\nHistory then repeated itself,
  though: \"There was a problem \r\nwith the  unreliability of the transistors\".
  This was solved \r\nby the development of  a different type of component, the \r\njunction
  transistor, initially used  by Grimsdale in an \r\nexperimental small core store.\r\n\r\nThe
  transistor computer even in its original form had enough \r\npotential  to interest
  Metropolitan Vickers. \"The outcome was \r\nthe commercialisation  of the machine
  as the Metrovick 950, of \r\nwhich seven were built. It used  junction transistors
  because \r\nthey were more reliable.\"\r\n\r\nAtlas\r\n\r\nThe session between lunch
  and tea was devoted entirely to the \r\nadvances  embodied in the next Manchester
  computer, Atlas, \r\nwith further  presentations from Messrs Kilburn and Edwards.\r\n\r\nAtlas,
  as Kilburn told the delegates, was a major project for \r\na  university to undertake.
  Value of the first version at \r\ndelivery was  £1.5m, which today is equivalent
  to £15 million. \r\nThe later machine cost  installed at Chiltern would have cost
  \r\n£25m today. Atlas was competitive with  IBM Stretch for the \r\ntitle of most
  powerful computer in the world in its  time, and \r\nwas 80 times as powerful as
  Mercury.\r\n\r\n\"Atlas introduced many new ideas, such as multiprogramming, \r\njob
  \ scheduling, interrupts, virtual storage, paging and \r\noperating systems.  The
  idea was that a job could be input on \r\nany teleprinter and output,  instead of
  using dedicated \r\nperipherals. The task of sorting it out was  given to the \r\nsupervisor,
  as no human knew what was going on.\"\r\n\r\nIts development ensured that in the
  Flowers report Manchester \r\nwas  designated as one of the three regional university
  \r\ncomputer centres in  the country. Inaugurated on 7 December \r\n1962, Atlas
  provided a 24 hour  service to other universities, \r\nincluding Nottingham, Edinburgh
  and  London, and was \r\noperational till 1972, when it was replaced by MU5.\r\n\r\nAtlas
  was produced in a collaborative effort with the \r\nuniversity's long  established
  industrial partner, Ferranti. \r\n\"We charged 7.5% of the  capital value of machine
  for \r\nmaintenance\", said Kilburn. \"This was  £100,000 a year, or £1 \r\nmillion
  today. We sorted out that the university  would have \r\nhalf the machine time,
  while Ferranti would sell the other  \r\nhalf.\"\r\n\r\nTaking over the rostrum
  to describe the technical \r\nspecification of  Atlas, Dai Edwards told the audience
  that \r\nAtlas was built from 10  shelves, each with 50 printed circuit \r\nboards.
  In all it contained 60,000  transistors and 300,000 \r\ndiodes.\r\n\r\nStorage used
  components that were state-of-the-art at the \r\ntime. There  was a fixed store
  (in today's terminology, a ROM) \r\nof twice 4096 words  with 0.3 microsecond access;
  a core \r\nstore, with four units of 4096 words  and 0.5 microsecond \r\naccess;
  and a drum of 100K words.\r\n\r\n\"In the fixed store were engineering test programs,
  peripheral  \r\nstart/stop routines, scheduling routines, and 250 additional \r\norders.
  The  fixed store was novel, cheap and fast.\"\r\n\r\nIn 1965 a Dataproducts disc
  added, 31\" in diameter, with 16 or \r\n32  platters on a shaft. The larger size
  had a capacity of 16m \r\nwords, or  100Mb. It consumed 7.5 Kw and weighed 3500
  lbs.\r\n\r\nThe processor had a 48-bit floating-point unit, which could be  \r\noverlapped
  with a 24-bit fixed point unit. In the multiplier, \r\nbits were  grouped in threes
  rather than in twos as on \r\nMercury. Multiply time was  4.7 microseconds.\r\n\r\nFor
  I/O Atlas used paper tape equipment, data links over \r\nprivate lines  at 60-100
  kcps, and also card equipment.\r\n\r\nMU5\r\n\r\nFinally, Professor Derrick Morris
  told the audience about the \r\nlast of  the pioneering Manchester machines. which
  in the more \r\nprosaic computing  times of the late sixties was known simply \r\nas
  MU5.\r\n\r\nThis successor to Atlas was first conceived in 1966. The \r\nUniversity
  won  support from both the SRC and ICL in 1967, and \r\nhad built up a joint  design
  team of 20 by the following year, \r\nwith 11 from the University,  five from ICL
  and four from the \r\nSRC.\r\n\r\nThe objective of the new machine was to achieve
  20 times the  \r\nthroughput of Atlas, of which seven times was to come from \r\nimproving
  the  technology, two times from the high level \r\nlanguage architecture, and two
  \ times from the overall system \r\narchitecture.\r\n\r\nUnlike the other Manchester
  machines, MU5 was conceived as a \r\nrange of  three machines. The first was to
  be a small machine \r\nof around the cost  of a DEC PDP-11. The second was to be
  a \r\nhigh-end scientific machine. The  third was to be a \r\nmultiprocessor. Of
  these, only the second was actually  built.\r\n\r\n\"The most interesting technical
  aspect of MU5 was the \r\nassociative store.  This was as a result of an analysis
  of the \r\nAtlas software, especially  the instruction code. We learnt \r\nsomething
  about the frequency of use of  operands and control \r\nstructures. The order code
  accommodated string  functions and \r\nvector functions.\"\r\n\r\nThe basic instruction
  was 16 bits, though there were some 32-\r\nbit  variants also. There were no conventional
  registers (such \r\nas the block  of 128 B-registers on Atlas).\r\n\r\nMU5 was heavily
  pipelined -- about five stages at 50ns per \r\nstage. The  secondary pipeline had
  10 instructions. The local \r\nstore was 250ns, so  there was a wide access path
  to keep \r\nsystem going, with eight  instructions in it.\r\n\r\nTop  Previous  Next
  \ Miscellany \r\nMembership of the Society has risen above the 300 mark.\r\n\r\nOur
  new chairman, Graham Morris, is the third former BCS president \r\nto join the committee.
  The others are our immediate past chairman, \r\nEwart Willey, and Professor Sandy
  Douglas. The number will rise to \r\nfour in October when Roger Johnson takes office
  as the 1992-93 President.\r\n\r\nDoron Swade is planning to resuscitate the Totalisator
  Working Party \r\nnow that his heavy workload commemorating the bicentenary of the
  birth \r\nof Charles Babbage is finished.\r\n\r\nWe regret to record the news that
  one of computing's best-known pioneers, \r\nGrace Hopper, died on New Year's Day
  at the age of 85. \r\nRear-Admiral Hopper had many innovative software developments
  to her name, \r\nthough perhaps she is best known for introducing the word \"bug\"
  into computer \r\nterminology, when she discovered that a failure of the Harvard
  Mark I computer \r\nwas caused by a moth.\r\n\r\nComputing anniversaries in 1992
  include:\r\n\r\n375th: Napier's invention of the primitive calculating device known
  as \r\nNapier's Bones in 1617\r\n\r\n100th: Herman Hollerith's entry into business
  as the Hollerith Electric \r\nTabulating System in 1892, following the success of
  his automation of the \r\nprocessing of the 1890 US census\r\n\r\n30th: launch of
  the Ferranti Orion in 1962\r\n\r\n25th: IBM's introduction of the binary synchronous
  communications protocol in 1967\r\n\r\n25th: installation of the first cash dispenser
  in the UK, also in 1967\r\n\r\n10th: the issuing of a licence to Mercury Communications
  in 1982\r\n\r\n5th: launch of the IBM PS/2 in 1987.\r\n\r\nTop  Previous  Next  Working
  Party Reports \r\nElliottt 803 Working Party\r\nJohn Sinclair, Chairman\r\n\r\nIn
  the last issue of Resurrection I reported that the \r\nprocessor was operational.
  Since then, we have made steady \r\nprogress towards our goal of restoring it to
  \"as new\" \r\ncondition, as a result of a lot of hard if unglamorous work. \r\nThe
  working party members put in 32 sessions of restoration \r\nduring 1991.\r\n\r\nThe
  processor is now exceptionally reliable -- indeed, I \r\ncannot remember the last
  logic failure. We did have a store \r\nproblem in the summer, when the room temperature
  was around 80 \r\ndegrees (neither the room nor the processor has any air \r\nconditioning).\r\n\r\nAll
  the peripherals are now operational, including the 35mm \r\nfilm handlers, and reliability
  is steadily improving. The film \r\nhandlers were thick with grime when we got them,
  and to start \r\nwith we were discovering new faults every time we switched \r\nthem
  on, but we have now got past that point.\r\n\r\nThe major advance since the last
  newsletter has been the \r\nacquisition of a new battery, generously donated by
  the RAF to \r\nthe Science Museum after we tracked down the appropriate \r\nstores
  unit and paid them a visit. (The batteries are still \r\nbeing made for use in aircraft
  like the Nimrod.)\r\n\r\nThis was the first time that any member of the working
  party \r\nhad seen a brand new battery: the normal procedure with \r\ndefective
  batteries when the Elliotts were in use was to \r\nreplace the faulty cell or cells.
  This was principally on \r\ngrounds of cost -- the last time I looked each cell
  cost \r\naround £70.\r\n\r\nThe new battery has helped a great deal. Previously,
  we had to \r\nput the old battery on a charge for an hour before we could \r\nswitch
  the processor on, as it would not otherwise cope with \r\nthe surge of power.\r\n\r\nOther
  acquisitions include a collection of Creed teleprinter \r\nparts, acquired by working
  party member George Bradley from an \r\nengineer who used to work with Creed, and
  had been storing \r\nthem in his garage since the company discontinued production.
  \r\nThese will be useful for the Pegasus as well, and we should \r\nnow be able
  to keep the teleprinters running on both machines \r\nfor a considerable time.\r\n\r\nAt
  the Open Day, we were promised a complete additional 803 -- \r\na major surprise,
  as we thought that our machine plus the \r\nincomplete one in the Science Museum
  store were the only \r\nsurviving examples.\r\n\r\nDEC\r\nAdrian Johnstone, Chairman\r\n\r\nThe
  Working Party, having restored the museum's original PDP-8 \r\nto its full glory,
  has been concentrating its efforts on a \r\nPDP-12. This machine is rather a surprise
  to anyone that \r\nassociates DEC with small machines, firstly in that it is \r\nrather
  large, and secondly in that it is green. I cannot, off \r\nhand, think of any other
  green production computers (I \r\ndiscount the Elliot 401 languishing in the corner
  as it was \r\nnever mass produced) and am sure that the particular \r\ncombinations
  of day-glo and olive drab employed here will not \r\nbe seen again in our lifetimes.
  \r\n\r\nThe 12 is an odd machine in may other ways. It is something  /of \r\na specialist
  device, being equipped as standard with a bay of \r\nAnalogue to Digital Converters
  and a console VDU. Internally, \r\nit is a hybrid of a PDP-8 and a LINC (Laboratory
  Instrument \r\nComputer) which was originally demonstrated at MIT in 1961. \r\nThe
  LINC was a great influence on the design of the DEC PDP-4 \r\nand PDP-5, and therefore
  of the 5's successor the PDP-8. The \r\noriginal LINC machines were constructed
  using DEC supplied \r\nlogic modules, so it was natural for DEC to take over \r\nproduction
  from MIT. Subsequently a two processor machine, the \r\nLINC-8 was designed which
  could execute LINC and PDP-8 \r\ninstructions in parallel, and then the PDP-12 which
  could \r\nexecute either LINC or -8 instructions but not at the same \r\ntime.\r\n\r\nAbout
  1000 PDP-12's were made, and many were sold to hospitals \r\nand other medical institutions.
  Our machine was used for \r\ndiagnosis and research into hearing and speech disorders.
  A \r\nspeech synthesiser was used to play back syllables to the \r\nguinea pig in
  a controlled way. This system, complete with \r\nsoftware is now restored, and can
  make various burbling and \r\nwhistling noises. The machine was never used for full
  \r\nconnected speech, so it cannot easily be persuaded to hold a \r\nconversation,
  but we plan to use some public domain text-to-\r\nphoneme ftware to build some sample
  sentences for play back. \r\nThis is a major undertaking, and I would be pleased
  to hear \r\nfrom programmers with an interest in speech synthesis. I have \r\nbuilt
  a small phoneme based speech synthesiser for use on my \r\nown machines on which
  the text-to-speech programs have been \r\ndemonstrated, so most of the ingredients
  are already \r\navailable.\r\n\r\nThe Working party has also acquired some PDP-11
  equipment \r\nwhich will shortly be transferred to the museum for \r\nrestoration.
  The haul includes what is probably one of the \r\nfirst PDP-11's to be sold in this
  country. Unfortunately the \r\nmachine is showing signs of {\\em rust} of all things,
  so \r\nconsiderable work may be required before it may be safely \r\nswitched on.\r\n\r\nSoftware
  and Emulators\r\nTony Sale, Chairman\r\n\r\nThe Working Party took the major decision
  last summer to focus \r\nits efforts more sharply by concentrating on the emulation
  of \r\nold computers, and particularly the computers in the Society's \r\ncollection.
  Software in the round had proved to be too large a \r\nsubject.\r\n\r\nAs a result,
  we are now known as the Software and Emulators \r\nWorking Party. At the same time,
  I succeeded Martin Campbell-\r\nKelly as chairman.\r\n\r\nWe have made considerable
  progress since then. We have spent \r\nsome time studying the possibility of developing
  standard file \r\nformats for paper tape emulation on floppy discs -- for \r\ntransferring
  data and programs from tape to disc for use in \r\nemulations and vice versa. We
  have  eveloped a firm proposal \r\nwhich we are now considering in more detail.\r\n\r\nWe
  have also spent some enjoyable hours testing Chris Burton's \r\n\"flight simulator\"
  of Pegasus. Some explanation is needed \r\nhere, as the flight simulator concept
  is an important one \r\nwhich will be of interest to everyone attempting conservation
  \r\nand restoration of historic computers.\r\n\r\nThe \"flight simulator\" is a
  piece of software that not only \r\nemulates the instruction set of the target computer,
  but also \r\nemulates the person-machine interaction using graphics. You \r\ncould
  say it conserves the persona of the machine in software.\r\n\r\nThus Chris Burton's
  simulator shows a pictorial representation \r\nof the front face of a Pegasus with
  its CRTs, lights and \r\nswitches working in real time when a program is run. (A
  hand \r\nemerges from behind the screen to change the switch settings \r\nwhen this
  is required!) It also shows the holes punched in the \r\npaper tape that is being
  used.\r\n\r\nChris' simulator has now been extensively tested and debugged, \r\nand
  has been verified by Derek Milledge against our own \r\nPegasus. Some of our older
  members are now using it to \r\nredevelop programs they wrote when Pegasus was a
  new machine.\r\n\r\nA second flight simulator is being written by Peter Onion for
  \r\nour Elliott 803, and this is now nearing completion. This, \r\nlike the Pegasus
  program, will run on any PC that has VGA \r\ngraphics.\r\n\r\nWriting simulators
  is as you can imagine very time-consuming. \r\nAnother thing we have been looking
  at is the development of a \r\ntoolset to enable these programs to be written more
  easily.\r\n\r\nPegasus\r\nJohn Cooper, Chairman\r\n\r\nIn my last report I described
  how we had succeeded in getting \r\nPegasus working again. Getting from that point
  to a condition \r\nwhere the system would be reliable enough for continuous daily
  \r\nuse has involved at least as much work again.\r\n\r\nThere has been a sustained
  effort over the past year to \r\nimprove reliability, involving 34 sessions of work
  by Working \r\nParty members. The major achievement has been the complete \r\nrefurbishment
  of the margin control panel.\r\n\r\nThis is a panel inside the power supply unit
  that allows you \r\nto change the voltages within the machine gradually until a
  \r\ncomponent within the computer fails, and then to identify and \r\nrectify the
  cause of failure. Getting it into full working \r\norder was a major job. The panel
  will help us greatly in our \r\ngoal of restoring Pegasus to routine operational
  condition, \r\nand we are now embarking on a programme of work designed to \r\nachieve
  this.\r\n\r\nWe are keen that this work should have an educational as well \r\nas
  a functional value, and are actively encouraging younger \r\nmembers of the Society
  to join us so they can familiarise \r\nthemselves with the logic and operation of
  Pegasus. Anyone \r\ninterested should contact myself or Tony Sale and we'll \r\narrange
  a meeting. No previous experience of Pegasus or any \r\nsimilar computer is required.\r\n\r\nWe
  also had a problem with the drum, which we identified using \r\nthe margin control
  system though it proved not to be related \r\nto voltage changes. It took us a long
  time to track down the \r\nfault, which turned out to be a bad joint inside the
  drum \r\ncase.\r\n\r\nWe have completely refurbished the package tester, which also
  \r\nhad a major fault. This is an aid to repairing broken packages \r\n- circuit
  boards - and was supplied with the system.\r\n\r\nAway from the machine, we have
  made further progress in \r\ncataloguing our collection of spares. We are also in
  the \r\nprocess of cataloguing the software, and copying it so that we \r\nhave
  duplicate tapes of everything.\r\n\r\nChris Burton has produced a Pegasus emulator
  which runs on an \r\nIBM style computer with VGA graphics. It emulates both the
  \r\nfunctions and operation of the machine, and presents a most \r\nrealistic view
  of the console in colour, with a full set of \r\nworking handswitches that can be
  manipulated via the IBM \r\nkeyboard. This is a very fine piece of work.\r\n\r\nWe
  also now have available a paper tape editing set for use on \r\nan IBM PC. This
  allows the user to create programs and text \r\nusing a standard editor or word
  processor, with conversions to \r\nand from five hole Pegasus tape being performed
  automatically.\r\n\r\nS-100 bus\r\nRobin Shirley, Chairman\r\n\r\nInterest in the
  activities of the S-100 group has steadily \r\nbeen increasing. A lot of people
  have been contacting us after \r\na news item about our activities appeared in Computer
  Shopper \r\nmagazine. We also had a much more productive Open Day than in \r\n1990,
  which apart from providing us with some interesting \r\ncontacts also produced some
  bits and pieces of useful \r\nequipment. Membership of the Working party is now
  between 10 \r\nand 20. \r\n\r\nWe have acquired a Dynabyte machine, complete with
  \r\ndocumentation, which was on view at the Open day. Our display \r\nthen was similar
  to the 1990 show. I am currently exploring \r\nthe possibility of acquiring at least
  one Altair, which is of \r\nparticular interest to us as it was the original S-100
  bus \r\nmachine.\r\n\r\nMany of the people who have contacted us have specific \r\ninterests.
  For example, one man based in Carlisle has a \r\ncollection of Triumph-Adler machines
  -- he ran the Triumph-\r\nAdler user group for a while. Another has a good collection
  of \r\nHewlett-Packard desktops. A third used to run the Lynx User \r\nGroup.\r\n\r\nThis
  leads to the thought that we should perhaps create a \r\nnumber of sub-working parties
  to cater for each of these \r\ninterests, all linked to the parent group in a tree-like
  \r\nstructure. Our working party does not have the same obvious \r\nfocal point
  of interest as the Pegasus and Elliot groups. I am \r\ncontemplating writing a news
  sheet to keep all our members \r\ninformed of the many different interests within
  the Working \r\nParty, if this is felt to be worthwhile.\r\n\r\nTopPrevious Next
  Forthcoming events \r\n5 October 1992  In steam dayOctober 1992  Evening meeting2
  November 1992  In steam day19 November 1992  Society Open Day26 November 1992  Evening
  meeting7 December 1992  In steam day\r\n\r\nIn Steam Days start at 10 am and finish
  at 5 p.m. Members are \r\nrequested to let the secretary know before coming, \r\nparticularly
  if bringing visitors. Contact him on 071-938 \r\n8196.\r\n\r\nMembers will be notified
  about the contents of the evening \r\nmeetings once the Committee has finalised
  the 1992-93 \r\nprogramme. All the evening meetings take place in the Science \r\nMuseum
  Lecture Theatre and start at 5.30pm.\r\n\r\n\r\nTopPrevious Next Committee of the
  Society \r\n[The printed version carries contact details of committee members]\r\nChairman
  \   Graham Morris FBCS Secretary   Tony Sale FBCS Treasurer   Dan Hayton Science
  Museum representative   Doron SwadeChairman, Pegasus Working Party   John Cooper
  MBCSChairman, Elliott 803 Working Party   John SinclairChairman, DEC Working Party
    Dr Adrian JohnstoneChairman, S100 bus Working Party   Robin ShirleyEditor, Resurrection
    Nicholas Enticknap Archivist   Harold Gearing \r\n\r\nCommittee members\r\n\r\nDr
  Martin Campbell-KellyGeorge DavisProfessor Sandy Douglas CBE FBCSChristopher HipwellDr
  Roger Johnson FBCSEwart Willey FBCSPat Woodroffe\r\n\r\nTopPreviousAims and objectives\r\nThe
  Computer Conservation Society (CCS) is a co-operative \r\nventure between the British
  Computer Society and the Science \r\nMuseum of London.\r\n\r\nThe CCS was constituted
  in September 1989 as a Specialist \r\nGroup of the British Computer Society (BCS).
  It thus is \r\ncovered by the Royal Charter  and charitable status of the \r\nBCS.\r\n\r\nThe
  aims of the CCS are to\r\nPromote the conservation of historic computers\r\n\r\n
  Develop awareness of the importance of historic \r\n         computers\r\n\r\n     Encourage
  research on historic computers\r\nMembership is open to anyone interested in computer
  \r\nconservation and the history of computing.\r\n\r\nThe CCS is funded and supported
  by, a grant from the BCS, fees \r\nfrom corporate membership, donations, and by
  the free use of \r\nScience Museum facilities. Membership is free but some charges
  \r\nmay be made for publications and attendance at seminars and \r\nconferences.\r\n\r\nThere
  are a number of active Working Parties on specific \r\ncomputer restorations and
  early computer technologies and \r\nsoftware. Younger people are especially encouraged
  to take \r\npart in order to achieve skills transfer.\r\nResurrection is the bulletin
  of the Computer \r\nConservation Society and is distributed free to members. Additional
  \r\ncopies are £3.00 each, or £10.00 for an annual \r\nsubscription covering four
  issues. Editor - Nicholas Enticknap\r\n    Cover design - Tony Sale  Typesetting
  - Adrian Johnstone\r\n    Printed by the British Computer Society © Copyright Computer
  Conservation SocietyComputerRESURRECTION The Bulletin of the Computer Conservation
  SocietyISSN 0958 - 7403 Volume 1 Number 4Summer 1992Nicholas Enticknap, EditorIt
  has been a long time since the last issue, and much has \r\nhappened. The most significant
  develop ment has been Tony \r\nSale's initiative in setting in motion plans for
  a Museum of \r\nCryptology and Computing in Bletchley Park, on the very site \r\nwhere
  the Colossus code-breaking computers played such a vital \r\nrole in World War Two.
  Tony summarises the current situation \r\nin his Society News piece.We hope this
  enterprise will eventually result in both a \r\npermanent  home for the Society
  and its machines and other \r\nartefacts as well as a  focal point for our various
  \r\nactivities. These have expanded with the  arrival of our \r\nArchivist, Harold
  Gearing, who has started work on the  \r\nmassive undertaking of documenting and
  classifying our growing  \r\ncollection of historical documents.Meanwhile the Society's
  existing activities have continued \r\nunabated.  As far as work on our two oldest
  computers is \r\nconcerned, the emphasis  has changed -- both Pegasus and \r\nElliott
  have been working for over a  year now, and the new \r\nobjective is to get them
  back to the state of  reliability \r\nthey enjoyed when new.The two working parties
  concerned with more modern computers \r\nhave both  been expanding their portfolios
  of equipment, while \r\nthe Software group  has taken on a new lease of life with
  a \r\nredefinition of its role.  Further details of all this \r\nactivity can be
  found in the Working Party  reports.The meetings programme has continued toughout
  the past year \r\nalong  the lines successfully established in our first year. \r\nThis
  issue  carries reports on a wide variety of historical \r\nsubjects, ranging from
  \ the evolution of Algol to the \r\ninfluence on early circuitry of Alan  Blumlein
  via the \r\ndevelopment of the DEC PDP-8. We also carry a report based on \r\nthe
  all-day seminar on the pioneering computers from  \r\nManchester University.Director,
  The National Museum of Science and IndustryThe activities of the Computer Conservation
  Society have \r\nagitated a host of issues that are both exciting and \r\ndisturbing.
  Several established traditions have been \r\nchallenged. There is an unspoken assumption
  in the museum \r\nworld that interpretation of the past is necessarily based on
  \r\npartial, if not fragmentary, evidence. However, the Society's \r\nprogramme,
  far from being damned to shards and chipped \r\nfragments from an inaccessibly distant
  past, provides an \r\nembarrassment of riches -- machines, documentation, orally
  \r\ntransmitted expertise and experiences, recorded seminars and \r\ncolloquia by
  the living practitioners and witnesses to the \r\ngreat pioneering age of computing.
  Unlike the archaeologist we \r\nhave the opportunity to select from an almost unlimited
  wealth \r\nof evidence. There is another respect in which the activities of the
  \r\nSociety up-end otherwise comfortable perceptions. The \r\nestablished ethos
  of preservation is essentially passive -- \r\nphysical relics placed in an inert
  environment to retard \r\ndegradation. However, the efforts to restore historic
  machines \r\nto working order by those who originally designed and \r\nmaintained
  them are highly interventionist and this raises \r\ndilemmas about historical integrity
  and authenticity.These are not the only stirrings in the museological soup. It \r\nis
  painful to accept the ultimately inevitable demise of \r\nmachines lovingly and
  ingeniously restored to working order. \r\nThe Society's programme to emulate past
  performance on present \r\nday machines using the restored original as a benchmark
  of \r\nauthenticity, is a bold and visionary move, but it has \r\ndisturbing implications.
  The museum culture is founded on the \r\nnotion that the original object is an ultimate
  historical \r\nsource. However, with emulation, we are faced with the \r\nprospect
  of the operational spirit of a machine being \r\npreserved, as it were, independently
  of its body. The \r\n`ultimate source' is now a computer program not an object.
  Can \r\nmuseums extend to embrace the abstract as object?These are a few of the
  many rewarding speculations stimulated \r\nby the activities of the Society which
  has broken new ground \r\nin conservation and museological terms. Its accomplishments
  \r\nare to be saluted and we are indebted to its many members for \r\nthe generosity
  of their efforts and time, The Science Museum \r\ncherishes its relationship with
  this vigorous and \r\nunconventional organisation and looks forward to building
  on \r\nits successes and progressing its pioneering programme in the \r\ncoming
  yearsTony Sale, SecretaryWe spent a lot of time last year working on the long term
  \r\nfuture of the  Society. We have been concerned that our future \r\nis anything
  but secure.  Our premises at the Science Museum \r\nare already too small for our
  growing  collection of \r\ncomputers, and in any event the building is under threat
  \ of \r\nre-development.Last summer a unique opportunity arose to secure a permanent
  \r\nhome for the Society. This is in the most appropriate site of \r\nBletchley
  Park,  where the Colossus code-breaking computers \r\nwere developed and used  during
  World War II.Bletchley Park is currently still largely owned by the \r\nGovernment,
  \ represented by Property Holdings, with the \r\nremaining small part  belonging
  to British Telecom. The two \r\norganisations were planning to  sell the Park for
  re-\r\ndevelopment, including the huts used by the  code-breakers and \r\na number
  of other buildings used to house teleprinters and  \r\nother equipment.The Society
  joined forces with the Bletchley Archaeological \r\nSociety to  lobby the appropriate
  local authority, the Milton \r\nKeynes Development  Corporation, for support in
  preserving the \r\nhistoric huts. On our own  initiative we further proposed that
  \r\nthe part of the Park which includes  the huts should be used \r\nto house a
  Museum of Cryptology and Computing.  The proposed \r\nMuseum site covers four acres,
  and contains 9,000 square  feet \r\nof space in the huts and a further 60,000 square
  feet in the \r\nother  buildings, which are currently leased by the Civil \r\nAviation
  Authority.I am glad to say that our efforts have been successful. The \r\nMilton
  \ Keynes Development Corporation has set up a Bletchley \r\nPark Trust with a  seedcorn
  start-up fund of £20,000. The \r\nTrust is currently raising  further funds from
  industry.The Trust has a steering committee, and has produced an \r\noutline business
  \ plan. This involves turning the whole of \r\nBletchley Park into a 1940s  theme
  park, of which the museum \r\ncampus will form a part. Income from the  theme park
  will \r\nprovide the funding for the Museum.There is a long way to go yet. The Trust
  needs to raise £10 \r\nmillion to  purchase the Park. Nonetheless, I am very hopeful
  \r\nthat the project will  succeed, and remove the uncertainty \r\nhanging over
  the Society's future.Nicholas Enticknap and Pat WoodroffeThe first public implementation
  of Algol was created in \r\nJanuary 1960. The thirtieth anniversary of the language,
  \r\ntherefore, took place in 1990. To commemorate the occasion, \r\nthe Society
  held an afternoon meeting  at the Science Museum.The meeting concentrated on the
  early days -- how Algol came \r\ninto being,  and how the early compilers were developed.
  It \r\nwas chaired by Mike  Woodger, a member of committees \r\nresponsible for
  defining the language as  far back as 1958. \r\nWoodger gave a scene-setting talk
  describing the  creation of \r\nthe language.Broadly speaking, Algol emerged from
  the activities of two \r\nindependent groups: the GAMM subcommittee in Europe, and
  the \r\nACM in America. The major steps in the process are listed in \r\nthe following
  table:Woodger also ran over the genesis of the various ideas and \r\nconcepts that
  found expression in the early implementations of \r\nAlgol, starting as far  back
  as 1948.Woodger was followed to the rostrum by David Hill of the \r\nMedical  Research
  Council, who took the story forward into the \r\nseventies with an  account of subsequent
  standardising work by \r\nIFIP and ISO.ISO and IFIP both entered the picture in
  1962, when IFIP \r\nWorking Group  2.1 took over running Algol as ISO was turning
  \r\nits attention to the standardisation of programming languages. \r\nSo the Working
  Group submitted  its 1962 Algol report to ISO.ISO, said Hill, decided the report
  wasn't suitable as it \r\nstood. It  wanted a subset, some I/O to go with it, and
  a \r\nstandardised hardware  representation of the language.In response the Working
  Group produced by 1965 three subsets \r\nof the  language plus two proposals for
  I/O. These were put \r\ntogether in a Draft Recommendation: ISO decided not to call
  \r\nthem standards because there  were still arguments about \r\nwhether there should
  be one standard language  rather than \r\nstandards for various languages.The draft
  appeared in April 1967, but it was March 1972 before \r\nscrutiny  of the draft
  was completed and `ISO recommendation \r\nNo 1538: Programming language -- Algol'
  appeared.This, said Hill, \"was an absolute disaster, full of errors and \r\nchanges
  which had been made without consultation\". Hill \r\nhimself was instrumental  in
  rectifying the \"disaster\", along \r\nwith Richard de Morgan and Brian  Wichman.
  Together these \r\nthree formed a new IFIP sub-committee to  consider further \r\nrevisions
  to Algol 60.This sub-committee had a number of sources to draw on. At a \r\n1972
  ISO committee meeting it was agreed that a new edition of \r\nISO Recommendation
  1538 should be produced. The delegates at \r\nthis meeting drew up a list of errors
  in the earlier ISO \r\ndocument, and also drew up a list of questions that ought
  to \r\ngo to the new IFIP sub-committee. There were also  proposals \r\nfrom German
  and Japanese sources, and a number of published  \r\npapers by Algol specialists.The
  IFIP sub-committee was finally left with a number of \r\ndifficulties of  interpretation,
  plus some unsettled \r\nquestions. On these points the  committee had to make its
  own \r\ndecisions.Once all the difficulties had been resolved, the maintenance  \r\ncommittee's
  report was agreed by IFIP Working Group 2.1 and \r\nsubsequently  became known as
  `The Modified Report'.At this point the emphasis of the Society's meeting shifted
  \r\nfrom the  specification to the implementation. The next three \r\nspeakers described
  \ the development of compilers for three \r\nsixties computers, the English  Electric
  KDF9, the Elliott 803 \r\nand the DECsystem-10.Lawford Russell joined English Electric
  in 1960, and after \r\ninitial work  on the Deuce teamed up with Brian Randall to
  \r\nproduce an assembler for  the KDF9, then under development. \r\nBefore the project
  made much progress,  however, the two men \r\nwent to an Algol conference and became
  \"very  excited by it \r\nall\".Deciding on the spot that they must implement Algol
  on the \r\nKDF9, they approached Algol guru Edsger Dijkstra for advice. \r\nThe
  upshot was that  they spent an intensive two weeks study \r\nwith Dijkstra in Holland,
  which  \"led us to an outline of the \r\nbasic structure of the intermediate  language,
  which we \r\ntransposed Algol into for running\".Randall and Russell made two early
  important design decisions. \r\nThe  language would be interpretive, as that was
  what the \r\nusers in their  division of English Electric wanted. And \"we \r\ndecided
  to go for a single  pass translation as we were used \r\nto on the Deuce, which
  allowed you to  do some processing \r\nwhile your cards were being read in\". The
  KDF9 would  be \r\nfaster and would use paper tape, so \"surely we could do some
  \ \r\nprocessing for the translation while the program was being \r\nread in?\".The
  striking aspect of this project was the working conditions \r\nwhich  would be thought
  impossibly primitive today. \"We had no \r\nmachine and very  little information
  about it so we had to do \r\nlots and lots of desk  checking. We produced our logic
  flow \r\ndiagrams and just desk checked  these between us... So the \r\nlogic checking
  got far ahead of the code  testing: some of \r\nthat was good and some of it was
  bad.\"About this time potential KDF9 customers starting asking for \r\ncopies of
  \ the compiler. But it wasn't finished, and \"our flow \r\ndiagrams were only  meant
  for inter-project use. So we thought \r\nwe would need to define a much  more rigid
  sort of meta-\r\nlanguage... then we had to convert all our flow  diagrams to \r\nthis,
  then we had to desk check them again\".The logic flow diagrams were actually delivered
  to one \r\npotential  customer, de Havilland -- \"the first case of a copy \r\nof
  a compiler being  available before the original\".The design of the Algol compiler
  for the Elliott 803 presented \r\na  different set of problems, described by Jeff
  Hillmore. Late \r\nin 1960 a  small group from Elliott went to an Algol \r\nConference
  run by  Dijkstra -- that man again. They returned \r\ndetermined to make Algol 60
  the   advanced  programming \r\nlanguage for the 803. A development team was formed,
  and  \r\nHillmore joined it in November 1961.The team worked with some despatch.
  The first program was \r\ncompiled and  run just three months later, on 15 February
  \r\n1962. Version 1 of the  compiler, using five-hole paper tape \r\ninput/output,
  was available by  November. The time taken to \r\nreach that point, which included
  writing the  user manual, was \r\neight person-years.\"The 803 sold to a lot of
  educational establishments and to \r\nscientific users, and in both of these areas
  there was a need \r\nto process a high  average number of programs in a given \r\nperiod,
  and to reduce to a minimum  the time spent in changing \r\nover from one program
  to another.\"So the design decisions that were made were, first of all, \r\nthe
  system  should be a load-and-go system. You should, at the \r\nstart of a session,
  \ load the compiler, load the dynamic \r\nroutines and the process, compile  and
  run program after \r\nprogram.\"The other decision that was made was that the user's
  program \r\nshould run  at the full speed of the machine. So we wanted a \r\ncompiler
  that would  generate an object program in binary \r\nmachine code which would then
  run,  and we didn't want to \r\ninterpret them. This was a very different decision
  \ to that \r\nmade by the KDF9 people.\"The other decision was that the source text
  should be read \r\nonce only.  So we ended up with a compiler which was designed
  \r\nto operate in two  phases. The compiler converted the Algol \r\nsource to an
  intermediate  binary stream which we called Own \r\nCode, and this was processed
  in the  second internal pass into \r\na binary object program, and that was then
  \ executed at full \r\nspeed.\"Hillmore identified six activities in the compiler
  writing \r\nprocess.  First there was the writing of a lexicon analyser to \r\ntokenise
  the Algol  symbols, taking the hardware \r\nrepresentation and generating these
  tokens,  which made the \r\ncompiler independent of how the program was input.Next
  came the dictionary system for recording identifiers and \r\ntheir properties. Then
  the team decided how the memory space \r\nwas going to be allocated. Fourth, they
  specified the own code \r\nformat. \"Out of those  four parts of the initial activity
  came \r\nthe definition of the Algol 60  subset which would be \r\nimplemented\".The
  final two activities were the specification of the I/O \r\ndefinition  and the writing
  of a high level pseudo-Algol \r\ndefinition of the compiler.The final speaker was
  Richard de Morgan, who gave a \r\npresentation  describing the design of the Algol
  compiler for \r\nthe DECsystem-10. We  have already met de Morgan as one of the
  \r\nIFIP sub-committee that  produced the Modified Report. \r\nEarlier, he had been
  one of the earliest  users of Algol -- he \r\nlearnt it as his first programming
  language while an  \r\nundergraduate at Liverpool University.de Morgan's first task
  at DEC, which he joined in 1969, was to \r\nwork on  the outline design of an Algol-60
  compiler for the \r\nDECsystem-10. The  only languages supplied for it then were
  \r\nFortran and BASIC.de Morgan was working with Professor Nicol Hardiman of \r\nCarnegie-Mellon
  University, and they were given one month to \r\ncomplete the  task.\"We did design
  a system, and the amazing thing is that we \r\ncould do the design down to a fair
  amount of detail in one \r\nmonth. It turned out that Nicol Hardiman's ideas about
  how the \r\nsystem ought to be built and my experience of writing \r\ncompilers
  were more or less compatible.\"We decided that we would do a one pass compiler but
  we would \r\nimplement everything we could in what we conceived to be the \r\nspirit
  of the Algol  60 revised report... Of the things we \r\ncouldn't implement, if we
  thought  they were useful we'd find \r\na way round them and if we didn't think
  they  were useful we \r\nwouldn't implement them.\"The decision to build a one-pass
  compiler created problems. \r\nOne of the  major ones concerned formal parameters,
  \r\nparticularly formal parameters  that are procedures. The \r\nquestion was: how
  do you know when you're going  to call a \r\nformal procedure parameter what its
  parameters are?de Morgan went on: \"Given that we had to have independent \r\ncompilation,
  \ the unit of compilation was either the main \r\nprogram or a procedure. So  we
  had the concept of an external \r\nprocedure: we had to enforce type  checking at
  run-time of the \r\nactual to formal parameter correspondence.\"Another design decision
  was to allow users to do anything they \r\nliked  with formal parameters. They could
  even be used as the \r\ncontrolled  variable in a forced statement, so that you
  could \r\npredict what was going  to happen.Then questions arose about own variables
  and own arrays, which \r\nwere only resolved after much thought.\"We put in a few
  other extras: position, remainder, operator, \r\nwhich we thought very useful. We
  put in `While' as an \r\niterative statement. We  added another type -- non-real
  -- \r\nrather than having some type of   compiler  directive which \r\ntold you
  what precision your reals ought to be.\"The resulting compiler worked well. \"Efficiency
  of the code \r\nwas fairly  good because we put work into getting around the \r\noverhead
  of the  procedure calls by generating access \r\nsequences that were very efficient.
  \ We often ran faster than \r\nFortran, and typically 1.5 to three times  faster
  than Algol \r\n60 on comparable machines.\" Ted NewmanI believe that Blumlein was
  the best electronic engineer that \r\never lived.I first met him during the war
  when, as a young engineer, I \r\nsaw an  advert for someone to do TV tubes and applied
  for the \r\njob. I went  along and there was this very frightening man \r\nwith
  green eyes who  interviewed me -- Blumlein seemed to have \r\nthe greenest eyes
  of anyone I'd seen.He started the interview by asking if I knew anything about  \r\nvector
  analysis. I said I didn't. He said, \"Here are some \r\ncircuits  I want you to
  look at\". He spent a long time making \r\nme look at these  circuits and asking,
  \"How do you think this \r\nworks?\", \"How do you think  that works?\". Then he
  said, \r\n\"Actually I would call that vector  analysis. You might think \r\nthat
  I'm now taking you to the vacancy we've  got in the TV \r\ntube place. You're not
  going to do that. You're going to  work \r\non circuits\".I was 22 at the time I
  started. I was Blumlein's personal \r\ndogsbody,  and had lots of odd things to
  do for him. I saw \r\nBlumlein much more  than I would have expected to, because
  I \r\nwas a lad of not much  importance. He was always Mr Blumlein \r\nto me --
  never Alan -- because he  was the big boss.He created a range of monitors -- they
  were very advanced  \r\nmeasuring oscilloscopes. You could measure the amplitude
  and \r\nwidth of  the pulses very accurately. You could do this by \r\nshifting
  the offset  voltage on the screen, and measuring the \r\nshift on the meter, and
  the  width could be similarly measured \r\nwith a very accurately defined  sawtooth
  scan.The first monitor was called Mohammed, after the founder of \r\nthe  Moslems.
  The Caliphs came after Mohammed in history so \r\nthe later  monitors were called
  Caliphs -- I can remember Ali \r\nand Xerxes, but not  the others. The monitors
  were all \r\nslightly different and Blumlein  expected every one to be \r\ncorrectly
  named; if you got a name wrong you  were in dead \r\ntrouble.He also had names for
  many of his circuits. There was the \r\nCholmondeley  Tweaker, a Featherstonehaugh
  Follower and a St \r\nJohn Something Else.  (These names were pronounced Chumley,
  \r\nFanshaw and Sin-jin.)He believed that circuits had to be calculated. I had a
  little \r\nbook  that I'd calculate various circuits in and then he'd see \r\non
  the  monitor whether the pulse was the same as I'd \r\ncalculated.Blumlein was born
  in 1903. He was in Standard International \r\nfrom 1924  to 1929, when he joined
  Schoenberg's Columbia \r\nrecord organisation,  which was a small company at the
  time. \r\nThe following year he joined  EMI, where he worked till he was \r\nkilled
  in a plane crash in 1942.He filed 128 patents, but he didn't write many papers.
  If \r\nyou've got a  lot of valuable ideas in a commercial firm you \r\ndon't want
  to give them  to everybody else, so you don't write \r\npapers, you file patents.Some
  time after Blumlein's death, in 1947, at an important \r\nmeeting of  the Association
  of Scientific Workers there was an \r\nalmost unanimous  decision that all research
  ought to be done \r\nin Government and not  commercially. I was an idealist at the
  \r\ntime so I tried to get into  Government service at a very \r\nreduced salary.I
  went to the Civil Service Commission, and was interviewed by \r\nHA  Thomas, who
  asked me \"EMI -- isn't that where Blumlein \r\nwas?\". I said  yes, and he then
  sent me to NPL.There was a background to this which I discovered later. At \r\nthe
  time  Turing had got a lot of details, in fact a full \r\nlogical diagram, for a
  \ both a big computer and a small \r\nmachine. The big one Turing thought  was too
  much to tackle: \r\nthe small one was called the Ace Pilot Model.  A number of \r\npeople
  had tried and failed to get the circuits working at  \r\nall, including Turing to
  start with -- he wasn't very good at \r\ngetting  circuits going. I think what happened
  was that HA Thomas, a much maligned man, \r\nthought  it would be a good idea to
  recruit someone who knew \r\nsomething about  circuits of the kind that were necessary
  for \r\ncomputers, and these were  the sort of circuits that Blumlein \r\ncreated.Once
  I was at the NPL, Thomas asked me to recruit other people \r\nwith  this knowledge.
  So Tubsy Clayden was recruited, and then \r\nlater John  Parks and Roger Scantlebury
  (Roger's dad had also \r\nworked at EMI for a  long time).The circuits we produced
  all worked extremely well, and they \r\nwere  derived from Blumlein circuits, so
  there is no doubting \r\nthe influence  of Blumlein on the very reliable Pilot Model
  \r\nAce.Also, Blumlein visited TRE in the forties and met Williams and \r\nhis  colleagues.
  They had not been doing very well with their \r\ncircuits, and  Blumlein showed
  them how to do it. Tom Kilburn \r\nagrees that this  happened. Williams afterwards
  became \r\nProfessor Williams who dealt with  the Manchester computer, \r\nand Kilburn
  joined him from TRE, and from  what I could tell \r\nthe Blumlein-type circuits
  were widely used in TRE.  So once \r\nagain the influence of Blumlein as very great.Blumlein
  was unique. He was highly inventive, and a man who \r\nthought in  a different way
  from his contemporaries. Light \r\nengineering in 1929  dealt almost entirely with
  communication \r\nby voice or code.  Transmission was by wire cable or radio. \r\nI've
  read all the standard  books on communication up to 1945 \r\nthat I can find, and
  none of them  deals in any way with high \r\nspeed pulses. Nor, except for the purely
  \ transmission side, \r\ncould they deal with the tasks posed by television.In the
  communication industry all control and switching \r\nfunctions were  either done
  mechanically or by electrically \r\ncontrolled relays. High  speed was not wanted.
  It was only \r\nrecently, long after the advent of  computers. that \r\nelectronics
  was used. For television and particularly  for \r\nadvanced radars or computers,
  control and switching had to be \r\ndone  electrically. But Blumlein was an iconoclast
  and was \r\nvery inventive:  only such a person could break the necessary \r\nnew
  ground.This article is an edited transcript of a talk given by Ted \r\nNewman to
  \ the Society at the Science Museum on 28 February \r\n1991.Adrian Johnstone   The
  Digital Equipment Corporation (DEC) was formed in \r\n   1957 and is now perhaps
  the second or third largest \r\n   computer company in the world. Remarkably, the
  company is \r\n   still led by the original president, Ken Olsen, who was a \r\n
  \  student at MIT at a key time in computing history. DEC is \r\n   widely credited
  with producing the first desktop \r\n   minicomputer, the PDP-8. The minicomputer
  style of \r\n   computer architecture is very different from the long-\r\n   word
  length machines that dominated early commercial \r\n   computing, but the ideas
  did not spring fully formed from \r\n   the minds of DEC's designers. I hope to
  show here that \r\n   one of the earliest programmable computers constructed in
  \r\n   the United States was the direct parent of the DEC PDP-5, \r\n   -8 and -11
  series of machines as well as many early \r\n   eight- and sixteen-bit microprocessors.Although
  the distinctions are nowadays becoming blurred, \r\ntraditionally computing has
  been divided into three \r\napplication areas: scientific computing with an emphasis
  \r\non floating point arithmetic, commercial computing which \r\nrequires access
  to large databases and real-time \r\ncomputing which requires relatively simple
  processing to \r\nbe performed at the highest speed.  A real-time system \r\nmust
  return results within the timeframe of some \r\nmonitored process -- car engine
  management systems, \r\nflight simulators and the computer inside your washing \r\nmachine
  are all examples of real-time problems. There is \r\nan old joke that defines a
  scientific programmer as one \r\nwho types in a single number, processes it for
  a week and \r\nthen prints a single number. By the same token, a \r\ncommercial
  programmer types in a number and prints out \r\nthe names of five thousand people
  that have the same \r\nnumber, and a real-time programmer doesn't type in any \r\nnumbers
  because embedded systems do not have keyboards.  In many ways real-time computing
  is the Cinderella of the \r\nthree being mainly the province of engineers capable
  of \r\nsqueezing the last ounce of performance from computers that \r\nhave to be
  low cost, because they are to be embedded in some \r\nother product. In the past
  this meant a minicomputer and \r\nnowadays a microprocessor, but in either case
  the traditions \r\nof machine level programming that naturally dominated the \r\npioneering
  days of computing live on in the real-time domain \r\nand there is therefore a strong
  affinity between the \r\nactivities of the Society and the real-time computing world.Since
  embedded systems must be cheap, it might be thought that \r\nreal-time control systems
  are a relatively recent phenomenon. \r\nIn general this is true. To be more specific,
  it was the \r\narrival of minicomputers, especially the PDP-8 in April 1965, \r\nthat
  allowed engineers to seriously consider dedicating an \r\nentire computer to a single
  experiment or instrument. However, \r\nit turns out that one of the first computers
  constructed in \r\nthe United States was a real-time system, and the \r\narchitectural
  design decisions that were taken then formed the \r\ntemplate for the minis and
  micros to come. This machine was \r\nthe Whirlwind. In 1944 the US Navy contracted
  the Masachussets Institute of \r\nTechnology (MIT) to  build an aeroplane simulator
  that would \r\nbe capable of solving the equations of motion of the aeroplane \r\nin
  real time and which could thus be used to investigate \r\ninstability problems in
  aircraft designs of the day. \r\nOriginally an analogue machine was proposed, but
  in 1945 the \r\ndesign turned into a general purpose digital computer. The \r\nlaboratory
  at MIT was renamed the Digital Computer Laboratory \r\nand Maurice Wilkes who had
  many contacts with the MIT team, \r\nsays in his memoirs:   \"by the time I knew
  them they were pillars of digital \r\n    orthodoxy and I did not suspect they had
  an analogue \r\n    past\"The machine was a sixteen-bit single address processor
  -- an \r\narrangement familiar to anybody who has worked with early \r\nminis or
  micros, but in those days to have a machine with only \r\na 16-bit word was heretical.
  Typical word lengths were in the \r\nrange 36 to 40 bits because of the need for
  real number \r\narithmetic precision. No less a figure than von Neumann \r\ncriticised
  the Whirlwind saying that with its short word \r\nlength he was concerned about
  its ability to do anything \r\nuseful at all. However, sixteen bits of precision
  is more than \r\nadequate for most sensing and control applications, and if you
  \r\nmust have more precision you can always perform multiword \r\narithmetic. Interestingly,
  \ on modern machines the word size \r\nis dominated by the need to address large
  amount of memory \r\nrather than the size of the data being manipulated: hence the
  \r\nwidely expected move towards 64-bit architectures such as the \r\nnew MIPS and
  DEC Alpha devices is being driven by the need to \r\ndirectly address more than
  4G byte memory spaces, not the need \r\nto manipulate 64-bit numbers. I cannot resist
  pointing out at \r\nthis stage that von Neumann also had a fight with Edward \r\nTeller
  concerning the UNIVAC LARC (Livermore  Automatic \r\nResearch Computer) contending
  that putting anything more than \r\n10,000 words in a computer would always be a
  waste of \r\nmoney.The real reason that Whirlwind had such a small word size is
  \r\nthat it was bit-parallel at a time when almost all computers \r\nwere bit serial.
  The Elliot 803 in the museum's collection, \r\nfor instance, has at its heart a
  single full adder, through \r\nwhich the two operands are passed one bit per cycle.
  The \r\nWhirlwind processed two sixteen-bit operands in a single \r\ncycle, but
  naturally required sixteen times as much hardware \r\nto do so. Since the Whirlwind
  was being designed for a very \r\nspecific application, it was possible for the
  designers to \r\nmake a detailed analysis of the design constraints. Robert \r\nEverett,
  who was responsible for designing part of the order \r\ncode for the machine had
  these comments about how they arrived \r\nat a 16-bit, one address computer:   \"[Sixteen]
  . . . is a nice binary number, but it did not \r\n   come about arbitrarily. It
  was determined by asking \"What \r\n   is the shortest single-address instruction
  that looks \r\n   reasonable?\" Our analysis of the programs we were \r\n   interested
  in showed that 1000 words was tight and 2000 \r\n   considerably better. That gave
  us eleven bits, and we \r\n   knew that we needed at least 16 instructions; 32 sounded
  \r\n   reasonable, and that gave us five bits more. Therefore \r\n   the sixteen
  was not a binary number, it was the sum of \r\n   two primes.\"Now although I am
  claiming that Whirlwind was architecturally \r\nthe first minicomputer there is
  no doubt that the machine was \r\nanything but miniature physically. Indeed the
  scale of the \r\nproject was staggering. The budget was $1 million per annum \r\nfor
  the years 1945 -- 1950, which must have given Maurice \r\nWilkes pause for thought
  on his visits there. The machine was \r\nlaid out in 2-dimensional form so that
  every part could be \r\nimmediately accessed in case of failure. This led to a very
  \r\nspace-inefficient design requiring one floor of a large \r\nbuilding. The control
  room alone contained fifteen 6-foot \r\nracks along with oscilloscopes and I/O equipment.
  The machine \r\nused specially made valves that cost between $5 and  $10 each, \r\nand
  the laboratory had its own tube shop to make them. Over \r\n5,000 valves and 11,000
  germanium diodes went into the running \r\nsystem. Considering EDSAC had 3,000 valves
  in it and was \r\nreally rather compact, it is quite difficult to see why \r\nWhirlwind
  needed so much floor space. Later on large tubes \r\nwere added to Whirlwind that
  were used purely for display and \r\nWhirlwind is therefore probably the first computer
  to have \r\npurpose designed VDU's attached. Whirlwind has an even \r\nstronger
  claim to be the first computer with a light pen \r\nattached.One important aspect
  of the Whirlwind design was the \r\ninstruction decoder. At the heart of the machine
  was a diode \r\nmatrix that performed the decoding, rather than a set of \r\nrandom
  logic gates. This structured decoder was of course only \r\none step away from a
  microcoded architecture as described by \r\nMaurice Wilkes. When Wilkes visited
  MIT in the 1950's he was \r\nalready thinking about the use of structured as opposed
  to \r\nrandom logic and was shown the Whirlwind which:    \". . . did indeed have
  a centralised control based on the \r\n   use of a matrix of diodes . . . It was
  not, I think, \r\n   until I got back to Cambridge that I realised that the \r\n
  \  solution was to turn the control unit into a computer in \r\n   miniature by
  adding a second matrix to determine the flow \r\n   of control at the micro level
  and providing for \r\n   conditional micro-instructions.\"The Whirlwind was run
  in a military fashion: the machine was \r\nvery thoroughly documented and everybody
  working on the \r\nproject had to produce a biweekly report. The highly \r\ndisciplined
  preventative maintenance programme kept the valve \r\nfailure rate down to 0.1%
  per 1000 hours.By the beginning of 1950 the Whirlwind was running well but \r\nthe
  Navy was tiring of the $1,000,000 annual running budget. \r\nHowever, about that
  time the USSR developed its atomic bomb \r\nand the intercontinental aircraft necessary
  to threaten US \r\nterritory. This was also the time of the Korean war and a time
  \r\nof general paranoia in the US. To detect enemy aircraft flying \r\nlow, a network
  of small radar stations was required, but this \r\nthen presented the problem of
  correlating and presenting a \r\nmass of  information to the military commanders.
  As an \r\nexperiment, Whirlwind was hooked up over Telex lines to a \r\nradar in
  Lexington Massachusetts with some real time \r\ncomputation being performed in the
  MIT lab. This was a great \r\nsuccess, and the airforce took over the project. A
  new \r\ndivision known as the Lincoln Laboratory was created, and the \r\nMIT Digital
  Computer Lab became part of it. Lincoln's primary \r\nresponsibility was the Semi-Automatic
  Ground Air Defence \r\nSystem, otherwise know as SAGE.Whirlwind ran in this role
  until June 30 1959. On of the \r\nproject team, Bill Wolf, rented the machine for
  a dollar a \r\nyear until the late 1970's after which Ken Olsen, the DEC \r\npresident,
  looked after it for a while before transferring it \r\nto the Smithsonian.Probably
  the most lasting contribution Whirlwind made to \r\nmainstream (as opposed to real-time)
  computing history is the development of the ferrite core memory, and it is here
  that \r\nthe link with DEC becomes clear. Early computer memories, \r\nwhether of
  the delay line or storage tube type, were \r\nunsatisfactory both because of their
  bulk and because of \r\nunreliability. There is evidence to show that the development
  \r\nof the Williams Tube in the UK gave us a significant \r\ntechnological lead
  over the US teams, until the arrival of the \r\nferrite core memory. To quote from
  the famous Moore School \r\ncourse of 1946:   \"Several forms of fast internal memory
  have been proposed \r\n   and the one that shows the most promise at the present
  \r\n   time is the electrostatic storage tube. The one on which \r\n   most work
  is being done at the present time by RCA is the \r\n   Selectron, and when perfected
  it will have most of the \r\n   features that are desirable in this type of memory\"The
  Selectron appears to have been the great white hope of the \r\nAmerican designers,
  but it was a long time coming. It was a \r\ncomplex device, difficult to develop
  and would probably have \r\nbeen very expensive to mass produce. The Whirlwind used
  its \r\nown electrostatic storage tube, but these designs could not \r\nmatch the
  elegance of the Williams' tube which was even \r\nlicensed by IBM for use in the
  701. However, all this effort \r\nwas obsoleted at a stroke by J Forrester's work
  on ferrite \r\ncores. In 1952 the first testable cores were received from \r\nGeneral
  Ceramics, and a 16 x 16 matrix was constructed. To \r\ndevelop a full system required
  a computer to test it, so the \r\nMemory Test Computer (MTC) was built: MTC had
  the same \r\nrelationship to ferrite core as the Manchester Mk 1 had to \r\nWilliams
  Tubes. The design team was headed by a recent MIT \r\ngraduate called Ken Olsen.
  The MTC was therefore the first \r\ncomputer equipped with ferrite core memory.
  It was a great \r\nsuccess, and the memory was transferred onto the Whirlwind, \r\nafter
  which the MTBF on memory rose from two hours to two \r\nweeks. At this point the
  tube shop was converted to making \r\ndisplays!The MTC was about as fast as Whirlwind,
  although it was much \r\nmore compact. Since it was not software compatible with
  \r\nWhirlwind, it never became part of the mainstream work of the \r\nlab. The designers
  subsequently moved to the new Lincoln \r\nlaboratory in Lexington, and Olsen began
  work on the TX-0 \r\nwhich aimed to test transistor circuitry and a large 64K \r\nferrite
  memory. The transistors used included the new Philco \r\nSBT100 surface barrier
  transistors which cost $80 each. TX-0 \r\ncontained 3,600 transistors.The TX-0 had
  an 18-bit data word with a sixteen bit address \r\nspace and only four instructions:
  STORE, ADD, JUMP IF LESS \r\nTHAN and OPERATE. The OPERATE instruction included
  commands \r\ncoded on bits that could be combined to produce a large \r\nnumber
  of sub-instructions such as `clear right half of \r\naccumulator' and `shift right'.
  This scheme was to appear \r\nin many subsequent DEC computers up to and including
  the \r\nPDP-8. There were two registers: an accumulator and a live \r\nregister
  used for controlling and buffering I/O transfers. \r\nHowever, there was no interrupt
  mechanism.The TX-0 went from Lincoln to MIT in 1958 and was used for \r\nteaching
  and as a laboratory controller. Later the \r\narchitecture was extended to include
  index registers. The \r\nmachine was in use until 1975 when DEC bought it for use
  in a \r\nmuseum.TX-0 was a rather futuristic looking machine. Olsen had \r\nreceived
  some (no doubt harmlessly intended) criticism over \r\nthe rather homely appearance
  of the MTC, and seems to have \r\ntaken this very much to heart in his subsequent
  systems. He \r\nsupposedly spent some time in electrical utility shops \r\nexamining
  home appliances, and the characteristic toggle \r\nswitches seen on most DEC computers
  up until recent times \r\n(when toggle switches are frowned upon) are apparently
  based \r\non those found on 1950's fridges. Olsen has always been most \r\nconcerned
  about the appearance of DEC products and in some \r\nparts of the company he is
  referred to as the Chief Box \r\nDesigner.The TX-2 was a much larger machine, containing
  22,000 \r\ntransistors. Its principle design goal was efficient I/O. One \r\noption
  might have been to use a separate I/O processor as with \r\nthe IBM channel. This
  was rejected in favour of giving the I/O \r\ncontrollers direct access to main memory
  and having separate \r\nprogram counters with associated program sequences that
  \r\ncontrolled the I/O using the main processor. It was a short \r\nstep from here
  to modern Direct Memory Access using memory \r\nmapped peripheral registers and
  prioritised interrupts, as \r\nseen in nearly all subsequent DEC machines. The echoes
  of this \r\ndesign decision are still very much present today. Intel-style \r\nmicroprocessors
  follow the IBM I/O model, with separate \r\ninstructions for performing I/O, in
  spite of the fact that \r\nthese microprocessors do not usually have independent
  I/O \r\nprocessors. Motorola-style devices, including the Rockwell \r\n65xx family,
  use a very DEC-like arrangement of memory mapped \r\nI/O registers.The TX-2 even
  had some internal parallelism. It has a 36-bit \r\nALU which could be partitioned
  into 4 x 9, 2 x 18, 1 x 36 or \r\neven one 9-bit and one 27-bit ALU operating concurrently.
  The \r\nmachine had separate adders for indexing and program counter incrementing.
  In the 1960's the TX-2 was modified to support \r\nmultiprogrammed timesharing.
  It was finally dismantled in \r\n1977. The construction of the machine was based
  on a few general \r\npurpose circuits mounted in modules running at 5MHz. In 1957,
  \r\nOlsen and two others formed the Digital Equipment Corporation \r\nwith venture
  capital from American Research and Development \r\nand others. Although the original
  aim was to build computers, \r\nthe backers were sceptical and preferred a business
  based on \r\nthe construction of logic modules for laboratory use.  For many years,
  the various series of logic modules were a \r\nmainstay of DEC business, but their
  first computer was shipped \r\nin November 1960. DEC machines have always appealed
  to \r\nengineers and scientists because of their low cost and \r\naccessibility.
  The PDP prefix that was used for all computers \r\nup to the 1978 VAX machines stands
  for Programmable Digital \r\nProcessor, and was used instead of the word `computer'
  \r\nspecifically so that the accountants in DEC's customers' \r\ncompanies would
  not notice that the engineering  teams were \r\nbuying computers, which as everybody
  knows are the sole \r\nprovince of commercial Data Processing shops.  Real-time
  systems, whilst outwardly less exciting than the \r\nlatest Cray or workstation
  in fact account for far more of the \r\ncomputers in the world, both by number of
  units and by shipped \r\nvalue. At a rough count there are fifteen computers in
  my \r\nhome, of which only three have keyboards attached. If my TV \r\nand audio
  hardware were a little less aged, there would be far \r\nmore. So the Whirlwind
  and its small, fast successors have \r\ninherited the Earth, in spite of the scepticism
  of von \r\nNeumann.   Manchester University is, along with Cambridge University
  \r\n   and the  National Physical Laboratory, sure of its place \r\n   in the history
  books for  its pioneering contributions to \r\n   computer technology. Members of
  the  Society were given \r\n   some interesting and revealing insights into the
  \ stories \r\n   behind the design of the early Manchester computers at an \r\n
  \  all-day seminar held at the Science Museum on 23 May \r\n   1991. This report
  \ concentrates on the hardware aspects \r\n   of the five machines described.   Professor
  Tom Kilburn was involved throughout the \r\n   development period,  initially as
  a graduate student \r\n   assisting Professor Freddie Williams. He  was thus an
  \r\n   appropriate choice as the first speaker, and he discussed  \r\n   the development
  of the both the prototype computer and \r\n   the full sized  successor, the Mark
  I.Mark IKilburn told the meeting that the University's involvement \r\nwith  computers
  started when Freddie Williams paid two visit \r\nto the States in  1945 and 1946
  to assess the radar circuitry \r\nbeing developed there. On  the second trip he
  visited Bell \r\nLabs and saw experiments using cathode  ray tubes. The \r\nobjective
  was to remove the ground echoes that occurred  in \r\nall radar systems.Williams
  thought he could see a different use for CRTs -- as \r\nstorage  devices -- and
  started exploring the possibility as \r\nsoon as he got back.  \"We'd been aware
  of digital computers \r\nfor some time then, especially  about the mercury delay
  line, \r\nbut of course the mercury delay line is  not immediate access. \r\nThere
  was a chance of making an immediate access  store, \r\nperhaps, with a cathode ray
  tube. And so it proved.\"After a period of experimentation, a working system was
  \r\ndeveloped, and  the need to test it was to prove the \r\nfoundation of Manchester's
  \ computing reputation. \"The only \r\nway to make sure you've got a cathode  ray
  tube store is to \r\nactually test it with zeroes and ones changing  throughout
  the \r\npattern at machine speed. Various pieces of test gear  were \r\npostulated,
  and Geoff Toothill and I nearly built them, but in \r\nthe  end it turned out that
  it was going to be far easier to \r\nbuild a computer  to do the job properly. We
  set about that at \r\nthe end of 1947 and by the  middle of 1948 we had what we
  \r\ncalled the baby machine.\"The machine attracted a great deal of interest. Among
  the \r\nmany eminent  visitors who found their way to Manchester was \r\nSir Ben
  Lockspeiser of  Ferrantis. His company was already \r\ninvolved in the computer
  project, as  they had supplied a \r\nmagnetic drum for the baby machine. Now Lockspeiser
  \ committed \r\nto fund the manufacture of a full scale machine, with the idea  \r\nof
  subsequently building copies for sale.\"Following Ben Lockspeiser's visit, Geoff
  Toothill and I, \r\naided by Dai  Edwards and Tommy Thomas who joined us in \r\nSeptember
  1948, set about  making a big machine. This machine \r\nworked. It was quite a sizeable
  \ machine and it stayed working \r\nat the University for quite a time, and  was
  used by people \r\nlike Newman, Turing and one or two others.\"It took till November
  1949 to complete the specification for \r\nthe Mark I,  and another 15 months before
  Ferranti was ready \r\nto deliver the machine  to the University.Then, said Kilburn,
  \"It took in those days quite a number of \r\nmonths to  install the machine. The
  Mark I was, like all those \r\nmachines, quite  difficult to maintain. We had trouble
  with \r\nthe machine, and trouble with  the drum, and everyone around \r\nus was
  conscripted to try and keep the  machine working. The \r\nmachine continued to work
  at the University up to I  believe \r\n1959.\"One of our aims was to introduce computers
  to industry. We \r\nallowed  industry to use the machine right from the start, \r\ncharging
  them some  reasonable fee which was I think £50 an \r\nhour.\"While grappling with
  the problems of getting the Mark I to \r\nwork, Kilburn  and his colleagues were
  already thinking ahead \r\nto the next computer.\"It was clear long before the machine
  actually worked that we \r\ncould  improve on the Mark I. For example the Mark I
  had been \r\ninfluenced by the  pure mathematicians like Newman and Turing \r\nthat
  we'd been talking to, so  we turned out special \r\ninstructions to help them. It
  was clear by 1951  that pure \r\nmaths would not be the prime use of the machine:
  scientific  \r\ncomputing would.\"That involved designing a floating point accelerator.
  Together \r\nwith  other improvements suggested by the experience of Mark \r\nI,
  \"we embarked  on a machine called Meg. This became the \r\nFerranti Mercury, and
  was about  30 times more powerful than \r\nthe Mark I at about the same cost.\"Meg
  and MercuryKilburn was followed to the rostrum by Professor Dai Edwards, \r\nwho
  gave  the audience many details of the technological \r\nadvances introduced in
  \ Meg and Mercury.Edwards started by describing the experiences of some of the \r\nearly
  Mark  I users. One user, which was engaged in working \r\nout crystal structures,
  \ found that out of the total machine \r\ntime of 1750 hours, 250 were wasted  due
  to machine faults, \r\nabout 14% of the time they took. Another 10% of  time was
  \r\ndaily routine maintenance, so a fair stretch of machine time  \r\nwent to waste.
  Improving reliability was therefore a priority.\"There were something like 4200
  cathodes in the Mark I, but \r\nonly 1800 in  the Mercury with 1600 crystal diodes.
  Even when \r\nyou add the totals  together there were still fewer elements, \r\na
  19% reduction. That was a  move towards getting a bit of \r\nextra reliability.\"Memory
  sizes on the Mark I were 10K bits for the CRT main \r\nmemory, and  650K bits for
  the drum. These were the same on \r\nthe successor machines,  both Meg and Mercury.
  \"On Meg we used a CRT, on the Mercury made by Ferranti we went \r\nto core.  The
  drum wasn't that reliable, so on the Mercury it \r\nwas smaller and more  of them
  could be connected. Thus if one \r\ndrum went funny you didn't lose  everything.
  It was possible \r\nto attach eight drums, but typically four  were used. The IBM
  \r\n701, a contemporary of our prototype Megs of 1954,  had seven \r\ntimes the
  RAM, but their drums were about 10% smaller.\"We used 10-bit words because that
  was the natural element \r\nthat came out  of the CRT. With a CRT you have to regenerate
  \r\nthe information otherwise  it would decay away, so in the \r\nManchester machines
  there were things  called `scan periods' \r\nwhen we regenerated information, and
  `action  periods' when we \r\nused the store to get something out or put something
  \ in.\"Instructions were 20 bits, so we required two accesses for \r\nthat, and
  if  we were using a 10-digit number you had a third \r\naction. So in three  double
  beats, 60 microseconds, you could \r\ndo arithmetic on 10 bits, which  was done
  in the B-registers.\"In the Meg we just had five bits to define the instruction,
  \r\nso in  modern terminology it was really a risc machine. When \r\nwe went to
  the  Mercury we used seven bits to provide extra \r\ninstructions. Short  operations
  were 60 microseconds. A \r\nfloating point operation with a 40- bit number (a 30-bit
  \r\nfraction and a 10-bit exponent) took 180  microseconds, \r\nmultiplication 300
  microseconds. In the 701 a fixed point  addition or subtraction over 36 bits was
  60 microseconds, but  \r\nmultiplication was 500 microseconds.\"Transistor computerProfessor
  Dick Grimsdale followed Professor Edwards with a \r\ndiscussion of  his work on
  the Manchester prototype transistor \r\ncomputer -- work which  overlapped with
  the development of \r\nMeg/Mercury. This had also emerged  out of a concern for
  \r\nreliability, as transistors, though at the time  much more \r\nunreliable than
  valves, offered a potential future  \r\nimprovement, and also consumed far less
  power.Together with a colleague, Doug Webb, \"we were doing some \r\nexperiments
  \ with STC crystal triodes. We got some of the \r\nbasic circuits, and were  able
  to use them to make a prototype \r\ncomputer. We used a drum because it  was the
  only storage \r\ndevice available. The drum was a delay-type store,  with the \r\ndelay
  caused by the drum rotation\".The prototype was a 48-bit word machine, with four
  spare bits \r\nfor timing  leaving 44 usable bits. The clock rate was 125 \r\nKHz.
  There were 92 point  contact transistors in it, with six \r\npoint-contact diodes
  on average for  each transistor. This \r\nmachine was first run on 16 November 1953,
  \"the  first \r\ntransistor computer in the world\".Having proved the feasibility
  of a transistor computer, \"we \r\ndecided to  take it to pieces and rebuild it.\"The
  full-scale computer had a B-register and an eight word \r\nserial  register. It
  also had a multiplier. That machine was \r\noperational in  1955. It had 150 watt
  power consumption and \r\n250 transistors. It would  add two 44-bit numbers in 1.5
  drum \r\nrevolutions. The drum operated at  3000 rpm. A division sub-\r\nroutine
  took one second, square roots 1.3  seconds.\"History then repeated itself, though:
  \"There was a problem \r\nwith the  unreliability of the transistors\". This was
  solved \r\nby the development of  a different type of component, the \r\njunction
  transistor, initially used  by Grimsdale in an \r\nexperimental small core store.The
  transistor computer even in its original form had enough \r\npotential  to interest
  Metropolitan Vickers. \"The outcome was \r\nthe commercialisation  of the machine
  as the Metrovick 950, of \r\nwhich seven were built. It used  junction transistors
  because \r\nthey were more reliable.\"AtlasThe session between lunch and tea was
  devoted entirely to the \r\nadvances  embodied in the next Manchester computer,
  Atlas, \r\nwith further  presentations from Messrs Kilburn and Edwards.Atlas, as
  Kilburn told the delegates, was a major project for \r\na  university to undertake.
  Value of the first version at \r\ndelivery was  £1.5m, which today is equivalent
  to £15 million. \r\nThe later machine cost  installed at Chiltern would have cost
  \r\n£25m today. Atlas was competitive with  IBM Stretch for the \r\ntitle of most
  powerful computer in the world in its  time, and \r\nwas 80 times as powerful as
  Mercury.\"Atlas introduced many new ideas, such as multiprogramming, \r\njob  scheduling,
  interrupts, virtual storage, paging and \r\noperating systems.  The idea was that
  a job could be input on \r\nany teleprinter and output,  instead of using dedicated
  \r\nperipherals. The task of sorting it out was  given to the \r\nsupervisor, as
  no human knew what was going on.\"Its development ensured that in the Flowers report
  Manchester \r\nwas  designated as one of the three regional university \r\ncomputer
  centres in  the country. Inaugurated on 7 December \r\n1962, Atlas provided a 24
  hour  service to other universities, \r\nincluding Nottingham, Edinburgh and  London,
  and was \r\noperational till 1972, when it was replaced by MU5.Atlas was produced
  in a collaborative effort with the \r\nuniversity's long  established industrial
  partner, Ferranti. \r\n\"We charged 7.5% of the  capital value of machine for \r\nmaintenance\",
  said Kilburn. \"This was  £100,000 a year, or £1 \r\nmillion today. We sorted out
  that the university  would have \r\nhalf the machine time, while Ferranti would
  sell the other  \r\nhalf.\"Taking over the rostrum to describe the technical \r\nspecification
  of  Atlas, Dai Edwards told the audience that \r\nAtlas was built from 10  shelves,
  each with 50 printed circuit \r\nboards. In all it contained 60,000  transistors
  and 300,000 \r\ndiodes.Storage used components that were state-of-the-art at the
  \r\ntime. There  was a fixed store (in today's terminology, a ROM) \r\nof twice
  4096 words  with 0.3 microsecond access; a core \r\nstore, with four units of 4096
  words  and 0.5 microsecond \r\naccess; and a drum of 100K words.\"In the fixed store
  were engineering test programs, peripheral  \r\nstart/stop routines, scheduling
  routines, and 250 additional \r\norders. The  fixed store was novel, cheap and fast.\"In
  1965 a Dataproducts disc added, 31\" in diameter, with 16 or \r\n32  platters on
  a shaft. The larger size had a capacity of 16m \r\nwords, or  100Mb. It consumed
  7.5 Kw and weighed 3500 lbs.The processor had a 48-bit floating-point unit, which
  could be  \r\noverlapped with a 24-bit fixed point unit. In the multiplier, \r\nbits
  were  grouped in threes rather than in twos as on \r\nMercury. Multiply time was
  \ 4.7 microseconds.For I/O Atlas used paper tape equipment, data links over \r\nprivate
  lines  at 60-100 kcps, and also card equipment.MU5Finally, Professor Derrick Morris
  told the audience about the \r\nlast of  the pioneering Manchester machines. which
  in the more \r\nprosaic computing  times of the late sixties was known simply \r\nas
  MU5.This successor to Atlas was first conceived in 1966. The \r\nUniversity won
  \ support from both the SRC and ICL in 1967, and \r\nhad built up a joint  design
  team of 20 by the following year, \r\nwith 11 from the University,  five from ICL
  and four from the \r\nSRC.The objective of the new machine was to achieve 20 times
  the  \r\nthroughput of Atlas, of which seven times was to come from \r\nimproving
  the  technology, two times from the high level \r\nlanguage architecture, and two
  \ times from the overall system \r\narchitecture.Unlike the other Manchester machines,
  MU5 was conceived as a \r\nrange of  three machines. The first was to be a small
  machine \r\nof around the cost  of a DEC PDP-11. The second was to be a \r\nhigh-end
  scientific machine. The  third was to be a \r\nmultiprocessor. Of these, only the
  second was actually  built.\"The most interesting technical aspect of MU5 was the
  \r\nassociative store.  This was as a result of an analysis of the \r\nAtlas software,
  especially  the instruction code. We learnt \r\nsomething about the frequency of
  use of  operands and control \r\nstructures. The order code accommodated string
  \ functions and \r\nvector functions.\"The basic instruction was 16 bits, though
  there were some 32-\r\nbit  variants also. There were no conventional registers
  (such \r\nas the block  of 128 B-registers on Atlas).MU5 was heavily pipelined --
  about five stages at 50ns per \r\nstage. The  secondary pipeline had 10 instructions.
  The local \r\nstore was 250ns, so  there was a wide access path to keep \r\nsystem
  going, with eight  instructions in it.Membership of the Society has risen above
  the 300 mark.Our new chairman, Graham Morris, is the third former BCS president
  \r\nto join the committee. The others are our immediate past chairman, \r\nEwart
  Willey, and Professor Sandy Douglas. The number will rise to \r\nfour in October
  when Roger Johnson takes office as the 1992-93 President.Doron Swade is planning
  to resuscitate the Totalisator Working Party \r\nnow that his heavy workload commemorating
  the bicentenary of the birth \r\nof Charles Babbage is finished.We regret to record
  the news that one of computing's best-known pioneers, \r\nGrace Hopper, died on
  New Year's Day at the age of 85. \r\nRear-Admiral Hopper had many innovative software
  developments to her name, \r\nthough perhaps she is best known for introducing the
  word \"bug\" into computer \r\nterminology, when she discovered that a failure of
  the Harvard Mark I computer \r\nwas caused by a moth.Computing anniversaries in
  1992 include:375th: Napier's invention of the primitive calculating device known
  as \r\nNapier's Bones in 1617100th: Herman Hollerith's entry into business as the
  Hollerith Electric \r\nTabulating System in 1892, following the success of his automation
  of the \r\nprocessing of the 1890 US census30th: launch of the Ferranti Orion in
  196225th: IBM's introduction of the binary synchronous communications protocol in
  196725th: installation of the first cash dispenser in the UK, also in 196710th:
  the issuing of a licence to Mercury Communications in 19825th: launch of the IBM
  PS/2 in 1987.John Sinclair, ChairmanIn the last issue of Resurrection I reported
  that the \r\nprocessor was operational. Since then, we have made steady \r\nprogress
  towards our goal of restoring it to \"as new\" \r\ncondition, as a result of a lot
  of hard if unglamorous work. \r\nThe working party members put in 32 sessions of
  restoration \r\nduring 1991.The processor is now exceptionally reliable -- indeed,
  I \r\ncannot remember the last logic failure. We did have a store \r\nproblem in
  the summer, when the room temperature was around 80 \r\ndegrees (neither the room
  nor the processor has any air \r\nconditioning).All the peripherals are now operational,
  including the 35mm \r\nfilm handlers, and reliability is steadily improving. The
  film \r\nhandlers were thick with grime when we got them, and to start \r\nwith
  we were discovering new faults every time we switched \r\nthem on, but we have now
  got past that point.The major advance since the last newsletter has been the \r\nacquisition
  of a new battery, generously donated by the RAF to \r\nthe Science Museum after
  we tracked down the appropriate \r\nstores unit and paid them a visit. (The batteries
  are still \r\nbeing made for use in aircraft like the Nimrod.)This was the first
  time that any member of the working party \r\nhad seen a brand new battery: the
  normal procedure with \r\ndefective batteries when the Elliotts were in use was
  to \r\nreplace the faulty cell or cells. This was principally on \r\ngrounds of
  cost -- the last time I looked each cell cost \r\naround £70.The new battery has
  helped a great deal. Previously, we had to \r\nput the old battery on a charge for
  an hour before we could \r\nswitch the processor on, as it would not otherwise cope
  with \r\nthe surge of power.Other acquisitions include a collection of Creed teleprinter
  \r\nparts, acquired by working party member George Bradley from an \r\nengineer
  who used to work with Creed, and had been storing \r\nthem in his garage since the
  company discontinued production. \r\nThese will be useful for the Pegasus as well,
  and we should \r\nnow be able to keep the teleprinters running on both machines
  \r\nfor a considerable time.At the Open Day, we were promised a complete additional
  803 -- \r\na major surprise, as we thought that our machine plus the \r\nincomplete
  one in the Science Museum store were the only \r\nsurviving examples.Adrian Johnstone,
  ChairmanThe Working Party, having restored the museum's original PDP-8 \r\nto its
  full glory, has been concentrating its efforts on a \r\nPDP-12. This machine is
  rather a surprise to anyone that \r\nassociates DEC with small machines, firstly
  in that it is \r\nrather large, and secondly in that it is green. I cannot, off
  \r\nhand, think of any other green production computers (I \r\ndiscount the Elliot
  401 languishing in the corner as it was \r\nnever mass produced) and am sure that
  the particular \r\ncombinations of day-glo and olive drab employed here will not
  \r\nbe seen again in our lifetimes. The 12 is an odd machine in may other ways.
  It is something  /of \r\na specialist device, being equipped as standard with a
  bay of \r\nAnalogue to Digital Converters and a console VDU. Internally, \r\nit
  is a hybrid of a PDP-8 and a LINC (Laboratory Instrument \r\nComputer) which was
  originally demonstrated at MIT in 1961. \r\nThe LINC was a great influence on the
  design of the DEC PDP-4 \r\nand PDP-5, and therefore of the 5's successor the PDP-8.
  The \r\noriginal LINC machines were constructed using DEC supplied \r\nlogic modules,
  so it was natural for DEC to take over \r\nproduction from MIT. Subsequently a two
  processor machine, the \r\nLINC-8 was designed which could execute LINC and PDP-8
  \r\ninstructions in parallel, and then the PDP-12 which could \r\nexecute either
  LINC or -8 instructions but not at the same \r\ntime.About 1000 PDP-12's were made,
  and many were sold to hospitals \r\nand other medical institutions. Our machine
  was used for \r\ndiagnosis and research into hearing and speech disorders. A \r\nspeech
  synthesiser was used to play back syllables to the \r\nguinea pig in a controlled
  way. This system, complete with \r\nsoftware is now restored, and can make various
  burbling and \r\nwhistling noises. The machine was never used for full \r\nconnected
  speech, so it cannot easily be persuaded to hold a \r\nconversation, but we plan
  to use some public domain text-to-\r\nphoneme ftware to build some sample sentences
  for play back. \r\nThis is a major undertaking, and I would be pleased to hear \r\nfrom
  programmers with an interest in speech synthesis. I have \r\nbuilt a small phoneme
  based speech synthesiser for use on my \r\nown machines on which the text-to-speech
  programs have been \r\ndemonstrated, so most of the ingredients are already \r\navailable.The
  Working party has also acquired some PDP-11 equipment \r\nwhich will shortly be
  transferred to the museum for \r\nrestoration. The haul includes what is probably
  one of the \r\nfirst PDP-11's to be sold in this country. Unfortunately the \r\nmachine
  is showing signs of {\\em rust} of all things, so \r\nconsiderable work may be required
  before it may be safely \r\nswitched on.Tony Sale, ChairmanThe Working Party took
  the major decision last summer to focus \r\nits efforts more sharply by concentrating
  on the emulation of \r\nold computers, and particularly the computers in the Society's
  \r\ncollection. Software in the round had proved to be too large a \r\nsubject.As
  a result, we are now known as the Software and Emulators \r\nWorking Party. At the
  same time, I succeeded Martin Campbell-\r\nKelly as chairman.We have made considerable
  progress since then. We have spent \r\nsome time studying the possibility of developing
  standard file \r\nformats for paper tape emulation on floppy discs -- for \r\ntransferring
  data and programs from tape to disc for use in \r\nemulations and vice versa. We
  have  eveloped a firm proposal \r\nwhich we are now considering in more detail.We
  have also spent some enjoyable hours testing Chris Burton's \r\n\"flight simulator\"
  of Pegasus. Some explanation is needed \r\nhere, as the flight simulator concept
  is an important one \r\nwhich will be of interest to everyone attempting conservation
  \r\nand restoration of historic computers.The \"flight simulator\" is a piece of
  software that not only \r\nemulates the instruction set of the target computer,
  but also \r\nemulates the person-machine interaction using graphics. You \r\ncould
  say it conserves the persona of the machine in software.Thus Chris Burton's simulator
  shows a pictorial representation \r\nof the front face of a Pegasus with its CRTs,
  lights and \r\nswitches working in real time when a program is run. (A hand \r\nemerges
  from behind the screen to change the switch settings \r\nwhen this is required!)
  It also shows the holes punched in the \r\npaper tape that is being used.Chris'
  simulator has now been extensively tested and debugged, \r\nand has been verified
  by Derek Milledge against our own \r\nPegasus. Some of our older members are now
  using it to \r\nredevelop programs they wrote when Pegasus was a new machine.A second
  flight simulator is being written by Peter Onion for \r\nour Elliott 803, and this
  is now nearing completion. This, \r\nlike the Pegasus program, will run on any PC
  that has VGA \r\ngraphics.Writing simulators is as you can imagine very time-consuming.
  \r\nAnother thing we have been looking at is the development of a \r\ntoolset to
  enable these programs to be written more easily.John Cooper, ChairmanIn my last
  report I described how we had succeeded in getting \r\nPegasus working again. Getting
  from that point to a condition \r\nwhere the system would be reliable enough for
  continuous daily \r\nuse has involved at least as much work again.There has been
  a sustained effort over the past year to \r\nimprove reliability, involving 34 sessions
  of work by Working \r\nParty members. The major achievement has been the complete
  \r\nrefurbishment of the margin control panel.This is a panel inside the power supply
  unit that allows you \r\nto change the voltages within the machine gradually until
  a \r\ncomponent within the computer fails, and then to identify and \r\nrectify
  the cause of failure. Getting it into full working \r\norder was a major job. The
  panel will help us greatly in our \r\ngoal of restoring Pegasus to routine operational
  condition, \r\nand we are now embarking on a programme of work designed to \r\nachieve
  this.We are keen that this work should have an educational as well \r\nas a functional
  value, and are actively encouraging younger \r\nmembers of the Society to join us
  so they can familiarise \r\nthemselves with the logic and operation of Pegasus.
  Anyone \r\ninterested should contact myself or Tony Sale and we'll \r\narrange a
  meeting. No previous experience of Pegasus or any \r\nsimilar computer is required.We
  also had a problem with the drum, which we identified using \r\nthe margin control
  system though it proved not to be related \r\nto voltage changes. It took us a long
  time to track down the \r\nfault, which turned out to be a bad joint inside the
  drum \r\ncase.We have completely refurbished the package tester, which also \r\nhad
  a major fault. This is an aid to repairing broken packages \r\n- circuit boards
  - and was supplied with the system.Away from the machine, we have made further progress
  in \r\ncataloguing our collection of spares. We are also in the \r\nprocess of cataloguing
  the software, and copying it so that we \r\nhave duplicate tapes of everything.Chris
  Burton has produced a Pegasus emulator which runs on an \r\nIBM style computer with
  VGA graphics. It emulates both the \r\nfunctions and operation of the machine, and
  presents a most \r\nrealistic view of the console in colour, with a full set of
  \r\nworking handswitches that can be manipulated via the IBM \r\nkeyboard. This
  is a very fine piece of work.We also now have available a paper tape editing set
  for use on \r\nan IBM PC. This allows the user to create programs and text \r\nusing
  a standard editor or word processor, with conversions to \r\nand from five hole
  Pegasus tape being performed automatically.Robin Shirley, ChairmanInterest in the
  activities of the S-100 group has steadily \r\nbeen increasing. A lot of people
  have been contacting us after \r\na news item about our activities appeared in Computer
  Shopper \r\nmagazine. We also had a much more productive Open Day than in \r\n1990,
  which apart from providing us with some interesting \r\ncontacts also produced some
  bits and pieces of useful \r\nequipment. Membership of the Working party is now
  between 10 \r\nand 20. We have acquired a Dynabyte machine, complete with \r\ndocumentation,
  which was on view at the Open day. Our display \r\nthen was similar to the 1990
  show. I am currently exploring \r\nthe possibility of acquiring at least one Altair,
  which is of \r\nparticular interest to us as it was the original S-100 bus \r\nmachine.Many
  of the people who have contacted us have specific \r\ninterests. For example, one
  man based in Carlisle has a \r\ncollection of Triumph-Adler machines -- he ran the
  Triumph-\r\nAdler user group for a while. Another has a good collection of \r\nHewlett-Packard
  desktops. A third used to run the Lynx User \r\nGroup.This leads to the thought
  that we should perhaps create a \r\nnumber of sub-working parties to cater for each
  of these \r\ninterests, all linked to the parent group in a tree-like \r\nstructure.
  Our working party does not have the same obvious \r\nfocal point of interest as
  the Pegasus and Elliot groups. I am \r\ncontemplating writing a news sheet to keep
  all our members \r\ninformed of the many different interests within the Working
  \r\nParty, if this is felt to be worthwhile.5 October 1992  In steam dayOctober
  1992  Evening meeting2 November 1992  In steam day19 November 1992  Society Open
  Day26 November 1992  Evening meeting7 December 1992  In steam dayIn Steam Days start
  at 10 am and finish at 5 p.m. Members are \r\nrequested to let the secretary know
  before coming, \r\nparticularly if bringing visitors. Contact him on 071-938 \r\n8196.Members
  will be notified about the contents of the evening \r\nmeetings once the Committee
  has finalised the 1992-93 \r\nprogramme. All the evening meetings take place in
  the Science \r\nMuseum Lecture Theatre and start at 5.30pm.[The printed version
  carries contact details of committee members]Chairman    Graham Morris FBCS Secretary  
  Tony Sale FBCS Treasurer   Dan Hayton Science Museum representative   Doron SwadeChairman,
  Pegasus Working Party   John Cooper MBCSChairman, Elliott 803 Working Party   John
  SinclairChairman, DEC Working Party   Dr Adrian JohnstoneChairman, S100 bus Working
  Party   Robin ShirleyEditor, Resurrection   Nicholas Enticknap Archivist   Harold
  Gearing Committee membersDr Martin Campbell-KellyGeorge DavisProfessor Sandy Douglas
  CBE FBCSChristopher HipwellDr Roger Johnson FBCSEwart Willey FBCSPat WoodroffeThe
  Computer Conservation Society (CCS) is a co-operative \r\nventure between the British
  Computer Society and the Science \r\nMuseum of London.The CCS was constituted in
  September 1989 as a Specialist \r\nGroup of the British Computer Society (BCS).
  It thus is \r\ncovered by the Royal Charter  and charitable status of the \r\nBCS.The
  aims of the CCS are toMembership is open to anyone interested in computer \r\nconservation
  and the history of computing.The CCS is funded and supported by, a grant from the
  BCS, fees \r\nfrom corporate membership, donations, and by the free use of \r\nScience
  Museum facilities. Membership is free but some charges \r\nmay be made for publications
  and attendance at seminars and \r\nconferences.There are a number of active Working
  Parties on specific \r\ncomputer restorations and early computer technologies and
  \r\nsoftware. Younger people are especially encouraged to take \r\npart in order
  to achieve skills transfer."
